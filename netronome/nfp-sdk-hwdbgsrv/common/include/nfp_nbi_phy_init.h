/**
 * Copyright (C) 2013-2014 Netronome Systems, Inc.  All rights reserved.
 *
 * @file nfp_nbi_phy_init.h
 * generated by test revision e464a374d29c+
 * Initialization code for the nbi phy, supports all common speeds
 *
 *
 */
#ifndef __NFP_NBI_PHY_INIT_H__
#define __NFP_NBI_PHY_INIT_H__

#include <stdio.h>

#include "nfp_nbi_phy_vsemi.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Serdes parameters
 */
struct nfp_nbi_phy_params {
    const struct nfp_nbi_phy_config *phy_config;
    const char *module[4];
    int island;
    int group;
    int lane;
    int bitrate;
    int mode[4];
    int mixmode;
};

enum { NFP_NBI_PHY_1P25GBPS=0x1,
       NFP_NBI_PHY_10P3125GBPS=0x2,
       NFP_NBI_PHY_12P5GBPS=0x3,
};

struct TXIODRIVER_params {
    uint32_t TXDRV_HLEV;
    uint32_t TXDRV_LEVN;
    uint32_t TXDRV_LEVNM1;
    uint32_t TXDRV_LEVNM2;
    uint32_t TXDRV_LEVNP1;
    uint32_t TXDRV_SLEW;
};

struct CMNREFCKBUF_TERM_100OHM_params {
    uint32_t CMNREFCKBUF_TERMHIZ_MUXD0;
    uint32_t CMNREFCKBUF_TERMHIZ_MUXD1;
};

struct RXEQ_params {
    uint32_t RXCALEQ_DCGAIN;
    uint32_t RXCALEQ_LOFREQAGCGAIN;
    uint32_t RXCALEQ_HIFREQAGCCAP;
    uint32_t RXCALEQ_DFEPSTAPGAIN;
    uint32_t RXCALEQ_DFEPSTAPF3DB;
    uint32_t RXCALEQ_DFETAP1GAIN;
    uint32_t RXCALEQ_DFETAP2GAIN;
    uint32_t RXCALEQ_DFETAP3GAIN;
    uint32_t RXCALEQ_DFETAP4GAIN;
    uint32_t RXCALEQ_LOCWREN;
};

// name: ate_lb_buf_10p3125gbs_156p25_adapt_100ohm
// description: Initialize phy at 10.3125gbps with 100ohm resistor
int sequence_ate_lb_buf_10p3125gbs_156p25_adapt_100ohm(struct nfp_serdes *serdes, int group,
                                                       struct TXIODRIVER_params txiodriver[4],
                                                       struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                                                       struct RXEQ_params rxeq[4]);
// name: ate_lb_buf_12p5gbs_156p25m_adapt_100ohm
// description: Initialize phy at 12.5gbps with 100ohm resistor
int sequence_ate_lb_buf_12p5gbs_156p25m_adapt_100ohm(struct nfp_serdes *serdes, int group,
                                                     struct TXIODRIVER_params txiodriver[4],
                                                     struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                                                     struct RXEQ_params rxeq[4]);
// name: ate_lb_buf_1p25gbs_156p25m_adapt_100ohm
// description: Initialize phy at 1.25gbps with 100ohm resistor
int sequence_ate_lb_buf_1p25gbs_156p25m_adapt_100ohm(struct nfp_serdes *serdes, int group,
                                                     struct TXIODRIVER_params txiodriver[4],
                                                     struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                                                     struct RXEQ_params rxeq[4]);
// name: ate_lb_ext_1p25gbs_156p25M_100ohm
// description: Initialize phy at 1.25gbps with external loopback
int sequence_ate_lb_ext_1p25gbs_156p25M_100ohm(struct nfp_serdes *serdes, int group,
                                               struct TXIODRIVER_params txiodriver[4],
                                               struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                                               struct RXEQ_params rxeq[4]);
// name: ate_lb_ext_10p3125gbs_156p25_adapt_100ohm
// description: Initialize phy at 10.3125gbps with external loopback
int sequence_ate_lb_ext_10p3125gbs_156p25_adapt_100ohm(struct nfp_serdes *serdes, int group,
                                                       struct TXIODRIVER_params txiodriver[4],
                                                       struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                                                       struct RXEQ_params rxeq[4]);
// name: ate_lb_ext_12p5gbs_156p25m_adapt_100ohm
// description: Initialize phy at 10.3125gbps with external loopback
int sequence_ate_lb_ext_12p5gbs_156p25m_adapt_100ohm(struct nfp_serdes *serdes, int group,
                                                     struct TXIODRIVER_params txiodriver[4],
                                                     struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                                                     struct RXEQ_params rxeq[4]);
// name: rxadapt
// description: Run RX adaptation
int sequence_rxadapt(struct nfp_serdes *serdes, int group,
                     struct RXEQ_params rxeq[4]);

int sequence_rxadapt_start(struct nfp_serdes *serdes, int group, int lane);

/*
 * Initialize Serdes
 * @ingroup nfp6000-only
 *
 * Initialize the serdes for operation at the speed specified in
 * params.  Set the Tx tuning values from txiodriver.  Set the Rx
 * tuning values from rxeq.  This function should be followed by Rx
 * adaptation when an Rx signal is present.
 *
 * @param serdes Serdes handle
 * @param params Parameter struct (see  nfp_nbi_phy_params)
 * @param cmnrefckbuf_term_100ohm 100 Ohm Termination parameters
 * @param txiodriver Tx lane tuning values
 * @param rxeq Rx lane tuning values
 */
int nfp_nbi_phy_serdes_init(struct nfp_serdes *serdes, struct nfp_nbi_phy_params *params,
                            struct CMNREFCKBUF_TERM_100OHM_params cmnrefckbuf_term_100ohm,
                            struct TXIODRIVER_params txiodriver[4],
                            struct RXEQ_params rxeq[4]);


#ifdef __cplusplus
}
#endif
#endif
