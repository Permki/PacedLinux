/*
 * Copyright (C) 2013, Netronome Systems, Inc.  All rights reserved.
 *
 * Disclaimer: this file is provided without any warranty
 * as part of an early-access program, and the content is
 * bound to change before the final release.
 */

#ifndef NFP6000_PCIE_H
#define NFP6000_PCIE_H

/*================================================================*/
/* TGT 9                                                          */

/*----------------------------------------------------------------*/
/* CPP Address Map (CPP_BASE = IMB translation: island + indexes) */

/* CPP_BASE + NFP_PCIE_SRAM */
#define NFP_PCIE_SRAM                                         (0x000000)
/* CPP_BASE + NFP_PCIE_IM + (nfp_im.h) */
#define NFP_PCIE_IM                                           (0x010000)
/* CPP_BASE + NFP_PCIE_EM + (nfp_em.h) */
#define NFP_PCIE_EM                                           (0x020000)
/* CPP_BASE + NFP_PCIE_BAR + NFP_PCIE_BAR_* */
#define NFP_PCIE_BAR                                          (0x030000)
/* CPP_BASE + NFP_PCIE_DMA + NFP_PCIE_DMA_* */
#define NFP_PCIE_DMA                                          (0x040000)
/* CPP_BASE + NFP_PCIE_DMADESC + NFP_PCIE_DMADESC_* */
#define NFP_PCIE_DMADESC                                      (0x050000)
/* CPP_BASE + NFP_PCIE_DMAMSIX + NFP_PCIE_DMADESC_* */
#define NFP_PCIE_DMAMSIX                                      (0x060000)
/* CPP_BASE + NFP_PCIE_QCTLR[256] + (nfp_qctlr.h) */
#define NFP_PCIE_Q(_x)                                        (0x080000 + ((_x) & 0xff) * 0x800)

/*----------------------------------------------------------------*/
/* XPB Address Map (XPB_BASE = NFP_XPB_ISLAND(island))          */

#define PCIEX_BASE                                            (0xa0000)

/* XPB_BASE + NFP_PCIEX_COMPCFG + NFP_PCIEX_COMPCFG_* */
#define NFP_PCIEX_COMPCFG                                     (PCIEX_BASE + 0x000000)
/* XPB_BASE + NFP_PCIEX_Q_ECC + (nfp_ecc.h) */
#define NFP_PCIEX_Q_ECC                                       (PCIEX_BASE + 0x010000)
/* XPB_BASE + NFP_PCIEX_SRAM_ECC + (nfp_ecc.h) */
#define NFP_PCIEX_SRAM_ECC                                    (PCIEX_BASE + 0x020000)
/* XPB_BASE + NFP_PCIEX_IM + (nfp_im.h) */
#define NFP_PCIEX_IM                                          (PCIEX_BASE + 0x030000)
/* XPB_BASE + NFP_PCIEX_PF + NFP_PCIEX_PF_* */
#define NFP_PCIEX_PF                                          (PCIEX_BASE + 0x100000)
/* XPB_BASE + NFP_PCIEX_RC + NFP_PCIEX_RC_* */
#define NFP_PCIEX_RC                                          (PCIEX_BASE + 0x110000)
/* XPB_BASE + NFP_PCIEX_LM + NFP_PCIEX_LM_* */
#define NFP_PCIEX_LM                                          (PCIEX_BASE + 0x120000)
/* XPB_BASE + NFP_PCIEX_VF + NFP_PCIEX_VF_* */
#define NFP_PCIEX_VF(_x)                                      (PCIEX_BASE + 0x130000 + ((_x) & 0xff) * 0x1000)

/*----------------------------------------------------------------*/
/* CPP SRAM Address Map                                           */

#define NFP_PCIE_SRAM_MSIX                                    (0x0000)
#define NFP_PCIE_SRAM_EXPLICIT(_x)                            (0x1000 + (0x80 * ((_x) & 0xf)))
#define NFP_PCIE_SRAM_SCRATCH                                 (0x2000)

/*================================================================*/


/* HGID: 60515d2e075a */

#ifndef NFP6000_LONGNAMES

/*----------------------------------------------------------------
  Register: PCIeToCppExpansionBAR[3]_[8] - PCIe to CPP Translation BAR for Physical Function BAR X
    Bits: 31:29 MapType(rw) - Map Type
    Bits: 28:27 LengthSelect(rw) - Used to select the weighting of the CPP length field.
    Bits: 26:23 Target_BaseAddress(rw) - MapType 0, 1 and 2 this field specifies TargetID, otherwise upper portion of Base Address.
    Bits: 22:21 Token_BaseAddress(rw) - MapType 0 and 1 this field specifies CPP Token, otherwise upper portion of Base Address.
    Bits: 20:16 Action_BaseAddress(rw) - MapType 0 this field specifies Action, otherwise upper portion of Base Address.
    Bits: 15:0  BaseAddress(rw) - Base address. Each mapping uses a varying number of bits, always starting at the most significant bit. Remaining least significant bits are ignored.
*/
#define NFP_PCIE_BAR_P2C(_x, _y)                             (0x00000000 + (0x20 * ((_x) & 0x3)) + (0x4 * ((_y) & 0x7)))
#define   NFP_PCIE_BAR_P2C_MAP_TYPE(_x)                      (((_x) & 0x7) << 29)
#define   NFP_PCIE_BAR_P2C_MAP_TYPE_of(_x)                   (((_x) >> 29) & 0x7)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_FIXED                  (0)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_BULK                   (1)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_TARGET                 (2)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_GENERAL                (3)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_EXPLICIT0              (4)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_EXPLICIT1              (5)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_EXPLICIT2              (6)
#define     NFP_PCIE_BAR_P2C_MAP_TYPE_EXPLICIT3              (7)
#define   NFP_PCIE_BAR_P2C_LEN(_x)                           (((_x) & 0x3) << 27)
#define   NFP_PCIE_BAR_P2C_LEN_of(_x)                        (((_x) >> 27) & 0x3)
#define     NFP_PCIE_BAR_P2C_LEN_32BIT                       (0)
#define     NFP_PCIE_BAR_P2C_LEN_64BIT                       (1)
#define     NFP_PCIE_BAR_P2C_LEN_0BYTE                       (3)
#define   NFP_PCIE_BAR_P2C_TARGET(_x)                        (((_x) & 0xf) << 23)
#define   NFP_PCIE_BAR_P2C_TARGET_of(_x)                     (((_x) >> 23) & 0xf)
#define   NFP_PCIE_BAR_P2C_TOKEN(_x)                         (((_x) & 0x3) << 21)
#define   NFP_PCIE_BAR_P2C_TOKEN_of(_x)                      (((_x) >> 21) & 0x3)
#define   NFP_PCIE_BAR_P2C_ACTADDR(_x)                       (((_x) & 0x1f) << 16)
#define   NFP_PCIE_BAR_P2C_ACTADDR_of(_x)                    (((_x) >> 16) & 0x1f)
#define   NFP_PCIE_BAR_P2C_BASE(_x)                          (((_x) & 0xffff) << 0)
#define   NFP_PCIE_BAR_P2C_BASE_of(_x)                       (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PCIeToCppExpansionBARVf[3] - PCIe to CPP Translation for Virtual Function BARs
    Bits: 31:30 LengthSelect(rw) - Used to select the weighting of the CPP length field.
    Bits: 29:26 Target(rw) - Specifies Target ID.
    Bits: 25:24 Token(rw) - Specifies CPP Token.
    Bits: 18:0  BaseAddress(rw) - Base address. Uses a varying number of base address bits, depending on the VF BAR aperture, always starting at the most significant bit of the BaseAddr. Remaining least significant bits of BaseAddr are ignored.
*/
#define NFP_PCIE_BAR_VF_P2C(_x)                              (0x00000060 + (0x4 * ((_x) & 0x3)))
#define   NFP_PCIE_BAR_VF_P2C_LEN(_x)                        (((_x) & 0x3) << 30)
#define   NFP_PCIE_BAR_VF_P2C_LEN_of(_x)                     (((_x) >> 30) & 0x3)
#define     NFP_PCIE_BAR_VF_P2C_LEN_32BIT                    (0)
#define     NFP_PCIE_BAR_VF_P2C_LEN_64BIT                    (1)
#define     NFP_PCIE_BAR_VF_P2C_LEN_0BYTE                    (3)
#define   NFP_PCIE_BAR_VF_P2C_TARGET(_x)                     (((_x) & 0xf) << 26)
#define   NFP_PCIE_BAR_VF_P2C_TARGET_of(_x)                  (((_x) >> 26) & 0xf)
#define   NFP_PCIE_BAR_VF_P2C_TOKEN(_x)                      (((_x) & 0x3) << 24)
#define   NFP_PCIE_BAR_VF_P2C_TOKEN_of(_x)                   (((_x) >> 24) & 0x3)
#define   NFP_PCIE_BAR_VF_P2C_BASE(_x)                       (((_x) & 0x7ffff) << 0)
#define   NFP_PCIE_BAR_VF_P2C_BASE_of(_x)                    (((_x) >> 0) & 0x7ffff)
/*----------------------------------------------------------------
  Register: PCIeExplicitCmd[4]_[4]_PCIeExplicitCmdBar0 - PCIe to CPP Explicit Command BAR 0
    Bits: 31:30 SignalType(rw) - Signal type to expect from CPP target. Set 1 bit for each signal expected. If 0 this implies the PCIe component should expect no CPP signal and will complete the PCIe request immediately, potentially before the CPP request completes. This use case is reserved for 3rd party Mastering and Signaling. Ensure all Explicit CPP Command fields (Data/Signal Master, Data/Signal Ref) are configured properly for the intended Master/Target combination.
    Bits: 29:28 Token(rw) - CPP command token
    Bits: 23:0  Address(rw) - This field represents bits [39:22] of CPP command address, starting with the msb and truncating unnecessary lsb bits, depending on the size of the aperture. See figure 2.2 for more detail of address bit muxing.
*/
#define NFP_PCIE_BAR_PCIeExplicitCmd_P2CX0(_x, _y)           (0x00000080 + (0x40 * ((_x) & 0x3)) + (0x10 * ((_y) & 0x3)))
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX0_SIGTYPE(_x)     (((_x) & 0x3) << 30)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX0_SIGTYPE_of(_x)  (((_x) >> 30) & 0x3)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX0_TOK(_x)         (((_x) & 0x3) << 28)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX0_TOK_of(_x)      (((_x) >> 28) & 0x3)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX0_ADDR(_x)        (((_x) & 0xffffff) << 0)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX0_ADDR_of(_x)     (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: PCIeExplicitCmd[4]_[4]_PCIeExplicitCmdBAR1 - PCIe to CPP Explicit Command BAR 1
    Bits: 30:24 SignalRef(rw) - CPP command signal reference, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
    Bits: 23:14 DataMaster(rw) - CPP command data master, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
    Bits: 13:0  DataRef(rw) - CPP command data reference, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
*/
#define NFP_PCIE_BAR_PCIeExplicitCmd_P2CX1(_x, _y)           (0x00000084 + (0x40 * ((_x) & 0x3)) + (0x10 * ((_y) & 0x3)))
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX1_SIGNAL_REF(_x)  (((_x) & 0x7f) << 24)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX1_SIGNAL_REF_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX1_DATA_MASTER(_x) (((_x) & 0x3ff) << 14)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX1_DATA_MASTER_of(_x) (((_x) >> 14) & 0x3ff)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX1_DATA_REF(_x)    (((_x) & 0x3fff) << 0)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX1_DATA_REF_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: PCIeExplicitCmd[4]_[4]_PCIeExplicitCmdBAR2 - PCIe to CPP Explicit Command BAR 2
    Bits: 31:28 Target(rw) - CPP command target ID
    Bits: 27:23 Action(rw) - CPP Command Action Encoding
    Bits: 22:18 Length(rw) - CPP command length
    Bits: 17:10 ByteMask(rw) - CPP command byte mask
    Bits:  9:0  SignalMaster(rw) - CPP command signal master, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
*/
#define NFP_PCIE_BAR_PCIeExplicitCmd_P2CX2(_x, _y)           (0x00000088 + (0x40 * ((_x) & 0x3)) + (0x10 * ((_y) & 0x3)))
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_TGT(_x)         (((_x) & 0xf) << 28)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_TGT_of(_x)      (((_x) >> 28) & 0xf)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_ACT(_x)         (((_x) & 0x1f) << 23)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_ACT_of(_x)      (((_x) >> 23) & 0x1f)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_LEN(_x)         (((_x) & 0x1f) << 18)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_LEN_of(_x)      (((_x) >> 18) & 0x1f)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_BYTE_MASK(_x)   (((_x) & 0xff) << 10)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_BYTE_MASK_of(_x) (((_x) >> 10) & 0xff)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_SIGNAL_MASTER(_x) (((_x) & 0x3ff) << 0)
#define   NFP_PCIE_BAR_PCIEEXPLICITCMD_P2CX2_SIGNAL_MASTER_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: CPPToPCIeBAR[8] - CPP to PCIe translation BAR
    Bits: 31:30 MapType(rw) - Map Type
    Bits: 29    OverrideRID(rw) - Set if, Requester ID in PCIe TLP header should be overridden.
    Bits: 28:21 RequesterID(rw) - Value for Requester ID (if OverrideRID is set) to use in PCIe TLP header. Otherwise ignored.
    Bits: 20:0  Address(rw) - PCIe address bits [47:27] for 32-bit mode and [20:8] map to bits [47:35] for 40-bit mode. NOTE: For Type-1 Configuration cycles to the PCIe bus, bit [3] of this field should be set to '1'.
*/
#define NFP_PCIE_BAR_C2P(_x)                                 (0x00000180 + (0x4 * ((_x) & 0x7)))
#define   NFP_PCIE_BAR_C2P_TYPE(_x)                          (((_x) & 0x3) << 30)
#define   NFP_PCIE_BAR_C2P_TYPE_of(_x)                       (((_x) >> 30) & 0x3)
#define     NFP_PCIE_BAR_C2P_TYPE_MEM                        (0)
#define     NFP_PCIE_BAR_C2P_TYPE_IO                         (1)
#define     NFP_PCIE_BAR_C2P_TYPE_CFG                        (2)
#define   NFP_PCIE_BAR_C2P_ARI_ENABLE                        BIT(29)
#define   NFP_PCIE_BAR_C2P_ARI(_x)                           (((_x) & 0xff) << 21)
#define   NFP_PCIE_BAR_C2P_ARI_of(_x)                        (((_x) >> 21) & 0xff)
#define   NFP_PCIE_BAR_C2P_ADDR(_x)                          (((_x) & 0x1fffff) << 0)
#define   NFP_PCIE_BAR_C2P_ADDR_of(_x)                       (((_x) >> 0) & 0x1fffff)
/*----------------------------------------------------------------
  Register: DmaCmdInsertHiToPCI - Insert legacy-format command into HiToPCIe DMA command queue or Write pointer for HiToPCIe DMA command queue
  Register: DmaCmdInsertMedToPCI - Insert legacy-format command into MedToPCIe DMA command queue or Write pointer for MedToPCIe DMA command queue
  Register: DmaCmdInsertLoToPCI - Insert legacy-format command into LoToPCIe DMA command queue or Write pointer for LoToPCIe DMA command queue
  Register: DmaCmdInsertHiFrmPCI - Insert legacy-format command into HiFrmPCIe DMA command queue or Write pointer for HiFrmPCIe DMA command queue
  Register: DmaCmdInsertMedFrmPCI - Insert legacy-format command into MedFrmPCIe DMA command queue or Write pointer for MedFrmPCIe DMA command queue
  Register: DmaCmdInsertLoFrmPCI - Insert legacy-format command into LoFrmPCIe DMA command queue or Write pointer for LoFrmPCIe DMA command queue
    Bits: 127:116 XferLength(wo) - Size of transfer. Specified as number of bytes minus 1.
    Bits: 115:108 RequesterID(wo) - 8-bit Requester ID to use (if OverrideRID is set)
    Bits: 107    OverrideRID(wo) - If set the value of RequesterID will be used for the Requester-ID in the PCIe TLP header
    Bits: 106:104 TransClass(wo) - Indicates the transaction class.
    Bits: 103:96 PCIeAddressHi(wo) - Upper 8 bits of 40-bit PCIe address
    Bits: 95:64 PCIeAddressLo(wo) - Lower 32 bits of 40-bit PCIe address
    Bits: 63:62 ModeSelect(wo) - Selects what type of signaling, AutoPush or Event, or indicates data Gather Mode, see DMA Mode field
    Bits: 61:46 DmaMode(wo) - Indicates Signal or Event to generate on completed command or can be DMA descriptor extension for Data Gather support, depending on ModeSelect bits
    Bits: 45:44 CppToken(wo) - Specifies CPP Token to be used when issuing CPP commands for the transfer.
    Bits: 43:40 DmaConfigRegIndex(wo) - Index register for CPP transaction. Used to index from which register to get supplemental DMA descriptor configuration. NOTE: lsb chooses low or high half of 4B configuration register
    Bits: 39:32 CPPAddressHi(wo) - Upper 8-bits of 40-bit CPP bus address
    Bits: 31:0  CPPAddressLo(wo) - Lower 32-bits of 40-bit CPP bus address
*/
#define NFP_PCIE_DMA_TOPCI_HI                                0x00000000
#define NFP_PCIE_DMA_TOPCI_MED                               0x00000020
#define NFP_PCIE_DMA_TOPCI_LO                                0x00000040
#define NFP_PCIE_DMA_FROMPCI_HI                              0x00000060
#define NFP_PCIE_DMA_FROMPCI_MED                             0x00000080
#define NFP_PCIE_DMA_FROMPCI_LO                              0x000000a0
#define   NFP_PCIE_DMA_DMADESCRLEGACY_LENGTH(_x)             (((_x) & 0xfff) << 116)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_LENGTH_of(_x)          (((_x) >> 116) & 0xfff)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_RID(_x)                (((_x) & 0xff) << 108)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_RID_of(_x)             (((_x) >> 108) & 0xff)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_RID_OVERRIDE           BIT_ULL(107)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_TRANS_CLASS(_x)        (((_x) & 0x7) << 104)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_TRANS_CLASS_of(_x)     (((_x) >> 104) & 0x7)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_PCIE_ADDR_HI(_x)       (((_x) & 0xff) << 96)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_PCIE_ADDR_HI_of(_x)    (((_x) >> 96) & 0xff)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_PCIE_ADDR_LO(_x)       (((_x) & 0xffffffff) << 64)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_PCIE_ADDR_LO_of(_x)    (((_x) >> 64) & 0xffffffff)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_MODE_SEL(_x)           (((_x) & 0x3) << 62)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_MODE_SEL_of(_x)        (((_x) >> 62) & 0x3)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_MODE_SEL_0           (0)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_MODE_SEL_1           (1)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_MODE_SEL_2           (2)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_MODE_SEL_3           (3)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_DMA_MODE(_x)           (((_x) & 0xffff) << 46)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_DMA_MODE_of(_x)        (((_x) >> 46) & 0xffff)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_DMA_MODE_0           (0)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_DMA_MODE_1           (1)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_DMA_MODE_2           (2)
#define     NFP_PCIE_DMA_DMADESCRLEGACY_DMA_MODE_3           (3)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_CPP_TOKEN(_x)          (((_x) & 0x3) << 44)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_CPP_TOKEN_of(_x)       (((_x) >> 44) & 0x3)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_DMA_CFG_INDEX(_x)      (((_x) & 0xf) << 40)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_DMA_CFG_INDEX_of(_x)   (((_x) >> 40) & 0xf)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_CPP_ADDR_HI(_x)        (((_x) & 0xff) << 32)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_CPP_ADDR_HI_of(_x)     (((_x) >> 32) & 0xff)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_CPP_ADDR_LO(_x)        (((_x) & 0xffffffff) << 0)
#define   NFP_PCIE_DMA_DMADESCRLEGACY_CPP_ADDR_LO_of(_x)     (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: DMADescrConfig0 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig1 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig2 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig3 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig4 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig5 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig6 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig7 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
    Bits: 28    SignalOnlyOdd(rw) - Specifies if DMA is a signal-only, no data transferred.
    Bits: 27:26 EndPaddingOdd(rw) - Specifies if 0-padding should be inserted at the end of DMA transfers to PCIe.
    Bits: 25:24 StartPaddingOdd(rw) - Specifies if 0-padding should be inserted in front of DMA transfers to PCIe.
    Bits: 23    IdBasedOrderingOdd(rw) - Specifies if ID-Based Ordering attribute should be set for PCIe request.
    Bits: 22    RelaxedOrderingOdd(rw) - Specifies if Relaxed Ordering attribute should be set for PCIe request.
    Bits: 21    NoSnoopOdd(rw) - Specifies if No Snoop attribute should be set for PCIe request.
    Bits: 20    Target64bitOdd(rw) - Specifies if CPP Target is 64-bit or 32-bit, default is 32-bit.
    Bits: 19:16 CppTargetIDOdd(rw) - Selects CPP Target to be used for DMA.
    Bits: 12    SignalOnlyEven(rw) - Specifies if DMA is a signal-only, no data transferred.
    Bits: 11:10 EndPaddingEven(rw) - Specifies if 0-padding should be inserted in front of DMA transfers to PCIe.
    Bits:  9:8  StartPaddingEven(rw) - Specifies if 0-padding should be inserted in front of DMA transfers to PCIe.
    Bits:  7    IdBasedOrderingEven(rw) - Specifies if ID-Based Ordering attribute should be set for PCIe request.
    Bits:  6    RelaxedOrderingEven(rw) - Specifies if Relaxed Ordering attribute should be set for PCIe request.
    Bits:  5    NoSnoopEven(rw) - Specifies if No Snoop attribute should be set for PCIe request.
    Bits:  4    Target64bitEven(rw) - CPP target is 64-bit. Set if target supports 64-bit transactions, or cleared if target only supports 32-bit transaction.
    Bits:  3:0  CppTargetIDEven(rw) - Selects CPP Target to be used for DMA.
*/
#define NFP_PCIE_DMA_CFG0                                    0x000000c0
#define NFP_PCIE_DMA_CFG1                                    0x000000c4
#define NFP_PCIE_DMA_CFG2                                    0x000000c8
#define NFP_PCIE_DMA_CFG3                                    0x000000cc
#define NFP_PCIE_DMA_CFG4                                    0x000000d0
#define NFP_PCIE_DMA_CFG5                                    0x000000d4
#define NFP_PCIE_DMA_CFG6                                    0x000000d8
#define NFP_PCIE_DMA_CFG7                                    0x000000dc
#define   NFP_PCIE_DMA_DMADESCRCONFIG_SIGNAL_ONLY_ODD        BIT(28)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_ODD(_x)        (((_x) & 0x3) << 26)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_ODD_of(_x)     (((_x) >> 26) & 0x3)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_ODD_DISABLED (0)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_ODD_16B      (1)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_ODD_64B      (2)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_ODD_128B     (3)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_ODD(_x)      (((_x) & 0x3) << 24)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_ODD_of(_x)   (((_x) >> 24) & 0x3)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_ODD_DISABLED (0)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_ODD_16B    (1)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_ODD_64B    (2)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_ODD_128B   (3)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_ID_BASED_ORDER_ODD     BIT(23)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_RELAXED_ORDER_ODD      BIT(22)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_NO_SNOOP_ODD           BIT(21)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_TARGET_64_ODD          BIT(20)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_CPP_TARGET_ODD(_x)     (((_x) & 0xf) << 16)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_CPP_TARGET_ODD_of(_x)  (((_x) >> 16) & 0xf)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_SIGNAL_ONLY_EVEN       BIT(12)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_EVEN(_x)       (((_x) & 0x3) << 10)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_EVEN_of(_x)    (((_x) >> 10) & 0x3)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_EVEN_DISABLED (0)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_EVEN_16B     (1)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_EVEN_64B     (2)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_END_PAD_EVEN_128B    (3)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_EVEN(_x)     (((_x) & 0x3) << 8)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_EVEN_of(_x)  (((_x) >> 8) & 0x3)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_EVEN_DISABLED (0)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_EVEN_16B   (1)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_EVEN_64B   (2)
#define     NFP_PCIE_DMA_DMADESCRCONFIG_START_PAD_EVEN_128B  (3)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_ID_BASED_ORDER_EVEN    BIT(7)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_RELAXED_ORDER_EVEN     BIT(6)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_NO_SNOOP_EVEN          BIT(5)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_TARGET_64_EVEN         BIT(4)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_CPP_TARGET_EVEN(_x)    (((_x) & 0xf) << 0)
#define   NFP_PCIE_DMA_DMADESCRCONFIG_CPP_TARGET_EVEN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: DMAQStatToPCI0 - Queue status for ToPCIe DMA command queues
  Register: DMAQStatFrmPCI0 - Queue status for FrmPCIe DMA command queues
    Bits: 31:24 DmaLoQueAvail(ro) - DMA Low priority queue space available
    Bits: 23:16 DmaLoQueWrPtr(ro) - DMA Low priority queue write pointer
    Bits: 11    ParityError(rw1c) - When non-zero, A parity error was detected while reading from the DMA Descriptor memory.
    Bits: 10    DisDmaDescParity(rw) - When set, DMA Descriptor memory parity checking is disabled.
    Bits:  9    HaltOnPfDmaError(rw) - When set, DMA Engine will halt on a physical function access error.
    Bits:  8    HaltOnRdParityError(rw) - When set, DMA Engine will halt on a DMA Descriptor parity error.
    Bits:  7:6  DmaError(rw1c) - When non-zero, DMA had an error. Bit 0 indicates a virtual function access error. Bit 1 indicates a physical function access error.
    Bits:  5:4  QueueOverflow(rw1c) - When non-zero, DMA queue descriptor is written to a full queue.
    Bits:  3    HaltOnFull(rw) - When non-zero, DMA Engine will halt when full
    Bits:  2    HighQueueStop(rw) - Set when the DMA engine High Queue is stopped due to an error, or if DMA engine is explicitly stopped by writing a 1 to this bit.
    Bits:  1    MediumQueueStop(rw) - Set when the DMA engine Medium Queue is stopped due to an error, or if DMA engine is explicitly stopped by writing a 1 to this bit.
    Bits:  0    LowQueueStop(rw) - Set when the DMA engine Low Queue is stopped due to an error, or if DMA engine is explicitly stopped by writing a 1 to this bit.
*/
#define NFP_PCIE_DMA_QSTS0_TOPCI                             0x000000e0
#define NFP_PCIE_DMA_QSTS0_FROMPCI                           0x000000e8
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DMA_LO_AVAIL(_x)      (((_x) & 0xff) << 24)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DMA_LO_AVAIL_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DMA_LO_WRPTR(_x)      (((_x) & 0xff) << 16)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DMA_LO_WRPTR_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_PARITY_ERROR          BIT(11)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DIS_DMADESC_PARITY    BIT(10)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_PF_ERROR_HALT         BIT(9)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_PARITY_ERROR_HALT     BIT(8)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DMA_ERROR(_x)         (((_x) & 0x3) << 6)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_DMA_ERROR_of(_x)      (((_x) >> 6) & 0x3)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_OVERFLOW(_x)    (((_x) & 0x3) << 4)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_OVERFLOW_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_OVERFLOW_NOOVFL (0)
#define     NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_OVERFLOW_LOWOVFL (1)
#define     NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_OVERFLOW_MEDOVFL (2)
#define     NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_OVERFLOW_HIGHOVFL (3)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_QUEUE_HALT_FULL       BIT(3)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_HI_QUEUE_STOP         BIT(2)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_MED_QUEUE_STOP        BIT(1)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS0_LO_QUEUE_STOP         BIT(0)
/*----------------------------------------------------------------
  Register: DMAQStatToPCI1 - Queue status for ToPCIe DMA command queues
  Register: DMAQStatFrmPCI1 - Queue status for FrmPCIe DMA command queues
    Bits: 31:24 DmaHiQueAvail(ro) - DMA High priority queue space available
    Bits: 23:16 DmaHiQueWrPtr(ro) - DMA High priority queue write pointer
    Bits: 15:8  DmaMedQueAvail(ro) - DMA Medium priority queue space available
    Bits:  7:0  DmaMedQueWrPtr(ro) - DMA Medium priority queue write pointer
*/
#define NFP_PCIE_DMA_QSTS1_TOPCI                             0x000000e4
#define NFP_PCIE_DMA_QSTS1_FROMPCI                           0x000000ec
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_HI_AVAIL(_x)      (((_x) & 0xff) << 24)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_HI_AVAIL_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_HI_WRPTR(_x)      (((_x) & 0xff) << 16)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_HI_WRPTR_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_MED_AVAIL(_x)     (((_x) & 0xff) << 8)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_MED_AVAIL_of(_x)  (((_x) >> 8) & 0xff)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_MED_WRPTR(_x)     (((_x) & 0xff) << 0)
#define   NFP_PCIE_DMA_DMAQUEUESTATUS1_DMA_MED_WRPTR_of(_x)  (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: DMADbgReg0 - Debug register 0, used to indirectly read/write descriptor memories.
    Bits: 31    DmaByteMaskSwapEna(rw) - Note: This field is only present in the B0 stepping of the device. Set to enable the FromPcie DMA CPP Write logic to swap the CPP Command Byte Mask bits when a token value of 2 is selected in the FromPcie DMA descriptor.
*/
#define NFP_PCIE_DMA_DBG_REG0                                0x000000f0
#define   NFP_PCIE_DMA_DBG_REG0_DMA_BYTE_MASK_SWAP_ENA       BIT(31)
/*----------------------------------------------------------------
  Register: DMACntrlConfig - DMA performance configure, cpp and pcie request issue rates
    Bits: 31:28 DmaFrmCppRate(rw) - DMA FromPCIe rate at which requests are issued to CPP
    Bits: 27:24 DmaToPcieRate(rw) - DMA ToPCIe rate at which requests are issued to CPP
    Bits: 23:20 DmaToCppRate(rw) - DMA ToPCIe rate at which requests are issued to PCIe
    Bits: 19:16 DmaFrmPcieRate(rw) - DMA FromPCIe rate at which requests are issued to PCIe
    Bits: 15:12 DmaFrmPcieIssueLoad(rw) - DMA FromPCIe issue rate load value. Controls rate at which requests are issued to PCIe
*/
#define NFP_PCIE_DMA_CTRL_CFG                                0x000000f8
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_FRM_CPP_RATE(_x)         (((_x) & 0xf) << 28)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_FRM_CPP_RATE_of(_x)      (((_x) >> 28) & 0xf)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_TO_PCIE_RATE(_x)         (((_x) & 0xf) << 24)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_TO_PCIE_RATE_of(_x)      (((_x) >> 24) & 0xf)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_TO_CPP_RATE(_x)          (((_x) & 0xf) << 20)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_TO_CPP_RATE_of(_x)       (((_x) >> 20) & 0xf)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_FRM_PCIE_RATE(_x)        (((_x) & 0xf) << 16)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_FRM_PCIE_RATE_of(_x)     (((_x) >> 16) & 0xf)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_FRM_PCIE_ISSUE_LOAD(_x)  (((_x) & 0xf) << 12)
#define   NFP_PCIE_DMA_CTRL_CFG_DMA_FRM_PCIE_ISSUE_LOAD_of(_x) (((_x) >> 12) & 0xf)
/*----------------------------------------------------------------
  Register: DMAtoPCIeHi - DMA toPCIe Command Legacy Descriptor High Priority Queue
  Register: DMAtoPCIeMed - DMA toPCIe Command Legacy Descriptor Medium Priority Queue
  Register: DMAtoPCIeLow - DMA toPCIe Command Legacy Descriptor Low Priority Queue
  Register: DMAfromPCIeHi - DMA fromPCIe Command Legacy Descriptor High Priority Queue
  Register: DMAfromPCIeMed - DMA fromPCIe Command Legacy Descriptor Medium Priority Queue
  Register: DMAfromPCIeLow - DMA fromPCIe Command Legacy Descriptor Low Priority Queue
    Bits: 127:116 XferLength(wo) - Size of transfer. Specified as number of bytes minus 1.
    Bits: 115:108 RequesterID(wo) - 8-bit Requester ID to use (if OverrideRID is set)
    Bits: 107    OverrideRID(wo) - If set the value of RequesterID will be used for the Requester-ID in the PCIe TLP header
    Bits: 106:104 TransClass(wo) - Indicates the transaction class.
    Bits: 103:96 PCIeAddressHi(wo) - Upper 8 bits of 40-bit PCIe address
    Bits: 95:64 PCIeAddressLo(wo) - Lower 32 bits of 40-bit PCIe address
    Bits: 63:62 ModeSelect(wo) - Selects what type of signaling, AutoPush or Event, or indicates data Gather Mode, see DMA Mode field
    Bits: 61:46 DmaMode(wo) - Indicates Signal or Event to generate on completed command or can be DMA descriptor extension for Data Gather support, depending on ModeSelect bits
    Bits: 45:44 CppToken(wo) - Specifies CPP Token to be used when issuing CPP commands for the transfer.
    Bits: 43:40 DmaConfigRegIndex(wo) - Index register for CPP transaction. Used to index from which register to get supplemental DMA descriptor configuration. NOTE: lsb chooses low or high half of 4B configuration register
    Bits: 39:32 CPPAddressHi(wo) - Upper 8-bits of 40-bit CPP bus address
    Bits: 31:0  CPPAddressLo(wo) - Lower 32-bits of 40-bit CPP bus address
*/
#define NFP_PCIE_DMADESC_DMATOPCIEH                          0x00000000
#define NFP_PCIE_DMADESC_DMATOPCIEMED                        0x00000800
#define NFP_PCIE_DMADESC_DMATOPCIELOW                        0x00001000
#define NFP_PCIE_DMADESC_DMAFROMPCIEHI                       0x00002000
#define NFP_PCIE_DMADESC_DMAFROMPCIEMED                      0x00002800
#define NFP_PCIE_DMADESC_DMAFROMPCIELOW                      0x00003000
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_LENGTH(_x)         (((_x) & 0xfff) << 116)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_LENGTH_of(_x)      (((_x) >> 116) & 0xfff)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_RID(_x)            (((_x) & 0xff) << 108)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_RID_of(_x)         (((_x) >> 108) & 0xff)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_RID_OVERRIDE       BIT_ULL(107)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_TRANS_CLASS(_x)    (((_x) & 0x7) << 104)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_TRANS_CLASS_of(_x) (((_x) >> 104) & 0x7)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_PCIE_ADDR_HI(_x)   (((_x) & 0xff) << 96)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_PCIE_ADDR_HI_of(_x) (((_x) >> 96) & 0xff)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_PCIE_ADDR_LO(_x)   (((_x) & 0xffffffff) << 64)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_PCIE_ADDR_LO_of(_x) (((_x) >> 64) & 0xffffffff)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_MODE_SEL(_x)       (((_x) & 0x3) << 62)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_MODE_SEL_of(_x)    (((_x) >> 62) & 0x3)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_MODE_SEL_0       (0)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_MODE_SEL_1       (1)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_MODE_SEL_2       (2)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_MODE_SEL_3       (3)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_MODE(_x)       (((_x) & 0xffff) << 46)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_MODE_of(_x)    (((_x) >> 46) & 0xffff)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_MODE_0       (0)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_MODE_1       (1)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_MODE_2       (2)
#define     NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_MODE_3       (3)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_CPP_TOKEN(_x)      (((_x) & 0x3) << 44)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_CPP_TOKEN_of(_x)   (((_x) >> 44) & 0x3)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_CFG_INDEX(_x)  (((_x) & 0xf) << 40)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_DMA_CFG_INDEX_of(_x) (((_x) >> 40) & 0xf)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_CPP_ADDR_HI(_x)    (((_x) & 0xff) << 32)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_CPP_ADDR_HI_of(_x) (((_x) >> 32) & 0xff)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_CPP_ADDR_LO(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIE_DMADESC_DMADESCRLEGACY_CPP_ADDR_LO_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeCompConfig0 - Configures operation mode for PCIe component
    Bits: 29    PCIeSerdesClkMuxSel(rw) - Selects Serdes clock
    Bits: 28    PCIeTargetComplIdEn(rw) - When set PCIe Target overrides Completer ID
    Bits: 25    PfBusMasterEnable(ro) - Physical Function status indicates can issue Master requests
    Bits: 24    ClrPciemHalmAriError(rw) - Clear the VF ARI Error status reg in PCIe Master
    Bits: 23    ClrDmaAriError(rw) - Clear the VF ARI Error status reg in DMA
    Bits: 22:20 PciemDMASramReadCredit(rw) - Sets the outstanding number of DMA reads to SRAM in increments of 8 with a starting offset of 7. Setting the value above 3 has no effect as the hardware limit of the credit tracker is set to 32. The minimum value of 0 equates to a credit limit of 7 requests.
    Bits: 19:12 PciemPciReadCredit(rw) - Controls the amout of outstanding PCIe read requests that can be issued. Value is in increments of 256 bytes. The minimum value that should be used is 4KB or 16(dec).
    Bits: 11    PcieMsgValid(rw1c) - Interrupt status bit that indicates a PCIe vendor defined message has been received. The message is stored in the PcieVendorMsgHeader and PcieVendorMsgData CSRs.
    Bits: 10    RC_mode_IO_CFG_write_CPL_rec(rw1c) - Pcie completed IO or Config Write operation.
    Bits:  9:8  InterruptOutSelect(rw) - Selects which interrupt pin legacy interrupts are mapped to.
    Bits:  7:6  PCIeLanes(rw) - Status of the number of active lanes.
    Bits:  5:4  GenEnable(rw) - Status of what PCIe generation Controller Core is configured
    Bits:  3    PciemWriteStatsEn(rw) - Enables the PCIe Master to count write data transmit cycles
    Bits:  2    PciemReadStatsEn(rw) - Enables the PCIe Master to count read data receive cycles
    Bits:  1    PCIeAddrMode(rw) - Configure whether PCIe transactions support 32-bit or 64-bit addressing.
    Bits:  0    CPPAddrMode(rw) - Configure whether to interpret the CPP address bits as 32-bit or 40-bit.
*/
#define NFP_PCIEX_COMPCFG_CFG0                               0x00000000
#define   NFP_PCIEX_COMPCFG_CFG0_SERDES_CKMUX_SEL            BIT(29)
#define     NFP_PCIEX_COMPCFG_CFG0_SERDES_CKMUX_SEL_SEL_LANE0_CLK (0 << 29)
#define     NFP_PCIEX_COMPCFG_CFG0_SERDES_CKMUX_SEL_SEL_LANE7_CLK BIT(29)
#define   NFP_PCIEX_COMPCFG_CFG0_COMPL_ID_EN                 BIT(28)
#define   NFP_PCIEX_COMPCFG_CFG0_BUS_MASTER_EN               BIT(25)
#define   NFP_PCIEX_COMPCFG_CFG0_CLR_PCIEM_ARI_ERR           BIT(24)
#define   NFP_PCIEX_COMPCFG_CFG0_CLR_DMA_ARI_ERR             BIT(23)
#define   NFP_PCIEX_COMPCFG_CFG0_DMA_SRAM_RD_CREDIT(_x)      (((_x) & 0x7) << 20)
#define   NFP_PCIEX_COMPCFG_CFG0_DMA_SRAM_RD_CREDIT_of(_x)   (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIEM_RD_CREDIT(_x)         (((_x) & 0xff) << 12)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIEM_RD_CREDIT_of(_x)      (((_x) >> 12) & 0xff)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIE_MSG_VALID              BIT(11)
#define   NFP_PCIEX_COMPCFG_CFG0_RC_MODE_IO_CFG_WRITE_CPL_REC BIT(10)
#define   NFP_PCIEX_COMPCFG_CFG0_INT_SEL(_x)                 (((_x) & 0x3) << 8)
#define   NFP_PCIEX_COMPCFG_CFG0_INT_SEL_of(_x)              (((_x) >> 8) & 0x3)
#define     NFP_PCIEX_COMPCFG_CFG0_INT_SEL_INTA              (0)
#define     NFP_PCIEX_COMPCFG_CFG0_INT_SEL_INTB              (1)
#define     NFP_PCIEX_COMPCFG_CFG0_INT_SEL_INTC              (2)
#define     NFP_PCIEX_COMPCFG_CFG0_INT_SEL_INTD              (3)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIE_LANES(_x)              (((_x) & 0x3) << 6)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIE_LANES_of(_x)           (((_x) >> 6) & 0x3)
#define     NFP_PCIEX_COMPCFG_CFG0_PCIE_LANES_X1             (0)
#define     NFP_PCIEX_COMPCFG_CFG0_PCIE_LANES_X2             (1)
#define     NFP_PCIEX_COMPCFG_CFG0_PCIE_LANES_X4             (2)
#define     NFP_PCIEX_COMPCFG_CFG0_PCIE_LANES_X8             (3)
#define   NFP_PCIEX_COMPCFG_CFG0_GEN_ENABLE(_x)              (((_x) & 0x3) << 4)
#define   NFP_PCIEX_COMPCFG_CFG0_GEN_ENABLE_of(_x)           (((_x) >> 4) & 0x3)
#define     NFP_PCIEX_COMPCFG_CFG0_GEN_ENABLE_GEN1           (0)
#define     NFP_PCIEX_COMPCFG_CFG0_GEN_ENABLE_GEN2           (1)
#define     NFP_PCIEX_COMPCFG_CFG0_GEN_ENABLE_GEN3           (2)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIEM_WR_STAT_EN            BIT(3)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIEM_RD_STAT_EN            BIT(2)
#define   NFP_PCIEX_COMPCFG_CFG0_PCIE_ADDR_MODE              BIT(1)
#define     NFP_PCIEX_COMPCFG_CFG0_PCIE_ADDR_MODE_32         (0 << 1)
#define     NFP_PCIEX_COMPCFG_CFG0_PCIE_ADDR_MODE_64         BIT(1)
#define   NFP_PCIEX_COMPCFG_CFG0_CPP_ADDR_MODE               BIT(0)
#define     NFP_PCIEX_COMPCFG_CFG0_CPP_ADDR_MODE_40          (0 << 0)
#define     NFP_PCIEX_COMPCFG_CFG0_CPP_ADDR_MODE_32          BIT(0)
/*----------------------------------------------------------------
  Register: PCIeCompConfig1 - Configures operation mode for PCIe component
    Bits: 31:24 PCIeTargetComplIdBus(rw) - Sets the Completer ID Bus number to be used when in RC Mode or when override set
    Bits: 23:16 PCIeTargetComplIdDevFunc(rw) - Sets the Completer ID Dev and Function numbers to be used when in RC Mode or when override set
    Bits: 15:8  PCIeMasterReqIdBus(rw) - Sets the Requester ID Bus number to be used when PCIe Master generates requests in RC Mode
    Bits:  7:0  PCIeMasterReqIdFunc(rw) - Sets the Requester ID Function number to be used when PCIe Master generates requests in RC Mode
*/
#define NFP_PCIEX_COMPCFG_CFG1                               0x00000004
#define   NFP_PCIEX_COMPCFG_CFG1_COMPL_ID_BUS(_x)            (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_CFG1_COMPL_ID_BUS_of(_x)         (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_CFG1_COMPL_ID_DEV_FUNC(_x)       (((_x) & 0xff) << 16)
#define   NFP_PCIEX_COMPCFG_CFG1_COMPL_ID_DEV_FUNC_of(_x)    (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_COMPCFG_CFG1_REQ_ID_BUS(_x)              (((_x) & 0xff) << 8)
#define   NFP_PCIEX_COMPCFG_CFG1_REQ_ID_BUS_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_COMPCFG_CFG1_REQ_ID_FUNC(_x)             (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_CFG1_REQ_ID_FUNC_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PCIeCompConfig2 - Configures operation mode for PCIe component
    Bits: 28:24 CppTargetSramReadCredit(rw) - Sets the number of outstanding read requests the CPP Target can make to the shared SRAM
    Bits: 10    CpptDisIntDataError(rw) - When set read data errors received from the internal SRAM or targets are masked to the CPP Target push data bus.
    Bits:  9    CpptDisPullDataError(rw) - When set write data errors received from the CPP Target Pull Data bus are masked to the internal SRAM or PCIE Master Interface, and writes to internal targets are dropped.
    Bits:  8    PciemDisIntDataError(rw) - When set DMA read data errors received from the internal SRAM are masked to the PCIE Master Interface.
    Bits:  7    PciemDisHalDataError(rw) - When set data errors received from the PCIe Master Completion interface are masked to the internal SRAM and CPP Target Push intf.
    Bits:  6    PcietDisIntDataError(rw) - When set read data errors received from the internal SRAM or targets are not masked to the PCIe Target Completion interface.
    Bits:  5    PcietDisHalDataError(rw) - When set write data errors received from the PCIe Target interface are masked to the internal SRAM and CPP Master interfaces, and writes to internal targets are dropped.
    Bits:  4:0  PcieTargetSramReadCredit(rw) - Sets the number of outstanding read requests the PCIe Target can make to the shared SRAM
*/
#define NFP_PCIEX_COMPCFG_CFG2                               0x00000008
#define   NFP_PCIEX_COMPCFG_CFG2_CPPT_SRAM_CREDIT(_x)        (((_x) & 0x1f) << 24)
#define   NFP_PCIEX_COMPCFG_CFG2_CPPT_SRAM_CREDIT_of(_x)     (((_x) >> 24) & 0x1f)
#define   NFP_PCIEX_COMPCFG_CFG2_CPPT_DIS_INT_DAT_ERR        BIT(10)
#define   NFP_PCIEX_COMPCFG_CFG2_CPPT_DIS_PULL_DAT_ERR       BIT(9)
#define   NFP_PCIEX_COMPCFG_CFG2_PCIEM_DIS_INT_DAT_ERR       BIT(8)
#define   NFP_PCIEX_COMPCFG_CFG2_PCIEM_DIS_HAL_DAT_ERR       BIT(7)
#define   NFP_PCIEX_COMPCFG_CFG2_PCIET_DIS_INT_DAT_ERR       BIT(6)
#define   NFP_PCIEX_COMPCFG_CFG2_PCIET_DIS_HAL_DAT_ERR       BIT(5)
#define   NFP_PCIEX_COMPCFG_CFG2_PCIET_SRAM_CREDIT(_x)       (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_COMPCFG_CFG2_PCIET_SRAM_CREDIT_of(_x)    (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: PCIeCompConfig3 - Configures operation mode for PCIe component
    Bits: 31:24 DmaAriInError(ro) - DMA ARI number that last had an error
    Bits: 23:21 PciemHalComplCode(ro) - PCIe Master HAL Completion code that is latched when PciemAccessError is asserted
    Bits: 20    DmaFromAccessErrorVf(ro) - DMA FromPCIe Virtual Function Access Error.
    Bits: 19    DmaFromAccessErrorPf(ro) - DMA FromPCIe Physical Function Access Error.
    Bits: 18    DmaFromDescrOvflHi(ro) - DMA FromPcie High Priority Descriptor Queue Overflow.
    Bits: 17    DmaFromDescrOvflMed(ro) - DMA FromPcie Medium Priority Descriptor Queue Overflow.
    Bits: 16    DmaFromDescrOvflLo(ro) - DMA FromPcie Low Priority Descriptor Queue Overflow.
    Bits: 15    DmaFrmRdParityError(ro) - DMA FrmPcie Descriptor memory read parity error
    Bits: 14    DmaToAccessErrorVf(ro) - DMA ToPCIe Virtual Function Access Error.
    Bits: 13    DmaToAccessErrorPf(ro) - DMA ToPCIe Physical Function Access Error.
    Bits: 12    DmaToDescrOvflHi(ro) - DMA ToPcie High Priority Descriptor Queue Overflow.
    Bits: 11    DmaToDescrOvflMed(ro) - DMA ToPcie Medium Priority Descriptor Queue Overflow.
    Bits: 10    DmaToDescrOvflLo(ro) - DMA ToPcie Low Priority Descriptor Queue Overflow.
    Bits:  9    DmaToRdParityError(ro) - DMA ToPcie Descriptor memory read parity error
    Bits:  8    CpptAccessError(rw1c) - Cpp Target Access Error Status bit indicates access error received from the cpp.
    Bits:  7    CpptIntDataError(rw1c) - Cpp Target Internal Data Error status bit indicates an error was received from the Shared Memory during a read operation
    Bits:  6    CpptPullDataError(rw1c) - Cpp Target Pull Data Error status bit indicates an error was received on the CPP Pull data interface
    Bits:  5    PciemAccessError(rw1c) - Pcie Master Access Error Status bit indicates access error received from the link.
    Bits:  3    PciemHalDataError(rw1c) - PCIE Master detected a data error from the HAL interface.
    Bits:  2    PcietAccessError(rw1c) - Pcie Target Access Error Status bit indicates access error received from the link.
    Bits:  1    PcietIntAccessError(rw1c) - Pcie Target Internal Access Error Status bit indicates an error occurred during an internal access operation
    Bits:  0    PcietHalDataError(rw1c) - PCIE Target detected a data error from the HAL interface
*/
#define NFP_PCIEX_COMPCFG_CFG3                               0x0000000c
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_ARI_IN_ERROR(_x)        (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_ARI_IN_ERROR_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIEM_HAL_COMPL_CODE(_x)    (((_x) & 0x7) << 21)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIEM_HAL_COMPL_CODE_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_FROM_ACC_ERR_VF         BIT(20)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_FROM_ACC_ERR_PF         BIT(19)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_FRM_OVFL_HI             BIT(18)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_FRM_OVFL_MED            BIT(17)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_FRM_OVFL_LO             BIT(16)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_FRM_RD_PARITY_ERROR     BIT(15)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_TO_ACC_ERR_VF           BIT(14)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_TO_ACC_ERR_PF           BIT(13)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_TO_OVFL_HI              BIT(12)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_TO_OVFL_MED             BIT(11)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_TO_OVFL_LO              BIT(10)
#define   NFP_PCIEX_COMPCFG_CFG3_DMA_TO_RD_PARITY_ERROR      BIT(9)
#define   NFP_PCIEX_COMPCFG_CFG3_CPPT_ACC_ERR                BIT(8)
#define   NFP_PCIEX_COMPCFG_CFG3_CPPT_INT_DATA_ERR           BIT(7)
#define   NFP_PCIEX_COMPCFG_CFG3_CPPT_PULL_DATA_ERR          BIT(6)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIEM_ACC_ERR               BIT(5)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIEM_HAL_DATA_ERR          BIT(3)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIET_ACC_ERR               BIT(2)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIET_INT_ACC_ERR           BIT(1)
#define   NFP_PCIEX_COMPCFG_CFG3_PCIET_HAL_DATA_ERR          BIT(0)
/*----------------------------------------------------------------
  Register: PCIePciemStatTotal - Status of total cycle count since stats enable in PCIe Master interface
  Register: PCIePciemStatWrite - Status of write data cycle count since stats enable in PCIe Master interface
  Register: PCIePciemStatRead - Status of read data cycle count since stats enable in PCIe Master interface
    Bits: 31:0  PCIePciemStat(ro) - General use register.
*/
#define NFP_PCIEX_COMPCFG_PCIEMTOTAL                         0x00000018
#define NFP_PCIEX_COMPCFG_PCIEMWRITE                         0x0000001c
#define NFP_PCIEX_COMPCFG_PCIEMREAD                          0x00000020
#define   NFP_PCIEX_COMPCFG_PCIEPCIEMSTAT_PCIE_PCIEM_STAT(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIEPCIEMSTAT_PCIE_PCIEM_STAT_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeSramCtl - SRAM control register for PCIe Controller Core and DMA descriptor mems
    Bits: 31    PcieSramCtlWen(wo) - Write to 1 to initiate a write to the selected sram control register.
    Bits: 18:16 PCIeSramCtlSel(rw) - Selects which SRAM Control register to write to or read from.
    Bits: 14:0  PCIeSramCtl(rw) - SRAM Control Register Access for DMADesc, PnpRxFifo, SCFifo, TphSt, ReplayBuf and SCAnnex
*/
#define NFP_PCIEX_COMPCFG_SRAMCTL                            0x00000024
#define   NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAMCTL_WEN         BIT(31)
#define   NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL(_x)    (((_x) & 0x7) << 16)
#define   NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_of(_x) (((_x) >> 16) & 0x7)
#define     NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_DMADESC (0)
#define     NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_PNPRXFIFO (1)
#define     NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_SCFIFO (2)
#define     NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_TPHST (3)
#define     NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_REPLAYBUF (4)
#define     NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_SEL_SCANNEX (5)
#define   NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL(_x)        (((_x) & 0x7fff) << 0)
#define   NFP_PCIEX_COMPCFG_SRAMCTL_PCIE_SRAM_CTL_of(_x)     (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: PCIeARIError0 - Status of Virtual Functions that had errors
  Register: PCIeARIError1 - Status of Virtual Functions that had errors
  Register: PCIeARIError2 - Status of Virtual Functions that had errors
  Register: PCIeARIError3 - Status of Virtual Functions that had errors
  Register: PCIeARIError4 - Status of Virtual Functions that had errors
  Register: PCIeARIError5 - Status of Virtual Functions that had errors
  Register: PCIeARIError6 - Status of Virtual Functions that had errors
  Register: PCIeARIError7 - Status of Virtual Functions that had errors
    Bits: 31:0  PCIeAriErr(rw1c) - ARI Error status.
*/
#define NFP_PCIEX_COMPCFG_ARIERR0                            0x00000028
#define NFP_PCIEX_COMPCFG_ARIERR1                            0x0000002c
#define NFP_PCIEX_COMPCFG_ARIERR2                            0x00000030
#define NFP_PCIEX_COMPCFG_ARIERR3                            0x00000034
#define NFP_PCIEX_COMPCFG_ARIERR4                            0x00000038
#define NFP_PCIEX_COMPCFG_ARIERR5                            0x0000003c
#define NFP_PCIEX_COMPCFG_ARIERR6                            0x00000040
#define NFP_PCIEX_COMPCFG_ARIERR7                            0x00000044
#define   NFP_PCIEX_COMPCFG_PCIEARIERR_PCIE_ARI_ERR(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIEARIERR_PCIE_ARI_ERR_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: SerDes4RdWr03To00 - Write port to serdes lanes 3 to 0.
  Register: SerDes4RdWr07To04 - Write port to serdes lanes 7 to 4.
    Bits: 31:29 SerDesPageAddr(rw) - Read/Write page address to serdes membus
    Bits: 28    SerDesPcsPmaSel(rw) - Write to 1 to select PCS Registers. Write to 0 to select PMA registers. PageAddr and OffsetAddr bits will index into the PCS or PMA register sets depending on the state of this bit.
    Bits: 27:16 SerDesOffsetAddr(rw) - Read/Write offset Address to serdes membus
    Bits: 15:10 Rfu(ro) - Reserved for Use.
    Bits:  9    SerDesRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits:  8    SerDesWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits:  7:0  SerDesWrData(rw) - 8 bit write data to SerDes. Dont care for a read op.
*/
#define NFP_PCIEX_COMPCFG_SERDES4_RDWR_03_00                 0x00000048
#define NFP_PCIEX_COMPCFG_SERDES4_RDWR_07_04                 0x0000004c
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_LANE_0_SELECT (0)
#define     NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_LANE_1_SELECT (1)
#define     NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_LANE_2_SELECT (2)
#define     NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_LANE_3_SELECT (3)
#define     NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_COMMON_SELECT (4)
#define     NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PAGE_ADDR_ALL_LANE_SELECT (7)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_PCS_PMA_SEL BIT(28)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_OFFSET_ADDR(_x) (((_x) & 0xfff) << 16)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_OFFSET_ADDR_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_RFU(_x)              (((_x) & 0x3f) << 10)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_RFU_of(_x)           (((_x) >> 10) & 0x3f)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_RD_BUSY   BIT(9)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_WR_BUSY   BIT(8)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_WR_DATA(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_SERDES4RDWR_MAC_SERDES_WR_DATA_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDes4RdData03To00 - Read return data for serdes lanes 3 to 0.
  Register: SerDes4RdData07To04 - Read return data for serdes lanes 7 to 4.
    Bits: 31:29 SerDesRdPageAddr(ro) - Read page address to serdes membus
    Bits: 28:16 SerDesRdOffsetAddr(ro) - Read offset Address to serdes membus
    Bits:  9    SerDesRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits:  7:0  SerDesRdData(ro) - 8 bit read data from SerDes
*/
#define NFP_PCIEX_COMPCFG_SERDES4_RDDATA_03_00               0x00000050
#define NFP_PCIEX_COMPCFG_SERDES4_RDDATA_07_04               0x00000054
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_LANE_0_SELECT (0)
#define     NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_LANE_1_SELECT (1)
#define     NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_LANE_2_SELECT (2)
#define     NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_LANE_3_SELECT (3)
#define     NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_COMMON_SELECT (4)
#define     NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_PAGE_ADDR_ALL_LANE_SELECT (7)
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_OFFSET_ADDR(_x) (((_x) & 0x1fff) << 16)
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_OFFSET_ADDR_of(_x) (((_x) >> 16) & 0x1fff)
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_DATA_VALID BIT(9)
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_DATA(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_SERDES4RDDATA_MAC_SERDES_RD_DATA_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PCIeSpare0 - Spare register address, no hw implemented
*/
#define NFP_PCIEX_COMPCFG_PCIESPARE0                         0x0000005c
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig0 - Selects operation mode for PCIe controller
    Bits: 31    RcbStatus(ro) - Indicates Pcie Controller Core status of Read Completion Boundary setting: 0 = 64B, 1 = 128B
    Bits: 30:29 ObffEnable(ro) - Indicates Pcie Controller Core status of Optimized Buffer Flush Fill. Valid settings are 00 (disabled), 01 (Variation A), and 10 (Variation B).
    Bits: 28:27 NegotiatedSpeed(ro) - Reflects Pcie Controller Core status of current operating speed of the link (00 = 2.5 GT/s, 01 = 5 GT/s, 10 = 8 GT/s). Valid when LINK_STATUS = 10 or 11.
    Bits: 26:24 MaxReadReqSize(ro) - Indicates Pcie Controller Core status of the limit of the size of outgoing read requests. The 3-bit codes are the same as those defined in PCIe Specifications: 000 = 128 bytes, 001 = 256 bytes, 010 = 512 bytes, 011 = 1024 bytes, 100 = 2048 bytes 101 = 4096 bytes.
    Bits: 23:21 MaxPayloadSize(ro) - Reflects Pcie Controller Core status of the limit of the size of Outgoing Completion payloads. The 3-bit codes are the same as those defined in PCIe Specifications: 000 = 128 bytes, 001 = 256 bytes, 010 = 512 bytes.
    Bits: 20:17 FunctionStatus(ro) - Indicates Pcie Controller Core status of the states of the Command Register bits in the PCI configuration space of each Function. These outputs are used to enable requests and completions from the host logic. The assignment of bits is as follows: Bit 0: Function 0 IO Space Enable, Bit 1: Function 0 Memory Space Enable, Bit 2: Function 0 Bus Master Enable, Bit 3: Function 0 INTx Disable.
    Bits: 14:12 FunctionPowerState(ro) - Provides Pcie Controller Core status of the current power state of the Physical Function. The possible power states are: 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot.
    Bits: 11:8  LinkPowerState(ro) - Reflects Pcie Controller Core power state of the PCIe link. 0001 = L0, 0010 = L0s, 0100 = L1, 1000 = L2.
    Bits:  7:6  LinkStatus(ro) - Indicates Pcie Controller Core status of the PCI Express link. 00 = No receivers detected, 01 = Link training in progress, 10 = Link up , DL initialization in progress, 11 = Link up, DL initialization completed..
    Bits:  5:0  LtssmState(ro) - Reflects Pcie Controller Core state of the Link Training and Status State Machine.
*/
#define NFP_PCIEX_COMPCFG_CNTRLR0                            0x00000060
#define   NFP_PCIEX_COMPCFG_CNTRLR0_RCB_STATUS               BIT(31)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_OBFF_ENABLE(_x)          (((_x) & 0x3) << 29)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_OBFF_ENABLE_of(_x)       (((_x) >> 29) & 0x3)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_NEGOTIATED_SPEED(_x)     (((_x) & 0x3) << 27)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_NEGOTIATED_SPEED_of(_x)  (((_x) >> 27) & 0x3)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_MAX_READ_REQ_SIZE(_x)    (((_x) & 0x7) << 24)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_MAX_READ_REQ_SIZE_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_MAX_PAYLOAD_SIZE(_x)     (((_x) & 0x7) << 21)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_MAX_PAYLOAD_SIZE_of(_x)  (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_FUNCTION_STATUS(_x)      (((_x) & 0xf) << 17)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_FUNCTION_STATUS_of(_x)   (((_x) >> 17) & 0xf)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_FUNCTION_POWER_STATE(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_FUNCTION_POWER_STATE_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_LINK_POWER_STATE(_x)     (((_x) & 0xf) << 8)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_LINK_POWER_STATE_of(_x)  (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_LINK_STATUS(_x)          (((_x) & 0x3) << 6)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_LINK_STATUS_of(_x)       (((_x) >> 6) & 0x3)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_LTSSM_STATE(_x)          (((_x) & 0x3f) << 0)
#define   NFP_PCIEX_COMPCFG_CNTRLR0_LTSSM_STATE_of(_x)       (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig1 - Selects operation mode for PCIe controller
    Bits: 31    ReqPmTransitionL23Ready(rw) - Pcie Controller Core status.
    Bits:  7    NonPostedOverrideDisable(rw) - Setting this bit allows HAL Target posted requests to postpone and pass existing received non_posted requests (allowed per pcie spec). Default 0 allows HAL Target to fairly mix posted and non-posted requests.
    Bits:  6    MasterHoldIfDisabled(rw) - When in Endpoint mode, the PCIe Master logic hold back all PCIe Master transactions when this bit is set and the FUNCTION_STATUS bit 2 from the PCIe core indicates the Bus Master is not enabled. The MasterDropIfDisabled must also be cleared.
    Bits:  5    ConfigEnable(rw) - Tied to Pcie Controller CONFIG_ENABLE input. When this bit is a 0 in the EP mode, the core will generate a CRS Completion in response to Configuration Requests. In systems where the core configuration registers are loaded from RAM on power-up, this prevents the core from responding to Configuration Requests before all the registers are loaded. When this bit is a 1 in the EP mode, the core will accept Configuration Requests.
    Bits:  4    MasterDropIfDisabled(rw) - When in Endpoint mode, the PCIe Master logic drops all PCIe Master transactions when this bit is set and the FUNCTION_STATUS bit 2 from the PCIe core indicates the Bus Master is not enabled. This bit has no effect in Root Complex mode.
    Bits:  3:1  TphStMode(ro) - Indicates Pcie Controller Core status of the setting of the ST Mode Select bits in the TPH Requester Control Register of Physical Function 0. These bits are active only in the EndPoint mode. They indicate the allowed modes for generation of TPH Hints by the corresponding Physical Function.
    Bits:  0    TphRequesterEnable(ro) - Indicates Pcie Controller Core status of the TPH Requester Enable bit [8] of the TPH Requester Control Register in the TPH Requester Capability Structure of the Physical Function 0. These bits are active only in the EndPoint mode. They indicate whether the software has enabled the device to generate requests with TPH Hints from the associated Physical Function.
*/
#define NFP_PCIEX_COMPCFG_CNTRLR1                            0x00000064
#define   NFP_PCIEX_COMPCFG_CNTRLR1_REQ_PM_TRANSITION_L23_READY BIT(31)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_NON_POSTED_OVERRIDE_DISABLE BIT(7)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_MASTER_HOLD_IF_DISABLED  BIT(6)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_CONFIG_ENABLE            BIT(5)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_MASTER_DROP_IF_DISABLED  BIT(4)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_TPH_ST_MODE(_x)          (((_x) & 0x7) << 1)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_TPH_ST_MODE_of(_x)       (((_x) >> 1) & 0x7)
#define   NFP_PCIEX_COMPCFG_CNTRLR1_TPH_REQUESTER_ENABLE     BIT(0)
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig2 - Selects operation mode for PCIe controller
    Bits: 31:16 PCIeCntrlrDebugData(ro) - Pcie Controller Core status of 16-bit output data from the debug bus.
    Bits: 15    LinkEqLoopbackInProgress(ro) - Pcie Controller Core status of link equalization loopback.
    Bits: 14    HotResetStat(ro) - Reflects current state of the Hot Reset Status from the PCIe Controller. If set a hot reset was received from the link in the Endpoint mode.
    Bits: 13    HotResetInit(rw) - SW sets this bit when Pcie Controller Core needs to initiate a Hot Reset sequence on the PCIe link when in RC mode.
    Bits: 12    LinkDownResetOut(ro) - Pcie Controller Core status asserted when its LTSSM detects a link-down event (when the LINK_UP state variable goes to 0).
    Bits: 10    PhyInterrupt(rw1c) - PCIe Core output used in RC mode to signal a link training related event has occurred
    Bits:  9    LocalInterrupt(rw1c) - Pcie Controller Core status. Used to signal an error or abnormal condition to the local processor. The interrupting condition can be obtained by reading the Local Error Status Register.
    Bits:  4    FatalError(rw1c) - Pcie core detected a fatal error.
    Bits:  3    NonFatalError(rw1c) - Pcie core detected a non-fatal error.
    Bits:  2    CorrectableError(rw1c) - Pcie core detected a correctable error.
    Bits:  1    CorrectableErrorIn(wo) - Software writes a 1 to this bit when an correctable error has been detected. A correctable error can be a correctable error event from the Shared SRAM. The error is reported by the core through the PCI Express Advanced Error Reporting mechanism.
    Bits:  0    UncorrectableErrorIn(wo) - Software writes a 1 to this bit when an uncorrectable error has been detected. An uncorrectable error can be an uncorrectable error event from the Shared SRAM or a DMA Descriptor Rd Parity error. The error is reported by the core through the PCI Express Advanced Error Reporting mechanism.
*/
#define NFP_PCIEX_COMPCFG_CNTRLR2                            0x00000068
#define   NFP_PCIEX_COMPCFG_CNTRLR2_PCIE_CNTRLR_DEBUG_DATA(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_PCIE_CNTRLR_DEBUG_DATA_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_LINK_EQ_LOOPBACK_IN_PROGRESS BIT(15)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_HOT_RESET_STAT           BIT(14)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_HOT_RESET_INIT           BIT(13)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_LINK_DOWN_RESET_OUT      BIT(12)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_PHY_INTERRUPT            BIT(10)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_LOCAL_INTERRUPT          BIT(9)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_FATAL_ERROR              BIT(4)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_NON_FATAL_ERROR          BIT(3)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_CORRECTABLE_ERROR        BIT(2)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_CORRECTABLE_ERROR_IN     BIT(1)
#define   NFP_PCIEX_COMPCFG_CNTRLR2_UNCORRECTABLE_ERROR_IN   BIT(0)
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig3 - Selects operation mode for PCIe controller
    Bits: 29    IntAMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 28    IntBMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 27    IntCMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 26    IntDMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 25    IntA(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 24    IntB(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 23    IntC(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 22    IntD(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 21:16 VfFlrDoneChannel(rw) - Software sets this field to the select the virtual function to drive the VfFlrDone signal to.
    Bits: 15    VfFlrDone(wo) - Software sets this bit in conjunction with the VfFlrDoneChannel after completion of a virtual function level reset requested by the host. This bit always reads a 0.
    Bits: 14    FlrDone(wo) - Software sets this bit after completion of a function level reset requested by the host. This bit always reads a 0.
    Bits: 13    FlrInProgress(ro) - Function level reset in progress status bit. This bit stays set until the FLR_DONE bit is set.
    Bits: 12:2  PresetSweepMask(rw) - Controls masking off evalutating known bad TX Presets during link equalization
    Bits:  1    BypassRemoteTxEq(rw) - Controls bypassing the evaluation of the remote PHY Tx during Link Equalization
    Bits:  0    BypassPhase23(rw) - When in RC mode, controls Phase 2 and phase 3 of Link Equalization
*/
#define NFP_PCIEX_COMPCFG_CNTRLR3                            0x0000006c
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTA_MASK                BIT(29)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTB_MASK                BIT(28)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTC_MASK                BIT(27)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTD_MASK                BIT(26)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTA                     BIT(25)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTB                     BIT(24)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTC                     BIT(23)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_INTD                     BIT(22)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_VF_FLR_DONE_CHANNEL(_x)  (((_x) & 0x3f) << 16)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_VF_FLR_DONE_CHANNEL_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_VF_FLR_DONE              BIT(15)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_FLR_DONE                 BIT(14)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_FLR_IN_PROGRESS          BIT(13)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_PRESET_SWEEP_MASK(_x)    (((_x) & 0x7ff) << 2)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_PRESET_SWEEP_MASK_of(_x) (((_x) >> 2) & 0x7ff)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_BYPASS_REMOTE_TX_EQ      BIT(1)
#define     NFP_PCIEX_COMPCFG_CNTRLR3_BYPASS_REMOTE_TX_EQ_NOBYPASS (0 << 1)
#define     NFP_PCIEX_COMPCFG_CNTRLR3_BYPASS_REMOTE_TX_EQ_BYPASS BIT(1)
#define   NFP_PCIEX_COMPCFG_CNTRLR3_BYPASS_PHASE23           BIT(0)
#define     NFP_PCIEX_COMPCFG_CNTRLR3_BYPASS_PHASE23_NOBYPASS (0 << 0)
#define     NFP_PCIEX_COMPCFG_CNTRLR3_BYPASS_PHASE23_BYPASS  BIT(0)
/*----------------------------------------------------------------
  Register: PCIeVfEnable0 - Status of Virtual Functions that are enabled
  Register: PCIeVfEnable1 - Status of Virtual Functions that are enabled
  Register: PCIeVfBusMasterEn0 - reflects the status of the Bus Master Enable bit of the PCI Command Register of Virtual Function i
  Register: PCIeVfBusMasterEn1 - reflects the status of the Bus Master Enable bit of the PCI Command Register of Virtual Function i
  Register: PCIeVfFlrInProg0 - status of host-initiated reset of Virtual Function i though its FLR bit in the configuration space
  Register: PCIeVfFlrInProg1 - status of host-initiated reset of Virtual Function i though its FLR bit in the configuration space
  Register: PCIeVfTphReqEn0 - indicate whether the software has enabled the device to generate requests with TPH Hints from the associated Virtual Function.
  Register: PCIeVfTphReqEn1 - indicate whether the software has enabled the device to generate requests with TPH Hints from the associated Virtual Function.
  Register: PCIeVfPwrState0 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState1 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState2 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState3 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState4 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState5 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
    Bits: 31:0  PCIeVfStat1(ro) - Virtual Function status.
*/
#define NFP_PCIEX_COMPCFG_VFEN0                              0x00000070
#define NFP_PCIEX_COMPCFG_VFEN1                              0x00000074
#define NFP_PCIEX_COMPCFG_VFBUSMAST0                         0x00000078
#define NFP_PCIEX_COMPCFG_VFBUSMAST1                         0x0000007c
#define NFP_PCIEX_COMPCFG_VFFLRPROG0                         0x00000080
#define NFP_PCIEX_COMPCFG_VFFLRPROG1                         0x00000084
#define NFP_PCIEX_COMPCFG_VFTPHREQ0                          0x00000090
#define NFP_PCIEX_COMPCFG_VFTPHREQ1                          0x00000094
#define NFP_PCIEX_COMPCFG_VFPWR0                             0x00000098
#define NFP_PCIEX_COMPCFG_VFPWR1                             0x0000009c
#define NFP_PCIEX_COMPCFG_VFPWR2                             0x000000a0
#define NFP_PCIEX_COMPCFG_VFPWR3                             0x000000a4
#define NFP_PCIEX_COMPCFG_VFPWR4                             0x000000a8
#define NFP_PCIEX_COMPCFG_VFPWR5                             0x000000ac
#define   NFP_PCIEX_COMPCFG_PCIEVFSTAT1_PCIE_VF_STAT_1(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIEVFSTAT1_PCIE_VF_STAT_1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeVfTphState0 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState1 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState2 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState3 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState4 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState5 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
    Bits: 31:0  PCIeVfStat(ro) - Virtual Function status.
*/
#define NFP_PCIEX_COMPCFG_VFTPHST0                           0x000000b0
#define NFP_PCIEX_COMPCFG_VFTPHST1                           0x000000b4
#define NFP_PCIEX_COMPCFG_VFTPHST2                           0x000000b8
#define NFP_PCIEX_COMPCFG_VFTPHST3                           0x000000bc
#define NFP_PCIEX_COMPCFG_VFTPHST4                           0x000000c0
#define NFP_PCIEX_COMPCFG_VFTPHST5                           0x000000c4
#define   NFP_PCIEX_COMPCFG_PCIEVFSTAT_PCIE_VF_STAT(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIEVFSTAT_PCIE_VF_STAT_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeVfTphPwrState6 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
    Bits: 27:25 PCIeTphStMode63(ro) - VF63 TPH State
    Bits: 24:22 PCIeTphStMode62(ro) - VF62 TPH Mode
    Bits: 21:19 PCIeTphStMode61(ro) - VF61 TPH Mode
    Bits: 18:16 PCIeTphStMode60(ro) - VF60 TPH Mode
    Bits: 11:9  PCIeVfPwrState63(ro) - VF63 Power State
    Bits:  8:6  PCIeVfPwrState62(ro) - VF62 Power State
    Bits:  5:3  PCIeVfPwrState61(ro) - VF61 Power State
    Bits:  2:0  PCIeVfPwrState60(ro) - VF60 Power State
*/
#define NFP_PCIEX_COMPCFG_VFTPHPWRST6                        0x000000c8
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE63(_x) (((_x) & 0x7) << 25)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE63_of(_x) (((_x) >> 25) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE62(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE62_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE61(_x) (((_x) & 0x7) << 19)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE61_of(_x) (((_x) >> 19) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE60(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_TPH_ST_MODE60_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE63(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE63_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE62(_x) (((_x) & 0x7) << 6)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE62_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE61(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE61_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE60(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_COMPCFG_VFTPHPWRST6_PCIE_VF_PWR_STATE60_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: PCIeStateChangeStat - Contains the state change interrupt and status
    Bits: 22    HotResetAssertIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 21    FuncStatusChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 20    PwrStateChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 19    VfBusMstrEnStateChangeIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 18    VfEnableStateChangeIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 17    LinkPwrStateChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 16    LinkStatusChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 15:8  CfgFuncNum(ro) - Contains the CONFIG_FUNCTION_NUM associated with the POWER_STATE_CHANGE_INTERRUPT.
    Bits:  6    HotResetAssertInt(rw1c) - Interrupt status bit that indicates the HOT_RESET_OUT from the PCIe core has asserted. Current state of the signal can be read in the PCIeCntrlrConfig2 register.
    Bits:  5    FuncStatusChgInt(rw1c) - Interrupt status bit that indicates there was a change to the FUNCTION_STATUS bits from the PCIe core
    Bits:  4    PwrStateChgInt(rw1c) - Interrupt status bit that indicates there was a change to the FUNCTION_POWER_STATE or VF_POWER_STATE status from the PCIe core. Writing a 1 to this register asserts the POWER_STATE_CHANGE_ACK back to the PCIe Core.
    Bits:  3    VfBusMstrEnStateChangeInt(rw1c) - Interrupt status bit that indicates there was a change to the VF_BUS_MASTER_ENABLE status from the PCIe core
    Bits:  2    VfEnableStateChangeInt(rw1c) - Interrupt status bit that indicates there was a change to VF_ENABLE status from the PCIe core.
    Bits:  1    LinkPwrStateChgInt(rw1c) - Interrupt status bit that indicates the LINK_POWER_STATE has changed
    Bits:  0    LinkStatusChgInt(rw1c) - Interrupt status bit that indicates the LINK_STATUS has changed
*/
#define NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT                0x000000cc
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_HOT_RESET_ASSERT_INT_MASK BIT(22)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_FUNC_STATUS_CHG_INT_MASK BIT(21)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_PWR_STATE_CHG_INT_MASK BIT(20)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_VF_BUS_MSTR_EN_STATE_CHG_INT_MASK BIT(19)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_VF_ENABLE_STATE_CHANGE_INT_MASK BIT(18)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_LINK_PWR_STATE_CHG_INT_MASK BIT(17)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_LINK_STATUS_CHG_INT_MASK BIT(16)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_CFG_FUNC_NUM(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_CFG_FUNC_NUM_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_HOT_RESET_ASSERT_INT BIT(6)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_FUNC_STATUS_CHG_INT BIT(5)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_PWR_STATE_CHG_INT BIT(4)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_VF_BUS_MSTR_EN_STATE_CHG_INT BIT(3)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_VF_ENABLE_STATE_CHANGE_INT BIT(2)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_LINK_PWR_STATE_CHG_INT BIT(1)
#define   NFP_PCIEX_COMPCFG_PCIE_STATE_CHG_STAT_LINK_STATUS_CHG_INT BIT(0)
/*----------------------------------------------------------------
  Register: PCIePresetCoeff0 - map presets to their coefficients
  Register: PCIePresetCoeff1 - map presets to their coefficients
  Register: PCIePresetCoeff2 - map presets to their coefficients
  Register: PCIePresetCoeff3 - map presets to their coefficients
  Register: PCIePresetCoeff4 - map presets to their coefficients
  Register: PCIePresetCoeff5 - map presets to their coefficients
  Register: PCIePresetCoeff6 - map presets to their coefficients
  Register: PCIePresetCoeff7 - map presets to their coefficients
  Register: PCIePresetCoeff8 - map presets to their coefficients
  Register: PCIePresetCoeff9 - map presets to their coefficients
  Register: PCIePresetCoeff10 - map presets to their coefficients
    Bits: 31:18 Reserved(ro) - Reserved
    Bits: 17:0  PCIePresetCoeff(rw) - Map presets to their coefficients.
*/
#define NFP_PCIEX_COMPCFG_PCIECOEFF0                         0x000000d0
#define NFP_PCIEX_COMPCFG_PCIECOEFF1                         0x000000d4
#define NFP_PCIEX_COMPCFG_PCIECOEFF2                         0x000000d8
#define NFP_PCIEX_COMPCFG_PCIECOEFF3                         0x000000dc
#define NFP_PCIEX_COMPCFG_PCIECOEFF4                         0x000000e0
#define NFP_PCIEX_COMPCFG_PCIECOEFF5                         0x000000e4
#define NFP_PCIEX_COMPCFG_PCIECOEFF6                         0x000000e8
#define NFP_PCIEX_COMPCFG_PCIECOEFF7                         0x000000ec
#define NFP_PCIEX_COMPCFG_PCIECOEFF8                         0x000000f0
#define NFP_PCIEX_COMPCFG_PCIECOEFF9                         0x000000f4
#define NFP_PCIEX_COMPCFG_PCIECOEFF10                        0x000000f8
#define   NFP_PCIEX_COMPCFG_PCIEPRESETCOEFF_RESERVED(_x)     (((_x) & 0x3fff) << 18)
#define   NFP_PCIEX_COMPCFG_PCIEPRESETCOEFF_RESERVED_of(_x)  (((_x) >> 18) & 0x3fff)
#define   NFP_PCIEX_COMPCFG_PCIEPRESETCOEFF_PCIE_PRESET_COEFF(_x) (((_x) & 0x3ffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIEPRESETCOEFF_PCIE_PRESET_COEFF_of(_x) (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: PCIeLocalLowFreq0 - Provides the Low Frequency (LF) values for lanes 0 thru 3 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
  Register: PCIeLocalLowFreq1 - Provides the Low Frequency (LF) values for lanes 4 thru 7 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
    Bits: 31:24 Reserved(ro) - Reserved
    Bits: 23:18 LocalLfFs1_lane3(rw) - Lane 3 Low Frequency (LF) value considered during TX equalization.
    Bits: 17:12 LocalLfFs1_lane2(rw) - Lane 2 Low Frequency (LF) value considered during TX equalization.
    Bits: 11:6  LocalLfFs1_lane1(rw) - Lane 1 Low Frequency (LF) value considered during TX equalization.
    Bits:  5:0  LocalLfFs1_lane0(rw) - Lane 0 Low Frequency (LF) value considered during TX equalization.
*/
#define NFP_PCIEX_COMPCFG_LOCALLF0                           0x00000100
#define NFP_PCIEX_COMPCFG_LOCALLF1                           0x00000104
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_RESERVEDLFS1(_x)      (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_RESERVEDLFS1_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE3(_x) (((_x) & 0x3f) << 18)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE3_of(_x) (((_x) >> 18) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE2(_x) (((_x) & 0x3f) << 12)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE2_of(_x) (((_x) >> 12) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE1(_x) (((_x) & 0x3f) << 6)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE1_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS1_LOCAL_LF_FS_1_LANE0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: PCIeLocalFullSwing0 - Provides the Full Swing (FS) values for lanes 0 thru 3 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
  Register: PCIeLocalFullSwing1 - Provides the Full Swing (FS) values for lanes 4 thru 7 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
    Bits: 31:24 Reserved(ro) - Reserved
    Bits: 23:18 LocalLfFs_lane3(rw) - Lane 3 Full Swing (FS) value considered during TX equalization.
    Bits: 17:12 LocalLfFs_lane2(rw) - Lane 2 Full Swing (FS) value considered during TX equalization.
    Bits: 11:6  LocalLfFs_lane1(rw) - Lane 1 Full Swing (FS) value considered during TX equalization.
    Bits:  5:0  LocalLfFs_lane0(rw) - Lane 0 Full Swing (FS) value considered during TX equalization.
*/
#define NFP_PCIEX_COMPCFG_LOCALFS0                           0x00000108
#define NFP_PCIEX_COMPCFG_LOCALFS1                           0x0000010c
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_RESERVED(_x)           (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_RESERVED_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE3(_x)  (((_x) & 0x3f) << 18)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE3_of(_x) (((_x) >> 18) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE2(_x)  (((_x) & 0x3f) << 12)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE2_of(_x) (((_x) >> 12) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE1(_x)  (((_x) & 0x3f) << 6)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE1_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE0(_x)  (((_x) & 0x3f) << 0)
#define   NFP_PCIEX_COMPCFG_LOCALLFFS_LOCAL_LF_FS_LANE0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: PcieEventMsiFuncMap_[32] - Defines the MSI function number and message attributes for event filter X
    Bits: 31:9  Reserved(rw) - Reserved.
    Bits:  8    MaskEvent(rw) - Specifies to mask the event from generating an MSI.
    Bits:  7:0  FunctionNumber(rw) - Specifies the Function number to be sent as ReqID with MSI message.
*/
#define NFP_PCIEX_COMPCFG_PCI_EVENT_MAP(_x)                  (0x00000110 + (0x4 * ((_x) & 0x1f)))
#define   NFP_PCIEX_COMPCFG_PCI_EVENT_MAP_RESERVEDMSI(_x)    (((_x) & 0x7fffff) << 9)
#define   NFP_PCIEX_COMPCFG_PCI_EVENT_MAP_RESERVEDMSI_of(_x) (((_x) >> 9) & 0x7fffff)
#define   NFP_PCIEX_COMPCFG_PCI_EVENT_MAP_MASK               BIT(8)
#define   NFP_PCIEX_COMPCFG_PCI_EVENT_MAP_FUNCTION(_x)       (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_PCI_EVENT_MAP_FUNCTION_of(_x)    (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PCIeMSIxPendBitArray_[8] - Shows the status of 32 of the 256 MSI-X interrupt vectors Pending Bit Array, PBA
    Bits: 31:0  MsixPba(ro) - Status of the MSI-X Pending Bit Array.
*/
#define NFP_PCIEX_COMPCFG_PCIE_PBA(_x)                       (0x00000190 + (0x4 * ((_x) & 0x7)))
#define   NFP_PCIEX_COMPCFG_PCIE_PBA_MSIX_PBA(_x)            (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_PBA_MSIX_PBA_of(_x)         (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader0 - The TLP Header of the received Vendor-defined message
    Bits: 31:16 ReqId(ro) - Received vendor-defined message header, Requestor ID field.
    Bits: 15:8  Tag(ro) - Received vendor-defined message header, Tag field
    Bits:  7:0  MsgCode(ro) - Received vendor-defined message header Message, Code field
*/
#define NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0               0x000001b0
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0_REQ_ID(_x)  (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0_REQ_ID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0_TAG(_x)     (((_x) & 0xff) << 8)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0_TAG_of(_x)  (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0_MSG_CODE(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR0_MSG_CODE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader1 - The TLP Header of the received Vendor-defined message
    Bits: 20:18 Type(ro) - Received vendor-defined message header, Transaction Type field
    Bits: 17:15 Tclass(ro) - Received vendor-defined message header, Traffic Class field.
    Bits: 14:12 Attr(ro) - Received vendor-defined message header, Attribute field.
    Bits:  9:0  Length(ro) - Received vendor-defined message length field. Length is in bytes.
*/
#define NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1               0x000001b4
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_TYPE(_x)    (((_x) & 0x7) << 18)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_TYPE_of(_x) (((_x) >> 18) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_TCLASS(_x)  (((_x) & 0x7) << 15)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_TCLASS_of(_x) (((_x) >> 15) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_ATTR(_x)    (((_x) & 0x7) << 12)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_ATTR_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_LENGTH(_x)  (((_x) & 0x3ff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR1_LENGTH_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader2 - The TLP Header of the received Vendor-defined message
    Bits: 31:24 BusNum(ro) - Received vendor-defined message, Bus Number field
    Bits: 23:19 DevNum(ro) - Received vendor-defined message, Device Number field
    Bits: 18:16 FuncNum(ro) - Received vendor-defined message, Function Number field
    Bits: 15:0  VendorId(ro) - Received vendor-defined message, Vendor ID field
*/
#define NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2               0x000001b8
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_BUS_NUM(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_BUS_NUM_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_DEV_NUM(_x) (((_x) & 0x1f) << 19)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_DEV_NUM_of(_x) (((_x) >> 19) & 0x1f)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_FUNC_NUM(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_FUNC_NUM_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_VENDOR_ID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR2_VENDOR_ID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader3 - The TLP Header of the received Vendor-defined message
    Bits: 31:0  VHdr(ro) - Received vendor-defined message, vendor defined field
*/
#define NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR3               0x000001bc
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR3_V_HDR(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_HDR3_V_HDR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgData[4] - The data payload of the received Vendor-defined message
    Bits: 31:0  PcieVendorMsgData(ro) - The data payload of the received Vendor-defined message
*/
#define NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_DATA(_x)           (0x000001c0 + (0x4 * ((_x) & 0x3)))
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_DATA_PCIE_VENDOR_MSG_DATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_VENDOR_MSG_DATA_PCIE_VENDOR_MSG_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PcieIntMsiMsgAborted - Reporting Requester ID and Vector number of a MSI msg aborted occurred.
    Bits: 13    PcieMsiMsgAborted(w1c) - When set it indicates a MSI message aborted occurred. When cleared the Vector number and Requester ID fields are invalid
    Bits: 12:5  PcieMsiMsgAbortReqId(ro) - Requester id of aborted MSI message
    Bits:  4:0  PcieMsiMsgAbortVector(ro) - Vector number of aborted MSI message.
*/
#define NFP_PCIEX_COMPCFG_PCIE_INT_MSI_MSG_ABORT             0x000001dc
#define   NFP_PCIEX_COMPCFG_PCIE_INT_MSI_MSG_ABORT_PCIE_MSI_MSG_ABORTED BIT(13)
#define   NFP_PCIEX_COMPCFG_PCIE_INT_MSI_MSG_ABORT_PCIE_MSI_ABORT_REQ_ID(_x) (((_x) & 0xff) << 5)
#define   NFP_PCIEX_COMPCFG_PCIE_INT_MSI_MSG_ABORT_PCIE_MSI_ABORT_REQ_ID_of(_x) (((_x) >> 5) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIE_INT_MSI_MSG_ABORT_PCIE_MSI_ABORT_VECTOR(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_COMPCFG_PCIE_INT_MSI_MSG_ABORT_PCIE_MSI_ABORT_VECTOR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_vendor_id_device_id -
    Bits: 31:16 DID(rw) - Device ID: Device ID assigned by the manufacturer of the device. This field can be rewritten independently for each Function from the local management bus.
    Bits: 15:0  VID(ro) - Vendor ID: This is the Vendor ID assigned by PCI SIG to the manufacturer of the device. The Vendor ID is set in the Vendor ID Register within the local management register block.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_VENDOR_ID_DEVICE_ID       0x00000000
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_DID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_DID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_command_status -
    Bits: 31    DPE(w1c) - Detected Parity Error: This bit is set when the core has received a poisoned TLP. The Parity Error Response enable bit (bit 6) has no effect on the setting of this bit. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 30    SSE(w1c) - Signaled System Error: If the SERR enable bit is 1, this bit is set when the core has sent out a fatal or non-fatal error message on the link to the Root Complex. If the SERR enable bit is 0, this bit remains 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 29    RMA(w1c) - Received Master Abort: This bit is set when the core has received a completion from the link with the Unsupported Request status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 28    RTA(w1c) - Received Target Abort: This bit is set when the core has received a completion from the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 27    STA(w1c) - Signaled Target Abort: This bit is set when the core has sent a completion to the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 26:25 R6(ro) - Reserved:
    Bits: 24    MDPE(w1c) - Master Data Parity Error: When the Parity Error Response enable bit is 1, the core sets this bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). This bit remains 0 when the Parity Error Response enable bit is 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 23:21 R5(ro) - Reserved:
    Bits: 20    CL(ro) - Capabilities List: Indicates the presence of PCI Extended Capabilities registers. This bit is hardwired to 1.
    Bits: 19    IS(ro) - Interrupt Status: This bit is valid only when the core is configured to support legacy interrupts. Indicates that the core has a pending interrupt, that is, the core has sent an Assert_INTx message but has not transmitted a corresponding Deassert_INTx message.
    Bits: 18:16 R4(ro) - Reserved:
    Bits: 15:11 R3(ro) - Reserved:
    Bits: 10    IMD(rw) - INTx Message Disabled: Enables or disables the transmission of INTx Assert and De-assert messages from the core. Setting this bit to 1 disables generation of INTx assert/de-assert messages in the core. This field can be written from the local management bus.
    Bits:  9    R2(ro) - Reserved:
    Bits:  8    SE(rw) - SERR Enable: Enables the reporting of fatal and non-fatal errors detected by the core to the Root Complex. This field can be written from the local management bus.
    Bits:  7    R1(ro) - Reserved:
    Bits:  6    PERE(rw) - Parity Error Response Enable: When this bit is 1, the core sets the Master Data Parity Error status bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). When this bit is 0, the Master Data Parity Error status bit is never set. This field can be written from the local management bus.
    Bits:  5:3  R0(ro) - Reserved:
    Bits:  2    BE(rw) - Bus-Master Enable: Enables the device to issue memory and I/O requests from this Function. This field can be written from the local management bus.
    Bits:  1    MSE(rw) - Mem-Space Enable: Enables memory accesses through the core for this PCI Function. This field can be written from the local management bus.
    Bits:  0    ISE(rw) - IO-Space Enable: Enables IO accesses through the core for this PCI Function. This field can be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_COMMAND_STATUS            0x00000004
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_DPE      BIT(31)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_SSE      BIT(30)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_RMA      BIT(29)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_RTA      BIT(28)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_STA      BIT(27)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R6(_x)   (((_x) & 0x3) << 25)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R6_of(_x) (((_x) >> 25) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_MDPE     BIT(24)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R5(_x)   (((_x) & 0x7) << 21)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R5_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_CL       BIT(20)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_IS       BIT(19)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R4(_x)   (((_x) & 0x7) << 16)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R4_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R3(_x)   (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R3_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_IMD      BIT(10)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R2       BIT(9)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_SE       BIT(8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R1       BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_PERE     BIT(6)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R0(_x)   (((_x) & 0x7) << 3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_R0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_BE       BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_MSE      BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_COMMAND_STATUS_ISE      BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_revision_id_class_code -
    Bits: 31:24 CC(ro) - Class Code: Identifies the function of the device. This field can be rewritten independently for each Function from the local management bus
    Bits: 23:16 SCC(ro) - Sub-Class Code: Identifies a sub-category within the selected function. This field can be re-written independently for each Function from the local management bus.
    Bits: 15:8  PIB(ro) - Programming Interface Byte: Identifies the register set layout of the device. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  RID(ro) - Revision ID: Assigned by the manufacturer of the device to identify the revision number of the device. This field can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_REVISION_ID_CLASS_CODE    0x00000008
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_CC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_CC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_SCC(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_SCC_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_PIB(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_PIB_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_RID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_REVISION_ID_CLASS_CODE_RID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_bist_header_latency_cache_line -
    Bits: 31:24 BR(ro) - BIST Register: BIST control register. BIST is not currently supported by the core, and this field is hardwired to 0.
    Bits: 23    DT(ro) - Device Type: Identifies whether the device supports a single Function or multiple Functions. This bit is read as 0 when only Function 0 has been enabled in the Physical Function Configuration Register (in the local management block), and as 1 when more than one Function has been enabled.
    Bits: 22:16 HT(ro) - Header Type: Identifies format of header. This field is hardwired to .
    Bits: 15:8  LT(ro) - Latency Timer: This is an unused field and is hardwired to 0.
    Bits:  7:0  CLS(rw) - Cache Line Size: Cache Line Size Register defined in PCI Specifications 3.0. This field can be read or written, both from the link and from the local management bus, but its value is not used.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BIST_HEADER_LATENCY_CACHE_LINE 0x0000000c
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_BR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_BR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_DT BIT(23)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_HT(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_HT_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_LT(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_LT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_CLS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_CLS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_0 -
    Bits: 31:8  BAMR0(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R8(ro) - Reserved: These bits are hardwired to 0
    Bits:  3    P0(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
    Bits:  2    S0(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit). For 64-bit address ranges, the value in BAR 1 is treated as a continuation of the base address in BAR 0. The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  1    R7(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI0(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BASE_ADDR_0               0x00000010
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_BAMR0(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_BAMR0_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_R8(_x)      (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_R8_of(_x)   (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_P0          BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_S0          BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_R7          BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_0_MSI0        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_1 -
    Bits: 31:8  BAMR1(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R8(ro) - Reserved: These bits are hardwired to 0
    Bits:  3    P1(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
    Bits:  2    S1(ro) - Size: This field indicates that this BAR is a 32bit BAR
    Bits:  1    R7(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI1(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BASE_ADDR_1               0x00000014
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_BAMR1(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_BAMR1_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_R8(_x)      (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_R8_of(_x)   (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_P1          BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_S1          BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_R7          BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_1_MSI1        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_2 -
    Bits: 31:8  BAMR2(ro) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R10(ro) - Reserved: These bits are hardwired to 0.
    Bits:  3    P2(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  2    S2(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit). For 64-bit address ranges, the value in BAR 3 is treated as a continuation of the base address in BAR 2. The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  1    R9(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs
    Bits:  0    MSI2(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BASE_ADDR_2               0x00000018
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_BAMR2(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_BAMR2_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_R10(_x)     (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_R10_of(_x)  (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_P2          BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_S2          BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_R9          BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_2_MSI2        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_3 -
    Bits: 31:8  BAMR3(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R8(ro) - Reserved: These bits are hardwired to 0
    Bits:  3    P3(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
    Bits:  2    S3(ro) - Size: This field indicates that this BAR is a 32bit BAR
    Bits:  1    R7(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI3(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BASE_ADDR_3               0x0000001c
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_BAMR3(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_BAMR3_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_R8(_x)      (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_R8_of(_x)   (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_P3          BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_S3          BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_R7          BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_3_MSI3        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_4 -
    Bits: 31:8  BAMR4(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  BAMR4_1(ro) - Reserved
    Bits:  3    P4(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  2    S4(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit). For 64-bit address ranges, the value in BAR 5 is treated as a continuation of the base address in BAR 4. The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  1    R11(ro) - Reserved:
    Bits:  0    MSI4(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BASE_ADDR_4               0x00000020
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_BAMR4(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_BAMR4_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_BAMR4_1(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_BAMR4_1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_P4          BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_S4          BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_R11         BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_4_MSI4        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_5 -
    Bits: 31:8  BAMR5(ro) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R13(ro) - Reserved: These bits are hardwired to 0.
    Bits:  3    P5(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  2    S5(ro) - Size: This field indicates that this BAR is a 32bit BAR
    Bits:  1    R12(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI5(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_BASE_ADDR_5               0x00000024
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_BAMR5(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_BAMR5_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_R13(_x)     (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_R13_of(_x)  (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_P5          BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_S5          BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_R12         BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_BASE_ADDR_5_MSI5        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_rsvd_0A -
  Register: i_pcie_base_rsvd_0E -
  Register: i_power_mgmt_cap_struct_rsvd_022_023_[2] -
  Register: i_MSI_cap_struct_rsvd_02B -
  Register: i_MSIX_cap_struct_rsvd_02F -
  Register: i_PCIE_cap_struct_rsvd_035 -
  Register: i_PCIE_cap_struct_rsvd_037_038_[2] -
  Register: i_PCIE_cap_struct_rsvd_03D_03F_[3] -
  Register: i_ARI_cap_struct_rsvd_052_053_[2] -
  Register: i_device_serial_num_cap_struct_rsvd_057 -
  Register: i_SRIOV_cap_struct_rsvd_090_09C_[13] -
    Bits: 31:0  RSVD(ro) - NA
*/
#define NFP_PCIEX_PF_i_pcie_base_RSVD_0A                     0x00000028
#define NFP_PCIEX_PF_i_pcie_base_RSVD_0E                     0x00000038
#define NFP_PCIEX_PF_i_power_mgmt_cap_struct_RSVD_022_023(_x) (0x00000088 + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_PF_i_MSI_cap_struct_RSVD_02B               0x000000a8
#define NFP_PCIEX_PF_i_MSIX_cap_struct_RSVD_02F              0x000000bc
#define NFP_PCIEX_PF_i_PCIE_cap_struct_RSVD_035              0x000000d4
#define NFP_PCIEX_PF_i_PCIE_cap_struct_RSVD_037_038(_x)      (0x000000dc + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_PF_i_PCIE_cap_struct_RSVD_03D_03F(_x)      (0x000000f4 + (0x4 * ((_x) & 0x3)))
#define NFP_PCIEX_PF_i_ARI_cap_struct_RSVD_052_053(_x)       (0x00000148 + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_RSVD_057 0x0000015c
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_RSVD_090_09C(_x)     (0x00000240 + (0x4 * ((_x) & 0xf)))
#define   NFP_PCIEX_PF_I_PCIE_BASE_PF_GENERIC_RESERVED_REG_RSVD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_PF_GENERIC_RESERVED_REG_RSVD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_subsystem_vendor_id_subsystem_i -
    Bits: 31:16 SID(ro) - Subsystem ID: Specifies the Subsystem ID assigned by the manufacturer of the device. This field can be re-written independently for each Function from the local management bus.
    Bits: 15:0  SVID(ro) - Subsystem Vendor ID: Specifies the Subsystem Vendor ID assigned by the PCI SIG to the manufacturer of the device. Its value comes fom the Subsystem Vendor ID Register in the local management register block.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I 0x0000002c
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SVID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SVID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_expan_rom_base_addr -
    Bits: 31:8  RBA(rw) - ROM Base Address: Defines the base address and range of the expansion ROM address space. The number of writable bits in this field determines the size of the range (BAR aperture). All other bits are not writable, and are read as 0s. These bits can be written from the local management bus.
    Bits:  7:1  R14(ro) - Reserved:
    Bits:  0    ADE(rw) - Address Decode Enable: This bit must be set to 1 by the configuration software to enable the expansion ROM. This bit can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_EXPAN_ROM_BASE_ADDR       0x00000030
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_RBA(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_RBA_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_R14(_x) (((_x) & 0x7f) << 1)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_R14_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_ADE BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_capabilities_pointer -
    Bits: 31:8  R15(ro) - Reserved:
    Bits:  7:0  CP(ro) - Capabilities Pointer: Contains pointer to the first PCI Capability Structure. It can be re-written independently for every Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_CAPABILITIES_POINTER      0x00000034
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_CAPABILITIES_POINTER_R15(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_CAPABILITIES_POINTER_R15_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_CAPABILITIES_POINTER_CP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_CAPABILITIES_POINTER_CP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_intrpt_line_intrpt_pin -
    Bits: 31:11 R16(ro) - Reserved:
    Bits: 10:8  IPR(ro) - Interrupt Pin Register: Identifies the interrupt input (A, B, C, D) to which this Functions interrupt output is connected to (01 = INTA, 02 = INTB, 03 = INTC, 04 = INTD). The assignment of interrupt inputs to Functions is fixed when the core is configured. This field can be re-written independently for each Function from the local management bus. Default values - PF0: 01 (INTA), PF1: 02 (INTB).
    Bits:  7:0  ILR(rw) - Interrupt Line Register: Identifies the IRQx input of the interrupt controller at the Root Complex that is activated by this Functions interrupt (00 = IRQ0, ... , 0F = IRQ15, FF = unknown or not connected). This field is writable from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_I_INTRPT_LINE_INTRPT_PIN    0x0000003c
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_R16(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_R16_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_IPR(_x) (((_x) & 0x7) << 8)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_IPR_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_ILR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_ILR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_power_mgmt_cap_struct_i_pwr_mgmt_cap -
    Bits: 31    PSDCS(ro) - PME Support for D3(cold) State: Indicates whether the Function is capable of sending PME messages when in the D3cold state. Because the device does not have aux power, this bit is hardwired to 0.
    Bits: 30    PSDHS(ro) - PME Support for D3(hot) Statue: Indicates whether the Function is capable of sending PME messages when in the D3hot state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 28    PSD1S(ro) - PME Support for D1 State: Indicates whether the Function is capable of sending PME messages when in the D1 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 27    PSD0S(ro) - PME Support for D0 State: Indicates whether the Function is capable of sending PME messages when in the D0 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 26    D2S(ro) - D2 Support: Set if the Function supports the D2 power state. Currently hardwired to 0.
    Bits: 25    D1S(ro) - D1 Support: Set if the Function supports the D1 power state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 24:22 MCRAPS(ro) - Max Current Required from Aux Power Supply: Specifies the maximum current drawn by the device from the aux power source in the D3cold state. This field is not implemented in devices not supporting PME notification when in the D3cold state, and is therefore hardwired to 0.
    Bits: 21    DSI(ro) - Device Specific Initialization Bit: This bit, when set, indicates that the device requires additional configuration steps beyond setting up its PCI configuration space, to bring it to the D0 active state from the D0 uninitialized state. This bit is hardwired to 0.
    Bits: 20    R0(ro) - Reserved:
    Bits: 19    PC(ro) - PME Clock: Not applicable to PCI Express. This bit is hardwired to 0.
    Bits: 18:16 VID(ro) - Version ID: Indicates the version of the PCI Bus Power Management Specifications that the Function implements. This field is set by default to 011 (Version 1.2). It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. By default, this points to the MSI Capability Structure. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for Power Management. This field is set by default to 01 hex. It can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_power_mgmt_cap_struct_I_PWR_MGMT_CAP  0x00000080
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSDCS BIT(31)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSDHS BIT(30)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSD1S BIT(28)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSD0S BIT(27)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_D2S BIT(26)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_D1S BIT(25)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_MCRAPS(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_MCRAPS_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_DSI BIT(21)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_R0 BIT(20)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PC BIT(19)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_VID(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_VID_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep -
    Bits: 31:24 DR(ro) - Data Register: This optional register is not implemented in the Databahn PCIe core. This field is hardwired to 0.
    Bits: 23:16 R1(ro) - Reserved:
    Bits: 15    PMES(w1c) - PME Status: When PME notification is enabled, writing a 1 into this bit position from the local management bus sets this bit and causes the core to send a PME message from the associated Function. When the Root Complex processes this message, it will turn off this bit by writing a 1 into this bit position though a Config Write. This bit can be set or cleared from the local management bus, by writing a 1 or 0, respectively. It can only be cleared from the configuration path (by writing a 1).
    Bits: 14:9  R2(ro) - Reserved:
    Bits:  8    PE(rw) - PME Enable: Setting this bit enables the notification of PME events from the associated Function. This bit can be set also by writing into this register from the local management bus.
    Bits:  7:4  R3(ro) - Reserved:
    Bits:  3    NSR(ro) - No Soft Reset: When this bit is set to 1, the Function will maintain all its state in the PM state D3hot. The software is not required to re-initialize the Function registers on the transition back to D0. This bit is set to 1 by default, but can be modified independently for each PF from the local management bus.
    Bits:  2    R4(ro) - Reserved:
    Bits:  1:0  PS(rw) - Power State: Indicates the power state this Function is currently in. This field can be read by the software to monitor the current power state, or can be written to cause a transition to a new state. The valid settings are 00 (state D0), 01 (state D1) and 11 (state D3hot). The software should not write any other value into this field. This field can also be written from the local management bus independently for each Function.
*/
#define NFP_PCIEX_PF_i_power_mgmt_cap_struct_I_PWR_MGMT_CTRL_STAT_REP 0x00000084
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_DR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_DR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R1(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PMES BIT(15)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R2(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R2_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PE BIT(8)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R3(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_NSR BIT(3)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R4 BIT(2)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PS(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_PF_I_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_ctrl_reg -
    Bits: 31:25 R0(ro) - Reserved:
    Bits: 24    MCAP(ro) - Set to 1 to indicate that the device has per-vector masking capability. By default, this bit is set to 1 for PF 0 and 0 for PF 1. This bit can be written from the local management bus.
    Bits: 23    BAC64(ro) - 64-Bit Address Capable: Set to 1 to indicate that the device is capable of generating 64-bit addresses for MSI messages. Because the core has this capability, this bit is hardwired to 1.
    Bits: 22:20 MME(rw) - Multiple Message Enable: Encodes the number of distinct messages that the core is programmed to generate for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). This setting must be based on the number of interrupt inputs of the core that are actually used by this Function. This field can be written from the local management bus.
    Bits: 19:17 MMC(ro) - Multiple Message Capable: Encodes the number of distinct messages that the core is capable of generating for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). Thus, this field defines the number of the interrupt vectors for this Function. The core allows up to 32 distinct messages, but the setting of this field must be based on the number of interrupt inputs of the core that are actually used by the client. For example, if the client logic uses 8 of the 32 distinct MSI interrupt inputs of the core for this Function, then the value of this field must be set to 011. This field can be written from the local management bus.
    Bits: 16    ME(rw) - MSI Enable: Set by the configuration program to enable the MSI feature. This field can also be written from the local management bus.
    Bits: 15:8  CP1(ro) - Capabilities Pointer: Pointer to the next PCI Capability Structure. This is set to point to the MSI-X Capability Structure at 2C hex. This can be modified from the local management bus. This field can be written from the local management bus.
    Bits:  7:0  CID1(ro) - Capability ID: Specifies that the capability structure is for MSI. Hardwired to 05 hex.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_I_MSI_CTRL_REG         0x00000090
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_R0(_x) (((_x) & 0x7f) << 25)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_R0_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MCAP  BIT(24)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_BAC64 BIT(23)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MME(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MME_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MMC(_x) (((_x) & 0x7) << 17)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MMC_of(_x) (((_x) >> 17) & 0x7)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_ME    BIT(16)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CP1(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CP1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CID1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CID1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_msg_low_addr -
    Bits: 31:2  MAL(rw) - Message Address Low: Lower bits of the address to be used in MSI messages. This field can also be written from the local management bus.
    Bits:  1:0  R1(ro) - Reserved: The two lower bits of the address are hardwired to 0 to align the address on a double-word boundary.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_I_MSI_MSG_LOW_ADDR     0x00000094
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_MAL(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_MAL_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_R1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_R1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_msg_hi_addr -
    Bits: 31:0  MAH(rw) - Message Address High: Contains bits 63:32 of the 64-bit address to be used in MSI Messages. A value of 0 specifies that 32-bit addresses are to be used in the messages. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_I_MSI_MSG_HI_ADDR      0x00000098
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_HI_ADDR_MAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_HI_ADDR_MAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_msg_data -
    Bits: 31:16 R2(ro) - Reserved: Hardwired to 0
    Bits: 15:0  MD(rw) - Message Data: Message data to be used for this Function. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_I_MSI_MSG_DATA         0x0000009c
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_DATA_R2(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_DATA_R2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_DATA_MD(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MSG_DATA_MD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_mask -
    Bits: 31:0  MSIMask(rw) - Mask bits for MSI interrupts. The Multiple Message Capable field in the MSI Control Register specifies the number of distinct interrupts for the Function, which determines the number of valid mask bits
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_I_MSI_MASK             0x000000a0
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MASK_MSI_MASK(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_MASK_MSI_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_pend -
    Bits: 31:0  MSIPend(ro) - Pending bits for MSI interrupts. A read from this location returns the state of the MSI_MASK inputs of the core.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_I_MSI_PEND             0x000000a4
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_PEND_MSI_PEND(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_MSI_CAP_STRUCT_I_MSI_PEND_MSI_PEND_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MSIX_cap_struct_i_msix_ctrl -
    Bits: 31    MSIXE(rw) - MSI-X Enable: Set by the configuration program to enable the MSI-X feature. This field can also be written from the local management bus.
    Bits: 30    FM(rw) - Function Mask: This bit serves as a global mask to all the interrupt conditions associated with this Function. When this bit is set, the core will not send out MSI messages from this Function. This field can also be written from the local management bus.
    Bits: 29:27 R0(ro) - Reserved:
    Bits: 26:16 MSIXTS(ro) - MSI-X Table Size: Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function. The programmed value is 1 minus the size of the table (that is, this field is set to 0 if the table size is 1.). This field is set by default to 3f hex. It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. This is set to point to the PCI Express Capability Structure at 30 hex. This can be rewritten independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for MSI-X. This field is set by default to 11 hex. It can be rewritten independently for each Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_MSIX_cap_struct_I_MSIX_CTRL           0x000000b0
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_MSIXE   BIT(31)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_FM      BIT(30)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_R0(_x)  (((_x) & 0x7) << 27)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_R0_of(_x) (((_x) >> 27) & 0x7)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_MSIXTS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_MSIXTS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_CP(_x)  (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_CTRL_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MSIX_cap_struct_i_msix_tbl_offset -
    Bits: 31:3  TO(ro) - Table Offset: Offset of the memory address where the MSI-X Table is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5).
*/
#define NFP_PCIEX_PF_i_MSIX_cap_struct_I_MSIX_TBL_OFFSET     0x000000b4
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_TO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_TO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MSIX_cap_struct_i_msix_pending_intrpt -
    Bits: 31:3  PBAO(ro) - PBA Offset: Offset of the memory address where the PBA is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI1(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.
*/
#define NFP_PCIEX_PF_i_MSIX_cap_struct_I_MSIX_PENDING_INTRPT 0x000000b8
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_PBAO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_PBAO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_BARI1(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_BARI1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_cap_list -
    Bits: 31    R0(ro) - Reserved:
    Bits: 30    TRS(ro) - TCS Routing Supported: When set to 1, this bit indicates that the device supports routing of Trusted Configuration Requests. Not valid for Endpoints. Hardwired to 0.
    Bits: 29:25 IMN(ro) - Interrupt Message Number: Identifies the MSI or MSI-X interrupt vector for the interrupt message generated corresponding to the status bits in the Slot Status Register, Root Status Register, or this capability structure. This field must be defined based on the chosen interrupt mode - MSI or MSI-X. This field is hardwired to 0.
    Bits: 24    SS(ro) - Slot Status: Set to 1 when the link connected to a slot. Hardwired to 0.
    Bits: 23:20 DT(ro) - Device Type: Indicates the type of device implementing this Function. This field is hardwired to 0 in the EP mode.
    Bits: 19:16 PCV(ro) - Capability Version: Identifies the version number of the capability structure. When GEN2_ENABLE is strapped high, this field is permanently set to 2 (Gen2), and 1 (Gen1) otherwise.
    Bits: 15:8  NCP(ro) - Next Capability Pointer: Points to the next PCI capability structure. Set to 0 because this is the last capability structure.
    Bits:  7:0  CID(ro) - Capability ID: Specifies Capability ID assigned by PCI SIG for this structure. This field is hardwired to 10 hex.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_PCIE_CAP_LIST       0x000000c0
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_R0  BIT(31)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_TRS BIT(30)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_IMN(_x) (((_x) & 0x1f) << 25)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_IMN_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_SS  BIT(24)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_DT(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_DT_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_PCV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_PCV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_NCP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_NCP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_cap -
    Bits: 31:29 R3(ro) - Reserved:
    Bits: 28    FC(ro) - FLR Capable: Set when device has Function-Level Reset capability. It is set by default to 1. It can be re-written independently for each Function from the local management bus.
    Bits: 27:26 CPLS(ro) - Captured Power Limit Scale: Specifies the scale used by Slot Power Limit Value. It can be re-written independently for each Function from the local management bus.
    Bits: 25:18 CSPLV(ro) - Captured Slot Power Limit Value: Specifies upper limit on power supplied by slot. It can be re-written independently for each Function from the local management bus.
    Bits: 17:16 R2(ro) - Reserved:
    Bits: 15    RBER(ro) - Role-Based Error Reporting: Enables role-based error reporting. It is hardwired to 1.
    Bits: 14:12 R1(ro) - Reserved:
    Bits: 11:9  AL1SL(ro) - Acceptable L1 Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L1 to L0. It can be re-written independently for each Function from the local management bus.
    Bits:  8:6  AL0SL(ro) - Acceptable L0S Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L0S to L0. It can be re-written independently for each Function from the local management bus.
    Bits:  5    ETFS(ro) - Extended Tag Field Supported: Set when device allows the tag field to be extended from 5 to 8 bits. It is set by default to 1. It can be rewritten independently for each Function from the local management bus.
    Bits:  4:3  PFS(ro) - Phantom Functions Supported: This field is used to extend the tag field by combining unused Function bits with the tag bits. This field is hardwired to 00 to disable this feature.
    Bits:  2:0  MPS(ro) - Max Payload Size: Specifies maximum payload size supported by the device. Device must limit the size of Outgoing Completion payloads to this value: 000 = 128 bytes, 001 = 256 bytes, 010 = 512 bytes.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_PCIE_DEV_CAP        0x000000c4
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R3(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R3_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_FC   BIT(28)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CPLS(_x) (((_x) & 0x3) << 26)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CPLS_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CSPLV(_x) (((_x) & 0xff) << 18)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CSPLV_of(_x) (((_x) >> 18) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R2(_x) (((_x) & 0x3) << 16)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R2_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_RBER BIT(15)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R1(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R1_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL1SL(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL1SL_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL0SL(_x) (((_x) & 0x7) << 6)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL0SL_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_ETFS BIT(5)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_PFS(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_PFS_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_MPS(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_MPS_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_ctrl_status -
    Bits: 31:22 R4(ro) - Reserved:
    Bits: 21    TP(ro) - Transaction Pending: Indicates if any of the Non-Posted requests issued by the Function are still pending.
    Bits: 20    APD(ro) - Aux Power Detected: Set when auxiliary power is detected by the device. This is an unused field.
    Bits: 19    URD(w1c) - Unsupported Request Detected: Set to 1 by the core when it receives an unsupported request, regardless of whether its reporting is enabled or not.
    Bits: 18    FED(w1c) - Fatal Error Detected: Set to 1 by the core when it detects a fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked.
    Bits: 17    NFED(w1c) - Non-Fatal Error Detected: Set to 1 by the core when it detects a non-fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked.
    Bits: 16    CED(w1c) - Correctable Error Detected: Set to 1 by the core when it detects a correctable error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked.
    Bits: 15    FLR(rw) - Function-Level Reset: Writing a 1 into this bit position generates a Function-Level Reset for the selected Function. This bit reads as 0.
    Bits: 14:12 MRRS(rw) - Max Read Request Size: Specifies the maximum size allowed in read requests. Device must limit the size of outgoing read requests to this value: 000 : 128 bytes, 001 : 256 bytes, 010 : 512 bytes, 011 : 1024 bytes, 100 : 2048 bytes, 101 : 4096 bytes
    Bits: 11    ENS(rw) - Enable No Snoop: When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed.
    Bits: 10    EAP(ro) - Enable Aux Power: Used only when device used aux power. This field is hardwired to 0.
    Bits:  9    EPH(ro) - Enable Phantom Functions: This field is hardwired to 0 as the core does not support this feature.
    Bits:  8    ETFE(rw) - Extended Tag Field Enable: Enables the extension of the tag field from 5 to 8 bits.
    Bits:  7:5  MPS(rw) - Max Payload Size: Specifies the maximum TLP payload size configured. The device must be able to receive a TLP of this maximum size, and should not generate TLPs larger than this value. The configuration program sets this field based on the maximum payload size in the Device Capabilities Register, and the capability of the other side. 000 = 128 bytes, 001 = 256 bytes.
    Bits:  4    ERO(rw) - Enable Relaxed Ordering: When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it, when the transactions do not require Strong Ordering.
    Bits:  3    EURR(rw) - Enable Unsupported Request Reporting: Enables the sending of error messages by the core on receiving unsupported requests.
    Bits:  2    EFER(rw) - Enable Fatal Error Reporting: Enables the sending of ERR_FATAL messages by the core on the detection of fatal errors.
    Bits:  1    ENFER(rw) - Enable Non-Fatal Error Reporting: Enables the sending of ERR_NONFATAL messages by the core on the detection of non-fatal errors.
    Bits:  0    ECER(rw) - Enable Correctable Error Reporting: Enables the sending of ERR_COR messages by the core on the detection of correctable errors.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_PCIE_DEV_CTRL_STATUS 0x000000c8
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_R4(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_R4_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_TP BIT(21)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_APD BIT(20)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_URD BIT(19)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_FED BIT(18)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_NFED BIT(17)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_CED BIT(16)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_FLR BIT(15)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MRRS(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MRRS_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ENS BIT(11)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EAP BIT(10)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EPH BIT(9)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ETFE BIT(8)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MPS(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MPS_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ERO BIT(4)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EURR BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EFER BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ENFER BIT(1)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ECER BIT(0)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_cap -
    Bits: 31:24 PN(ro) - Port Number: Specifies the port number assigned to the PCI Express link connected to this device. This field is hardwired to 0.
    Bits: 23    R5(ro) - Reserved:
    Bits: 22    AOC(ro) - ASPM Optionality Compliance: Setting this bit indicates that the device supports the ASPM Optionality feature. It can be turned off by writing a 0 to this bit position through the local management bus.
    Bits: 21    R6(ro) - Reserved:
    Bits: 20    DLLARC(ro) - Data Link Layer Active Reporting Capability: Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 19    SDERC(ro) - Surprise Down Error Reporting Capability: Indicates the capability of the device to report a Surprise Down error condition. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 18    CPM(ro) - Clock Power Management: Indicates that the device supports removal of reference clocks. It can be re-written independently for each function from the local management bus.
    Bits: 17:15 L1EL(ro) - L1 Exit Latency: Specifies the exit latency from L1 state. This parameter is dependent on the Physical Layer implementation. It can be re-written independently for each Function from the local management bus.
    Bits: 14:12 L0SEL(ro) - L0S Exit Latency: Specifies the time required for the device to transition from L0S to L0. This parameter is dependent on the Physical Layer implementation. It can be re-written independently for each Function from the local management bus.
    Bits: 11:10 ASPM(ro) - Active State Power Management: Indicates the level of ASPM support provided by the device. This field can be re-written independently for each Function from the local management bus.
    Bits:  9:4  MLW(ro) - Maximum Link Width: Indicates the maximum number of lanes supported by the device. This field is hardwired based on the setting of the LANE_COUNT_IN strap input.
    Bits:  3:0  MLS(ro) - Maximum Link Speed: Indicates the speeds supported by the link (2.5 GT/s, 5 GT/s and 8 GT/s per lane). This field is hardwired to 0001 (2.5GT/s) when the strap input PCIE_GENERATION_SEL is set to 00, to 0010 (5 GT/s) when the strap is set to 01, and to 0100 (8 GT/s) when the strap input is set to 10.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_LINK_CAP            0x000000cc
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_PN(_x)   (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_PN_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_R5       BIT(23)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_AOC      BIT(22)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_R6       BIT(21)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_DLLARC   BIT(20)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_SDERC    BIT(19)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_CPM      BIT(18)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_L1EL(_x) (((_x) & 0x7) << 15)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_L1EL_of(_x) (((_x) >> 15) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_L0SEL(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_L0SEL_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_ASPM(_x) (((_x) & 0x3) << 10)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_ASPM_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_MLW(_x)  (((_x) & 0x3f) << 4)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_MLW_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_MLS(_x)  (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_MLS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_ctrl_status -
    Bits: 31:30 R10(ro) - Reserved:
    Bits: 29    DLLA(ro) - Data Link Layer Active: Indicates the status of the Data Link Layer. Set to 1 when the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0 in this version of the core.
    Bits: 28    SCC(ro) - Slot Clock Configuration: Indicates that the device uses the reference clock provided by the connector. This bit is hardwired to 0.
    Bits: 27    LTS(ro) - Link Training Status: Not applicable to Endpoints. This field is hardwired to 0.
    Bits: 26    R8(ro) - Reserved:
    Bits: 25:20 NLW(ro) - Negotiated Link Width: Set at the end of link training to the actual link width negotiated between the two sides (0000001 = 1, 000010 = 2, 000100 = 4, 001000 = 8).
    Bits: 19:16 NLS(ro) - Negotiated Link Speed: Negotiated link speed of the device. The only supported speed ids are 2.5 GT/s per lane (0001), 5 GT/s per lane (0010), and 8 GT/s per lane (0011).
    Bits: 14:9  Reserved(ro) - Reserved:
    Bits:  8    ECPM(rw) - Enable Clock Power Management: When this bit is set to 1, the device may use the CLKREQ# pin on the PCIe connector to power manage the Link clock. This bit is writable only when the Clock Power Management bit in the Link Capability Register is set to 1. This bit may also be set from the local management bus.
    Bits:  7    ES(rw) - Extended Synch: Set to 1 to extend the sequence of ordered sets transmitted while exiting from the L0S state.
    Bits:  6    CCC(rw) - Common Clock Configuration: A value of 0 indicates that the reference clock of this device is asynchronous to that of the upstream device. A value of 1 indicates that the reference clock is common.
    Bits:  5:4  R7(ro) - Reserved:
    Bits:  3    RCB(rw) - Read Completion Boundary: Indicates the Read Completion Boundary of the Root Port connected to this Endpoint (0 = 64 bytes, 1 = 128 bytes).
    Bits:  2    R6(ro) - Reserved:
    Bits:  1:0  ASPMC(rw) - Active State Power Management Control: Controls the level of ASPM support on the PCI Express link associated with this Function. The allowed values are 00 (ASPM disabled) and 01 (L0S entry enabled)
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_LINK_CTRL_STATUS    0x000000d0
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_R10(_x) (((_x) & 0x3) << 30)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_R10_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_DLLA BIT(29)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_SCC BIT(28)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_LTS BIT(27)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_R8 BIT(26)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_NLW(_x) (((_x) & 0x3f) << 20)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_NLW_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_NLS(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_NLS_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_RX(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_RX_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_ECPM BIT(8)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_ES BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_CCC BIT(6)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_R7(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_R7_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_RCB BIT(3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_R6 BIT(2)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_ASPMC(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_ASPMC_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_cap_2 -
    Bits: 31:19 R14(ro) - Reserved:
    Bits: 18    OPFFS(ro) - OBFF Supported: A 1 in this bit position indicates that the Function supports the Optimized Buffer Flush/Fill (OBFF) capability using message signaling. This bit is set to 1 by default for PF0 and hardwired to 0 for PF 1. This bit can be overwritten for PF 0 from the local management bus. Default values - PF0: 1, PF1: 0.
    Bits: 17:13 R13(ro) - Reserved:
    Bits: 12    TCS(ro) - TPH Completer Supported: This bit, when set, indicates that the Function is capable of serving as a completer for requests with Transaction Processing Hints (TPH). This bit is set to 1 by default, but can be turned off for all Physical Functions by writing into PF 0.
    Bits: 11    LMS(ro) - LTR Mechanism Supported: Hardwired to 0.
    Bits: 10    R12(ro) - Reserved:
    Bits:  9    BAOCS128(ro) - 128-Bit CAS Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for the Compare-and- Swap (CAS) Atomic Operation with 128-bit operands. This bit is set to 1 by default, but can be overwritten independently for each Function from the local management bus.
    Bits:  8    BAOCS64(ro) - 64-Bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 64-bit Atomic Operations. This bit is set to 1 by default, but can be overwritten independently for each Function from the local management bus.
    Bits:  7    BAOCS32(ro) - 32-Bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 32-bit Atomic Operations. This bit is set to 1 by default, but can be overwritten independently for each Function from the local management bus.
    Bits:  6    AORS(ro) - atomic_op_routing_supported
    Bits:  5    ARIFS(ro) - ari_forwarding_supported
    Bits:  4    CTDS(ro) - Completion Timeout Disable Supported: A 1 in this field indicates that the associated Function supports the capability to turn off its Completion timeout. This bit is set to 1 by default, but can be re-written independently for each Function from the local management bus.
    Bits:  3:0  CTR(ro) - Completion Timeout Ranges: Specifies the Completion Timeout values supported by the device. This field is set by default to 0010 (10 ms - 250 ms), but can be modified independently for each Function from the local management bus. The actual timeout values are in two programmable local management registers, which allow the timeout settings of the two sub-ranges within Range B to be programmed independently.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_PCIE_DEV_CAP_2      0x000000e4
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_R14(_x) (((_x) & 0x1fff) << 19)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_R14_of(_x) (((_x) >> 19) & 0x1fff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_OPFFS BIT(18)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_R13(_x) (((_x) & 0x1f) << 13)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_R13_of(_x) (((_x) >> 13) & 0x1f)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_TCS BIT(12)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_LMS BIT(11)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_R12 BIT(10)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_BAOCS128 BIT(9)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_BAOCS64 BIT(8)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_BAOCS32 BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_AORS BIT(6)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_ARIFS BIT(5)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_CTDS BIT(4)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_CTR(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_CTR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2 -
    Bits: 31:15 R17(ro) - Reserved:
    Bits: 14:13 OBFFE(rw) - OBFF Enable: Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device. This field is implemented only in PF 0. Valid settings are 00 (disabled), 01 (Variation A) and 10 (Variation B). This field can also be written from the local management bus. RW if OBFF capability is supported, RO otherwise.
    Bits: 12:11 R16(ro) - Reserved:
    Bits: 10    LTRME(rw) - LTR Mechanism Enable: Hardwired to 0.
    Bits:  9    IDOCE(rw) - IDO Completion Enable: When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates.
    Bits:  8    IDORE(rw) - IDO Request Enable: When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates.
    Bits:  6    AORE(rw) - Atomic Op Requester Enable: This bit must be set to enable the generation of Atomic Op Requests from the Function. If the client logic attempts to send an Atomic Op for a Function for which this bit is not set, logic in the core will nullify the TLP on its way to the link. This bit can also be written from the local management bus.
    Bits:  5    R15(ro) - Reserved:
    Bits:  4    CTD(rw) - Completion Timeout Disable: Setting this bit disables Completion Timeout in the device. This bit can also be written from the local management bus.
    Bits:  3:0  CTV(ro) - Completion Timeout Value: Specifies the Completion Timeout value for the device. Allowable values are 0101 (sub-range 1) and 0110 (sub-range 2). The corresponding timeout values are stored in the local management registers Completion Timeout Interval Registers 0 and 1, respectively.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_PCIE_DEV_CTRL_STATUS_2 0x000000e8
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_R17(_x) (((_x) & 0x1ffff) << 15)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_R17_of(_x) (((_x) >> 15) & 0x1ffff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_OBFFE(_x) (((_x) & 0x3) << 13)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_OBFFE_of(_x) (((_x) >> 13) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_R16(_x) (((_x) & 0x3) << 11)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_R16_of(_x) (((_x) >> 11) & 0x3)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_LTRME BIT(10)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_IDOCE BIT(9)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_IDORE BIT(8)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_AORE BIT(6)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_R15 BIT(5)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_CTD BIT(4)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_CTV(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_2_CTV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_cap_2_reg -
    Bits:  3:1  SLSV(ro) - Supported Link Speeds Vector: This field indicates the supported link speeds of the core. For each bit, a value of 1 indicates that the corresponding link speed is supported, while a value of 0 indicates that the corresponding speed is not supported. The bits corresponding to various link speeds are: Bit 1 = Link Speed 2.5 GT/s, Bit 2 = Link Speed 5 GT/s, Bit 3 = Link Speed 8 GT/s. This field is hardwired to 001 (2.5 GT/s) when the PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 011 (2.5 and 5 GT/s) when the strap is set to 01, and 111 (2.5, 5, and 8 GT/s) when the strap pin is set to 10.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_LINK_CAP_2_REG      0x000000ec
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_2_REG_SLSV(_x) (((_x) & 0x7) << 1)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CAP_2_REG_SLSV_of(_x) (((_x) >> 1) & 0x7)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_ctrl_status_2 -
    Bits: 31:22 R19(ro) - Reserved:
    Bits: 21    LE(w1c) - Link Equalization: This bit can be set by the software running on the EndPoint to force the Endpoint to perform link equalization. Setting this bit causes the LTSSM of the core to enter the Recovery state and request its link partner to perform equalization. This bit is cleared when the LTSSM enters the Recovery.Equalization state. It can also be cleared by writing a 1 to this bit position by the host, or writing a 0 from the LMI.
    Bits: 20    EP3S(ro) - Equalization Phase 3 Successful: This bit, when set to 1, indicates that the Phase 3 of the Transmitter Equalization procedure has completed successfully.
    Bits: 19    EP2S(ro) - Equalization Phase 2 Successful: This bit, when set to 1, indicates that the Phase 2 of the Transmitter Equalization procedure has completed successfully.
    Bits: 18    EP1S(ro) - Equalization Phase 1 Successful: This bit, when set to 1, indicates that the Phase 1 of the Transmitter Equalization procedure has completed successfully.
    Bits: 17    EQC(ro) - Equalization Complete: This bit, when set to 1, indicates that the Transmitter Equalization procedure has completed.
    Bits: 16    CDEL(ro) - Current De-Emphasis Level: This status bit indicates the current operating de-emphasis level of the transmitter (0 = -6 dB, 1 = -3.5 dB).
    Bits: 15:12 CDE(rw) - Compliance De-Emphasis: This bit sets the de-emphasis level (for 5 GT/s operation) or the Transmitter Preset level (for 8 GT/s operation) when the LTSSM enters the Polling.Compliance state because of software setting the Enter Compliance bit in this register. At 5 GT/s, the only valid setting are 0 and 1 (0 = -6 dB, 1 = -3.5 dB). STICKY.
    Bits: 11    CS(rw) - Compliance SOS: When this bit is set to 1, the device will transmit SKP ordered sets between compliance patterns. STICKY.
    Bits: 10    EMC(rw) - Enter Modified Compliance: This field is intended for debug and compliance testing purposes only. If this bit is set to 1, the device will transmit the Modified Compliance Pattern when the LTSSM enters the Polling. Compliance substate. STICKY.
    Bits:  9:7  TM(rw) - Transmit Margin: This field is intended for debug and compliance testing purposes only. It controls the non-de-emphasized voltage level at the transmitter outputs. Its encodings are: 000: Normal operating range. 001: 800 - 1200 mV for full swing and 400 - 700 mV for half swing. 010 - 111: See PCI Express Base Specification 2.0. This field is reset to 0 when the LTSSM enters the Polling.Configuration substate during link training. STICKY.
    Bits:  6    SDE(rw) - Selectable De-emphasis: This bit selects the de-emphasis level when the core is operating at 5 GT/s (0 = -6 dB, 1 = -3.5 dB).
    Bits:  5    HASD(rw) - Hardware Autonomous Speed Disable: When this bit is set, the LTSSM is prevented from changing the operating speed of the link, other than reducing the speed to correct unreliable operation of the link.
    Bits:  4    EC(rw) - Enter Compliance: This bit is used to force the Endpoint device to enter the Compliance mode. Software sets this bit to 1 and initiates a hot reset to force the device into the Compliance mode. The target speed for the Compliance mode is determined by the Target Link Speed field of this register. STICKY.
    Bits:  3:0  TLS(rw) - Target Link Speed: This field sets the target speed when the software forces the link into Compliance mode by setting the Enter Compliance bit in this register (0001 = 2.5 GT/s, 0010 = 5 GT/s, 0100 = 8 GT/s). The default value of this field is 0001 (2.5 GT/s) when the PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 0010 (5 GT/s) when the strap is set to 01, and 0011 (8 GT/s) when the strap pin is set to 10. STICKY.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_I_LINK_CTRL_STATUS_2  0x000000f0
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_R19(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_R19_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_LE BIT(21)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_EP3S BIT(20)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_EP2S BIT(19)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_EP1S BIT(18)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_EQC BIT(17)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_CDEL BIT(16)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_CDE(_x) (((_x) & 0xf) << 12)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_CDE_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_CS BIT(11)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_EMC BIT(10)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_TM(_x) (((_x) & 0x7) << 7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_TM_of(_x) (((_x) >> 7) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_SDE BIT(6)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_HASD BIT(5)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_EC BIT(4)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_TLS(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_PCIE_CAP_STRUCT_I_LINK_CTRL_STATUS_2_TLS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_AER_enhanced_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Device Serial Number Capability (150 hex) when ARI_ENABLE is strapped low, and to the ARI Capability Structure (140 hex) when ARI_ENABLE is strapped high. This field can also be re-written from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus.
    Bits: 15:0  PEECI(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express AER Extended Capability Structure (0001 hex).
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_AER_ENHANCED_CAP_HDR 0x00000100
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_PEECI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_PEECI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_uncorr_err_status -
    Bits: 31:23 R3(ro) - Reserved:
    Bits: 22    UIES(w1c) - Uncorrectable Internal Error Status: This bit is set when the core has detected an internal uncorrectable error (HAL parity error or an uncorrectable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input UNCORRECTABLE_ERROR_IN. This error is not Function-specific. This error is considered fatal by default, and is reported by sending an ERR_FATAL message. STICKY.
    Bits: 21    R2(ro) - Reserved:
    Bits: 20    URES(w1c) - Unsupported Request Error Status: This bit is set when the core has received a request from the link that it does not support. This error is not Function-specific. This error is considered non-fatal by default. In the special case described in Sections 6.2.3.2.4.1 of the PCI Express Specifications, the error is reported by sending an ERR_COR message. In all other cases, the error is reported by sending an ERR_NONFATAL message. The header of the received request that caused the error is logged in the Header Log Registers. STICKY.
    Bits: 19    EES(w1c) - ECRC Error Status: This bit is set when the core has detected an ECRC error in a received TLP. This error is not Function-specific. The header of the received TLP with error is logged in the Header Log Registers. STICKY.
    Bits: 18    MTS(w1c) - Malformed TLP Status: This bit is set when the core receives a malformed TLP from the link. This error is not Function-specific. This error is considered fatal by default, and is reported by sending an ERR_FATAL message. The header of the received TLP with error is logged in the Header Log Registers. STICKY.
    Bits: 17    ROS(w1c) - Receiver Overflow Status: This bit is set when the core receives a TLP in violation of the receive credit currently available. This error is not Function-specific. STICKY.
    Bits: 16    UCS(w1c) - Unexpected Completion Status: This bit is set when the core has received an unexpected Completion packet from the link. This error is not Function-specific. STICKY.
    Bits: 15    CAS(w1c) - Completer Abort Status: This bit is set when the core has returned the Completer Abort (CA) status to a request received from the link. This error is Function-specific. The header of the received request that caused the error is logged in the Header Log Registers. STICKY.
    Bits: 14    CTS(w1c) - Completion Timeout Status: This bit is set when the completion timer associated with an outstanding request times out. This error is Function-specific. This error is considered non-fatal by default. STICKY.
    Bits: 13    FCPES(w1c) - Flow Control Protocol Error Status: This bit is set when certain violations of the flow control protocol are detected by the core. See Section 2.6.1 of the PCI Express Base Specification for details. This error is not Function-specific STICKY.
    Bits: 12    PTS(w1c) - Poisoned TLP Status: This bit is set when the core receives a poisoned TLP from the link. This error is Function-specific. This error is considered non-fatal by default. The error is reported by sending an ERR_NONFATAL message. The header of the received TLP with error is logged in the Header Log Registers. STICKY.
    Bits: 11:5  R1(ro) - Reserved:
    Bits:  4    DLPES(w1c) - Data Link Protocol Error Status: This bit is set when the core receives an Ack or Nak DLLP whose sequence number does not correspond to that of an unacknowledged TLP or that of the last acknowledged TLP (for details, refer to PCI Express Base Specification 1.1, Section 3.5.2). This error is not Function-specific, and is reported by Function 0. STICKY.
    Bits:  3:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_UNCORR_ERR_STATUS    0x00000104
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R3(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R3_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_UIES BIT(22)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R2 BIT(21)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_URES BIT(20)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_EES BIT(19)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_MTS BIT(18)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_ROS BIT(17)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_UCS BIT(16)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_CAS BIT(15)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_CTS BIT(14)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_FCPES BIT(13)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_PTS BIT(12)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R1(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R1_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_DLPES BIT(4)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_uncorr_err_mask -
    Bits: 31:23 R7(ro) - Reserved:
    Bits: 22    UIEM(rw) - Uncorrectable Internal Error Mask: This bit is set to mask the reporting of internal errors. STICKY.
    Bits: 20    UREM(rw) - Unsupported Request Error Mask: This bit is set to mask the reporting of unexpected requests received from the link. STICKY.
    Bits: 19    EEM(rw) - ECRC Error Mask: This bit is set to mask the reporting of ECRC errors. STICKY.
    Bits: 18    MTM(rw) - Malformed TLP Mask: This bit is set to mask the reporting of malformed TLPs received from the link. STICKY.
    Bits: 17    ROM(rw) - Receiver Overflow Mask: This bit is set to mask the reporting of violations of receive credit. STICKY.
    Bits: 16    UCM(rw) - Unexpected Completion Mask: This bit is set to mask the reporting of unexpected Completions received by the core. STICKY.
    Bits: 15    CAM(rw) - Completer Abort Mask: This bit is set to mask the reporting of the core sending a Completer Abort. STICKY.
    Bits: 14    CTM(rw) - Completion Timeout Mask: This bit is set to mask the reporting of Completion Timeouts. STICKY.
    Bits: 13    FCPEM(rw) - Flow Control Protocol Error Mask: This bit is set to mask the reporting of Flow Control Protocol Errors. STICKY.
    Bits: 12    PTM(rw) - Poisoned TLP Mask: This bit is set to mask the reporting of a Poisoned TLP. STICKY.
    Bits: 11:5  R5(ro) - Reserved:
    Bits:  4    DLPEM(rw) - Data Link Protocol Error Mask: This bit is set to mask the reporting of Data Link Protocol Errors. STICKY.
    Bits:  3:0  R4(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_UNCORR_ERR_MASK      0x00000108
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R7(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R7_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_UIEM BIT(22)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_UREM BIT(20)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_EEM BIT(19)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_MTM BIT(18)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_ROM BIT(17)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_UCM BIT(16)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_CAM BIT(15)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_CTM BIT(14)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_FCPEM BIT(13)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_PTM BIT(12)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R5(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R5_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_DLPEM BIT(4)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R4(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_uncorr_err_severity -
    Bits: 31:23 R11(ro) - Reserved:
    Bits: 22    UIES(rw) - Uncorrectable Internal Error Severity: Severity of internal errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 21    R10(ro) - Reserved:
    Bits: 20    URES(rw) - Unsupported Requeset Error Severity: Severity of unexpected requests received from the link (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 19    EES(rw) - ECRC Error Severity: Severity of ECRC errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 18    MTS(rw) - Malformed TLP Severity: Severity of malformed TLPs received from the link (0 = Non- Fatal, 1 = Fatal). STICKY.
    Bits: 17    ROS(rw) - Receiver Overflow Severity: Severity of receive credit violations (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 16    UCS(rw) - Unexpected Completion Severity: Severity of unexpected Completions received by the core (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 15    CAS(rw) - Completer Abort Severity: Severity of sending a Completer Abort (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 14    CTS(rw) - Completion Timeout Severity: Severity of Completion Timeouts (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 13    FCPES(rw) - Flow Control Protocol Error Severity: Severity of Flow Control Protocol Errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 12    PTS(rw) - Poisoned TLP Severity: Severity of a Poisoned TLP error (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 11:6  R9(ro) - Reserved:
    Bits:  5    SDER(ro) - Surprise Down Error Severity: SThis bit is hardwired to 1.
    Bits:  4    DLPER(rw) - Data Link Protocol Error Severity: Severity of Data Link Protocol Errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits:  3:0  R8(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_UNCORR_ERR_SEVERITY  0x0000010c
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R11(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R11_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_UIES BIT(22)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R10 BIT(21)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_URES BIT(20)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_EES BIT(19)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_MTS BIT(18)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_ROS BIT(17)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_UCS BIT(16)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_CAS BIT(15)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_CTS BIT(14)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_FCPES BIT(13)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_PTS BIT(12)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R9(_x) (((_x) & 0x3f) << 6)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R9_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_SDER BIT(5)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_DLPER BIT(4)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R8(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_corr_err_status -
    Bits: 31:16 R14(ro) - Reserved:
    Bits: 15    HLOS(w1c) - Header Log Overflow Status: This bit is set on a Header Log Register overflow, that is, when the header could not be logged in the Header Log Register because it is occupied by a previous header. STICKY.
    Bits: 14    CIES(w1c) - Corrected Internal Error Status: This bit is set when the core has detected an internal correctable error condition (a correctable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input CORRECTABLE_ERROR_IN. This error is not Function-specific. STICKY.
    Bits: 13    ANFES(w1c) - Advisory Non-Fatal Error Status: This bit is set when an uncorrectable error occurs, which is determined to belong to one of the special cases described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications. This causes the core to generate an ERR_COR message in place of an ERR_NONFATAL message. STICKY.
    Bits: 12    RTTS(w1c) - Replay Timer Timeout Status: This bit is set when the replay timer in the Data Link Layer of the core times out, causing the core to retransmit a TLP. This error is not Function-specific. STICKY.
    Bits: 11:9  R13(ro) - Reserved:
    Bits:  8    RNRS(w1c) - Replay Number Rollover Status: This bit is set when the replay count rolls over after three re-transmissions of a TLP at the Data Link Layer of the core. This error is not Function-specific STICKY.
    Bits:  7    BDS(w1c) - Bad DLLP Status: This bit is set when an LCRC error is detected in a received DLLP, and no errors were detected by the Physical Layer. This error is not Function-specific. STICKY.
    Bits:  6    BTS(w1c) - Bad TP Status: This bit is set when an error is detected in a received TLP by the Data Link Layer of the core. The conditions causing this error are: (i) An LCRC error (ii) The packet terminates with EDB symbol, but its LCRC field does not equal the inverted value of the calculated CRC. This error is not Function-specific. STICKY.
    Bits:  5:1  R12(ro) - Reserved:
    Bits:  0    RES(w1c) - Receiver Error Status: This bit is set when an error is detected in the receive side of the Physical Layer of the core (e.g. a bit error or coding violation). This error is not Function-specific. STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_CORR_ERR_STATUS      0x00000110
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R14(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R14_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_HLOS BIT(15)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_CIES BIT(14)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_ANFES BIT(13)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_RTTS BIT(12)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R13(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R13_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_RNRS BIT(8)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_BDS BIT(7)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_BTS BIT(6)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R12(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R12_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_STATUS_RES BIT(0)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_corr_err_mask -
    Bits: 31:16 R17(ro) - Reserved:
    Bits: 15    HLOM(rw) - Header Log Overflow Mask: This bit, when set, masks the generation of error messages in response to a Header Log register overflow. STICKY.
    Bits: 14    CIEM(rw) - Corrected Internal Error Mask: This bit, when set, masks the generation of error messages in response to a corrected internal error condition. STICKY.
    Bits: 13    ANFEM(rw) - Advisory Non-Fatal Error Mask: This bit, when set, masks the generation of error messages in response to an uncorrectable error occur, which is determined to belong to one of the special cases (as described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications). STICKY.
    Bits: 12    RTTM(rw) - Replay Timer Timeout Mask: This bit, when set, masks the generation of error messages in response to a Replay Timer timeout event. STICKY.
    Bits: 11:9  R16(ro) - Reserved:
    Bits:  8    RNRM(rw) - Replay Number Rollover Mask: This bit, when set, masks the generation of error messages in response to a Replay Number Rollover event. STICKY.
    Bits:  7    BDM(rw) - Bad DLLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad DLLP' received. STICKY.
    Bits:  6    BTM(rw) - Bad TLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad TLP' received. STICKY.
    Bits:  5:1  R15(ro) - Reserved:
    Bits:  0    REM(rw) - Receiver Error Mask: This bit, when set, masks the generation of error messages in response to the Physical Layer errors STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_CORR_ERR_MASK        0x00000114
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_R17(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_R17_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_HLOM BIT(15)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_CIEM BIT(14)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_ANFEM BIT(13)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_RTTM BIT(12)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_R16(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_R16_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_RNRM BIT(8)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_BDM  BIT(7)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_BTM  BIT(6)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_R15(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_R15_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_CORR_ERR_MASK_REM  BIT(0)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_advcd_err_cap_ctrl -
    Bits: 31:11 R18(ro) - Reserved:
    Bits: 10    MHRE(ro) - Multiple Header Recording Enable: Setting this bit enables the Function to log multiple error headers in its Header Log Registers. It is hardwired to 0
    Bits:  9    MHRC(ro) - Multiple Header Recording Capable: This bit is set when the Function has the capability to log more than one error header in its Header Log Registers. It is hardwired to 0.
    Bits:  8    EEC(rw) - Enable ECRC Check: Setting this bit enables ECRC checking on the receive side of the core. This bit is writable from the local management bus. STICKY.
    Bits:  7    ECC(ro) - ECRC Check Capability: This read-only bit indicates to the software that the device is capable of checking ECRC in packets received from the link. This bit is writable from the local management bus.
    Bits:  6    EEG(rw) - Enable ECRC Generation: Setting this bit enables the ECRC generation on the transmit side of the core. This bit is writable from the local management bus. STICKY.
    Bits:  5    EGC(ro) - ECRC Generation Capability: This read-only bit indicates to the software that the device is capable of generating ECRC in packets transmitted on the link. This bit is writable from the local management bus.
    Bits:  4:0  FER(ro) - First Error Pointer: This is a 5-bit pointer to the bit position in the Uncorrectable Error Status Register corresponding to the error that was detected first. When there are multiple bits set in the Uncorrectable Error Status Register, this field informs the software which error was observed first. To prevent the field from being overwritten before software was able to read it, this field is not updated while the status bit pointed by it in the Uncorrectable Error Status Register remains set. After the software clears this status bit, a subsequent error condition that sets any bit in the Uncorrectable Error Status Register will update the First Error Pointer. Any uncorrectable error type, including the special cases where the error is reported using an ERR_COR message, will set the First Error Pointer (assuming the software has reset the error pointed by it in the Uncorrectable Error Status Register). STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_ADVCD_ERR_CAP_CTRL   0x00000118
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_R18(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_R18_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_MHRE BIT(10)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_MHRC BIT(9)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_EEC BIT(8)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_ECC BIT(7)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_EEG BIT(6)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_EGC BIT(5)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_FER(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_FER_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_0 -
    Bits: 31:0  HD0(ro) - Header DWORD 0: First DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_HDR_LOG_0            0x0000011c
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_0_HD0(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_0_HD0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_1 -
    Bits: 31:0  HD1(ro) - Header DWORD 1: Second DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_HDR_LOG_1            0x00000120
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_1_HD1(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_1_HD1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_2 -
    Bits: 31:0  HD2(ro) - Header DWORD 2: Third DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_HDR_LOG_2            0x00000124
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_2_HD2(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_2_HD2_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_3 -
    Bits: 31:0  HD3(ro) - Header DWORD 3: Fourth DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_I_HDR_LOG_3            0x00000128
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_3_HD3(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_AER_CAP_STRUCT_I_HDR_LOG_3_HD3_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_ARI_cap_struct_i_ARI_ext_cap_hdr -
    Bits: 31:20 ARINCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. The pointer is set by default to point to the Device Serial Number Capability Structure.
    Bits: 19:16 ARICV(ro) - Capability Version: Specifies the SIG-assigned value for the version of the capability structure. This field is set to 1 by default, but can be modified independently for each Function from the local management bus
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI-SIG to the ARI Extended Capability (000E hex).
*/
#define NFP_PCIEX_PF_i_ARI_cap_struct_I_ARI_EXT_CAP_HDR      0x00000140
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_ARINCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_ARINCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_ARICV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_ARICV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_ARI_cap_struct_i_ARI_cap_and_ctrl -
    Bits: 31:16 ACR(ro) - ARI Control Register: ARI Control Register not implemented in this core. This field is hardwired to 0.
    Bits: 15:8  NF(ro) - Next Function: Points to the next Physical Function in the device. This field is set by default to point to the next Physical Function assuming all eight Physical Functions are active. It can be rewritten from the local management bus.
    Bits:  1    AFGC(ro) - ACS Function Groups Capability: Relevant only when ACS Capability is supported. This field is hardwired to 0.
    Bits:  0    MFGC(ro) - MFVC Function Groups Capability: Set when device supports arbitration at the Function Group-level. This field is hardwired to 0.
*/
#define NFP_PCIEX_PF_i_ARI_cap_struct_I_ARI_CAP_AND_CTRL     0x00000144
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_ACR(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_ACR_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_NF(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_NF_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_AFGC BIT(1)
#define   NFP_PCIEX_PF_I_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_MFGC BIT(0)
/*----------------------------------------------------------------
  Register: i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr -
    Bits: 31:20 SNNCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Power Budgeting Capability Structure. It can be written from local management bus independently for each PF.
    Bits: 19:16 DSNCV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus by writing into Function 0 from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express Device Serial Number Capability (0001 hex).
*/
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_I_DEV_SER_NUM_CAP_HDR 0x00000150
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_CAP_HDR_SNNCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_CAP_HDR_SNNCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_CAP_HDR_DSNCV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_CAP_HDR_DSNCV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_CAP_HDR_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_CAP_HDR_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_device_serial_num_cap_struct_i_dev_ser_num_0 -
    Bits: 31:0  DSND0(ro) - Device Serial Number, Doubleword 0: This field contains the first 32 bits of the device's serial number.
*/
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_I_DEV_SER_NUM_0 0x00000154
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_0_DSND0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_0_DSND0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_device_serial_num_cap_struct_i_dev_ser_num_1 -
    Bits: 31:0  DSND1(ro) - Device Serial Number, Doubleword 1: This field contains the last 32 bits of the device's serial number.
*/
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_I_DEV_SER_NUM_1 0x00000158
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_1_DSND1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_DEVICE_SERIAL_NUM_CAP_STRUCT_I_DEV_SER_NUM_1_DSND1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Latency Tolerance Reporting (LTR) Capability Structure for PF 0 (1B0 hex) , and to the Dynamic Power Allocation Capability Structure for PF 1 (1C0 hex). This field can be modified independently for each Function from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the Resizable BAR Capability (0015 hex).
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_EXT_CAP_HDR 0x00000180
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_EXT_CAP_HDR_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_EXT_CAP_HDR_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_EXT_CAP_HDR_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_EXT_CAP_HDR_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_EXT_CAP_HDR_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_EXT_CAP_HDR_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_0 -
    Bits: 31:24 R1(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CAP_0 0x00000184
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_R1(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_R1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A512G BIT(23)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A256G BIT(22)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A128G BIT(21)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A64G BIT(20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A32G BIT(19)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A16G BIT(18)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A8G BIT(17)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A4G BIT(16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A2G BIT(15)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A1G BIT(14)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A512M BIT(13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A256M BIT(12)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A128M BIT(11)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A64M BIT(10)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A32M BIT(9)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A16M BIT(8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A8M BIT(7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A4M BIT(6)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A2M BIT(5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_A1M BIT(4)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_R0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_0_R0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0 -
    Bits: 31:13 R3(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the first BAR of the PF (0 = 1M, 1 = 2M, ... , 12 = 4G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:5  RBARC(ro) - Resizable BAR Count: Specifies the number of BARs that can be configured through the Resizable BAR Capability Structure for this PF. This field can be modified independently for each PF from the local management bus.
    Bits:  4:3  R2(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CTRL_0 0x00000188
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_R3(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_R3_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_RBARC(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_RBARC_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_R2(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_R2_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_0_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_1 -
    Bits: 31:24 R5(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R4(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CAP_1 0x0000018c
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_R5(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_R5_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A512G BIT(23)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A256G BIT(22)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A128G BIT(21)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A64G BIT(20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A32G BIT(19)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A16G BIT(18)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A8G BIT(17)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A4G BIT(16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A2G BIT(15)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A1G BIT(14)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A512M BIT(13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A256M BIT(12)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A128M BIT(11)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A64M BIT(10)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A32M BIT(9)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A16M BIT(8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A8M BIT(7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A4M BIT(6)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A2M BIT(5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_A1M BIT(4)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_R4(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_1_R4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1 -
    Bits: 31:13 R7(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the second BAR of the PF (0 = 1M, 1 = 2M, ... , 16 = 64G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R6(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CTRL_1 0x00000190
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_R7(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_R7_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_R6(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_R6_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_1_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_2 -
    Bits: 31:24 R9(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R8(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CAP_2 0x00000194
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_R9(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_R9_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A512G BIT(23)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A256G BIT(22)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A128G BIT(21)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A64G BIT(20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A32G BIT(19)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A16G BIT(18)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A8G BIT(17)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A4G BIT(16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A2G BIT(15)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A1G BIT(14)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A512M BIT(13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A256M BIT(12)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A128M BIT(11)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A64M BIT(10)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A32M BIT(9)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A16M BIT(8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A8M BIT(7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A4M BIT(6)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A2M BIT(5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_A1M BIT(4)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_R8(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_2_R8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2 -
    Bits: 31:13 R11(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the third BAR of the PF (0 = 1M, 1 = 2M, ... , 12 = 4G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R10(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CTRL_2 0x00000198
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_R11(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_R11_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_R10(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_R10_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_2_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_3 -
    Bits: 31:24 R13(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R12(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CAP_3 0x0000019c
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_R13(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_R13_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A512G BIT(23)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A256G BIT(22)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A128G BIT(21)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A64G BIT(20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A32G BIT(19)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A16G BIT(18)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A8G BIT(17)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A4G BIT(16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A2G BIT(15)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A1G BIT(14)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A512M BIT(13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A256M BIT(12)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A128M BIT(11)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A64M BIT(10)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A32M BIT(9)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A16M BIT(8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A8M BIT(7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A4M BIT(6)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A2M BIT(5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_A1M BIT(4)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_R12(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_3_R12_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3 -
    Bits: 31:13 R15(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the fourth BAR of the PF (0 = 1M, 1 = 2M, ... , 11 = 2G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R14(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CTRL_3 0x000001a0
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_R15(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_R15_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_R14(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_R14_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_3_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_4 -
    Bits: 31:24 R13(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R12(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CAP_4 0x000001a4
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_R13(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_R13_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A512G BIT(23)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A256G BIT(22)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A128G BIT(21)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A64G BIT(20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A32G BIT(19)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A16G BIT(18)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A8G BIT(17)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A4G BIT(16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A2G BIT(15)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A1G BIT(14)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A512M BIT(13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A256M BIT(12)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A128M BIT(11)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A64M BIT(10)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A32M BIT(9)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A16M BIT(8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A8M BIT(7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A4M BIT(6)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A2M BIT(5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_A1M BIT(4)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_R12(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_4_R12_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4 -
    Bits: 31:13 R15(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the fifth BAR of the PF (0 = 1M, 1 = 2M, ... , 11 = 2G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R14(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CTRL_4 0x000001a8
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_R15(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_R15_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_R14(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_R14_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_4_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_5 -
    Bits: 31:24 R13(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R12(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CAP_5 0x000001ac
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_R13(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_R13_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A512G BIT(23)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A256G BIT(22)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A128G BIT(21)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A64G BIT(20)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A32G BIT(19)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A16G BIT(18)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A8G BIT(17)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A4G BIT(16)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A2G BIT(15)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A1G BIT(14)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A512M BIT(13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A256M BIT(12)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A128M BIT(11)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A64M BIT(10)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A32M BIT(9)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A16M BIT(8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A8M BIT(7)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A4M BIT(6)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A2M BIT(5)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_A1M BIT(4)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_R12(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CAP_5_R12_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5 -
    Bits: 31:13 R15(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the sixth BAR of the PF (0 = 1M, 1 = 2M, ... , 11 = 2G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R14(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_I_RESIZE_BAR_CTRL_5 0x000001b0
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_R15(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_R15_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_R14(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_R14_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_RESIZABLE_BAR_CAP_STRUCT_I_RESIZE_BAR_CTRL_5_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Transaction Processing Hints (TPH) Requester Capability Structure (274 hex). This field can be modified for PF 0 from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG-assigned value for the version of the capability structure. This field is set by default to 1, but can be modified independently for each Function from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI-SIG to the SR-IOV Extended Capability Structure (0010 hex).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_SRIOV_EXT_CAP_HEADER_REG 0x00000200
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_EXT_CAP_HEADER_REG_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_EXT_CAP_HEADER_REG_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_EXT_CAP_HEADER_REG_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_EXT_CAP_HEADER_REG_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_EXT_CAP_HEADER_REG_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_EXT_CAP_HEADER_REG_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_SRIOV_cap_reg -
    Bits: 31:2  R0(ro) - Reserved:
    Bits:  1    ACHP(ro) - ARI Capable Hierarchy Preserved: A 1 in this bit position indicates that the ARI Capable Hierarchy bit in the SR-IOV Control Register is preserved across certain power state transitions (see the PCI-SIG Single Root IO Virtualization and Sharing Specifications, Version 1.1, Section 3.3.3.5 for details). This bit is set to 1 by default, but can be modified from the local management bus.
    Bits:  0    VFMC(ro) - VF Migration Capable: Set when the core supports VF migration. Hardwired to 0.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_SRIOV_CAP_REG      0x00000204
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CAP_REG_R0(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CAP_REG_R0_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CAP_REG_ACHP BIT(1)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CAP_REG_VFMC BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg -
    Bits: 31:16 SSR(ro) - SRIOV Status Register: Not implemented.
    Bits: 15:5  R1(ro) - Reserved:
    Bits:  4    ARIE(rw) - ARI Enable: This bit enables the ARI mode for Virtual Functions. This bit must be set when VF Enable is set.
    Bits:  3    VFMSE(rw) - VF Memory Space Enable: This bit must be set to allow access to the memory space of the VFs associated with this PF.
    Bits:  2    VFMIE(ro) - VF Migration Interrupt Enable: Not supported. Hardwired to 0
    Bits:  1    VFME(ro) - VF Migration Enable: Not supported. Hardwired to 0
    Bits:  0    VFE(rw) - VF Enable: This bit must be set to enable the VFs associated with this PF.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_SRIOV_CTRL_STATUS_REG 0x00000208
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_SSR(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_SSR_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_R1(_x) (((_x) & 0x7ff) << 5)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_R1_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_ARIE BIT(4)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_VFMSE BIT(3)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_VFMIE BIT(2)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_VFME BIT(1)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SRIOV_CTRL_STATUS_REG_VFE BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_initial_total_VFs_reg -
    Bits: 31:23 R1(ro) - Reserved field.
    Bits: 22:16 TVF(ro) - Total VFs: This field contains the total number of VFs per PF. Its default setting is identical to that of InitialVFs. This field can be rewritten from the local management bus.
    Bits: 15:7  R0(ro) - Reserved field.
    Bits:  6:0  IVF(ro) - Initial VFs: This field contains the initial number of VFs configured for each PF. Its default value is determined by the setting of VF_MODE. This field can be rewritten from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_INITIAL_TOTAL_VFS_REG 0x0000020c
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_R1(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_R1_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_TVF(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_TVF_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_R0(_x) (((_x) & 0x1ff) << 7)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_R0_of(_x) (((_x) >> 7) & 0x1ff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_IVF(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_INITIAL_TOTAL_VFS_REG_IVF_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg -
    Bits: 31:24 R0(ro) - Reserved bits.
    Bits: 23:16 FDL(ro) - Function Dependency Link: This field is used to specify dependencies between PFs. It is set to 0 by default, but can be modified independently for each Function from the local management bus.
    Bits: 15:0  NVF(rw) - NumVFs: This field must be set by the software to the number of VFs that it wants to enable for each PF. This field can be changed only when the VF Enable bit in the SR-IOV Control Register is 0. Its value should not exceed the setting of TotalVFs for the corresponding Physical Function. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_FUNC_DEP_LINK_NUMVFS_REG 0x00000210
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_FUNC_DEP_LINK_NUMVFS_REG_R0(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_FUNC_DEP_LINK_NUMVFS_REG_R0_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_FUNC_DEP_LINK_NUMVFS_REG_FDL(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_FUNC_DEP_LINK_NUMVFS_REG_FDL_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_FUNC_DEP_LINK_NUMVFS_REG_NVF(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_FUNC_DEP_LINK_NUMVFS_REG_NVF_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_offset_stride_reg -
    Bits: 31:16 VFS(ro) - VF Stride: Stride value used to assign RIDs for VFs. The stride value is hardwired to 1 for all Physical Functions.
    Bits: 15:0  FVFO(ro) - First VF Offset: Offset of First VF relative to its PF. Its default value depends on the setting of VF_MODE. The offset is such that the RIDs of VFs are mapped in the range 64 - 79. This field can be re-written independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_OFFSET_STRIDE_REG 0x00000214
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_OFFSET_STRIDE_REG_VFS(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_OFFSET_STRIDE_REG_VFS_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_OFFSET_STRIDE_REG_FVFO(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_OFFSET_STRIDE_REG_FVFO_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_device_id_reg -
    Bits: 31:16 VFDI(ro) - VF Device ID: VF device id assigned to the device. Can be re-written independently for each PF from the local management bus.
    Bits: 15:0  R2(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_DEVICE_ID_REG   0x00000218
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_DEVICE_ID_REG_VFDI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_DEVICE_ID_REG_VFDI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_DEVICE_ID_REG_R2(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_DEVICE_ID_REG_R2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_supported_page_size_reg -
    Bits: 31:16 R0(ro) - Reserved bits.
    Bits: 15:0  PS(ro) - Page Sizes: Page sizes supported by the device (one bit for each page size). The core implements only bits 15:0 of this register. Can be re-written independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_SUPPORTED_PAGE_SIZE_REG 0x0000021c
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SUPPORTED_PAGE_SIZE_REG_R0(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SUPPORTED_PAGE_SIZE_REG_R0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SUPPORTED_PAGE_SIZE_REG_PS(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SUPPORTED_PAGE_SIZE_REG_PS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_system_page_size_reg -
    Bits: 31:16 R0(ro) - Reserved bits.
    Bits: 15:0  SPS(rw) - System Page Size: This field must be programmed by software to the current page size in use. The core implements only bits 15:0 of this register. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_SYSTEM_PAGE_SIZE_REG 0x00000220
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SYSTEM_PAGE_SIZE_REG_R0(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SYSTEM_PAGE_SIZE_REG_R0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SYSTEM_PAGE_SIZE_REG_SPS(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_SYSTEM_PAGE_SIZE_REG_SPS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_0_reg -
    Bits: 31:8  BAR(rw) - Base Address for Memory BAR: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR. The aperture for this BAR is configurable in the range 1K bytes - 4G bytes. All other bits are not writable, and are read as 0's.
    Bits:  7:4  R6(ro) - Reserved: These bits are reserved when the BAR is used to define a memory address range.
    Bits:  3    PF(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable).
    Bits:  2    SIZE(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64-bit). This field is hardwired to 1.
    Bits:  1    R5(ro) - Reserved: This bit is hardwired to 0 for both memory and IO BARs.
    Bits:  0    MSI(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_BAR_0_REG       0x00000224
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_BAR(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_BAR_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_R6(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_R6_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_PF  BIT(3)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_SIZE BIT(2)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_R5  BIT(1)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_0_REG_MSI BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_1_reg -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_BAR_1_REG       0x00000228
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_1_REG_BAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_1_REG_BAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_2_reg -
    Bits: 31:8  BAR(rw) - Base Address for Memory BAR: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR. The aperture for this BAR is configurable in the range 1K bytes - 4G bytes. All other bits are not writable, and are read as 0's.
    Bits:  7:4  R6(ro) - Reserved: These bits are reserved when the BAR is used to define a memory address range.
    Bits:  3    PF(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable).
    Bits:  2    SIZE(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64-bit). This field is hardwired to 1.
    Bits:  1    R5(ro) - Reserved: This bit is hardwired to 0 for both memory and IO BARs.
    Bits:  0    MSI(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_BAR_2_REG       0x0000022c
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_BAR(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_BAR_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_R6(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_R6_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_PF  BIT(3)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_SIZE BIT(2)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_R5  BIT(1)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_2_REG_MSI BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_3_reg -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_BAR_3_REG       0x00000230
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_3_REG_BAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_3_REG_BAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_4_reg -
    Bits: 31:8  BAR(rw) - Base Address for Memory BAR: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR. The aperture for this BAR is configurable in the range 1K bytes - 4G bytes. All other bits are not writable, and are read as 0's.
    Bits:  7:4  R6(ro) - Reserved: These bits are reserved when the BAR is used to define a memory address range.
    Bits:  3    PF(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable).
    Bits:  2    SIZE(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64-bit). This field is hardwired to 1.
    Bits:  1    R5(ro) - Reserved: This bit is hardwired to 0 for both memory and IO BARs.
    Bits:  0    MSI(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_BAR_4_REG       0x00000234
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_BAR(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_BAR_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_R6(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_R6_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_PF  BIT(3)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_SIZE BIT(2)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_R5  BIT(1)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_4_REG_MSI BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_5_reg -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_BAR_5_REG       0x00000238
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_5_REG_BAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_BAR_5_REG_BAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_migration_state_arr_offset_reg -
    Bits: 31:0  MSAOR(ro) - NA
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_I_VF_MIGRATION_STATE_ARR_OFFSET_REG 0x0000023c
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_MIGRATION_STATE_ARR_OFFSET_REG_MSAOR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_SRIOV_CAP_STRUCT_I_VF_MIGRATION_STATE_ARR_OFFSET_REG_MSAOR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value is set as follows: - PF 0: When PCIE_ GENERATION_SEL is configured for Gen3 operation, this pointer points to the Secondary PCI Express Capability Structure (0x300), otherwise it points to the Vendor-Specific (VSEC) Capability (0x400). PF 1: This pointer points to the Vendor-Specific (VSEC) Capability (0x400). This pointer can be modified independently for each PF from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified independently for each PF from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the TPH Requester Capability.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_I_TPH_REQ_EXT_CAP_HEADER_REG 0x00000274
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_i_TPH_req_cap_reg -
    Bits: 31:27 R2(ro) - Reserved:
    Bits: 26:16 STS(ro) - ST Table Size: Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on). Max limit is 64 entries when the ST Table is located in the TPH Requester Capability Structure, and 2048 entries when located in the MSI-X table. Each entry is 16 bits long. This field is set by default to 3F hex (64 entries), but can be modified from the local management bus.
    Bits: 15:11 R1(ro) - Reserved:
    Bits: 10:9  STL(ro) - ST Table Location: The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present. (00 = ST Table not present, 01 = ST Table in the TPH Requester values stored in the MSI-X Table in client RAM, 11 = reserved.). This field is set by default to 01, but can be modified from the local management bus.
    Bits:  8    ERS(ro) - Extended TPH Requester Supported: When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix. This bit is hardwired to 0, as the core does not have this capability.
    Bits:  7:3  R0(ro) - Reserved:
    Bits:  2    DSMS(ro) - Device-Specific Mode Supported: A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation. In this mode, the Steering Tags are supplied by the client for each request through the HAL master interface. The client typically chooses the Steering Tag values from the ST Table, but is not required to do so. This bit is set to 1 by default, but can be modified from the local management bus.
    Bits:  1    IVMS(ro) - Interrupt Vector Mode Supported: Hardwired to 0.
    Bits:  0    NSM(ro) - No ST Mode Supported: When set to 1, indicates that this Function supports the 'No ST Mode' for the generation of TPH Steering Tags. In the No ST Mode, the device must use a Steering Tag value of 0 for all requests. This bit is hardwired to 1, as all TPH Requesters are required to support the No ST Mode of operation.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_I_TPH_REQ_CAP_REG      0x00000278
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R2(_x) (((_x) & 0x1f) << 27)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R2_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R1(_x) (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STL(_x) (((_x) & 0x3) << 9)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STL_of(_x) (((_x) >> 9) & 0x3)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_ERS BIT(8)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_DSMS BIT(2)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_IVMS BIT(1)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_NSM BIT(0)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_i_TPH_req_ctrl_reg -
    Bits:  9:8  CRE(rw) - TPH Requester Enable: When set to 1, the Function is RW 0 allowed to generate requests with Transaction Processing Hints. The TPH_REQUESTER_ENABLE[1:0] output of the core copies the setting of this register bit (bit 0 for PF 0 and bit 1 for PF 1. This field can also be written from the local management bus.
    Bits:  7:3  R0(ro) - Reserved bits.
    Bits:  2:0  CSM(rw) - ST Mode: This field selects the ST mode (000 = No Steering Tag Mode, 001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved). The TPH_ST_MODE[5:0] output of the core reflects the setting of this register field (bits 3:0 for PF 0 and bits 5:3 for PF 1). This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_I_TPH_REQ_CTRL_REG     0x0000027c
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_CRE(_x) (((_x) & 0x3) << 8)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_CRE_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_R0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_R0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_CSM(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_CSM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_TPH_0_31_[16] -
    Bits: 31:24 STU1(ro) - ST Upper 1: This field is used for the upper 8 bits of the second Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits: 23:16 STL1(rw) - ST Lower 1: Lower 8 bits of the second Steering Tag. This is the 8-bit Steering Tag sent out in requests.
    Bits: 15:8  STU0(ro) - ST Upper 0: This field is used for the upper 8 bits of the first Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits:  7:0  STL0(rw) - ST Lower 0: Lower 8 bits of the first Steering Tag. This is the 8-bit Steering Tag sent out in requests.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31(_x)           (0x00000280 + (0x4 * ((_x) & 0xf)))
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STU1(_x)    (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STU1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STL1(_x)    (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STL1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STU0(_x)    (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STU0_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STL0(_x)    (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_TPH_CAP_STRUCT_TPH_0_31_STL0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to NULL. It can be modified independently for each PF from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified independently for each PF from the local management bus.
    Bits: 15:0  PECI(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the Secondary PCI Express Capability
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_SEC_PCIE_CAP_HDR_REG 0x00000300
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_SEC_PCIE_CAP_HDR_REG_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_SEC_PCIE_CAP_HDR_REG_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_SEC_PCIE_CAP_HDR_REG_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_SEC_PCIE_CAP_HDR_REG_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_SEC_PCIE_CAP_HDR_REG_PECI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_SEC_PCIE_CAP_HDR_REG_PECI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_link_control3_reg -
    Bits: 31:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_LINK_CONTROL3_REG 0x00000304
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LINK_CONTROL3_REG_R0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LINK_CONTROL3_REG_R0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg -
    Bits: 31:8  R0(ro) - Reserved:
    Bits:  7:0  LES(w1c) - Lane Error Status: Each of these bits indicates the error status for the corresponding lane. STICKY.
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_LANE_ERROR_STATUS_REG 0x00000308
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_ERROR_STATUS_REG_R0(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_ERROR_STATUS_REG_R0_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_ERROR_STATUS_REG_LES(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_ERROR_STATUS_REG_LES_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 0 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 0 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_LANE_EQUALIZATION_CONTROL_REG0 0x0000030c
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R3 BIT(31)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R2_1 BIT(23)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R1 BIT(15)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R0_1 BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG0_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_LANE_EQUALIZATION_CONTROL_REG1 0x00000310
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R3 BIT(31)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R2_1 BIT(23)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R1 BIT(15)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R0_1 BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG1_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_LANE_EQUALIZATION_CONTROL_REG2 0x00000314
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R3 BIT(31)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R2_1 BIT(23)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R1 BIT(15)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R0_1 BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG2_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 4 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 4 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_I_LANE_EQUALIZATION_CONTROL_REG3 0x00000318
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R3 BIT(31)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R2_1 BIT(23)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R1 BIT(15)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R0_1 BIT(7)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_I_PCIE_SEC_EXT_CAP_STRUCT_I_LANE_EQUALIZATION_CONTROL_REG3_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_vendor_id_device_id -
    Bits: 31:16 DID(rw) - Device ID: Device ID assigned by the manufacturer of the device. This field can be rewritten independently for each Function from the local management bus.
    Bits: 15:0  VID(ro) - Vendor ID: This is the Vendor ID assigned by PCI SIG to the manufacturer of the device. The Vendor ID is set in the Vendor ID Register within the local management register block.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_VENDOR_ID_DEVICE_ID    0x00000000
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_DID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_DID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_command_status -
    Bits: 31    DPE(w1c) - Detected Parity Error: This bit is set when the core has received a poisoned TLP. The Parity Error Response enable bit (bit 6) has no effect on the setting of this bit. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 30    SSE(w1c) - Signaled System Error: If the SERR enable bit is 1, this bit is set when the core has sent out a fatal or non-fatal error message on the link to the Root Complex. If the SERR enable bit is 0, this bit remains 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 29    RMA(w1c) - Received Master Abort: This bit is set when the core has received a completion from the link with the Unsupported Request status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 28    RTA(w1c) - Received Target Abort: This bit is set when the core has received a completion from the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 27    STA(w1c) - Signaled Target Abort: This bit is set when the core has sent a completion to the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 26:25 R6(ro) - Reserved:
    Bits: 24    MDPE(w1c) - Master Data Parity Error: When the Parity Error Response enable bit is 1, the core sets this bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). This bit remains 0 when the Parity Error Response enable bit is 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 23:21 R5(ro) - Reserved:
    Bits: 20    CL(ro) - Capabilities List: Indicates the presence of PCI Extended Capabilities registers. This bit is hardwired to 1.
    Bits: 19    IS(ro) - Interrupt Status: This bit is valid only when the core is configured to support legacy interrupts. Indicates that the core has a pending interrupt, that is, the core has sent an Assert_INTx message but has not transmitted a corresponding Deassert_INTx message.
    Bits: 18:16 R4(ro) - Reserved:
    Bits: 15:11 R3(ro) - Reserved:
    Bits: 10    IMD(rw) - INTx Message Disabled: Enables or disables the transmission of INTx Assert and De-assert messages from the core. Setting this bit to 1 disables generation of INTx assert/de-assert messages in the core. This field can be written from the local management bus.
    Bits:  9    R2(ro) - Reserved:
    Bits:  8    SE(rw) - SERR Enable: Enables the reporting of fatal and non-fatal errors detected by the core to the Root Complex. This field can be written from the local management bus.
    Bits:  7    R1(ro) - Reserved:
    Bits:  6    PERE(rw) - Parity Error Response Enable: When this bit is 1, the core sets the Master Data Parity Error status bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). When this bit is 0, the Master Data Parity Error status bit is never set. This field can be written from the local management bus.
    Bits:  5:3  R0(ro) - Reserved:
    Bits:  2    BE(rw) - Bus-Master Enable: Enables the device to issue memory and I/O requests from this Function. This field can be written from the local management bus.
    Bits:  1    MSE(rw) - Mem-Space Enable: Enables memory accesses through the core for this PCI Function. This field can be written from the local management bus.
    Bits:  0    ISE(rw) - IO-Space Enable: Enables IO accesses through the core for this PCI Function. This field can be written from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_COMMAND_STATUS         0x00000004
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_DPE   BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_SSE   BIT(30)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_RMA   BIT(29)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_RTA   BIT(28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_STA   BIT(27)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R6(_x) (((_x) & 0x3) << 25)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R6_of(_x) (((_x) >> 25) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_MDPE  BIT(24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R5(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R5_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_CL    BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_IS    BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R4(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R4_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R3(_x) (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R3_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_IMD   BIT(10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R2    BIT(9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_SE    BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R1    BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_PERE  BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_R0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_BE    BIT(2)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_MSE   BIT(1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_COMMAND_STATUS_ISE   BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_revision_id_class_code -
    Bits: 31:24 CC(ro) - Class Code: Identifies the function of the device. This field can be rewritten independently for each Function from the local management bus
    Bits: 23:16 SCC(ro) - Sub-Class Code: Identifies a sub-category within the selected function. This field can be re-written independently for each Function from the local management bus.
    Bits: 15:8  PIB(ro) - Programming Interface Byte: Identifies the register set layout of the device. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  RID(ro) - Revision ID: Assigned by the manufacturer of the device to identify the revision number of the device. This field can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_REVISION_ID_CLASS_CODE 0x00000008
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_CC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_CC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_SCC(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_SCC_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_PIB(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_PIB_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_RID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_REVISION_ID_CLASS_CODE_RID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_bist_header_latency_cache_line -
    Bits: 31:24 BR(ro) - BIST Register: BIST control register. BIST is not currently supported by the core, and this field is hardwired to 0.
    Bits: 23    DT(ro) - Device Type: Identifies whether the device supports a single Function or multiple Functions. hardwired to zero
    Bits: 22:16 HT(ro) - Header Type: Identifies format of header. This field is hardwired to .
    Bits: 15:8  LT(ro) - Latency Timer: This is an unused field and is hardwired to 0.
    Bits:  7:0  CLS(rw) - Cache Line Size: Cache Line Size Register defined in PCI Specifications 3.0. This field can be read or written, both from the link and from the local management bus, but its value is not used.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_BIST_HEADER_LATENCY_CACHE_LINE 0x0000000c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_BR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_BR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_DT BIT(23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_HT(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_HT_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_LT(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_LT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_CLS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_CLS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_0 -
    Bits: 31:12 BA(rw) - Base Address: This field defines the base address of the memory address range. The number of implemented bits in this field determines the size of the range (BAR aperture). The aperture for the BAR 0/1 pair is configurable in the range 4M bytes 128 G bytes. All other bits are not writable, and are read as 0s.
    Bits: 11:0  R0(ro) - Reserved: These bits are hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_RC_BAR_0               0x00000010
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_0_BA(_x)      (((_x) & 0xfffff) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_0_BA_of(_x)   (((_x) >> 12) & 0xfffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_0_R0(_x)      (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_0_R0_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_1 -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. The aperture for the BAR 0/1 pair is configurable in the range 4M bytes - 128G bytes. All other bits are not writable, and are read as 0's.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_RC_BAR_1               0x00000014
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_1_BAH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_1_BAH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_2 -
    Bits: 31:12 BA(rw) - Base Address: This field defines the base address of the memory address range. The number of implemented bits in this field determines the size of the range (BAR aperture). The aperture for the BAR 2/3 pair is configurable in the range 4M bytes 128 G bytes. All other bits are not writable, and are read as 0s.
    Bits: 11:0  R1(ro) - Reserved: These bits are hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_RC_BAR_2               0x00000018
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_2_BA(_x)      (((_x) & 0xfffff) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_2_BA_of(_x)   (((_x) >> 12) & 0xfffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_2_R1(_x)      (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_2_R1_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_3 -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_RC_BAR_3               0x0000001c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_3_BAH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_3_BAH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_4 -
    Bits: 31:12 BA(rw) - Base Address: This field defines the base address of the memory address range. The number of implemented bits in this field determines the size of the range (BAR aperture). The aperture for the BAR 4/5 pair is configurable in the range 4M bytes 128 G bytes. All other bits are not writable, and are read as 0s.
    Bits: 11:0  R2(ro) - Reserved: These bits are hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_RC_BAR_4               0x00000020
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_4_BA(_x)      (((_x) & 0xfffff) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_4_BA_of(_x)   (((_x) >> 12) & 0xfffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_4_R2(_x)      (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_4_R2_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_5 -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. The aperture for the BAR 4/5 pair is configurable in the range 4M bytes - 128G bytes. All other bits are not writable, and are read as 0's.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_RC_BAR_5               0x00000024
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_5_BAH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_RC_BAR_5_BAH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_prefetch_base_upper -
    Bits: 31:0  value(ro) - value:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_PREFETCH_BASE_UPPER 0x00000028
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_PREFETCH_BASE_UPPER_VALUE(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_PREFETCH_BASE_UPPER_VALUE_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_prefetch_limit_upper -
    Bits: 31:16 value2(rw) - value:
    Bits: 15:0  value(ro) - value:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_PREFETCH_LIMIT_UPPER 0x0000002c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_PREFETCH_LIMIT_UPPER_VALUE2(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_PREFETCH_LIMIT_UPPER_VALUE2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_PREFETCH_LIMIT_UPPER_VALUE(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_PREFETCH_LIMIT_UPPER_VALUE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_io_base_limit_upper -
    Bits: 31:0  value(ro) - value:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_IO_BASE_LIMIT_UPPER 0x00000030
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_IO_BASE_LIMIT_UPPER_VALUE(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_IO_BASE_LIMIT_UPPER_VALUE_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_capabilities_pointer -
    Bits: 31:8  R15(ro) - Reserved:
    Bits:  7:0  CP(ro) - Capabilities Pointer: Contains pointer to the first PCI Capability Structure. It can be re-written independently for every Function from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_CAPABILITIES_POINTER   0x00000034
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CAPABILITIES_POINTER_R15(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CAPABILITIES_POINTER_R15_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CAPABILITIES_POINTER_CP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CAPABILITIES_POINTER_CP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_expan_rom_base_addr -
    Bits: 31:8  RBA(rw) - ROM Base Address: Defines the base address and range of the expansion ROM address space. The number of writable bits in this field determines the size of the range (BAR aperture). All other bits are not writable, and are read as 0s. These bits can be written from the local management bus.
    Bits:  7:1  R14(ro) - Reserved:
    Bits:  0    ADE(rw) - Address Decode Enable: This bit must be set to 1 by the configuration software to enable the expansion ROM. This bit can also be written from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_EXPAN_ROM_BASE_ADDR    0x00000038
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_RBA(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_RBA_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_R14(_x) (((_x) & 0x7f) << 1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_R14_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_EXPAN_ROM_BASE_ADDR_ADE BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_intrpt_line_intrpt_pin -
    Bits: 31:11 R16(ro) - Reserved:
    Bits: 10:8  IPR(ro) - Interrupt Pin Register: Identifies the interrupt input (A, B, C, D) to which this Functions interrupt output is connected to (01 = INTA, 02 = INTB, 03 = INTC, 04 = INTD). The assignment of interrupt inputs to Functions is fixed when the core is configured. This field can be re-written independently for each Function from the local management bus. Default values - PF0: 01 (INTA), PF1: 02 (INTB).
    Bits:  7:0  ILR(rw) - Interrupt Line Register: Identifies the IRQx input of the interrupt controller at the Root Complex that is activated by this Functions interrupt (00 = IRQ0, ... , 0F = IRQ15, FF = unknown or not connected). This field is writable from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_INTRPT_LINE_INTRPT_PIN 0x0000003c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_R16(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_R16_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_IPR(_x) (((_x) & 0x7) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_IPR_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_ILR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_ILR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_rsvd_010_01F_[16] -
  Register: i_rc_pcie_base_rsvd_22_30_[15] -
  Register: i_rc_pcie_base_rsvd_35_38_[4] -
  Register: i_rc_pcie_base_rsvd_3D_3F_[3] -
  Register: i_rc_pcie_base_rsvd_4E_53_[6] -
  Register: i_rc_pcie_base_rsvd_57_C0_[106] -
    Bits: 31:0  rsvd(ro) - NA
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_RSVD_010_01F(_x)         (0x00000040 + (0x4 * ((_x) & 0xf)))
#define NFP_PCIEX_RC_i_rc_pcie_base_RSVD_22_30(_x)           (0x00000088 + (0x4 * ((_x) & 0xf)))
#define NFP_PCIEX_RC_i_rc_pcie_base_RSVD_35_38(_x)           (0x000000d4 + (0x4 * ((_x) & 0x3)))
#define NFP_PCIEX_RC_i_rc_pcie_base_RSVD_3D_3F(_x)           (0x000000f4 + (0x4 * ((_x) & 0x3)))
#define NFP_PCIEX_RC_i_rc_pcie_base_RSVD_4E_53(_x)           (0x00000138 + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_RC_i_rc_pcie_base_RSVD_57_C0(_x)           (0x0000015c + (0x4 * ((_x) & 0x7f)))
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_RC_GENERIC_RESERVED_REG_RSVD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_RC_GENERIC_RESERVED_REG_RSVD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pwr_mgmt_cap -
    Bits: 31    PSDCS(ro) - PME Support for D3(cold) State: Indicates whether the Function is capable of sending PME messages when in the D3cold state. Because the device does not have aux power, this bit is hardwired to 0.
    Bits: 30    PSDHS(ro) - PME Support for D3(hot) Statue: Indicates whether the Function is capable of sending PME messages when in the D3hot state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 28    PSD1S(ro) - PME Support for D1 State: Indicates whether the Function is capable of sending PME messages when in the D1 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 27    PSD0S(ro) - PME Support for D0 State: Indicates whether the Function is capable of sending PME messages when in the D0 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 26    D2S(ro) - D2 Support: Set if the Function supports the D2 power state. Currently hardwired to 0.
    Bits: 25    D1S(ro) - D1 Support: Set if the Function supports the D1 power state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 24:22 MCRAPS(ro) - Max Current Required from Aux Power Supply: Specifies the maximum current drawn by the device from the aux power source in the D3cold state. This field is not implemented in devices not supporting PME notification when in the D3cold state, and is therefore hardwired to 0.
    Bits: 21    DSI(ro) - Device Specific Initialization Bit: This bit, when set, indicates that the device requires additional configuration steps beyond setting up its PCI configuration space, to bring it to the D0 active state from the D0 uninitialized state. This bit is hardwired to 0.
    Bits: 20    R0(ro) - Reserved:
    Bits: 19    PC(ro) - PME Clock: Not applicable to PCI Express. This bit is hardwired to 0.
    Bits: 18:16 VID(ro) - Version ID: Indicates the version of the PCI Bus Power Management Specifications that the Function implements. This field is set by default to 011 (Version 1.2). It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. By default, this points to the MSI Capability Structure. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for Power Management. This field is set by default to 01 hex. It can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PWR_MGMT_CAP           0x00000080
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_PSDCS   BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_PSDHS   BIT(30)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_PSD1S   BIT(28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_PSD0S   BIT(27)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_D2S     BIT(26)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_D1S     BIT(25)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_MCRAPS(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_MCRAPS_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_DSI     BIT(21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_R0      BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_PC      BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_VID(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_VID_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_CP(_x)  (((_x) & 0xff) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CAP_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep -
    Bits: 31:24 DR(ro) - Data Register: This optional register is not implemented in the Databahn PCIe core. This field is hardwired to 0.
    Bits: 23:16 R1(ro) - Reserved:
    Bits: 15    PMES(w1c) - PME Status: When PME notification is enabled, writing a 1 into this bit position from the local management bus sets this bit and causes the core to send a PME message from the associated Function. When the Root Complex processes this message, it will turn off this bit by writing a 1 into this bit position though a Config Write. This bit can be set or cleared from the local management bus, by writing a 1 or 0, respectively. It can only be cleared from the configuration path (by writing a 1).
    Bits: 14:9  R2(ro) - Reserved:
    Bits:  8    PE(rw) - PME Enable: Setting this bit enables the notification of PME events from the associated Function. This bit can be set also by writing into this register from the local management bus.
    Bits:  7:4  R3(ro) - Reserved:
    Bits:  3    NSR(ro) - No Soft Reset: When this bit is set to 1, the Function will maintain all its state in the PM state D3hot. The software is not required to re-initialize the Function registers on the transition back to D0. This bit is set to 1 by default, but can be modified independently for each PF from the local management bus.
    Bits:  2    R4(ro) - Reserved:
    Bits:  1:0  PS(rw) - Power State: Indicates the power state this Function is currently in. This field can be read by the software to monitor the current power state, or can be written to cause a transition to a new state. The valid settings are 00 (state D0), 01 (state D1) and 11 (state D3hot). The software should not write any other value into this field. This field can also be written from the local management bus independently for each Function.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PWR_MGMT_CTRL_STAT_REP 0x00000084
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_DR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_DR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R1(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_PMES BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R2(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R2_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_PE BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R3(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_NSR BIT(3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_R4 BIT(2)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_PS(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PWR_MGMT_CTRL_STAT_REP_PS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_cap -
    Bits: 31:28 R4(ro) - Reserved:
    Bits: 27:26 CPLS(rw) - Captured Power Limit Scale: Specifies the scale used by Slot Power Limit Value
    Bits: 25:18 CSP(rw) - Captured Slot Power Limit Value: Specifies upper limit on power supplied by slot.
    Bits: 15    RER(rw) - Role-Based Error Reporting: Enables role-based errer reporting. It is set by default to 1.
    Bits: 14:12 R3(ro) - Reserved:
    Bits: 11:9  AL1L(rw) - Acceptable L1 Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L1 to L0.
    Bits:  8:6  AL0L(rw) - Acceptable L0S Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L0S to L0.
    Bits:  5    ETFS(ro) - Extended Tag Field Supported: Set when device allows the tag field to be extended from 5 to 8 bits. It is hardwired to 1.
    Bits:  4:3  PFS(ro) - Phantom Functions Supported: This field is used to extend the tag field by combining unused Function bits with the tag bits. This field is hardwired to 00 to disable this feature.
    Bits:  2:0  MP(rw) - Max Payload Size: Specifies maximum payload size supported by the device
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_CAP               0x000000c4
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_R4(_x)      (((_x) & 0xf) << 28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_R4_of(_x)   (((_x) >> 28) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_CPLS(_x)    (((_x) & 0x3) << 26)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_CPLS_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_CSP(_x)     (((_x) & 0xff) << 18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_CSP_of(_x)  (((_x) >> 18) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_RER         BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_R3(_x)      (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_R3_of(_x)   (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_AL1L(_x)    (((_x) & 0x7) << 9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_AL1L_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_AL0L(_x)    (((_x) & 0x7) << 6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_AL0L_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_ETFS        BIT(5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_PFS(_x)     (((_x) & 0x3) << 3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_PFS_of(_x)  (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_MP(_x)      (((_x) & 0x7) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_MP_of(_x)   (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_dev_ctl_stat -
    Bits: 31:22 R8(ro) - Reserved:
    Bits: 21    TP(ro) - Transaction Pending: Indicates if any of the Non-Posted requests issued by the RC are still pending.
    Bits: 20    APD(ro) - Aux Power Detected: Set when auxiliary power is detected by the device. This is an unused field.
    Bits: 19    URD(rw) - Unsupported Request Detected: Set to 1 by the core when it receives an unsupported request.
    Bits: 18    FED(rw) - Fatal Error Detected: Set to 1 by the core when it detects a fatal error, regardless of whether the error is masked.
    Bits: 17    NFED(rw) - Non-Fatal Error Detected: Set to 1 by the core when it detects a non-fatal error, regardless of whether the error is masked.
    Bits: 16    CED(rw) - Correctable Error Detected: Set to 1 by the core when it detects a correctable error, regardless of whether the error is masked.
    Bits: 15    R7(ro) - Reserved: Hardwired to 0.
    Bits: 14:12 MRR(rw) - Max Read Request Size: Specifies the maximum size allowed in read requests generated by the device.
    Bits: 11    ENS(rw) - Enable No Snoop: When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed.
    Bits: 10:8  R6(ro) - Reserved: Hardwired to 0
    Bits:  7:5  MP(rw) - Max Payload Size: Specifies the maximum TLP payload size configured. The device must be able to receive a TLP of this maximum size, and should not generate TLP's larger than this value. Software must set this field based on the maximum payload size in the Device Capabilities Register, and the capability of the other side.
    Bits:  4    ERO(rw) - Enable Relaxed Ordering: When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it., when the transactions do not require Strong Ordering.
    Bits:  3:0  R5(ro) - Reserved: Hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_DEV_CTL_STAT      0x000000c8
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R8(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R8_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_TP BIT(21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_APD BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_URD BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_FED BIT(18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_NFED BIT(17)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_CED BIT(16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R7 BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_MRR(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_MRR_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_ENS BIT(11)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R6(_x) (((_x) & 0x7) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R6_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_MP(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_MP_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_ERO BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R5(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_DEV_CTL_STAT_R5_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_cap -
    Bits: 31:24 PN(ro) - Port Number: Specifies the port number assigned to the PCI Express link connected to this device. This field is hardwired to 0.
    Bits: 23:22 R9(ro) - Reserved:
    Bits: 21    LBNC(ro) - Link Bandwidth Notification Capability: A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms.
    Bits: 20    DARC(ro) - Data Link Layer Active Reporting Capability: Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 19    SERC(ro) - Surprise Down Error Reporting Capability: Indicates the capability of the device to report a Surprise Down error condition. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 18    CPM(ro) - Clock Power Management: Indicates that the device supports removal of reference clocks. Not supported in this version of the core. Hardwired to 0.
    Bits: 17:15 L1EL(rw) - L1 Exit Latency: Specifies the exit latency from L1 state. This parameter is dependent on the Physical Layer implementation.
    Bits: 14:12 L0EL(rw) - L0S Exit Latency: Specifies the time required for the device to transition from L0S to L0. This parameter is dependent on the Physical Layer implementation.
    Bits: 11:10 ASPM(rw) - Active State Power Management: Indicates the level of ASPM support provided by the device.
    Bits:  9:4  MLW(ro) - Max Link Width: Indicates the maximum number of lanes supported by the device. This field is hardwired based on the setting of the LANE_COUNT_IN strap input.
    Bits:  3:0  MLS(ro) - Max Link Speed: Indicates the speeds supported by the link (2.5 GT/s, 5 GT/s, and 8 GT/s per lane). This field is hardwired to 0001 (2.5 GT/s) when the strap input PCIE_GENERATION_SEL is set to 00, to 0010 (5 GT/s) when the strap is set to 01, and to 0011 (8 GT/s) when the strap input is set to 10.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LINK_CAP               0x000000cc
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_PN(_x)      (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_PN_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_R9(_x)      (((_x) & 0x3) << 22)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_R9_of(_x)   (((_x) >> 22) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_LBNC        BIT(21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_DARC        BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_SERC        BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_CPM         BIT(18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_L1EL(_x)    (((_x) & 0x7) << 15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_L1EL_of(_x) (((_x) >> 15) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_L0EL(_x)    (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_L0EL_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_ASPM(_x)    (((_x) & 0x3) << 10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_ASPM_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_MLW(_x)     (((_x) & 0x3f) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_MLW_of(_x)  (((_x) >> 4) & 0x3f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_MLS(_x)     (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_MLS_of(_x)  (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_ctl_stat -
    Bits: 31    LABS(ro) - Link Autonomous Bandwidth Status: The core sets this bit to indicate a change in the link speed or width under some conditions. This bit is not implemented.
    Bits: 30    LBMS(ro) - Link Bandwidth Management Status: The core sets this bit to indicate a change in the link speed or width under some conditions. This bit is not implemented.
    Bits: 29    DA(ro) - Data Link Layer Active: Indicates the status of the Data Link Layer. Set to 1 when the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0 in this version of the core.
    Bits: 28    SCC(ro) - Slot Clock Configuration: Indicates that the device uses the reference clock provided by the connector. This bit is hardwired to 0.
    Bits: 27    LTS(ro) - Link Training Status: This bit is set to 1 when the LTSSM is in the Recovery of Configuration states, or if a 1 has been written to the Retrain Link bit but the link training has not yet begun.
    Bits: 26    R12(ro) - Reserved:
    Bits: 25:20 NLW(ro) - Negotiated Link Width: Set at the end of link training to the actual link width negotiated between the two sides (0000001 = 1, 000010 = 2, 000100 = 4, 001000 = 8).
    Bits: 19:16 NLS(ro) - Negotiated Link Speed: Negotiated link speed of the device. The supported speeds are 2.5 GT/s per lane (0001), 5 GT/s per lane (0010), and 8 GT/s per lane (0011).
    Bits: 15:12 R11(ro) - Reserved:
    Bits: 11    LABIE(ro) - Link Autonomous Bandwidth Interrupt Enable: This bit enables the generation of a local interrupt when the Link Autonomous Bandwidth Status bit has been set. This bit is not implemented.
    Bits: 10    LBMIE(ro) - Link Bandwidth Management Interrupt Enable: This bit enables the generation of a local interrupt when the Link Bandwidth Management Status bit has been set. This bit is not implemented.
    Bits:  9    HAWD(rw) - Hardware Autonomous Width Disable: This bit, when set, prevents the LTSSM from changing the width of the link, other than reducing the link width to correct unreliable operation.
    Bits:  8    ECPM(ro) - Enable Clock Power Management: This field is hardwired to 0.
    Bits:  7    ES(rw) - Extended Synch:
    Bits:  6    CCC(rw) - Common Clock Configuration: A value of 0 indicates that the reference clock of this device is asynchronous to that of the upstream device. A value of 1 indicates that the reference clock is common.
    Bits:  5    RL(rw) - Retrain Link: Setting this bit to 1 causes the LTSSM to initiate link training. This bit always reads as 0.
    Bits:  4    LD(rw) - Link Disable: Writing a 1 to this bit position causes the LTSSM to go to the Disable Link state. The LTSSM stays in the Disable Link state while this bit is set.
    Bits:  3    RCB(rw) - Read Completion Boundary: Indicates the Read Completion Boundary of the Root Port (0 = 64 bytes, 1 = 128 bytes).
    Bits:  2    R10(ro) - Reserved:
    Bits:  1:0  ASPMC(rw) - Active State Power Management Control: Controls the level of ASPM support on the PCI Express link associated with the function. The allowed values are 00 (ASPM disabled) and 01 (L0S entry enabled).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LINK_CTL_STAT          0x000000d0
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_LABS   BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_LBMS   BIT(30)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_DA     BIT(29)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_SCC    BIT(28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_LTS    BIT(27)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_R12    BIT(26)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_NLW(_x) (((_x) & 0x3f) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_NLW_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_NLS(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_NLS_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_R11(_x) (((_x) & 0xf) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_R11_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_LABIE  BIT(11)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_LBMIE  BIT(10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_HAWD   BIT(9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_ECPM   BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_ES     BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_CCC    BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_RL     BIT(5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_LD     BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_RCB    BIT(3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_R10    BIT(2)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_ASPMC(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_ASPMC_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_cap_2 -
    Bits: 31:20 R16(ro) - Reserved:
    Bits: 19:18 OBFF(ro) - OBFF Supported: A 1 in this bit position indicates that the Function supports the Optimized Buffer Flush/Fill (OBFF) capability using message signaling.
    Bits: 17:13 R15(ro) - Reserved:
    Bits: 12    TPHC(ro) - TPH Completer Supported: This bit when set, indicates that the Function is capable of serving as a completer for requests with Transaction Processing Hints (TPH). This bit is set to 1 by default.
    Bits: 11:10 R14(ro) - Reserved:
    Bits:  9    ACS128(ro) - 128-bit CAS Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for the Compare-and-Swap (CAS) Atomic Operation with 128 bit operands.
    Bits:  8    ACS64(ro) - 64-bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 64-bit Atomic Operations.
    Bits:  7    ACS32(ro) - 32-Bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 32-bit Atomic Operations.
    Bits:  6:5  ACRS(rw) - Automic routing supported:
    Bits:  4    CTDS(ro) - Completion Timeout Disable Supported: A 1 in this field indicates that the associated Function supports the capability to turn off its Completion timeout.
    Bits:  3:0  CTR(ro) - Completion Timeout Ranges: Specifies the Completion Timeout values supported by the device. This field is set by default to 0010 (10 ms - 250 ms), but can be modified from the local management bus. The actual timeout values are in two programmable local management registers, which allow the timeout settings of the two sub-ranges within Range B to be programmed independently.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_CAP_2             0x000000e4
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_R16(_x)   (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_R16_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_OBFF(_x)  (((_x) & 0x3) << 18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_OBFF_of(_x) (((_x) >> 18) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_R15(_x)   (((_x) & 0x1f) << 13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_R15_of(_x) (((_x) >> 13) & 0x1f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_TPHC      BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_R14(_x)   (((_x) & 0x3) << 10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_R14_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_ACS128    BIT(9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_ACS64     BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_ACS32     BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_ACRS(_x)  (((_x) & 0x3) << 5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_ACRS_of(_x) (((_x) >> 5) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_CTDS      BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_CTR(_x)   (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CAP_2_CTR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_ctl_stat_2 -
    Bits: 31:15 R20(ro) - Reserved:
    Bits: 14:13 OBFFE(rw) - OBFF Enable: Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device. Valid settings are 00 (disabled), 01 (Variation A), and 10 (Variation B).
    Bits: 12:10 R19(ro) - Reserved:
    Bits:  9    ICE(rw) - IDO Completion Enable: When this bit is 1, the RC is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates.
    Bits:  8    IRE(rw) - IDO Request Enable: When this bit is 1, the RC is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates.
    Bits:  7    R18(ro) - Reserved:
    Bits:  6    AORE(rw) - Atomic Op Requester Enable: This bit must be set to enable the generation of Atomic Op Requests. If the client logic attempts to send an Atomic Op when this bit is not set, logic in the core will nullify the TLP on its way to the link.
    Bits:  5    AFE(ro) - ARI Forwarding Enable: A 1 in this filed indicates that the port treats fields 7:0 of the ID as function number while converting a Type 1 config packet to type 0 config packet.
    Bits:  4    CTD(rw) - Completion Timeout Disable: Setting this bit disables the Completion Timeout in the device.
    Bits:  3:0  CTV(rw) - Completion Timeout Value: Specifies the Completion Timeout value for the device. Allowable values are 0101 (sub-range 1) and 0110 (sub-range 2). The corresponding timeout values are stored in the local management register's Completion Timeout Interval Registers 0 and 1, respectively.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_PCIE_CTL_STAT_2        0x000000e8
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_R20(_x) (((_x) & 0x1ffff) << 15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_R20_of(_x) (((_x) >> 15) & 0x1ffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_OBFFE(_x) (((_x) & 0x3) << 13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_OBFFE_of(_x) (((_x) >> 13) & 0x3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_R19(_x) (((_x) & 0x7) << 10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_R19_of(_x) (((_x) >> 10) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_ICE  BIT(9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_IRE  BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_R18  BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_AORE BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_AFE  BIT(5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_CTD  BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_CTV(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_PCIE_CTL_STAT_2_CTV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_cap_2 -
    Bits: 31:4  R22(ro) - Reserved:
    Bits:  3:1  SLSV(ro) - Supported Link Speeds Vector: This field indicates the supported link speeds of the core. For each bit a value of 1 indicates that the corresponding link speed is supported, while a value of 0 indicates the corresponding speed is not supported. The bits corresponding to various link speeds are: Bit 1 = 2.5 GT/s, Bit 2 = 5 GT/s, Bit 3 = 8 GT/s. This field is hardwired to 001 (2.5 GT/s) when PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 011 (2.5 and 5 GT/s) when the strap is set to 01, and 111 (2.5, 5, and 8 GT/s) when the strap pin is set to 10.
    Bits:  0    R21(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LINK_CAP_2             0x000000ec
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_2_R22(_x)   (((_x) & 0xfffffff) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_2_R22_of(_x) (((_x) >> 4) & 0xfffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_2_SLSV(_x)  (((_x) & 0x7) << 1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_2_SLSV_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CAP_2_R21       BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_ctl_stat_2 -
    Bits: 31:17 R24(ro) - Reserved:
    Bits: 16    CDEL(ro) - Current De-Emphasis Level: This status bit indicates the current operating de-emphasis level of the transmitter (0 = -6dB, 1 = -3.5dB).
    Bits: 15:13 R23(ro) - Reserved:
    Bits: 12    CD(rw) - Compliance De-Emphasis: This bit sets the de-emphasis level when the LTSSM enters the Polling.Compliance state because of software setting the Enter Compliance bit in this register (0 = -6dB, 1 = -3.5dB).
    Bits: 11    CS(rw) - Compliance SOS: When this bit is set to 1, the device will transmit SKP ordered sets between compliance patterns.
    Bits: 10    EMC(rw) - Enter Modified Compliance: This field is intended for debug and compliance testing purposes only. If this bit is set to 1, the device will transmit the Modified Compliance Pattern when the LTSSM enters the Polling.Compliance substate.
    Bits:  9:7  TM(rw) - Transmit Margin: This field is intended for debug and compliance testing purposes only. It controls the non-deemphasized voltage level at the transmitter outputs. Its encodings are: 000 = Normal operating range, 001 = 800 - 1200 mV for full swing and 400 - 700 mV for half swing, 010 - 111 = See PCI Express Base Specification 2.0. This field is reset to 0 when th LTSSM enters the Polling.Configuration substate during link training.
    Bits:  6    SD(ro) - Selectable De-Emphasis: This field is reserved for Endpoints, and is hardwired to 0.
    Bits:  5    HASD(rw) - Hardware Autonomous Speed Disable: When this bit is set, the LTSSM is prevented from changing the operating speed of the link, other than reducing the speed to correct unreliable operation of the link.
    Bits:  4    EC(rw) - Enter Compliance: This bit is used to force the Endpoint device to enter the Compliance mode. Software sets this bit to 1 and initiates a hot reset to force the device into the Compliance mode. The target speed for the Compliance mode is determined by the Target Link Speed field of this register.
    Bits:  3:0  TLS(rw) - Target Link Speed: This field sets the target speed when the software forces the link into Compliance mode by setting the Enter Compliance bit in this register (0001 = 2.5 GT/s, 0010 = 5 GT/s, 0011 = 8 GT/s). The default value of this field is 0001 (2.5 GT/s) when the PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 0010 (5 GT/s) when the strap is set to 01, and 0011 (8 GT/s) when the strap pin is set to 10.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LINK_CTL_STAT_2        0x000000f0
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_R24(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_R24_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_CDEL BIT(16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_R23(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_R23_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_CD   BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_CS   BIT(11)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_EMC  BIT(10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_TM(_x) (((_x) & 0x7) << 7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_TM_of(_x) (((_x) >> 7) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_SD   BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_HASD BIT(5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_EC   BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_TLS(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CTL_STAT_2_TLS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_AER_enhncd_cap -
    Bits: 31:20 NCO(rw) - Next Capability Offset: Indicates offset to the next PCI Express capability structure.
    Bits: 19:16 CV(rw) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express AER Extended Capability Structure (0001 hex).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_AER_ENHNCD_CAP         0x00000100
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_AER_ENHNCD_CAP_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_AER_ENHNCD_CAP_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_AER_ENHNCD_CAP_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_AER_ENHNCD_CAP_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_AER_ENHNCD_CAP_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_AER_ENHNCD_CAP_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_uncorr_err_stat -
    Bits: 31:23 R28(w1c) - Reserved:
    Bits: 22    UIE(w1c) - Uncorrectable Internal Error Status: This bit is set when the core has detected an internal uncorrectable error (HAL parity error or an uncorrectable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input UNCORRECTABLE_ERROR_IN. This error is considered fatal by default.
    Bits: 21    R27(w1c) - Reserved:
    Bits: 20    URE(w1c) - Unsupported Request Error Status: This bit is set when the core has received a request from the link that it does not support. This error is not Function-specific. This error is considered non-fatal by default, except for the special case outlined in PCI Express Base Specification 2.0. The header of the received request that caused the error is logged in the Header Log Registers.
    Bits: 19    EE(w1c) - ECRC Error Status: This bit is set when the core has detected an ECRC error in a received TLP.
    Bits: 18    MT(w1c) - Malformed TLP Status: This bit is set when the core receives a malformed TLP from the link. This error is considered fatal by default. The header of the received TLP with error is logged in the Header Log Registers.
    Bits: 17    RO(w1c) - Receiver Overflow Status: This bit is set when the core receives a TLP in violation of the receive credit currently available.
    Bits: 16    UC(w1c) - Unexpected Completion Status: This bit is set when the core has received an unexpected Completion packet from the link.
    Bits: 15    CA(w1c) - Completer Abort Status: This bit is set when the core has returned the Completer Abort (CA) status to a request received from the link. This error is considered non-fatal by default, except for the special cases outlined in PCI Express Base Specification 2.0. The header of the received request that caused the error is logged in the Header Log Registers.
    Bits: 14    CT(w1c) - Completion Timeout Status: This bit is set when the completion timer associated with an outstanding request times out. This error is considered non-fatal by default.
    Bits: 13    FCPE(w1c) - Flow Control Protocol Error Status: This bit is set when certain violations of the flow control protocol are detected by the core.
    Bits: 12    PT(w1c) - Poisoned TLP Status: This bit is set when the core receives a poisoned TLP from the link. This error is considered non-fatal by default. The header of the received TLP with error is logged in the Header Log Registers.
    Bits: 11:5  R26(ro) - Reserved:
    Bits:  4    DLPE(w1c) - Data Link Protocol Error Status: This bit is set when the core receives an Ack or Nak DLLP whose sequence does not correspond to that of an unacknowledged TLP or that of the last acknowledged TLP (for details, refer to the PCI Express Base Specifications).
    Bits:  3:0  R25(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_UNCORR_ERR_STAT        0x00000104
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R28(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R28_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_UIE  BIT(22)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R27  BIT(21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_URE  BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_EE   BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_MT   BIT(18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_RO   BIT(17)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_UC   BIT(16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_CA   BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_CT   BIT(14)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_FCPE BIT(13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_PT   BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R26(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R26_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_DLPE BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R25(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_STAT_R25_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_uncorr_err_mask -
    Bits: 31:23 R32(ro) - Reserved:
    Bits: 22    UIEM(rw) - Uncorrectable Internal Error Mask: This bit is set to mask the reporting of internal errors.
    Bits: 21    R31(ro) - Reserved:
    Bits: 20    UREM(rw) - Unsupported Request Error Mask: This bit is set to mask the reporting of unexpected requests received from the link.
    Bits: 19    EEM(rw) - ECRC Error Mask: This bit is set to mask the reporting of ECRC errors.
    Bits: 18    MTM(rw) - Malformed TLP Mask: This bit is set to mask the reporting of malformed TLPs received from the link.
    Bits: 17    ROM(rw) - Receiver Overflow Mask: This bit is set to mask the reporting of violations of receive credit.
    Bits: 16    UCM(rw) - Unexpected Completion Mask: This bit is set to mask the reporting of unexpected Completions received by the core.
    Bits: 15    CAM(rw) - Completer Abort Mask: This bit is set to mask the reporting of the core sending a Completer Abort.
    Bits: 14    CTM(rw) - Completion Timeout Mask: This bit is set to mask the reporting of Completion Timeouts.
    Bits: 13    FCPER(rw) - Flow Control Protocol Error Mask: This bit is set to mask the reporting of Flow Control Protocol Errors.
    Bits: 12    PTM(rw) - Poisoned TLP Mask: This bit is set to mask the reporting of a Poisoned TLP.
    Bits: 11:5  R30(ro) - Reserved:
    Bits:  4    DLPER(rw) - Data Link Protocol Error Mask: This bit is set to mask the reporting of Data Link Protocol Errors.
    Bits:  3:0  R29(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_UNCORR_ERR_MASK        0x00000108
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R32(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R32_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_UIEM BIT(22)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R31  BIT(21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_UREM BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_EEM  BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_MTM  BIT(18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_ROM  BIT(17)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_UCM  BIT(16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_CAM  BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_CTM  BIT(14)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_FCPER BIT(13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_PTM  BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R30(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R30_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_DLPER BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R29(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_MASK_R29_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_uncorr_err_svrty -
    Bits: 31:23 R36(ro) - Reserved:
    Bits: 22    Uncorr_Intrnl_Err_Svrty(rw) - Uncorrectable Internal Error Severity: Severity of internal errors (0 = Non-Fatal, 1 = Fatal).
    Bits: 21    R35(ro) - Reserved:
    Bits: 20    URES(rw) - Unsupported Request Error Severity: Severity of unexpected requests received from the link (0 = Non-Fatal, 1 = Fatal).
    Bits: 19    EES(rw) - ECRC Error Severity: Severity of ECRC errors (0 = Non-Fatal, 1 = Fatal).
    Bits: 18    MTS(rw) - Malformed TLP Severity: Severity of malformed TLPs received from the link (0 = Non-Fatal, 1 = Fatal).
    Bits: 17    ROS(rw) - Receiver Overflow Severity: Severity of receive credit violations (0 = Non-Fatal, 1 = Fatal).
    Bits: 16    UCS(rw) - Unexpected Completion Severity: Severity of unexpected Completions received by the core (0 = Non-Fatal, 1 = Fatal).
    Bits: 15    CAS(rw) - Completer Abort Severity: Severity of sending a Completer Abort (0 = Non-Fatal, 1 = Fatal).
    Bits: 14    CTS(rw) - Completion Timeout Severity: Severity of Completion Timeouts (0 = Non-Fatal, 1 = Fatal).
    Bits: 13    FCPES(rw) - Flow Control Protocol Error Severity: Severity of a Flow Control Protocol Error (0 = Non-Fatal, 1 = Fatal).
    Bits: 12    PTS(rw) - Poisoned TLP Severity: Severity of a Poisoned TLP error (0 = Non-Fatal, 1 = Fatal).
    Bits: 11:5  R34(ro) - Reserved:
    Bits:  4    DLPES(rw) - Data Link Protocol Error Severity: Severity of Data Link Protocol Errors (0 = Non-Fatal, 1 = Fatal).
    Bits:  3:0  R33(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_UNCORR_ERR_SVRTY       0x0000010c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R36(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R36_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_UNCORR_INTRNL_ERR_SVRTY BIT(22)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R35 BIT(21)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_URES BIT(20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_EES BIT(19)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_MTS BIT(18)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_ROS BIT(17)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_UCS BIT(16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_CAS BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_CTS BIT(14)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_FCPES BIT(13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_PTS BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R34(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R34_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_DLPES BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R33(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_UNCORR_ERR_SVRTY_R33_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_corr_err_stat -
    Bits: 31:16 R39(ro) - Reserved:
    Bits: 15    HLOS(rw) - Header Log Overflow Status: This bit is set on a Header Log Register overflow, that is, when the header could not be logged in the Header Log Register because it is occupied by a previous header.
    Bits: 14    CIES(rw) - Corrected Internal Error Status: This bit is set when the core has detected an internal correctable error condition (a correctable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input CORRECTABLE_ERROR_IN.
    Bits: 13    ANES(rw) - Advisory Non-Fatal Error Status: This bit is set when an uncorrectable error occurs, which is determined to belong to one of the special cases described in the PCI Express Base Specification 2.0. This causes the core to assert the CORRECTABLE_ERROR_OUT output in place of NON_FATAL_ERROR_OUT.
    Bits: 12    RTTS(rw) - Replay Timer Timeout Status: This bit is set when the replay timer in the Data Link Layer of the core times out, causing the core to re-transmit a TLP.
    Bits: 11:9  R38(ro) - Reserved:
    Bits:  8    RNRS(rw) - Replay Number Rollover Status: This bit is set when the replay count rolls over after three re-transmissions of a TLP at the Data Link Layer of the core.
    Bits:  7    BDS(rw) - Bad DLLP Status: This bit is set when an LCRC error is detected in a received DLLP, and no errors were detected by the Physical Layer.
    Bits:  6    BTS(rw) - Bad TP Status: This bit is set when an error is detected in a received TLP by the Data Link Layer of the core the conditions causing this error are (1) an LCRC error, (2) the packet terminates with EDB symbol, but its LCRC field does not equal the inverted value of the calculated CRC.
    Bits:  5:1  R37(ro) - Reserved:
    Bits:  0    RES(rw) - Receiver Error Status: This bit is set when an error is detected in the receive side of the Physical Layer of the core (e.g. an 8b10b decode error).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_CORR_ERR_STAT          0x00000110
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_R39(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_R39_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_HLOS   BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_CIES   BIT(14)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_ANES   BIT(13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_RTTS   BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_R38(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_R38_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_RNRS   BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_BDS    BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_BTS    BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_R37(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_R37_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_STAT_RES    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_corr_err_mask -
    Bits: 31:16 R42(ro) - Reserved:
    Bits: 15    HLOM(rw) - Header Log Overflow Mask: This bit, when set, masks the reporting of an error in response to a Header Log register overflow.
    Bits: 14    CIEM(rw) - Corrected Internal Error Mask: This bit, when set, masks the reporting of an error in response to a corrected internal error condition.
    Bits: 13    ANEM(rw) - Advisory Non-Fatal Error Mask: This bit, when set, masks the reporting of an error in response to an uncorrectable error occurrence, which is determined to belong to one of the special cases in the PCI Express Base Specification 2.0.
    Bits: 12    RTTM(rw) - Replay Timer Timeout Mask: This bit, when set, masks the reporting of an error in response to a Replay Timer timeout event.
    Bits: 11:9  R41(ro) - Reserved:
    Bits:  8    RNRM(rw) - Replay Number Rollover Mask: This bit, when set, masks the reporting of an error in response to a Replay Number Rollover event.
    Bits:  7    BDM(rw) - Bad DLLP Mask: This bit, when set, masks the reporting of an error in response to a 'Bad DLLP' received.
    Bits:  6    BTM(rw) - Bad TP Mask: This bit,when set, masks the reporting of an error in response to a 'Bad TLP' received.
    Bits:  5:1  R40(ro) - Reserved:
    Bits:  0    REM(rw) - Receiver Error Mask: This bit, when set, masks the reporting of Physical Layer errors.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_CORR_ERR_MASK          0x00000114
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_R42(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_R42_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_HLOM   BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_CIEM   BIT(14)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_ANEM   BIT(13)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_RTTM   BIT(12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_R41(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_R41_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_RNRM   BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_BDM    BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_BTM    BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_R40(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_R40_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_CORR_ERR_MASK_REM    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_adv_err_cap_ctl -
    Bits: 31:11 R43(ro) - Reserved:
    Bits: 10    MHRE(ro) - Multiple Header Recording Enable: Setting this bit enables the RC to log multiple error headers in its Header Log Registers. It is hardwired to 0.
    Bits:  9    MHRC(ro) - Multiple Header Recording Capable: This bit is set when the RC has the capability to log more than one error header in its Header Log Registers. It is hardwired to 0.
    Bits:  8    EEC(rw) - Enable ECRC Check: Setting this bit enables ECRC checking on the receive side of the core. This bit is writable from the local management bus.
    Bits:  7    ECC(rw) - ECRC Check Capability: This read-only bit indicates to the software that the device is capable of checking ECRC in packets received from the link.
    Bits:  6    EEG(rw) - Enable ECRC Generation: Setting this bit enables the ECRC generation on the transmit side of the core. This bit is writable from the local management bus.
    Bits:  5    EGC(rw) - ECRC Generation Capability: This read-only bit indicates to the software that the device is capable of generating ECRC in packets transmitted on the link.
    Bits:  4:0  FEP(ro) - First Error Pointer: This is a 5-bit pointer to the bit position in the Uncorrectable Error Status Register corresponding to the error that was detected first. When there are multiple bits set in the Uncorrectable Error Status Register, this field informs the software which error was observed first. To prevent the field from being overwritten before the software is able to read it, this field is not updated while the status bit it points to in the Uncorrectable Error Status Register remains set. After the software clears this status bit, a subsequent error condition that sets any bit in the Uncorrectable Error Status Register will update the First Error Pointer. Any uncorrectable error type, including the special cases where the error is reported using an ERR_COR message, will set the First Error Pointer (assuming the software has reset the error pointed by it in the Uncorrectable Error Status Register).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_ADV_ERR_CAP_CTL        0x00000118
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_R43(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_R43_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_MHRE BIT(10)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_MHRC BIT(9)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_EEC  BIT(8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_ECC  BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_EEG  BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_EGC  BIT(5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_FEP(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ADV_ERR_CAP_CTL_FEP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_0 -
    Bits: 31:0  HD0(ro) - Header Dword 0: First Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_HDR_LOG_0              0x0000011c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_0_HD0(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_0_HD0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_1 -
    Bits: 31:0  HD1(ro) - Header Dword 1: Second Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_HDR_LOG_1              0x00000120
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_1_HD1(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_1_HD1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_2 -
    Bits: 31:0  HD2(ro) - Header Dword 2: Third Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_HDR_LOG_2              0x00000124
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_2_HD2(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_2_HD2_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_3 -
    Bits: 31:0  HD3(ro) - Header Dword 3: Fourth Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_HDR_LOG_3              0x00000128
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_3_HD3(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_HDR_LOG_3_HD3_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_root_err_cmd -
    Bits: 31:3  R44(ro) - Reserved:
    Bits:  2    FERE(rw) - Fatal Error Reporting Enable: If this bit is set, the core will active its FATAL_ERROR_OUT output in response to an error message received from the link.
    Bits:  1    NFERE(rw) - Non-Fatal Error Reporting Enable: If this bit is set, the core will active its NON_FATAL_ERROR_OUT output in response to an error message received from the link.
    Bits:  0    CERE(rw) - Correctable Error Reporting Enable: If this bit is set, the core will active its CORRECTABLE_ERROR_OUT output in response to an error message received from the link.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_ROOT_ERR_CMD           0x0000012c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_CMD_R44(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_CMD_R44_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_CMD_FERE    BIT(2)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_CMD_NFERE   BIT(1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_CMD_CERE    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_root_err_stat -
    Bits: 31:7  R45(ro) - Reserved:
    Bits:  6    FEMR(w1c) - Fatal Error Messages Received: This bit, when set, indicates that the RC has received one or more Fatal error messages from the link.
    Bits:  5    NEMR(w1c) - Non-Fatal Error Messages Received: This bit, when set, indicates that the RC has received one or more Non-Fatal error messages from the link.
    Bits:  4    FUF(w1c) - First Uncorrectable Fatal: This bit, when set, indicates that the first Uncorrectable error message received was for a Fatal error.
    Bits:  3    MEFNR(w1c) - Multiple ERR_FATAL or NONFATAL Received: This bit is set when the RC receives either a Fatal or Non-Fatal error message from the link, and the ERR_FATAL/NONFATAL Received bit is already set.
    Bits:  2    EFNR(w1c) - ERR_FATAL or NONFATAL Received: This bit is set when the RC receives either a Fatal or Non-Fatal error message from the link.
    Bits:  1    MECR(w1c) - Multiple ERR_COR Received: This bit is set when the RC receives a Correctable error message from the link, if the ERR_COR received bit is already set.
    Bits:  0    ECR(w1c) - ERR_COR Received: This bit is set when the RC receives a Correctable error message from the link.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_ROOT_ERR_STAT          0x00000130
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_R45(_x) (((_x) & 0x1ffffff) << 7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_R45_of(_x) (((_x) >> 7) & 0x1ffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_FEMR   BIT(6)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_NEMR   BIT(5)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_FUF    BIT(4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_MEFNR  BIT(3)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_EFNR   BIT(2)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_MECR   BIT(1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ROOT_ERR_STAT_ECR    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_err_src_id -
    Bits: 31:16 EFNSI(ro) - ERR_FATAL or ERR_NONFATAL Source ID: This field captures and stores the Requester ID from an ERR_FATAL or ERROR_NONFATAL message received by the RC, if the ERR_FATAL or NONFATAL Received bit was not set at the time the message was received.
    Bits: 15:0  ECSI(ro) - ERR_COR Source ID: This field captures and stores the Requester ID from an ERR_COR message received by the RC, if the ERR_COR bit was not set at the time the message was received.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_ERR_SRC_ID             0x00000134
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ERR_SRC_ID_EFNSI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ERR_SRC_ID_EFNSI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ERR_SRC_ID_ECSI(_x)  (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_ERR_SRC_ID_ECSI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_dev_ser_num_cap_hdr -
    Bits: 31:20 SNNCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Power Budgeting Capability Structure. It can be written from local management bus independently for each PF.
    Bits: 19:16 DSNCV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus by writing into Function 0 from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express Device Serial Number Capability (0001 hex).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_DEV_SER_NUM_CAP_HDR    0x00000150
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_CAP_HDR_SNNCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_CAP_HDR_SNNCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_CAP_HDR_DSNCV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_CAP_HDR_DSNCV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_CAP_HDR_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_CAP_HDR_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_dev_ser_num_0 -
    Bits: 31:0  DSND0(ro) - Device Serial Number, Doubleword 0: This field contains the first 32 bits of the device's serial number.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_DEV_SER_NUM_0          0x00000154
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_0_DSND0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_0_DSND0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_dev_ser_num_1 -
    Bits: 31:0  DSND1(ro) - Device Serial Number, Doubleword 1: This field contains the last 32 bits of the device's serial number.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_DEV_SER_NUM_1          0x00000158
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_1_DSND1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_DEV_SER_NUM_1_DSND1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_control3 -
    Bits: 31:2  R0(ro) - Reserved:
    Bits:  1    LERIE(rw) - Link Equalization Request Interrupt Enable:
    Bits:  0    PE(rw) - Perform Equaliztion:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LINK_CONTROL3          0x00000304
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CONTROL3_R0(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CONTROL3_R0_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CONTROL3_LERIE  BIT(1)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LINK_CONTROL3_PE     BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_error_status -
    Bits: 31:8  R0(ro) - Reserved:
    Bits:  7:0  LES(w1c) - Lane Error Status: Each of these bits indicates the error status for the corresponding lane. STICKY.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LANE_ERROR_STATUS      0x00000308
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_ERROR_STATUS_R0(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_ERROR_STATUS_R0_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_ERROR_STATUS_LES(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_ERROR_STATUS_LES_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_0 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 1 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 0 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 0 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 0 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 0 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LANE_EQUALIZATION_CONTROL_0 0x0000030c
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_R3 BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_R2_1 BIT(23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_R1 BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_R0_1 BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_0_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_1 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 2 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 1 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LANE_EQUALIZATION_CONTROL_1 0x00000310
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_R3 BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_R2_1 BIT(23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_R1 BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_R0_1 BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_1_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_2 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 3 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 2 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LANE_EQUALIZATION_CONTROL_2 0x00000314
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_R3 BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_R2_1 BIT(23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_R1 BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_R0_1 BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_2_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_3 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 4 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 4 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 4 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 4 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 3 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_I_LANE_EQUALIZATION_CONTROL_3 0x00000318
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_R3 BIT(31)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_R2_1 BIT(23)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_R1 BIT(15)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_R0_1 BIT(7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_I_RC_PCIE_BASE_I_LANE_EQUALIZATION_CONTROL_3_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pl_config_0_reg -
    Bits: 31    MLE(rw) - Master Loopback Enable: When the core is operating as a Root Complex, setting this to 1 causes the LTSSM to initiate a loopback and become the loopback master. This bit is not used in the EndPoint Mode.
    Bits: 30    R0(ro) - Remote Linkwidth Upconfigure Capability Status: A 1 in this field indicates that the remote note advertised Linkwidth Upconfigure Capability in the training sequences in the Configuration.Complete state when the link came up. A 0 indicates that the remote node did not set the Link Upconfigure bit.
    Bits: 29:24 LTSSM(ro) - LTSSM State: Current state of the LTSSM. The encoding of the states is given in Appendix C.
    Bits: 23:16 RLID(ro) - Received Link ID: Link ID received from other side during link training.
    Bits: 15:8  RFC(ro) - Received FTS Count: FTS count received from the other side during link training. The core transmits this many FTS sequences while exiting the L0S state.
    Bits:  7    TSS(rw) - Tx Swing Setting: This bit drives the PIPE_TX_SWING output of the core.
    Bits:  6    APER(rw) - All Phy Error Reporting: When this bit is set to 1, the core will report all phy errors detected at the PIPE interface, regardless of whether it caused packet corruption. If set to 0, the core will report only those error that caused a TLP or DLLP to be dropped because of the phy error.
    Bits:  5    LTD(ro) - Link Training Direction: When crosslink is enabled, the state of this bit indicates whether the core completed link training as an upstream port or a downstream port (0 = upstream, 1 = downstream).
    Bits:  4:3  NS(ro) - Negotiated Speed: Current operating speed of link (00 = 2.5G, 01 = 5G, 10 = 8G).
    Bits:  2:1  NLC(ro) - Negotiated Lane Count: Lane count negotiated with other side during link training (00 = x1, 01 = x2, 10 = x4, 11 = x8).
    Bits:  0    LS(ro) - Link Status: Current state of link (1 = link training complete, 0 = link training not complete).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PL_CONFIG_0_REG   0x00000000
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_MLE BIT(31)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_R0 BIT(30)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_LTSSM(_x) (((_x) & 0x3f) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_LTSSM_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_RLID(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_RLID_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_RFC(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_RFC_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_TSS BIT(7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_APER BIT(6)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_LTD BIT(5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_NS(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_NS_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_NLC(_x) (((_x) & 0x3) << 1)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_NLC_of(_x) (((_x) >> 1) & 0x3)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_0_REG_LS BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pl_config_1_reg -
    Bits: 31:24 TFC3(rw) - Transmitted FTS Count at 8 GT/s Speed: FTS count transmitted by the core in TS1/TS2 sequences during link training. This value must be set based on the time needed by the receiver to acquire sync while exiting from L0S state.
    Bits: 23:16 TFC2(rw) - Transmitted FTS Count at 5 GT/s Speed: FTS count transmitted by the core in TS1/TS2 sequences during link training. This value must be set based on the time needed by the receiver to acquire sync while exiting from L0S state.
    Bits: 15:8  TFC1(rw) - Transmitted FTS Count at 2.5 GT/s Speed: FTS count transmitted by the core in TS1/TS2 sequences during link training. This value must be set based on the time needed by the receiver on the other side to acquire sync while exiting from L0S state.
    Bits:  7:0  TLI(rw) - Transmitted Link ID: Link ID transmitted by the device in training sequences in the RC mode.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PL_CONFIG_1_REG   0x00000004
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TFC3(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TFC3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TFC2(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TFC2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TFC1(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TFC1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TLI(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PL_CONFIG_1_REG_TLI_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_dll_tmr_config_reg -
    Bits: 31:25 R1(ro) - Reserved bits.
    Bits: 24:16 RSART(rw) - Receive-Side ACK-NAK Replay Timeout: Timeout setting of receive side ACK-NAK replay (in units of 4 ns). Its value is defined in the RTL header file defines.h. This field is re-written by the internal logic when the negotiated link width, link speed, or the maximum payload setting changes, to correspond to the recommended settings defined in the PCIe Specifications. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed, or a change in the max payload size setting in the Device Control Register.
    Bits: 15:9  R0(ro) - Reserved bits.
    Bits:  8:0  TSRT(rw) - Transmit-Side Replay Timeout: Transmit-side replay timer timeout value (in units of 4 ns). Its value is defined in the RTL header file defines.h in the top-level RTL directory, based on the configuration of the core. This field is re-written by the internal logic when the negotiated link width, link speed, or the maximum payload setting changes, to correspond to the recommended setting defined in the PCIe Specifications. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed, or a change in the max payload size setting in the Device Control Register.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_DLL_TMR_CONFIG_REG 0x00000008
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_R1(_x) (((_x) & 0x7f) << 25)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_R1_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_RSART(_x) (((_x) & 0x1ff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_RSART_of(_x) (((_x) >> 16) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_R0(_x) (((_x) & 0x7f) << 9)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_R0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_TSRT(_x) (((_x) & 0x1ff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DLL_TMR_CONFIG_REG_TSRT_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg -
    Bits: 31:20 NPPC(rw) - Non-Posted Payload Credit: Non-Posted payload credit limit advertised by the core for VC 0 (in units of 4 Dwords).
    Bits: 19:12 PHC(rw) - Posted Header Credit: Posted header credit limit advertised by the core for VC 0 (in number of packets).
    Bits: 11:0  PPC(rw) - Posted Payload Credit: Posted payload credit limit advertised by the core for VC 0 (in units of 4 Dwords).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_RCV_CRED_LIM_0_REG 0x0000000c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_0_REG_NPPC(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_0_REG_NPPC_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_0_REG_PHC(_x) (((_x) & 0xff) << 12)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_0_REG_PHC_of(_x) (((_x) >> 12) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_0_REG_PPC(_x) (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_0_REG_PPC_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg -
    Bits: 31:24 CHC(rw) - Completion Header Credit: Completion header credit limit advertised by the core for VC 0 (in number of packets).
    Bits: 23:20 R2(ro) - Reserved:
    Bits: 19:8  CPC(rw) - Completion Payload Credit: Completion payload credit limit advertised by the core for VC 0 (in units of 4 Dwords).
    Bits:  7:0  NPHCL(rw) - Non-Posted Header Credit Limit: Non-Posted header credit limit advertised by the core for VC 0 (in number of packets).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_RCV_CRED_LIM_1_REG 0x00000010
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_CHC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_CHC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_R2(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_R2_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_CPC(_x) (((_x) & 0xfff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_CPC_of(_x) (((_x) >> 8) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_NPHCL(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RCV_CRED_LIM_1_REG_NPHCL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_lim_0_reg -
    Bits: 31:20 NPPC(ro) - Non-Posted Payload Credit: Non-Posted payload credit limit received by the core for Link 0 (in units of 4 Dwords).
    Bits: 19:12 PHC(ro) - Posted Header Credit: Posted header credit limit received by the core for this link (in number of packets).
    Bits: 11:0  PPC(ro) - Posted Payload Credit: Posted payload credit limit received by the core for this link (in units of 4 Dwords).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_TRANSM_CRED_LIM_0_REG 0x00000014
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_0_REG_NPPC(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_0_REG_NPPC_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_0_REG_PHC(_x) (((_x) & 0xff) << 12)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_0_REG_PHC_of(_x) (((_x) >> 12) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_0_REG_PPC(_x) (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_0_REG_PPC_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_lim_1_reg -
    Bits: 31:24 CHC(ro) - Completion Header Credit: Completion header credit limit received by the core for VC (in number of packets).
    Bits: 23:20 R3(ro) - Reserved:
    Bits: 19:8  CPC(ro) - Completion Payload Credit: Completion payload credit limit received by the core for VC 0 (in units of 4 Dwords).
    Bits:  7:0  NPHC(ro) - Non-Posted Header Credit: Non-Posted header credit limit received by the core for VC 0 (in number of packets).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_TRANSM_CRED_LIM_1_REG 0x00000018
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_CHC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_CHC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_R3(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_R3_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_CPC(_x) (((_x) & 0xfff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_CPC_of(_x) (((_x) >> 8) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_NPHC(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_LIM_1_REG_NPHC_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg -
    Bits: 31:16 MNUI(rw) - Minimum Non-Posted Update Interval: Minimum credit update interval for non-posted transactions. The core follows this minimum interval between issuing posted credit updates on the link. This is to limit the bandwidth use of credit updates. If new credit becomes available in the receive FIFO since the last update was sent, the core will issue a new update only after this interval has elapsed since the last update. The value is in units of 4 ns. This field is re-written by the internal logic when the negotiated link width or link speed changes, to correspond to the default values defined in defines.h. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed.
    Bits: 15:0  MPUI(rw) - Minimum Posted Update Interval: Minimum credit update interval for posted transactions. The core follows this minimum interval between issuing posted credit updates on the link. This is to limit the bandwidth use of credit updates. If new credit becomes available in the receive FIFO since the last update was sent, the core will issue a new update only after this interval has elapsed since the last update. The value is in units of 4 ns. This field is re-written by the internal logic when the negotiated link width or link speed changes, to correspond to the default values defined in defines.h. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_TRANSM_CRED_UPDATE_INT_CONFIG_0_REG 0x0000001c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_0_REG_MNUI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_0_REG_MNUI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_0_REG_MPUI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_0_REG_MPUI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg -
    Bits: 31:16 MUI(rw) - Maximum Update Interval: Maximum credit update interval for all transactions. If no new credit has become available since the last update, the core will repeat the last update after this interval. This is to recover from any losses of credit update packets. The value is in units of 4 ns. This field could be re-written by the internal logic when the negotiated link width or link speed changes, to correspond to the default values defined in defines.h. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed.
    Bits: 15:0  CUI(rw) - Completion Update Interval: Minimum credit update interval for Completion packets. The core follows this minimum interval between issuing posted credit updates on the link. This is to limit the bandwidth use of credit updates. If new credit becomes available in the receive FIFO since the last update was sent, the core will issue a new update only after this interval has elapsed since the last update. The value is in units of 4 ns. This parameter is not used when the Completion credit is infinity.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_TRANSM_CRED_UPDATE_INT_CONFIG_1_REG 0x00000020
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_1_REG_MUI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_1_REG_MUI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_1_REG_CUI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSM_CRED_UPDATE_INT_CONFIG_1_REG_CUI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_L0S_timeout_limit_reg -
    Bits: 31:17 R4(ro) - Reserved:
    Bits: 16    ELE(rw) - Enable L2 Entry: This bit applies to RC mode only. When this bit is 0, the core will not transition the link to L2 when its link partner enters the L23_Ready power management state. When this bit is 1, the core will set its link to L2 when the link partner enters L23_Ready. Once the core enters L2, a reset is needed to transition it out of L2.
    Bits: 15:0  LT(rw) - L0S Timeout: Contains the timeout value (in units of 4 ns) for transitioning to the L0S power state. Setting this parameter to 0 permanently disables the transition to the L0S power state.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_L0S_TIMEOUT_LIMIT_REG 0x00000024
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L0S_TIMEOUT_LIMIT_REG_R4(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L0S_TIMEOUT_LIMIT_REG_R4_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L0S_TIMEOUT_LIMIT_REG_ELE BIT(16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L0S_TIMEOUT_LIMIT_REG_LT(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L0S_TIMEOUT_LIMIT_REG_LT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transmit_tlp_count_reg -
    Bits: 31:0  TTC(w1c) - Transmit TLP Count: Count of TLPs transmitted
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_TRANSMIT_TLP_COUNT_REG 0x00000028
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSMIT_TLP_COUNT_REG_TTC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSMIT_TLP_COUNT_REG_TTC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transmit_tlp_payload_dword_count_reg -
    Bits: 31:0  TTPBC(w1c) - Transmit TLP Payload Byte Count: Count of TLPs payload Dwords transmitted
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_TRANSMIT_TLP_PAYLOAD_DWORD_COUNT_REG 0x0000002c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSMIT_TLP_PAYLOAD_DWORD_COUNT_REG_TTPBC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_TRANSMIT_TLP_PAYLOAD_DWORD_COUNT_REG_TTPBC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_receive_tlp_count_reg -
    Bits: 31:0  RTC(w1c) - Receive TLP Count: Count of TLPs received
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_RECEIVE_TLP_COUNT_REG 0x00000030
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_TLP_COUNT_REG_RTC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_TLP_COUNT_REG_RTC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_receive_tlp_payload_dword_count_reg -
    Bits: 31:0  RTPDC(w1c) - Receive TLP Payload Byte Count: Count of TLP payload Dwords received
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_RECEIVE_TLP_PAYLOAD_DWORD_COUNT_REG 0x00000034
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_TLP_PAYLOAD_DWORD_COUNT_REG_RTPDC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_TLP_PAYLOAD_DWORD_COUNT_REG_RTPDC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg -
    Bits: 31:24 R5(ro) - Reserved:
    Bits: 23:0  CTL(rw) - Completion Timeout Limit: Timeout limit for completion timers (in 4 ns cycles).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_COMPLN_TMOUT_LIM_0_REG 0x00000038
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_0_REG_R5(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_0_REG_R5_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_0_REG_CTL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_0_REG_CTL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg -
    Bits: 31:28 R6(ro) - Reserved:
    Bits: 27:0  CTL(rw) - Completion Timeout Limit: Timeout limit for completion timers (in 4 ns cycles).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_COMPLN_TMOUT_LIM_1_REG 0x0000003c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_1_REG_R6(_x) (((_x) & 0xf) << 28)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_1_REG_R6_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_1_REG_CTL(_x) (((_x) & 0xfffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_COMPLN_TMOUT_LIM_1_REG_CTL_of(_x) (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_L1_st_reentry_delay_reg -
    Bits: 31:0  L1RD(rw) - L1 Re-Entry Delay: Delay to re-enter L1 after no activity (in units of 4 ns cycles).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_L1_ST_REENTRY_DELAY_REG 0x00000040
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L1_ST_REENTRY_DELAY_REG_L1RD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_L1_ST_REENTRY_DELAY_REG_L1RD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_vendor_id_reg -
    Bits: 31:16 SVID(rw) - Subsystem Vendor ID: Subsystem Vendor ID
    Bits: 15:0  VID(rw) - Vendor ID: Vendor ID
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_VENDOR_ID_REG     0x00000044
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_VENDOR_ID_REG_SVID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_VENDOR_ID_REG_SVID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_VENDOR_ID_REG_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_VENDOR_ID_REG_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg -
    Bits: 31:20 R7(ro) - Reserved:
    Bits: 19:0  L1T(rw) - L1 Timeout: Contains the timeout value (in units of 4 ns) for transitioning to the L1 power state. Setting it to 0 permanently disables the transition to the L1 power state.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_ASPM_L1_ENTRY_TMOUT_DELAY_REG 0x00000048
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ASPM_L1_ENTRY_TMOUT_DELAY_REG_R7(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ASPM_L1_ENTRY_TMOUT_DELAY_REG_R7_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ASPM_L1_ENTRY_TMOUT_DELAY_REG_L1T(_x) (((_x) & 0xfffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ASPM_L1_ENTRY_TMOUT_DELAY_REG_L1T_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg -
    Bits: 31:16 R7(ro) - Reserved:
    Bits: 15:0  PTOAD(rw) - PME Turnoff Ack Delay: Time in microseconds between the core receiving a PME_TurnOff message TLP and the core sending a PME_TO_Ack response to it. This field must be set to a non-zero value in order for the core to send a response. Setting this field to 0 suppresses the core's response to PME_TurnOff message, so that the client may transmit the PME_TO_Ack message through the HAL master interface
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PME_TURNOFF_ACK_DELAY_REG 0x0000004c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_TURNOFF_ACK_DELAY_REG_R7(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_TURNOFF_ACK_DELAY_REG_R7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_TURNOFF_ACK_DELAY_REG_PTOAD(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_TURNOFF_ACK_DELAY_REG_PTOAD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_linkwidth_control_reg -
    Bits: 31:17 R1(ro) - Reserved:
    Bits: 16    RL(rw) - Retrain Link: Writing a 1 into this field results in the core re-training the link to change its width. When setting this bit to 1, the software must also set the target lane-map field to indicate the lanes it desires to be part of the link. The core will attempt to form a link with this set of lanes. The link formed at the end of the retraining may include all of these lanes (if both nodes agree on them during re-training), or the largest subset that both sides were able to activate. This bit is cleared by the internal logic of the core after the re-training has been completed and link has reached the L0 state. Software must wait for the bit to be clear before setting it again to change the link width.
    Bits: 15:8  R0(ro) - Reserved:
    Bits:  7:0  TLM(rw) - Target Lane Map: This field contains the bitmap of the lanes to be included in forming the link during the re-training. Legal settings are: - 0xff (x8 link) - 0x0f and 0xf0 (x4 link) - 0x3, 0xc, 0x30, 0xc0 (x2 link) - 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80 (x1 link) Retraining the link with any other value in this field can cause the training to fail. If the target lane map includes lanes that were inactive when retraining is initiated, then both the core and its link partner must support the LinkWidth Upconfigure Capability to be able to activate those lanes. The user can check if the remote node has this capability by reading the Remote Link Upconfigure Capability Status bit in Physical Layer Configuration Register 0 after the link first came up.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_LINKWIDTH_CONTROL_REG 0x00000050
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_R1(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_R1_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_RL BIT(16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_R0(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_R0_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_TLM(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LINKWIDTH_CONTROL_REG_TLM_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_negotiated_lane_map_reg -
    Bits: 31:17 R71(ro) - Reserved:
    Bits: 16    LRS(ro) - Lane Reversal Status: This bit set by the core at the end of link training if the LTSSM had to reverse the lane numbers to form the link.
    Bits: 15:8  R70(ro) - Reserved:
    Bits:  7:0  NLM(ro) - Negotiated Lane Map: Bit i of this field is set to 1 at the end of link training if Lane i is part of the PCIe link. The value of this field is valid only when the link is in L0 or L0s states.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_NEGOTIATED_LANE_MAP_REG 0x00000200
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_R71(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_R71_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_LRS BIT(16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_R70(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_R70_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_NLM(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_NEGOTIATED_LANE_MAP_REG_NLM_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_receive_fts_count_reg -
    Bits: 31:16 R72(ro) - Reserved:
    Bits: 15:8  RFC8S(ro) - Received FTS Count for 8GT/s Speed: FTS count received from the other side during link training for use at the 8 GT/s link speed. The core transmits this many FTS sequences while exiting the L0S state, when operating at the 8 GT/s speed.
    Bits:  7:0  RFC5S(ro) - Received FTS Count for 5GT/s Speed: FTS count received from the other side during link training for use at the 5 GT/s link speed. The core transmits this many FTS sequences while exiting the L0S state, when operating at the 5 GT/s speed.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_RECEIVE_FTS_COUNT_REG 0x00000204
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_FTS_COUNT_REG_R72(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_FTS_COUNT_REG_R72_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_FTS_COUNT_REG_RFC8S(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_FTS_COUNT_REG_RFC8S_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_FTS_COUNT_REG_RFC5S(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RECEIVE_FTS_COUNT_REG_RFC5S_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_debug_mux_control_reg -
    Bits: 31    EFSRTCA(rw) - Enable Function-Specific Reporting of Type-1 Configuration Accesses: Setting this bit to 0 causes all the enabled Functions to report an error when a Type-1 configuration access is received by the core, targeted at any Function. Setting it to 1 limits the error reporting to the type-0 Function whose number matches with the Function number specified in the request. If the Function number in the request refers to an unimplemented or disabled Function, all enabled Functions report the error regardless of the setting of this bit.
    Bits: 30    DOC(rw) - Disable Ordering Checks: Setting this bit to 1 disables the ordering check in the core between Completions and Posted requests received from the link.
    Bits: 29    DFCUT(rw) - Disable Flow Control Update Timeout: When this bit is 0, the core will time out and re-train the link when no Flow Control Update DLLPs are received from the link within an interval of 128 us. Setting this bit to 1 disables this timeout. When the advertised receive credit of the link partner is infinity for the header and payload of all credit types, this timeout is always suppressed. The setting of this bit has no effect in this case. This bit should not be set during normal operation, but is useful for testing.
    Bits: 28    DEI(rw) - Disable Electrical Idle Infer in L0 State: Setting this bit to 1 disables the inferring of electrical idle in the L0 state. Electrical idle is inferred when no flow control updates and no SKP sequences are received within an interval of 128 us. This bit should not be set during normal operation, but is useful for testing.
    Bits: 27    DGLUS(rw) - Disable Gen3 LFSR Update from SKP: Setting this bit to 1 disables the update of the LFSRs in the Gen3 descramblers of the core, from the values received in SKP sequences. This bit should not be set during normal operation, but is useful for testing.
    Bits: 26    R10C(ro) - Reserved:
    Bits: 25    ESPC(rw) - Enable Slot Power Capture: When this bit is set to 1, the core will capture the Slot Power Limit Value and Slot Power Limit Scale parameters from a Set_Slot_Power_Limit message received in the Device Capabilities Register. When this bit is 0, the capture is disabled. This bit is valid only when the core is configured as an EndPoint. It has no effect when the core is a Root Complex.
    Bits: 24    EFLT(rw) - Enable Fast Link Training: This bit is provided to shorten the link training time to facilitate fast simulation of the design, especially at the gate level. Enabling this bit has the following effects: 1. The 1 ms, 2 ms, 12 ms, 24 ms, 32 ms and 48 ms timeout intervals in the LTSSM are shortened by a factor of 500. 2. In the Polling.Active state of the LTSSM, only 16 training sequences are required to be transmitted (Instead of 1024) to make the transition to the Configuration state. This bit should not be set during normal operation of the core.
    Bits: 23    DLUC(rw) - Disable Link Upconfigure Capability: The user may set this bit to turn off the link upconfigure capability of the core. Setting this bit prevents the core from advertising the link upconfigure capability in training sequences transmitted in the Configuration.Complete state.
    Bits: 22    DLRFE(rw) - Disable Link Re-Training on Framing Error: When this bit is 1, the core will not transition its LTSSM into the Recovery state when it detects a Framing Error at 8 GT/s speed (as defined in Section 4.2.2.3.3 of the PCIe Base Specification 3.0. This bit must normally be set to 0 so that a Framing Error will cause the LTSSM to enter Recovery. The setting of this bit has no effect on the operation of the core at 2.5 and 5 GT/s speeds.
    Bits: 21    DSHEC(rw) - Disable Sync Header Error Check: When this bit is 0, the core will signal a framing error if it detects a sync header error in the received blocks at 8 GT/s speed (A 00 or 11 binary setting of the sync header on the received blocks in any lane constitutes a framing error). Setting this bit to 1 suppresses this error check. This bit should normally be set to 0, as the sync header check is mandatory in the PCIe 3.0 Specifications.
    Bits: 20:18 R8C(ro) - Reserved:
    Bits: 17    HPRSUPP(rw) - Disable HAL Parity Check: When this bit is 1, parity check is disabled on the receive side of the HAL interfaces.
    Bits: 16    R8A(ro) - Reserved:
    Bits: 15:4  R8(ro) - Reserved:
    Bits:  3:0  MS(rw) - Mux Select: Bits 3:2 select the module and bits 1:0 select the group of signals within the module that are driven on the debug bus. The assignments of signals on the debug outputs of the core are given in Appendix B.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_DEBUG_MUX_CONTROL_REG 0x00000208
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_EFSRTCA BIT(31)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DOC BIT(30)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DFCUT BIT(29)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DEI BIT(28)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DGLUS BIT(27)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_R10C BIT(26)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_ESPC BIT(25)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_EFLT BIT(24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DLUC BIT(23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DLRFE BIT(22)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_DSHEC BIT(21)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_R8C(_x) (((_x) & 0x7) << 18)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_R8C_of(_x) (((_x) >> 18) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_HPRSUPP BIT(17)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_R8A BIT(16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_R8(_x) (((_x) & 0xfff) << 4)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_R8_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_MS(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_DEBUG_MUX_CONTROL_REG_MS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_local_error_status_register -
    Bits: 31:13 R9(ro) - Reserved:
    Bits: 12    TSRPE(w1c) - TPH ST RAM Parity Error: Uncorrectable parity error detected while reading from the TPH Steering Tag RAM
    Bits: 11    CT(w1c) - Completion Timeout: A request timed out waiting for completion.
    Bits: 10    FCE(w1c) - Flow Control Error: An error was observed in the flow control advertisements from the other side.
    Bits:  9    UCR(w1c) - Unexpected Completion Received: Unexpected Completion received from the link.
    Bits:  8    MTR(w1c) - Malformed TLP Received: Malformed TLP received from the link.
    Bits:  7    PE(w1c) - Phy Error: Phy error detected on receive side.
    Bits:  6    RTR(w1c) - Replay Timer Rollover: Replay timer rolled over after 4 transmissions of the same TLP.
    Bits:  5    RT(w1c) - Replay Timeout: Replay timer timed out
    Bits:  4    CRFO(w1c) - Completion RX FIFO Overflow: Overflow occurred in the Completion Receive FIFO.
    Bits:  3    PRFO(w1c) - PNP RX FIFO Overflow: Overflow occurred in the PNP Receive FIFO.
    Bits:  2    RRPE(w1c) - Replay RAM Parity Error: Parity error detected while reading from Replay Buffer RAM.
    Bits:  1    CRFPE(w1c) - Completion RX FIFO Parity Error: Parity error detected while reading from the Completion Receive FIFO RAM.
    Bits:  0    PRFPE(w1c) - PNP RX FIFO Parity Error: Parity error detected while reading from the PNP Receive FIFO RAM.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_LOCAL_ERROR_STATUS_REGISTER 0x0000020c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_R9(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_R9_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_TSRPE BIT(12)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_CT BIT(11)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_FCE BIT(10)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_UCR BIT(9)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_MTR BIT(8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_PE BIT(7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_RTR BIT(6)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_RT BIT(5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_CRFO BIT(4)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_PRFO BIT(3)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_RRPE BIT(2)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_CRFPE BIT(1)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_ERROR_STATUS_REGISTER_PRFPE BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_local_intrpt_mask_reg -
    Bits: 31:13 R10(ro) - Reserved:
    Bits: 12    TSRPE(rw) - TPH ST RAM Parity Error: Setting this bit prevents the TPH_ST_RAM_parity_error status from raising a local interrupt.
    Bits: 11    CT(rw) - Completion Timeout: Setting this bit prevents the Completion timeout condition from raising a local interrupt.
    Bits: 10    FCE(rw) - Flow Control Error: Setting this bit prevents the flow control error from raising a local interrupt.
    Bits:  9    UCR(rw) - Unexpected Completion Received: Setting this bit prevents the Unexpected Completion Received condition from raising a local interrupt.
    Bits:  8    MTR(rw) - Malformed TLP Received: Setting this bit prevents the Malformed TLP Received condition from raising a local interrupt.
    Bits:  7    PE(rw) - Phy Error: Setting this bit prevents a phy error from raising a local interrupt.
    Bits:  6    RTR(rw) - Replay Timer Rollover: Setting this bit prevents the Replay Timer Rollover error from raising a local interrupt.
    Bits:  5    RT(rw) - Replay Timeout: Setting this bit prevents a replay timeout event from raising a local interrupt.
    Bits:  4    CRFO(rw) - Completion RX FIFO Overflow: Setting this bit prevents the Completion RX FIFO Overflow condition from raising a local interrupt.
    Bits:  3    PRFO(rw) - PNP RX FIFO Overflow: Setting this bit prevents the PNP RX FIFO Overflow condition from raising a local interrupt.
    Bits:  2    RRPE(rw) - Replay RAM Parity Error: Setting this bit prevents the Replay RAM Parity Error from raising a local interrupt.
    Bits:  1    CRFPE(rw) - Completion RX FIFO Parity Error: Setting this bit prevents the Completion RX FIFO Parity Error from raising a local interrupt.
    Bits:  0    PRFPE(rw) - PNP RX FIFO Parity Error: Setting this bit prevents the PNP RX FIFO Parity Error from raising a local interrupt.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_LOCAL_INTRPT_MASK_REG 0x00000210
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_R10(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_R10_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_TSRPE BIT(12)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_CT BIT(11)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_FCE BIT(10)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_UCR BIT(9)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_MTR BIT(8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_PE BIT(7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_RTR BIT(6)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_RT BIT(5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_CRFO BIT(4)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_PRFO BIT(3)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_RRPE BIT(2)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_CRFPE BIT(1)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LOCAL_INTRPT_MASK_REG_PRFPE BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_lcrc_err_count_reg -
    Bits: 31:16 R11(ro) - Reserved:
    Bits: 15:0  LEC(w1c) - LCRC Error Count: Number of TLPs received with LCRC errors.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_LCRC_ERR_COUNT_REG 0x00000214
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LCRC_ERR_COUNT_REG_R11(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LCRC_ERR_COUNT_REG_R11_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LCRC_ERR_COUNT_REG_LEC(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_LCRC_ERR_COUNT_REG_LEC_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_ecc_corr_err_count_reg -
    Bits: 31:24 R12(w1c) - TPH ST RAM Correctable Error Count: Number of correctable errors detected while reading from the TPH Steering Tag RAM. This is an 8-bit saturating counter that can be cleared by writing all 1s into it.
    Bits: 23:16 RRCER(w1c) - Replay RAM Correctable Error Count: Number of correctable errors detected while reading from the Replay Buffer RAM. This is an 8-bit saturating counter that can be cleared by writing all 1's into it.
    Bits: 15:8  SFRCER(w1c) - SC FIFO RAM Correctable Error Count: Number of correctable errors detected while reading from the SC FIFO RAM. This is an 8-bit saturating counter that can be cleared by writing all 1's into it.
    Bits:  7:0  PFRCER(w1c) - PNP FIFO RAM Correctable Error Count: Number of correctable errors detected while reading from the PNP FIFO RAM. This is an 8-bit saturating counter that can be cleared by writing all 1's into it.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_ECC_CORR_ERR_COUNT_REG 0x00000218
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_R12(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_R12_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_RRCER(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_RRCER_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_SFRCER(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_SFRCER_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_PFRCER(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ECC_CORR_ERR_COUNT_REG_PFRCER_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg -
    Bits: 31:20 R0(ro) - Reserved:
    Bits: 19:0  PSTD(rw) - PME Service Timeout Delay: Specifies the timeout delay for retransmission of PM_PME messages. The value is in units of microseconds.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PME_SERVICE_TIMEOUT_DELAY_REG 0x00000224
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_SERVICE_TIMEOUT_DELAY_REG_R0(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_SERVICE_TIMEOUT_DELAY_REG_R0_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_SERVICE_TIMEOUT_DELAY_REG_PSTD(_x) (((_x) & 0xfffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PME_SERVICE_TIMEOUT_DELAY_REG_PSTD_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_root_port_requestor_id_reg -
    Bits: 15:0  RPRI(rw) - Root Port Requestor ID: RID (bus, device & function numbers) for all TLPs internally generated by Root Port
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_ROOT_PORT_REQUESTOR_ID_REG 0x00000228
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ROOT_PORT_REQUESTOR_ID_REG_RPRI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_ROOT_PORT_REQUESTOR_ID_REG_RPRI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg -
    Bits: 31:29 BAR3C(rw) - BAR 3 Control: Specifies the configuration of BAR3. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 28:24 BAR3A(rw) - BAR 3 Aperture: Specifies the aperture of the BAR 3 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits: 23:21 BAR2C(rw) - BAR 2 Control: Specifies the configuration of BAR2. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits: 20:16 BAR2A(rw) - BAR 2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64bit BAR2-3. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
    Bits: 15:13 BAR1C(rw) - BAR 1 Control: Specifies the configuration of BAR1. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  BAR1A(rw) - BAR 1 Aperture: Specifies the aperture of the BAR 1 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  BAR0C(rw) - BAR 0 Control: Specifies the configuration of BAR0. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  BAR0A(rw) - BAR 0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64bit BAR0-1. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PF_0_BAR_CONFIG_0_REG 0x00000240
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR3C(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR3C_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR3A(_x) (((_x) & 0x1f) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR3A_of(_x) (((_x) >> 24) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR2C(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR2C_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR2A(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR2A_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR1C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR1C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR1A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR1A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR0C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR0C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR0A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_0_REG_BAR0A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg -
    Bits: 31    ERBC(rw) - Enable Resizable BAR Capability: Setting this bit to 1 enables the Resizable BAR Capability in the PCI Express Configuration Space of the associated Function. When the Resizable BAR Capability is enabled, the apertures of the memory BARs of the corresponding Function are no longer selected by the fields in this register, but by the setting of the registers in the Resizable BAR Capability Structure.
    Bits: 30:24 R24(ro) - Reserved:
    Bits: 23:22 R22(ro) - Reserved:
    Bits: 21    ERBE(rw) - EXP-ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
    Bits: 20:16 ERBA(rw) - EXP-ROM BAR Aperture: Specifies the aperture of the Expansion ROM BAR. The encodings are: 00000-00001 = 256 bytes, 00010 = 512 bytes, 00011 = 1 Kbyte, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 00110 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010-11111 = undefined
    Bits: 15:13 BAR5C(rw) - BAR 5 Control: Specifies the configuration of BAR5. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  BAR5A(rw) - BAR 5 Aperture: Specifies the aperture of the BAR 5 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  BAR4C(rw) - BAR 4 Control: Specifies the configuration of BAR4. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  BAR4A(rw) - BAR 4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64bit BAR4-5. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PF_0_BAR_CONFIG_1_REG 0x00000244
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_ERBC BIT(31)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_R24(_x) (((_x) & 0x7f) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_R24_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_R22(_x) (((_x) & 0x3) << 22)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_R22_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_ERBE BIT(21)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_ERBA(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_ERBA_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR5C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR5C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR5A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR5A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR4C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR4C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR4A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_BAR_CONFIG_1_REG_BAR4A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg -
    Bits: 31:29 VFBAR3C(rw) - VF BAR 3 Control: Specifies the configuration of VF BAR3. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 28:24 VFBAR3A(rw) - VF BAR 3 Aperture: Specifies the aperture of the VF BAR 3 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits: 23:21 VFBAR2C(rw) - VF BAR 2 Control: Specifies the configuration of VF BAR2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits: 20:16 VFBAR2A(rw) - VF BAR 2 Aperture: Specifies the aperture of the 32-bit VF BAR 2 or 64bit VF BAR2-3. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
    Bits: 15:13 VFBAR1C(rw) - VF BAR 1 Control: Specifies the configuration of VF BAR1. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  VFBAR1A(rw) - VF BAR 1 Aperture: Specifies the aperture of the VF BAR 1 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  VFBAR0C(rw) - VF BAR 0 Control: Specifies the configuration of VF BAR0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  VFBAR0A(rw) - VF BAR 0 Aperture: Specifies the aperture of the 32-bit VF BAR 0 or 64bit VF BAR0-1. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PF_0_VF_BAR_CONFIG_0_REG 0x00000280
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR3C(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR3C_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR3A(_x) (((_x) & 0x1f) << 24)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR3A_of(_x) (((_x) >> 24) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR2C(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR2C_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR2A(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR2A_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR1C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR1C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR1A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR1A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR0C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR0C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR0A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_0_REG_VFBAR0A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg -
    Bits: 31:16 R16(ro) - Reserved:
    Bits: 15:13 VFBAR5C(rw) - VF BAR 5 Control: Specifies the configuration of VF BAR5. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  VFBAR5A(rw) - VF BAR 5 Aperture: Specifies the aperture of the VF BAR 5 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  VFBAR4C(rw) - VF BAR 4 Control: Specifies the configuration of VF BAR4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  VFBAR4A(rw) - VF BAR 4 Aperture: Specifies the aperture of the 32-bit VF BAR 4 or 64bit VF BAR4-5. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PF_0_VF_BAR_CONFIG_1_REG 0x00000284
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_R16(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_R16_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR5C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR5C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR5A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR5A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR4C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR4C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR4A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_0_VF_BAR_CONFIG_1_REG_VFBAR4A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_config_reg -
    Bits: 31:1  R(ro) - Reserved:
    Bits:  0    F0E(ro) - Function 0 Enable: Enable for Function 0. This bit is hardwired to 1.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_PF_CONFIG_REG     0x000002c0
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_CONFIG_REG_R(_x) (((_x) & 0x7fffffff) << 1)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_CONFIG_REG_R_of(_x) (((_x) >> 1) & 0x7fffffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_PF_CONFIG_REG_F0E BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_rc_BAR_config_reg -
    Bits: 31    RCBCE(rw) - RC BAR Check Enable: This bit must be set to 1 to enable BAR checking in the RC mode. When this bit is set to 0, the core will forward all incoming memory requests to the client logic without checking their address ranges.
    Bits: 30:21 R22(ro) - Reserved:
    Bits: 20    RCB45E(rw) - RC BAR 4-5 Enable: This bit must be set to enable address checking by RC BAR 4-5.
    Bits: 19:16 RCB45A(rw) - RC BAR 4-5 Aperture: Specifies the aperture of the 64-bit RC BAR 4-5. The encodings are: 0000 = 4 Kbytes, 0001 = 8 Kbytes, ... , 1111 = 128 Gbytes
    Bits: 15:13 R21(ro) - Reserved:
    Bits: 12    RCB23E(rw) - RC BAR 2-3 Enable: This bit must be set to enable address checking by RC BAR 2-3.
    Bits: 11:8  RCB23A(rw) - RC BAR 2-3 Aperture: Specifies the aperture of the 64-bit RC BAR 2-3 The encodings are: 0000 = 4 Kbytes, 0001 = 8 Kbytes, ... , 1111 = 128 Gbytes
    Bits:  7:5  R20(ro) - Reserved:
    Bits:  4    RCB01E(rw) - RC BAR 0-1 Enable: This bit must be set to enable address checking by RC BAR 0-1.
    Bits:  3:0  RCB01A(rw) - RC BAR 0-1 Aperture: This field specifies the aperture of the 64-bit RC BAR 0-1. The encodings are: 0000 = 4 Kbytes, 0001 = 8 Kbytes, ... , 1111 = 128 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_RC_BAR_CONFIG_REG 0x00000300
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCBCE BIT(31)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_R22(_x) (((_x) & 0x3ff) << 21)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_R22_of(_x) (((_x) >> 21) & 0x3ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB45E BIT(20)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB45A(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB45A_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_R21(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_R21_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB23E BIT(12)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB23A(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB23A_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_R20(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_R20_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB01E BIT(4)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB01A(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_RC_BAR_CONFIG_REG_RCB01A_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg -
    Bits: 31:23 GSSR0(ro) - Reserved:
    Bits: 22:0  GSSV0(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 0.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_0_REG 0x00000340
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_0_REG_GSSR0(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_0_REG_GSSR0_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_0_REG_GSSV0(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_0_REG_GSSV0_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg -
    Bits: 31:23 GSSR1(ro) - Reserved:
    Bits: 22:0  GSSV1(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 1.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_1_REG 0x00000344
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_1_REG_GSSR1(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_1_REG_GSSR1_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_1_REG_GSSV1(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_1_REG_GSSV1_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg -
    Bits: 31:23 GSSR2(ro) - Reserved:
    Bits: 22:0  GSSV2(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 2.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_2_REG 0x00000348
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_2_REG_GSSR2(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_2_REG_GSSR2_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_2_REG_GSSV2(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_2_REG_GSSV2_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg -
    Bits: 31:23 GSSR3(ro) - Reserved:
    Bits: 22:0  GSSV3(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 3.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_3_REG 0x0000034c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_3_REG_GSSR3(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_3_REG_GSSR3_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_3_REG_GSSV3(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_3_REG_GSSV3_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg -
    Bits: 31:23 GSSR4(ro) - Reserved:
    Bits: 22:0  GSSV4(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 4.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_4_REG 0x00000350
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_4_REG_GSSR4(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_4_REG_GSSR4_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_4_REG_GSSV4(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_4_REG_GSSV4_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg -
    Bits: 31:23 GSSR5(ro) - Reserved:
    Bits: 22:0  GSSV5(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 5.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_5_REG 0x00000354
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_5_REG_GSSR5(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_5_REG_GSSR5_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_5_REG_GSSV5(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_5_REG_GSSV5_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg -
    Bits: 31:23 GSSR6(ro) - Reserved:
    Bits: 22:0  GSSV6(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 6.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_6_REG 0x00000358
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_6_REG_GSSR6(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_6_REG_GSSR6_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_6_REG_GSSV6(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_6_REG_GSSV6_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg -
    Bits: 31:23 GSSR7(ro) - Reserved:
    Bits: 22:0  GSSV7(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 7.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_SCRAMBLER_SEED_VALUE_7_REG 0x0000035c
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_7_REG_GSSR7(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_7_REG_GSSR7_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_7_REG_GSSV7(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_SCRAMBLER_SEED_VALUE_7_REG_GSSV7_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_default_preset_reg -
    Bits: 31:7  R25(ro) - Reserved:
    Bits:  6:4  GDRXPH(rw) - Default Receiver Preset Hint: Default receiver preset hint value used for a lane that did not receive EQ TS2 in Recovery.RcvrCfg LTSSM state
    Bits:  3:0  GDTXP(rw) - Default Transmitter Preset: Default transmitter preset value used for a lane that did not receive EQ TS2 in Recovery.RcvrCfg LTSSM state
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_I_GEN3_DEFAULT_PRESET_REG 0x00000360
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_DEFAULT_PRESET_REG_R25(_x) (((_x) & 0x1ffffff) << 7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_DEFAULT_PRESET_REG_R25_of(_x) (((_x) >> 7) & 0x1ffffff)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_DEFAULT_PRESET_REG_GDRXPH(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_DEFAULT_PRESET_REG_GDRXPH_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_DEFAULT_PRESET_REG_GDTXP(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_LM_I_REGF_LM_PCIE_BASE_I_GEN3_DEFAULT_PRESET_REG_GDTXP_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_vendor_id_device_id -
    Bits: 31:16 DID(ro) - Device ID: Device ID assigned by the manufacturer of the device. This field can be written independently for each Function from the local management bus.
    Bits: 15:0  VID(ro) - Vendor ID: This is the Vendor ID assigned by the PCI SIG to the manufacturer of the device The Vendor ID is set in the Vendor ID Register within the local management register block.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_VENDOR_ID_DEVICE_ID    0x00000000
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_DID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_DID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_VENDOR_ID_DEVICE_ID_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_command_status -
    Bits: 31    DPE(w1c) - Detected Parity Error: This bit is set when the core has received a poisoned TLP. The Parity Error Response enable bit (bit 6) has no effect on the setting of this bit. This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 30    SSE(w1c) - Signaled System Error: If the SERR enable bit is 1, this bit is set when the core has sent out a fatal or non-fatal error message on the link to the Root Complex. If the SERR enable bit is 0, this bit remains 0. This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 29    RMA(w1c) - Received Master Abort: This bit is set when the core has received a completion from the link with the Unsupported Request status. This field can also be cleared from the local management bus by writing a 1 into this bit position STICKY.
    Bits: 28    RTA(w1c) - Received Target Abort: This bit is set when the core has received a completion from the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position STICKY.
    Bits: 27    STA(w1c) - Signaled Target Abort: This bit is set when the core has sent a completion to the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 26:25 R5(ro) - Reserved:
    Bits: 24    MDPE(w1c) - Master Data Parity Error: When the Parity Error Response enable bit in the PCI Command Register of the associated Physical Function is set, the core sets this bit when it detects the following error conditions: (i) The core receives a Poisoned Completion TLP from the link in response to a request from this VF. (ii) The core sends out a poisoned write request on the link from this VF. (This bit remains 0 when the Parity Error Response enable bit in the PCI Command Register of the associated Physical Function is 0). This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 23:21 R4(ro) - Reserved:
    Bits: 20    CL(ro) - Capabilities List: Indicates the presence of PCI Extended Capabilities registers. This bit is hardwired to 1.
    Bits: 19    IS(ro) - Interrupt Status: Reserved
    Bits: 18:11 R3(ro) - Reserved:
    Bits: 10    IMD(ro) - INTx Message Disable: Reserved
    Bits:  9    R2(ro) - Reserved:
    Bits:  8    SE(ro) - SERR Enable: Reserved
    Bits:  7    R1(ro) - Reserved:
    Bits:  6    PERE(ro) - Parity Error Response Enable: Reserved
    Bits:  5:3  R0(ro) - Reserved:
    Bits:  2    BME(rw) - Bus-Master Enable: Enables the device to issue memory and I/O requests from this Function. This field can be written from the local management bus.
    Bits:  1    MSE(ro) - Mem-Space Enable: Reserved
    Bits:  0    IOSE(ro) - IO-Space Enable: Reserved
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_COMMAND_STATUS         0x00000004
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_DPE   BIT(31)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_SSE   BIT(30)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_RMA   BIT(29)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_RTA   BIT(28)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_STA   BIT(27)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R5(_x) (((_x) & 0x3) << 25)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R5_of(_x) (((_x) >> 25) & 0x3)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_MDPE  BIT(24)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R4(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R4_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_CL    BIT(20)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_IS    BIT(19)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R3(_x) (((_x) & 0xff) << 11)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R3_of(_x) (((_x) >> 11) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_IMD   BIT(10)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R2    BIT(9)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_SE    BIT(8)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R1    BIT(7)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_PERE  BIT(6)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_R0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_BME   BIT(2)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_MSE   BIT(1)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_COMMAND_STATUS_IOSE  BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_revision_id_class_code -
    Bits: 31:24 CC(ro) - Class Code: Identifies the function of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits: 23:16 SCC(ro) - Sub-Class Code: Identifies a sub-category within the selected function. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits: 15:8  PIB(ro) - Programming Interface Byte: Identifies the register set layout of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits:  7:0  RID(ro) - Revision ID: Assigned by the manufacturer of the device to identify the revision RO Setting of this field Denali Databahn-PCIe Core User Guide, PMC-Sierra Version 3.4 202 number of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_REVISION_ID_CLASS_CODE 0x00000008
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_CC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_CC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_SCC(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_SCC_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_PIB(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_PIB_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_RID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_REVISION_ID_CLASS_CODE_RID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bist_header_latency_cache_line -
    Bits: 31:24 BR(ro) - BIST Register: Reserved
    Bits: 23    DT(ro) - Device Type: Identifies whether the device supports a single Function or multiple Functions. This bit is read as 0 when only Function 0 has been enabled in the Physical Function Configuration Register (in the local management block), and as 1 when more than one Function has been enabled.
    Bits: 22:16 HT(ro) - Header Type: Reserved
    Bits: 15:8  LT(ro) - Latency Timer: Reserved
    Bits:  7:0  CLS(ro) - Cache Line Size: Reserved
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BIST_HEADER_LATENCY_CACHE_LINE 0x0000000c
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_BR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_BR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_DT BIT(23)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_HT(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_HT_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_LT(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_LT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_CLS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BIST_HEADER_LATENCY_CACHE_LINE_CLS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_0_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BAR_0_REG              0x00000010
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_0_REG_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_0_REG_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_1_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BAR_1_REG              0x00000014
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_1_REG_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_1_REG_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_2_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BAR_2_REG              0x00000018
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_2_REG_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_2_REG_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_3_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BAR_3_REG              0x0000001c
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_3_REG_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_3_REG_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_4_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BAR_4_REG              0x00000020
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_4_REG_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_4_REG_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_5_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_BAR_5_REG              0x00000024
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_5_REG_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_BAR_5_REG_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_rsvd_0A -
  Register: i_vf_pcie_base_rsvd_0E -
  Register: i_vf_pcie_base_rsvd_010_01F_[16] -
  Register: i_vf_power_mgmt_cap_struct_rsvd_022_023_[2] -
  Register: i_vf_MSI_cap_struct_rsvd_02B -
  Register: i_vf_MSIX_cap_struct_rsvd_02F -
  Register: i_vf_PCIE_cap_struct_rsvd_034_038_[5] -
  Register: i_vf_PCIE_cap_struct_rsvd_03A_03F_[6] -
  Register: i_vf_AER_cap_struct_rsvd_04B_04F_[5] -
  Register: i_vf_ARI_cap_struct_rsvd_052_09C_[75] -
    Bits: 31:0  RSVD(ro) - NA
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_RSVD_0A                  0x00000028
#define NFP_PCIEX_VF_i_vf_pcie_base_RSVD_0E                  0x00000038
#define NFP_PCIEX_VF_i_vf_pcie_base_RSVD_010_01F(_x)         (0x00000040 + (0x4 * ((_x) & 0xf)))
#define NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_RSVD_022_023(_x) (0x00000088 + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_RSVD_02B            0x000000a8
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_RSVD_02F           0x000000bc
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_RSVD_034_038(_x)   (0x000000d0 + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_RSVD_03A_03F(_x)   (0x000000e8 + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_RSVD_04B_04F(_x)    (0x0000012c + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_VF_i_vf_ARI_cap_struct_RSVD_052_09C(_x)    (0x00000148 + (0x4 * ((_x) & 0x7f)))
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_VF_GENERIC_RESERVED_REG_RSVD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_VF_GENERIC_RESERVED_REG_RSVD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i -
    Bits: 31:16 SID(ro) - Subsystem ID: Specifies the Subsystem ID assigned by the manufacturer of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits: 15:0  SVID(ro) - Subsystem Vendor ID: Specifies the Subsystem Vendor ID assigned by the PCI SIG to the manufacturer of the device. Its value comes from the Subsystem Vendor ID Register in the local management register block.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I 0x0000002c
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SVID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_SUBSYSTEM_VENDOR_ID_SUBSYSTEM_I_SVID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_expansn_rom_bar_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_EXPANSN_ROM_BAR_REG    0x00000030
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_EXPANSN_ROM_BAR_REG_NI(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_EXPANSN_ROM_BAR_REG_NI_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_capabilities_pointer -
    Bits: 31:8  R6(ro) - Reserved:
    Bits:  7:0  CP(ro) - Capabilities Pointer: Contains pointer to the first PCI Capability Structure. This field is set by default to 90 hex, to point to the Power Management Capability Structure. It can be modified by writing to VF 0 from the local management bus, and the setting is common across all VFs.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_CAPABILITIES_POINTER   0x00000034
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_CAPABILITIES_POINTER_R6(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_CAPABILITIES_POINTER_R6_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_CAPABILITIES_POINTER_CP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_CAPABILITIES_POINTER_CP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_intrpt_line_intrpt_pin_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_I_INTRPT_LINE_INTRPT_PIN_REG 0x0000003c
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_REG_NI(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_BASE_I_INTRPT_LINE_INTRPT_PIN_REG_NI_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap -
    Bits: 31    PSDCS(ro) - PME Support for D3(cold) State: Indicates whether the Function is capable of sending PME messages when in the D3cold state. Because the device does not have aux power, this bit is hardwired to 0.
    Bits: 30    PSDHS(ro) - PME Support for D3(hot) State: Indicates whether the Function is capable of sending PME messages when in the D3hot state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 28    PSD1S(ro) - PME Support for D1 State: Indicates whether the Function is capable of sending PME messages when in the D1 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 27    PSD0S(ro) - PME Support for D0 State: Indicates whether the Function is capable of sending PME messages when in the D0 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 26    D2S(ro) - D2 Support: Set if the Function supports the D2 power state. Currently hardwired to 0.
    Bits: 25    D1S(ro) - D1 Support: Set if the Function supports the D1 power state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 24:22 MCRAPS(ro) - Max Current Required from Aux Power Supply: Specifies the maximum current drawn by the device from the aux power source in the D3cold state. This field is not implemented in devices not supporting PME notification when in the D3cold state, and is therefore hardwired to 0.
    Bits: 21    DSI(ro) - Device Specific Initialization Bit: This bit, when set, indicates that the device requires additional configuration steps beyond setting up its PCI configuration space, to bring it to the D0active state from the D0uninitialized state. This bit is hardwired to 0.
    Bits: 20    R0(ro) - Reserved:
    Bits: 19    PC(ro) - PME Clock: Not applicable to PCI Express. This bit is hardwired to 0.
    Bits: 18:16 VID(ro) - Version ID: Indicates the version of the PCI Bus Power Management Specifications that the Function implements. This field is set by default to 011 (Version 1.2). It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. By default, this points to the MSI Capability Structure. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for Power Management. This field is set by default to 01 hex. It can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_I_PWR_MGMT_CAP 0x00000080
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSDCS BIT(31)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSDHS BIT(30)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSD1S BIT(28)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PSD0S BIT(27)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_D2S BIT(26)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_D1S BIT(25)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_MCRAPS(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_MCRAPS_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_DSI BIT(21)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_R0 BIT(20)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_PC BIT(19)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_VID(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_VID_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CAP_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep -
    Bits: 31:24 DR(ro) - Data Register: This optional register is not implemented in the Databahn PCIe core. This field is hardwired to 0.
    Bits: 23:16 R1(ro) - Reserved:
    Bits: 15    PMES(rw) - PME Status: When PME notification is enabled, writing a 1 into this bit position from the local management bus sets this bit and causes the core to send a PME message from the associated Function. When the Root Complex processes this message, it will turn off this bit by writing a 1 into this bit position though a Config Write. This bit can be set or cleared from the local management bus, by writing a 1 or 0, respectively. It can only be cleared from the configuration path (by writing a 1).
    Bits: 14:9  R2(ro) - Reserved:
    Bits:  8    PE(rw) - PME Enable: Setting this bit enables the notification of PME events from the associated Function. This bit can be set also by writing into this register from the local management bus.
    Bits:  7:4  R3(ro) - Reserved:
    Bits:  3    NSR(ro) - No Soft Reset: When this bit is set to 1, the Function will maintain all its state in the PM state D3hot. The software is not required to re-initialize the Function registers on the transition back to D0. This bit is set to 1 by default, but can be modified independently for each VF from the local management bus.
    Bits:  2    R4(ro) - Reserved:
    Bits:  1:0  PS(rw) - Power State: Indicates the power state this Function is currently in. This field can be read by the software to monitor the current power state, or can be written to cause a transition to a new state. The valid settings are 00 (state D0), 01 (state D1) and 11 (state D3hot). The software should not write any other value into this field. This field can also be written from the local management bus independently for each VF Function.
*/
#define NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_I_PWR_MGMT_CTRL_STAT_REP 0x00000084
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_DR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_DR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R1(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PMES BIT(15)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R2(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R2_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PE BIT(8)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R3(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_NSR BIT(3)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_R4 BIT(2)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PS(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_VF_I_VF_POWER_MGMT_CAP_STRUCT_I_PWR_MGMT_CTRL_STAT_REP_PS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_ctrl_reg -
    Bits: 31:25 R0(ro) - Reserved:
    Bits: 24    MCAP(ro) - Set to 1 to indicate that the device has per-vector masking capability. By default, this bit is set to 1 for PF 0 and 0 for PF 1. This bit can be written from the local management bus.
    Bits: 23    AC64(ro) - 64-Bit Address Capable: Set to 1 to indicate that the device is capable of generating 64-bit addresses for MSI messages. Because the core has this capability, this bit is hardwired to 1.
    Bits: 22:20 MME(rw) - Multiple Message Enable: Encodes the number of distinct messages that the core is programmed to generate for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). This setting must be based on the number of interrupt inputs of the core that are actually used by this Function. This field can be written from the local management bus.
    Bits: 19:17 MMC(ro) - Multiple Message Capable: Encodes the number of distinct messages that the core is capable of generating for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). Thus, this field defines the number of the interrupt vectors for this Function. The core allows up to 32 distinct messages, but the setting of this field must be based on the number of interrupt inputs of the core that are actually used by the client. For example, if the client logic uses 8 of the 32 distinct MSI interrupt inputs of the core for this Function, then the value of this field must be set to 011. This field can be written from the local management bus.
    Bits: 16    ME(rw) - MSI Enable: Set by the configuration program to enable the MSI feature. This field can also be written from the local management bus.
    Bits: 15:8  CP(ro) - Pointer to the next PCI Capability Structure. The value read from this read-only field is the corresponding pointer in the MSI Capability Structure of the Physical Function this VF is attached to.
    Bits:  7:0  CID(ro) - Capability ID: Specifies that the capability structure is for MSI. Hardwired to 05 hex.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_I_MSI_CTRL_REG      0x00000090
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_R0(_x) (((_x) & 0x7f) << 25)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_R0_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MCAP BIT(24)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_AC64 BIT(23)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MME(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MME_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MMC(_x) (((_x) & 0x7) << 17)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_MMC_of(_x) (((_x) >> 17) & 0x7)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_ME BIT(16)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_CTRL_REG_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_msg_low_addr -
    Bits: 31:2  MAL(rw) - Message Address Low: Lower bits of the address to be used in MSI messages. This field can also be written from the local management bus.
    Bits:  1:0  R1(ro) - Reserved: The two lower bits of the address are hardwired to 0 to align the address on a double-word boundary.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_I_MSI_MSG_LOW_ADDR  0x00000094
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_MAL(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_MAL_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_R1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_LOW_ADDR_R1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_msg_hi_addr -
    Bits: 31:0  MAH(rw) - Message Address High: Contains bits 63:32 of the 64-bit address to be used in MSI Messages. A value of 0 specifies that 32-bit addresses are to be used in the messages. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_I_MSI_MSG_HI_ADDR   0x00000098
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_HI_ADDR_MAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_HI_ADDR_MAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_msg_data -
    Bits: 31:16 R2(ro) - Reserved: Hardwired to 0
    Bits: 15:0  MD(rw) - Message Data: Message data to be used for this Function. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_I_MSI_MSG_DATA      0x0000009c
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_DATA_R2(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_DATA_R2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_DATA_MD(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MSG_DATA_MD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_mask -
    Bits: 31:0  MSIMask(rw) - Mask bits for MSI interrupts. The Multiple Message Capable field in the MSI Control Register specifies the number of distinct interrupts for the Function, which determines the number of valid mask bits
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_I_MSI_MASK          0x000000a0
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MASK_MSI_MASK(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_MASK_MSI_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_pend -
    Bits: 31:0  MSIPend(ro) - Pending bits for MSI interrupts. A read from this location returns the state of the MSI_MASK inputs of the core.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_I_MSI_PEND          0x000000a4
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_PEND_MSI_PEND(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_MSI_CAP_STRUCT_I_MSI_PEND_MSI_PEND_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_MSIX_cap_struct_i_msix_ctrl -
    Bits: 31    MSIXE(rw) - MSI-X Enable: Set by the configuration program to enable the MSI-X feature. This field can also be written from the local management bus.
    Bits: 30    FM(rw) - Function Mask: This bit serves as a global mask to all the interrupt conditions associated with this Function. When this bit is set, the core will not send out MSI messages from this Function. This field can also be written from the local management bus.
    Bits: 29:27 R0(ro) - Reserved:
    Bits: 26:16 MSIXTS(ro) - MSI-X Table Size: Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function. The programmed value is 1 minus the size of the table (that is, this field is set to 0 if the table size is 1.). This field is set by default to 3f hex. It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. This is set to point to the PCI Express Capability Structure at 30 hex. This can be modified for VF 0 from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for MSI-X. This field is set by default to 11 hex. It can be rewritten independently for each Function from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_I_MSIX_CTRL        0x000000b0
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_MSIXE BIT(31)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_FM   BIT(30)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_R0(_x) (((_x) & 0x7) << 27)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_R0_of(_x) (((_x) >> 27) & 0x7)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_MSIXTS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_MSIXTS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_CTRL_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_MSIX_cap_struct_i_msix_tbl_offset -
    Bits: 31:3  TO(ro) - Table Offset: Offset of the memory address where the MSI-X Table is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5).
*/
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_I_MSIX_TBL_OFFSET  0x000000b4
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_TO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_TO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_TBL_OFFSET_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_MSIX_cap_struct_i_msix_pending_intrpt -
    Bits: 31:3  PO(ro) - PBA Offset: Offset of the memory address where the PBA is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.
*/
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_I_MSIX_PENDING_INTRPT 0x000000b8
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_PO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_PO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_I_VF_MSIX_CAP_STRUCT_I_MSIX_PENDING_INTRPT_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_cap_list -
    Bits: 31    R0(ro) - Reserved:
    Bits: 30    TRS(ro) - TCS Routing Supported: When set to 1, this bit indicates that the device supports routing of Trusted Configuration Requests. Not valid for Endpoints. Hardwired to 0.
    Bits: 29:25 IMN(ro) - Interrupt Message Number: Identifies the MSI or MSI-X interrupt vector for the interrupt message generated corresponding to the status bits in the Slot Status Register, Root Status Register, or this capability structure. This field must be defined based on the chosen interrupt mode - MSI or MSI-X. This field is hardwired to 0.
    Bits: 24    SS(ro) - Slot Status: Set to 1 when the link connected to a slot. Hardwired to 0.
    Bits: 23:20 DT(ro) - Device Type: Indicates the type of device implementing this Function. This field is hardwired to 0 in the EP mode.
    Bits: 19:16 CV(ro) - Capability Version: Identifies the version number of the capability structure. When GEN2_ENABLE is strapped high, this field is permanently set to 2 (Gen2), and 1 (Gen1) otherwise.
    Bits: 15:8  NCP(ro) - Next Capability Pointer: Points to the next PCI capability structure. Set to 0 because this is the last capability structure.
    Bits:  7:0  CID(ro) - Capability ID: Specifies Capability ID assigned by PCI SIG for this structure. This field is hardwired to 10 hex.
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_I_PCIE_CAP_LIST    0x000000c0
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_R0 BIT(31)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_TRS BIT(30)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_IMN(_x) (((_x) & 0x1f) << 25)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_IMN_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_SS BIT(24)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_DT(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_DT_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_NCP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_NCP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_CAP_LIST_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_dev_cap -
    Bits: 31:29 R3(ro) - Reserved:
    Bits: 28    FLRC(ro) - FLR Capable: Set when device has Function-Level Reset capability. Hardwired to 1.
    Bits: 27:26 CPLS(ro) - Captured Power Limit Scale: This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits: 25:18 CSPLV(ro) - Captured Slot Power Limit Value: This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits: 17:16 R2(ro) - Reserved:
    Bits: 15    RBER(ro) - Role-Based Error Reporting: This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits: 14:12 R1(ro) - Reserved:
    Bits: 11:9  AL1SL(ro) - Acceptable L1 Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L1 to L0. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits:  8:6  AL0SL(ro) - Acceptable L0S Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L0S to L0. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits:  5    ETFS(ro) - Extended Tag Field Supported: Set when device allows the tag field to be extended from 5 to 8 bits. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits:  4:3  PFS(ro) - Phantom Functions Supported: This field is used to extend the tag field by combining unused Function bits with the tag bits. This field is hardwired to 00 to disable this feature.
    Bits:  2:0  MPS(ro) - Max Payload Size: Specifies maximum payload size supported by the device. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_I_PCIE_DEV_CAP     0x000000c4
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R3(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R3_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_FLRC BIT(28)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CPLS(_x) (((_x) & 0x3) << 26)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CPLS_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CSPLV(_x) (((_x) & 0xff) << 18)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_CSPLV_of(_x) (((_x) >> 18) & 0xff)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R2(_x) (((_x) & 0x3) << 16)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R2_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_RBER BIT(15)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R1(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_R1_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL1SL(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL1SL_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL0SL(_x) (((_x) & 0x7) << 6)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_AL0SL_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_ETFS BIT(5)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_PFS(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_PFS_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_MPS(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_MPS_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status -
    Bits: 31:22 R4(ro) - Reserved:
    Bits: 21    TP(ro) - Transaction Pending: Indicates if any of the Non-Posted requests issued by the Function are still pending.
    Bits: 20    APD(ro) - Aux Power Detected: Reserved
    Bits: 19    URD(ro) - Unsupported Request Detected: Reserved
    Bits: 18    FED(ro) - Fatal Error Detected: Reserved
    Bits: 17    NFER(ro) - Non-Fatal Error Detected: Reserved
    Bits: 16    CED(ro) - Correctable Error Detected: Reserved
    Bits: 15    FLR(rw) - Function-Level Reset: Writing a 1 into this bit position generated a Function-Level Reset for the selected VF. This bit reads as 0.
    Bits: 14:12 MRRS(ro) - Max Read Request Size: Reserved
    Bits: 11    EBS(ro) - Enable No Snoop: Reserved
    Bits: 10    EAP(ro) - Enable Aux Power: Reserved
    Bits:  9    EPF(ro) - Enable Phantom Functions: Reserved
    Bits:  8    ETFE(ro) - Extended Tag Field Enable: Reserved
    Bits:  7:5  MPS(ro) - Max Payload Size: Reserved
    Bits:  4    ERO(ro) - Enable Relaxed Ordering: Reserved
    Bits:  3    EURR(ro) - Enable Unsupported Request Reporting: Reserved
    Bits:  2    EFER(ro) - Enable Fatal Error Reporting: Reserved
    Bits:  1    ENFER(ro) - Enable Non-Fatal Error Reporting: Reserved
    Bits:  0    ECER(ro) - Enable Correctable Error Reporting: Reserved
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_I_PCIE_DEV_CTRL_STATUS 0x000000c8
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_R4(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_R4_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_TP BIT(21)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_APD BIT(20)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_URD BIT(19)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_FED BIT(18)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_NFER BIT(17)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_CED BIT(16)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_FLR BIT(15)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MRRS(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MRRS_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EBS BIT(11)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EAP BIT(10)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EPF BIT(9)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ETFE BIT(8)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MPS(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_MPS_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ERO BIT(4)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EURR BIT(3)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_EFER BIT(2)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ENFER BIT(1)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CTRL_STATUS_ECER BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_link_cap -
    Bits: 31:0  LCR(ro) - NA
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_I_LINK_CAP         0x000000cc
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_LINK_CAP_LCR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_LINK_CAP_LCR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_dev_cap_2 -
    Bits: 31:0  PDCR(ro) - NA
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_I_PCIE_DEV_CAP_2   0x000000e4
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_PDCR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_PCIE_CAP_STRUCT_I_PCIE_DEV_CAP_2_PDCR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. It is set by default to 140 hex to point to the ARI Capability Structure. This field reflects the setting of the corresponding field in the AER Enhanced Capability Header Register of PF 0.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field reflects the setting of the corresponding field in the AER Enhanced Capability Header Register of PF 0.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express AER Extended Capability Structure (0001 hex).
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_AER_ENHANCED_CAP_HDR 0x00000100
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_AER_ENHANCED_CAP_HDR_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_uncorr_err_status -
    Bits: 31:23 R3(ro) - Reserved: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits: 21    R2(w1c) - Reserved: This bit is set when the core has received a request from the link that it does not support. This error is not Function-specific. This error is considered non-fatal by default. In the special case described in Sections 6.2.3.2.4.1 of the PCI Express Specifications, the error is reported by sending an ERR_COR message. In all other cases, the error is reported by sending an ERR_NONFATAL message. The header of the received request that caused the error is logged in the Header Log Registers. STICKY.
    Bits: 20:12 Reserved(ro) - Reserved:
    Bits: 11:5  R1(ro) - Reserved:
    Bits:  4    DLPER(ro) - Data Link Protocol Error Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  3:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_UNCORR_ERR_STATUS 0x00000104
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R3(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R3_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R2 BIT(21)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R26_1(_x) (((_x) & 0x1ff) << 12)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R26_1_of(_x) (((_x) >> 12) & 0x1ff)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R1(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R1_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_DLPER BIT(4)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_STATUS_R0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_uncorr_err_mask -
    Bits: 31:0  R4(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_UNCORR_ERR_MASK   0x00000108
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R4(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_MASK_R4_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_uncorr_err_severity -
    Bits: 31:0  R8(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_UNCORR_ERR_SEVERITY 0x0000010c
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R8(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_UNCORR_ERR_SEVERITY_R8_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_corr_err_status -
    Bits: 31:16 R14(ro) - Reserved:
    Bits: 15    HLOS(w1c) - Header Log Overflow Status: This bit is set on a Header Log Register overflow, that is, when the header could not be logged in the Header Log Register because it is occupied by a previous header. STICKY.
    Bits: 14    CIES(ro) - Corrected Internal Error Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits: 13    ANFES(w1c) - Advisory Non-Fatal Error Status: This bit is set when an uncorrectable error occurs, which is determined to belong to one of the special cases described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications. This causes the core to generate an ERR_COR message in place of an ERR_NONFATAL message. STICKY.
    Bits: 12    RTTS(ro) - Replay Timer Timeout Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits: 11:9  R13(ro) - Reserved:
    Bits:  8    RNRS(ro) - Replay Number Rollover Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  7    BDS(ro) - Bad DLLP Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  6    BTPS(ro) - Bad TP Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  5:1  R12(ro) - Reserved:
    Bits:  0    RES(ro) - Receiver Error Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_CORR_ERR_STATUS   0x00000110
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R14(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R14_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_HLOS BIT(15)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_CIES BIT(14)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_ANFES BIT(13)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_RTTS BIT(12)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R13(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R13_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_RNRS BIT(8)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_BDS BIT(7)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_BTPS BIT(6)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R12(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_R12_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_STATUS_RES BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_corr_err_mask -
    Bits: 31:16 R17(ro) - Reserved:
    Bits: 15    HLOM(rw) - Header Log Overflow Mask: This bit, when set, masks the generation of error messages in response to a Header Log register overflow. STICKY.
    Bits: 14    CIEM(ro) - Corrected Internal Error Mask: This bit, when set, masks the generation of error messages in response to a corrected internal error condition.
    Bits: 13    ANFEM(rw) - Advisory Non-Fatal Error Mask: This bit, when set, masks the generation of error messages in response to an uncorrectable error occur, which is determined to belong to one of the special cases (as described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications). STICKY.
    Bits: 12    RTTM(ro) - Replay Timer Timeout Mask: This bit, when set, masks the generation of error messages in response to a Replay Timer timeout event.
    Bits: 11:9  R16(ro) - Reserved:
    Bits:  8    RNRM(ro) - Replay Number Rollover Mask: This bit, when set, masks the generation of error messages in response to a Replay Number Rollover event.
    Bits:  7    BDM(ro) - Bad DLLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad DLLP' received.
    Bits:  6    BTM(ro) - Bad TLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad TLP' received.
    Bits:  5:1  R15(ro) - Reserved:
    Bits:  0    REM(ro) - Receiver Error Mask: This bit, when set, masks the generation of error messages in response to the Physical Layer errors
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_CORR_ERR_MASK     0x00000114
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_R17(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_R17_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_HLOM BIT(15)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_CIEM BIT(14)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_ANFEM BIT(13)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_RTTM BIT(12)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_R16(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_R16_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_RNRM BIT(8)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_BDM BIT(7)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_BTM BIT(6)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_R15(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_R15_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_CORR_ERR_MASK_REM BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_advcd_err_cap_ctrl -
    Bits: 31:11 R18(ro) - Reserved:
    Bits: 10    MHRE(ro) - Multiple Header Recording Enable: Setting this bit enables the Function to log multiple error headers in its Header Log Registers. It is hardwired to 0
    Bits:  9    MHRC(ro) - Multiple Header Recording Capable: This bit is set when the Function has the capability to log more than one error header in its Header Log Registers. It is hardwired to 0.
    Bits:  8    ECC(ro) - Enable ECRC Check: Setting this bit enables ECRC checking on the receive side of the core. This bit is hardwired to 0. The setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  7    ECCAP(ro) - ECRC Check Capability: This read-only bit indicates to the software that the device is capable of checking ECRC in packets received from the link. This bit is hardwired to 0. This setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  6    EEG(ro) - Enable ECRC Generation: Enables the ECRC generation on the transmit side of the core. This bit is hardwired to 0. The setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  5    EGC(ro) - ECRC Generation Capability: This read-only bit indicates to the software that the device is capable of generating ECRC in packets transmitted on the link. This bit is hardwired to 0. The setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  4:0  FER(ro) - First Error Pointer: This is a 5-bit pointer to the bit position in the Uncorrectable Error Status Register corresponding to the error that was detected first. When there are multiple bits set in the Uncorrectable Error Status Register, this field informs the software which error was observed first. To prevent the field from being overwritten before software was able to read it, this field is not updated while the status bit pointed by it in the Uncorrectable Error Status Register remains set. After the software clears this status bit, a subsequent error condition that sets any bit in the Uncorrectable Error Status Register will update the First Error Pointer. Any uncorrectable error type, including the special cases where the error is reported using an ERR_COR message, will set the First Error Pointer (assuming the software has reset the error pointed by it in the Uncorrectable Error Status Register). STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_ADVCD_ERR_CAP_CTRL 0x00000118
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_R18(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_R18_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_MHRE BIT(10)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_MHRC BIT(9)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_ECC BIT(8)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_ECCAP BIT(7)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_EEG BIT(6)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_EGC BIT(5)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_FER(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_ADVCD_ERR_CAP_CTRL_FER_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_0 -
    Bits: 31:0  HD0(ro) - Header DWORD 0: First DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_HDR_LOG_0         0x0000011c
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_0_HD0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_0_HD0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_1 -
    Bits: 31:0  HD1(ro) - Header DWORD 1: Second DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_HDR_LOG_1         0x00000120
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_1_HD1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_1_HD1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_2 -
    Bits: 31:0  HD2(ro) - Header DWORD 2: Third DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_HDR_LOG_2         0x00000124
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_2_HD2(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_2_HD2_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_3 -
    Bits: 31:0  HD3(ro) - Header DWORD 3: Fourth DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_I_HDR_LOG_3         0x00000128
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_3_HD3(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_AER_CAP_STRUCT_I_HDR_LOG_3_HD3_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. The pointer is set by default to point to the Device Serial Number Capability Structure. This pointer can be modified for all Virtual Functions by writing into this register of VF 0 from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG-assigned value for the version of the capability structure. This field is taken from the setting of the corresponding field in the ARI Extended Capability Header Register of PF 0.
    Bits: 15:0  PCCID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI-SIG to the ARI Extended Capability (000E hex).
*/
#define NFP_PCIEX_VF_i_vf_ARI_cap_struct_I_ARI_EXT_CAP_HDR   0x00000140
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_PCCID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_EXT_CAP_HDR_PCCID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_ARI_cap_struct_i_ARI_cap_and_ctrl -
    Bits: 31:0  R13(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_ARI_cap_struct_I_ARI_CAP_AND_CTRL  0x00000144
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_R13(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_I_VF_ARI_CAP_STRUCT_I_ARI_CAP_AND_CTRL_R13_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value is NULL, but can be modified independently for all VFs by writing into VF 0 from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified for all VFs by writing into this register field of Physical Function 0 from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the TPH Requester Capability.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_I_TPH_REQ_EXT_CAP_HEADER_REG 0x00000274
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_EXT_CAP_HEADER_REG_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_req_cap_reg -
    Bits: 31:27 R2(ro) - Reserved:
    Bits: 26:16 STTS(ro) - ST Table Size: Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on). Max limit is 64 entries when the ST Table is located in the TPH Requester Capability Structure, and 2048 entries when located in the MSI-X table. Each entry is 16 bits long. This field is set by default to 3F hex (64 entries), but can be modified from the local management bus.
    Bits: 15:11 R1(ro) - Reserved:
    Bits: 10:9  STTL(ro) - ST Table Location: The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present. (00 = ST Table not present, 01 = ST Table in the TPH Requester Capability Structure, 10 = ST values stored in the MSI-X Table in client RAM, 11 = reserved.). This field is set by default to 01, but can be modified from the local management bus.
    Bits:  8    ERS(ro) - Extended TPH Requester Supported: When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix. This bit is hardwired to 0, as the core does not have this capability.
    Bits:  7:3  R0(ro) - Reserved:
    Bits:  2    DSMS(ro) - Device-Specific Mode Supported: A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation. In this mode, the Steering Tags are supplied by the client for each request through the HAL master interface. The client typically chooses the Steering Tag values from the ST Table, but is not required to do so. This bit is set to 1 by default, but can be modified from the local management bus.
    Bits:  1    IVMS(ro) - Hardwired to 0.
    Bits:  0    NSTM(ro) - No ST Mode Supported: When set to 1, indicates that this Function supports the 'No ST Mode' for the generation of TPH Steering Tags. In the No ST Mode, the device must use a Steering Tag value of 0 for all requests. This bit is hardwired to 1, as all TPH Requesters are required to support the No ST Mode of operation.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_I_TPH_REQ_CAP_REG   0x00000278
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R2(_x) (((_x) & 0x1f) << 27)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R2_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STTS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STTS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R1(_x) (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STTL(_x) (((_x) & 0x3) << 9)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_STTL_of(_x) (((_x) >> 9) & 0x3)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_ERS BIT(8)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_R0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_DSMS BIT(2)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_IVMS BIT(1)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CAP_REG_NSTM BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_req_ctrl_reg -
    Bits:  8    TRE(rw) - TPH Requester Enable: When set to 1, the Function is RW 0 allowed to generate requests with Transaction Processing Hints. The TPH_REQUESTER_ ENABLE[1:0] output of the core copies the setting of this register bit (bit i for VF i). This field can also be written from the local management bus.
    Bits:  2:0  STM(rw) - ST Mode: This field selects the ST mode (000 = No Steering Tag Mode, 001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved). The TPH_ST_MODE[5:0] output of the core reflects the setting of this register field (bits 3:0 for PF 0 and bits 5:3 for PF 1). This field can also be written from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_I_TPH_REQ_CTRL_REG  0x0000027c
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_TRE BIT(8)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_STM(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_REQ_CTRL_REG_STM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_st_table0_31_[32] -
    Bits: 31:24 ST1U(rw) - ST 1 Upper: This field is used for the upper 8 bits of the second Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits: 23:16 ST1L(rw) - ST 1 Lower: Lower 8 bits of the second Steering Tag. This is the 8-bit Steering Tag sent out in requests.
    Bits: 15:8  ST0U(rw) - ST 0 Upper: This field is used for the upper 8 bits of the first Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits:  7:0  ST0L(rw) - ST 0 Lower: Lower 8 bits of the first Steering Tag. This is the 8-bit Steering Tag sent out in requests.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_I_TPH_ST_TABLE0_31(_x) (0x00000280 + (0x4 * ((_x) & 0x1f)))
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST1U(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST1U_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST1L(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST1L_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST0U(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST0U_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST0L(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_I_VF_TPH_CAP_STRUCT_I_TPH_ST_TABLE0_31_ST0L_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
    Bits:  3:0  AprobeTxAddr(rw) - Address for TX lane aprobe data.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_APROBE_TX_ADDR(_x) (0x00000000 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_APROBE_TX_ADDR 0x0000e000
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBETXADDR_APROBE_TX_ADDR(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBETXADDR_APROBE_TX_ADDR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
    Bits:  7:3  AprobeRxAddr(rw) - Address for RX lane aprobe data.
    Bits:  2:0  AprobeRegRxTxAddr(rw) - Address for RX and TX regulator lane aprobe data.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_APROBE_RX_ADDR(_x) (0x00000001 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_APROBE_RX_ADDR 0x0000e001
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_RX_ADDR(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_RX_ADDR_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_REG_RXTX_ADDR(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_REG_RXTX_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
    Bits:  3    RstLanePcsSoftTx(rw) - TX lane soft reset. Active Low
    Bits:  2    RstLanePcsSoftRx(rw) - RX lane soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstBypassEn(rw) - RX and TX lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    Cmnctlporhardrstbypass(rw) - RX and TX lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TXRX_LANE_CONTROL(_x) (0x00000002 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TXRX_LANE_CONTROL 0x0000e002
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_RSTLANEPCSSOFT_TX BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_RSTLANEPCSSOFT_RX BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_CMNCTLPOR_HARDRSTBYPASSEN BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_CMNCTLPOR_HARDRSTBYPASS BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
    Bits:  4:0  LanePcsPstateRx(rw) - Rx Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_PSTATE_RX(_x) (0x00000003 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_PSTATE_RX 0x0000e003
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATERX_LANEPCSPSTATE_RX(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATERX_LANEPCSPSTATE_RX_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
    Bits:  4:0  LanePcsPstateTx(rw) - TX Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_PSTATE_TX(_x) (0x00000004 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_PSTATE_TX 0x0000e004
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATETX_LANEPCSPSTATE_TX(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATETX_LANEPCSPSTATE_TX_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
    Bits:  6:4  PcsTxDataWidth(rw) - Defines TX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
    Bits:  2:0  PcsRxDataWidth(rw) - Defines RX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PCS_DATAWIDTH(_x) (0x00000005 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PCS_DATAWIDTH 0x0000e005
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSTX_DATAWIDTH(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSTX_DATAWIDTH_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSRX_DATAWIDTH(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSRX_DATAWIDTH_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
    Bits:  6:4  PcsTxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
    Bits:  2:0  PcsRxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_CONTROL(_x) (0x00000006 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_CONTROL 0x0000e006
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSTX_DIVRATE(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSTX_DIVRATE_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSRX_DIVRATE(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSRX_DIVRATE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
    Bits:  7    LBParRx2TxTimedEn(rw) - PMA Parallel RX-to-TX loop-back enable. Parallel loopback from the PMA receive lane 20-bit data ports, to the transmit lane 20-bit data ports. 0 = Disables loopback. 1 = Loops back the 20-bit receive data port to the transmitter.
    Bits:  6    LBTx2RxIoTimedEn(rw) - PMA TX-to-RX I/O serial loop-back enable (loop back done directly from TX to RX pads). Serial IO loopback from the transmit lane IO pins to the receive lane IO pins: 0 = Disables loopback. 1 = Loops back the driver IO signal to the RX IO pins.
    Bits:  5    LBTx2RxBufTimedEn(rw) - PMA TX-to-RX buffered serial loop-back enable (bypasses IO Driver). Serial transmit to receive buffered loopback: 0 = Disables loopback. 1 = Loops back the TX serializer output into the CDR.
    Bits:  4    LBRx2TxUntimedEn(rw) - PMA serial RX-to-TX loop-back enable (from AGC to IO Driver). Serial receive to transmit loopback: 0 = Disables loopback. 1 = Transmits the untimed, partial equalized RX signal out the transmit IO pins.
    Bits:  3    LBPllFbClk2CdrRefClkEn(rw) - PMA PLL feedback clock-to-CDR reference clock loopback enable.
    Bits:  2    LbCdrDivClk2TxEn(rw) - PMA CDR divided-recovered-clock loopback enable for internal GPON mode..
    Bits:  1    LBCdrDivClk2ExtEn(rw) - PMA CDR divided-recovered-clock loopback enable for external clean up GPON mode.
    Bits:  0    LBCdrClk2TxEn(rw) - PMA CDR recovered-clock loopback enable; asserted when PARRX2TXTIMEDEN is 1. Transmit bit clock select: 0 = Selects synthesizer bit clock for transmit. 1 = Selects CDR clock for transmit
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BISTREGISTER(_x) (0x00000007 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BISTREGISTER 0x0000e007
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_PARRX2TXTIMEDEN BIT(7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_TX2RXIOTIMEDEN BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_TX2RXBUFTIMEDEN BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_RX2TXUNTIMEDEN BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_PLLFBCLK2CDRREFCLKEN BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRDIVCLK2TXEN BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRDIVCLK2EXTEN BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRCLK2TXEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
    Bits:  4    RxBistRxLocked(rw) - RX BIST locked indicator. '0' Indicates BIST is not word locked and error comparisons have not begun yet. '1' Indicates BIST is word locked and error comparisons have begun.
    Bits:  3    RxBistErrCntOvf(rw) - RX BIST error count overflow indicator. Indicates an overflow in the number of byte errors identified during the course of the test. This word is stable to sample when *_DONE_* signal has asserted.
    Bits:  2    RxBistDone(rw) - RX BIST completion: '0' Indicates test is not completed. '1' Indicates the test has completed, and will remain high until a new test is initiated.
    Bits:  1    PcsTxBistEn(rw) - Transmit lane BIST enable.
    Bits:  0    PcsRxBistEn(rw) - Recieve lane BIST enable.Active High
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST2REGISTER(_x) (0x00000008 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST2REGISTER 0x0000e008
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_RXLOCKED BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_ERRCOUNT_OVERFLOW BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_DONE BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_PCSTXBIST_EN BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_PCSRXBIST_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
    Bits:  7:0  RxBistErrCount(rw) - RX BIST error count word. Indicates the number of byte errors identified during the course of the test.This word is stable to sample when *_DONE_* signal has asserted.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST3REGISTER(_x) (0x00000009 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST3(_x) (0x0000000a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST3REGISTER 0x0000e009
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST3 0x0000e00a
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST3_RXBIST_ERRCOUNT(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST3_RXBIST_ERRCOUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
    Bits:  5    RXSigdetCdrLock2Data(rw) - RX CDR Lock to Data status indicator 0 - CDR is locked to reference clock 1 - CDR is locked to data.
    Bits:  4    RxPpmLockStatus(rw) - RX lane PLL lock status. 1 = CDR VCO is locked to reference clock.
    Bits:  3    PcsOutTxStatus(rw) - TX lane state transition status. Indicates the TX has completed a requested state transition. 0 = TX Lane has not completed its state change. 1 = TX Lane has completed its state change.
    Bits:  2    PcsOutTxReady(rw) - TX lane ready status signal: 0 = TX Lane is not ready for data transmission. 1 = TX Lane is ready for data transmission.
    Bits:  1    PcsOutRxStatus(rw) - RX lane state transition status. Indicates the RX has completed a requested state transition. 0 = RX Lane has not completed its state change. 1 = RX Lane has completed its state change.
    Bits:  0    PcsOutRxReady(rw) - RX lane ready status signal. 0 = RX Lane is not ready for data transmission. 1 = RX Lane is ready for data transmission.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_STATUS(_x) (0x0000000b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_STATUS 0x0000e00b
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_RXSIGDET_CDRLOCK2DATA BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_RXPPM_LOCKSTATUS BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTTX_STATUS BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTTX_READY BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTRX_STATUS BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTRX_READY BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyIclk(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_CALIBRATION(_x) (0x0000000c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_CALIBRATION 0x0000e00c
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCAL_RXCALDUTY_ICLK(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCAL_RXCALDUTY_ICLK_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyQclk(rw) - RX lane QCLK duty calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_CALIBRATION2(_x) (0x0000000d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_CALIBRATION2 0x0000e00d
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCALQ_RXCALDUTY_QCLK(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCALQ_RXCALDUTY_QCLK_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData0(rw) - RX lane DATA0 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION3(_x) (0x0000000e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION3 0x0000e00e
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL3_RXCALOFFSET_DATA0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL3_RXCALOFFSET_DATA0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData1(rw) - RX lane DATA1 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION4(_x) (0x0000000f + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION4 0x0000e00f
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL31_RXCALOFFSET_DATA1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL31_RXCALOFFSET_DATA1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge0(rw) - RX lane EDGE0 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION5(_x) (0x00000010 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION5 0x0000e010
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE0_RXCALOFFSET_EDGE0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE0_RXCALOFFSET_EDGE0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge1(rw) - RX lane EDGE1 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION6(_x) (0x00000011 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION6 0x0000e011
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE1_RXCALOFFSET_EDGE1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE1_RXCALOFFSET_EDGE1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetRoam(rw) - RX lane roam comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION7(_x) (0x00000012 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION7 0x0000e012
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALR_RXCALOFFSET_ROAM(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALR_RXCALOFFSET_ROAM_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
    Bits:  3:0  RxCdrCalfoscCenterFreq(rw) - RX CDR VCO center frequency calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CAL_CDR_FREQ(_x) (0x00000013 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CAL_CDR_FREQ 0x0000e013
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL1_RXCDRCALFOSC_CENTERFREQ(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL1_RXCDRCALFOSC_CENTERFREQ_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
    Bits:  4:0  TxCalTclkDuty(rw) - TX lane clock duty calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CAL_TX_CLK(_x) (0x00000014 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CAL_TX_CLK 0x0000e014
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL2_TXCALTCLKDUTY(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL2_TXCALTCLKDUTY_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
    Bits:  7:3  TxDrvLevN(rw) - Defines the total number of driver units allocated to sum of the taps. The maximum value is 5'd23.
    Bits:  2:0  TxDrvHLev(rw) - Transmit Amplitude control signal. Used to define the full-scale maximum swing of the driver. 000=Not Supported, 001=1070mVdiff-pkpk (Default), 010=1140mVdiff-pkpk, 011=1200mVdiff-pkpk, 100=1260mVdiff-pkpk, 101=1310mVdiff-pkpk, 110=1350mVdiff-pkpk, 111=1400mVdiff-pkpk6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL(_x) (0x00000015 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL 0x0000e015
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_LEVN(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_LEVN_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_HLEV(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_HLEV_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
    Bits:  5:4  TxDrvLevNm2(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 2'h3.
    Bits:  3:0  TxDrvLevNm1(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 4'h9.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL2(_x) (0x00000016 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL2 0x0000e016
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM2(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM1(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
    Bits:  4:3  TxDrvSlew(rw) - TX driver Slew Rate control:00 - 31ps ,01 - 33ps,10 - 68ps,11 - 170ps
    Bits:  2:0  TxDrvLevNP1(rw) - Defines the total number of driver units allocated to the first pre-cursor (C-1) tap. The maximum value for C-1 is 3'h6.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL3(_x) (0x00000017 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL3 0x0000e017
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_SLEW(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_SLEW_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_LEVNP1(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_LEVNP1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
    Bits:  5:3  RxCalEqDfepstapf3DB(rw) - DFE post-shaping tap 3dB frequency -3'b000: 684MHz -3'b001: 576MHz -3'b010: 514MHz -3'b011: 435MHz -3'b100: 354MHz -3'b101: 281MHz -3'b110: 199MHz -3'b111: 125MHz
    Bits:  2:0  RxCalEqDcGain(rw) - RX agc high frequency dc gain: -3'b000: -3dB -3'b001: -2.5dB -3'b010: -2dB -3'b011: -1.5dB -3'b100: -1dB -3'b101: -0.5dB -3'b110: -0dB -3'b111: 0.5dB
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE(_x) (0x00000018 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_GEN2 0x00008026
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE 0x0000e018
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DFEPSTAPF3DB(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DFEPSTAPF3DB_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DCGAIN(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DCGAIN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:3  RxCalEqDfeTap1Gain(rw) - DFE first tap gain control -4'b0000: +1mVpeak -4'b0001: +10mVpeak . . . -4'b0110: +55mVpeak -4'b0111: +64mVpeak -4'b1000: -1mVpeak -4'b1001: -10mVpeak . . -4'b1110: -55mVpeak -4'b1111: -64mVpeak
    Bits:  2:0  RxCalEqDfepStapGain(rw) - DFE post-shaping tap gain 0: no pulse shaping tap 1: -24mVpeak 2: -45mVpeak 3: -64mVpeak 4: -80mVpeak 5: -93mVpeak 6: -101mVpeak 7: -105mVpeak
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE2(_x) (0x00000019 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE2 0x0000e019
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFETAP1GAIN(_x) (((_x) & 0xf) << 3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFETAP1GAIN_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFEPSTAPGAIN(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFEPSTAPGAIN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  7:4  RxCalEqDfeTap3Gain(rw) - DFE third tap gain control -4'b0000: +0mVpeak -4'b0001: +7mVpeak . . . -4'b0110: +38mVpeak -4'b0111: +44mVpeak -4'b1000: -0mVpeak -4'b1001: -7mVpeak . . -4'b1110: -38mVpeak -4'b1111: -44mVpeak
    Bits:  3:0  RxCalEqDfetap2Gain(rw) - DFE second tap gain control -4'b0000: +0mVpeak -4'b0001: +9mVpeak . . . -4'b0110: +46mVpeak -4'b0111: +53mVpeak -4'b1000: -0mVpeak -4'b1001: -9mVpeak . . -4'b1110: -46mVpeak -4'b1111: -53mVpeak
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE3(_x) (0x0000001a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFE_TAP2_GAIN_LUP 0x0000802d
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE3 0x0000e01a
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP3GAIN(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP3GAIN_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP2GAIN(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP2GAIN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:4  RxCalEqLoFreqAgcGain(rw) - Low frequency agc gain (att) select -3'b000: Disconnected -3'b001: -18.5dB -3'b010: -12.5dB -3'b011: -9dB -3'b100: -6.5dB -3'b101: -4.5dB -3'b110: -2.9dB -3'b111: -1.6dB
    Bits:  3:0  RxCalEqDfetap4Gain(rw) - DFE fourth tap gain control -4'b0000: +0mVpeak -4'b0001: +6mVpeak . . . -4'b0110: +29mVpeak -4'b0111: +33mVpeak -4'b1000: -0mVpeak -4'b1001: -6mVpeak . . -4'b1110: -29mVpeak -4'b1111: -33mVpeak
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE4(_x) (0x0000001b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFE_TAP4_GAIN_LUP 0x0000802e
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE4 0x0000e01b
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_LOFREQAGCGAIN(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_LOFREQAGCGAIN_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_DFETAP4GAIN(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_DFETAP4GAIN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
    Bits:  7:3  RxCalEqHiFreqAgcCap(rw) - High frequency agc boost control Min d0: Boost ~4dB Max d31: Boost ~20dB
    Bits:  2:0  PcsRxEqPreCalCodeSel(rw) - Provides a RX Equalizer Pre-Hint, prior to beginning adaptive equalization Please refer to Datasheet for a description of what backplane ranges the RX-Hint values are intended to support.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZE(_x) (0x0000001c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZE 0x0000e01c
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_RXCALEQ_HIFREQAGCCAP(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_RXCALEQ_HIFREQAGCCAP_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_PCSRXEQ_PRECAL_CODE_SEL(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_PCSRXEQ_PRECAL_CODE_SEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  7:0  RxeqBestEyeVal(rw) - RX lane best eye point measurement result.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX(_x) (0x0000001d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX 0x0000e01d
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ2_RXEQ_BEST_EYE_VAL(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ2_RXEQ_BEST_EYE_VAL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  5:0  RxeqBestEyeVal2(rw) - RX lane best eye point measurement result.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX2(_x) (0x0000001e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX2 0x0000e01e
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ3_RXEQ_BEST_EYE_VAL2(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ3_RXEQ_BEST_EYE_VAL2_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
    Bits:  2    RxCalRoamEyeMeasInCycleEn(rw) - RX lane single roam eye point measurement start signal. If asserted, single measurement at fix XADJUST and YADJUST is started.
    Bits:  1    RxCalEyeDiagFsminStart(rw) - Enables an eye diagram measurement within the PHY. 0 - Disables eye diagram measurement 1 - Enables eye diagram measurement
    Bits:  0    PcsRxeqStart(rw) - Adaptive RX Equalization enable 0 - Disables adaptive RX equalization 1 - Enables adaptive RX equalization
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_EYE_DIAGRAM(_x) (0x0000001f + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_EYE_DIAGRAM 0x0000e01f
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_RXCALROAMEYEMEASIN_CYCLEEN BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_RXCALEYEDIAGFSMIN_START BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_PCSRXEQ_START BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
    Bits:  3    RxeqDone(rw) - PHY Adaptive Equalization stauts Signal 0-Indicatest adaptive equalization results are not valid for sampling 1-Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  2    RxCalRoamEyeMeasDone(rw) - PMA Adaptive Equalization Status Signal 0 - Indicates adaptive equalization results are not valid for sampling. 1 - Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  1    RxCalEyeDiagFsmErr(rw) - Eye diagram error signal. Indicates if the measurement was invalid because the eye diagram was interrupted by the link entering electrical idle. 0 - Indicates eye diagram is valid. 1- Indicates an error occurred, and the eye diagram measurement should be re-run.
    Bits:  0    RxCalEyeDiagFsmDone(rw) - PHY Eye diagram measurement status signal: 0 - Indicates eye diagram results are not valid for sampling, 1 - Indicates eye diagram is complete and results are valid for sampling.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_CTL(_x) (0x00000020 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_CTL 0x0000e020
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXEQ_DONE BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALROAMEYEMEASDONE BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALEYEDIAGFSM_ERR BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALEYEDIAGFSM_DONE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjust(rw) - 7-bit eye diagram time adjust control - 6-bits per UI - spans 2 UI
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_RX_CAL_ROAM_X_ADJUST_INIT(_x) (0x00000021 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_RX_CAL_ROAM_X_ADJUST_INIT 0x0000e021
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMXADJUST_RXCALROAMXADJUST(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMXADJUST_RXCALROAMXADJUST_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
    Bits:  5:0  RxCalRoamYAdjustInit(rw) - 6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT(_x) (0x00000022 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT 0x00008022
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT 0x0000e022
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMYADJUSTINIT_RXCALROAMYADJUST(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMYADJUSTINIT_RXCALROAMYADJUST_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
    Bits:  7:0  RxCalEyeDiagFsmEyeSumLo(rw) - Eye diagram status low bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_LO(_x) (0x00000023 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_LO 0x0000e023
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMLO_RXCALEYEDIAGFSM_EYESUM_LO(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMLO_RXCALEYEDIAGFSM_EYESUM_LO_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
    Bits:  5:0  RxCalEyeDiagFsmEyeSumHi(rw) - Eye diagram status hi bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_HI(_x) (0x00000024 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_HI 0x0000e024
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMHI_RXCALEYEDIAGFSM_EYESUM_HI(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMHI_RXCALEYEDIAGFSM_EYESUM_HI_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
    Bits:  7:0  RxCalRoamEyeMeasAcc(rw) - RX lane single roam eye point measurement result. If 0, eye is open at current XADJUST and YADJUST settings
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX(_x) (0x00000025 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX2(_x) (0x00000026 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX 0x0000e025
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX2 0x0000e026
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAEYEDIAG2_RXCALROAMEYEMEAS_ACC(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAEYEDIAG2_RXCALROAMEYEMEAS_ACC_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
    Bits:  3    RxScopeEn(rw) - Enable PHY to go into 'Scope' mode. Allows for outputting entire eye diagram data. Active High.
    Bits:  2    RxRoamXorBitSel(rw) - Eye diagram type select bit. 0=Select oscilloscope mode, 1=Select Bit Error Contour mode.
    Bits:  0    RxCdrFbDivSlipCycle(rw) - Rising edge detection enable to activate a feedback divider slip (ie, M+1) for one feedback cycle.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_ROAM_SCOPE(_x) (0x00000027 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_ROAM_SCOPE 0x0000e027
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXSCOPE_EN BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXROAM_XORBITSEL BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXCDRFBDIVSLIP_CYCLE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
    Bits:  6    RxSigDetOvrEnCdrLock2Data(rw) - Enable for RXSIGDET_OVRCDRLOCK2DATA: 0 = CDR uses its internal locked to data signal, 1 = CDR uses RXSIGDET_OVRCDRLOCK2DATA.
    Bits:  5    RxSigDetOvrCdrLock2Data(rw) - Controls when the CDR should switch to lock to data, or lock to reference: 0 = CDR is locked to reference, 1 = CDR is locked to data.
    Bits:  4    PcsTxDetectRxEn(rw) - TX lane TX detect RX enable. Active High.
    Bits:  3    PcsTxBeaConEn(rw) - TX lane beacon enable. Active High.
    Bits:  2    PcsRxDmeEn(rw) - Receiver DME mode enable. Active High
    Bits:  1    CmnClkGenMuxselDpmatxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1]
    Bits:  0    CmnClkGenMuxselDpmarxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1].
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CONTROL(_x) (0x00000028 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CONTROL 0x0000e028
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_RXSIGDET_OVRENCDRLOCK2DATA BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_RXSIGDET_OVRCDRLOCK2DATA BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSTX_DETECTRXEN BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSTX_BEACONEN BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSRX_DME_EN BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_CMNCLKGENMUXSEL_DPMATXREF BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_CMNCLKGENMUXSEL_DPMARXREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
    Bits:  0    PcsTxTxclkDiv2En(rw) - Enables divide by two on main Transmit clock in the PCS. Used in 32-bit mode.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_CLK_DIV2(_x) (0x00000029 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_CLK_DIV2 0x0000e029
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXCLKDIV_PCSTX_TXCLK_DIV2_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
    Bits:  1    CmnClkGenMuxSelDpmaTxRef(rw) - Selects reference clock to be used in TX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaRxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_CMN_CLK_GENMUX_SEL(_x) (0x0000002a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_CMN_CLK_GENMUX_SEL 0x0000e02a
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACMNCLKGENMUXSEL_CMNCLKGENMUXSEL_DPMATXREF BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACMNCLKGENMUXSEL_CMNCLKGENMUXSEL_DPMARXREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
    Bits:  4:2  RxSigdetRxtramdetDebounceCount(rw) - Controls signal detection max run-length 000 - 1* Rate/Reference Clock frequency 001 - 2* Rate/Reference Clock frequency 010 - 4* Rate/Reference Clock frequency 011 - 6* Rate/ Reference Clock frequency 100 - 8* Rate/ Reference Clock frequency 101 - 12* Rate/ Reference Clock frequency 110 - 16* Rate/ Reference Clock frequency 111 and above - 32* Rate/ Reference Clock frequency
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_TRAN_DET_COUNT(_x) (0x00000030 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_TRAN_DET_COUNT 0x0000e030
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTRANDET_RXSIGDET_RXTRAMDET_DEBOUNCE_COUNT(_x) (((_x) & 0x7) << 2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTRANDET_RXSIGDET_RXTRAMDET_DEBOUNCE_COUNT_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    PCSRxEqLocWrEn(rw) - PCSRXEQ* override enable. Active Low.
    Bits:  6    PcsRXBistLocWrEn(rw) - PCSRXBIST* override enable. Active Low.
    Bits:  5    PcsRxLocWrEn(rw) - PCSRX* override enable. Active Low.
    Bits:  4    PcsOutTxLocWrEn(rw) - PCSOUTTX* override enable. Active Low.
    Bits:  3    PcsoutRxLocWrEn(rw) - PCSOUTRX* override enable. Active Low.
    Bits:  2    LbLocWrEn(rw) - LB* override enable. Active Low.
    Bits:  1    LanePcsStateLocWREn(rw) - LANEPCSPSTATE* override enable. Active Low.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_OVERRIDE_EN(_x) (0x00000055 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_OVERRIDE_EN 0x0000e055
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRXEQ_LOCWREN BIT(7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRXBIST_LOCWREN BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRX_LOCWREN BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSOUTTX_LOCWREN BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSOUTRX_LOCWREN BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_LB_LOCWREN BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_LANEPCSPSTATE_LOCWREN BIT(1)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    RxCalRoamEyeAsInLocWrEn(rw) - RXCALROAMEYEMEASIN* override enable. Active Low.
    Bits:  6    RxCalOffSetLocWrEn(rw) - RXCALOFFSET* override enable. Active Low.
    Bits:  5    RxCalEyeDiaframSminLocWrEn(rw) - RXCALEYEDIAGFSMIN* override enable. Active Low.
    Bits:  4    RXcaleqLocRen(rw) - RXCALEQ* override enable. Active Low.
    Bits:  3    RxcalDutyLocwRen(rw) - RXCALDUTY* override enable. Active Low.
    Bits:  2    RstLanePcsSoftLowRen(rw) - RSTLANEPCSSOFT* override enable. Active Low.
    Bits:  1    PcsTxBistLocWrEn(rw) - PCSTXBIST* override enable. Active Low.
    Bits:  0    PcsTxLocWrEn(rw) - PCSTX* override enable. Active Low.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_LANE_OVERRIDE_EN(_x) (0x00000056 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_LANE_OVERRIDE_EN 0x0000e056
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALROAMEYEMEASIN_LOCWREN BIT(7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALOFFSET_LOCWREN BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALEYEDIAGFSMIN_LOCWREN BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALEQ_LOCWREN BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALDUTY_LOCWREN BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RSTLANEPCSSOFT_LOCWREN BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_PCSTXBIST_LOCWREN BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_PCSTX_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
    Bits:  6    TxDrvLocWrEn(rw) - TXDRV* override enable. Active Low.
    Bits:  5    TxCalTclkDutyLocWrEn(rw) - TXCALTCLKDUTY* override enable. Active Low.
    Bits:  2    RxCdrCalFoscLocWrEn(rw) - RXCDRCALFOSC* override enable. Active Low.
    Bits:  1    RxCalRoamyAdjustLocWrEn(rw) - RXCALROAMYADJUST* override enable. Active Low
    Bits:  0    RxCalRoamXadjustLocWrEn(rw) - RXCALROAMXADJUST* override enable. Active Low
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_TX_LANE_CAL(_x) (0x00000057 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_TX_LANE_CAL 0x0000e057
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_TXDRV_LOCWREN BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_TXCALTCLKDUTY_LOCWREN BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCDRCALFOSC_LOCWREN BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCALROAMYADJUST_LOCWREN BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCALROAMXADJUST_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscHscountMuxd0(rw) - CDR VCO calibration register.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL(_x) (0x00000065 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1(_x) (0x00000066 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL 0x0000e065
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1 0x0000e066
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACDRCAL_RXCDRCALFOSC_HSCOUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACDRCAL_RXCDRCALFOSC_HSCOUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD0(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD0(_x) (0x00000067 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD0 0x0000e067
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD0_RXCDRCALFOSCMEAS_COUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD0_RXCDRCALFOSCMEAS_COUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD1(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD1(_x) (0x00000068 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD1 0x0000e068
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD1_RXCDRCALFOSCMEAS_COUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD1_RXCDRCALFOSCMEAS_COUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD0(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 0. Used in 'Scope' mode.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD0(_x) (0x00000069 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD0 0x0000e069
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD0_RXCDRFBDIVSLIP_MDIV_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD0_RXCDRFBDIVSLIP_MDIV_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD1(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD1(_x) (0x0000006a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD1 0x0000e06a
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD1_RXCDRFBDIVSLIP_MDIV_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD1_RXCDRFBDIVSLIP_MDIV_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD0(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD0(_x) (0x0000006b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD0 0x0000e06b
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUX_RXCDRREFCK_REFDIV_MUXD0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUX_RXCDRREFCK_REFDIV_MUXD0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD1(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD1(_x) (0x0000006c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD1 0x0000e06c
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUXD1_RXCDRREFCK_REFDIV_MUXD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUXD1_RXCDRREFCK_REFDIV_MUXD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  7:4  RxCDRCalFoscCenterFreqPhintMuxD1(rw) -
    Bits:  3:0  RxCDRCalFoscCenterFreqPhintMuxD0(rw) -
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_CENTER_FREQ_MUXD1(_x) (0x0000006d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_CENTER_FREQ_MUXD1 0x0000e06d
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD1(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
    Bits:  3    TxCalClkDutyPreDivEnMuxD1(rw) -
    Bits:  2    TxCalClkDutyPreDivEnMuxD0(rw) -
    Bits:  1    RxCalDutyPreDivEnmuxd1(rw) -
    Bits:  0    RxCalDutyPreDivEnmuxd0(rw) -
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TXRX_CAL_DUTY_PRE_DIVEN(_x) (0x0000006e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TXRX_CAL_DUTY_PRE_DIVEN 0x0000e06e
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_TXCALTCLKDUTYPREDIVEN_MUXD1 BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_TXCALTCLKDUTYPREDIVEN_MUXD0 BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_RXCALDUTY_PREDIVEN_MUXD1 BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_RXCALDUTY_PREDIVEN_MUXD0 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
    Bits:  5    VpcsifEiosDetEn(rw) - EIOS detector enable.0 - Disabled.1 - Enabled. PCS continually monitors for EIOS ordered sets, and if detected, will de-assert ICTL_PIPE_RXVALID shortly after.No EIOS detected:CDR should remains in current state EOIS detected:CDR should lock to reference
    Bits:  4    VpcseqDebugstepEn(rw) - RX Equalization calibration debug control.
    Bits:  3    VpcSeqDebugEn(rw) - RX Equalization calibration debug enable.0 - Normal operation 1 - Debug mode. FSM will not change states until a positive edge of VPCSEQ_DEBUGSTEPEN is detected
    Bits:  2    VpcBistChkHold(rw) - PCS BIST check output error hold enable.0 - Do not hold error counter.1 - Hold error counter
    Bits:  1    vpcbistChkEn(rw) - PCS BIST check enable.0 - Normal operation 1 - Enable BIST check
    Bits:  0    VpcBistChkClr(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG(_x) (0x00001007 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG 0x0000f007
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSIF_EIOS_DET_EN BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSEQ_DEBUGSTEPEN BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSEQ_DEBUGEN BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_HOLD BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_EN BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_CLR BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
    Bits:  7:6  VpcsencTxForceErr(rw) - 8b10b encoder error insertion control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Error transmitted
    Bits:  5:4  VpcsencForcePosDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Disparity forced to positive
    Bits:  3:2  VpcsencForceNegDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte. 0 - Normal operation 1 - Disparity forced to negative.
    Bits:  1:0  VpcsBistDatamode(rw) - PCS BIST data mode selection. 0 - UDP 1 - prbs7 2 - prbs23 3 - prbs31
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG2(_x) (0x00001008 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG2 0x0000f008
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_TX_FORCE_ERR(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_TX_FORCE_ERR_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_POS_DISP(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_POS_DISP_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_NEG_DISP(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_NEG_DISP_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSBIST_DATA_MODE(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSBIST_DATA_MODE_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
    Bits:  6    VPcsBistGenInsertErr(rw) - PCS BIST generator insert error control. The LSB of the transmitted pattern is inverted on each positive edge of this signal
    Bits:  5:2  VPcsBistGenInitDelay(rw) - PCS BIST generator data pattern initial delay. Controls length of time for training pattern. If set to 0, training pattern is controlled by VPCSBIST_GEN_INIT_CTRL. Length of time is 2^ VPCSBIST_GEN_INIT_CTRL clock cycles, maximum 2^12
    Bits:  1    VPcsBistGenInitCtrl(rw) - PCS BIST generator initial pattern manual control. 0 - send training sequence 1 - send prbs / UDP Used only if VPCSBIST_GEN_INIT_DELAY = 0
    Bits:  0    VPcsBistGenEn(rw) - PCS BIST generator enable. 0 - Normal operation 1 - Enable BIST data send
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG3(_x) (0x00001009 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG3 0x0000f009
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INSERT_ERR BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_DELAY(_x) (((_x) & 0xf) << 2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_DELAY_of(_x) (((_x) >> 2) & 0xf)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_CTRL BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxPolarity(rw) - Override for ICTL_PIPE_RXPOLARITY_ pins
    Bits:  6    VpcsifOvrRxeqEval(rw) - Override for ICTL_PIPE_RXEQEVAL_ pins
    Bits:  5:4  VpcsifOvrrate(rw) - Override for ICTL_PIPE_RATE_ pins
    Bits:  3:2  VpcsifOvrPowerDown(rw) - Override for ICTL_PIPE_POWERDOWN_ pins
    Bits:  1:0  VpcsifOvrDataBusWidth(rw) - Override for ICTL_PIPE_DATABUSWIDTH_ pins
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG(_x) (0x0000100a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG 0x0000f00a
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RXPOLARITY BIT(7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RXEQEVAL BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RATE(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RATE_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_POWERDOWN(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_POWERDOWN_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_DATABUSWIDTH(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_DATABUSWIDTH_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
    Bits:  7:6  VpcsifOvrTxEleCidle(rw) - Override for ICTL_PIPE_TXELECIDLE_ pins
    Bits:  5    VpcsifOvrTxDtCtRxLb(rw) - Override for ICTL_PIPE_TXDTCTRX_LB_ pins
    Bits:  4    VpcsifOvrTxCompliance(rw) - Override for ICTL_PIPE_TXCOMPLIANCE_ pins
    Bits:  3    VpcsifOvrRxStandBy(rw) - Override for ICTL_PIPE_RXSTANDBY_ pins
    Bits:  2:0  VpcsifOvrRxPresentHint(rw) - Override for ICTL_PIPE_RXPRESETHINT_ pins
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG1(_x) (0x0000100b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG1 0x0000f00b
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXELECIDLE(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXELECIDLE_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXDTCTRX_LB BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXCOMPLIANCE BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXSTANDBY BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXPRESETHINT(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXPRESETHINT_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
    Bits:  4    VPcsLbNe(rw) - PIPE Near End loopback enable.0 - Normal operation 1 - TX to RX loopback enabled.
    Bits:  3    VpcsLbFe(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter.
    Bits:  2    VpcsifOvrRxEqClr(rw) - Override for RXEQCLR pins
    Bits:  1    VpcsifOvrRst(rw) - Override for IRST_PIPE_RST_Lx_B_A pins
    Bits:  0    VpcsifOvrBlockAlignControl(rw) - Override for VPCSIF_OVR_BLOCKALIGNCONTROL_ pins
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG2(_x) (0x0000100c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG2 0x0000f00c
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSLB_NE BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSLB_FE BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_RXEQCLR BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_RST BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_BLOCKALIGNCONTROL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxstandByEna(rw) - Enables VPCSIF_OVR_RXSTANDBY to override external pin
    Bits:  6    VpcsifOvrRxPresentHintena(rw) - Enables VPCSIF_OVR_RXPRESETHINT to override external pin
    Bits:  5    VpcsifOvrRxPolarityEna(rw) - Enables VPCSIF_OVR_RXPOLARITY to override external pin
    Bits:  4    VpcsifOvrRxEqEvalEna(rw) - Enables VPCSIF_OVR_RXEQEVAL to override external pin
    Bits:  3    VpcsifOvrRstEna(rw) - Enables VPCSIF_OVR_RST to override external pin
    Bits:  2    VpcsifOvrRateEna(rw) - Enables VPCSIF_OVR_RATE to override external pin
    Bits:  1    VpcsifOvrpowerDowmEna(rw) - Enables VPCSIF_OVR_POWERDOWN to override external pin
    Bits:  0    VpcsifOvrDataBusWidthEna(rw) - Enables VPCSIF_OVR_DATABUSWIDTH to override external pin
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG3(_x) (0x0000100d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG3 0x0000f00d
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXSTANDBY_ENA BIT(7)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXPRESETHINT_ENA BIT(6)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXPOLARITY_ENA BIT(5)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXEQEVAL_ENA BIT(4)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RST_ENA BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RATE_ENA BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_POWERDOWN_ENA BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_DATABUSWIDTH_ENA BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
    Bits:  3    VpcsifOvrtxEleCidleEna(rw) - Enables VPCSIF_OVR_TXELECIDLE to override external pin
    Bits:  2    VpcsifovrTxDtcTrxLbEna(rw) - Enables VPCSIF_OVR_TXDTCTRX_LB to override external pin
    Bits:  1    VpcsifOvrTxComplianceEna(rw) - Enables VPCSIF_OVR_TXCOMPLIANCE to override external pin
    Bits:  0    VpcsifOvrBlockAlignControlEna(rw) - Enables VPCSIF_OVR_BLOCKALIGNCONTROL to override external pin
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG4(_x) (0x0000100e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG4 0x0000f00e
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXELECIDLE_ENA BIT(3)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXDTCTRX_LB_ENA BIT(2)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXCOMPLIANCE_ENA BIT(1)
#define   NFP_PCIES_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_BLOCKALIGNCONTROL_ENA BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr - Address for aprobe common lane.
    Bits:  6:4  SerDesAprobeSynAddr(rw) - Address for Synth lane aprobe data.
    Bits:  3:0  SerDesAprobeCmnAddr(rw) - Address for common and Synth regulator lane aprobe data.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_APROBE_CMN_ADDR 0x00008000
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_SYN_ADDR(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_SYN_ADDR_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_CMN_ADDR(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_CMN_ADDR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr - Address for Synth lane aprobe data.
    Bits:  4:0  AprobeSynthAddr(rw) - Address for synth lane aprobe data.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_APROBE_SYNTH_ADDR 0x00008001
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_SYNTH_ADDR_APROBE_SYNTH_ADDR(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_SYNTH_ADDR_APROBE_SYNTH_ADDR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl - PMA Common/Synth lane control register
    Bits:  2    RstCmnPcsSoftSynth(rw) - Synth soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstByPassSynth(rw) - Common lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    CmnCtlPorHardRstByPassEnSynth(rw) - Common lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_CONTROL 0x00008002
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_RSTCMNPCSSOFT_SYNTH BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_CMNCTLPOR_HARDRSTBYPASS_SYNTH BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_CMNCTLPOR_HARDRSTBYPASSEN_SYNTH BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth - Common PCS pstate synth.
    Bits:  4:0  CmnPcsStateSynth(rw) - Synth power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_PCS_PSTATE_SYNTH 0x00008003
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_PCS_PSTATE_SYNTH_CMNPCSPSTATE_SYNTH(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_PCS_PSTATE_SYNTH_CMNPCSPSTATE_SYNTH_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl - Common Test Bus status reg 1.
    Bits:  2    SynthPpmLockStatus(rw) - Synth lane PLL lock status. 1 - Synth VCO is locked to reference clock.
    Bits:  1    PcsOutSynthStatus(rw) - Synth lane state transition status. Indicates when the Synth has completed a requested state transition. 0 - Synth has not completed its state change. 1 - Synth has completed its state change.
    Bits:  0    PcsOutSynthReady(rw) - Synth lane ready status signal. 0 - Synth is not ready for data transmission. 1 - Synth is ready for data transmission.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_TST_BUS1 0x00008004
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_SYNTHPPM_LOCKSTATUS BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_PCSOUTSYNTH_STATUS BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_PCSOUTSYNTH_READY BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl - Common and Synth refclock control.
    Bits:  4    CmnRefCkBufSynthRefEn(rw) - Synth reference clock enable. Active High.
    Bits:  3    CmnRefCkBufRxRefEn(rw) - RX lane reference clock enable. Active High.
    Bits:  2    CmnClkGenMuxSelPcsRef(rw) - Selects reference clock to be used in PCS. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  1    CmnClkGenMuxSelDpmaSynthRef(rw) - Selects reference clock to be used in Synth lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaCmnRef(rw) - Selects reference clock to be used in Common lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_SYNTH_REFCLK_CONTROL 0x00008005
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNREFCKBUF_SYNTHREFEN BIT(4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNREFCKBUF_RXREFEN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_PCSREF BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_DPMASYNTHREF BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_DPMACMNREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl - Common/synth reference clock control.
    Bits:  7:6  CmnrefCkDrvRefinpMacntl0(rw) - Reference clock output select for OCK_PMACNTLREF_0 DPMA clock. 00 - From bumps, ICK_CMNREF 01 - From SOC reference clock input, ICK_CMNREFSOC 10 - From right-side clock repeater network, ICK_REFBUSRIGHT 11 - From left-side clock repeater network, ICK_REFBUSLEFT
    Bits:  5:3  CmnRefCkdrvRefBusright2leftoutCtl(rw) -
    Bits:  2:0  CmnRefCkdrvRefBusleft2rightoutCtl(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_REFCLK_CTL 0x00008006
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFINPMACNTL0(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFINPMACNTL0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSRIGHT2LEFTOUTCTL(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSRIGHT2LEFTOUTCTL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSLEFT2RIGHTOUTCTL(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSLEFT2RIGHTOUTCTL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl - PMA Common/Synth Lane Reference Clock Control Register.
    Bits:  7:6  SynthRefCkRefInCtl(rw) - Synth lane reference clock select.
    Bits:  5:4  RxCdrRefCkRefClkSel(rw) - RX lane reference clock select..
    Bits:  3:2  CmnRefCkDrvRefSocEn(rw) - RX lane reference clock select..
    Bits:  1:0  CmnRefCkdrvRefInPmACntl1(rw) - Enable for OCK_REFSOC 0 - OCK_REFSOC disabled and output at logic 0 1 - OCK_REFSOC enabled and outputs a copy of ICK_PMA_REFSOC
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_REF_CLK_CTL 0x00008007
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_of(_x) (((_x) >> 6) & 0x3)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REF (0)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFSOC (1)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFBUSRIGHT (2)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFBUSLEFT (3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REF (0)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFSOC (1)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFBUSRIGHT (2)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFBUSLEFT (3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_of(_x) (((_x) >> 2) & 0x3)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REF (0)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFSOC (1)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFBUSRIGHT (2)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFBUSLEFT (3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFINPM_ACNTL1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFINPM_ACNTL1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 - PMA Common/Synth Lane Control Register
    Bits:  6    RxEqCalEn(rw) - RX Equalization FSM enable. Active High.
    Bits:  5    CmnPcsSynthCkBypassEn(rw) - PCS Synth lane clock bypass enable. Active High.
    Bits:  4:3  CmnPcsRdyStatModeSel(rw) - Controls how Synth, TX and RX lane ready and status signals are controlled.
    Bits:  2    CmnPcsTxEnable(rw) - Transmit datapath FIFO enable. Active High.
    Bits:  1    CmnPcsPcieGen3En(rw) - PCIe Gen3 rate change. 1 - Gen3 rate change is requested.
    Bits:  0    CmnPcieGen3LutSel(rw) - PCIe Gen3 rate change LUT select. Active High.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL3 0x00008008
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_RXEQ_CALEN BIT(6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSSYNTH_CKBYPASSEN BIT(5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSRDYSTATMODE_SEL(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSRDYSTATMODE_SEL_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCS_TXENABLE BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCS_PCIEGEN3_EN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCIEGEN3_LUTSEL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  CmnRefCkBufTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnCalTcTerm(rw) - Common lane termination calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_COMMON_SYNTH_CALIBRATION 0x00008009
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNREFCKBUF_TERMCAL(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNREFCKBUF_TERMCAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNCALTC_TERM(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNCALTC_TERM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  TxTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnBgBiasTermCal(rw) - Common lane termination calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_COMMON_SYNTH_CALIBRATION2 0x0000800a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_TXTERM_CAL(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_TXTERM_CAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_CMNBGBIAS_TERMCAL(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_CMNBGBIAS_TERMCAL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal - PMA Common/Synth Lane Register.
    Bits:  5:3  RxTermCal(rw) - RX lane termination calibration value.
    Bits:  2:0  RxDfeTermCal(rw) - RX lane DFE Termination calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_TERM_CAL 0x0000800b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXTERM_CAL(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXTERM_CAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXDFE_TERMCAL(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXDFE_TERMCAL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal - PMA Common/Synth Lane Calibration Register.
    Bits:  3:0  SynthCalFoscCenterFreq(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_CAL 0x0000800c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CAL_SYNTHCALFOSC_CENTER_FREQ(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CAL_SYNTHCALFOSC_CENTER_FREQ_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 - PMA Common/Synth Lane Control Register.
    Bits:  5    RxPowerSave(rw) - Power saving mode enable. Active High.Disables RX roam comparator.
    Bits:  3    PcsEn(rw) - Override for ICTL_PCS_EN_NT control pin.0 Multi Mode.1- PCIe Mode.
    Bits:  2    LbSynthPllFbclk2CdrRefclkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock..
    Bits:  1    LbSynthCdrDivclk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
    Bits:  0    CmnCalSynthLoopTimingEn(rw) - Looptiming mode enable. Active High. CDR recovered clock used as the reference clock for Synth VCO..
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL_4 0x0000800d
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_RXPOWERSAVE BIT(5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_PCS_EN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_LB_SYNTHPLLFBCLK2CDRREFCLKEN BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_LB_SYNTHCDRDIVCLK2TXEN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_CMNCALSYNTH_LOOPTIMING_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 - PMA Common/Synth Lane Status Registers.
    Bits:  3    MemTstEn(rw) - Memory test enable. Active High.
    Bits:  2:0  MemTstBitSel(rw) - Memory select signal test. The memory bit select will be passed to aprobe, if proper aprobe address is set.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS2 0x0000800e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_EN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_BITSEL(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_BITSEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl - PMA Common/Synth Lane Control Register.
    Bits:  4:3  RxLosDetThresh(rw) - LOS Detect Threshold Level.
    Bits:  2:0  RxElecidleSigDetThresh(rw) - Signal Detect Threshold Level.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL 0x0000800f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXLOSDET_THRESH(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXLOSDET_THRESH_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXELECIDLE_SIGDETTHRESH(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXELECIDLE_SIGDETTHRESH_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 - PMA Common/Synth Lane Status Register.
    Bits:  3    CmnTstBusSampleEn(rw) - TX lane soft reset. Active Low
    Bits:  2    CmnTstBusLmonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  1    CmnTstBusHmonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  0    CmnTstBusAsyncEn(rw) - Testbus read or write enable. Active High
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS3 0x00008010
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_SAMPLE_EN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_LMONITOR BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_HMONITOR BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_ASYNC_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 - PMA Common/Synth Lane Status Register.
    Bits:  7:0  CmnTstBus(rw) - PHY Testbus status registers. Section 3.2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_0 0x00008011
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_1 0x00008012
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_2 0x00008013
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_3 0x00008014
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_4 0x00008015
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALANESTATUS4_CMNTSTBUS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALANESTATUS4_CMNTSTBUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel - Testbus Select. Section 3.2.
    Bits:  7:0  CmnTstBusSel(rw) - Testbus select. Section 3.2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUSBUS_SEL 0x00008016
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUSBUS_SEL_CMNTSTBUS_SEL(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUSBUS_SEL_CMNTSTBUS_SEL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit - PMA Lane Transmit Control Register.
    Bits:  7:6  CmnTxPipeHlevLup2(rw) - TX IO driver HLEV look-up table entry
    Bits:  5:3  CmnTxPipeHlevlup1(rw) - TX IO driver HLEV look-up table entry.
    Bits:  2:0  CmnTxPipeHlevlup0(rw) - TX IO driver HLEV look-up table entry.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT 0x00008017
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP2(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP1(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 - PMA Lane Transmit Control Register.
    Bits:  4:0  CmnTxPipelevnLup0(rw) - TX IO driver LEVN look-up table entry 0
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT2 0x00008018
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT2_CMNTXPIPE_LEVN_LUP0(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT2_CMNTXPIPE_LEVN_LUP0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 - PMA Lane Transmit Control Register.
    Bits:  3:0  CmnTxPipelevnmLup0(rw) - TX IO driver LEVNM1 look-up table entry 0
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT3 0x00008019
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT3_CMNTXPIPE_LEVNM1_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT3_CMNTXPIPE_LEVNM1_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 - PMA Lane Transmit Control Register.
    Bits:  5:4  CmnTxPipeTxdrvSlewGen3(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen3. If PCIEMODE_SEL=1. This value is used if PCIEMODE_SEL=0.
    Bits:  3:2  CmnTxPipeTxdrvSlewGen2(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen2 If PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
    Bits:  1:0  CmnTxPipeTxdrvSlewGen1(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen1 if PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT4 0x0000801a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN3(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN3_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN2(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN2_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr - PMA Common Synth Lane Loop Back and BIST Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 - PMA Common Synth Lane Loop Back and BIST Register
    Bits:  7:0  RxBistCdrLock2DataPostAmble(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LOOP_BACK_BIST_RX_CDR 0x0000801b
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LOOP_BACK_BIST_RX_CDR2 0x0000801c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALOOPBACKBIST4_RXBIST_CDRLOCK2DATA_POSTAMBLE(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALOOPBACKBIST4_RXBIST_CDRLOCK2DATA_POSTAMBLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR - Delay in CDR switching from "locked to reference" mode to "locked to the data" mode.
    Bits:  7:0  RxLock2DataTmr(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXLOCK2DATATMR 0x0000801d
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXLOCK2DATATMR_RXLOCK2DATATMR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXLOCK2DATATMR_RXLOCK2DATATMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqCoarseIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_LANE_RX_EQ_ITER 0x0000801e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_ITER_RXEQ_COARSE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_ITER_RXEQ_COARSE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqFineIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_LANE_RX_EQ_FINE 0x0000801f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_FINE_RXEQ_FINE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_FINE_RXEQ_FINE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 - RX CDR VCO fine frequency cal value.
    Bits:  7:0  SynthCalFoscInt(rw) - Synth lane VCO fine frequency calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_LANE_CDR_CAL_FOSC_INT_LN1 0x00008020
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_LANE_CDR_CAL_FOSC_INT_LN1_SYNTHCALFOSC_INT(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_LANE_CDR_CAL_FOSC_INT_LN1_SYNTHCALFOSC_INT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjustInit(rw) - RX Roam eye X ADJUST initial value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_RX_CAL_ROAM_X_ADJUST_INIT 0x00008021
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_RX_CAL_ROAM_X_ADJUST_INIT_RXCALROAMXADJUST_INIT(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_RX_CAL_ROAM_X_ADJUST_INIT_RXCALROAMXADJUST_INIT_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 - Common block control 2.
    Bits:  7    TxWPtrInitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  6:4  TxWPtrInit(rw) - TX parallel data path initial read pointer.
    Bits:  3:2  TxDvrReplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver.
    Bits:  1    LbSynthPllFbClk2CdrRefClkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock.
    Bits:  0    LbSynthCdrDivClk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_BLOCK_CONTROL2 0x00008023
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT_DIV BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXDRV_REPLICAMODE(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXDRV_REPLICAMODE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_LB_SYNTHPLLFBCLK2CDRREFCLKEN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_LB_SYNTHCDRDIVCLK2TXEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup - PMA Common/Synth Lane Adaptive Equalizer Registers
    Bits:  7:0  RxEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0_NT_ inputs.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_LOOKUP 0x00008024
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_LOOKUP_RXEQ_LOOKUP_CODE_EN(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_LOOKUP_RXEQ_LOOKUP_CODE_EN_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode - PMA Lane Adaptive Equalizer Register.
    Bits:  2:0  RxEqLooklastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_LOOKUP_LASTCODE 0x00008025
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_LOOKUP_LASTCODE_RXEQ_LOOKUP_LASTCODE(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_LOOKUP_LASTCODE_RXEQ_LOOKUP_LASTCODE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
    Bits:  6:3  RxEqDfeTap1GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_DCGAIN_GEN2 0x00008027
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFETAP1GAIN_GEN2(_x) (((_x) & 0xf) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFETAP1GAIN_GEN2_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFEPSTAPGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFEPSTAPGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 - PCIe Gen2 Equalization control.
    Bits:  7:4  RxEqDfeTap3GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-3 tap gain.
    Bits:  3:0  RxEqDfeTap2GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_GAIN_GEN2 0x00008028
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP3GAIN_GEN2(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP3GAIN_GEN2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP2GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP2GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 - PCIe Gen2 Equalization control.
    Bits:  6:4  RxEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  3:0  RxEqDftAp4GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-4 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFETAP_GEN2 0x00008029
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_LOFREQAGCGAIN_GEN2(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_LOFREQAGCGAIN_GEN2_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_DFETAP4GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_DFETAP4GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq - PCIe Gen2 Equalization control.
    Bits:  4:0  RxEqHiFreqAgcCapGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_HI_FREQ_GEN2 0x0000802a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_HI_FREQ_GEN2_RXEQ_HIFREQAGCCAP_GEN2(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_HI_FREQ_GEN2_RXEQ_HIFREQAGCCAP_GEN2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain - Equalization calibration lookup table
    Bits:  5:3  RxEqDfepstapf3DBLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency
    Bits:  2:0  RxEqDcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DC_GAIN 0x0000802b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DFEPSTAPF3DB_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DFEPSTAPF3DB_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DCGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DCGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 - Equalization calibration lookup table
    Bits:  6:3  RxEqDfeTap1GainLup(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_GAIN_LUP0 0x0000802c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFETAP1GAIN_LUP(_x) (((_x) & 0xf) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFETAP1GAIN_LUP_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFEPSTAPGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFEPSTAPGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_HI_FREQ_LUP0 0x00008030
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_FDIV 0x00008031
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCMAXCODE1 0x00008032
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIV_SYNTHFDIV_FDIV(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIV_SYNTHFDIV_FDIV_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 - Synth Lane Control Register
    Bits:  2:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2 0x00008033
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2_SYNTHFDIV_FDIV(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2_SYNTHFDIV_FDIV_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscUpdateCycle(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE 0x00008035
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE_SYNTHFDIV_SSCUPDATECYCLE(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE_SYNTHFDIV_SSCUPDATECYCLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod - Synth Lane Control Register
    Bits:  3    SynthfDivStrFdiv(rw) -
    Bits:  2    SynthfDivSscIntfilterFreezeen(rw) -
    Bits:  1    SynthfDivSscGenEn(rw) -
    Bits:  0    SynthfDivmodulatorEn(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_MOD 0x00008036
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_STR_FDIV BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_SSCINTFILTERFREEZEEN BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_SSCGENEN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_MODULATOREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk - Synth PCS Div Clock0
    Bits:  7    SynthPcsPostDivClk0En(rw) - Synth PCS Post Div Clock Enable
    Bits:  6:0  SynthPcsPostDivClk0(rw) - Synth PCS Post Div Clock.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PCS_DIVCLK 0x00008037
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0EN BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat310(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_31_0 0x00008038
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_31_0 0x00008039
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_3_31_0 0x0000803a
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_4_31_0 0x0000803b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT_TXBIST_PAT_31_0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT_TXBIST_PAT_31_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat6332(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_63_32 0x0000803c
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_63_32 0x0000803d
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_3_63_32 0x0000803e
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_4_63_32 0x0000803f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT63_TXBIST_PAT_63_32(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT63_TXBIST_PAT_63_32_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat7964(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_79_64 0x00008040
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_79_64 0x00008041
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT79_TXBIST_PAT_79_64(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT79_TXBIST_PAT_79_64_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst - OOB Burst Time
    Bits:  7:0  TxBistOoBtBurst(rw) - OOB Burst Time (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTBURST 0x00008042
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTBURST_TXBIST_OOBTBURST(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTBURST_TXBIST_OOBTBURST_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComRstInit(rw) - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT 0x00008043
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT_TXBIST_OOBTCOMRSTINIT(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT_TXBIST_OOBTCOMRSTINIT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas - OOB ComSas Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComSas(rw) - OOB ComSas Idle Time - 1 (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTCOMSAS 0x00008044
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMSAS_TXBIST_OOBTCOMSAS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMSAS_TXBIST_OOBTCOMSAS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake - OOB ComWake Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComWake(rw) - OOB ComWake Idle Time - 1 (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_COMWAKE 0x00008045
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_COMWAKE_TXBIST_OOBTCOMWAKE(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_COMWAKE_TXBIST_OOBTCOMWAKE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode - PMA PCS common BIST mode Select.
    Bits:  5    TxBISTBitErrorEn(rw) - Single-Bit error detection enable (on posedge).
    Bits:  4:3  CmnPCSBISToobmode(rw) - OOB Mode (for 80-bit memory pattern mode only, ignored otherwise). 0 - Disabled 1 - OOB ComReset/ComInit 2 - OOB ComWake 3 - OOB ComSas.
    Bits:  2:0  CmnPCSBISTModeSel(rw) - Selects the transmit BIST mode: 0 - Uses the 80-bit internal memory pattern (w/ OOB) 1 - Uses a 27 PRBS pattern 2 - Uses a 223 PRBS pattern 3 - Uses a 231 PRBS pattern 4 - Uses a D10.2 clock pattern 5 - Uses a half rate 1100 clock pattern.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_PCS_BIST_MODE 0x00008050
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_TXBIST_BITERROR_EN BIT(5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_OOBMODE(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_OOBMODE_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_MODESEL(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_MODESEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS - PMA TX BIST PRBS mode.
    Bits:  3:2  TxDrvreplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver. 00 - No replica path enabled 01 - Replica path is 25% scaled version of the main driver 10 - Replica path is 50% scaled version of the main driver 11 - Replica path is 75% scaled version of the main driver
    Bits:  1    TxBistRxBistErrEn(rw) - Enable error generation from RXBIST to TXBIST. Once this is set to 1, TXBIST will generate an error bit, if RXBIST detects bit error.
    Bits:  0    TxBISTPrbsRst(rw) - PRBS Reset. Active low
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_BIST_PRBS 0x00008051
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXDRV_REPLICAMODE(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXDRV_REPLICAMODE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXBIST_RXBIST_ERR_EN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXBIST_PRBSRST BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl - PMA TX/RX termination control register.
    Bits:  5:4  TxTermCoarse(rw) - TX lane calibration impedance setting.
    Bits:  3:2  RxTermModeSelect(rw) - RX termination modes setting.
    Bits:  1:0  RxTermCoarse(rw) - RX lane calibration impedance setting.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RX_TX_TERM_CONTROL 0x00008052
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_85OHMS (0)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_100OHMS (1)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_120OHMS (2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_MODESELECT(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_MODESELECT_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_of(_x) (((_x) >> 0) & 0x3)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_85OHMS (0)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_100OHMS (1)
#define     NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_120OHMS (2)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR - PMA TX/RX Write Pointer.
    Bits:  7:6  TxWptrinitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  5:4  TxWptrInit(rw) - TX parallel data path initial read pointer.
    Bits:  0    RxAgcDccCoupleEn(rw) - RX AGC DC Couple Enable.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_TX_PTR 0x00008053
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_DIV(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_DIV_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_RXAGC_DCCOUPLEEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn - PMA PCS Common Overide Enable.
    Bits:  7    CmnPcsSynthLocWrEn(rw) - CMNPCSSYNTH* override enable. Active Low
    Bits:  6    CmnPcsRdyStatModeLocWrEn(rw) - CMNPCSRDYSTATMODE_* override enable. Active Low
    Bits:  5    CmnPcsPStateLocWrEn(rw) - CMNPCSPSTATE* override enable. Active Low.
    Bits:  4    CmnPcsBistLocWrEn(rw) - CMNPCSBIST* override enable. Active Low.
    Bits:  3    CmnPcsLocWrEn(rw) - CMNPCS* override enable. Active Low
    Bits:  2    CmnPcieGen3LocWrEn(rw) - CMNPCIEGEN3* override enable. Active Low.
    Bits:  1    CmncalTcLocWrEn(rw) - CMNCALTC* override enable. Active Low.
    Bits:  0    CmnBgBiasLocWrEn(rw) - CMNBGBIAS* override enable. Active Low.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_LANE_OVERRIDE_EN 0x0000805f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSSYNTH_LOCWREN BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSRDYSTATMODE_LOCWREN BIT(6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSPSTATE_LOCWREN BIT(5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSBIST_LOCWREN BIT(4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCS_LOCWREN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCIEGEN3_LOCWREN BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNCALTC_LOCWREN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNBGBIAS_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 - PMA PCS Common Overide Enable.
    Bits:  7    RxDfeLocWrEn(rw) - RXDFE* override enable. Active Low
    Bits:  6    RxCdrRefCkLocWrEn(rw) - RXCDRREFCK* override enable. Active Low
    Bits:  5    RstCmnPcsSoftLocWrEn(rw) - RSTCMNPCSSOFT* override enable. Active Low.
    Bits:  4    PcsOutSynthLocWrEn(rw) - PCSOUTSYNTH* override enable. Active Low.
    Bits:  3    PcslocWrEn(rw) - PCS_EN * override enable. Active Low
    Bits:  2    CmnTstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low.
    Bits:  1    CmnRefCkDrvLocwRen(rw) - CMNREFCKDRV* override enable. Active Low.
    Bits:  0    CmnRefCkBufLocWrEn(rw) - CMNREFCKBUF* override enable. Active Low.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_LANE_OVERRIDE_EN2 0x00008060
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RXDFE_LOCWREN BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RXCDRREFCK_LOCWREN BIT(6)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RSTCMNPCSSOFT_LOCWREN BIT(5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_PCSOUTSYNTH_LOCWREN BIT(4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_PCS_LOCWREN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNTSTBUS_LOCWREN BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNREFCKDRV_LOCWREN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNREFCKBUF_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm - PMA TX/RX Terminal Overide Enable.
    Bits:  4    TxTermLocWrEn(rw) - TXTERM* override enable. Active Low.
    Bits:  3    SynthRefClkLocWrEn(rw) - SYNTHREFCK * override enable. Active Low.
    Bits:  2    SynthFDivLocWrEn(rw) - SYNTHFDIV* override enable. Active Low.
    Bits:  1    SynthCalFoscLocWrEn(rw) - SYNTHCALFOSC* override enable. Active Low.
    Bits:  0    RxTermLocWrEn(rw) - RXTERM* override enable. Active Low
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_RX_TERM 0x00008061
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_TXTERM_LOCWREN BIT(4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHREFCK_LOCWREN BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHFDIV_LOCWREN BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHCALFOSC_LOCWREN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_RXTERM_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter - PMA Integral loop filter timer.
    Bits:  7:4  SynthDpifGainDelayCountPow2(rw) - Synth integral loop filter gear-shifting timer
    Bits:  3:0  RxDpifgainDelayCountPow2(rw) - RX integral loop filter gear-shifting timer
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_INTEGRAL_LOOP_FILTER 0x00008065
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_SYNTHDPIF_GAINDELAYCOUNT_POW2(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_SYNTHDPIF_GAINDELAYCOUNT_POW2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_RXDPIF_GAINDELAYCOUNT_POW2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_RXDPIF_GAINDELAYCOUNT_POW2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 - PMA timer used for termination resistance.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 - PMA timer used for termination resistance.
    Bits:  7:0  CmnCaltcMeasCount(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CALTCMEAS_COUNT1 0x00008066
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CALTCMEAS_COUNT2 0x00008067
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNCAL_CMNCALTCMEAS_COUNT(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNCAL_CMNCALTCMEAS_COUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0.
    Bits:  7:0  SynthCalFoscmeasCountMuxD0(rw) - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0 0x0000806a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0_SYNTHCALFOSCMEAS_COUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0_SYNTHCALFOSCMEAS_COUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 1.
    Bits:  7:0  SynthCalFoscmeasCountMuxD1(rw) - SYNTH VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1 0x0000806b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1_SYNTHCALFOSCMEAS_COUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1_SYNTHCALFOSCMEAS_COUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 0.
    Bits:  7:0  SynthFDivMdivMuxD0(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 0.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0 0x0000806c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0_SYNTHFDIV_MDIV_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0_SYNTHFDIV_MDIV_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 1.
    Bits:  7:0  SynthFDivMdivMuxD1(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1 0x0000806d
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1_SYNTHFDIV_MDIV_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1_SYNTHFDIV_MDIV_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle - PMA lane Calibration Register
    Bits:  7:1  CmnCalTcMeasPow2dlyCount1(rw) - Timer used in the termination resistance calibration configuration
    Bits:  0    CmnCalTcmeashalFCycleEn(rw) - Enables one of the termination resistance calibration configuration register.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CAL_CYCLE 0x0000806e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_POW2DLYCOUNT1(_x) (((_x) & 0x7f) << 1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_POW2DLYCOUNT1_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_HALFCYCLE_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY - PMA lane Calibration Register
    Bits:  4:0  CmnCalTcMeasPow2dlyCount2(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_PWR2DLY 0x0000806f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PWR2DLY_CMNCALTCMEAS_POW2DLYCOUNT2(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PWR2DLY_CMNCALTCMEAS_POW2DLYCOUNT2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr - PMA Rx Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr1(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_WATCHDOG_TMR 0x00008070
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_WATCHDOG_TMR_RXPPM_WATCHDOGTMR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_WATCHDOG_TMR_RXPPM_WATCHDOGTMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 - PMA Rx Watchdog Timer
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 - PMA Synth Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_WATCHDOG_TMR2 0x00008071
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_WATCHDOG_TMR2 0x00008073
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMAWATCHDOGTMR2_RXPPM_WATCHDOGTMR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMAWATCHDOGTMR2_RXPPM_WATCHDOGTMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register.
    Bits:  7:0  RxCDRCalFoscHscountMuxd1(rw) - CDR VCO calibration register.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1 0x00008072
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1_RXCDRCALFOSC_HSCOUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1_RXCDRCALFOSC_HSCOUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q0 0x00008074
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q0_CMNRPU_OFFSETUI_S0Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q0_CMNRPU_OFFSETUI_S0Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q1 0x00008075
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q1_CMNRPU_OFFSETUI_S0Q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q1_CMNRPU_OFFSETUI_S0Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q2(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q2 0x00008076
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q2_CMNRPU_OFFSETUI_S0Q2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q2_CMNRPU_OFFSETUI_S0Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q3(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q3 0x00008077
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q3_CMNRPU_OFFSETUI_S0Q3(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q3_CMNRPU_OFFSETUI_S0Q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q4(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q4 0x00008078
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q4_CMNRPU_OFFSETUI_S0Q4(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q4_CMNRPU_OFFSETUI_S0Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q5(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q5 0x00008079
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q5B 0x0000807a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET5_CMNRPU_OFFSETUI_S0Q5(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET5_CMNRPU_OFFSETUI_S0Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q6(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q6 0x0000807b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q6_CMNRPU_OFFSETUI_S0Q6(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q6_CMNRPU_OFFSETUI_S0Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q7(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSETS0Q7 0x0000807c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS0Q7_CMNRPU_OFFSETUI_S0Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS0Q7_CMNRPU_OFFSETUI_S0Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q0 0x0000807d
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q0_CMNRPU_OFFSETUI_S1Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q0_CMNRPU_OFFSETUI_S1Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q1 0x0000807e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q1_CMNRPU_OFFSETUI_S1Q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q1_CMNRPU_OFFSETUI_S1Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q2(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q2 0x0000807f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q2_CMNRPU_OFFSETUI_S1Q2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q2_CMNRPU_OFFSETUI_S1Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q3 0x00008080
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q3_2 0x00008081
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S3Q1 0x00008093
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET31_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET31_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q4(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q4 0x00008082
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q4_CMNRPU_OFFSETUI_S1Q4(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q4_CMNRPU_OFFSETUI_S1Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q5(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q5 0x00008083
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q5_CMNRPU_OFFSETUI_S1Q5(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q5_CMNRPU_OFFSETUI_S1Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q6(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q6 0x00008084
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q6_2 0x00008085
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET61_CMNRPU_OFFSETUI_S1Q6(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET61_CMNRPU_OFFSETUI_S1Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSETS1Q7 0x00008086
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS1Q7_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS1Q7_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q0 0x00008087
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q0_CMNRPU_OFFSETUI_S2Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q0_CMNRPU_OFFSETUI_S2Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q1 0x00008088
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q1_CMNRPU_OFFSETUI_S2Q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q1_CMNRPU_OFFSETUI_S2Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q2(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q2 0x00008089
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q2_CMNRPU_OFFSETUI_S2Q2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q2_CMNRPU_OFFSETUI_S2Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q3(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q3 0x0000808a
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q3_2 0x0000808b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET32_CMNRPU_OFFSETUI_S2Q3(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET32_CMNRPU_OFFSETUI_S2Q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q4(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q4 0x0000808c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q4_CMNRPU_OFFSETUI_S2Q4(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q4_CMNRPU_OFFSETUI_S2Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q5(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q5 0x0000808d
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q5_2 0x0000808e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET52_CMNRPU_OFFSETUI_S2Q5(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET52_CMNRPU_OFFSETUI_S2Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q6(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q6 0x0000808f
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q6_2 0x00008090
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET62_CMNRPU_OFFSETUI_S2Q6(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET62_CMNRPU_OFFSETUI_S2Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q7 0x00008091
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q7_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q7_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S3Q0 0x00008092
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S3Q0_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S3Q0_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS4q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S4Q0 0x00008094
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S4Q0_2 0x00008095
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET40_CMNRPU_OFFSETUI_S4Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET40_CMNRPU_OFFSETUI_S4Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount2(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CAL_ROAM_COUNT2 0x00008096
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT2_RXCALROAMEYEMEAS_COUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT2_RXCALROAMEYEMEAS_COUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount1(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CAL_ROAM_COUNT1 0x00008097
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT1_RXCALROAMEYEMEAS_COUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT1_RXCALROAMEYEMEAS_COUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAModDiv - PMA lane Control Register.
    Bits:  7:4  SynthfbDivModdiv(rw) -
    Bits:  3:0  RxCdrFbDivModDiv(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_MOD_DIV 0x00008098
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_SYNTHFBDIV_MODDIV(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_SYNTHFBDIV_MODDIV_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_RXCDRFBDIV_MODDIV(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_RXCDRFBDIV_MODDIV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode - PMA lane Reference Control Register.
    Bits:  6:1  SynthrefCkRefDivMuxD0(rw) - Synth VCO Reference clock divider.
    Bits:  0    PcieModeSel(rw) - PCI Express Mode or Multi Standard Select.0 - PMA enters multi-standard mode (including PCIe Gen3). Direct pin interface controls for TXEQ. RXEQ performed through memory registers.1 - PMA enters PCIe mode only. Direct pin interface controls for PCIe Gen 3. Look up tables for PCIe Gen1 / Gen2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_PCIE_MODE 0x00008099
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_SYNTHREFCK_REFDIV_MUXD0(_x) (((_x) & 0x3f) << 1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_SYNTHREFCK_REFDIV_MUXD0_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_PCIEMODE_SEL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 - PMA lane Reference Control Register.
    Bits:  5:0  SynthrefCkRefDivMuxD1(rw) - Synth VCO Reference clock divider.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_REF_DIV_MUXD1 0x0000809a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_REF_DIV_MUXD1_SYNTHREFCK_REFDIV_MUXD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_REF_DIV_MUXD1_SYNTHREFCK_REFDIV_MUXD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust - PMA Common/Synth lane Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust - PMA Common/Synth lane Control Register.
    Bits:  3:2  RxDfebiasAdjustMuxd1(rw) -
    Bits:  1:0  RxDfebiasAdjustMuxd0(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_DFE_BIASADJUST 0x0000809b
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_HI_FREQ_BIASADJUST 0x0000809c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD1(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD0(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD0_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_COUNT 0x0000809d
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT_RXPPM_PPMDRIFTCOUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT_RXPPM_PPMDRIFTCOUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_COUNT2 0x0000809e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT2_RXPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT2_RXPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_MAX 0x0000809f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX_RXPPM_PPMDRIFTCOUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX_RXPPM_PPMDRIFTCOUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_MAX2 0x000080a0
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX2_RXPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX2_RXPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX 0x000080a1
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX_SYNTHPPM_PPMDRIFTCOUNT(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX_SYNTHPPM_PPMDRIFTCOUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2 0x000080a2
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2_SYNTHPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2_SYNTHPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12 0x000080a3
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12_SYNTHPPM_PPMDRIFTMAX(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12_SYNTHPPM_PPMDRIFTMAX_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22 0x000080a4
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22_SYNTHPPM_PPMDRIFTMAX2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22_SYNTHPPM_PPMDRIFTMAX2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE 0x000080aa
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE1 0x000080ab
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIVSSC_SYNTHFDIV_SSCSTEPSIZE(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIVSSC_SYNTHFDIV_SSCSTEPSIZE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 - Synth Lane Control Register
    Bits:  0    SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE2 0x000080ac
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE2_SYNTHFDIV_SSCSTEPSIZE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg - PCS Lane Status Register.
    Bits:  5    TstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low
    Bits:  3    TstBusLMonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  2    TstBusHMonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  1    TstBusAsyncEn(rw) - Testbus read or write enable. Active high
    Bits:  0    MemTstEn(rw) - Memory test enable. Active High
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG 0x00009000
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_LOCWREN BIT(5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_LMONITOR BIT(3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_HMONITOR BIT(2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_ASYNC_EN BIT(1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_MEMTST_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b - PCS Lane Status Register .
    Bits:  7:0  TstBus(rw) - PHY Testbus status registers. Section 3.2
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG2 0x00009001
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS 0x00009002
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS2 0x00009003
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS3 0x00009004
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS4 0x00009005
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS4B 0x00009006
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2_TSTBUS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2_TSTBUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 - PCS Common/Synth Lane Loopback and BIST Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
    Bits:  7:0  VpcBistGenSkpDelay(rw) - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSBIST_GEN_SKP_DELAY1 0x00009007
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSBIST_GEN_SKP_DELAY2 0x00009008
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2VPC_VPCSBIST_GEN_SKP_DELAY(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2VPC_VPCSBIST_GEN_SKP_DELAY_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 - PCS BIST generator UDP pattern. LSB is transmitted first.
    Bits:  7:0  VpcsBistUdp(rw) - PCS BIST generator UDP pattern. LSB is transmitted first..
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP1 0x00009009
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP2 0x0000900a
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP3 0x0000900b
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP4 0x0000900c
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP5 0x0000900d
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP6 0x0000900e
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP7 0x0000900f
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP8 0x00009010
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2UDP_VPCSBIST_UDP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2UDP_VPCSBIST_UDP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:3  VPcsEBufEmpty(rw) - Elastic buffer empty threshold
    Bits:  2:0  VPcsBistGenSkpCnt(rw) - PCS BIST generator SKP insertion count control. Number of SKP ordered sets to insert per delay cycle.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG 0x00009011
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSEBUF_EMPTY(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSEBUF_EMPTY_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSBIST_GEN_SKP_CNT(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSBIST_GEN_SKP_CNT_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:5  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
    Bits:  4:0  VPcsEbufFullM0(rw) - Elastic buffer full threshold, PCIe Gen1 and PCIe Gen2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG1 0x00009012
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M1(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M1_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M0(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7    VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:2  VPcsEBufRdThresholdM0(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen1 and PCIe Gen2.
    Bits:  1:0  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG2 0x00009013
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M1 BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M0(_x) (((_x) & 0x1f) << 2)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M0_of(_x) (((_x) >> 2) & 0x1f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_FULL_M1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_FULL_M1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  3:0  VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG3 0x00009014
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG3_VPCSEBUF_RD_THRESHOLD_M1(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG3_VPCSEBUF_RD_THRESHOLD_M1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:0  VPcsEqCoarseiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG 0x00009016
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_RUN_MASK BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG1 0x00009017
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG13 0x00009023
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ2_VPCSEQ_COARSE_RUN_MASK(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ2_VPCSEQ_COARSE_RUN_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:1  VPcsEqCoarseStep(rw) - RX Equalization calibration coarse mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
    Bits:  0    VpcsEqClrValsEn(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2 0x00009018
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_COARSE_STEP(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_COARSE_STEP_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_CLR_VALS_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  2:0  VPcsEqDcGainGen2(rw) - PCIe Gen2 Equalization control - AGC high frequency gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3 0x00009019
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_LOFREQAGCGAIN_GEN2(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_LOFREQAGCGAIN_GEN2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_DCGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_DCGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHoFreqAgcGainGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGaingen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4 0x0000901a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_HIFREQAGCCAP_GEN2(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_HIFREQAGCCAP_GEN2_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_DFEPSTAPGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_DFEPSTAPGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG5 0x0000901b
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG6 0x0000901c
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP2GAIN_GEN2(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP2GAIN_GEN2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP1GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP1GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqDefpstapf3DbLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency.
    Bits:  2:0  VPcsEqDefpstapf3DbGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE 3dB cut-off frequency.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7 0x0000901d
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC low frequency gain.
    Bits:  2:0  VpcseqDcgainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8 0x0000901e
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_LOFREQAGCGAIN_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_LOFREQAGCGAIN_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_DCGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_DCGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHiFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9 0x0000901f
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_HIFREQAGCCAP_LUP0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_HIFREQAGCCAP_LUP0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_DFEPSTAPGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_DFEPSTAPGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10 0x00009020
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP2GAIN_LUP0(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP2GAIN_LUP0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP1GAIN_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP1GAIN_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap4GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-4 tap gain.
    Bits:  3:0  VPcsEqDfetap3GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-3 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11 0x00009021
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP4GAIN_LUP0(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP4GAIN_LUP0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP3GAIN_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP3GAIN_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqFineRunMask(rw) - Equalization calibration fine mode variable control mask. Each bit controls whether or not an equalization variable will be swept during fine mode.0 - Do not sweep variable 1 - Sweep variable Bit 0 - AGC low frequency gain Bit 1 - AGC high frequency gain Bit 2 - AGC AC Boost Bit 3 - Pulse-shaping DFE 3dB cut-off frequency Bit 4 - Pulse-shaping DFE gain Bit 5 - Discontinuity DFE N-1 tap gain.
    Bits:  6:0  VPcsEqFineiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12 0x00009022
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_RUN_MASK BIT(7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:5  VPcsEqLookupLastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
    Bits:  4:0  VpcsEqFineStep(rw) - RX Equalization calibration fine mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14 0x00009024
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_LOOKUP_LASTCODE(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_LOOKUP_LASTCODE_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_FINE_STEP(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_FINE_STEP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0 inputs.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG15 0x00009025
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG16 0x00009026
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG17 0x00009027
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ14_VPCSEQ_LOOKUP_CODE_EN(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ14_VPCSEQ_LOOKUP_CODE_EN_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:0  VPcsEqTimeOut(rw) - .
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18 0x00009028
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18_VPCSEQ_TIMEOUT(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18_VPCSEQ_TIMEOUT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  Vpcsg2SymaAlignUnLockCnt(rw) - PCIe Gen2 symbol alignment unlock control. Symbol aligner will not move to unlocked mode until this number of incorrectly aligned ALIGN symbols. Setting this value to 0 will result in the symbol aligner not being able to move out of the locked mode until either electrical idle or reset.
    Bits:  3:0  Vpcsg2SymaAlignLockCnt(rw) - PCIe Gen2 symbol alignment lock control. Symbol aligner will not move to locked mode until this number of correctly aligned ALIGN symbols are seen. Setting this value to 0 will result in the symbol aligner not attempting to align.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19 0x00009029
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_UNLOCK_CNT(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_UNLOCK_CNT_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_LOCK_CNT(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_LOCK_CNT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:1  VpcsEqLoFreqacGainSwpmin(rw) - .
    Bits:  0    PcsClkCtrl(rw) - .
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20 0x0000902a
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_VPCSEQ_LOFREQAGCGAIN_SWPMIN(_x) (((_x) & 0x7) << 1)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_VPCSEQ_LOFREQAGCGAIN_SWPMIN_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_PCSCLK_CTRL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSFASTPLL - PCS Fast PLL Register.
    Bits:  0    Fastpll(rw) - Fast Pll to lock the VCO
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_FASTPLL 0x0000902b
#define   NFP_PCIES_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_FASTPLL_FAST_PLL BIT(0)

#else /* NFP6000_LONGNAMES */

/*----------------------------------------------------------------
  Register: PCIeToCppExpansionBAR[3]_[8] - PCIe to CPP Translation BAR for Physical Function BAR X
    Bits: 31:29 MapType(rw) - Map Type
    Bits: 28:27 LengthSelect(rw) - Used to select the weighting of the CPP length field.
    Bits: 26:23 Target_BaseAddress(rw) - MapType 0, 1 and 2 this field specifies TargetID, otherwise upper portion of Base Address.
    Bits: 22:21 Token_BaseAddress(rw) - MapType 0 and 1 this field specifies CPP Token, otherwise upper portion of Base Address.
    Bits: 20:16 Action_BaseAddress(rw) - MapType 0 this field specifies Action, otherwise upper portion of Base Address.
    Bits: 15:0  BaseAddress(rw) - Base address. Each mapping uses a varying number of bits, always starting at the most significant bit. Remaining least significant bits are ignored.
*/
#define NFP_PCIE_BAR_PCIeToCppExpansionBAR(_x, _y)           (0x00000000 + (0x20 * ((_x) & 0x3)) + (0x4 * ((_y) & 0x7)))
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType(_x)     (((_x) & 0x7) << 29)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_of(_x)  (((_x) >> 29) & 0x7)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_FIXED (0)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_BULK  (1)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_TARGET (2)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_GENERAL (3)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_EXPLICIT0 (4)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_EXPLICIT1 (5)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_EXPLICIT2 (6)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_MapType_EXPLICIT3 (7)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_LengthSelect(_x) (((_x) & 0x3) << 27)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_LengthSelect_of(_x) (((_x) >> 27) & 0x3)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_LengthSelect_32BIT (0)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_LengthSelect_64BIT (1)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBAR_LengthSelect_0BYTE (3)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_Target_BaseAddress(_x) (((_x) & 0xf) << 23)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_Target_BaseAddress_of(_x) (((_x) >> 23) & 0xf)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_Token_BaseAddress(_x) (((_x) & 0x3) << 21)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_Token_BaseAddress_of(_x) (((_x) >> 21) & 0x3)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_Action_BaseAddress(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_Action_BaseAddress_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_BaseAddress(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBAR_BaseAddress_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PCIeToCppExpansionBARVf[3] - PCIe to CPP Translation for Virtual Function BARs
    Bits: 31:30 LengthSelect(rw) - Used to select the weighting of the CPP length field.
    Bits: 29:26 Target(rw) - Specifies Target ID.
    Bits: 25:24 Token(rw) - Specifies CPP Token.
    Bits: 18:0  BaseAddress(rw) - Base address. Uses a varying number of base address bits, depending on the VF BAR aperture, always starting at the most significant bit of the BaseAddr. Remaining least significant bits of BaseAddr are ignored.
*/
#define NFP_PCIE_BAR_PCIeToCppExpansionBARVf(_x)             (0x00000060 + (0x4 * ((_x) & 0x3)))
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_LengthSelect(_x) (((_x) & 0x3) << 30)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_LengthSelect_of(_x) (((_x) >> 30) & 0x3)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBARVf_LengthSelect_32BIT (0)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBARVf_LengthSelect_64BIT (1)
#define     NFP_PCIE_BAR_PCIeToCppExpansionBARVf_LengthSelect_0BYTE (3)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_Target(_x)    (((_x) & 0xf) << 26)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_Target_of(_x) (((_x) >> 26) & 0xf)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_Token(_x)     (((_x) & 0x3) << 24)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_Token_of(_x)  (((_x) >> 24) & 0x3)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_BaseAddress(_x) (((_x) & 0x7ffff) << 0)
#define   NFP_PCIE_BAR_PCIeToCppExpansionBARVf_BaseAddress_of(_x) (((_x) >> 0) & 0x7ffff)
/*----------------------------------------------------------------
  Register: PCIeExplicitCmd[4]_[4]_PCIeExplicitCmdBar0 - PCIe to CPP Explicit Command BAR 0
    Bits: 31:30 SignalType(rw) - Signal type to expect from CPP target. Set 1 bit for each signal expected. If 0 this implies the PCIe component should expect no CPP signal and will complete the PCIe request immediately, potentially before the CPP request completes. This use case is reserved for 3rd party Mastering and Signaling. Ensure all Explicit CPP Command fields (Data/Signal Master, Data/Signal Ref) are configured properly for the intended Master/Target combination.
    Bits: 29:28 Token(rw) - CPP command token
    Bits: 23:0  Address(rw) - This field represents bits [39:22] of CPP command address, starting with the msb and truncating unnecessary lsb bits, depending on the size of the aperture. See figure 2.2 for more detail of address bit muxing.
*/
#define NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0(_x, _y) (0x00000080 + (0x40 * ((_x) & 0x3)) + (0x10 * ((_y) & 0x3)))
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0_SignalType(_x) (((_x) & 0x3) << 30)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0_SignalType_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0_Token(_x) (((_x) & 0x3) << 28)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0_Token_of(_x) (((_x) >> 28) & 0x3)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0_Address(_x) (((_x) & 0xffffff) << 0)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBar0_Address_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: PCIeExplicitCmd[4]_[4]_PCIeExplicitCmdBAR1 - PCIe to CPP Explicit Command BAR 1
    Bits: 30:24 SignalRef(rw) - CPP command signal reference, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
    Bits: 23:14 DataMaster(rw) - CPP command data master, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
    Bits: 13:0  DataRef(rw) - CPP command data reference, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
*/
#define NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1(_x, _y) (0x00000084 + (0x40 * ((_x) & 0x3)) + (0x10 * ((_y) & 0x3)))
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1_SignalRef(_x) (((_x) & 0x7f) << 24)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1_SignalRef_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1_DataMaster(_x) (((_x) & 0x3ff) << 14)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1_DataMaster_of(_x) (((_x) >> 14) & 0x3ff)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1_DataRef(_x) (((_x) & 0x3fff) << 0)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR1_DataRef_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: PCIeExplicitCmd[4]_[4]_PCIeExplicitCmdBAR2 - PCIe to CPP Explicit Command BAR 2
    Bits: 31:28 Target(rw) - CPP command target ID
    Bits: 27:23 Action(rw) - CPP Command Action Encoding
    Bits: 22:18 Length(rw) - CPP command length
    Bits: 17:10 ByteMask(rw) - CPP command byte mask
    Bits:  9:0  SignalMaster(rw) - CPP command signal master, when SigType is 0, otherwise RESERVED BY HW, dont care for SW
*/
#define NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2(_x, _y) (0x00000088 + (0x40 * ((_x) & 0x3)) + (0x10 * ((_y) & 0x3)))
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_Target(_x) (((_x) & 0xf) << 28)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_Target_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_Action(_x) (((_x) & 0x1f) << 23)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_Action_of(_x) (((_x) >> 23) & 0x1f)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_Length(_x) (((_x) & 0x1f) << 18)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_Length_of(_x) (((_x) >> 18) & 0x1f)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_ByteMask(_x) (((_x) & 0xff) << 10)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_ByteMask_of(_x) (((_x) >> 10) & 0xff)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_SignalMaster(_x) (((_x) & 0x3ff) << 0)
#define   NFP_PCIE_BAR_PCIeExplicitCmd_PCIeExplicitCmdBAR2_SignalMaster_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: CPPToPCIeBAR[8] - CPP to PCIe translation BAR
    Bits: 31:30 MapType(rw) - Map Type
    Bits: 29    OverrideRID(rw) - Set if, Requester ID in PCIe TLP header should be overridden.
    Bits: 28:21 RequesterID(rw) - Value for Requester ID (if OverrideRID is set) to use in PCIe TLP header. Otherwise ignored.
    Bits: 20:0  Address(rw) - PCIe address bits [47:27] for 32-bit mode and [20:8] map to bits [47:35] for 40-bit mode. NOTE: For Type-1 Configuration cycles to the PCIe bus, bit [3] of this field should be set to '1'.
*/
#define NFP_PCIE_BAR_CPPToPCIeBAR(_x)                        (0x00000180 + (0x4 * ((_x) & 0x7)))
#define   NFP_PCIE_BAR_CPPToPCIeBAR_MapType(_x)              (((_x) & 0x3) << 30)
#define   NFP_PCIE_BAR_CPPToPCIeBAR_MapType_of(_x)           (((_x) >> 30) & 0x3)
#define     NFP_PCIE_BAR_CPPToPCIeBAR_MapType_MEM            (0)
#define     NFP_PCIE_BAR_CPPToPCIeBAR_MapType_IO             (1)
#define     NFP_PCIE_BAR_CPPToPCIeBAR_MapType_CFG            (2)
#define   NFP_PCIE_BAR_CPPToPCIeBAR_OverrideRID              BIT(29)
#define   NFP_PCIE_BAR_CPPToPCIeBAR_RequesterID(_x)          (((_x) & 0xff) << 21)
#define   NFP_PCIE_BAR_CPPToPCIeBAR_RequesterID_of(_x)       (((_x) >> 21) & 0xff)
#define   NFP_PCIE_BAR_CPPToPCIeBAR_Address(_x)              (((_x) & 0x1fffff) << 0)
#define   NFP_PCIE_BAR_CPPToPCIeBAR_Address_of(_x)           (((_x) >> 0) & 0x1fffff)
/*----------------------------------------------------------------
  Register: DmaCmdInsertHiToPCI - Insert legacy-format command into HiToPCIe DMA command queue or Write pointer for HiToPCIe DMA command queue
  Register: DmaCmdInsertMedToPCI - Insert legacy-format command into MedToPCIe DMA command queue or Write pointer for MedToPCIe DMA command queue
  Register: DmaCmdInsertLoToPCI - Insert legacy-format command into LoToPCIe DMA command queue or Write pointer for LoToPCIe DMA command queue
  Register: DmaCmdInsertHiFrmPCI - Insert legacy-format command into HiFrmPCIe DMA command queue or Write pointer for HiFrmPCIe DMA command queue
  Register: DmaCmdInsertMedFrmPCI - Insert legacy-format command into MedFrmPCIe DMA command queue or Write pointer for MedFrmPCIe DMA command queue
  Register: DmaCmdInsertLoFrmPCI - Insert legacy-format command into LoFrmPCIe DMA command queue or Write pointer for LoFrmPCIe DMA command queue
    Bits: 127:116 XferLength(wo) - Size of transfer. Specified as number of bytes minus 1.
    Bits: 115:108 RequesterID(wo) - 8-bit Requester ID to use (if OverrideRID is set)
    Bits: 107    OverrideRID(wo) - If set the value of RequesterID will be used for the Requester-ID in the PCIe TLP header
    Bits: 106:104 TransClass(wo) - Indicates the transaction class.
    Bits: 103:96 PCIeAddressHi(wo) - Upper 8 bits of 40-bit PCIe address
    Bits: 95:64 PCIeAddressLo(wo) - Lower 32 bits of 40-bit PCIe address
    Bits: 63:62 ModeSelect(wo) - Selects what type of signaling, AutoPush or Event, or indicates data Gather Mode, see DMA Mode field
    Bits: 61:46 DmaMode(wo) - Indicates Signal or Event to generate on completed command or can be DMA descriptor extension for Data Gather support, depending on ModeSelect bits
    Bits: 45:44 CppToken(wo) - Specifies CPP Token to be used when issuing CPP commands for the transfer.
    Bits: 43:40 DmaConfigRegIndex(wo) - Index register for CPP transaction. Used to index from which register to get supplemental DMA descriptor configuration. NOTE: lsb chooses low or high half of 4B configuration register
    Bits: 39:32 CPPAddressHi(wo) - Upper 8-bits of 40-bit CPP bus address
    Bits: 31:0  CPPAddressLo(wo) - Lower 32-bits of 40-bit CPP bus address
*/
#define NFP_PCIE_DMA_DmaCmdInsertHiToPCI                     0x00000000
#define NFP_PCIE_DMA_DmaCmdInsertMedToPCI                    0x00000020
#define NFP_PCIE_DMA_DmaCmdInsertLoToPCI                     0x00000040
#define NFP_PCIE_DMA_DmaCmdInsertHiFrmPCI                    0x00000060
#define NFP_PCIE_DMA_DmaCmdInsertMedFrmPCI                   0x00000080
#define NFP_PCIE_DMA_DmaCmdInsertLoFrmPCI                    0x000000a0
#define   NFP_PCIE_DMA_DMADescrLegacy_XferLength(_x)         (((_x) & 0xfff) << 116)
#define   NFP_PCIE_DMA_DMADescrLegacy_XferLength_of(_x)      (((_x) >> 116) & 0xfff)
#define   NFP_PCIE_DMA_DMADescrLegacy_RequesterID(_x)        (((_x) & 0xff) << 108)
#define   NFP_PCIE_DMA_DMADescrLegacy_RequesterID_of(_x)     (((_x) >> 108) & 0xff)
#define   NFP_PCIE_DMA_DMADescrLegacy_OverrideRID            BIT_ULL(107)
#define   NFP_PCIE_DMA_DMADescrLegacy_TransClass(_x)         (((_x) & 0x7) << 104)
#define   NFP_PCIE_DMA_DMADescrLegacy_TransClass_of(_x)      (((_x) >> 104) & 0x7)
#define   NFP_PCIE_DMA_DMADescrLegacy_PCIeAddressHi(_x)      (((_x) & 0xff) << 96)
#define   NFP_PCIE_DMA_DMADescrLegacy_PCIeAddressHi_of(_x)   (((_x) >> 96) & 0xff)
#define   NFP_PCIE_DMA_DMADescrLegacy_PCIeAddressLo(_x)      (((_x) & 0xffffffff) << 64)
#define   NFP_PCIE_DMA_DMADescrLegacy_PCIeAddressLo_of(_x)   (((_x) >> 64) & 0xffffffff)
#define   NFP_PCIE_DMA_DMADescrLegacy_ModeSelect(_x)         (((_x) & 0x3) << 62)
#define   NFP_PCIE_DMA_DMADescrLegacy_ModeSelect_of(_x)      (((_x) >> 62) & 0x3)
#define     NFP_PCIE_DMA_DMADescrLegacy_ModeSelect_0         (0)
#define     NFP_PCIE_DMA_DMADescrLegacy_ModeSelect_1         (1)
#define     NFP_PCIE_DMA_DMADescrLegacy_ModeSelect_2         (2)
#define     NFP_PCIE_DMA_DMADescrLegacy_ModeSelect_3         (3)
#define   NFP_PCIE_DMA_DMADescrLegacy_DmaMode(_x)            (((_x) & 0xffff) << 46)
#define   NFP_PCIE_DMA_DMADescrLegacy_DmaMode_of(_x)         (((_x) >> 46) & 0xffff)
#define     NFP_PCIE_DMA_DMADescrLegacy_DmaMode_0            (0)
#define     NFP_PCIE_DMA_DMADescrLegacy_DmaMode_1            (1)
#define     NFP_PCIE_DMA_DMADescrLegacy_DmaMode_2            (2)
#define     NFP_PCIE_DMA_DMADescrLegacy_DmaMode_3            (3)
#define   NFP_PCIE_DMA_DMADescrLegacy_CppToken(_x)           (((_x) & 0x3) << 44)
#define   NFP_PCIE_DMA_DMADescrLegacy_CppToken_of(_x)        (((_x) >> 44) & 0x3)
#define   NFP_PCIE_DMA_DMADescrLegacy_DmaConfigRegIndex(_x)  (((_x) & 0xf) << 40)
#define   NFP_PCIE_DMA_DMADescrLegacy_DmaConfigRegIndex_of(_x) (((_x) >> 40) & 0xf)
#define   NFP_PCIE_DMA_DMADescrLegacy_CPPAddressHi(_x)       (((_x) & 0xff) << 32)
#define   NFP_PCIE_DMA_DMADescrLegacy_CPPAddressHi_of(_x)    (((_x) >> 32) & 0xff)
#define   NFP_PCIE_DMA_DMADescrLegacy_CPPAddressLo(_x)       (((_x) & 0xffffffff) << 0)
#define   NFP_PCIE_DMA_DMADescrLegacy_CPPAddressLo_of(_x)    (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: DMADescrConfig0 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig1 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig2 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig3 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig4 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig5 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig6 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
  Register: DMADescrConfig7 - Specifies additional DMA configuration information to supplement incoming descriptor, CPP Target, 32- or 64-bit target, CPP Token, padding depth, and PCIe descriptor attribute.
    Bits: 28    SignalOnlyOdd(rw) - Specifies if DMA is a signal-only, no data transferred.
    Bits: 27:26 EndPaddingOdd(rw) - Specifies if 0-padding should be inserted at the end of DMA transfers to PCIe.
    Bits: 25:24 StartPaddingOdd(rw) - Specifies if 0-padding should be inserted in front of DMA transfers to PCIe.
    Bits: 23    IdBasedOrderingOdd(rw) - Specifies if ID-Based Ordering attribute should be set for PCIe request.
    Bits: 22    RelaxedOrderingOdd(rw) - Specifies if Relaxed Ordering attribute should be set for PCIe request.
    Bits: 21    NoSnoopOdd(rw) - Specifies if No Snoop attribute should be set for PCIe request.
    Bits: 20    Target64bitOdd(rw) - Specifies if CPP Target is 64-bit or 32-bit, default is 32-bit.
    Bits: 19:16 CppTargetIDOdd(rw) - Selects CPP Target to be used for DMA.
    Bits: 12    SignalOnlyEven(rw) - Specifies if DMA is a signal-only, no data transferred.
    Bits: 11:10 EndPaddingEven(rw) - Specifies if 0-padding should be inserted in front of DMA transfers to PCIe.
    Bits:  9:8  StartPaddingEven(rw) - Specifies if 0-padding should be inserted in front of DMA transfers to PCIe.
    Bits:  7    IdBasedOrderingEven(rw) - Specifies if ID-Based Ordering attribute should be set for PCIe request.
    Bits:  6    RelaxedOrderingEven(rw) - Specifies if Relaxed Ordering attribute should be set for PCIe request.
    Bits:  5    NoSnoopEven(rw) - Specifies if No Snoop attribute should be set for PCIe request.
    Bits:  4    Target64bitEven(rw) - CPP target is 64-bit. Set if target supports 64-bit transactions, or cleared if target only supports 32-bit transaction.
    Bits:  3:0  CppTargetIDEven(rw) - Selects CPP Target to be used for DMA.
*/
#define NFP_PCIE_DMA_DMADescrConfig0                         0x000000c0
#define NFP_PCIE_DMA_DMADescrConfig1                         0x000000c4
#define NFP_PCIE_DMA_DMADescrConfig2                         0x000000c8
#define NFP_PCIE_DMA_DMADescrConfig3                         0x000000cc
#define NFP_PCIE_DMA_DMADescrConfig4                         0x000000d0
#define NFP_PCIE_DMA_DMADescrConfig5                         0x000000d4
#define NFP_PCIE_DMA_DMADescrConfig6                         0x000000d8
#define NFP_PCIE_DMA_DMADescrConfig7                         0x000000dc
#define   NFP_PCIE_DMA_DMADescrConfig_SignalOnlyOdd          BIT(28)
#define   NFP_PCIE_DMA_DMADescrConfig_EndPaddingOdd(_x)      (((_x) & 0x3) << 26)
#define   NFP_PCIE_DMA_DMADescrConfig_EndPaddingOdd_of(_x)   (((_x) >> 26) & 0x3)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingOdd_DISABLED (0)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingOdd_16B    (1)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingOdd_64B    (2)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingOdd_128B   (3)
#define   NFP_PCIE_DMA_DMADescrConfig_StartPaddingOdd(_x)    (((_x) & 0x3) << 24)
#define   NFP_PCIE_DMA_DMADescrConfig_StartPaddingOdd_of(_x) (((_x) >> 24) & 0x3)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingOdd_DISABLED (0)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingOdd_16B  (1)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingOdd_64B  (2)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingOdd_128B (3)
#define   NFP_PCIE_DMA_DMADescrConfig_IdBasedOrderingOdd     BIT(23)
#define   NFP_PCIE_DMA_DMADescrConfig_RelaxedOrderingOdd     BIT(22)
#define   NFP_PCIE_DMA_DMADescrConfig_NoSnoopOdd             BIT(21)
#define   NFP_PCIE_DMA_DMADescrConfig_Target64bitOdd         BIT(20)
#define   NFP_PCIE_DMA_DMADescrConfig_CppTargetIDOdd(_x)     (((_x) & 0xf) << 16)
#define   NFP_PCIE_DMA_DMADescrConfig_CppTargetIDOdd_of(_x)  (((_x) >> 16) & 0xf)
#define   NFP_PCIE_DMA_DMADescrConfig_SignalOnlyEven         BIT(12)
#define   NFP_PCIE_DMA_DMADescrConfig_EndPaddingEven(_x)     (((_x) & 0x3) << 10)
#define   NFP_PCIE_DMA_DMADescrConfig_EndPaddingEven_of(_x)  (((_x) >> 10) & 0x3)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingEven_DISABLED (0)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingEven_16B   (1)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingEven_64B   (2)
#define     NFP_PCIE_DMA_DMADescrConfig_EndPaddingEven_128B  (3)
#define   NFP_PCIE_DMA_DMADescrConfig_StartPaddingEven(_x)   (((_x) & 0x3) << 8)
#define   NFP_PCIE_DMA_DMADescrConfig_StartPaddingEven_of(_x) (((_x) >> 8) & 0x3)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingEven_DISABLED (0)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingEven_16B (1)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingEven_64B (2)
#define     NFP_PCIE_DMA_DMADescrConfig_StartPaddingEven_128B (3)
#define   NFP_PCIE_DMA_DMADescrConfig_IdBasedOrderingEven    BIT(7)
#define   NFP_PCIE_DMA_DMADescrConfig_RelaxedOrderingEven    BIT(6)
#define   NFP_PCIE_DMA_DMADescrConfig_NoSnoopEven            BIT(5)
#define   NFP_PCIE_DMA_DMADescrConfig_Target64bitEven        BIT(4)
#define   NFP_PCIE_DMA_DMADescrConfig_CppTargetIDEven(_x)    (((_x) & 0xf) << 0)
#define   NFP_PCIE_DMA_DMADescrConfig_CppTargetIDEven_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: DMAQStatToPCI0 - Queue status for ToPCIe DMA command queues
  Register: DMAQStatFrmPCI0 - Queue status for FrmPCIe DMA command queues
    Bits: 31:24 DmaLoQueAvail(ro) - DMA Low priority queue space available
    Bits: 23:16 DmaLoQueWrPtr(ro) - DMA Low priority queue write pointer
    Bits: 11    ParityError(rw1c) - When non-zero, A parity error was detected while reading from the DMA Descriptor memory.
    Bits: 10    DisDmaDescParity(rw) - When set, DMA Descriptor memory parity checking is disabled.
    Bits:  9    HaltOnPfDmaError(rw) - When set, DMA Engine will halt on a physical function access error.
    Bits:  8    HaltOnRdParityError(rw) - When set, DMA Engine will halt on a DMA Descriptor parity error.
    Bits:  7:6  DmaError(rw1c) - When non-zero, DMA had an error. Bit 0 indicates a virtual function access error. Bit 1 indicates a physical function access error.
    Bits:  5:4  QueueOverflow(rw1c) - When non-zero, DMA queue descriptor is written to a full queue.
    Bits:  3    HaltOnFull(rw) - When non-zero, DMA Engine will halt when full
    Bits:  2    HighQueueStop(rw) - Set when the DMA engine High Queue is stopped due to an error, or if DMA engine is explicitly stopped by writing a 1 to this bit.
    Bits:  1    MediumQueueStop(rw) - Set when the DMA engine Medium Queue is stopped due to an error, or if DMA engine is explicitly stopped by writing a 1 to this bit.
    Bits:  0    LowQueueStop(rw) - Set when the DMA engine Low Queue is stopped due to an error, or if DMA engine is explicitly stopped by writing a 1 to this bit.
*/
#define NFP_PCIE_DMA_DMAQStatToPCI0                          0x000000e0
#define NFP_PCIE_DMA_DMAQStatFrmPCI0                         0x000000e8
#define   NFP_PCIE_DMA_DMAQueueStatus0_DmaLoQueAvail(_x)     (((_x) & 0xff) << 24)
#define   NFP_PCIE_DMA_DMAQueueStatus0_DmaLoQueAvail_of(_x)  (((_x) >> 24) & 0xff)
#define   NFP_PCIE_DMA_DMAQueueStatus0_DmaLoQueWrPtr(_x)     (((_x) & 0xff) << 16)
#define   NFP_PCIE_DMA_DMAQueueStatus0_DmaLoQueWrPtr_of(_x)  (((_x) >> 16) & 0xff)
#define   NFP_PCIE_DMA_DMAQueueStatus0_ParityError           BIT(11)
#define   NFP_PCIE_DMA_DMAQueueStatus0_DisDmaDescParity      BIT(10)
#define   NFP_PCIE_DMA_DMAQueueStatus0_HaltOnPfDmaError      BIT(9)
#define   NFP_PCIE_DMA_DMAQueueStatus0_HaltOnRdParityError   BIT(8)
#define   NFP_PCIE_DMA_DMAQueueStatus0_DmaError(_x)          (((_x) & 0x3) << 6)
#define   NFP_PCIE_DMA_DMAQueueStatus0_DmaError_of(_x)       (((_x) >> 6) & 0x3)
#define   NFP_PCIE_DMA_DMAQueueStatus0_QueueOverflow(_x)     (((_x) & 0x3) << 4)
#define   NFP_PCIE_DMA_DMAQueueStatus0_QueueOverflow_of(_x)  (((_x) >> 4) & 0x3)
#define     NFP_PCIE_DMA_DMAQueueStatus0_QueueOverflow_NoOvfl (0)
#define     NFP_PCIE_DMA_DMAQueueStatus0_QueueOverflow_LowOvfl (1)
#define     NFP_PCIE_DMA_DMAQueueStatus0_QueueOverflow_MedOvfl (2)
#define     NFP_PCIE_DMA_DMAQueueStatus0_QueueOverflow_HighOvfl (3)
#define   NFP_PCIE_DMA_DMAQueueStatus0_HaltOnFull            BIT(3)
#define   NFP_PCIE_DMA_DMAQueueStatus0_HighQueueStop         BIT(2)
#define   NFP_PCIE_DMA_DMAQueueStatus0_MediumQueueStop       BIT(1)
#define   NFP_PCIE_DMA_DMAQueueStatus0_LowQueueStop          BIT(0)
/*----------------------------------------------------------------
  Register: DMAQStatToPCI1 - Queue status for ToPCIe DMA command queues
  Register: DMAQStatFrmPCI1 - Queue status for FrmPCIe DMA command queues
    Bits: 31:24 DmaHiQueAvail(ro) - DMA High priority queue space available
    Bits: 23:16 DmaHiQueWrPtr(ro) - DMA High priority queue write pointer
    Bits: 15:8  DmaMedQueAvail(ro) - DMA Medium priority queue space available
    Bits:  7:0  DmaMedQueWrPtr(ro) - DMA Medium priority queue write pointer
*/
#define NFP_PCIE_DMA_DMAQStatToPCI1                          0x000000e4
#define NFP_PCIE_DMA_DMAQStatFrmPCI1                         0x000000ec
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaHiQueAvail(_x)     (((_x) & 0xff) << 24)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaHiQueAvail_of(_x)  (((_x) >> 24) & 0xff)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaHiQueWrPtr(_x)     (((_x) & 0xff) << 16)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaHiQueWrPtr_of(_x)  (((_x) >> 16) & 0xff)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaMedQueAvail(_x)    (((_x) & 0xff) << 8)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaMedQueAvail_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaMedQueWrPtr(_x)    (((_x) & 0xff) << 0)
#define   NFP_PCIE_DMA_DMAQueueStatus1_DmaMedQueWrPtr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: DMADbgReg0 - Debug register 0, used to indirectly read/write descriptor memories.
    Bits: 31    DmaByteMaskSwapEna(rw) - Note: This field is only present in the B0 stepping of the device. Set to enable the FromPcie DMA CPP Write logic to swap the CPP Command Byte Mask bits when a token value of 2 is selected in the FromPcie DMA descriptor.
*/
#define NFP_PCIE_DMA_DMADbgReg0                              0x000000f0
#define   NFP_PCIE_DMA_DMADbgReg0_DmaByteMaskSwapEna         BIT(31)
/*----------------------------------------------------------------
  Register: DMACntrlConfig - DMA performance configure, cpp and pcie request issue rates
    Bits: 31:28 DmaFrmCppRate(rw) - DMA FromPCIe rate at which requests are issued to CPP
    Bits: 27:24 DmaToPcieRate(rw) - DMA ToPCIe rate at which requests are issued to CPP
    Bits: 23:20 DmaToCppRate(rw) - DMA ToPCIe rate at which requests are issued to PCIe
    Bits: 19:16 DmaFrmPcieRate(rw) - DMA FromPCIe rate at which requests are issued to PCIe
    Bits: 15:12 DmaFrmPcieIssueLoad(rw) - DMA FromPCIe issue rate load value. Controls rate at which requests are issued to PCIe
*/
#define NFP_PCIE_DMA_DMACntrlConfig                          0x000000f8
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaFrmCppRate(_x)      (((_x) & 0xf) << 28)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaFrmCppRate_of(_x)   (((_x) >> 28) & 0xf)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaToPcieRate(_x)      (((_x) & 0xf) << 24)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaToPcieRate_of(_x)   (((_x) >> 24) & 0xf)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaToCppRate(_x)       (((_x) & 0xf) << 20)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaToCppRate_of(_x)    (((_x) >> 20) & 0xf)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaFrmPcieRate(_x)     (((_x) & 0xf) << 16)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaFrmPcieRate_of(_x)  (((_x) >> 16) & 0xf)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaFrmPcieIssueLoad(_x) (((_x) & 0xf) << 12)
#define   NFP_PCIE_DMA_DMACntrlConfig_DmaFrmPcieIssueLoad_of(_x) (((_x) >> 12) & 0xf)
/*----------------------------------------------------------------
  Register: DMAtoPCIeHi - DMA toPCIe Command Legacy Descriptor High Priority Queue
  Register: DMAtoPCIeMed - DMA toPCIe Command Legacy Descriptor Medium Priority Queue
  Register: DMAtoPCIeLow - DMA toPCIe Command Legacy Descriptor Low Priority Queue
  Register: DMAfromPCIeHi - DMA fromPCIe Command Legacy Descriptor High Priority Queue
  Register: DMAfromPCIeMed - DMA fromPCIe Command Legacy Descriptor Medium Priority Queue
  Register: DMAfromPCIeLow - DMA fromPCIe Command Legacy Descriptor Low Priority Queue
    Bits: 127:116 XferLength(wo) - Size of transfer. Specified as number of bytes minus 1.
    Bits: 115:108 RequesterID(wo) - 8-bit Requester ID to use (if OverrideRID is set)
    Bits: 107    OverrideRID(wo) - If set the value of RequesterID will be used for the Requester-ID in the PCIe TLP header
    Bits: 106:104 TransClass(wo) - Indicates the transaction class.
    Bits: 103:96 PCIeAddressHi(wo) - Upper 8 bits of 40-bit PCIe address
    Bits: 95:64 PCIeAddressLo(wo) - Lower 32 bits of 40-bit PCIe address
    Bits: 63:62 ModeSelect(wo) - Selects what type of signaling, AutoPush or Event, or indicates data Gather Mode, see DMA Mode field
    Bits: 61:46 DmaMode(wo) - Indicates Signal or Event to generate on completed command or can be DMA descriptor extension for Data Gather support, depending on ModeSelect bits
    Bits: 45:44 CppToken(wo) - Specifies CPP Token to be used when issuing CPP commands for the transfer.
    Bits: 43:40 DmaConfigRegIndex(wo) - Index register for CPP transaction. Used to index from which register to get supplemental DMA descriptor configuration. NOTE: lsb chooses low or high half of 4B configuration register
    Bits: 39:32 CPPAddressHi(wo) - Upper 8-bits of 40-bit CPP bus address
    Bits: 31:0  CPPAddressLo(wo) - Lower 32-bits of 40-bit CPP bus address
*/
#define NFP_PCIE_DMADESC_DMAtoPCIeHi                         0x00000000
#define NFP_PCIE_DMADESC_DMAtoPCIeMed                        0x00000800
#define NFP_PCIE_DMADESC_DMAtoPCIeLow                        0x00001000
#define NFP_PCIE_DMADESC_DMAfromPCIeHi                       0x00002000
#define NFP_PCIE_DMADESC_DMAfromPCIeMed                      0x00002800
#define NFP_PCIE_DMADESC_DMAfromPCIeLow                      0x00003000
#define   NFP_PCIE_DMADESC_DMADescrLegacy_XferLength(_x)     (((_x) & 0xfff) << 116)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_XferLength_of(_x)  (((_x) >> 116) & 0xfff)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_RequesterID(_x)    (((_x) & 0xff) << 108)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_RequesterID_of(_x) (((_x) >> 108) & 0xff)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_OverrideRID        BIT_ULL(107)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_TransClass(_x)     (((_x) & 0x7) << 104)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_TransClass_of(_x)  (((_x) >> 104) & 0x7)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_PCIeAddressHi(_x)  (((_x) & 0xff) << 96)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_PCIeAddressHi_of(_x) (((_x) >> 96) & 0xff)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_PCIeAddressLo(_x)  (((_x) & 0xffffffff) << 64)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_PCIeAddressLo_of(_x) (((_x) >> 64) & 0xffffffff)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_ModeSelect(_x)     (((_x) & 0x3) << 62)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_ModeSelect_of(_x)  (((_x) >> 62) & 0x3)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_ModeSelect_0     (0)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_ModeSelect_1     (1)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_ModeSelect_2     (2)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_ModeSelect_3     (3)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_DmaMode(_x)        (((_x) & 0xffff) << 46)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_DmaMode_of(_x)     (((_x) >> 46) & 0xffff)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_DmaMode_0        (0)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_DmaMode_1        (1)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_DmaMode_2        (2)
#define     NFP_PCIE_DMADESC_DMADescrLegacy_DmaMode_3        (3)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_CppToken(_x)       (((_x) & 0x3) << 44)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_CppToken_of(_x)    (((_x) >> 44) & 0x3)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_DmaConfigRegIndex(_x) (((_x) & 0xf) << 40)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_DmaConfigRegIndex_of(_x) (((_x) >> 40) & 0xf)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_CPPAddressHi(_x)   (((_x) & 0xff) << 32)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_CPPAddressHi_of(_x) (((_x) >> 32) & 0xff)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_CPPAddressLo(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_PCIE_DMADESC_DMADescrLegacy_CPPAddressLo_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeCompConfig0 - Configures operation mode for PCIe component
    Bits: 29    PCIeSerdesClkMuxSel(rw) - Selects Serdes clock
    Bits: 28    PCIeTargetComplIdEn(rw) - When set PCIe Target overrides Completer ID
    Bits: 25    PfBusMasterEnable(ro) - Physical Function status indicates can issue Master requests
    Bits: 24    ClrPciemHalmAriError(rw) - Clear the VF ARI Error status reg in PCIe Master
    Bits: 23    ClrDmaAriError(rw) - Clear the VF ARI Error status reg in DMA
    Bits: 22:20 PciemDMASramReadCredit(rw) - Sets the outstanding number of DMA reads to SRAM in increments of 8 with a starting offset of 7. Setting the value above 3 has no effect as the hardware limit of the credit tracker is set to 32. The minimum value of 0 equates to a credit limit of 7 requests.
    Bits: 19:12 PciemPciReadCredit(rw) - Controls the amout of outstanding PCIe read requests that can be issued. Value is in increments of 256 bytes. The minimum value that should be used is 4KB or 16(dec).
    Bits: 11    PcieMsgValid(rw1c) - Interrupt status bit that indicates a PCIe vendor defined message has been received. The message is stored in the PcieVendorMsgHeader and PcieVendorMsgData CSRs.
    Bits: 10    RC_mode_IO_CFG_write_CPL_rec(rw1c) - Pcie completed IO or Config Write operation.
    Bits:  9:8  InterruptOutSelect(rw) - Selects which interrupt pin legacy interrupts are mapped to.
    Bits:  7:6  PCIeLanes(rw) - Status of the number of active lanes.
    Bits:  5:4  GenEnable(rw) - Status of what PCIe generation Controller Core is configured
    Bits:  3    PciemWriteStatsEn(rw) - Enables the PCIe Master to count write data transmit cycles
    Bits:  2    PciemReadStatsEn(rw) - Enables the PCIe Master to count read data receive cycles
    Bits:  1    PCIeAddrMode(rw) - Configure whether PCIe transactions support 32-bit or 64-bit addressing.
    Bits:  0    CPPAddrMode(rw) - Configure whether to interpret the CPP address bits as 32-bit or 40-bit.
*/
#define NFP_PCIEX_COMPCFG_PCIeCompConfig0                    0x00000000
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeSerdesClkMuxSel BIT(29)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeSerdesClkMuxSel_SEL_LANE0_CLK (0 << 29)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeSerdesClkMuxSel_SEL_LANE7_CLK BIT(29)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeTargetComplIdEn BIT(28)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PfBusMasterEnable BIT(25)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_ClrPciemHalmAriError BIT(24)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_ClrDmaAriError   BIT(23)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PciemDMASramReadCredit(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PciemDMASramReadCredit_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PciemPciReadCredit(_x) (((_x) & 0xff) << 12)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PciemPciReadCredit_of(_x) (((_x) >> 12) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PcieMsgValid     BIT(11)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_RC_mode_IO_CFG_write_CPL_rec BIT(10)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_InterruptOutSelect(_x) (((_x) & 0x3) << 8)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_InterruptOutSelect_of(_x) (((_x) >> 8) & 0x3)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_InterruptOutSelect_INTA (0)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_InterruptOutSelect_INTB (1)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_InterruptOutSelect_INTC (2)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_InterruptOutSelect_INTD (3)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeLanes(_x)    (((_x) & 0x3) << 6)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeLanes_of(_x) (((_x) >> 6) & 0x3)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeLanes_X1   (0)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeLanes_X2   (1)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeLanes_X4   (2)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeLanes_X8   (3)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_GenEnable(_x)    (((_x) & 0x3) << 4)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_GenEnable_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_GenEnable_Gen1 (0)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_GenEnable_Gen2 (1)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_GenEnable_Gen3 (2)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PciemWriteStatsEn BIT(3)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PciemReadStatsEn BIT(2)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeAddrMode     BIT(1)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeAddrMode_32 (0 << 1)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_PCIeAddrMode_64 BIT(1)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig0_CPPAddrMode      BIT(0)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_CPPAddrMode_40 (0 << 0)
#define     NFP_PCIEX_COMPCFG_PCIeCompConfig0_CPPAddrMode_32 BIT(0)
/*----------------------------------------------------------------
  Register: PCIeCompConfig1 - Configures operation mode for PCIe component
    Bits: 31:24 PCIeTargetComplIdBus(rw) - Sets the Completer ID Bus number to be used when in RC Mode or when override set
    Bits: 23:16 PCIeTargetComplIdDevFunc(rw) - Sets the Completer ID Dev and Function numbers to be used when in RC Mode or when override set
    Bits: 15:8  PCIeMasterReqIdBus(rw) - Sets the Requester ID Bus number to be used when PCIe Master generates requests in RC Mode
    Bits:  7:0  PCIeMasterReqIdFunc(rw) - Sets the Requester ID Function number to be used when PCIe Master generates requests in RC Mode
*/
#define NFP_PCIEX_COMPCFG_PCIeCompConfig1                    0x00000004
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeTargetComplIdBus(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeTargetComplIdBus_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeTargetComplIdDevFunc(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeTargetComplIdDevFunc_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeMasterReqIdBus(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeMasterReqIdBus_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeMasterReqIdFunc(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig1_PCIeMasterReqIdFunc_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PCIeCompConfig2 - Configures operation mode for PCIe component
    Bits: 28:24 CppTargetSramReadCredit(rw) - Sets the number of outstanding read requests the CPP Target can make to the shared SRAM
    Bits: 10    CpptDisIntDataError(rw) - When set read data errors received from the internal SRAM or targets are masked to the CPP Target push data bus.
    Bits:  9    CpptDisPullDataError(rw) - When set write data errors received from the CPP Target Pull Data bus are masked to the internal SRAM or PCIE Master Interface, and writes to internal targets are dropped.
    Bits:  8    PciemDisIntDataError(rw) - When set DMA read data errors received from the internal SRAM are masked to the PCIE Master Interface.
    Bits:  7    PciemDisHalDataError(rw) - When set data errors received from the PCIe Master Completion interface are masked to the internal SRAM and CPP Target Push intf.
    Bits:  6    PcietDisIntDataError(rw) - When set read data errors received from the internal SRAM or targets are not masked to the PCIe Target Completion interface.
    Bits:  5    PcietDisHalDataError(rw) - When set write data errors received from the PCIe Target interface are masked to the internal SRAM and CPP Master interfaces, and writes to internal targets are dropped.
    Bits:  4:0  PcieTargetSramReadCredit(rw) - Sets the number of outstanding read requests the PCIe Target can make to the shared SRAM
*/
#define NFP_PCIEX_COMPCFG_PCIeCompConfig2                    0x00000008
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_CppTargetSramReadCredit(_x) (((_x) & 0x1f) << 24)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_CppTargetSramReadCredit_of(_x) (((_x) >> 24) & 0x1f)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_CpptDisIntDataError BIT(10)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_CpptDisPullDataError BIT(9)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_PciemDisIntDataError BIT(8)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_PciemDisHalDataError BIT(7)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_PcietDisIntDataError BIT(6)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_PcietDisHalDataError BIT(5)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_PcieTargetSramReadCredit(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig2_PcieTargetSramReadCredit_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: PCIeCompConfig3 - Configures operation mode for PCIe component
    Bits: 31:24 DmaAriInError(ro) - DMA ARI number that last had an error
    Bits: 23:21 PciemHalComplCode(ro) - PCIe Master HAL Completion code that is latched when PciemAccessError is asserted
    Bits: 20    DmaFromAccessErrorVf(ro) - DMA FromPCIe Virtual Function Access Error.
    Bits: 19    DmaFromAccessErrorPf(ro) - DMA FromPCIe Physical Function Access Error.
    Bits: 18    DmaFromDescrOvflHi(ro) - DMA FromPcie High Priority Descriptor Queue Overflow.
    Bits: 17    DmaFromDescrOvflMed(ro) - DMA FromPcie Medium Priority Descriptor Queue Overflow.
    Bits: 16    DmaFromDescrOvflLo(ro) - DMA FromPcie Low Priority Descriptor Queue Overflow.
    Bits: 15    DmaFrmRdParityError(ro) - DMA FrmPcie Descriptor memory read parity error
    Bits: 14    DmaToAccessErrorVf(ro) - DMA ToPCIe Virtual Function Access Error.
    Bits: 13    DmaToAccessErrorPf(ro) - DMA ToPCIe Physical Function Access Error.
    Bits: 12    DmaToDescrOvflHi(ro) - DMA ToPcie High Priority Descriptor Queue Overflow.
    Bits: 11    DmaToDescrOvflMed(ro) - DMA ToPcie Medium Priority Descriptor Queue Overflow.
    Bits: 10    DmaToDescrOvflLo(ro) - DMA ToPcie Low Priority Descriptor Queue Overflow.
    Bits:  9    DmaToRdParityError(ro) - DMA ToPcie Descriptor memory read parity error
    Bits:  8    CpptAccessError(rw1c) - Cpp Target Access Error Status bit indicates access error received from the cpp.
    Bits:  7    CpptIntDataError(rw1c) - Cpp Target Internal Data Error status bit indicates an error was received from the Shared Memory during a read operation
    Bits:  6    CpptPullDataError(rw1c) - Cpp Target Pull Data Error status bit indicates an error was received on the CPP Pull data interface
    Bits:  5    PciemAccessError(rw1c) - Pcie Master Access Error Status bit indicates access error received from the link.
    Bits:  3    PciemHalDataError(rw1c) - PCIE Master detected a data error from the HAL interface.
    Bits:  2    PcietAccessError(rw1c) - Pcie Target Access Error Status bit indicates access error received from the link.
    Bits:  1    PcietIntAccessError(rw1c) - Pcie Target Internal Access Error Status bit indicates an error occurred during an internal access operation
    Bits:  0    PcietHalDataError(rw1c) - PCIE Target detected a data error from the HAL interface
*/
#define NFP_PCIEX_COMPCFG_PCIeCompConfig3                    0x0000000c
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaAriInError(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaAriInError_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PciemHalComplCode(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PciemHalComplCode_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaFromAccessErrorVf BIT(20)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaFromAccessErrorPf BIT(19)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaFromDescrOvflHi BIT(18)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaFromDescrOvflMed BIT(17)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaFromDescrOvflLo BIT(16)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaFrmRdParityError BIT(15)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaToAccessErrorVf BIT(14)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaToAccessErrorPf BIT(13)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaToDescrOvflHi BIT(12)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaToDescrOvflMed BIT(11)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaToDescrOvflLo BIT(10)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_DmaToRdParityError BIT(9)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_CpptAccessError  BIT(8)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_CpptIntDataError BIT(7)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_CpptPullDataError BIT(6)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PciemAccessError BIT(5)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PciemHalDataError BIT(3)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PcietAccessError BIT(2)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PcietIntAccessError BIT(1)
#define   NFP_PCIEX_COMPCFG_PCIeCompConfig3_PcietHalDataError BIT(0)
/*----------------------------------------------------------------
  Register: PCIePciemStatTotal - Status of total cycle count since stats enable in PCIe Master interface
  Register: PCIePciemStatWrite - Status of write data cycle count since stats enable in PCIe Master interface
  Register: PCIePciemStatRead - Status of read data cycle count since stats enable in PCIe Master interface
    Bits: 31:0  PCIePciemStat(ro) - General use register.
*/
#define NFP_PCIEX_COMPCFG_PCIePciemStatTotal                 0x00000018
#define NFP_PCIEX_COMPCFG_PCIePciemStatWrite                 0x0000001c
#define NFP_PCIEX_COMPCFG_PCIePciemStatRead                  0x00000020
#define   NFP_PCIEX_COMPCFG_PCIePciemStat_PCIePciemStat(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIePciemStat_PCIePciemStat_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeSramCtl - SRAM control register for PCIe Controller Core and DMA descriptor mems
    Bits: 31    PcieSramCtlWen(wo) - Write to 1 to initiate a write to the selected sram control register.
    Bits: 18:16 PCIeSramCtlSel(rw) - Selects which SRAM Control register to write to or read from.
    Bits: 14:0  PCIeSramCtl(rw) - SRAM Control Register Access for DMADesc, PnpRxFifo, SCFifo, TphSt, ReplayBuf and SCAnnex
*/
#define NFP_PCIEX_COMPCFG_PCIeSramCtl                        0x00000024
#define   NFP_PCIEX_COMPCFG_PCIeSramCtl_PcieSramCtlWen       BIT(31)
#define   NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel(_x)   (((_x) & 0x7) << 16)
#define   NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_of(_x) (((_x) >> 16) & 0x7)
#define     NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_DMADesc (0)
#define     NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_PnpRxFifo (1)
#define     NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_SCFifo (2)
#define     NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_TphSt (3)
#define     NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_ReplayBuf (4)
#define     NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtlSel_SCAnnex (5)
#define   NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtl(_x)      (((_x) & 0x7fff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeSramCtl_PCIeSramCtl_of(_x)   (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: PCIeARIError0 - Status of Virtual Functions that had errors
  Register: PCIeARIError1 - Status of Virtual Functions that had errors
  Register: PCIeARIError2 - Status of Virtual Functions that had errors
  Register: PCIeARIError3 - Status of Virtual Functions that had errors
  Register: PCIeARIError4 - Status of Virtual Functions that had errors
  Register: PCIeARIError5 - Status of Virtual Functions that had errors
  Register: PCIeARIError6 - Status of Virtual Functions that had errors
  Register: PCIeARIError7 - Status of Virtual Functions that had errors
    Bits: 31:0  PCIeAriErr(rw1c) - ARI Error status.
*/
#define NFP_PCIEX_COMPCFG_PCIeARIError0                      0x00000028
#define NFP_PCIEX_COMPCFG_PCIeARIError1                      0x0000002c
#define NFP_PCIEX_COMPCFG_PCIeARIError2                      0x00000030
#define NFP_PCIEX_COMPCFG_PCIeARIError3                      0x00000034
#define NFP_PCIEX_COMPCFG_PCIeARIError4                      0x00000038
#define NFP_PCIEX_COMPCFG_PCIeARIError5                      0x0000003c
#define NFP_PCIEX_COMPCFG_PCIeARIError6                      0x00000040
#define NFP_PCIEX_COMPCFG_PCIeARIError7                      0x00000044
#define   NFP_PCIEX_COMPCFG_PCIeAriErr_PCIeAriErr(_x)        (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeAriErr_PCIeAriErr_of(_x)     (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: SerDes4RdWr03To00 - Write port to serdes lanes 3 to 0.
  Register: SerDes4RdWr07To04 - Write port to serdes lanes 7 to 4.
    Bits: 31:29 SerDesPageAddr(rw) - Read/Write page address to serdes membus
    Bits: 28    SerDesPcsPmaSel(rw) - Write to 1 to select PCS Registers. Write to 0 to select PMA registers. PageAddr and OffsetAddr bits will index into the PCS or PMA register sets depending on the state of this bit.
    Bits: 27:16 SerDesOffsetAddr(rw) - Read/Write offset Address to serdes membus
    Bits: 15:10 Rfu(ro) - Reserved for Use.
    Bits:  9    SerDesRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits:  8    SerDesWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits:  7:0  SerDesWrData(rw) - 8 bit write data to SerDes. Dont care for a read op.
*/
#define NFP_PCIEX_COMPCFG_SerDes4RdWr03To00                  0x00000048
#define NFP_PCIEX_COMPCFG_SerDes4RdWr07To04                  0x0000004c
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr(_x)   (((_x) & 0x7) << 29)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_Lane_0_Select (0)
#define     NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_Lane_1_Select (1)
#define     NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_Lane_2_Select (2)
#define     NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_Lane_3_Select (3)
#define     NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_Common_Select (4)
#define     NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPageAddr_All_lane_Select (7)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesPcsPmaSel      BIT(28)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesOffsetAddr(_x) (((_x) & 0xfff) << 16)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesOffsetAddr_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_Rfu(_x)              (((_x) & 0x3f) << 10)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_Rfu_of(_x)           (((_x) >> 10) & 0x3f)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesRdBusy         BIT(9)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesWrBusy         BIT(8)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesWrData(_x)     (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_SerDes4RdWr_SerDesWrData_of(_x)  (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDes4RdData03To00 - Read return data for serdes lanes 3 to 0.
  Register: SerDes4RdData07To04 - Read return data for serdes lanes 7 to 4.
    Bits: 31:29 SerDesRdPageAddr(ro) - Read page address to serdes membus
    Bits: 28:16 SerDesRdOffsetAddr(ro) - Read offset Address to serdes membus
    Bits:  9    SerDesRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits:  7:0  SerDesRdData(ro) - 8 bit read data from SerDes
*/
#define NFP_PCIEX_COMPCFG_SerDes4RdData03To00                0x00000050
#define NFP_PCIEX_COMPCFG_SerDes4RdData07To04                0x00000054
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_Lane_0_Select (0)
#define     NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_Lane_1_Select (1)
#define     NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_Lane_2_Select (2)
#define     NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_Lane_3_Select (3)
#define     NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_Common_Select (4)
#define     NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdPageAddr_All_lane_Select (7)
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdOffsetAddr(_x) (((_x) & 0x1fff) << 16)
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdOffsetAddr_of(_x) (((_x) >> 16) & 0x1fff)
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdDataValid  BIT(9)
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdData(_x)   (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_SerDes4RdData_SerDesRdData_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PCIeSpare0 - Spare register address, no hw implemented
*/
#define NFP_PCIEX_COMPCFG_PCIeSpare0                         0x0000005c
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig0 - Selects operation mode for PCIe controller
    Bits: 31    RcbStatus(ro) - Indicates Pcie Controller Core status of Read Completion Boundary setting: 0 = 64B, 1 = 128B
    Bits: 30:29 ObffEnable(ro) - Indicates Pcie Controller Core status of Optimized Buffer Flush Fill. Valid settings are 00 (disabled), 01 (Variation A), and 10 (Variation B).
    Bits: 28:27 NegotiatedSpeed(ro) - Reflects Pcie Controller Core status of current operating speed of the link (00 = 2.5 GT/s, 01 = 5 GT/s, 10 = 8 GT/s). Valid when LINK_STATUS = 10 or 11.
    Bits: 26:24 MaxReadReqSize(ro) - Indicates Pcie Controller Core status of the limit of the size of outgoing read requests. The 3-bit codes are the same as those defined in PCIe Specifications: 000 = 128 bytes, 001 = 256 bytes, 010 = 512 bytes, 011 = 1024 bytes, 100 = 2048 bytes 101 = 4096 bytes.
    Bits: 23:21 MaxPayloadSize(ro) - Reflects Pcie Controller Core status of the limit of the size of Outgoing Completion payloads. The 3-bit codes are the same as those defined in PCIe Specifications: 000 = 128 bytes, 001 = 256 bytes, 010 = 512 bytes.
    Bits: 20:17 FunctionStatus(ro) - Indicates Pcie Controller Core status of the states of the Command Register bits in the PCI configuration space of each Function. These outputs are used to enable requests and completions from the host logic. The assignment of bits is as follows: Bit 0: Function 0 IO Space Enable, Bit 1: Function 0 Memory Space Enable, Bit 2: Function 0 Bus Master Enable, Bit 3: Function 0 INTx Disable.
    Bits: 14:12 FunctionPowerState(ro) - Provides Pcie Controller Core status of the current power state of the Physical Function. The possible power states are: 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot.
    Bits: 11:8  LinkPowerState(ro) - Reflects Pcie Controller Core power state of the PCIe link. 0001 = L0, 0010 = L0s, 0100 = L1, 1000 = L2.
    Bits:  7:6  LinkStatus(ro) - Indicates Pcie Controller Core status of the PCI Express link. 00 = No receivers detected, 01 = Link training in progress, 10 = Link up , DL initialization in progress, 11 = Link up, DL initialization completed..
    Bits:  5:0  LtssmState(ro) - Reflects Pcie Controller Core state of the Link Training and Status State Machine.
*/
#define NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0                  0x00000060
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_RcbStatus      BIT(31)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_ObffEnable(_x) (((_x) & 0x3) << 29)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_ObffEnable_of(_x) (((_x) >> 29) & 0x3)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_NegotiatedSpeed(_x) (((_x) & 0x3) << 27)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_NegotiatedSpeed_of(_x) (((_x) >> 27) & 0x3)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_MaxReadReqSize(_x) (((_x) & 0x7) << 24)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_MaxReadReqSize_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_MaxPayloadSize(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_MaxPayloadSize_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_FunctionStatus(_x) (((_x) & 0xf) << 17)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_FunctionStatus_of(_x) (((_x) >> 17) & 0xf)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_FunctionPowerState(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_FunctionPowerState_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_LinkPowerState(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_LinkPowerState_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_LinkStatus(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_LinkStatus_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_LtssmState(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig0_LtssmState_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig1 - Selects operation mode for PCIe controller
    Bits: 31    ReqPmTransitionL23Ready(rw) - Pcie Controller Core status.
    Bits:  7    NonPostedOverrideDisable(rw) - Setting this bit allows HAL Target posted requests to postpone and pass existing received non_posted requests (allowed per pcie spec). Default 0 allows HAL Target to fairly mix posted and non-posted requests.
    Bits:  6    MasterHoldIfDisabled(rw) - When in Endpoint mode, the PCIe Master logic hold back all PCIe Master transactions when this bit is set and the FUNCTION_STATUS bit 2 from the PCIe core indicates the Bus Master is not enabled. The MasterDropIfDisabled must also be cleared.
    Bits:  5    ConfigEnable(rw) - Tied to Pcie Controller CONFIG_ENABLE input. When this bit is a 0 in the EP mode, the core will generate a CRS Completion in response to Configuration Requests. In systems where the core configuration registers are loaded from RAM on power-up, this prevents the core from responding to Configuration Requests before all the registers are loaded. When this bit is a 1 in the EP mode, the core will accept Configuration Requests.
    Bits:  4    MasterDropIfDisabled(rw) - When in Endpoint mode, the PCIe Master logic drops all PCIe Master transactions when this bit is set and the FUNCTION_STATUS bit 2 from the PCIe core indicates the Bus Master is not enabled. This bit has no effect in Root Complex mode.
    Bits:  3:1  TphStMode(ro) - Indicates Pcie Controller Core status of the setting of the ST Mode Select bits in the TPH Requester Control Register of Physical Function 0. These bits are active only in the EndPoint mode. They indicate the allowed modes for generation of TPH Hints by the corresponding Physical Function.
    Bits:  0    TphRequesterEnable(ro) - Indicates Pcie Controller Core status of the TPH Requester Enable bit [8] of the TPH Requester Control Register in the TPH Requester Capability Structure of the Physical Function 0. These bits are active only in the EndPoint mode. They indicate whether the software has enabled the device to generate requests with TPH Hints from the associated Physical Function.
*/
#define NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1                  0x00000064
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_ReqPmTransitionL23Ready BIT(31)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_NonPostedOverrideDisable BIT(7)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_MasterHoldIfDisabled BIT(6)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_ConfigEnable   BIT(5)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_MasterDropIfDisabled BIT(4)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_TphStMode(_x)  (((_x) & 0x7) << 1)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_TphStMode_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig1_TphRequesterEnable BIT(0)
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig2 - Selects operation mode for PCIe controller
    Bits: 31:16 PCIeCntrlrDebugData(ro) - Pcie Controller Core status of 16-bit output data from the debug bus.
    Bits: 15    LinkEqLoopbackInProgress(ro) - Pcie Controller Core status of link equalization loopback.
    Bits: 14    HotResetStat(ro) - Reflects current state of the Hot Reset Status from the PCIe Controller. If set a hot reset was received from the link in the Endpoint mode.
    Bits: 13    HotResetInit(rw) - SW sets this bit when Pcie Controller Core needs to initiate a Hot Reset sequence on the PCIe link when in RC mode.
    Bits: 12    LinkDownResetOut(ro) - Pcie Controller Core status asserted when its LTSSM detects a link-down event (when the LINK_UP state variable goes to 0).
    Bits: 10    PhyInterrupt(rw1c) - PCIe Core output used in RC mode to signal a link training related event has occurred
    Bits:  9    LocalInterrupt(rw1c) - Pcie Controller Core status. Used to signal an error or abnormal condition to the local processor. The interrupting condition can be obtained by reading the Local Error Status Register.
    Bits:  4    FatalError(rw1c) - Pcie core detected a fatal error.
    Bits:  3    NonFatalError(rw1c) - Pcie core detected a non-fatal error.
    Bits:  2    CorrectableError(rw1c) - Pcie core detected a correctable error.
    Bits:  1    CorrectableErrorIn(wo) - Software writes a 1 to this bit when an correctable error has been detected. A correctable error can be a correctable error event from the Shared SRAM. The error is reported by the core through the PCI Express Advanced Error Reporting mechanism.
    Bits:  0    UncorrectableErrorIn(wo) - Software writes a 1 to this bit when an uncorrectable error has been detected. An uncorrectable error can be an uncorrectable error event from the Shared SRAM or a DMA Descriptor Rd Parity error. The error is reported by the core through the PCI Express Advanced Error Reporting mechanism.
*/
#define NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2                  0x00000068
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_PCIeCntrlrDebugData(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_PCIeCntrlrDebugData_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_LinkEqLoopbackInProgress BIT(15)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_HotResetStat   BIT(14)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_HotResetInit   BIT(13)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_LinkDownResetOut BIT(12)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_PhyInterrupt   BIT(10)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_LocalInterrupt BIT(9)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_FatalError     BIT(4)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_NonFatalError  BIT(3)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_CorrectableError BIT(2)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_CorrectableErrorIn BIT(1)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig2_UncorrectableErrorIn BIT(0)
/*----------------------------------------------------------------
  Register: PCIeCntrlrConfig3 - Selects operation mode for PCIe controller
    Bits: 29    IntAMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 28    IntBMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 27    IntCMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 26    IntDMask(rw) - Software sets this bit to mask the interrupt.
    Bits: 25    IntA(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 24    IntB(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 23    IntC(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 22    IntD(rw1c) - Legacy Interrupt driven by the PCIe Core
    Bits: 21:16 VfFlrDoneChannel(rw) - Software sets this field to the select the virtual function to drive the VfFlrDone signal to.
    Bits: 15    VfFlrDone(wo) - Software sets this bit in conjunction with the VfFlrDoneChannel after completion of a virtual function level reset requested by the host. This bit always reads a 0.
    Bits: 14    FlrDone(wo) - Software sets this bit after completion of a function level reset requested by the host. This bit always reads a 0.
    Bits: 13    FlrInProgress(ro) - Function level reset in progress status bit. This bit stays set until the FLR_DONE bit is set.
    Bits: 12:2  PresetSweepMask(rw) - Controls masking off evalutating known bad TX Presets during link equalization
    Bits:  1    BypassRemoteTxEq(rw) - Controls bypassing the evaluation of the remote PHY Tx during Link Equalization
    Bits:  0    BypassPhase23(rw) - When in RC mode, controls Phase 2 and phase 3 of Link Equalization
*/
#define NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3                  0x0000006c
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntAMask       BIT(29)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntBMask       BIT(28)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntCMask       BIT(27)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntDMask       BIT(26)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntA           BIT(25)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntB           BIT(24)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntC           BIT(23)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_IntD           BIT(22)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_VfFlrDoneChannel(_x) (((_x) & 0x3f) << 16)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_VfFlrDoneChannel_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_VfFlrDone      BIT(15)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_FlrDone        BIT(14)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_FlrInProgress  BIT(13)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_PresetSweepMask(_x) (((_x) & 0x7ff) << 2)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_PresetSweepMask_of(_x) (((_x) >> 2) & 0x7ff)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_BypassRemoteTxEq BIT(1)
#define     NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_BypassRemoteTxEq_NoBypass (0 << 1)
#define     NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_BypassRemoteTxEq_Bypass BIT(1)
#define   NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_BypassPhase23  BIT(0)
#define     NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_BypassPhase23_NoBypass (0 << 0)
#define     NFP_PCIEX_COMPCFG_PCIeCntrlrConfig3_BypassPhase23_Bypass BIT(0)
/*----------------------------------------------------------------
  Register: PCIeVfEnable0 - Status of Virtual Functions that are enabled
  Register: PCIeVfEnable1 - Status of Virtual Functions that are enabled
  Register: PCIeVfBusMasterEn0 - reflects the status of the Bus Master Enable bit of the PCI Command Register of Virtual Function i
  Register: PCIeVfBusMasterEn1 - reflects the status of the Bus Master Enable bit of the PCI Command Register of Virtual Function i
  Register: PCIeVfFlrInProg0 - status of host-initiated reset of Virtual Function i though its FLR bit in the configuration space
  Register: PCIeVfFlrInProg1 - status of host-initiated reset of Virtual Function i though its FLR bit in the configuration space
  Register: PCIeVfTphReqEn0 - indicate whether the software has enabled the device to generate requests with TPH Hints from the associated Virtual Function.
  Register: PCIeVfTphReqEn1 - indicate whether the software has enabled the device to generate requests with TPH Hints from the associated Virtual Function.
  Register: PCIeVfPwrState0 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState1 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState2 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState3 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState4 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfPwrState5 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
    Bits: 31:0  PCIeVfStat1(ro) - Virtual Function status.
*/
#define NFP_PCIEX_COMPCFG_PCIeVfEnable0                      0x00000070
#define NFP_PCIEX_COMPCFG_PCIeVfEnable1                      0x00000074
#define NFP_PCIEX_COMPCFG_PCIeVfBusMasterEn0                 0x00000078
#define NFP_PCIEX_COMPCFG_PCIeVfBusMasterEn1                 0x0000007c
#define NFP_PCIEX_COMPCFG_PCIeVfFlrInProg0                   0x00000080
#define NFP_PCIEX_COMPCFG_PCIeVfFlrInProg1                   0x00000084
#define NFP_PCIEX_COMPCFG_PCIeVfTphReqEn0                    0x00000090
#define NFP_PCIEX_COMPCFG_PCIeVfTphReqEn1                    0x00000094
#define NFP_PCIEX_COMPCFG_PCIeVfPwrState0                    0x00000098
#define NFP_PCIEX_COMPCFG_PCIeVfPwrState1                    0x0000009c
#define NFP_PCIEX_COMPCFG_PCIeVfPwrState2                    0x000000a0
#define NFP_PCIEX_COMPCFG_PCIeVfPwrState3                    0x000000a4
#define NFP_PCIEX_COMPCFG_PCIeVfPwrState4                    0x000000a8
#define NFP_PCIEX_COMPCFG_PCIeVfPwrState5                    0x000000ac
#define   NFP_PCIEX_COMPCFG_PCIeVfStat1_PCIeVfStat1(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeVfStat1_PCIeVfStat1_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeVfTphState0 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState1 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState2 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState3 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState4 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
  Register: PCIeVfTphState5 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
    Bits: 31:0  PCIeVfStat(ro) - Virtual Function status.
*/
#define NFP_PCIEX_COMPCFG_PCIeVfTphState0                    0x000000b0
#define NFP_PCIEX_COMPCFG_PCIeVfTphState1                    0x000000b4
#define NFP_PCIEX_COMPCFG_PCIeVfTphState2                    0x000000b8
#define NFP_PCIEX_COMPCFG_PCIeVfTphState3                    0x000000bc
#define NFP_PCIEX_COMPCFG_PCIeVfTphState4                    0x000000c0
#define NFP_PCIEX_COMPCFG_PCIeVfTphState5                    0x000000c4
#define   NFP_PCIEX_COMPCFG_PCIeVfStat_PCIeVfStat(_x)        (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeVfStat_PCIeVfStat_of(_x)     (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PCIeVfTphPwrState6 - 3 bits provide current power state of the Virtual Function, 000: D0_uninitialized, 001: D0_active, 010: D1, 100: D3_hot
    Bits: 27:25 PCIeTphStMode63(ro) - VF63 TPH State
    Bits: 24:22 PCIeTphStMode62(ro) - VF62 TPH Mode
    Bits: 21:19 PCIeTphStMode61(ro) - VF61 TPH Mode
    Bits: 18:16 PCIeTphStMode60(ro) - VF60 TPH Mode
    Bits: 11:9  PCIeVfPwrState63(ro) - VF63 Power State
    Bits:  8:6  PCIeVfPwrState62(ro) - VF62 Power State
    Bits:  5:3  PCIeVfPwrState61(ro) - VF61 Power State
    Bits:  2:0  PCIeVfPwrState60(ro) - VF60 Power State
*/
#define NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6                 0x000000c8
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode63(_x) (((_x) & 0x7) << 25)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode63_of(_x) (((_x) >> 25) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode62(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode62_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode61(_x) (((_x) & 0x7) << 19)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode61_of(_x) (((_x) >> 19) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode60(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeTphStMode60_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState63(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState63_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState62(_x) (((_x) & 0x7) << 6)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState62_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState61(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState61_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState60(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeVfTphPwrState6_PCIeVfPwrState60_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: PCIeStateChangeStat - Contains the state change interrupt and status
    Bits: 22    HotResetAssertIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 21    FuncStatusChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 20    PwrStateChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 19    VfBusMstrEnStateChangeIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 18    VfEnableStateChangeIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 17    LinkPwrStateChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 16    LinkStatusChgIntMask(rw) - Software sets this bit to mask off the corresponding interrupt status bit.
    Bits: 15:8  CfgFuncNum(ro) - Contains the CONFIG_FUNCTION_NUM associated with the POWER_STATE_CHANGE_INTERRUPT.
    Bits:  6    HotResetAssertInt(rw1c) - Interrupt status bit that indicates the HOT_RESET_OUT from the PCIe core has asserted. Current state of the signal can be read in the PCIeCntrlrConfig2 register.
    Bits:  5    FuncStatusChgInt(rw1c) - Interrupt status bit that indicates there was a change to the FUNCTION_STATUS bits from the PCIe core
    Bits:  4    PwrStateChgInt(rw1c) - Interrupt status bit that indicates there was a change to the FUNCTION_POWER_STATE or VF_POWER_STATE status from the PCIe core. Writing a 1 to this register asserts the POWER_STATE_CHANGE_ACK back to the PCIe Core.
    Bits:  3    VfBusMstrEnStateChangeInt(rw1c) - Interrupt status bit that indicates there was a change to the VF_BUS_MASTER_ENABLE status from the PCIe core
    Bits:  2    VfEnableStateChangeInt(rw1c) - Interrupt status bit that indicates there was a change to VF_ENABLE status from the PCIe core.
    Bits:  1    LinkPwrStateChgInt(rw1c) - Interrupt status bit that indicates the LINK_POWER_STATE has changed
    Bits:  0    LinkStatusChgInt(rw1c) - Interrupt status bit that indicates the LINK_STATUS has changed
*/
#define NFP_PCIEX_COMPCFG_PCIeStateChangeStat                0x000000cc
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_HotResetAssertIntMask BIT(22)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_FuncStatusChgIntMask BIT(21)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_PwrStateChgIntMask BIT(20)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_VfBusMstrEnStateChangeIntMask BIT(19)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_VfEnableStateChangeIntMask BIT(18)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_LinkPwrStateChgIntMask BIT(17)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_LinkStatusChgIntMask BIT(16)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_CfgFuncNum(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_CfgFuncNum_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_HotResetAssertInt BIT(6)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_FuncStatusChgInt BIT(5)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_PwrStateChgInt BIT(4)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_VfBusMstrEnStateChangeInt BIT(3)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_VfEnableStateChangeInt BIT(2)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_LinkPwrStateChgInt BIT(1)
#define   NFP_PCIEX_COMPCFG_PCIeStateChangeStat_LinkStatusChgInt BIT(0)
/*----------------------------------------------------------------
  Register: PCIePresetCoeff0 - map presets to their coefficients
  Register: PCIePresetCoeff1 - map presets to their coefficients
  Register: PCIePresetCoeff2 - map presets to their coefficients
  Register: PCIePresetCoeff3 - map presets to their coefficients
  Register: PCIePresetCoeff4 - map presets to their coefficients
  Register: PCIePresetCoeff5 - map presets to their coefficients
  Register: PCIePresetCoeff6 - map presets to their coefficients
  Register: PCIePresetCoeff7 - map presets to their coefficients
  Register: PCIePresetCoeff8 - map presets to their coefficients
  Register: PCIePresetCoeff9 - map presets to their coefficients
  Register: PCIePresetCoeff10 - map presets to their coefficients
    Bits: 31:18 Reserved(ro) - Reserved
    Bits: 17:0  PCIePresetCoeff(rw) - Map presets to their coefficients.
*/
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff0                   0x000000d0
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff1                   0x000000d4
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff2                   0x000000d8
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff3                   0x000000dc
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff4                   0x000000e0
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff5                   0x000000e4
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff6                   0x000000e8
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff7                   0x000000ec
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff8                   0x000000f0
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff9                   0x000000f4
#define NFP_PCIEX_COMPCFG_PCIePresetCoeff10                  0x000000f8
#define   NFP_PCIEX_COMPCFG_PCIePresetCoeff_Reserved(_x)     (((_x) & 0x3fff) << 18)
#define   NFP_PCIEX_COMPCFG_PCIePresetCoeff_Reserved_of(_x)  (((_x) >> 18) & 0x3fff)
#define   NFP_PCIEX_COMPCFG_PCIePresetCoeff_PCIePresetCoeff(_x) (((_x) & 0x3ffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIePresetCoeff_PCIePresetCoeff_of(_x) (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: PCIeLocalLowFreq0 - Provides the Low Frequency (LF) values for lanes 0 thru 3 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
  Register: PCIeLocalLowFreq1 - Provides the Low Frequency (LF) values for lanes 4 thru 7 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
    Bits: 31:24 Reserved(ro) - Reserved
    Bits: 23:18 LocalLfFs1_lane3(rw) - Lane 3 Low Frequency (LF) value considered during TX equalization.
    Bits: 17:12 LocalLfFs1_lane2(rw) - Lane 2 Low Frequency (LF) value considered during TX equalization.
    Bits: 11:6  LocalLfFs1_lane1(rw) - Lane 1 Low Frequency (LF) value considered during TX equalization.
    Bits:  5:0  LocalLfFs1_lane0(rw) - Lane 0 Low Frequency (LF) value considered during TX equalization.
*/
#define NFP_PCIEX_COMPCFG_PCIeLocalLowFreq0                  0x00000100
#define NFP_PCIEX_COMPCFG_PCIeLocalLowFreq1                  0x00000104
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_Reserved(_x)          (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_Reserved_of(_x)       (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane3(_x)  (((_x) & 0x3f) << 18)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane3_of(_x) (((_x) >> 18) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane2(_x)  (((_x) & 0x3f) << 12)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane2_of(_x) (((_x) >> 12) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane1(_x)  (((_x) & 0x3f) << 6)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane1_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane0(_x)  (((_x) & 0x3f) << 0)
#define   NFP_PCIEX_COMPCFG_LocalLfFs1_LocalLfFs1_lane0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: PCIeLocalFullSwing0 - Provides the Full Swing (FS) values for lanes 0 thru 3 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
  Register: PCIeLocalFullSwing1 - Provides the Full Swing (FS) values for lanes 4 thru 7 to Controller. A PHY may optionally consider this value when deciding how long to evaluate TX equalization settings of the link partner. These signals are only used at the 8.0 GT/s signaling rate.
    Bits: 31:24 Reserved(ro) - Reserved
    Bits: 23:18 LocalLfFs_lane3(rw) - Lane 3 Full Swing (FS) value considered during TX equalization.
    Bits: 17:12 LocalLfFs_lane2(rw) - Lane 2 Full Swing (FS) value considered during TX equalization.
    Bits: 11:6  LocalLfFs_lane1(rw) - Lane 1 Full Swing (FS) value considered during TX equalization.
    Bits:  5:0  LocalLfFs_lane0(rw) - Lane 0 Full Swing (FS) value considered during TX equalization.
*/
#define NFP_PCIEX_COMPCFG_PCIeLocalFullSwing0                0x00000108
#define NFP_PCIEX_COMPCFG_PCIeLocalFullSwing1                0x0000010c
#define   NFP_PCIEX_COMPCFG_LocalLfFs_Reserved(_x)           (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_Reserved_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane3(_x)    (((_x) & 0x3f) << 18)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane3_of(_x) (((_x) >> 18) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane2(_x)    (((_x) & 0x3f) << 12)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane2_of(_x) (((_x) >> 12) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane1(_x)    (((_x) & 0x3f) << 6)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane1_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane0(_x)    (((_x) & 0x3f) << 0)
#define   NFP_PCIEX_COMPCFG_LocalLfFs_LocalLfFs_lane0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: PcieEventMsiFuncMap_[32] - Defines the MSI function number and message attributes for event filter X
    Bits: 31:9  Reserved(rw) - Reserved.
    Bits:  8    MaskEvent(rw) - Specifies to mask the event from generating an MSI.
    Bits:  7:0  FunctionNumber(rw) - Specifies the Function number to be sent as ReqID with MSI message.
*/
#define NFP_PCIEX_COMPCFG_PcieEventMsiFuncMap(_x)            (0x00000110 + (0x4 * ((_x) & 0x1f)))
#define   NFP_PCIEX_COMPCFG_PcieEventMsiFuncMap_Reserved(_x) (((_x) & 0x7fffff) << 9)
#define   NFP_PCIEX_COMPCFG_PcieEventMsiFuncMap_Reserved_of(_x) (((_x) >> 9) & 0x7fffff)
#define   NFP_PCIEX_COMPCFG_PcieEventMsiFuncMap_MaskEvent    BIT(8)
#define   NFP_PCIEX_COMPCFG_PcieEventMsiFuncMap_FunctionNumber(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_PcieEventMsiFuncMap_FunctionNumber_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PCIeMSIxPendBitArray_[8] - Shows the status of 32 of the 256 MSI-X interrupt vectors Pending Bit Array, PBA
    Bits: 31:0  MsixPba(ro) - Status of the MSI-X Pending Bit Array.
*/
#define NFP_PCIEX_COMPCFG_PCIeMSIxPendBitArray(_x)           (0x00000190 + (0x4 * ((_x) & 0x7)))
#define   NFP_PCIEX_COMPCFG_PCIeMSIxPendBitArray_MsixPba(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PCIeMSIxPendBitArray_MsixPba_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader0 - The TLP Header of the received Vendor-defined message
    Bits: 31:16 ReqId(ro) - Received vendor-defined message header, Requestor ID field.
    Bits: 15:8  Tag(ro) - Received vendor-defined message header, Tag field
    Bits:  7:0  MsgCode(ro) - Received vendor-defined message header Message, Code field
*/
#define NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0               0x000001b0
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0_ReqId(_x)   (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0_ReqId_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0_Tag(_x)     (((_x) & 0xff) << 8)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0_Tag_of(_x)  (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0_MsgCode(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader0_MsgCode_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader1 - The TLP Header of the received Vendor-defined message
    Bits: 20:18 Type(ro) - Received vendor-defined message header, Transaction Type field
    Bits: 17:15 Tclass(ro) - Received vendor-defined message header, Traffic Class field.
    Bits: 14:12 Attr(ro) - Received vendor-defined message header, Attribute field.
    Bits:  9:0  Length(ro) - Received vendor-defined message length field. Length is in bytes.
*/
#define NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1               0x000001b4
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Type(_x)    (((_x) & 0x7) << 18)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Type_of(_x) (((_x) >> 18) & 0x7)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Tclass(_x)  (((_x) & 0x7) << 15)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Tclass_of(_x) (((_x) >> 15) & 0x7)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Attr(_x)    (((_x) & 0x7) << 12)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Attr_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Length(_x)  (((_x) & 0x3ff) << 0)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader1_Length_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader2 - The TLP Header of the received Vendor-defined message
    Bits: 31:24 BusNum(ro) - Received vendor-defined message, Bus Number field
    Bits: 23:19 DevNum(ro) - Received vendor-defined message, Device Number field
    Bits: 18:16 FuncNum(ro) - Received vendor-defined message, Function Number field
    Bits: 15:0  VendorId(ro) - Received vendor-defined message, Vendor ID field
*/
#define NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2               0x000001b8
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_BusNum(_x)  (((_x) & 0xff) << 24)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_BusNum_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_DevNum(_x)  (((_x) & 0x1f) << 19)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_DevNum_of(_x) (((_x) >> 19) & 0x1f)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_FuncNum(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_FuncNum_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_VendorId(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader2_VendorId_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgHeader3 - The TLP Header of the received Vendor-defined message
    Bits: 31:0  VHdr(ro) - Received vendor-defined message, vendor defined field
*/
#define NFP_PCIEX_COMPCFG_PcieVendorMsgHeader3               0x000001bc
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader3_VHdr(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgHeader3_VHdr_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PcieVendorMsgData[4] - The data payload of the received Vendor-defined message
    Bits: 31:0  PcieVendorMsgData(ro) - The data payload of the received Vendor-defined message
*/
#define NFP_PCIEX_COMPCFG_PcieVendorMsgData(_x)              (0x000001c0 + (0x4 * ((_x) & 0x3)))
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgData_PcieVendorMsgData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_COMPCFG_PcieVendorMsgData_PcieVendorMsgData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PcieIntMsiMsgAborted - Reporting Requester ID and Vector number of a MSI msg aborted occurred.
    Bits: 13    PcieMsiMsgAborted(w1c) - When set it indicates a MSI message aborted occurred. When cleared the Vector number and Requester ID fields are invalid
    Bits: 12:5  PcieMsiMsgAbortReqId(ro) - Requester id of aborted MSI message
    Bits:  4:0  PcieMsiMsgAbortVector(ro) - Vector number of aborted MSI message.
*/
#define NFP_PCIEX_COMPCFG_PcieIntMsiMsgAborted               0x000001dc
#define   NFP_PCIEX_COMPCFG_PcieIntMsiMsgAborted_PcieMsiMsgAborted BIT(13)
#define   NFP_PCIEX_COMPCFG_PcieIntMsiMsgAborted_PcieMsiMsgAbortReqId(_x) (((_x) & 0xff) << 5)
#define   NFP_PCIEX_COMPCFG_PcieIntMsiMsgAborted_PcieMsiMsgAbortReqId_of(_x) (((_x) >> 5) & 0xff)
#define   NFP_PCIEX_COMPCFG_PcieIntMsiMsgAborted_PcieMsiMsgAbortVector(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_COMPCFG_PcieIntMsiMsgAborted_PcieMsiMsgAbortVector_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_vendor_id_device_id -
    Bits: 31:16 DID(rw) - Device ID: Device ID assigned by the manufacturer of the device. This field can be rewritten independently for each Function from the local management bus.
    Bits: 15:0  VID(ro) - Vendor ID: This is the Vendor ID assigned by PCI SIG to the manufacturer of the device. The Vendor ID is set in the Vendor ID Register within the local management register block.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_vendor_id_device_id       0x00000000
#define   NFP_PCIEX_PF_i_pcie_base_i_vendor_id_device_id_DID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_pcie_base_i_vendor_id_device_id_DID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_vendor_id_device_id_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_i_vendor_id_device_id_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_command_status -
    Bits: 31    DPE(w1c) - Detected Parity Error: This bit is set when the core has received a poisoned TLP. The Parity Error Response enable bit (bit 6) has no effect on the setting of this bit. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 30    SSE(w1c) - Signaled System Error: If the SERR enable bit is 1, this bit is set when the core has sent out a fatal or non-fatal error message on the link to the Root Complex. If the SERR enable bit is 0, this bit remains 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 29    RMA(w1c) - Received Master Abort: This bit is set when the core has received a completion from the link with the Unsupported Request status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 28    RTA(w1c) - Received Target Abort: This bit is set when the core has received a completion from the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 27    STA(w1c) - Signaled Target Abort: This bit is set when the core has sent a completion to the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 26:25 R6(ro) - Reserved:
    Bits: 24    MDPE(w1c) - Master Data Parity Error: When the Parity Error Response enable bit is 1, the core sets this bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). This bit remains 0 when the Parity Error Response enable bit is 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 23:21 R5(ro) - Reserved:
    Bits: 20    CL(ro) - Capabilities List: Indicates the presence of PCI Extended Capabilities registers. This bit is hardwired to 1.
    Bits: 19    IS(ro) - Interrupt Status: This bit is valid only when the core is configured to support legacy interrupts. Indicates that the core has a pending interrupt, that is, the core has sent an Assert_INTx message but has not transmitted a corresponding Deassert_INTx message.
    Bits: 18:16 R4(ro) - Reserved:
    Bits: 15:11 R3(ro) - Reserved:
    Bits: 10    IMD(rw) - INTx Message Disabled: Enables or disables the transmission of INTx Assert and De-assert messages from the core. Setting this bit to 1 disables generation of INTx assert/de-assert messages in the core. This field can be written from the local management bus.
    Bits:  9    R2(ro) - Reserved:
    Bits:  8    SE(rw) - SERR Enable: Enables the reporting of fatal and non-fatal errors detected by the core to the Root Complex. This field can be written from the local management bus.
    Bits:  7    R1(ro) - Reserved:
    Bits:  6    PERE(rw) - Parity Error Response Enable: When this bit is 1, the core sets the Master Data Parity Error status bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). When this bit is 0, the Master Data Parity Error status bit is never set. This field can be written from the local management bus.
    Bits:  5:3  R0(ro) - Reserved:
    Bits:  2    BE(rw) - Bus-Master Enable: Enables the device to issue memory and I/O requests from this Function. This field can be written from the local management bus.
    Bits:  1    MSE(rw) - Mem-Space Enable: Enables memory accesses through the core for this PCI Function. This field can be written from the local management bus.
    Bits:  0    ISE(rw) - IO-Space Enable: Enables IO accesses through the core for this PCI Function. This field can be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_command_status            0x00000004
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_DPE      BIT(31)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_SSE      BIT(30)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_RMA      BIT(29)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_RTA      BIT(28)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_STA      BIT(27)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R6(_x)   (((_x) & 0x3) << 25)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R6_of(_x) (((_x) >> 25) & 0x3)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_MDPE     BIT(24)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R5(_x)   (((_x) & 0x7) << 21)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R5_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_CL       BIT(20)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_IS       BIT(19)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R4(_x)   (((_x) & 0x7) << 16)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R4_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R3(_x)   (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R3_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_IMD      BIT(10)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R2       BIT(9)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_SE       BIT(8)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R1       BIT(7)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_PERE     BIT(6)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R0(_x)   (((_x) & 0x7) << 3)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_R0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_BE       BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_MSE      BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_command_status_ISE      BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_revision_id_class_code -
    Bits: 31:24 CC(ro) - Class Code: Identifies the function of the device. This field can be rewritten independently for each Function from the local management bus
    Bits: 23:16 SCC(ro) - Sub-Class Code: Identifies a sub-category within the selected function. This field can be re-written independently for each Function from the local management bus.
    Bits: 15:8  PIB(ro) - Programming Interface Byte: Identifies the register set layout of the device. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  RID(ro) - Revision ID: Assigned by the manufacturer of the device to identify the revision number of the device. This field can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code    0x00000008
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_CC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_CC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_SCC(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_SCC_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_PIB(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_PIB_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_RID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_i_revision_id_class_code_RID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_bist_header_latency_cache_line -
    Bits: 31:24 BR(ro) - BIST Register: BIST control register. BIST is not currently supported by the core, and this field is hardwired to 0.
    Bits: 23    DT(ro) - Device Type: Identifies whether the device supports a single Function or multiple Functions. This bit is read as 0 when only Function 0 has been enabled in the Physical Function Configuration Register (in the local management block), and as 1 when more than one Function has been enabled.
    Bits: 22:16 HT(ro) - Header Type: Identifies format of header. This field is hardwired to .
    Bits: 15:8  LT(ro) - Latency Timer: This is an unused field and is hardwired to 0.
    Bits:  7:0  CLS(rw) - Cache Line Size: Cache Line Size Register defined in PCI Specifications 3.0. This field can be read or written, both from the link and from the local management bus, but its value is not used.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line 0x0000000c
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_BR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_BR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_DT BIT(23)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_HT(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_HT_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_LT(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_LT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_CLS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_i_bist_header_latency_cache_line_CLS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_0 -
    Bits: 31:8  BAMR0(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R8(ro) - Reserved: These bits are hardwired to 0
    Bits:  3    P0(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
    Bits:  2    S0(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit). For 64-bit address ranges, the value in BAR 1 is treated as a continuation of the base address in BAR 0. The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  1    R7(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI0(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
*/
#define NFP_PCIEX_PF_i_pcie_base_i_base_addr_0               0x00000010
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_BAMR0(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_BAMR0_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_R8(_x)      (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_R8_of(_x)   (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_P0          BIT(3)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_S0          BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_R7          BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_0_MSI0        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_1 -
    Bits: 31:8  BAMR1(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R8(ro) - Reserved: These bits are hardwired to 0
    Bits:  3    P1(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
    Bits:  2    S1(ro) - Size: This field indicates that this BAR is a 32bit BAR
    Bits:  1    R7(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI1(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
*/
#define NFP_PCIEX_PF_i_pcie_base_i_base_addr_1               0x00000014
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_BAMR1(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_BAMR1_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_R8(_x)      (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_R8_of(_x)   (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_P1          BIT(3)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_S1          BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_R7          BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_1_MSI1        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_2 -
    Bits: 31:8  BAMR2(ro) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R10(ro) - Reserved: These bits are hardwired to 0.
    Bits:  3    P2(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  2    S2(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit). For 64-bit address ranges, the value in BAR 3 is treated as a continuation of the base address in BAR 2. The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  1    R9(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs
    Bits:  0    MSI2(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_base_addr_2               0x00000018
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_BAMR2(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_BAMR2_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_R10(_x)     (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_R10_of(_x)  (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_P2          BIT(3)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_S2          BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_R9          BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_2_MSI2        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_3 -
    Bits: 31:8  BAMR3(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R8(ro) - Reserved: These bits are hardwired to 0
    Bits:  3    P3(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function
    Bits:  2    S3(ro) - Size: This field indicates that this BAR is a 32bit BAR
    Bits:  1    R7(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI3(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_base_addr_3               0x0000001c
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_BAMR3(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_BAMR3_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_R8(_x)      (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_R8_of(_x)   (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_P3          BIT(3)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_S3          BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_R7          BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_3_MSI3        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_4 -
    Bits: 31:8  BAMR4(rw) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  BAMR4_1(ro) - Reserved
    Bits:  3    P4(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  2    S4(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit). For 64-bit address ranges, the value in BAR 5 is treated as a continuation of the base address in BAR 4. The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  1    R11(ro) - Reserved:
    Bits:  0    MSI4(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_base_addr_4               0x00000020
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_BAMR4(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_BAMR4_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_BAMR4_1(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_BAMR4_1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_P4          BIT(3)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_S4          BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_R11         BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_4_MSI4        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_base_addr_5 -
    Bits: 31:8  BAMR5(ro) - Base Address: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR.
    Bits:  7:4  R13(ro) - Reserved: These bits are hardwired to 0.
    Bits:  3    P5(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
    Bits:  2    S5(ro) - Size: This field indicates that this BAR is a 32bit BAR
    Bits:  1    R12(ro) - Reserved: This bit is hardwired to 0 for both memory and I/O BARs.
    Bits:  0    MSI5(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O). The value read in this field is determined by the setting of BAR Configuration Registers of the associated Physical Function.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_base_addr_5               0x00000024
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_BAMR5(_x)   (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_BAMR5_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_R13(_x)     (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_R13_of(_x)  (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_P5          BIT(3)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_S5          BIT(2)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_R12         BIT(1)
#define   NFP_PCIEX_PF_i_pcie_base_i_base_addr_5_MSI5        BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_rsvd_0A -
  Register: i_pcie_base_rsvd_0E -
  Register: i_power_mgmt_cap_struct_rsvd_022_023_[2] -
  Register: i_MSI_cap_struct_rsvd_02B -
  Register: i_MSIX_cap_struct_rsvd_02F -
  Register: i_PCIE_cap_struct_rsvd_035 -
  Register: i_PCIE_cap_struct_rsvd_037_038_[2] -
  Register: i_PCIE_cap_struct_rsvd_03D_03F_[3] -
  Register: i_ARI_cap_struct_rsvd_052_053_[2] -
  Register: i_device_serial_num_cap_struct_rsvd_057 -
  Register: i_SRIOV_cap_struct_rsvd_090_09C_[13] -
    Bits: 31:0  RSVD(ro) - NA
*/
#define NFP_PCIEX_PF_i_pcie_base_rsvd_0A                     0x00000028
#define NFP_PCIEX_PF_i_pcie_base_rsvd_0E                     0x00000038
#define NFP_PCIEX_PF_i_power_mgmt_cap_struct_rsvd_022_023(_x) (0x00000088 + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_PF_i_MSI_cap_struct_rsvd_02B               0x000000a8
#define NFP_PCIEX_PF_i_MSIX_cap_struct_rsvd_02F              0x000000bc
#define NFP_PCIEX_PF_i_PCIE_cap_struct_rsvd_035              0x000000d4
#define NFP_PCIEX_PF_i_PCIE_cap_struct_rsvd_037_038(_x)      (0x000000dc + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_PF_i_PCIE_cap_struct_rsvd_03D_03F(_x)      (0x000000f4 + (0x4 * ((_x) & 0x3)))
#define NFP_PCIEX_PF_i_ARI_cap_struct_rsvd_052_053(_x)       (0x00000148 + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_rsvd_057 0x0000015c
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_rsvd_090_09C(_x)     (0x00000240 + (0x4 * ((_x) & 0xf)))
#define   NFP_PCIEX_PF_i_pcie_base_PF_generic_reserved_reg_RSVD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_PF_generic_reserved_reg_RSVD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_subsystem_vendor_id_subsystem_i -
    Bits: 31:16 SID(ro) - Subsystem ID: Specifies the Subsystem ID assigned by the manufacturer of the device. This field can be re-written independently for each Function from the local management bus.
    Bits: 15:0  SVID(ro) - Subsystem Vendor ID: Specifies the Subsystem Vendor ID assigned by the PCI SIG to the manufacturer of the device. Its value comes fom the Subsystem Vendor ID Register in the local management register block.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_subsystem_vendor_id_subsystem_i 0x0000002c
#define   NFP_PCIEX_PF_i_pcie_base_i_subsystem_vendor_id_subsystem_i_SID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_pcie_base_i_subsystem_vendor_id_subsystem_i_SID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_subsystem_vendor_id_subsystem_i_SVID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_i_subsystem_vendor_id_subsystem_i_SVID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_expan_rom_base_addr -
    Bits: 31:8  RBA(rw) - ROM Base Address: Defines the base address and range of the expansion ROM address space. The number of writable bits in this field determines the size of the range (BAR aperture). All other bits are not writable, and are read as 0s. These bits can be written from the local management bus.
    Bits:  7:1  R14(ro) - Reserved:
    Bits:  0    ADE(rw) - Address Decode Enable: This bit must be set to 1 by the configuration software to enable the expansion ROM. This bit can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_expan_rom_base_addr       0x00000030
#define   NFP_PCIEX_PF_i_pcie_base_i_expan_rom_base_addr_RBA(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_expan_rom_base_addr_RBA_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_expan_rom_base_addr_R14(_x) (((_x) & 0x7f) << 1)
#define   NFP_PCIEX_PF_i_pcie_base_i_expan_rom_base_addr_R14_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_PCIEX_PF_i_pcie_base_i_expan_rom_base_addr_ADE BIT(0)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_capabilities_pointer -
    Bits: 31:8  R15(ro) - Reserved:
    Bits:  7:0  CP(ro) - Capabilities Pointer: Contains pointer to the first PCI Capability Structure. It can be re-written independently for every Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_capabilities_pointer      0x00000034
#define   NFP_PCIEX_PF_i_pcie_base_i_capabilities_pointer_R15(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_capabilities_pointer_R15_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_capabilities_pointer_CP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_i_capabilities_pointer_CP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_pcie_base_i_intrpt_line_intrpt_pin -
    Bits: 31:11 R16(ro) - Reserved:
    Bits: 10:8  IPR(ro) - Interrupt Pin Register: Identifies the interrupt input (A, B, C, D) to which this Functions interrupt output is connected to (01 = INTA, 02 = INTB, 03 = INTC, 04 = INTD). The assignment of interrupt inputs to Functions is fixed when the core is configured. This field can be re-written independently for each Function from the local management bus. Default values - PF0: 01 (INTA), PF1: 02 (INTB).
    Bits:  7:0  ILR(rw) - Interrupt Line Register: Identifies the IRQx input of the interrupt controller at the Root Complex that is activated by this Functions interrupt (00 = IRQ0, ... , 0F = IRQ15, FF = unknown or not connected). This field is writable from the local management bus.
*/
#define NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin    0x0000003c
#define   NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin_R16(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin_R16_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin_IPR(_x) (((_x) & 0x7) << 8)
#define   NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin_IPR_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin_ILR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_pcie_base_i_intrpt_line_intrpt_pin_ILR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_power_mgmt_cap_struct_i_pwr_mgmt_cap -
    Bits: 31    PSDCS(ro) - PME Support for D3(cold) State: Indicates whether the Function is capable of sending PME messages when in the D3cold state. Because the device does not have aux power, this bit is hardwired to 0.
    Bits: 30    PSDHS(ro) - PME Support for D3(hot) Statue: Indicates whether the Function is capable of sending PME messages when in the D3hot state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 28    PSD1S(ro) - PME Support for D1 State: Indicates whether the Function is capable of sending PME messages when in the D1 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 27    PSD0S(ro) - PME Support for D0 State: Indicates whether the Function is capable of sending PME messages when in the D0 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 26    D2S(ro) - D2 Support: Set if the Function supports the D2 power state. Currently hardwired to 0.
    Bits: 25    D1S(ro) - D1 Support: Set if the Function supports the D1 power state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 24:22 MCRAPS(ro) - Max Current Required from Aux Power Supply: Specifies the maximum current drawn by the device from the aux power source in the D3cold state. This field is not implemented in devices not supporting PME notification when in the D3cold state, and is therefore hardwired to 0.
    Bits: 21    DSI(ro) - Device Specific Initialization Bit: This bit, when set, indicates that the device requires additional configuration steps beyond setting up its PCI configuration space, to bring it to the D0 active state from the D0 uninitialized state. This bit is hardwired to 0.
    Bits: 20    R0(ro) - Reserved:
    Bits: 19    PC(ro) - PME Clock: Not applicable to PCI Express. This bit is hardwired to 0.
    Bits: 18:16 VID(ro) - Version ID: Indicates the version of the PCI Bus Power Management Specifications that the Function implements. This field is set by default to 011 (Version 1.2). It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. By default, this points to the MSI Capability Structure. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for Power Management. This field is set by default to 01 hex. It can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap  0x00000080
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSDCS BIT(31)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSDHS BIT(30)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSD1S BIT(28)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSD0S BIT(27)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_D2S BIT(26)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_D1S BIT(25)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_MCRAPS(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_MCRAPS_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_DSI BIT(21)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_R0 BIT(20)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_PC BIT(19)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_VID(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_VID_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_cap_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep -
    Bits: 31:24 DR(ro) - Data Register: This optional register is not implemented in the Databahn PCIe core. This field is hardwired to 0.
    Bits: 23:16 R1(ro) - Reserved:
    Bits: 15    PMES(w1c) - PME Status: When PME notification is enabled, writing a 1 into this bit position from the local management bus sets this bit and causes the core to send a PME message from the associated Function. When the Root Complex processes this message, it will turn off this bit by writing a 1 into this bit position though a Config Write. This bit can be set or cleared from the local management bus, by writing a 1 or 0, respectively. It can only be cleared from the configuration path (by writing a 1).
    Bits: 14:9  R2(ro) - Reserved:
    Bits:  8    PE(rw) - PME Enable: Setting this bit enables the notification of PME events from the associated Function. This bit can be set also by writing into this register from the local management bus.
    Bits:  7:4  R3(ro) - Reserved:
    Bits:  3    NSR(ro) - No Soft Reset: When this bit is set to 1, the Function will maintain all its state in the PM state D3hot. The software is not required to re-initialize the Function registers on the transition back to D0. This bit is set to 1 by default, but can be modified independently for each PF from the local management bus.
    Bits:  2    R4(ro) - Reserved:
    Bits:  1:0  PS(rw) - Power State: Indicates the power state this Function is currently in. This field can be read by the software to monitor the current power state, or can be written to cause a transition to a new state. The valid settings are 00 (state D0), 01 (state D1) and 11 (state D3hot). The software should not write any other value into this field. This field can also be written from the local management bus independently for each Function.
*/
#define NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep 0x00000084
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_DR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_DR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R1(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PMES BIT(15)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R2(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R2_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PE BIT(8)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R3(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_NSR BIT(3)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R4 BIT(2)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PS(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_PF_i_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_ctrl_reg -
    Bits: 31:25 R0(ro) - Reserved:
    Bits: 24    MCAP(ro) - Set to 1 to indicate that the device has per-vector masking capability. By default, this bit is set to 1 for PF 0 and 0 for PF 1. This bit can be written from the local management bus.
    Bits: 23    BAC64(ro) - 64-Bit Address Capable: Set to 1 to indicate that the device is capable of generating 64-bit addresses for MSI messages. Because the core has this capability, this bit is hardwired to 1.
    Bits: 22:20 MME(rw) - Multiple Message Enable: Encodes the number of distinct messages that the core is programmed to generate for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). This setting must be based on the number of interrupt inputs of the core that are actually used by this Function. This field can be written from the local management bus.
    Bits: 19:17 MMC(ro) - Multiple Message Capable: Encodes the number of distinct messages that the core is capable of generating for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). Thus, this field defines the number of the interrupt vectors for this Function. The core allows up to 32 distinct messages, but the setting of this field must be based on the number of interrupt inputs of the core that are actually used by the client. For example, if the client logic uses 8 of the 32 distinct MSI interrupt inputs of the core for this Function, then the value of this field must be set to 011. This field can be written from the local management bus.
    Bits: 16    ME(rw) - MSI Enable: Set by the configuration program to enable the MSI feature. This field can also be written from the local management bus.
    Bits: 15:8  CP1(ro) - Capabilities Pointer: Pointer to the next PCI Capability Structure. This is set to point to the MSI-X Capability Structure at 2C hex. This can be modified from the local management bus. This field can be written from the local management bus.
    Bits:  7:0  CID1(ro) - Capability ID: Specifies that the capability structure is for MSI. Hardwired to 05 hex.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg         0x00000090
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_R0(_x) (((_x) & 0x7f) << 25)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_R0_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_MCAP  BIT(24)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_BAC64 BIT(23)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_MME(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_MME_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_MMC(_x) (((_x) & 0x7) << 17)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_MMC_of(_x) (((_x) >> 17) & 0x7)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_ME    BIT(16)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_CP1(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_CP1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_CID1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_ctrl_reg_CID1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_msg_low_addr -
    Bits: 31:2  MAL(rw) - Message Address Low: Lower bits of the address to be used in MSI messages. This field can also be written from the local management bus.
    Bits:  1:0  R1(ro) - Reserved: The two lower bits of the address are hardwired to 0 to align the address on a double-word boundary.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_low_addr     0x00000094
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_low_addr_MAL(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_low_addr_MAL_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_low_addr_R1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_low_addr_R1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_msg_hi_addr -
    Bits: 31:0  MAH(rw) - Message Address High: Contains bits 63:32 of the 64-bit address to be used in MSI Messages. A value of 0 specifies that 32-bit addresses are to be used in the messages. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_hi_addr      0x00000098
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_hi_addr_MAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_hi_addr_MAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_msg_data -
    Bits: 31:16 R2(ro) - Reserved: Hardwired to 0
    Bits: 15:0  MD(rw) - Message Data: Message data to be used for this Function. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_data         0x0000009c
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_data_R2(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_data_R2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_data_MD(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_msg_data_MD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_mask -
    Bits: 31:0  MSIMask(rw) - Mask bits for MSI interrupts. The Multiple Message Capable field in the MSI Control Register specifies the number of distinct interrupts for the Function, which determines the number of valid mask bits
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_mask             0x000000a0
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_mask_MSIMask(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_mask_MSIMask_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MSI_cap_struct_i_msi_pend -
    Bits: 31:0  MSIPend(ro) - Pending bits for MSI interrupts. A read from this location returns the state of the MSI_MASK inputs of the core.
*/
#define NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_pend             0x000000a4
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_pend_MSIPend(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_MSI_cap_struct_i_msi_pend_MSIPend_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MSIX_cap_struct_i_msix_ctrl -
    Bits: 31    MSIXE(rw) - MSI-X Enable: Set by the configuration program to enable the MSI-X feature. This field can also be written from the local management bus.
    Bits: 30    FM(rw) - Function Mask: This bit serves as a global mask to all the interrupt conditions associated with this Function. When this bit is set, the core will not send out MSI messages from this Function. This field can also be written from the local management bus.
    Bits: 29:27 R0(ro) - Reserved:
    Bits: 26:16 MSIXTS(ro) - MSI-X Table Size: Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function. The programmed value is 1 minus the size of the table (that is, this field is set to 0 if the table size is 1.). This field is set by default to 3f hex. It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. This is set to point to the PCI Express Capability Structure at 30 hex. This can be rewritten independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for MSI-X. This field is set by default to 11 hex. It can be rewritten independently for each Function from the local management bus.
*/
#define NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl           0x000000b0
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_MSIXE   BIT(31)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_FM      BIT(30)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_R0(_x)  (((_x) & 0x7) << 27)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_R0_of(_x) (((_x) >> 27) & 0x7)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_MSIXTS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_MSIXTS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_CP(_x)  (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_ctrl_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MSIX_cap_struct_i_msix_tbl_offset -
    Bits: 31:3  TO(ro) - Table Offset: Offset of the memory address where the MSI-X Table is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5).
*/
#define NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_tbl_offset     0x000000b4
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_tbl_offset_TO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_tbl_offset_TO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_tbl_offset_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_tbl_offset_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MSIX_cap_struct_i_msix_pending_intrpt -
    Bits: 31:3  PBAO(ro) - PBA Offset: Offset of the memory address where the PBA is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI1(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.
*/
#define NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_pending_intrpt 0x000000b8
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_pending_intrpt_PBAO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_pending_intrpt_PBAO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_pending_intrpt_BARI1(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_MSIX_cap_struct_i_msix_pending_intrpt_BARI1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_cap_list -
    Bits: 31    R0(ro) - Reserved:
    Bits: 30    TRS(ro) - TCS Routing Supported: When set to 1, this bit indicates that the device supports routing of Trusted Configuration Requests. Not valid for Endpoints. Hardwired to 0.
    Bits: 29:25 IMN(ro) - Interrupt Message Number: Identifies the MSI or MSI-X interrupt vector for the interrupt message generated corresponding to the status bits in the Slot Status Register, Root Status Register, or this capability structure. This field must be defined based on the chosen interrupt mode - MSI or MSI-X. This field is hardwired to 0.
    Bits: 24    SS(ro) - Slot Status: Set to 1 when the link connected to a slot. Hardwired to 0.
    Bits: 23:20 DT(ro) - Device Type: Indicates the type of device implementing this Function. This field is hardwired to 0 in the EP mode.
    Bits: 19:16 PCV(ro) - Capability Version: Identifies the version number of the capability structure. When GEN2_ENABLE is strapped high, this field is permanently set to 2 (Gen2), and 1 (Gen1) otherwise.
    Bits: 15:8  NCP(ro) - Next Capability Pointer: Points to the next PCI capability structure. Set to 0 because this is the last capability structure.
    Bits:  7:0  CID(ro) - Capability ID: Specifies Capability ID assigned by PCI SIG for this structure. This field is hardwired to 10 hex.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list       0x000000c0
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_R0  BIT(31)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_TRS BIT(30)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_IMN(_x) (((_x) & 0x1f) << 25)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_IMN_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_SS  BIT(24)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_DT(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_DT_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_PCV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_PCV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_NCP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_NCP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_cap_list_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_cap -
    Bits: 31:29 R3(ro) - Reserved:
    Bits: 28    FC(ro) - FLR Capable: Set when device has Function-Level Reset capability. It is set by default to 1. It can be re-written independently for each Function from the local management bus.
    Bits: 27:26 CPLS(ro) - Captured Power Limit Scale: Specifies the scale used by Slot Power Limit Value. It can be re-written independently for each Function from the local management bus.
    Bits: 25:18 CSPLV(ro) - Captured Slot Power Limit Value: Specifies upper limit on power supplied by slot. It can be re-written independently for each Function from the local management bus.
    Bits: 17:16 R2(ro) - Reserved:
    Bits: 15    RBER(ro) - Role-Based Error Reporting: Enables role-based error reporting. It is hardwired to 1.
    Bits: 14:12 R1(ro) - Reserved:
    Bits: 11:9  AL1SL(ro) - Acceptable L1 Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L1 to L0. It can be re-written independently for each Function from the local management bus.
    Bits:  8:6  AL0SL(ro) - Acceptable L0S Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L0S to L0. It can be re-written independently for each Function from the local management bus.
    Bits:  5    ETFS(ro) - Extended Tag Field Supported: Set when device allows the tag field to be extended from 5 to 8 bits. It is set by default to 1. It can be rewritten independently for each Function from the local management bus.
    Bits:  4:3  PFS(ro) - Phantom Functions Supported: This field is used to extend the tag field by combining unused Function bits with the tag bits. This field is hardwired to 00 to disable this feature.
    Bits:  2:0  MPS(ro) - Max Payload Size: Specifies maximum payload size supported by the device. Device must limit the size of Outgoing Completion payloads to this value: 000 = 128 bytes, 001 = 256 bytes, 010 = 512 bytes.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap        0x000000c4
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_R3(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_R3_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_FC   BIT(28)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_CPLS(_x) (((_x) & 0x3) << 26)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_CPLS_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_CSPLV(_x) (((_x) & 0xff) << 18)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_CSPLV_of(_x) (((_x) >> 18) & 0xff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_R2(_x) (((_x) & 0x3) << 16)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_R2_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_RBER BIT(15)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_R1(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_R1_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_AL1SL(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_AL1SL_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_AL0SL(_x) (((_x) & 0x7) << 6)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_AL0SL_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_ETFS BIT(5)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_PFS(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_PFS_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_MPS(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_MPS_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_ctrl_status -
    Bits: 31:22 R4(ro) - Reserved:
    Bits: 21    TP(ro) - Transaction Pending: Indicates if any of the Non-Posted requests issued by the Function are still pending.
    Bits: 20    APD(ro) - Aux Power Detected: Set when auxiliary power is detected by the device. This is an unused field.
    Bits: 19    URD(w1c) - Unsupported Request Detected: Set to 1 by the core when it receives an unsupported request, regardless of whether its reporting is enabled or not.
    Bits: 18    FED(w1c) - Fatal Error Detected: Set to 1 by the core when it detects a fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked.
    Bits: 17    NFED(w1c) - Non-Fatal Error Detected: Set to 1 by the core when it detects a non-fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked.
    Bits: 16    CED(w1c) - Correctable Error Detected: Set to 1 by the core when it detects a correctable error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked.
    Bits: 15    FLR(rw) - Function-Level Reset: Writing a 1 into this bit position generates a Function-Level Reset for the selected Function. This bit reads as 0.
    Bits: 14:12 MRRS(rw) - Max Read Request Size: Specifies the maximum size allowed in read requests. Device must limit the size of outgoing read requests to this value: 000 : 128 bytes, 001 : 256 bytes, 010 : 512 bytes, 011 : 1024 bytes, 100 : 2048 bytes, 101 : 4096 bytes
    Bits: 11    ENS(rw) - Enable No Snoop: When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed.
    Bits: 10    EAP(ro) - Enable Aux Power: Used only when device used aux power. This field is hardwired to 0.
    Bits:  9    EPH(ro) - Enable Phantom Functions: This field is hardwired to 0 as the core does not support this feature.
    Bits:  8    ETFE(rw) - Extended Tag Field Enable: Enables the extension of the tag field from 5 to 8 bits.
    Bits:  7:5  MPS(rw) - Max Payload Size: Specifies the maximum TLP payload size configured. The device must be able to receive a TLP of this maximum size, and should not generate TLPs larger than this value. The configuration program sets this field based on the maximum payload size in the Device Capabilities Register, and the capability of the other side. 000 = 128 bytes, 001 = 256 bytes.
    Bits:  4    ERO(rw) - Enable Relaxed Ordering: When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it, when the transactions do not require Strong Ordering.
    Bits:  3    EURR(rw) - Enable Unsupported Request Reporting: Enables the sending of error messages by the core on receiving unsupported requests.
    Bits:  2    EFER(rw) - Enable Fatal Error Reporting: Enables the sending of ERR_FATAL messages by the core on the detection of fatal errors.
    Bits:  1    ENFER(rw) - Enable Non-Fatal Error Reporting: Enables the sending of ERR_NONFATAL messages by the core on the detection of non-fatal errors.
    Bits:  0    ECER(rw) - Enable Correctable Error Reporting: Enables the sending of ERR_COR messages by the core on the detection of correctable errors.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status 0x000000c8
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_R4(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_R4_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_TP BIT(21)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_APD BIT(20)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_URD BIT(19)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_FED BIT(18)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_NFED BIT(17)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_CED BIT(16)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_FLR BIT(15)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_MRRS(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_MRRS_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_ENS BIT(11)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_EAP BIT(10)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_EPH BIT(9)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_ETFE BIT(8)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_MPS(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_MPS_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_ERO BIT(4)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_EURR BIT(3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_EFER BIT(2)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_ENFER BIT(1)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_ECER BIT(0)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_cap -
    Bits: 31:24 PN(ro) - Port Number: Specifies the port number assigned to the PCI Express link connected to this device. This field is hardwired to 0.
    Bits: 23    R5(ro) - Reserved:
    Bits: 22    AOC(ro) - ASPM Optionality Compliance: Setting this bit indicates that the device supports the ASPM Optionality feature. It can be turned off by writing a 0 to this bit position through the local management bus.
    Bits: 21    R6(ro) - Reserved:
    Bits: 20    DLLARC(ro) - Data Link Layer Active Reporting Capability: Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 19    SDERC(ro) - Surprise Down Error Reporting Capability: Indicates the capability of the device to report a Surprise Down error condition. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 18    CPM(ro) - Clock Power Management: Indicates that the device supports removal of reference clocks. It can be re-written independently for each function from the local management bus.
    Bits: 17:15 L1EL(ro) - L1 Exit Latency: Specifies the exit latency from L1 state. This parameter is dependent on the Physical Layer implementation. It can be re-written independently for each Function from the local management bus.
    Bits: 14:12 L0SEL(ro) - L0S Exit Latency: Specifies the time required for the device to transition from L0S to L0. This parameter is dependent on the Physical Layer implementation. It can be re-written independently for each Function from the local management bus.
    Bits: 11:10 ASPM(ro) - Active State Power Management: Indicates the level of ASPM support provided by the device. This field can be re-written independently for each Function from the local management bus.
    Bits:  9:4  MLW(ro) - Maximum Link Width: Indicates the maximum number of lanes supported by the device. This field is hardwired based on the setting of the LANE_COUNT_IN strap input.
    Bits:  3:0  MLS(ro) - Maximum Link Speed: Indicates the speeds supported by the link (2.5 GT/s, 5 GT/s and 8 GT/s per lane). This field is hardwired to 0001 (2.5GT/s) when the strap input PCIE_GENERATION_SEL is set to 00, to 0010 (5 GT/s) when the strap is set to 01, and to 0100 (8 GT/s) when the strap input is set to 10.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap            0x000000cc
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_PN(_x)   (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_PN_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_R5       BIT(23)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_AOC      BIT(22)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_R6       BIT(21)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_DLLARC   BIT(20)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_SDERC    BIT(19)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_CPM      BIT(18)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_L1EL(_x) (((_x) & 0x7) << 15)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_L1EL_of(_x) (((_x) >> 15) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_L0SEL(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_L0SEL_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_ASPM(_x) (((_x) & 0x3) << 10)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_ASPM_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_MLW(_x)  (((_x) & 0x3f) << 4)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_MLW_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_MLS(_x)  (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_MLS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_ctrl_status -
    Bits: 31:30 R10(ro) - Reserved:
    Bits: 29    DLLA(ro) - Data Link Layer Active: Indicates the status of the Data Link Layer. Set to 1 when the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0 in this version of the core.
    Bits: 28    SCC(ro) - Slot Clock Configuration: Indicates that the device uses the reference clock provided by the connector. This bit is hardwired to 0.
    Bits: 27    LTS(ro) - Link Training Status: Not applicable to Endpoints. This field is hardwired to 0.
    Bits: 26    R8(ro) - Reserved:
    Bits: 25:20 NLW(ro) - Negotiated Link Width: Set at the end of link training to the actual link width negotiated between the two sides (0000001 = 1, 000010 = 2, 000100 = 4, 001000 = 8).
    Bits: 19:16 NLS(ro) - Negotiated Link Speed: Negotiated link speed of the device. The only supported speed ids are 2.5 GT/s per lane (0001), 5 GT/s per lane (0010), and 8 GT/s per lane (0011).
    Bits: 14:9  Reserved(ro) - Reserved:
    Bits:  8    ECPM(rw) - Enable Clock Power Management: When this bit is set to 1, the device may use the CLKREQ# pin on the PCIe connector to power manage the Link clock. This bit is writable only when the Clock Power Management bit in the Link Capability Register is set to 1. This bit may also be set from the local management bus.
    Bits:  7    ES(rw) - Extended Synch: Set to 1 to extend the sequence of ordered sets transmitted while exiting from the L0S state.
    Bits:  6    CCC(rw) - Common Clock Configuration: A value of 0 indicates that the reference clock of this device is asynchronous to that of the upstream device. A value of 1 indicates that the reference clock is common.
    Bits:  5:4  R7(ro) - Reserved:
    Bits:  3    RCB(rw) - Read Completion Boundary: Indicates the Read Completion Boundary of the Root Port connected to this Endpoint (0 = 64 bytes, 1 = 128 bytes).
    Bits:  2    R6(ro) - Reserved:
    Bits:  1:0  ASPMC(rw) - Active State Power Management Control: Controls the level of ASPM support on the PCI Express link associated with this Function. The allowed values are 00 (ASPM disabled) and 01 (L0S entry enabled)
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status    0x000000d0
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_R10(_x) (((_x) & 0x3) << 30)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_R10_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_DLLA BIT(29)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_SCC BIT(28)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_LTS BIT(27)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_R8 BIT(26)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_NLW(_x) (((_x) & 0x3f) << 20)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_NLW_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_NLS(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_NLS_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_Reserved(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_Reserved_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_ECPM BIT(8)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_ES BIT(7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_CCC BIT(6)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_R7(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_R7_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_RCB BIT(3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_R6 BIT(2)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_ASPMC(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_ASPMC_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_cap_2 -
    Bits: 31:19 R14(ro) - Reserved:
    Bits: 18    OPFFS(ro) - OBFF Supported: A 1 in this bit position indicates that the Function supports the Optimized Buffer Flush/Fill (OBFF) capability using message signaling. This bit is set to 1 by default for PF0 and hardwired to 0 for PF 1. This bit can be overwritten for PF 0 from the local management bus. Default values - PF0: 1, PF1: 0.
    Bits: 17:13 R13(ro) - Reserved:
    Bits: 12    TCS(ro) - TPH Completer Supported: This bit, when set, indicates that the Function is capable of serving as a completer for requests with Transaction Processing Hints (TPH). This bit is set to 1 by default, but can be turned off for all Physical Functions by writing into PF 0.
    Bits: 11    LMS(ro) - LTR Mechanism Supported: Hardwired to 0.
    Bits: 10    R12(ro) - Reserved:
    Bits:  9    BAOCS128(ro) - 128-Bit CAS Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for the Compare-and- Swap (CAS) Atomic Operation with 128-bit operands. This bit is set to 1 by default, but can be overwritten independently for each Function from the local management bus.
    Bits:  8    BAOCS64(ro) - 64-Bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 64-bit Atomic Operations. This bit is set to 1 by default, but can be overwritten independently for each Function from the local management bus.
    Bits:  7    BAOCS32(ro) - 32-Bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 32-bit Atomic Operations. This bit is set to 1 by default, but can be overwritten independently for each Function from the local management bus.
    Bits:  6    AORS(ro) - atomic_op_routing_supported
    Bits:  5    ARIFS(ro) - ari_forwarding_supported
    Bits:  4    CTDS(ro) - Completion Timeout Disable Supported: A 1 in this field indicates that the associated Function supports the capability to turn off its Completion timeout. This bit is set to 1 by default, but can be re-written independently for each Function from the local management bus.
    Bits:  3:0  CTR(ro) - Completion Timeout Ranges: Specifies the Completion Timeout values supported by the device. This field is set by default to 0010 (10 ms - 250 ms), but can be modified independently for each Function from the local management bus. The actual timeout values are in two programmable local management registers, which allow the timeout settings of the two sub-ranges within Range B to be programmed independently.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2      0x000000e4
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_R14(_x) (((_x) & 0x1fff) << 19)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_R14_of(_x) (((_x) >> 19) & 0x1fff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_OPFFS BIT(18)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_R13(_x) (((_x) & 0x1f) << 13)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_R13_of(_x) (((_x) >> 13) & 0x1f)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_TCS BIT(12)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_LMS BIT(11)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_R12 BIT(10)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_BAOCS128 BIT(9)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_BAOCS64 BIT(8)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_BAOCS32 BIT(7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_AORS BIT(6)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_ARIFS BIT(5)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_CTDS BIT(4)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_CTR(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_cap_2_CTR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2 -
    Bits: 31:15 R17(ro) - Reserved:
    Bits: 14:13 OBFFE(rw) - OBFF Enable: Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device. This field is implemented only in PF 0. Valid settings are 00 (disabled), 01 (Variation A) and 10 (Variation B). This field can also be written from the local management bus. RW if OBFF capability is supported, RO otherwise.
    Bits: 12:11 R16(ro) - Reserved:
    Bits: 10    LTRME(rw) - LTR Mechanism Enable: Hardwired to 0.
    Bits:  9    IDOCE(rw) - IDO Completion Enable: When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates.
    Bits:  8    IDORE(rw) - IDO Request Enable: When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates.
    Bits:  6    AORE(rw) - Atomic Op Requester Enable: This bit must be set to enable the generation of Atomic Op Requests from the Function. If the client logic attempts to send an Atomic Op for a Function for which this bit is not set, logic in the core will nullify the TLP on its way to the link. This bit can also be written from the local management bus.
    Bits:  5    R15(ro) - Reserved:
    Bits:  4    CTD(rw) - Completion Timeout Disable: Setting this bit disables Completion Timeout in the device. This bit can also be written from the local management bus.
    Bits:  3:0  CTV(ro) - Completion Timeout Value: Specifies the Completion Timeout value for the device. Allowable values are 0101 (sub-range 1) and 0110 (sub-range 2). The corresponding timeout values are stored in the local management registers Completion Timeout Interval Registers 0 and 1, respectively.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2 0x000000e8
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_R17(_x) (((_x) & 0x1ffff) << 15)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_R17_of(_x) (((_x) >> 15) & 0x1ffff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_OBFFE(_x) (((_x) & 0x3) << 13)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_OBFFE_of(_x) (((_x) >> 13) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_R16(_x) (((_x) & 0x3) << 11)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_R16_of(_x) (((_x) >> 11) & 0x3)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_LTRME BIT(10)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_IDOCE BIT(9)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_IDORE BIT(8)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_AORE BIT(6)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_R15 BIT(5)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_CTD BIT(4)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_CTV(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_pcie_dev_ctrl_status_2_CTV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_cap_2_reg -
    Bits:  3:1  SLSV(ro) - Supported Link Speeds Vector: This field indicates the supported link speeds of the core. For each bit, a value of 1 indicates that the corresponding link speed is supported, while a value of 0 indicates that the corresponding speed is not supported. The bits corresponding to various link speeds are: Bit 1 = Link Speed 2.5 GT/s, Bit 2 = Link Speed 5 GT/s, Bit 3 = Link Speed 8 GT/s. This field is hardwired to 001 (2.5 GT/s) when the PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 011 (2.5 and 5 GT/s) when the strap is set to 01, and 111 (2.5, 5, and 8 GT/s) when the strap pin is set to 10.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_2_reg      0x000000ec
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_2_reg_SLSV(_x) (((_x) & 0x7) << 1)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_cap_2_reg_SLSV_of(_x) (((_x) >> 1) & 0x7)
/*----------------------------------------------------------------
  Register: i_PCIE_cap_struct_i_link_ctrl_status_2 -
    Bits: 31:22 R19(ro) - Reserved:
    Bits: 21    LE(w1c) - Link Equalization: This bit can be set by the software running on the EndPoint to force the Endpoint to perform link equalization. Setting this bit causes the LTSSM of the core to enter the Recovery state and request its link partner to perform equalization. This bit is cleared when the LTSSM enters the Recovery.Equalization state. It can also be cleared by writing a 1 to this bit position by the host, or writing a 0 from the LMI.
    Bits: 20    EP3S(ro) - Equalization Phase 3 Successful: This bit, when set to 1, indicates that the Phase 3 of the Transmitter Equalization procedure has completed successfully.
    Bits: 19    EP2S(ro) - Equalization Phase 2 Successful: This bit, when set to 1, indicates that the Phase 2 of the Transmitter Equalization procedure has completed successfully.
    Bits: 18    EP1S(ro) - Equalization Phase 1 Successful: This bit, when set to 1, indicates that the Phase 1 of the Transmitter Equalization procedure has completed successfully.
    Bits: 17    EQC(ro) - Equalization Complete: This bit, when set to 1, indicates that the Transmitter Equalization procedure has completed.
    Bits: 16    CDEL(ro) - Current De-Emphasis Level: This status bit indicates the current operating de-emphasis level of the transmitter (0 = -6 dB, 1 = -3.5 dB).
    Bits: 15:12 CDE(rw) - Compliance De-Emphasis: This bit sets the de-emphasis level (for 5 GT/s operation) or the Transmitter Preset level (for 8 GT/s operation) when the LTSSM enters the Polling.Compliance state because of software setting the Enter Compliance bit in this register. At 5 GT/s, the only valid setting are 0 and 1 (0 = -6 dB, 1 = -3.5 dB). STICKY.
    Bits: 11    CS(rw) - Compliance SOS: When this bit is set to 1, the device will transmit SKP ordered sets between compliance patterns. STICKY.
    Bits: 10    EMC(rw) - Enter Modified Compliance: This field is intended for debug and compliance testing purposes only. If this bit is set to 1, the device will transmit the Modified Compliance Pattern when the LTSSM enters the Polling. Compliance substate. STICKY.
    Bits:  9:7  TM(rw) - Transmit Margin: This field is intended for debug and compliance testing purposes only. It controls the non-de-emphasized voltage level at the transmitter outputs. Its encodings are: 000: Normal operating range. 001: 800 - 1200 mV for full swing and 400 - 700 mV for half swing. 010 - 111: See PCI Express Base Specification 2.0. This field is reset to 0 when the LTSSM enters the Polling.Configuration substate during link training. STICKY.
    Bits:  6    SDE(rw) - Selectable De-emphasis: This bit selects the de-emphasis level when the core is operating at 5 GT/s (0 = -6 dB, 1 = -3.5 dB).
    Bits:  5    HASD(rw) - Hardware Autonomous Speed Disable: When this bit is set, the LTSSM is prevented from changing the operating speed of the link, other than reducing the speed to correct unreliable operation of the link.
    Bits:  4    EC(rw) - Enter Compliance: This bit is used to force the Endpoint device to enter the Compliance mode. Software sets this bit to 1 and initiates a hot reset to force the device into the Compliance mode. The target speed for the Compliance mode is determined by the Target Link Speed field of this register. STICKY.
    Bits:  3:0  TLS(rw) - Target Link Speed: This field sets the target speed when the software forces the link into Compliance mode by setting the Enter Compliance bit in this register (0001 = 2.5 GT/s, 0010 = 5 GT/s, 0100 = 8 GT/s). The default value of this field is 0001 (2.5 GT/s) when the PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 0010 (5 GT/s) when the strap is set to 01, and 0011 (8 GT/s) when the strap pin is set to 10. STICKY.
*/
#define NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2  0x000000f0
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_R19(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_R19_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_LE BIT(21)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_EP3S BIT(20)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_EP2S BIT(19)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_EP1S BIT(18)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_EQC BIT(17)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_CDEL BIT(16)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_CDE(_x) (((_x) & 0xf) << 12)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_CDE_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_CS BIT(11)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_EMC BIT(10)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_TM(_x) (((_x) & 0x7) << 7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_TM_of(_x) (((_x) >> 7) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_SDE BIT(6)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_HASD BIT(5)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_EC BIT(4)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_TLS(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_PCIE_cap_struct_i_link_ctrl_status_2_TLS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_AER_enhanced_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Device Serial Number Capability (150 hex) when ARI_ENABLE is strapped low, and to the ARI Capability Structure (140 hex) when ARI_ENABLE is strapped high. This field can also be re-written from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus.
    Bits: 15:0  PEECI(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express AER Extended Capability Structure (0001 hex).
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr 0x00000100
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr_PEECI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_AER_enhanced_cap_hdr_PEECI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_uncorr_err_status -
    Bits: 31:23 R3(ro) - Reserved:
    Bits: 22    UIES(w1c) - Uncorrectable Internal Error Status: This bit is set when the core has detected an internal uncorrectable error (HAL parity error or an uncorrectable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input UNCORRECTABLE_ERROR_IN. This error is not Function-specific. This error is considered fatal by default, and is reported by sending an ERR_FATAL message. STICKY.
    Bits: 21    R2(ro) - Reserved:
    Bits: 20    URES(w1c) - Unsupported Request Error Status: This bit is set when the core has received a request from the link that it does not support. This error is not Function-specific. This error is considered non-fatal by default. In the special case described in Sections 6.2.3.2.4.1 of the PCI Express Specifications, the error is reported by sending an ERR_COR message. In all other cases, the error is reported by sending an ERR_NONFATAL message. The header of the received request that caused the error is logged in the Header Log Registers. STICKY.
    Bits: 19    EES(w1c) - ECRC Error Status: This bit is set when the core has detected an ECRC error in a received TLP. This error is not Function-specific. The header of the received TLP with error is logged in the Header Log Registers. STICKY.
    Bits: 18    MTS(w1c) - Malformed TLP Status: This bit is set when the core receives a malformed TLP from the link. This error is not Function-specific. This error is considered fatal by default, and is reported by sending an ERR_FATAL message. The header of the received TLP with error is logged in the Header Log Registers. STICKY.
    Bits: 17    ROS(w1c) - Receiver Overflow Status: This bit is set when the core receives a TLP in violation of the receive credit currently available. This error is not Function-specific. STICKY.
    Bits: 16    UCS(w1c) - Unexpected Completion Status: This bit is set when the core has received an unexpected Completion packet from the link. This error is not Function-specific. STICKY.
    Bits: 15    CAS(w1c) - Completer Abort Status: This bit is set when the core has returned the Completer Abort (CA) status to a request received from the link. This error is Function-specific. The header of the received request that caused the error is logged in the Header Log Registers. STICKY.
    Bits: 14    CTS(w1c) - Completion Timeout Status: This bit is set when the completion timer associated with an outstanding request times out. This error is Function-specific. This error is considered non-fatal by default. STICKY.
    Bits: 13    FCPES(w1c) - Flow Control Protocol Error Status: This bit is set when certain violations of the flow control protocol are detected by the core. See Section 2.6.1 of the PCI Express Base Specification for details. This error is not Function-specific STICKY.
    Bits: 12    PTS(w1c) - Poisoned TLP Status: This bit is set when the core receives a poisoned TLP from the link. This error is Function-specific. This error is considered non-fatal by default. The error is reported by sending an ERR_NONFATAL message. The header of the received TLP with error is logged in the Header Log Registers. STICKY.
    Bits: 11:5  R1(ro) - Reserved:
    Bits:  4    DLPES(w1c) - Data Link Protocol Error Status: This bit is set when the core receives an Ack or Nak DLLP whose sequence number does not correspond to that of an unacknowledged TLP or that of the last acknowledged TLP (for details, refer to PCI Express Base Specification 1.1, Section 3.5.2). This error is not Function-specific, and is reported by Function 0. STICKY.
    Bits:  3:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status    0x00000104
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R3(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R3_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_UIES BIT(22)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R2 BIT(21)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_URES BIT(20)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_EES BIT(19)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_MTS BIT(18)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_ROS BIT(17)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_UCS BIT(16)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_CAS BIT(15)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_CTS BIT(14)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_FCPES BIT(13)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_PTS BIT(12)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R1(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R1_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_DLPES BIT(4)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_status_R0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_uncorr_err_mask -
    Bits: 31:23 R7(ro) - Reserved:
    Bits: 22    UIEM(rw) - Uncorrectable Internal Error Mask: This bit is set to mask the reporting of internal errors. STICKY.
    Bits: 20    UREM(rw) - Unsupported Request Error Mask: This bit is set to mask the reporting of unexpected requests received from the link. STICKY.
    Bits: 19    EEM(rw) - ECRC Error Mask: This bit is set to mask the reporting of ECRC errors. STICKY.
    Bits: 18    MTM(rw) - Malformed TLP Mask: This bit is set to mask the reporting of malformed TLPs received from the link. STICKY.
    Bits: 17    ROM(rw) - Receiver Overflow Mask: This bit is set to mask the reporting of violations of receive credit. STICKY.
    Bits: 16    UCM(rw) - Unexpected Completion Mask: This bit is set to mask the reporting of unexpected Completions received by the core. STICKY.
    Bits: 15    CAM(rw) - Completer Abort Mask: This bit is set to mask the reporting of the core sending a Completer Abort. STICKY.
    Bits: 14    CTM(rw) - Completion Timeout Mask: This bit is set to mask the reporting of Completion Timeouts. STICKY.
    Bits: 13    FCPEM(rw) - Flow Control Protocol Error Mask: This bit is set to mask the reporting of Flow Control Protocol Errors. STICKY.
    Bits: 12    PTM(rw) - Poisoned TLP Mask: This bit is set to mask the reporting of a Poisoned TLP. STICKY.
    Bits: 11:5  R5(ro) - Reserved:
    Bits:  4    DLPEM(rw) - Data Link Protocol Error Mask: This bit is set to mask the reporting of Data Link Protocol Errors. STICKY.
    Bits:  3:0  R4(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask      0x00000108
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_R7(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_R7_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_UIEM BIT(22)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_UREM BIT(20)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_EEM BIT(19)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_MTM BIT(18)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_ROM BIT(17)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_UCM BIT(16)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_CAM BIT(15)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_CTM BIT(14)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_FCPEM BIT(13)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_PTM BIT(12)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_R5(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_R5_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_DLPEM BIT(4)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_R4(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_mask_R4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_uncorr_err_severity -
    Bits: 31:23 R11(ro) - Reserved:
    Bits: 22    UIES(rw) - Uncorrectable Internal Error Severity: Severity of internal errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 21    R10(ro) - Reserved:
    Bits: 20    URES(rw) - Unsupported Requeset Error Severity: Severity of unexpected requests received from the link (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 19    EES(rw) - ECRC Error Severity: Severity of ECRC errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 18    MTS(rw) - Malformed TLP Severity: Severity of malformed TLPs received from the link (0 = Non- Fatal, 1 = Fatal). STICKY.
    Bits: 17    ROS(rw) - Receiver Overflow Severity: Severity of receive credit violations (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 16    UCS(rw) - Unexpected Completion Severity: Severity of unexpected Completions received by the core (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 15    CAS(rw) - Completer Abort Severity: Severity of sending a Completer Abort (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 14    CTS(rw) - Completion Timeout Severity: Severity of Completion Timeouts (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 13    FCPES(rw) - Flow Control Protocol Error Severity: Severity of Flow Control Protocol Errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 12    PTS(rw) - Poisoned TLP Severity: Severity of a Poisoned TLP error (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits: 11:6  R9(ro) - Reserved:
    Bits:  5    SDER(ro) - Surprise Down Error Severity: SThis bit is hardwired to 1.
    Bits:  4    DLPER(rw) - Data Link Protocol Error Severity: Severity of Data Link Protocol Errors (0 = Non-Fatal, 1 = Fatal). STICKY.
    Bits:  3:0  R8(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity  0x0000010c
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R11(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R11_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_UIES BIT(22)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R10 BIT(21)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_URES BIT(20)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_EES BIT(19)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_MTS BIT(18)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_ROS BIT(17)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_UCS BIT(16)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_CAS BIT(15)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_CTS BIT(14)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_FCPES BIT(13)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_PTS BIT(12)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R9(_x) (((_x) & 0x3f) << 6)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R9_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_SDER BIT(5)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_DLPER BIT(4)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R8(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_uncorr_err_severity_R8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_corr_err_status -
    Bits: 31:16 R14(ro) - Reserved:
    Bits: 15    HLOS(w1c) - Header Log Overflow Status: This bit is set on a Header Log Register overflow, that is, when the header could not be logged in the Header Log Register because it is occupied by a previous header. STICKY.
    Bits: 14    CIES(w1c) - Corrected Internal Error Status: This bit is set when the core has detected an internal correctable error condition (a correctable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input CORRECTABLE_ERROR_IN. This error is not Function-specific. STICKY.
    Bits: 13    ANFES(w1c) - Advisory Non-Fatal Error Status: This bit is set when an uncorrectable error occurs, which is determined to belong to one of the special cases described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications. This causes the core to generate an ERR_COR message in place of an ERR_NONFATAL message. STICKY.
    Bits: 12    RTTS(w1c) - Replay Timer Timeout Status: This bit is set when the replay timer in the Data Link Layer of the core times out, causing the core to retransmit a TLP. This error is not Function-specific. STICKY.
    Bits: 11:9  R13(ro) - Reserved:
    Bits:  8    RNRS(w1c) - Replay Number Rollover Status: This bit is set when the replay count rolls over after three re-transmissions of a TLP at the Data Link Layer of the core. This error is not Function-specific STICKY.
    Bits:  7    BDS(w1c) - Bad DLLP Status: This bit is set when an LCRC error is detected in a received DLLP, and no errors were detected by the Physical Layer. This error is not Function-specific. STICKY.
    Bits:  6    BTS(w1c) - Bad TP Status: This bit is set when an error is detected in a received TLP by the Data Link Layer of the core. The conditions causing this error are: (i) An LCRC error (ii) The packet terminates with EDB symbol, but its LCRC field does not equal the inverted value of the calculated CRC. This error is not Function-specific. STICKY.
    Bits:  5:1  R12(ro) - Reserved:
    Bits:  0    RES(w1c) - Receiver Error Status: This bit is set when an error is detected in the receive side of the Physical Layer of the core (e.g. a bit error or coding violation). This error is not Function-specific. STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status      0x00000110
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_R14(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_R14_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_HLOS BIT(15)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_CIES BIT(14)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_ANFES BIT(13)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_RTTS BIT(12)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_R13(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_R13_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_RNRS BIT(8)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_BDS BIT(7)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_BTS BIT(6)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_R12(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_R12_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_status_RES BIT(0)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_corr_err_mask -
    Bits: 31:16 R17(ro) - Reserved:
    Bits: 15    HLOM(rw) - Header Log Overflow Mask: This bit, when set, masks the generation of error messages in response to a Header Log register overflow. STICKY.
    Bits: 14    CIEM(rw) - Corrected Internal Error Mask: This bit, when set, masks the generation of error messages in response to a corrected internal error condition. STICKY.
    Bits: 13    ANFEM(rw) - Advisory Non-Fatal Error Mask: This bit, when set, masks the generation of error messages in response to an uncorrectable error occur, which is determined to belong to one of the special cases (as described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications). STICKY.
    Bits: 12    RTTM(rw) - Replay Timer Timeout Mask: This bit, when set, masks the generation of error messages in response to a Replay Timer timeout event. STICKY.
    Bits: 11:9  R16(ro) - Reserved:
    Bits:  8    RNRM(rw) - Replay Number Rollover Mask: This bit, when set, masks the generation of error messages in response to a Replay Number Rollover event. STICKY.
    Bits:  7    BDM(rw) - Bad DLLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad DLLP' received. STICKY.
    Bits:  6    BTM(rw) - Bad TLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad TLP' received. STICKY.
    Bits:  5:1  R15(ro) - Reserved:
    Bits:  0    REM(rw) - Receiver Error Mask: This bit, when set, masks the generation of error messages in response to the Physical Layer errors STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask        0x00000114
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_R17(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_R17_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_HLOM BIT(15)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_CIEM BIT(14)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_ANFEM BIT(13)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_RTTM BIT(12)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_R16(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_R16_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_RNRM BIT(8)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_BDM  BIT(7)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_BTM  BIT(6)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_R15(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_R15_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_corr_err_mask_REM  BIT(0)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_advcd_err_cap_ctrl -
    Bits: 31:11 R18(ro) - Reserved:
    Bits: 10    MHRE(ro) - Multiple Header Recording Enable: Setting this bit enables the Function to log multiple error headers in its Header Log Registers. It is hardwired to 0
    Bits:  9    MHRC(ro) - Multiple Header Recording Capable: This bit is set when the Function has the capability to log more than one error header in its Header Log Registers. It is hardwired to 0.
    Bits:  8    EEC(rw) - Enable ECRC Check: Setting this bit enables ECRC checking on the receive side of the core. This bit is writable from the local management bus. STICKY.
    Bits:  7    ECC(ro) - ECRC Check Capability: This read-only bit indicates to the software that the device is capable of checking ECRC in packets received from the link. This bit is writable from the local management bus.
    Bits:  6    EEG(rw) - Enable ECRC Generation: Setting this bit enables the ECRC generation on the transmit side of the core. This bit is writable from the local management bus. STICKY.
    Bits:  5    EGC(ro) - ECRC Generation Capability: This read-only bit indicates to the software that the device is capable of generating ECRC in packets transmitted on the link. This bit is writable from the local management bus.
    Bits:  4:0  FER(ro) - First Error Pointer: This is a 5-bit pointer to the bit position in the Uncorrectable Error Status Register corresponding to the error that was detected first. When there are multiple bits set in the Uncorrectable Error Status Register, this field informs the software which error was observed first. To prevent the field from being overwritten before software was able to read it, this field is not updated while the status bit pointed by it in the Uncorrectable Error Status Register remains set. After the software clears this status bit, a subsequent error condition that sets any bit in the Uncorrectable Error Status Register will update the First Error Pointer. Any uncorrectable error type, including the special cases where the error is reported using an ERR_COR message, will set the First Error Pointer (assuming the software has reset the error pointed by it in the Uncorrectable Error Status Register). STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl   0x00000118
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_R18(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_R18_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_MHRE BIT(10)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_MHRC BIT(9)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_EEC BIT(8)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_ECC BIT(7)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_EEG BIT(6)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_EGC BIT(5)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_FER(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_advcd_err_cap_ctrl_FER_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_0 -
    Bits: 31:0  HD0(ro) - Header DWORD 0: First DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_0            0x0000011c
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_0_HD0(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_0_HD0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_1 -
    Bits: 31:0  HD1(ro) - Header DWORD 1: Second DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_1            0x00000120
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_1_HD1(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_1_HD1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_2 -
    Bits: 31:0  HD2(ro) - Header DWORD 2: Third DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_2            0x00000124
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_2_HD2(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_2_HD2_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_AER_cap_struct_i_hdr_log_3 -
    Bits: 31:0  HD3(ro) - Header DWORD 3: Fourth DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_3            0x00000128
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_3_HD3(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_AER_cap_struct_i_hdr_log_3_HD3_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_ARI_cap_struct_i_ARI_ext_cap_hdr -
    Bits: 31:20 ARINCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. The pointer is set by default to point to the Device Serial Number Capability Structure.
    Bits: 19:16 ARICV(ro) - Capability Version: Specifies the SIG-assigned value for the version of the capability structure. This field is set to 1 by default, but can be modified independently for each Function from the local management bus
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI-SIG to the ARI Extended Capability (000E hex).
*/
#define NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr      0x00000140
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr_ARINCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr_ARINCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr_ARICV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr_ARICV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_ext_cap_hdr_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_ARI_cap_struct_i_ARI_cap_and_ctrl -
    Bits: 31:16 ACR(ro) - ARI Control Register: ARI Control Register not implemented in this core. This field is hardwired to 0.
    Bits: 15:8  NF(ro) - Next Function: Points to the next Physical Function in the device. This field is set by default to point to the next Physical Function assuming all eight Physical Functions are active. It can be rewritten from the local management bus.
    Bits:  1    AFGC(ro) - ACS Function Groups Capability: Relevant only when ACS Capability is supported. This field is hardwired to 0.
    Bits:  0    MFGC(ro) - MFVC Function Groups Capability: Set when device supports arbitration at the Function Group-level. This field is hardwired to 0.
*/
#define NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl     0x00000144
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl_ACR(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl_ACR_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl_NF(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl_NF_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl_AFGC BIT(1)
#define   NFP_PCIEX_PF_i_ARI_cap_struct_i_ARI_cap_and_ctrl_MFGC BIT(0)
/*----------------------------------------------------------------
  Register: i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr -
    Bits: 31:20 SNNCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Power Budgeting Capability Structure. It can be written from local management bus independently for each PF.
    Bits: 19:16 DSNCV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus by writing into Function 0 from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express Device Serial Number Capability (0001 hex).
*/
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr 0x00000150
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr_SNNCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr_SNNCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr_DSNCV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr_DSNCV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_cap_hdr_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_device_serial_num_cap_struct_i_dev_ser_num_0 -
    Bits: 31:0  DSND0(ro) - Device Serial Number, Doubleword 0: This field contains the first 32 bits of the device's serial number.
*/
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_0 0x00000154
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_0_DSND0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_0_DSND0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_device_serial_num_cap_struct_i_dev_ser_num_1 -
    Bits: 31:0  DSND1(ro) - Device Serial Number, Doubleword 1: This field contains the last 32 bits of the device's serial number.
*/
#define NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_1 0x00000158
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_1_DSND1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_device_serial_num_cap_struct_i_dev_ser_num_1_DSND1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Latency Tolerance Reporting (LTR) Capability Structure for PF 0 (1B0 hex) , and to the Dynamic Power Allocation Capability Structure for PF 1 (1C0 hex). This field can be modified independently for each Function from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the Resizable BAR Capability (0015 hex).
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr 0x00000180
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ext_cap_hdr_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_0 -
    Bits: 31:24 R1(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0 0x00000184
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_R1(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_R1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A512G BIT(23)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A256G BIT(22)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A128G BIT(21)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A64G BIT(20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A32G BIT(19)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A16G BIT(18)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A8G BIT(17)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A4G BIT(16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A2G BIT(15)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A1G BIT(14)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A512M BIT(13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A256M BIT(12)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A128M BIT(11)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A64M BIT(10)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A32M BIT(9)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A16M BIT(8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A8M BIT(7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A4M BIT(6)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A2M BIT(5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_A1M BIT(4)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_R0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_0_R0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0 -
    Bits: 31:13 R3(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the first BAR of the PF (0 = 1M, 1 = 2M, ... , 12 = 4G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:5  RBARC(ro) - Resizable BAR Count: Specifies the number of BARs that can be configured through the Resizable BAR Capability Structure for this PF. This field can be modified independently for each PF from the local management bus.
    Bits:  4:3  R2(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0 0x00000188
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_R3(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_R3_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_RBARC(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_RBARC_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_R2(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_R2_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_0_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_1 -
    Bits: 31:24 R5(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R4(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1 0x0000018c
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_R5(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_R5_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A512G BIT(23)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A256G BIT(22)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A128G BIT(21)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A64G BIT(20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A32G BIT(19)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A16G BIT(18)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A8G BIT(17)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A4G BIT(16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A2G BIT(15)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A1G BIT(14)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A512M BIT(13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A256M BIT(12)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A128M BIT(11)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A64M BIT(10)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A32M BIT(9)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A16M BIT(8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A8M BIT(7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A4M BIT(6)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A2M BIT(5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_A1M BIT(4)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_R4(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_1_R4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1 -
    Bits: 31:13 R7(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the second BAR of the PF (0 = 1M, 1 = 2M, ... , 16 = 64G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R6(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1 0x00000190
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_R7(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_R7_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_R6(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_R6_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_1_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_2 -
    Bits: 31:24 R9(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R8(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2 0x00000194
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_R9(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_R9_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A512G BIT(23)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A256G BIT(22)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A128G BIT(21)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A64G BIT(20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A32G BIT(19)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A16G BIT(18)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A8G BIT(17)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A4G BIT(16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A2G BIT(15)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A1G BIT(14)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A512M BIT(13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A256M BIT(12)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A128M BIT(11)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A64M BIT(10)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A32M BIT(9)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A16M BIT(8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A8M BIT(7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A4M BIT(6)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A2M BIT(5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_A1M BIT(4)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_R8(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_2_R8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2 -
    Bits: 31:13 R11(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the third BAR of the PF (0 = 1M, 1 = 2M, ... , 12 = 4G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R10(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2 0x00000198
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_R11(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_R11_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_R10(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_R10_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_2_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_3 -
    Bits: 31:24 R13(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R12(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3 0x0000019c
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_R13(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_R13_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A512G BIT(23)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A256G BIT(22)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A128G BIT(21)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A64G BIT(20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A32G BIT(19)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A16G BIT(18)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A8G BIT(17)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A4G BIT(16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A2G BIT(15)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A1G BIT(14)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A512M BIT(13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A256M BIT(12)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A128M BIT(11)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A64M BIT(10)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A32M BIT(9)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A16M BIT(8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A8M BIT(7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A4M BIT(6)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A2M BIT(5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_A1M BIT(4)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_R12(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_3_R12_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3 -
    Bits: 31:13 R15(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the fourth BAR of the PF (0 = 1M, 1 = 2M, ... , 11 = 2G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R14(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3 0x000001a0
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_R15(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_R15_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_R14(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_R14_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_3_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_4 -
    Bits: 31:24 R13(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R12(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4 0x000001a4
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_R13(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_R13_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A512G BIT(23)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A256G BIT(22)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A128G BIT(21)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A64G BIT(20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A32G BIT(19)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A16G BIT(18)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A8G BIT(17)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A4G BIT(16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A2G BIT(15)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A1G BIT(14)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A512M BIT(13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A256M BIT(12)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A128M BIT(11)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A64M BIT(10)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A32M BIT(9)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A16M BIT(8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A8M BIT(7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A4M BIT(6)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A2M BIT(5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_A1M BIT(4)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_R12(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_4_R12_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4 -
    Bits: 31:13 R15(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the fifth BAR of the PF (0 = 1M, 1 = 2M, ... , 11 = 2G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R14(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4 0x000001a8
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_R15(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_R15_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_R14(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_R14_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_4_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_cap_5 -
    Bits: 31:24 R13(ro) - Reserved:
    Bits: 23    A512G(ro) - Aperture 512G: Indicates that the BAR aperture can be set to 512G.
    Bits: 22    A256G(ro) - Aperture 256G: Indicates that the BAR aperture can be set to 256G.
    Bits: 21    A128G(ro) - Aperture 128G: Indicates that the BAR aperture can be set to 128G.
    Bits: 20    A64G(ro) - Aperture 64G: Indicates that the BAR aperture can be set to 64G.
    Bits: 19    A32G(ro) - Aperture 32G: Indicates that the BAR aperture can be set to 32G.
    Bits: 18    A16G(ro) - Aperture 16G: Indicates that the BAR aperture can be set to 16G.
    Bits: 17    A8G(ro) - Aperture 8G: Indicates that the BAR aperture can be set to 8G.
    Bits: 16    A4G(ro) - Aperture 4G: Indicates that the BAR aperture can be set to 4G.
    Bits: 15    A2G(ro) - Aperture 2G: Indicates that the BAR aperture can be set to 2G.
    Bits: 14    A1G(ro) - Aperture 1G: Indicates that the BAR aperture can be set to 1G.
    Bits: 13    A512M(ro) - Aperture 512M: Indicates that the BAR aperture can be set to 512M.
    Bits: 12    A256M(ro) - Aperture 256M: Indicates that the BAR aperture can be set to 256M.
    Bits: 11    A128M(ro) - Aperture 128M: Indicates that the BAR aperture can be set to 128M.
    Bits: 10    A64M(ro) - Aperture 64M: Indicates that the BAR aperture can be set to 64M.
    Bits:  9    A32M(ro) - Aperture 32M: Indicates that the BAR aperture can be set to 32M.
    Bits:  8    A16M(ro) - Aperture 16M: Indicates that the BAR aperture can be set to 16M.
    Bits:  7    A8M(ro) - Aperture 8M: Indicates that the BAR aperture can be set to 8M.
    Bits:  6    A4M(ro) - Aperture 4M: Indicates that the BAR aperture can be set to 4M.
    Bits:  5    A2M(ro) - Aperture 2M: Indicates that the BAR aperture can be set to 2M.
    Bits:  4    A1M(ro) - Aperture 1M: Indicates that the BAR aperture can be set to 1M.
    Bits:  3:0  R12(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5 0x000001ac
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_R13(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_R13_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A512G BIT(23)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A256G BIT(22)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A128G BIT(21)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A64G BIT(20)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A32G BIT(19)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A16G BIT(18)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A8G BIT(17)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A4G BIT(16)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A2G BIT(15)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A1G BIT(14)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A512M BIT(13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A256M BIT(12)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A128M BIT(11)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A64M BIT(10)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A32M BIT(9)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A16M BIT(8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A8M BIT(7)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A4M BIT(6)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A2M BIT(5)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_A1M BIT(4)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_R12(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_cap_5_R12_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5 -
    Bits: 31:13 R15(ro) - Reserved:
    Bits: 12:8  BARS(rw) - BAR Size: When the Resizable BAR Capability is enabled for the Physical Function, this field controls the BAR aperture for the sixth BAR of the PF (0 = 1M, 1 = 2M, ... , 11 = 2G). This field can be modified independently for each PF from the local management bus.
    Bits:  7:3  R14(ro) - Reserved:
    Bits:  2:0  BARI(ro) - BAR Index: Specifies the index of the BAR controlled by this register. This field can be modified independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5 0x000001b0
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_R15(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_R15_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_BARS(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_BARS_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_R14(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_R14_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_resizable_BAR_cap_struct_i_resize_BAR_ctrl_5_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Transaction Processing Hints (TPH) Requester Capability Structure (274 hex). This field can be modified for PF 0 from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG-assigned value for the version of the capability structure. This field is set by default to 1, but can be modified independently for each Function from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI-SIG to the SR-IOV Extended Capability Structure (0010 hex).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg 0x00000200
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ext_cap_header_reg_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_SRIOV_cap_reg -
    Bits: 31:2  R0(ro) - Reserved:
    Bits:  1    ACHP(ro) - ARI Capable Hierarchy Preserved: A 1 in this bit position indicates that the ARI Capable Hierarchy bit in the SR-IOV Control Register is preserved across certain power state transitions (see the PCI-SIG Single Root IO Virtualization and Sharing Specifications, Version 1.1, Section 3.3.3.5 for details). This bit is set to 1 by default, but can be modified from the local management bus.
    Bits:  0    VFMC(ro) - VF Migration Capable: Set when the core supports VF migration. Hardwired to 0.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_cap_reg      0x00000204
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_cap_reg_R0(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_cap_reg_R0_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_cap_reg_ACHP BIT(1)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_cap_reg_VFMC BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg -
    Bits: 31:16 SSR(ro) - SRIOV Status Register: Not implemented.
    Bits: 15:5  R1(ro) - Reserved:
    Bits:  4    ARIE(rw) - ARI Enable: This bit enables the ARI mode for Virtual Functions. This bit must be set when VF Enable is set.
    Bits:  3    VFMSE(rw) - VF Memory Space Enable: This bit must be set to allow access to the memory space of the VFs associated with this PF.
    Bits:  2    VFMIE(ro) - VF Migration Interrupt Enable: Not supported. Hardwired to 0
    Bits:  1    VFME(ro) - VF Migration Enable: Not supported. Hardwired to 0
    Bits:  0    VFE(rw) - VF Enable: This bit must be set to enable the VFs associated with this PF.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg 0x00000208
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_SSR(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_SSR_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_R1(_x) (((_x) & 0x7ff) << 5)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_R1_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_ARIE BIT(4)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_VFMSE BIT(3)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_VFMIE BIT(2)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_VFME BIT(1)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_SRIOV_ctrl_status_reg_VFE BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_initial_total_VFs_reg -
    Bits: 31:23 R1(ro) - Reserved field.
    Bits: 22:16 TVF(ro) - Total VFs: This field contains the total number of VFs per PF. Its default setting is identical to that of InitialVFs. This field can be rewritten from the local management bus.
    Bits: 15:7  R0(ro) - Reserved field.
    Bits:  6:0  IVF(ro) - Initial VFs: This field contains the initial number of VFs configured for each PF. Its default value is determined by the setting of VF_MODE. This field can be rewritten from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg 0x0000020c
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_R1(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_R1_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_TVF(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_TVF_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_R0(_x) (((_x) & 0x1ff) << 7)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_R0_of(_x) (((_x) >> 7) & 0x1ff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_IVF(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_initial_total_VFs_reg_IVF_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg -
    Bits: 31:24 R0(ro) - Reserved bits.
    Bits: 23:16 FDL(ro) - Function Dependency Link: This field is used to specify dependencies between PFs. It is set to 0 by default, but can be modified independently for each Function from the local management bus.
    Bits: 15:0  NVF(rw) - NumVFs: This field must be set by the software to the number of VFs that it wants to enable for each PF. This field can be changed only when the VF Enable bit in the SR-IOV Control Register is 0. Its value should not exceed the setting of TotalVFs for the corresponding Physical Function. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg 0x00000210
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg_R0(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg_R0_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg_FDL(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg_FDL_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg_NVF(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_func_dep_link_numVFs_reg_NVF_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_offset_stride_reg -
    Bits: 31:16 VFS(ro) - VF Stride: Stride value used to assign RIDs for VFs. The stride value is hardwired to 1 for all Physical Functions.
    Bits: 15:0  FVFO(ro) - First VF Offset: Offset of First VF relative to its PF. Its default value depends on the setting of VF_MODE. The offset is such that the RIDs of VFs are mapped in the range 64 - 79. This field can be re-written independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_offset_stride_reg 0x00000214
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_offset_stride_reg_VFS(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_offset_stride_reg_VFS_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_offset_stride_reg_FVFO(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_offset_stride_reg_FVFO_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_device_id_reg -
    Bits: 31:16 VFDI(ro) - VF Device ID: VF device id assigned to the device. Can be re-written independently for each PF from the local management bus.
    Bits: 15:0  R2(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_device_id_reg   0x00000218
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_device_id_reg_VFDI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_device_id_reg_VFDI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_device_id_reg_R2(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_device_id_reg_R2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_supported_page_size_reg -
    Bits: 31:16 R0(ro) - Reserved bits.
    Bits: 15:0  PS(ro) - Page Sizes: Page sizes supported by the device (one bit for each page size). The core implements only bits 15:0 of this register. Can be re-written independently for each PF from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_supported_page_size_reg 0x0000021c
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_supported_page_size_reg_R0(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_supported_page_size_reg_R0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_supported_page_size_reg_PS(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_supported_page_size_reg_PS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_system_page_size_reg -
    Bits: 31:16 R0(ro) - Reserved bits.
    Bits: 15:0  SPS(rw) - System Page Size: This field must be programmed by software to the current page size in use. The core implements only bits 15:0 of this register. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_system_page_size_reg 0x00000220
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_system_page_size_reg_R0(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_system_page_size_reg_R0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_system_page_size_reg_SPS(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_system_page_size_reg_SPS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_0_reg -
    Bits: 31:8  BAR(rw) - Base Address for Memory BAR: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR. The aperture for this BAR is configurable in the range 1K bytes - 4G bytes. All other bits are not writable, and are read as 0's.
    Bits:  7:4  R6(ro) - Reserved: These bits are reserved when the BAR is used to define a memory address range.
    Bits:  3    PF(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable).
    Bits:  2    SIZE(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64-bit). This field is hardwired to 1.
    Bits:  1    R5(ro) - Reserved: This bit is hardwired to 0 for both memory and IO BARs.
    Bits:  0    MSI(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg       0x00000224
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_BAR(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_BAR_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_R6(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_R6_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_PF  BIT(3)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_SIZE BIT(2)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_R5  BIT(1)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_0_reg_MSI BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_1_reg -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_1_reg       0x00000228
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_1_reg_BAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_1_reg_BAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_2_reg -
    Bits: 31:8  BAR(rw) - Base Address for Memory BAR: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR. The aperture for this BAR is configurable in the range 1K bytes - 4G bytes. All other bits are not writable, and are read as 0's.
    Bits:  7:4  R6(ro) - Reserved: These bits are reserved when the BAR is used to define a memory address range.
    Bits:  3    PF(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable).
    Bits:  2    SIZE(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64-bit). This field is hardwired to 1.
    Bits:  1    R5(ro) - Reserved: This bit is hardwired to 0 for both memory and IO BARs.
    Bits:  0    MSI(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg       0x0000022c
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_BAR(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_BAR_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_R6(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_R6_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_PF  BIT(3)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_SIZE BIT(2)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_R5  BIT(1)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_2_reg_MSI BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_3_reg -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_3_reg       0x00000230
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_3_reg_BAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_3_reg_BAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_4_reg -
    Bits: 31:8  BAR(rw) - Base Address for Memory BAR: This field defines the base address and range of the BAR when it is used to define a memory address range. The number of writable bits in this field is based on the aperture setting of the BAR. The aperture for this BAR is configurable in the range 1K bytes - 4G bytes. All other bits are not writable, and are read as 0's.
    Bits:  7:4  R6(ro) - Reserved: These bits are reserved when the BAR is used to define a memory address range.
    Bits:  3    PF(ro) - Prefetchability: When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable).
    Bits:  2    SIZE(ro) - Size: When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64-bit). This field is hardwired to 1.
    Bits:  1    R5(ro) - Reserved: This bit is hardwired to 0 for both memory and IO BARs.
    Bits:  0    MSI(ro) - Memory Space Indicator: Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O).
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg       0x00000234
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_BAR(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_BAR_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_R6(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_R6_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_PF  BIT(3)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_SIZE BIT(2)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_R5  BIT(1)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_4_reg_MSI BIT(0)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_BAR_5_reg -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_5_reg       0x00000238
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_5_reg_BAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_BAR_5_reg_BAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_SRIOV_cap_struct_i_VF_migration_state_arr_offset_reg -
    Bits: 31:0  MSAOR(ro) - NA
*/
#define NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_migration_state_arr_offset_reg 0x0000023c
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_migration_state_arr_offset_reg_MSAOR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_SRIOV_cap_struct_i_VF_migration_state_arr_offset_reg_MSAOR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value is set as follows: - PF 0: When PCIE_ GENERATION_SEL is configured for Gen3 operation, this pointer points to the Secondary PCI Express Capability Structure (0x300), otherwise it points to the Vendor-Specific (VSEC) Capability (0x400). PF 1: This pointer points to the Vendor-Specific (VSEC) Capability (0x400). This pointer can be modified independently for each PF from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified independently for each PF from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the TPH Requester Capability.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg 0x00000274
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_i_TPH_req_cap_reg -
    Bits: 31:27 R2(ro) - Reserved:
    Bits: 26:16 STS(ro) - ST Table Size: Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on). Max limit is 64 entries when the ST Table is located in the TPH Requester Capability Structure, and 2048 entries when located in the MSI-X table. Each entry is 16 bits long. This field is set by default to 3F hex (64 entries), but can be modified from the local management bus.
    Bits: 15:11 R1(ro) - Reserved:
    Bits: 10:9  STL(ro) - ST Table Location: The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present. (00 = ST Table not present, 01 = ST Table in the TPH Requester values stored in the MSI-X Table in client RAM, 11 = reserved.). This field is set by default to 01, but can be modified from the local management bus.
    Bits:  8    ERS(ro) - Extended TPH Requester Supported: When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix. This bit is hardwired to 0, as the core does not have this capability.
    Bits:  7:3  R0(ro) - Reserved:
    Bits:  2    DSMS(ro) - Device-Specific Mode Supported: A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation. In this mode, the Steering Tags are supplied by the client for each request through the HAL master interface. The client typically chooses the Steering Tag values from the ST Table, but is not required to do so. This bit is set to 1 by default, but can be modified from the local management bus.
    Bits:  1    IVMS(ro) - Interrupt Vector Mode Supported: Hardwired to 0.
    Bits:  0    NSM(ro) - No ST Mode Supported: When set to 1, indicates that this Function supports the 'No ST Mode' for the generation of TPH Steering Tags. In the No ST Mode, the device must use a Steering Tag value of 0 for all requests. This bit is hardwired to 1, as all TPH Requesters are required to support the No ST Mode of operation.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg      0x00000278
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_R2(_x) (((_x) & 0x1f) << 27)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_R2_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_STS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_STS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_R1(_x) (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_R1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_STL(_x) (((_x) & 0x3) << 9)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_STL_of(_x) (((_x) >> 9) & 0x3)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_ERS BIT(8)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_R0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_R0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_DSMS BIT(2)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_IVMS BIT(1)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_cap_reg_NSM BIT(0)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_i_TPH_req_ctrl_reg -
    Bits:  9:8  CRE(rw) - TPH Requester Enable: When set to 1, the Function is RW 0 allowed to generate requests with Transaction Processing Hints. The TPH_REQUESTER_ENABLE[1:0] output of the core copies the setting of this register bit (bit 0 for PF 0 and bit 1 for PF 1. This field can also be written from the local management bus.
    Bits:  7:3  R0(ro) - Reserved bits.
    Bits:  2:0  CSM(rw) - ST Mode: This field selects the ST mode (000 = No Steering Tag Mode, 001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved). The TPH_ST_MODE[5:0] output of the core reflects the setting of this register field (bits 3:0 for PF 0 and bits 5:3 for PF 1). This field can also be written from the local management bus.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg     0x0000027c
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg_CRE(_x) (((_x) & 0x3) << 8)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg_CRE_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg_R0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg_R0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg_CSM(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_i_TPH_req_ctrl_reg_CSM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_TPH_cap_struct_TPH_0_31_[16] -
    Bits: 31:24 STU1(ro) - ST Upper 1: This field is used for the upper 8 bits of the second Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits: 23:16 STL1(rw) - ST Lower 1: Lower 8 bits of the second Steering Tag. This is the 8-bit Steering Tag sent out in requests.
    Bits: 15:8  STU0(ro) - ST Upper 0: This field is used for the upper 8 bits of the first Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits:  7:0  STL0(rw) - ST Lower 0: Lower 8 bits of the first Steering Tag. This is the 8-bit Steering Tag sent out in requests.
*/
#define NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31(_x)           (0x00000280 + (0x4 * ((_x) & 0xf)))
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STU1(_x)    (((_x) & 0xff) << 24)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STU1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STL1(_x)    (((_x) & 0xff) << 16)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STL1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STU0(_x)    (((_x) & 0xff) << 8)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STU0_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STL0(_x)    (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_TPH_cap_struct_TPH_0_31_STL0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to NULL. It can be modified independently for each PF from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified independently for each PF from the local management bus.
    Bits: 15:0  PECI(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the Secondary PCI Express Capability
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg 0x00000300
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg_PECI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_sec_pcie_cap_hdr_reg_PECI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_link_control3_reg -
    Bits: 31:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_link_control3_reg 0x00000304
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_link_control3_reg_R0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_link_control3_reg_R0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg -
    Bits: 31:8  R0(ro) - Reserved:
    Bits:  7:0  LES(w1c) - Lane Error Status: Each of these bits indicates the error status for the corresponding lane. STICKY.
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg 0x00000308
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg_R0(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg_R0_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg_LES(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_error_status_reg_LES_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 0 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 0 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0 0x0000030c
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R3 BIT(31)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R2_1 BIT(23)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R1 BIT(15)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R0_1 BIT(7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg0_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1 0x00000310
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R3 BIT(31)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R2_1 BIT(23)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R1 BIT(15)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R0_1 BIT(7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg1_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2 0x00000314
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R3 BIT(31)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R2_1 BIT(23)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R1 BIT(15)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R0_1 BIT(7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg2_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(ro) - Upstream Port Receiver Preset Hint: Lane 4 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(ro) - Upstream Port Transmitter Preset: Lane 4 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:16 R2(ro) - Reserved:
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(ro) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(ro) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3 0x00000318
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R3 BIT(31)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R2_1 BIT(23)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R2(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R2_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R1 BIT(15)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R0_1 BIT(7)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIEX_PF_i_PCIE_sec_ext_cap_struct_i_lane_equalization_control_reg3_R0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_vendor_id_device_id -
    Bits: 31:16 DID(rw) - Device ID: Device ID assigned by the manufacturer of the device. This field can be rewritten independently for each Function from the local management bus.
    Bits: 15:0  VID(ro) - Vendor ID: This is the Vendor ID assigned by PCI SIG to the manufacturer of the device. The Vendor ID is set in the Vendor ID Register within the local management register block.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_vendor_id_device_id    0x00000000
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_vendor_id_device_id_DID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_vendor_id_device_id_DID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_vendor_id_device_id_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_vendor_id_device_id_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_command_status -
    Bits: 31    DPE(w1c) - Detected Parity Error: This bit is set when the core has received a poisoned TLP. The Parity Error Response enable bit (bit 6) has no effect on the setting of this bit. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 30    SSE(w1c) - Signaled System Error: If the SERR enable bit is 1, this bit is set when the core has sent out a fatal or non-fatal error message on the link to the Root Complex. If the SERR enable bit is 0, this bit remains 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 29    RMA(w1c) - Received Master Abort: This bit is set when the core has received a completion from the link with the Unsupported Request status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 28    RTA(w1c) - Received Target Abort: This bit is set when the core has received a completion from the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position
    Bits: 27    STA(w1c) - Signaled Target Abort: This bit is set when the core has sent a completion to the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 26:25 R6(ro) - Reserved:
    Bits: 24    MDPE(w1c) - Master Data Parity Error: When the Parity Error Response enable bit is 1, the core sets this bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). This bit remains 0 when the Parity Error Response enable bit is 0. This field can also be cleared from the local management bus by writing a 1 into this bit position.
    Bits: 23:21 R5(ro) - Reserved:
    Bits: 20    CL(ro) - Capabilities List: Indicates the presence of PCI Extended Capabilities registers. This bit is hardwired to 1.
    Bits: 19    IS(ro) - Interrupt Status: This bit is valid only when the core is configured to support legacy interrupts. Indicates that the core has a pending interrupt, that is, the core has sent an Assert_INTx message but has not transmitted a corresponding Deassert_INTx message.
    Bits: 18:16 R4(ro) - Reserved:
    Bits: 15:11 R3(ro) - Reserved:
    Bits: 10    IMD(rw) - INTx Message Disabled: Enables or disables the transmission of INTx Assert and De-assert messages from the core. Setting this bit to 1 disables generation of INTx assert/de-assert messages in the core. This field can be written from the local management bus.
    Bits:  9    R2(ro) - Reserved:
    Bits:  8    SE(rw) - SERR Enable: Enables the reporting of fatal and non-fatal errors detected by the core to the Root Complex. This field can be written from the local management bus.
    Bits:  7    R1(ro) - Reserved:
    Bits:  6    PERE(rw) - Parity Error Response Enable: When this bit is 1, the core sets the Master Data Parity Error status bit when it detects the following error conditions: (i) The core receives a poisoned completion from the link in response to a request. (ii) The core sends out a poisoned write request on the link (this may be because an underflow occurred during the packet transfer at the host interface of the core.). When this bit is 0, the Master Data Parity Error status bit is never set. This field can be written from the local management bus.
    Bits:  5:3  R0(ro) - Reserved:
    Bits:  2    BE(rw) - Bus-Master Enable: Enables the device to issue memory and I/O requests from this Function. This field can be written from the local management bus.
    Bits:  1    MSE(rw) - Mem-Space Enable: Enables memory accesses through the core for this PCI Function. This field can be written from the local management bus.
    Bits:  0    ISE(rw) - IO-Space Enable: Enables IO accesses through the core for this PCI Function. This field can be written from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_command_status         0x00000004
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_DPE   BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_SSE   BIT(30)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_RMA   BIT(29)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_RTA   BIT(28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_STA   BIT(27)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R6(_x) (((_x) & 0x3) << 25)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R6_of(_x) (((_x) >> 25) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_MDPE  BIT(24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R5(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R5_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_CL    BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_IS    BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R4(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R4_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R3(_x) (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R3_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_IMD   BIT(10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R2    BIT(9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_SE    BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R1    BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_PERE  BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_R0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_BE    BIT(2)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_MSE   BIT(1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_command_status_ISE   BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_revision_id_class_code -
    Bits: 31:24 CC(ro) - Class Code: Identifies the function of the device. This field can be rewritten independently for each Function from the local management bus
    Bits: 23:16 SCC(ro) - Sub-Class Code: Identifies a sub-category within the selected function. This field can be re-written independently for each Function from the local management bus.
    Bits: 15:8  PIB(ro) - Programming Interface Byte: Identifies the register set layout of the device. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  RID(ro) - Revision ID: Assigned by the manufacturer of the device to identify the revision number of the device. This field can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code 0x00000008
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_CC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_CC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_SCC(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_SCC_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_PIB(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_PIB_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_RID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_revision_id_class_code_RID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_bist_header_latency_cache_line -
    Bits: 31:24 BR(ro) - BIST Register: BIST control register. BIST is not currently supported by the core, and this field is hardwired to 0.
    Bits: 23    DT(ro) - Device Type: Identifies whether the device supports a single Function or multiple Functions. hardwired to zero
    Bits: 22:16 HT(ro) - Header Type: Identifies format of header. This field is hardwired to .
    Bits: 15:8  LT(ro) - Latency Timer: This is an unused field and is hardwired to 0.
    Bits:  7:0  CLS(rw) - Cache Line Size: Cache Line Size Register defined in PCI Specifications 3.0. This field can be read or written, both from the link and from the local management bus, but its value is not used.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line 0x0000000c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_BR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_BR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_DT BIT(23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_HT(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_HT_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_LT(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_LT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_CLS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_bist_header_latency_cache_line_CLS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_0 -
    Bits: 31:12 BA(rw) - Base Address: This field defines the base address of the memory address range. The number of implemented bits in this field determines the size of the range (BAR aperture). The aperture for the BAR 0/1 pair is configurable in the range 4M bytes 128 G bytes. All other bits are not writable, and are read as 0s.
    Bits: 11:0  R0(ro) - Reserved: These bits are hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_0               0x00000010
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_0_BA(_x)      (((_x) & 0xfffff) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_0_BA_of(_x)   (((_x) >> 12) & 0xfffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_0_R0(_x)      (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_0_R0_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_1 -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. The aperture for the BAR 0/1 pair is configurable in the range 4M bytes - 128G bytes. All other bits are not writable, and are read as 0's.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_1               0x00000014
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_1_BAH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_1_BAH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_2 -
    Bits: 31:12 BA(rw) - Base Address: This field defines the base address of the memory address range. The number of implemented bits in this field determines the size of the range (BAR aperture). The aperture for the BAR 2/3 pair is configurable in the range 4M bytes 128 G bytes. All other bits are not writable, and are read as 0s.
    Bits: 11:0  R1(ro) - Reserved: These bits are hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_2               0x00000018
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_2_BA(_x)      (((_x) & 0xfffff) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_2_BA_of(_x)   (((_x) >> 12) & 0xfffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_2_R1(_x)      (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_2_R1_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_3 -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. All the bits are implemented.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_3               0x0000001c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_3_BAH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_3_BAH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_4 -
    Bits: 31:12 BA(rw) - Base Address: This field defines the base address of the memory address range. The number of implemented bits in this field determines the size of the range (BAR aperture). The aperture for the BAR 4/5 pair is configurable in the range 4M bytes 128 G bytes. All other bits are not writable, and are read as 0s.
    Bits: 11:0  R2(ro) - Reserved: These bits are hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_4               0x00000020
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_4_BA(_x)      (((_x) & 0xfffff) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_4_BA_of(_x)   (((_x) >> 12) & 0xfffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_4_R2(_x)      (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_4_R2_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_RC_BAR_5 -
    Bits: 31:0  BAH(rw) - Base Address High: This field defines the upper 32 bits of the base address. The aperture for the BAR 4/5 pair is configurable in the range 4M bytes - 128G bytes. All other bits are not writable, and are read as 0's.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_5               0x00000024
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_5_BAH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_RC_BAR_5_BAH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_prefetch_base_upper -
    Bits: 31:0  value(ro) - value:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_base_upper 0x00000028
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_base_upper_value(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_base_upper_value_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_prefetch_limit_upper -
    Bits: 31:16 value2(rw) - value:
    Bits: 15:0  value(ro) - value:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_limit_upper 0x0000002c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_limit_upper_value2(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_limit_upper_value2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_limit_upper_value(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_prefetch_limit_upper_value_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_io_base_limit_upper -
    Bits: 31:0  value(ro) - value:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_io_base_limit_upper 0x00000030
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_io_base_limit_upper_value(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_io_base_limit_upper_value_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_capabilities_pointer -
    Bits: 31:8  R15(ro) - Reserved:
    Bits:  7:0  CP(ro) - Capabilities Pointer: Contains pointer to the first PCI Capability Structure. It can be re-written independently for every Function from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_capabilities_pointer   0x00000034
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_capabilities_pointer_R15(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_capabilities_pointer_R15_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_capabilities_pointer_CP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_capabilities_pointer_CP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_expan_rom_base_addr -
    Bits: 31:8  RBA(rw) - ROM Base Address: Defines the base address and range of the expansion ROM address space. The number of writable bits in this field determines the size of the range (BAR aperture). All other bits are not writable, and are read as 0s. These bits can be written from the local management bus.
    Bits:  7:1  R14(ro) - Reserved:
    Bits:  0    ADE(rw) - Address Decode Enable: This bit must be set to 1 by the configuration software to enable the expansion ROM. This bit can also be written from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_expan_rom_base_addr    0x00000038
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_expan_rom_base_addr_RBA(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_expan_rom_base_addr_RBA_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_expan_rom_base_addr_R14(_x) (((_x) & 0x7f) << 1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_expan_rom_base_addr_R14_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_expan_rom_base_addr_ADE BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_intrpt_line_intrpt_pin -
    Bits: 31:11 R16(ro) - Reserved:
    Bits: 10:8  IPR(ro) - Interrupt Pin Register: Identifies the interrupt input (A, B, C, D) to which this Functions interrupt output is connected to (01 = INTA, 02 = INTB, 03 = INTC, 04 = INTD). The assignment of interrupt inputs to Functions is fixed when the core is configured. This field can be re-written independently for each Function from the local management bus. Default values - PF0: 01 (INTA), PF1: 02 (INTB).
    Bits:  7:0  ILR(rw) - Interrupt Line Register: Identifies the IRQx input of the interrupt controller at the Root Complex that is activated by this Functions interrupt (00 = IRQ0, ... , 0F = IRQ15, FF = unknown or not connected). This field is writable from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin 0x0000003c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin_R16(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin_R16_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin_IPR(_x) (((_x) & 0x7) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin_IPR_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin_ILR(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_intrpt_line_intrpt_pin_ILR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_rsvd_010_01F_[16] -
  Register: i_rc_pcie_base_rsvd_22_30_[15] -
  Register: i_rc_pcie_base_rsvd_35_38_[4] -
  Register: i_rc_pcie_base_rsvd_3D_3F_[3] -
  Register: i_rc_pcie_base_rsvd_4E_53_[6] -
  Register: i_rc_pcie_base_rsvd_57_C0_[106] -
    Bits: 31:0  rsvd(ro) - NA
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_rsvd_010_01F(_x)         (0x00000040 + (0x4 * ((_x) & 0xf)))
#define NFP_PCIEX_RC_i_rc_pcie_base_rsvd_22_30(_x)           (0x00000088 + (0x4 * ((_x) & 0xf)))
#define NFP_PCIEX_RC_i_rc_pcie_base_rsvd_35_38(_x)           (0x000000d4 + (0x4 * ((_x) & 0x3)))
#define NFP_PCIEX_RC_i_rc_pcie_base_rsvd_3D_3F(_x)           (0x000000f4 + (0x4 * ((_x) & 0x3)))
#define NFP_PCIEX_RC_i_rc_pcie_base_rsvd_4E_53(_x)           (0x00000138 + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_RC_i_rc_pcie_base_rsvd_57_C0(_x)           (0x0000015c + (0x4 * ((_x) & 0x7f)))
#define   NFP_PCIEX_RC_i_rc_pcie_base_RC_generic_reserved_reg_rsvd(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_RC_generic_reserved_reg_rsvd_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pwr_mgmt_cap -
    Bits: 31    PSDCS(ro) - PME Support for D3(cold) State: Indicates whether the Function is capable of sending PME messages when in the D3cold state. Because the device does not have aux power, this bit is hardwired to 0.
    Bits: 30    PSDHS(ro) - PME Support for D3(hot) Statue: Indicates whether the Function is capable of sending PME messages when in the D3hot state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 28    PSD1S(ro) - PME Support for D1 State: Indicates whether the Function is capable of sending PME messages when in the D1 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 27    PSD0S(ro) - PME Support for D0 State: Indicates whether the Function is capable of sending PME messages when in the D0 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 26    D2S(ro) - D2 Support: Set if the Function supports the D2 power state. Currently hardwired to 0.
    Bits: 25    D1S(ro) - D1 Support: Set if the Function supports the D1 power state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 24:22 MCRAPS(ro) - Max Current Required from Aux Power Supply: Specifies the maximum current drawn by the device from the aux power source in the D3cold state. This field is not implemented in devices not supporting PME notification when in the D3cold state, and is therefore hardwired to 0.
    Bits: 21    DSI(ro) - Device Specific Initialization Bit: This bit, when set, indicates that the device requires additional configuration steps beyond setting up its PCI configuration space, to bring it to the D0 active state from the D0 uninitialized state. This bit is hardwired to 0.
    Bits: 20    R0(ro) - Reserved:
    Bits: 19    PC(ro) - PME Clock: Not applicable to PCI Express. This bit is hardwired to 0.
    Bits: 18:16 VID(ro) - Version ID: Indicates the version of the PCI Bus Power Management Specifications that the Function implements. This field is set by default to 011 (Version 1.2). It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. By default, this points to the MSI Capability Structure. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for Power Management. This field is set by default to 01 hex. It can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap           0x00000080
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_PSDCS   BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_PSDHS   BIT(30)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_PSD1S   BIT(28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_PSD0S   BIT(27)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_D2S     BIT(26)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_D1S     BIT(25)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_MCRAPS(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_MCRAPS_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_DSI     BIT(21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_R0      BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_PC      BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_VID(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_VID_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_CP(_x)  (((_x) & 0xff) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_cap_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep -
    Bits: 31:24 DR(ro) - Data Register: This optional register is not implemented in the Databahn PCIe core. This field is hardwired to 0.
    Bits: 23:16 R1(ro) - Reserved:
    Bits: 15    PMES(w1c) - PME Status: When PME notification is enabled, writing a 1 into this bit position from the local management bus sets this bit and causes the core to send a PME message from the associated Function. When the Root Complex processes this message, it will turn off this bit by writing a 1 into this bit position though a Config Write. This bit can be set or cleared from the local management bus, by writing a 1 or 0, respectively. It can only be cleared from the configuration path (by writing a 1).
    Bits: 14:9  R2(ro) - Reserved:
    Bits:  8    PE(rw) - PME Enable: Setting this bit enables the notification of PME events from the associated Function. This bit can be set also by writing into this register from the local management bus.
    Bits:  7:4  R3(ro) - Reserved:
    Bits:  3    NSR(ro) - No Soft Reset: When this bit is set to 1, the Function will maintain all its state in the PM state D3hot. The software is not required to re-initialize the Function registers on the transition back to D0. This bit is set to 1 by default, but can be modified independently for each PF from the local management bus.
    Bits:  2    R4(ro) - Reserved:
    Bits:  1:0  PS(rw) - Power State: Indicates the power state this Function is currently in. This field can be read by the software to monitor the current power state, or can be written to cause a transition to a new state. The valid settings are 00 (state D0), 01 (state D1) and 11 (state D3hot). The software should not write any other value into this field. This field can also be written from the local management bus independently for each Function.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep 0x00000084
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_DR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_DR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R1(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_PMES BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R2(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R2_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_PE BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R3(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_NSR BIT(3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_R4 BIT(2)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_PS(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pwr_mgmt_ctrl_stat_rep_PS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_cap -
    Bits: 31:28 R4(ro) - Reserved:
    Bits: 27:26 CPLS(rw) - Captured Power Limit Scale: Specifies the scale used by Slot Power Limit Value
    Bits: 25:18 CSP(rw) - Captured Slot Power Limit Value: Specifies upper limit on power supplied by slot.
    Bits: 15    RER(rw) - Role-Based Error Reporting: Enables role-based errer reporting. It is set by default to 1.
    Bits: 14:12 R3(ro) - Reserved:
    Bits: 11:9  AL1L(rw) - Acceptable L1 Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L1 to L0.
    Bits:  8:6  AL0L(rw) - Acceptable L0S Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L0S to L0.
    Bits:  5    ETFS(ro) - Extended Tag Field Supported: Set when device allows the tag field to be extended from 5 to 8 bits. It is hardwired to 1.
    Bits:  4:3  PFS(ro) - Phantom Functions Supported: This field is used to extend the tag field by combining unused Function bits with the tag bits. This field is hardwired to 00 to disable this feature.
    Bits:  2:0  MP(rw) - Max Payload Size: Specifies maximum payload size supported by the device
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap               0x000000c4
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_R4(_x)      (((_x) & 0xf) << 28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_R4_of(_x)   (((_x) >> 28) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_CPLS(_x)    (((_x) & 0x3) << 26)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_CPLS_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_CSP(_x)     (((_x) & 0xff) << 18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_CSP_of(_x)  (((_x) >> 18) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_RER         BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_R3(_x)      (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_R3_of(_x)   (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_AL1L(_x)    (((_x) & 0x7) << 9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_AL1L_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_AL0L(_x)    (((_x) & 0x7) << 6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_AL0L_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_ETFS        BIT(5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_PFS(_x)     (((_x) & 0x3) << 3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_PFS_of(_x)  (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_MP(_x)      (((_x) & 0x7) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_MP_of(_x)   (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_dev_ctl_stat -
    Bits: 31:22 R8(ro) - Reserved:
    Bits: 21    TP(ro) - Transaction Pending: Indicates if any of the Non-Posted requests issued by the RC are still pending.
    Bits: 20    APD(ro) - Aux Power Detected: Set when auxiliary power is detected by the device. This is an unused field.
    Bits: 19    URD(rw) - Unsupported Request Detected: Set to 1 by the core when it receives an unsupported request.
    Bits: 18    FED(rw) - Fatal Error Detected: Set to 1 by the core when it detects a fatal error, regardless of whether the error is masked.
    Bits: 17    NFED(rw) - Non-Fatal Error Detected: Set to 1 by the core when it detects a non-fatal error, regardless of whether the error is masked.
    Bits: 16    CED(rw) - Correctable Error Detected: Set to 1 by the core when it detects a correctable error, regardless of whether the error is masked.
    Bits: 15    R7(ro) - Reserved: Hardwired to 0.
    Bits: 14:12 MRR(rw) - Max Read Request Size: Specifies the maximum size allowed in read requests generated by the device.
    Bits: 11    ENS(rw) - Enable No Snoop: When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed.
    Bits: 10:8  R6(ro) - Reserved: Hardwired to 0
    Bits:  7:5  MP(rw) - Max Payload Size: Specifies the maximum TLP payload size configured. The device must be able to receive a TLP of this maximum size, and should not generate TLP's larger than this value. Software must set this field based on the maximum payload size in the Device Capabilities Register, and the capability of the other side.
    Bits:  4    ERO(rw) - Enable Relaxed Ordering: When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it., when the transactions do not require Strong Ordering.
    Bits:  3:0  R5(ro) - Reserved: Hardwired to 0.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat      0x000000c8
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R8(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R8_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_TP BIT(21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_APD BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_URD BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_FED BIT(18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_NFED BIT(17)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_CED BIT(16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R7 BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_MRR(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_MRR_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_ENS BIT(11)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R6(_x) (((_x) & 0x7) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R6_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_MP(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_MP_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_ERO BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R5(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_dev_ctl_stat_R5_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_cap -
    Bits: 31:24 PN(ro) - Port Number: Specifies the port number assigned to the PCI Express link connected to this device. This field is hardwired to 0.
    Bits: 23:22 R9(ro) - Reserved:
    Bits: 21    LBNC(ro) - Link Bandwidth Notification Capability: A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms.
    Bits: 20    DARC(ro) - Data Link Layer Active Reporting Capability: Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 19    SERC(ro) - Surprise Down Error Reporting Capability: Indicates the capability of the device to report a Surprise Down error condition. This bit is hardwired to 0, as this version of the core does not support the feature.
    Bits: 18    CPM(ro) - Clock Power Management: Indicates that the device supports removal of reference clocks. Not supported in this version of the core. Hardwired to 0.
    Bits: 17:15 L1EL(rw) - L1 Exit Latency: Specifies the exit latency from L1 state. This parameter is dependent on the Physical Layer implementation.
    Bits: 14:12 L0EL(rw) - L0S Exit Latency: Specifies the time required for the device to transition from L0S to L0. This parameter is dependent on the Physical Layer implementation.
    Bits: 11:10 ASPM(rw) - Active State Power Management: Indicates the level of ASPM support provided by the device.
    Bits:  9:4  MLW(ro) - Max Link Width: Indicates the maximum number of lanes supported by the device. This field is hardwired based on the setting of the LANE_COUNT_IN strap input.
    Bits:  3:0  MLS(ro) - Max Link Speed: Indicates the speeds supported by the link (2.5 GT/s, 5 GT/s, and 8 GT/s per lane). This field is hardwired to 0001 (2.5 GT/s) when the strap input PCIE_GENERATION_SEL is set to 00, to 0010 (5 GT/s) when the strap is set to 01, and to 0011 (8 GT/s) when the strap input is set to 10.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap               0x000000cc
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_PN(_x)      (((_x) & 0xff) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_PN_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_R9(_x)      (((_x) & 0x3) << 22)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_R9_of(_x)   (((_x) >> 22) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_LBNC        BIT(21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_DARC        BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_SERC        BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_CPM         BIT(18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_L1EL(_x)    (((_x) & 0x7) << 15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_L1EL_of(_x) (((_x) >> 15) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_L0EL(_x)    (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_L0EL_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_ASPM(_x)    (((_x) & 0x3) << 10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_ASPM_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_MLW(_x)     (((_x) & 0x3f) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_MLW_of(_x)  (((_x) >> 4) & 0x3f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_MLS(_x)     (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_MLS_of(_x)  (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_ctl_stat -
    Bits: 31    LABS(ro) - Link Autonomous Bandwidth Status: The core sets this bit to indicate a change in the link speed or width under some conditions. This bit is not implemented.
    Bits: 30    LBMS(ro) - Link Bandwidth Management Status: The core sets this bit to indicate a change in the link speed or width under some conditions. This bit is not implemented.
    Bits: 29    DA(ro) - Data Link Layer Active: Indicates the status of the Data Link Layer. Set to 1 when the DL Control and Management State Machine has reached the DL_Active state. This bit is hardwired to 0 in this version of the core.
    Bits: 28    SCC(ro) - Slot Clock Configuration: Indicates that the device uses the reference clock provided by the connector. This bit is hardwired to 0.
    Bits: 27    LTS(ro) - Link Training Status: This bit is set to 1 when the LTSSM is in the Recovery of Configuration states, or if a 1 has been written to the Retrain Link bit but the link training has not yet begun.
    Bits: 26    R12(ro) - Reserved:
    Bits: 25:20 NLW(ro) - Negotiated Link Width: Set at the end of link training to the actual link width negotiated between the two sides (0000001 = 1, 000010 = 2, 000100 = 4, 001000 = 8).
    Bits: 19:16 NLS(ro) - Negotiated Link Speed: Negotiated link speed of the device. The supported speeds are 2.5 GT/s per lane (0001), 5 GT/s per lane (0010), and 8 GT/s per lane (0011).
    Bits: 15:12 R11(ro) - Reserved:
    Bits: 11    LABIE(ro) - Link Autonomous Bandwidth Interrupt Enable: This bit enables the generation of a local interrupt when the Link Autonomous Bandwidth Status bit has been set. This bit is not implemented.
    Bits: 10    LBMIE(ro) - Link Bandwidth Management Interrupt Enable: This bit enables the generation of a local interrupt when the Link Bandwidth Management Status bit has been set. This bit is not implemented.
    Bits:  9    HAWD(rw) - Hardware Autonomous Width Disable: This bit, when set, prevents the LTSSM from changing the width of the link, other than reducing the link width to correct unreliable operation.
    Bits:  8    ECPM(ro) - Enable Clock Power Management: This field is hardwired to 0.
    Bits:  7    ES(rw) - Extended Synch:
    Bits:  6    CCC(rw) - Common Clock Configuration: A value of 0 indicates that the reference clock of this device is asynchronous to that of the upstream device. A value of 1 indicates that the reference clock is common.
    Bits:  5    RL(rw) - Retrain Link: Setting this bit to 1 causes the LTSSM to initiate link training. This bit always reads as 0.
    Bits:  4    LD(rw) - Link Disable: Writing a 1 to this bit position causes the LTSSM to go to the Disable Link state. The LTSSM stays in the Disable Link state while this bit is set.
    Bits:  3    RCB(rw) - Read Completion Boundary: Indicates the Read Completion Boundary of the Root Port (0 = 64 bytes, 1 = 128 bytes).
    Bits:  2    R10(ro) - Reserved:
    Bits:  1:0  ASPMC(rw) - Active State Power Management Control: Controls the level of ASPM support on the PCI Express link associated with the function. The allowed values are 00 (ASPM disabled) and 01 (L0S entry enabled).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat          0x000000d0
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_LABS   BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_LBMS   BIT(30)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_DA     BIT(29)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_SCC    BIT(28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_LTS    BIT(27)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_R12    BIT(26)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_NLW(_x) (((_x) & 0x3f) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_NLW_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_NLS(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_NLS_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_R11(_x) (((_x) & 0xf) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_R11_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_LABIE  BIT(11)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_LBMIE  BIT(10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_HAWD   BIT(9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_ECPM   BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_ES     BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_CCC    BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_RL     BIT(5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_LD     BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_RCB    BIT(3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_R10    BIT(2)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_ASPMC(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_ASPMC_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_cap_2 -
    Bits: 31:20 R16(ro) - Reserved:
    Bits: 19:18 OBFF(ro) - OBFF Supported: A 1 in this bit position indicates that the Function supports the Optimized Buffer Flush/Fill (OBFF) capability using message signaling.
    Bits: 17:13 R15(ro) - Reserved:
    Bits: 12    TPHC(ro) - TPH Completer Supported: This bit when set, indicates that the Function is capable of serving as a completer for requests with Transaction Processing Hints (TPH). This bit is set to 1 by default.
    Bits: 11:10 R14(ro) - Reserved:
    Bits:  9    ACS128(ro) - 128-bit CAS Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for the Compare-and-Swap (CAS) Atomic Operation with 128 bit operands.
    Bits:  8    ACS64(ro) - 64-bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 64-bit Atomic Operations.
    Bits:  7    ACS32(ro) - 32-Bit Atomic Op Completer Supported: A 1 in this bit position indicates that the Function supports completer capability for 32-bit Atomic Operations.
    Bits:  6:5  ACRS(rw) - Automic routing supported:
    Bits:  4    CTDS(ro) - Completion Timeout Disable Supported: A 1 in this field indicates that the associated Function supports the capability to turn off its Completion timeout.
    Bits:  3:0  CTR(ro) - Completion Timeout Ranges: Specifies the Completion Timeout values supported by the device. This field is set by default to 0010 (10 ms - 250 ms), but can be modified from the local management bus. The actual timeout values are in two programmable local management registers, which allow the timeout settings of the two sub-ranges within Range B to be programmed independently.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2             0x000000e4
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_R16(_x)   (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_R16_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_OBFF(_x)  (((_x) & 0x3) << 18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_OBFF_of(_x) (((_x) >> 18) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_R15(_x)   (((_x) & 0x1f) << 13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_R15_of(_x) (((_x) >> 13) & 0x1f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_TPHC      BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_R14(_x)   (((_x) & 0x3) << 10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_R14_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_ACS128    BIT(9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_ACS64     BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_ACS32     BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_ACRS(_x)  (((_x) & 0x3) << 5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_ACRS_of(_x) (((_x) >> 5) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_CTDS      BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_CTR(_x)   (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_cap_2_CTR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_pcie_ctl_stat_2 -
    Bits: 31:15 R20(ro) - Reserved:
    Bits: 14:13 OBFFE(rw) - OBFF Enable: Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device. Valid settings are 00 (disabled), 01 (Variation A), and 10 (Variation B).
    Bits: 12:10 R19(ro) - Reserved:
    Bits:  9    ICE(rw) - IDO Completion Enable: When this bit is 1, the RC is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates.
    Bits:  8    IRE(rw) - IDO Request Enable: When this bit is 1, the RC is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates.
    Bits:  7    R18(ro) - Reserved:
    Bits:  6    AORE(rw) - Atomic Op Requester Enable: This bit must be set to enable the generation of Atomic Op Requests. If the client logic attempts to send an Atomic Op when this bit is not set, logic in the core will nullify the TLP on its way to the link.
    Bits:  5    AFE(ro) - ARI Forwarding Enable: A 1 in this filed indicates that the port treats fields 7:0 of the ID as function number while converting a Type 1 config packet to type 0 config packet.
    Bits:  4    CTD(rw) - Completion Timeout Disable: Setting this bit disables the Completion Timeout in the device.
    Bits:  3:0  CTV(rw) - Completion Timeout Value: Specifies the Completion Timeout value for the device. Allowable values are 0101 (sub-range 1) and 0110 (sub-range 2). The corresponding timeout values are stored in the local management register's Completion Timeout Interval Registers 0 and 1, respectively.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2        0x000000e8
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_R20(_x) (((_x) & 0x1ffff) << 15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_R20_of(_x) (((_x) >> 15) & 0x1ffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_OBFFE(_x) (((_x) & 0x3) << 13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_OBFFE_of(_x) (((_x) >> 13) & 0x3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_R19(_x) (((_x) & 0x7) << 10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_R19_of(_x) (((_x) >> 10) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_ICE  BIT(9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_IRE  BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_R18  BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_AORE BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_AFE  BIT(5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_CTD  BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_CTV(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_pcie_ctl_stat_2_CTV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_cap_2 -
    Bits: 31:4  R22(ro) - Reserved:
    Bits:  3:1  SLSV(ro) - Supported Link Speeds Vector: This field indicates the supported link speeds of the core. For each bit a value of 1 indicates that the corresponding link speed is supported, while a value of 0 indicates the corresponding speed is not supported. The bits corresponding to various link speeds are: Bit 1 = 2.5 GT/s, Bit 2 = 5 GT/s, Bit 3 = 8 GT/s. This field is hardwired to 001 (2.5 GT/s) when PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 011 (2.5 and 5 GT/s) when the strap is set to 01, and 111 (2.5, 5, and 8 GT/s) when the strap pin is set to 10.
    Bits:  0    R21(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_2             0x000000ec
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_2_R22(_x)   (((_x) & 0xfffffff) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_2_R22_of(_x) (((_x) >> 4) & 0xfffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_2_SLSV(_x)  (((_x) & 0x7) << 1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_2_SLSV_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_cap_2_R21       BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_ctl_stat_2 -
    Bits: 31:17 R24(ro) - Reserved:
    Bits: 16    CDEL(ro) - Current De-Emphasis Level: This status bit indicates the current operating de-emphasis level of the transmitter (0 = -6dB, 1 = -3.5dB).
    Bits: 15:13 R23(ro) - Reserved:
    Bits: 12    CD(rw) - Compliance De-Emphasis: This bit sets the de-emphasis level when the LTSSM enters the Polling.Compliance state because of software setting the Enter Compliance bit in this register (0 = -6dB, 1 = -3.5dB).
    Bits: 11    CS(rw) - Compliance SOS: When this bit is set to 1, the device will transmit SKP ordered sets between compliance patterns.
    Bits: 10    EMC(rw) - Enter Modified Compliance: This field is intended for debug and compliance testing purposes only. If this bit is set to 1, the device will transmit the Modified Compliance Pattern when the LTSSM enters the Polling.Compliance substate.
    Bits:  9:7  TM(rw) - Transmit Margin: This field is intended for debug and compliance testing purposes only. It controls the non-deemphasized voltage level at the transmitter outputs. Its encodings are: 000 = Normal operating range, 001 = 800 - 1200 mV for full swing and 400 - 700 mV for half swing, 010 - 111 = See PCI Express Base Specification 2.0. This field is reset to 0 when th LTSSM enters the Polling.Configuration substate during link training.
    Bits:  6    SD(ro) - Selectable De-Emphasis: This field is reserved for Endpoints, and is hardwired to 0.
    Bits:  5    HASD(rw) - Hardware Autonomous Speed Disable: When this bit is set, the LTSSM is prevented from changing the operating speed of the link, other than reducing the speed to correct unreliable operation of the link.
    Bits:  4    EC(rw) - Enter Compliance: This bit is used to force the Endpoint device to enter the Compliance mode. Software sets this bit to 1 and initiates a hot reset to force the device into the Compliance mode. The target speed for the Compliance mode is determined by the Target Link Speed field of this register.
    Bits:  3:0  TLS(rw) - Target Link Speed: This field sets the target speed when the software forces the link into Compliance mode by setting the Enter Compliance bit in this register (0001 = 2.5 GT/s, 0010 = 5 GT/s, 0011 = 8 GT/s). The default value of this field is 0001 (2.5 GT/s) when the PCI_GENERATION_SEL[1:0] strap pins of the core are set to 00, 0010 (5 GT/s) when the strap is set to 01, and 0011 (8 GT/s) when the strap pin is set to 10.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2        0x000000f0
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_R24(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_R24_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_CDEL BIT(16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_R23(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_R23_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_CD   BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_CS   BIT(11)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_EMC  BIT(10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_TM(_x) (((_x) & 0x7) << 7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_TM_of(_x) (((_x) >> 7) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_SD   BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_HASD BIT(5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_EC   BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_TLS(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_ctl_stat_2_TLS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_AER_enhncd_cap -
    Bits: 31:20 NCO(rw) - Next Capability Offset: Indicates offset to the next PCI Express capability structure.
    Bits: 19:16 CV(rw) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express AER Extended Capability Structure (0001 hex).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap         0x00000100
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_AER_enhncd_cap_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_uncorr_err_stat -
    Bits: 31:23 R28(w1c) - Reserved:
    Bits: 22    UIE(w1c) - Uncorrectable Internal Error Status: This bit is set when the core has detected an internal uncorrectable error (HAL parity error or an uncorrectable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input UNCORRECTABLE_ERROR_IN. This error is considered fatal by default.
    Bits: 21    R27(w1c) - Reserved:
    Bits: 20    URE(w1c) - Unsupported Request Error Status: This bit is set when the core has received a request from the link that it does not support. This error is not Function-specific. This error is considered non-fatal by default, except for the special case outlined in PCI Express Base Specification 2.0. The header of the received request that caused the error is logged in the Header Log Registers.
    Bits: 19    EE(w1c) - ECRC Error Status: This bit is set when the core has detected an ECRC error in a received TLP.
    Bits: 18    MT(w1c) - Malformed TLP Status: This bit is set when the core receives a malformed TLP from the link. This error is considered fatal by default. The header of the received TLP with error is logged in the Header Log Registers.
    Bits: 17    RO(w1c) - Receiver Overflow Status: This bit is set when the core receives a TLP in violation of the receive credit currently available.
    Bits: 16    UC(w1c) - Unexpected Completion Status: This bit is set when the core has received an unexpected Completion packet from the link.
    Bits: 15    CA(w1c) - Completer Abort Status: This bit is set when the core has returned the Completer Abort (CA) status to a request received from the link. This error is considered non-fatal by default, except for the special cases outlined in PCI Express Base Specification 2.0. The header of the received request that caused the error is logged in the Header Log Registers.
    Bits: 14    CT(w1c) - Completion Timeout Status: This bit is set when the completion timer associated with an outstanding request times out. This error is considered non-fatal by default.
    Bits: 13    FCPE(w1c) - Flow Control Protocol Error Status: This bit is set when certain violations of the flow control protocol are detected by the core.
    Bits: 12    PT(w1c) - Poisoned TLP Status: This bit is set when the core receives a poisoned TLP from the link. This error is considered non-fatal by default. The header of the received TLP with error is logged in the Header Log Registers.
    Bits: 11:5  R26(ro) - Reserved:
    Bits:  4    DLPE(w1c) - Data Link Protocol Error Status: This bit is set when the core receives an Ack or Nak DLLP whose sequence does not correspond to that of an unacknowledged TLP or that of the last acknowledged TLP (for details, refer to the PCI Express Base Specifications).
    Bits:  3:0  R25(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat        0x00000104
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R28(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R28_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_UIE  BIT(22)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R27  BIT(21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_URE  BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_EE   BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_MT   BIT(18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_RO   BIT(17)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_UC   BIT(16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_CA   BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_CT   BIT(14)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_FCPE BIT(13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_PT   BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R26(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R26_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_DLPE BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R25(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_stat_R25_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_uncorr_err_mask -
    Bits: 31:23 R32(ro) - Reserved:
    Bits: 22    UIEM(rw) - Uncorrectable Internal Error Mask: This bit is set to mask the reporting of internal errors.
    Bits: 21    R31(ro) - Reserved:
    Bits: 20    UREM(rw) - Unsupported Request Error Mask: This bit is set to mask the reporting of unexpected requests received from the link.
    Bits: 19    EEM(rw) - ECRC Error Mask: This bit is set to mask the reporting of ECRC errors.
    Bits: 18    MTM(rw) - Malformed TLP Mask: This bit is set to mask the reporting of malformed TLPs received from the link.
    Bits: 17    ROM(rw) - Receiver Overflow Mask: This bit is set to mask the reporting of violations of receive credit.
    Bits: 16    UCM(rw) - Unexpected Completion Mask: This bit is set to mask the reporting of unexpected Completions received by the core.
    Bits: 15    CAM(rw) - Completer Abort Mask: This bit is set to mask the reporting of the core sending a Completer Abort.
    Bits: 14    CTM(rw) - Completion Timeout Mask: This bit is set to mask the reporting of Completion Timeouts.
    Bits: 13    FCPER(rw) - Flow Control Protocol Error Mask: This bit is set to mask the reporting of Flow Control Protocol Errors.
    Bits: 12    PTM(rw) - Poisoned TLP Mask: This bit is set to mask the reporting of a Poisoned TLP.
    Bits: 11:5  R30(ro) - Reserved:
    Bits:  4    DLPER(rw) - Data Link Protocol Error Mask: This bit is set to mask the reporting of Data Link Protocol Errors.
    Bits:  3:0  R29(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask        0x00000108
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R32(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R32_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_UIEM BIT(22)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R31  BIT(21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_UREM BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_EEM  BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_MTM  BIT(18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_ROM  BIT(17)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_UCM  BIT(16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_CAM  BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_CTM  BIT(14)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_FCPER BIT(13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_PTM  BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R30(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R30_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_DLPER BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R29(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_mask_R29_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_uncorr_err_svrty -
    Bits: 31:23 R36(ro) - Reserved:
    Bits: 22    Uncorr_Intrnl_Err_Svrty(rw) - Uncorrectable Internal Error Severity: Severity of internal errors (0 = Non-Fatal, 1 = Fatal).
    Bits: 21    R35(ro) - Reserved:
    Bits: 20    URES(rw) - Unsupported Request Error Severity: Severity of unexpected requests received from the link (0 = Non-Fatal, 1 = Fatal).
    Bits: 19    EES(rw) - ECRC Error Severity: Severity of ECRC errors (0 = Non-Fatal, 1 = Fatal).
    Bits: 18    MTS(rw) - Malformed TLP Severity: Severity of malformed TLPs received from the link (0 = Non-Fatal, 1 = Fatal).
    Bits: 17    ROS(rw) - Receiver Overflow Severity: Severity of receive credit violations (0 = Non-Fatal, 1 = Fatal).
    Bits: 16    UCS(rw) - Unexpected Completion Severity: Severity of unexpected Completions received by the core (0 = Non-Fatal, 1 = Fatal).
    Bits: 15    CAS(rw) - Completer Abort Severity: Severity of sending a Completer Abort (0 = Non-Fatal, 1 = Fatal).
    Bits: 14    CTS(rw) - Completion Timeout Severity: Severity of Completion Timeouts (0 = Non-Fatal, 1 = Fatal).
    Bits: 13    FCPES(rw) - Flow Control Protocol Error Severity: Severity of a Flow Control Protocol Error (0 = Non-Fatal, 1 = Fatal).
    Bits: 12    PTS(rw) - Poisoned TLP Severity: Severity of a Poisoned TLP error (0 = Non-Fatal, 1 = Fatal).
    Bits: 11:5  R34(ro) - Reserved:
    Bits:  4    DLPES(rw) - Data Link Protocol Error Severity: Severity of Data Link Protocol Errors (0 = Non-Fatal, 1 = Fatal).
    Bits:  3:0  R33(ro) - Reserved:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty       0x0000010c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R36(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R36_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_Uncorr_Intrnl_Err_Svrty BIT(22)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R35 BIT(21)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_URES BIT(20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_EES BIT(19)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_MTS BIT(18)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_ROS BIT(17)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_UCS BIT(16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_CAS BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_CTS BIT(14)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_FCPES BIT(13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_PTS BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R34(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R34_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_DLPES BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R33(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_uncorr_err_svrty_R33_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_corr_err_stat -
    Bits: 31:16 R39(ro) - Reserved:
    Bits: 15    HLOS(rw) - Header Log Overflow Status: This bit is set on a Header Log Register overflow, that is, when the header could not be logged in the Header Log Register because it is occupied by a previous header.
    Bits: 14    CIES(rw) - Corrected Internal Error Status: This bit is set when the core has detected an internal correctable error condition (a correctable ECC error while reading from any of the RAMs). This bit is also set in response to the client signaling an internal error through the input CORRECTABLE_ERROR_IN.
    Bits: 13    ANES(rw) - Advisory Non-Fatal Error Status: This bit is set when an uncorrectable error occurs, which is determined to belong to one of the special cases described in the PCI Express Base Specification 2.0. This causes the core to assert the CORRECTABLE_ERROR_OUT output in place of NON_FATAL_ERROR_OUT.
    Bits: 12    RTTS(rw) - Replay Timer Timeout Status: This bit is set when the replay timer in the Data Link Layer of the core times out, causing the core to re-transmit a TLP.
    Bits: 11:9  R38(ro) - Reserved:
    Bits:  8    RNRS(rw) - Replay Number Rollover Status: This bit is set when the replay count rolls over after three re-transmissions of a TLP at the Data Link Layer of the core.
    Bits:  7    BDS(rw) - Bad DLLP Status: This bit is set when an LCRC error is detected in a received DLLP, and no errors were detected by the Physical Layer.
    Bits:  6    BTS(rw) - Bad TP Status: This bit is set when an error is detected in a received TLP by the Data Link Layer of the core the conditions causing this error are (1) an LCRC error, (2) the packet terminates with EDB symbol, but its LCRC field does not equal the inverted value of the calculated CRC.
    Bits:  5:1  R37(ro) - Reserved:
    Bits:  0    RES(rw) - Receiver Error Status: This bit is set when an error is detected in the receive side of the Physical Layer of the core (e.g. an 8b10b decode error).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat          0x00000110
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_R39(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_R39_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_HLOS   BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_CIES   BIT(14)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_ANES   BIT(13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_RTTS   BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_R38(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_R38_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_RNRS   BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_BDS    BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_BTS    BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_R37(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_R37_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_stat_RES    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_corr_err_mask -
    Bits: 31:16 R42(ro) - Reserved:
    Bits: 15    HLOM(rw) - Header Log Overflow Mask: This bit, when set, masks the reporting of an error in response to a Header Log register overflow.
    Bits: 14    CIEM(rw) - Corrected Internal Error Mask: This bit, when set, masks the reporting of an error in response to a corrected internal error condition.
    Bits: 13    ANEM(rw) - Advisory Non-Fatal Error Mask: This bit, when set, masks the reporting of an error in response to an uncorrectable error occurrence, which is determined to belong to one of the special cases in the PCI Express Base Specification 2.0.
    Bits: 12    RTTM(rw) - Replay Timer Timeout Mask: This bit, when set, masks the reporting of an error in response to a Replay Timer timeout event.
    Bits: 11:9  R41(ro) - Reserved:
    Bits:  8    RNRM(rw) - Replay Number Rollover Mask: This bit, when set, masks the reporting of an error in response to a Replay Number Rollover event.
    Bits:  7    BDM(rw) - Bad DLLP Mask: This bit, when set, masks the reporting of an error in response to a 'Bad DLLP' received.
    Bits:  6    BTM(rw) - Bad TP Mask: This bit,when set, masks the reporting of an error in response to a 'Bad TLP' received.
    Bits:  5:1  R40(ro) - Reserved:
    Bits:  0    REM(rw) - Receiver Error Mask: This bit, when set, masks the reporting of Physical Layer errors.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask          0x00000114
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_R42(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_R42_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_HLOM   BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_CIEM   BIT(14)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_ANEM   BIT(13)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_RTTM   BIT(12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_R41(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_R41_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_RNRM   BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_BDM    BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_BTM    BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_R40(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_R40_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_corr_err_mask_REM    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_adv_err_cap_ctl -
    Bits: 31:11 R43(ro) - Reserved:
    Bits: 10    MHRE(ro) - Multiple Header Recording Enable: Setting this bit enables the RC to log multiple error headers in its Header Log Registers. It is hardwired to 0.
    Bits:  9    MHRC(ro) - Multiple Header Recording Capable: This bit is set when the RC has the capability to log more than one error header in its Header Log Registers. It is hardwired to 0.
    Bits:  8    EEC(rw) - Enable ECRC Check: Setting this bit enables ECRC checking on the receive side of the core. This bit is writable from the local management bus.
    Bits:  7    ECC(rw) - ECRC Check Capability: This read-only bit indicates to the software that the device is capable of checking ECRC in packets received from the link.
    Bits:  6    EEG(rw) - Enable ECRC Generation: Setting this bit enables the ECRC generation on the transmit side of the core. This bit is writable from the local management bus.
    Bits:  5    EGC(rw) - ECRC Generation Capability: This read-only bit indicates to the software that the device is capable of generating ECRC in packets transmitted on the link.
    Bits:  4:0  FEP(ro) - First Error Pointer: This is a 5-bit pointer to the bit position in the Uncorrectable Error Status Register corresponding to the error that was detected first. When there are multiple bits set in the Uncorrectable Error Status Register, this field informs the software which error was observed first. To prevent the field from being overwritten before the software is able to read it, this field is not updated while the status bit it points to in the Uncorrectable Error Status Register remains set. After the software clears this status bit, a subsequent error condition that sets any bit in the Uncorrectable Error Status Register will update the First Error Pointer. Any uncorrectable error type, including the special cases where the error is reported using an ERR_COR message, will set the First Error Pointer (assuming the software has reset the error pointed by it in the Uncorrectable Error Status Register).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl        0x00000118
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_R43(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_R43_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_MHRE BIT(10)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_MHRC BIT(9)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_EEC  BIT(8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_ECC  BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_EEG  BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_EGC  BIT(5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_FEP(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_adv_err_cap_ctl_FEP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_0 -
    Bits: 31:0  HD0(ro) - Header Dword 0: First Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_0              0x0000011c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_0_HD0(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_0_HD0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_1 -
    Bits: 31:0  HD1(ro) - Header Dword 1: Second Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_1              0x00000120
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_1_HD1(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_1_HD1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_2 -
    Bits: 31:0  HD2(ro) - Header Dword 2: Third Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_2              0x00000124
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_2_HD2(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_2_HD2_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_hdr_log_3 -
    Bits: 31:0  HD3(ro) - Header Dword 3: Fourth Dword of captured TLP header.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_3              0x00000128
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_3_HD3(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_hdr_log_3_HD3_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_root_err_cmd -
    Bits: 31:3  R44(ro) - Reserved:
    Bits:  2    FERE(rw) - Fatal Error Reporting Enable: If this bit is set, the core will active its FATAL_ERROR_OUT output in response to an error message received from the link.
    Bits:  1    NFERE(rw) - Non-Fatal Error Reporting Enable: If this bit is set, the core will active its NON_FATAL_ERROR_OUT output in response to an error message received from the link.
    Bits:  0    CERE(rw) - Correctable Error Reporting Enable: If this bit is set, the core will active its CORRECTABLE_ERROR_OUT output in response to an error message received from the link.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_cmd           0x0000012c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_cmd_R44(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_cmd_R44_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_cmd_FERE    BIT(2)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_cmd_NFERE   BIT(1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_cmd_CERE    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_root_err_stat -
    Bits: 31:7  R45(ro) - Reserved:
    Bits:  6    FEMR(w1c) - Fatal Error Messages Received: This bit, when set, indicates that the RC has received one or more Fatal error messages from the link.
    Bits:  5    NEMR(w1c) - Non-Fatal Error Messages Received: This bit, when set, indicates that the RC has received one or more Non-Fatal error messages from the link.
    Bits:  4    FUF(w1c) - First Uncorrectable Fatal: This bit, when set, indicates that the first Uncorrectable error message received was for a Fatal error.
    Bits:  3    MEFNR(w1c) - Multiple ERR_FATAL or NONFATAL Received: This bit is set when the RC receives either a Fatal or Non-Fatal error message from the link, and the ERR_FATAL/NONFATAL Received bit is already set.
    Bits:  2    EFNR(w1c) - ERR_FATAL or NONFATAL Received: This bit is set when the RC receives either a Fatal or Non-Fatal error message from the link.
    Bits:  1    MECR(w1c) - Multiple ERR_COR Received: This bit is set when the RC receives a Correctable error message from the link, if the ERR_COR received bit is already set.
    Bits:  0    ECR(w1c) - ERR_COR Received: This bit is set when the RC receives a Correctable error message from the link.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat          0x00000130
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_R45(_x) (((_x) & 0x1ffffff) << 7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_R45_of(_x) (((_x) >> 7) & 0x1ffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_FEMR   BIT(6)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_NEMR   BIT(5)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_FUF    BIT(4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_MEFNR  BIT(3)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_EFNR   BIT(2)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_MECR   BIT(1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_root_err_stat_ECR    BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_err_src_id -
    Bits: 31:16 EFNSI(ro) - ERR_FATAL or ERR_NONFATAL Source ID: This field captures and stores the Requester ID from an ERR_FATAL or ERROR_NONFATAL message received by the RC, if the ERR_FATAL or NONFATAL Received bit was not set at the time the message was received.
    Bits: 15:0  ECSI(ro) - ERR_COR Source ID: This field captures and stores the Requester ID from an ERR_COR message received by the RC, if the ERR_COR bit was not set at the time the message was received.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_err_src_id             0x00000134
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_err_src_id_EFNSI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_err_src_id_EFNSI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_err_src_id_ECSI(_x)  (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_err_src_id_ECSI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_dev_ser_num_cap_hdr -
    Bits: 31:20 SNNCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value points to the Power Budgeting Capability Structure. It can be written from local management bus independently for each PF.
    Bits: 19:16 DSNCV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified from the local management bus by writing into Function 0 from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express Device Serial Number Capability (0001 hex).
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr    0x00000150
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr_SNNCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr_SNNCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr_DSNCV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr_DSNCV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_cap_hdr_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_dev_ser_num_0 -
    Bits: 31:0  DSND0(ro) - Device Serial Number, Doubleword 0: This field contains the first 32 bits of the device's serial number.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_0          0x00000154
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_0_DSND0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_0_DSND0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_dev_ser_num_1 -
    Bits: 31:0  DSND1(ro) - Device Serial Number, Doubleword 1: This field contains the last 32 bits of the device's serial number.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_1          0x00000158
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_1_DSND1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_dev_ser_num_1_DSND1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_link_control3 -
    Bits: 31:2  R0(ro) - Reserved:
    Bits:  1    LERIE(rw) - Link Equalization Request Interrupt Enable:
    Bits:  0    PE(rw) - Perform Equaliztion:
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_link_control3          0x00000304
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_control3_R0(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_control3_R0_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_control3_LERIE  BIT(1)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_link_control3_PE     BIT(0)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_error_status -
    Bits: 31:8  R0(ro) - Reserved:
    Bits:  7:0  LES(w1c) - Lane Error Status: Each of these bits indicates the error status for the corresponding lane. STICKY.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_lane_error_status      0x00000308
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_error_status_R0(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_error_status_R0_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_error_status_LES(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_error_status_LES_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_0 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 1 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 0 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 0 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 0 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 0 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0 0x0000030c
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_R3 BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_R2_1 BIT(23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_R1 BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_R0_1 BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_0_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_1 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 2 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 1 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 1 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 1 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1 0x00000310
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_R3 BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_R2_1 BIT(23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_R1 BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_R0_1 BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_1_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_2 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 3 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 2 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 2 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 2 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2 0x00000314
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_R3 BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_R2_1 BIT(23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_R1 BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_R0_1 BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_2_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_rc_pcie_base_i_lane_equalization_control_3 -
    Bits: 31    R3(ro) - Reserved:
    Bits: 30:28 UPRPH1(rw) - Upstream Port Receiver Preset Hint: Lane 4 Receiver Preset Hint value received from the upstream device.
    Bits: 27:24 UPTP1(rw) - Upstream Port Transmitter Preset: Lane 4 Transmitter Preset value received from the upstream device.
    Bits: 23    R2_1(ro) - Reserved:
    Bits: 22:20 DNRPH1(rw) - Downstream Port Receiver Preset Hint: Lane 4 Receiver Preset Hint value used by the downstream port.
    Bits: 19:16 DNTP1(rw) - Downstream Port Transmitter Preset: Lane 4 Transmitter Preset value used by the downstream port.
    Bits: 15    R1(ro) - Reserved:
    Bits: 14:12 UPRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value received from the upstream device.
    Bits: 11:8  UPTP0(rw) - Upstream Port Transmitter Preset: Lane 3 Transmitter Preset value received from the upstream device.
    Bits:  7    R0_1(ro) - Reserved:
    Bits:  6:4  DNRPH0(rw) - Upstream Port Receiver Preset Hint: Lane 3 Receiver Preset Hint value used by the downstream port.
    Bits:  3:0  DNTP0(rw) - Downstream Port Transmitter Preset: Lane 3 Transmitter Preset value used by the downstream port.
*/
#define NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3 0x00000318
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_R3 BIT(31)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPRPH1(_x) (((_x) & 0x7) << 28)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPRPH1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPTP1(_x) (((_x) & 0xf) << 24)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPTP1_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_R2_1 BIT(23)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNRPH1(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNRPH1_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNTP1(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNTP1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_R1 BIT(15)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPRPH0(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPRPH0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPTP0(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_UPTP0_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_R0_1 BIT(7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNRPH0(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNRPH0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNTP0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_RC_i_rc_pcie_base_i_lane_equalization_control_3_DNTP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pl_config_0_reg -
    Bits: 31    MLE(rw) - Master Loopback Enable: When the core is operating as a Root Complex, setting this to 1 causes the LTSSM to initiate a loopback and become the loopback master. This bit is not used in the EndPoint Mode.
    Bits: 30    R0(ro) - Remote Linkwidth Upconfigure Capability Status: A 1 in this field indicates that the remote note advertised Linkwidth Upconfigure Capability in the training sequences in the Configuration.Complete state when the link came up. A 0 indicates that the remote node did not set the Link Upconfigure bit.
    Bits: 29:24 LTSSM(ro) - LTSSM State: Current state of the LTSSM. The encoding of the states is given in Appendix C.
    Bits: 23:16 RLID(ro) - Received Link ID: Link ID received from other side during link training.
    Bits: 15:8  RFC(ro) - Received FTS Count: FTS count received from the other side during link training. The core transmits this many FTS sequences while exiting the L0S state.
    Bits:  7    TSS(rw) - Tx Swing Setting: This bit drives the PIPE_TX_SWING output of the core.
    Bits:  6    APER(rw) - All Phy Error Reporting: When this bit is set to 1, the core will report all phy errors detected at the PIPE interface, regardless of whether it caused packet corruption. If set to 0, the core will report only those error that caused a TLP or DLLP to be dropped because of the phy error.
    Bits:  5    LTD(ro) - Link Training Direction: When crosslink is enabled, the state of this bit indicates whether the core completed link training as an upstream port or a downstream port (0 = upstream, 1 = downstream).
    Bits:  4:3  NS(ro) - Negotiated Speed: Current operating speed of link (00 = 2.5G, 01 = 5G, 10 = 8G).
    Bits:  2:1  NLC(ro) - Negotiated Lane Count: Lane count negotiated with other side during link training (00 = x1, 01 = x2, 10 = x4, 11 = x8).
    Bits:  0    LS(ro) - Link Status: Current state of link (1 = link training complete, 0 = link training not complete).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg   0x00000000
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_MLE BIT(31)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_R0 BIT(30)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_LTSSM(_x) (((_x) & 0x3f) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_LTSSM_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_RLID(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_RLID_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_RFC(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_RFC_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_TSS BIT(7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_APER BIT(6)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_LTD BIT(5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_NS(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_NS_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_NLC(_x) (((_x) & 0x3) << 1)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_NLC_of(_x) (((_x) >> 1) & 0x3)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_0_reg_LS BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pl_config_1_reg -
    Bits: 31:24 TFC3(rw) - Transmitted FTS Count at 8 GT/s Speed: FTS count transmitted by the core in TS1/TS2 sequences during link training. This value must be set based on the time needed by the receiver to acquire sync while exiting from L0S state.
    Bits: 23:16 TFC2(rw) - Transmitted FTS Count at 5 GT/s Speed: FTS count transmitted by the core in TS1/TS2 sequences during link training. This value must be set based on the time needed by the receiver to acquire sync while exiting from L0S state.
    Bits: 15:8  TFC1(rw) - Transmitted FTS Count at 2.5 GT/s Speed: FTS count transmitted by the core in TS1/TS2 sequences during link training. This value must be set based on the time needed by the receiver on the other side to acquire sync while exiting from L0S state.
    Bits:  7:0  TLI(rw) - Transmitted Link ID: Link ID transmitted by the device in training sequences in the RC mode.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg   0x00000004
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TFC3(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TFC3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TFC2(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TFC2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TFC1(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TFC1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TLI(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pl_config_1_reg_TLI_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_dll_tmr_config_reg -
    Bits: 31:25 R1(ro) - Reserved bits.
    Bits: 24:16 RSART(rw) - Receive-Side ACK-NAK Replay Timeout: Timeout setting of receive side ACK-NAK replay (in units of 4 ns). Its value is defined in the RTL header file defines.h. This field is re-written by the internal logic when the negotiated link width, link speed, or the maximum payload setting changes, to correspond to the recommended settings defined in the PCIe Specifications. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed, or a change in the max payload size setting in the Device Control Register.
    Bits: 15:9  R0(ro) - Reserved bits.
    Bits:  8:0  TSRT(rw) - Transmit-Side Replay Timeout: Transmit-side replay timer timeout value (in units of 4 ns). Its value is defined in the RTL header file defines.h in the top-level RTL directory, based on the configuration of the core. This field is re-written by the internal logic when the negotiated link width, link speed, or the maximum payload setting changes, to correspond to the recommended setting defined in the PCIe Specifications. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed, or a change in the max payload size setting in the Device Control Register.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg 0x00000008
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_R1(_x) (((_x) & 0x7f) << 25)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_R1_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_RSART(_x) (((_x) & 0x1ff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_RSART_of(_x) (((_x) >> 16) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_R0(_x) (((_x) & 0x7f) << 9)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_R0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_TSRT(_x) (((_x) & 0x1ff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_dll_tmr_config_reg_TSRT_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg -
    Bits: 31:20 NPPC(rw) - Non-Posted Payload Credit: Non-Posted payload credit limit advertised by the core for VC 0 (in units of 4 Dwords).
    Bits: 19:12 PHC(rw) - Posted Header Credit: Posted header credit limit advertised by the core for VC 0 (in number of packets).
    Bits: 11:0  PPC(rw) - Posted Payload Credit: Posted payload credit limit advertised by the core for VC 0 (in units of 4 Dwords).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg 0x0000000c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg_NPPC(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg_NPPC_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg_PHC(_x) (((_x) & 0xff) << 12)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg_PHC_of(_x) (((_x) >> 12) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg_PPC(_x) (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_0_reg_PPC_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg -
    Bits: 31:24 CHC(rw) - Completion Header Credit: Completion header credit limit advertised by the core for VC 0 (in number of packets).
    Bits: 23:20 R2(ro) - Reserved:
    Bits: 19:8  CPC(rw) - Completion Payload Credit: Completion payload credit limit advertised by the core for VC 0 (in units of 4 Dwords).
    Bits:  7:0  NPHCL(rw) - Non-Posted Header Credit Limit: Non-Posted header credit limit advertised by the core for VC 0 (in number of packets).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg 0x00000010
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_CHC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_CHC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_R2(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_R2_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_CPC(_x) (((_x) & 0xfff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_CPC_of(_x) (((_x) >> 8) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_NPHCL(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rcv_cred_lim_1_reg_NPHCL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_lim_0_reg -
    Bits: 31:20 NPPC(ro) - Non-Posted Payload Credit: Non-Posted payload credit limit received by the core for Link 0 (in units of 4 Dwords).
    Bits: 19:12 PHC(ro) - Posted Header Credit: Posted header credit limit received by the core for this link (in number of packets).
    Bits: 11:0  PPC(ro) - Posted Payload Credit: Posted payload credit limit received by the core for this link (in units of 4 Dwords).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg 0x00000014
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg_NPPC(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg_NPPC_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg_PHC(_x) (((_x) & 0xff) << 12)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg_PHC_of(_x) (((_x) >> 12) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg_PPC(_x) (((_x) & 0xfff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_0_reg_PPC_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_lim_1_reg -
    Bits: 31:24 CHC(ro) - Completion Header Credit: Completion header credit limit received by the core for VC (in number of packets).
    Bits: 23:20 R3(ro) - Reserved:
    Bits: 19:8  CPC(ro) - Completion Payload Credit: Completion payload credit limit received by the core for VC 0 (in units of 4 Dwords).
    Bits:  7:0  NPHC(ro) - Non-Posted Header Credit: Non-Posted header credit limit received by the core for VC 0 (in number of packets).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg 0x00000018
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_CHC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_CHC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_R3(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_R3_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_CPC(_x) (((_x) & 0xfff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_CPC_of(_x) (((_x) >> 8) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_NPHC(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_lim_1_reg_NPHC_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg -
    Bits: 31:16 MNUI(rw) - Minimum Non-Posted Update Interval: Minimum credit update interval for non-posted transactions. The core follows this minimum interval between issuing posted credit updates on the link. This is to limit the bandwidth use of credit updates. If new credit becomes available in the receive FIFO since the last update was sent, the core will issue a new update only after this interval has elapsed since the last update. The value is in units of 4 ns. This field is re-written by the internal logic when the negotiated link width or link speed changes, to correspond to the default values defined in defines.h. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed.
    Bits: 15:0  MPUI(rw) - Minimum Posted Update Interval: Minimum credit update interval for posted transactions. The core follows this minimum interval between issuing posted credit updates on the link. This is to limit the bandwidth use of credit updates. If new credit becomes available in the receive FIFO since the last update was sent, the core will issue a new update only after this interval has elapsed since the last update. The value is in units of 4 ns. This field is re-written by the internal logic when the negotiated link width or link speed changes, to correspond to the default values defined in defines.h. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg 0x0000001c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg_MNUI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg_MNUI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg_MPUI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_0_reg_MPUI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg -
    Bits: 31:16 MUI(rw) - Maximum Update Interval: Maximum credit update interval for all transactions. If no new credit has become available since the last update, the core will repeat the last update after this interval. This is to recover from any losses of credit update packets. The value is in units of 4 ns. This field could be re-written by the internal logic when the negotiated link width or link speed changes, to correspond to the default values defined in defines.h. The user may override this default value by writing into this register field. The value written will be lost on a change in the negotiated link width/speed.
    Bits: 15:0  CUI(rw) - Completion Update Interval: Minimum credit update interval for Completion packets. The core follows this minimum interval between issuing posted credit updates on the link. This is to limit the bandwidth use of credit updates. If new credit becomes available in the receive FIFO since the last update was sent, the core will issue a new update only after this interval has elapsed since the last update. The value is in units of 4 ns. This parameter is not used when the Completion credit is infinity.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg 0x00000020
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg_MUI(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg_MUI_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg_CUI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transm_cred_update_int_config_1_reg_CUI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_L0S_timeout_limit_reg -
    Bits: 31:17 R4(ro) - Reserved:
    Bits: 16    ELE(rw) - Enable L2 Entry: This bit applies to RC mode only. When this bit is 0, the core will not transition the link to L2 when its link partner enters the L23_Ready power management state. When this bit is 1, the core will set its link to L2 when the link partner enters L23_Ready. Once the core enters L2, a reset is needed to transition it out of L2.
    Bits: 15:0  LT(rw) - L0S Timeout: Contains the timeout value (in units of 4 ns) for transitioning to the L0S power state. Setting this parameter to 0 permanently disables the transition to the L0S power state.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L0S_timeout_limit_reg 0x00000024
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L0S_timeout_limit_reg_R4(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L0S_timeout_limit_reg_R4_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L0S_timeout_limit_reg_ELE BIT(16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L0S_timeout_limit_reg_LT(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L0S_timeout_limit_reg_LT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transmit_tlp_count_reg -
    Bits: 31:0  TTC(w1c) - Transmit TLP Count: Count of TLPs transmitted
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transmit_tlp_count_reg 0x00000028
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transmit_tlp_count_reg_TTC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transmit_tlp_count_reg_TTC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_transmit_tlp_payload_dword_count_reg -
    Bits: 31:0  TTPBC(w1c) - Transmit TLP Payload Byte Count: Count of TLPs payload Dwords transmitted
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transmit_tlp_payload_dword_count_reg 0x0000002c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transmit_tlp_payload_dword_count_reg_TTPBC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_transmit_tlp_payload_dword_count_reg_TTPBC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_receive_tlp_count_reg -
    Bits: 31:0  RTC(w1c) - Receive TLP Count: Count of TLPs received
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_tlp_count_reg 0x00000030
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_tlp_count_reg_RTC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_tlp_count_reg_RTC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_receive_tlp_payload_dword_count_reg -
    Bits: 31:0  RTPDC(w1c) - Receive TLP Payload Byte Count: Count of TLP payload Dwords received
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_tlp_payload_dword_count_reg 0x00000034
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_tlp_payload_dword_count_reg_RTPDC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_tlp_payload_dword_count_reg_RTPDC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg -
    Bits: 31:24 R5(ro) - Reserved:
    Bits: 23:0  CTL(rw) - Completion Timeout Limit: Timeout limit for completion timers (in 4 ns cycles).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg 0x00000038
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg_R5(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg_R5_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg_CTL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_0_reg_CTL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg -
    Bits: 31:28 R6(ro) - Reserved:
    Bits: 27:0  CTL(rw) - Completion Timeout Limit: Timeout limit for completion timers (in 4 ns cycles).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg 0x0000003c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg_R6(_x) (((_x) & 0xf) << 28)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg_R6_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg_CTL(_x) (((_x) & 0xfffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_compln_tmout_lim_1_reg_CTL_of(_x) (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_L1_st_reentry_delay_reg -
    Bits: 31:0  L1RD(rw) - L1 Re-Entry Delay: Delay to re-enter L1 after no activity (in units of 4 ns cycles).
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L1_st_reentry_delay_reg 0x00000040
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L1_st_reentry_delay_reg_L1RD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_L1_st_reentry_delay_reg_L1RD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_vendor_id_reg -
    Bits: 31:16 SVID(rw) - Subsystem Vendor ID: Subsystem Vendor ID
    Bits: 15:0  VID(rw) - Vendor ID: Vendor ID
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_vendor_id_reg     0x00000044
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_vendor_id_reg_SVID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_vendor_id_reg_SVID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_vendor_id_reg_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_vendor_id_reg_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg -
    Bits: 31:20 R7(ro) - Reserved:
    Bits: 19:0  L1T(rw) - L1 Timeout: Contains the timeout value (in units of 4 ns) for transitioning to the L1 power state. Setting it to 0 permanently disables the transition to the L1 power state.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg 0x00000048
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg_R7(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg_R7_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg_L1T(_x) (((_x) & 0xfffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_aspm_L1_entry_tmout_delay_reg_L1T_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg -
    Bits: 31:16 R7(ro) - Reserved:
    Bits: 15:0  PTOAD(rw) - PME Turnoff Ack Delay: Time in microseconds between the core receiving a PME_TurnOff message TLP and the core sending a PME_TO_Ack response to it. This field must be set to a non-zero value in order for the core to send a response. Setting this field to 0 suppresses the core's response to PME_TurnOff message, so that the client may transmit the PME_TO_Ack message through the HAL master interface
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg 0x0000004c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg_R7(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg_R7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg_PTOAD(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_turnoff_ack_delay_reg_PTOAD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_linkwidth_control_reg -
    Bits: 31:17 R1(ro) - Reserved:
    Bits: 16    RL(rw) - Retrain Link: Writing a 1 into this field results in the core re-training the link to change its width. When setting this bit to 1, the software must also set the target lane-map field to indicate the lanes it desires to be part of the link. The core will attempt to form a link with this set of lanes. The link formed at the end of the retraining may include all of these lanes (if both nodes agree on them during re-training), or the largest subset that both sides were able to activate. This bit is cleared by the internal logic of the core after the re-training has been completed and link has reached the L0 state. Software must wait for the bit to be clear before setting it again to change the link width.
    Bits: 15:8  R0(ro) - Reserved:
    Bits:  7:0  TLM(rw) - Target Lane Map: This field contains the bitmap of the lanes to be included in forming the link during the re-training. Legal settings are: - 0xff (x8 link) - 0x0f and 0xf0 (x4 link) - 0x3, 0xc, 0x30, 0xc0 (x2 link) - 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80 (x1 link) Retraining the link with any other value in this field can cause the training to fail. If the target lane map includes lanes that were inactive when retraining is initiated, then both the core and its link partner must support the LinkWidth Upconfigure Capability to be able to activate those lanes. The user can check if the remote node has this capability by reading the Remote Link Upconfigure Capability Status bit in Physical Layer Configuration Register 0 after the link first came up.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg 0x00000050
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_R1(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_R1_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_RL BIT(16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_R0(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_R0_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_TLM(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_linkwidth_control_reg_TLM_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_negotiated_lane_map_reg -
    Bits: 31:17 R71(ro) - Reserved:
    Bits: 16    LRS(ro) - Lane Reversal Status: This bit set by the core at the end of link training if the LTSSM had to reverse the lane numbers to form the link.
    Bits: 15:8  R70(ro) - Reserved:
    Bits:  7:0  NLM(ro) - Negotiated Lane Map: Bit i of this field is set to 1 at the end of link training if Lane i is part of the PCIe link. The value of this field is valid only when the link is in L0 or L0s states.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg 0x00000200
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_R71(_x) (((_x) & 0x7fff) << 17)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_R71_of(_x) (((_x) >> 17) & 0x7fff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_LRS BIT(16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_R70(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_R70_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_NLM(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_negotiated_lane_map_reg_NLM_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_receive_fts_count_reg -
    Bits: 31:16 R72(ro) - Reserved:
    Bits: 15:8  RFC8S(ro) - Received FTS Count for 8GT/s Speed: FTS count received from the other side during link training for use at the 8 GT/s link speed. The core transmits this many FTS sequences while exiting the L0S state, when operating at the 8 GT/s speed.
    Bits:  7:0  RFC5S(ro) - Received FTS Count for 5GT/s Speed: FTS count received from the other side during link training for use at the 5 GT/s link speed. The core transmits this many FTS sequences while exiting the L0S state, when operating at the 5 GT/s speed.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg 0x00000204
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg_R72(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg_R72_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg_RFC8S(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg_RFC8S_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg_RFC5S(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_receive_fts_count_reg_RFC5S_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_debug_mux_control_reg -
    Bits: 31    EFSRTCA(rw) - Enable Function-Specific Reporting of Type-1 Configuration Accesses: Setting this bit to 0 causes all the enabled Functions to report an error when a Type-1 configuration access is received by the core, targeted at any Function. Setting it to 1 limits the error reporting to the type-0 Function whose number matches with the Function number specified in the request. If the Function number in the request refers to an unimplemented or disabled Function, all enabled Functions report the error regardless of the setting of this bit.
    Bits: 30    DOC(rw) - Disable Ordering Checks: Setting this bit to 1 disables the ordering check in the core between Completions and Posted requests received from the link.
    Bits: 29    DFCUT(rw) - Disable Flow Control Update Timeout: When this bit is 0, the core will time out and re-train the link when no Flow Control Update DLLPs are received from the link within an interval of 128 us. Setting this bit to 1 disables this timeout. When the advertised receive credit of the link partner is infinity for the header and payload of all credit types, this timeout is always suppressed. The setting of this bit has no effect in this case. This bit should not be set during normal operation, but is useful for testing.
    Bits: 28    DEI(rw) - Disable Electrical Idle Infer in L0 State: Setting this bit to 1 disables the inferring of electrical idle in the L0 state. Electrical idle is inferred when no flow control updates and no SKP sequences are received within an interval of 128 us. This bit should not be set during normal operation, but is useful for testing.
    Bits: 27    DGLUS(rw) - Disable Gen3 LFSR Update from SKP: Setting this bit to 1 disables the update of the LFSRs in the Gen3 descramblers of the core, from the values received in SKP sequences. This bit should not be set during normal operation, but is useful for testing.
    Bits: 26    R10C(ro) - Reserved:
    Bits: 25    ESPC(rw) - Enable Slot Power Capture: When this bit is set to 1, the core will capture the Slot Power Limit Value and Slot Power Limit Scale parameters from a Set_Slot_Power_Limit message received in the Device Capabilities Register. When this bit is 0, the capture is disabled. This bit is valid only when the core is configured as an EndPoint. It has no effect when the core is a Root Complex.
    Bits: 24    EFLT(rw) - Enable Fast Link Training: This bit is provided to shorten the link training time to facilitate fast simulation of the design, especially at the gate level. Enabling this bit has the following effects: 1. The 1 ms, 2 ms, 12 ms, 24 ms, 32 ms and 48 ms timeout intervals in the LTSSM are shortened by a factor of 500. 2. In the Polling.Active state of the LTSSM, only 16 training sequences are required to be transmitted (Instead of 1024) to make the transition to the Configuration state. This bit should not be set during normal operation of the core.
    Bits: 23    DLUC(rw) - Disable Link Upconfigure Capability: The user may set this bit to turn off the link upconfigure capability of the core. Setting this bit prevents the core from advertising the link upconfigure capability in training sequences transmitted in the Configuration.Complete state.
    Bits: 22    DLRFE(rw) - Disable Link Re-Training on Framing Error: When this bit is 1, the core will not transition its LTSSM into the Recovery state when it detects a Framing Error at 8 GT/s speed (as defined in Section 4.2.2.3.3 of the PCIe Base Specification 3.0. This bit must normally be set to 0 so that a Framing Error will cause the LTSSM to enter Recovery. The setting of this bit has no effect on the operation of the core at 2.5 and 5 GT/s speeds.
    Bits: 21    DSHEC(rw) - Disable Sync Header Error Check: When this bit is 0, the core will signal a framing error if it detects a sync header error in the received blocks at 8 GT/s speed (A 00 or 11 binary setting of the sync header on the received blocks in any lane constitutes a framing error). Setting this bit to 1 suppresses this error check. This bit should normally be set to 0, as the sync header check is mandatory in the PCIe 3.0 Specifications.
    Bits: 20:18 R8C(ro) - Reserved:
    Bits: 17    HPRSUPP(rw) - Disable HAL Parity Check: When this bit is 1, parity check is disabled on the receive side of the HAL interfaces.
    Bits: 16    R8A(ro) - Reserved:
    Bits: 15:4  R8(ro) - Reserved:
    Bits:  3:0  MS(rw) - Mux Select: Bits 3:2 select the module and bits 1:0 select the group of signals within the module that are driven on the debug bus. The assignments of signals on the debug outputs of the core are given in Appendix B.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg 0x00000208
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_EFSRTCA BIT(31)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DOC BIT(30)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DFCUT BIT(29)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DEI BIT(28)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DGLUS BIT(27)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_R10C BIT(26)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_ESPC BIT(25)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_EFLT BIT(24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DLUC BIT(23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DLRFE BIT(22)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_DSHEC BIT(21)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_R8C(_x) (((_x) & 0x7) << 18)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_R8C_of(_x) (((_x) >> 18) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_HPRSUPP BIT(17)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_R8A BIT(16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_R8(_x) (((_x) & 0xfff) << 4)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_R8_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_MS(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_debug_mux_control_reg_MS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_local_error_status_register -
    Bits: 31:13 R9(ro) - Reserved:
    Bits: 12    TSRPE(w1c) - TPH ST RAM Parity Error: Uncorrectable parity error detected while reading from the TPH Steering Tag RAM
    Bits: 11    CT(w1c) - Completion Timeout: A request timed out waiting for completion.
    Bits: 10    FCE(w1c) - Flow Control Error: An error was observed in the flow control advertisements from the other side.
    Bits:  9    UCR(w1c) - Unexpected Completion Received: Unexpected Completion received from the link.
    Bits:  8    MTR(w1c) - Malformed TLP Received: Malformed TLP received from the link.
    Bits:  7    PE(w1c) - Phy Error: Phy error detected on receive side.
    Bits:  6    RTR(w1c) - Replay Timer Rollover: Replay timer rolled over after 4 transmissions of the same TLP.
    Bits:  5    RT(w1c) - Replay Timeout: Replay timer timed out
    Bits:  4    CRFO(w1c) - Completion RX FIFO Overflow: Overflow occurred in the Completion Receive FIFO.
    Bits:  3    PRFO(w1c) - PNP RX FIFO Overflow: Overflow occurred in the PNP Receive FIFO.
    Bits:  2    RRPE(w1c) - Replay RAM Parity Error: Parity error detected while reading from Replay Buffer RAM.
    Bits:  1    CRFPE(w1c) - Completion RX FIFO Parity Error: Parity error detected while reading from the Completion Receive FIFO RAM.
    Bits:  0    PRFPE(w1c) - PNP RX FIFO Parity Error: Parity error detected while reading from the PNP Receive FIFO RAM.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register 0x0000020c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_R9(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_R9_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_TSRPE BIT(12)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_CT BIT(11)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_FCE BIT(10)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_UCR BIT(9)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_MTR BIT(8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_PE BIT(7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_RTR BIT(6)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_RT BIT(5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_CRFO BIT(4)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_PRFO BIT(3)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_RRPE BIT(2)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_CRFPE BIT(1)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_error_status_register_PRFPE BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_local_intrpt_mask_reg -
    Bits: 31:13 R10(ro) - Reserved:
    Bits: 12    TSRPE(rw) - TPH ST RAM Parity Error: Setting this bit prevents the TPH_ST_RAM_parity_error status from raising a local interrupt.
    Bits: 11    CT(rw) - Completion Timeout: Setting this bit prevents the Completion timeout condition from raising a local interrupt.
    Bits: 10    FCE(rw) - Flow Control Error: Setting this bit prevents the flow control error from raising a local interrupt.
    Bits:  9    UCR(rw) - Unexpected Completion Received: Setting this bit prevents the Unexpected Completion Received condition from raising a local interrupt.
    Bits:  8    MTR(rw) - Malformed TLP Received: Setting this bit prevents the Malformed TLP Received condition from raising a local interrupt.
    Bits:  7    PE(rw) - Phy Error: Setting this bit prevents a phy error from raising a local interrupt.
    Bits:  6    RTR(rw) - Replay Timer Rollover: Setting this bit prevents the Replay Timer Rollover error from raising a local interrupt.
    Bits:  5    RT(rw) - Replay Timeout: Setting this bit prevents a replay timeout event from raising a local interrupt.
    Bits:  4    CRFO(rw) - Completion RX FIFO Overflow: Setting this bit prevents the Completion RX FIFO Overflow condition from raising a local interrupt.
    Bits:  3    PRFO(rw) - PNP RX FIFO Overflow: Setting this bit prevents the PNP RX FIFO Overflow condition from raising a local interrupt.
    Bits:  2    RRPE(rw) - Replay RAM Parity Error: Setting this bit prevents the Replay RAM Parity Error from raising a local interrupt.
    Bits:  1    CRFPE(rw) - Completion RX FIFO Parity Error: Setting this bit prevents the Completion RX FIFO Parity Error from raising a local interrupt.
    Bits:  0    PRFPE(rw) - PNP RX FIFO Parity Error: Setting this bit prevents the PNP RX FIFO Parity Error from raising a local interrupt.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg 0x00000210
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_R10(_x) (((_x) & 0x7ffff) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_R10_of(_x) (((_x) >> 13) & 0x7ffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_TSRPE BIT(12)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_CT BIT(11)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_FCE BIT(10)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_UCR BIT(9)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_MTR BIT(8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_PE BIT(7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_RTR BIT(6)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_RT BIT(5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_CRFO BIT(4)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_PRFO BIT(3)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_RRPE BIT(2)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_CRFPE BIT(1)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_local_intrpt_mask_reg_PRFPE BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_lcrc_err_count_reg -
    Bits: 31:16 R11(ro) - Reserved:
    Bits: 15:0  LEC(w1c) - LCRC Error Count: Number of TLPs received with LCRC errors.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_lcrc_err_count_reg 0x00000214
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_lcrc_err_count_reg_R11(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_lcrc_err_count_reg_R11_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_lcrc_err_count_reg_LEC(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_lcrc_err_count_reg_LEC_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_ecc_corr_err_count_reg -
    Bits: 31:24 R12(w1c) - TPH ST RAM Correctable Error Count: Number of correctable errors detected while reading from the TPH Steering Tag RAM. This is an 8-bit saturating counter that can be cleared by writing all 1s into it.
    Bits: 23:16 RRCER(w1c) - Replay RAM Correctable Error Count: Number of correctable errors detected while reading from the Replay Buffer RAM. This is an 8-bit saturating counter that can be cleared by writing all 1's into it.
    Bits: 15:8  SFRCER(w1c) - SC FIFO RAM Correctable Error Count: Number of correctable errors detected while reading from the SC FIFO RAM. This is an 8-bit saturating counter that can be cleared by writing all 1's into it.
    Bits:  7:0  PFRCER(w1c) - PNP FIFO RAM Correctable Error Count: Number of correctable errors detected while reading from the PNP FIFO RAM. This is an 8-bit saturating counter that can be cleared by writing all 1's into it.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg 0x00000218
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_R12(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_R12_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_RRCER(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_RRCER_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_SFRCER(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_SFRCER_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_PFRCER(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_ecc_corr_err_count_reg_PFRCER_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg -
    Bits: 31:20 R0(ro) - Reserved:
    Bits: 19:0  PSTD(rw) - PME Service Timeout Delay: Specifies the timeout delay for retransmission of PM_PME messages. The value is in units of microseconds.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg 0x00000224
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg_R0(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg_R0_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg_PSTD(_x) (((_x) & 0xfffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pme_service_timeout_delay_reg_PSTD_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_root_port_requestor_id_reg -
    Bits: 15:0  RPRI(rw) - Root Port Requestor ID: RID (bus, device & function numbers) for all TLPs internally generated by Root Port
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_root_port_requestor_id_reg 0x00000228
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_root_port_requestor_id_reg_RPRI(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_root_port_requestor_id_reg_RPRI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg -
    Bits: 31:29 BAR3C(rw) - BAR 3 Control: Specifies the configuration of BAR3. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 28:24 BAR3A(rw) - BAR 3 Aperture: Specifies the aperture of the BAR 3 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits: 23:21 BAR2C(rw) - BAR 2 Control: Specifies the configuration of BAR2. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits: 20:16 BAR2A(rw) - BAR 2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64bit BAR2-3. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
    Bits: 15:13 BAR1C(rw) - BAR 1 Control: Specifies the configuration of BAR1. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  BAR1A(rw) - BAR 1 Aperture: Specifies the aperture of the BAR 1 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  BAR0C(rw) - BAR 0 Control: Specifies the configuration of BAR0. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  BAR0A(rw) - BAR 0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64bit BAR0-1. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg 0x00000240
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR3C(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR3C_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR3A(_x) (((_x) & 0x1f) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR3A_of(_x) (((_x) >> 24) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR2C(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR2C_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR2A(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR2A_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR1C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR1C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR1A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR1A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR0C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR0C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR0A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_0_reg_BAR0A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg -
    Bits: 31    ERBC(rw) - Enable Resizable BAR Capability: Setting this bit to 1 enables the Resizable BAR Capability in the PCI Express Configuration Space of the associated Function. When the Resizable BAR Capability is enabled, the apertures of the memory BARs of the corresponding Function are no longer selected by the fields in this register, but by the setting of the registers in the Resizable BAR Capability Structure.
    Bits: 30:24 R24(ro) - Reserved:
    Bits: 23:22 R22(ro) - Reserved:
    Bits: 21    ERBE(rw) - EXP-ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
    Bits: 20:16 ERBA(rw) - EXP-ROM BAR Aperture: Specifies the aperture of the Expansion ROM BAR. The encodings are: 00000-00001 = 256 bytes, 00010 = 512 bytes, 00011 = 1 Kbyte, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 00110 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010-11111 = undefined
    Bits: 15:13 BAR5C(rw) - BAR 5 Control: Specifies the configuration of BAR5. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  BAR5A(rw) - BAR 5 Aperture: Specifies the aperture of the BAR 5 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  BAR4C(rw) - BAR 4 Control: Specifies the configuration of BAR4. The various encodings are: 000: Disabled 001: 32bit IO BAR 010-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  BAR4A(rw) - BAR 4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64bit BAR4-5. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg 0x00000244
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_ERBC BIT(31)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_R24(_x) (((_x) & 0x7f) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_R24_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_R22(_x) (((_x) & 0x3) << 22)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_R22_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_ERBE BIT(21)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_ERBA(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_ERBA_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR5C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR5C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR5A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR5A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR4C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR4C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR4A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_BAR_config_1_reg_BAR4A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg -
    Bits: 31:29 VFBAR3C(rw) - VF BAR 3 Control: Specifies the configuration of VF BAR3. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 28:24 VFBAR3A(rw) - VF BAR 3 Aperture: Specifies the aperture of the VF BAR 3 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits: 23:21 VFBAR2C(rw) - VF BAR 2 Control: Specifies the configuration of VF BAR2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits: 20:16 VFBAR2A(rw) - VF BAR 2 Aperture: Specifies the aperture of the 32-bit VF BAR 2 or 64bit VF BAR2-3. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
    Bits: 15:13 VFBAR1C(rw) - VF BAR 1 Control: Specifies the configuration of VF BAR1. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  VFBAR1A(rw) - VF BAR 1 Aperture: Specifies the aperture of the VF BAR 1 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  VFBAR0C(rw) - VF BAR 0 Control: Specifies the configuration of VF BAR0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  VFBAR0A(rw) - VF BAR 0 Aperture: Specifies the aperture of the 32-bit VF BAR 0 or 64bit VF BAR0-1. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg 0x00000280
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR3C(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR3C_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR3A(_x) (((_x) & 0x1f) << 24)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR3A_of(_x) (((_x) >> 24) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR2C(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR2C_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR2A(_x) (((_x) & 0x1f) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR2A_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR1C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR1C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR1A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR1A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR0C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR0C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR0A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_0_reg_VFBAR0A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg -
    Bits: 31:16 R16(ro) - Reserved:
    Bits: 15:13 VFBAR5C(rw) - VF BAR 5 Control: Specifies the configuration of VF BAR5. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110-111: Reserved
    Bits: 12:8  VFBAR5A(rw) - VF BAR 5 Aperture: Specifies the aperture of the VF BAR 5 when it is configured as a 32-bit BAR. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes
    Bits:  7:5  VFBAR4C(rw) - VF BAR 4 Control: Specifies the configuration of VF BAR4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32bit memory BAR, non prefetchable 101: 32bit memory BAR, prefetchable 110: 64bit memory BAR, non prefetchable 111: 64bit memory BAR, prefetchable
    Bits:  4:0  VFBAR4A(rw) - VF BAR 4 Aperture: Specifies the aperture of the 32-bit VF BAR 4 or 64bit VF BAR4-5. The encodings are: 00000-00011 = 1 Kbytes, 00100 = 2 Kbytes, 00101 = 4 Kbytes, 00110 = 8 Kbytes, 00111 = 16 Kbytes, 01000 = 32 Kbytes, 01001 = 64 Kbytes, 01010 = 128 Kbytes, 01011 = 256 Kbytes, 01100 = 512 Kbytes, 01101 = 1 Mbyte, 01110 = 2 Mbytes, 01111 = 4 Mbytes, 10000 = 8 Mbytes, 10001 = 16 Mbytes, 10010 = 32 Mbytes, 10011 = 64 Mbytes, 10100 = 128 Mbytes, 10101 = 256 Mbytes, 10110 = 512 Mbytes, 10111 = 1 Gbyte, 11000 = 2 Gbytes, 11001 = 4 Gbytes, 11010 = 8 Gbytes, 11011 = 16 Gbytes, 11100 = 32 Gbytes, 11101 = 64 Gbytes, 11110 = 128 Gbytes, 11111 = 256 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg 0x00000284
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_R16(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_R16_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR5C(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR5C_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR5A(_x) (((_x) & 0x1f) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR5A_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR4C(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR4C_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR4A(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_0_vf_BAR_config_1_reg_VFBAR4A_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_pf_config_reg -
    Bits: 31:1  R(ro) - Reserved:
    Bits:  0    F0E(ro) - Function 0 Enable: Enable for Function 0. This bit is hardwired to 1.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_config_reg     0x000002c0
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_config_reg_R(_x) (((_x) & 0x7fffffff) << 1)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_config_reg_R_of(_x) (((_x) >> 1) & 0x7fffffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_pf_config_reg_F0E BIT(0)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_rc_BAR_config_reg -
    Bits: 31    RCBCE(rw) - RC BAR Check Enable: This bit must be set to 1 to enable BAR checking in the RC mode. When this bit is set to 0, the core will forward all incoming memory requests to the client logic without checking their address ranges.
    Bits: 30:21 R22(ro) - Reserved:
    Bits: 20    RCB45E(rw) - RC BAR 4-5 Enable: This bit must be set to enable address checking by RC BAR 4-5.
    Bits: 19:16 RCB45A(rw) - RC BAR 4-5 Aperture: Specifies the aperture of the 64-bit RC BAR 4-5. The encodings are: 0000 = 4 Kbytes, 0001 = 8 Kbytes, ... , 1111 = 128 Gbytes
    Bits: 15:13 R21(ro) - Reserved:
    Bits: 12    RCB23E(rw) - RC BAR 2-3 Enable: This bit must be set to enable address checking by RC BAR 2-3.
    Bits: 11:8  RCB23A(rw) - RC BAR 2-3 Aperture: Specifies the aperture of the 64-bit RC BAR 2-3 The encodings are: 0000 = 4 Kbytes, 0001 = 8 Kbytes, ... , 1111 = 128 Gbytes
    Bits:  7:5  R20(ro) - Reserved:
    Bits:  4    RCB01E(rw) - RC BAR 0-1 Enable: This bit must be set to enable address checking by RC BAR 0-1.
    Bits:  3:0  RCB01A(rw) - RC BAR 0-1 Aperture: This field specifies the aperture of the 64-bit RC BAR 0-1. The encodings are: 0000 = 4 Kbytes, 0001 = 8 Kbytes, ... , 1111 = 128 Gbytes
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg 0x00000300
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCBCE BIT(31)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_R22(_x) (((_x) & 0x3ff) << 21)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_R22_of(_x) (((_x) >> 21) & 0x3ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB45E BIT(20)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB45A(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB45A_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_R21(_x) (((_x) & 0x7) << 13)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_R21_of(_x) (((_x) >> 13) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB23E BIT(12)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB23A(_x) (((_x) & 0xf) << 8)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB23A_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_R20(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_R20_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB01E BIT(4)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB01A(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_rc_BAR_config_reg_RCB01A_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg -
    Bits: 31:23 GSSR0(ro) - Reserved:
    Bits: 22:0  GSSV0(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 0.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg 0x00000340
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg_GSSR0(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg_GSSR0_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg_GSSV0(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_0_reg_GSSV0_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg -
    Bits: 31:23 GSSR1(ro) - Reserved:
    Bits: 22:0  GSSV1(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 1.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg 0x00000344
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg_GSSR1(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg_GSSR1_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg_GSSV1(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_1_reg_GSSV1_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg -
    Bits: 31:23 GSSR2(ro) - Reserved:
    Bits: 22:0  GSSV2(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 2.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg 0x00000348
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg_GSSR2(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg_GSSR2_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg_GSSV2(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_2_reg_GSSV2_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg -
    Bits: 31:23 GSSR3(ro) - Reserved:
    Bits: 22:0  GSSV3(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 3.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg 0x0000034c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg_GSSR3(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg_GSSR3_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg_GSSV3(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_3_reg_GSSV3_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg -
    Bits: 31:23 GSSR4(ro) - Reserved:
    Bits: 22:0  GSSV4(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 4.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg 0x00000350
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg_GSSR4(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg_GSSR4_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg_GSSV4(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_4_reg_GSSV4_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg -
    Bits: 31:23 GSSR5(ro) - Reserved:
    Bits: 22:0  GSSV5(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 5.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg 0x00000354
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg_GSSR5(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg_GSSR5_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg_GSSV5(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_5_reg_GSSV5_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg -
    Bits: 31:23 GSSR6(ro) - Reserved:
    Bits: 22:0  GSSV6(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 6.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg 0x00000358
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg_GSSR6(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg_GSSR6_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg_GSSV6(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_6_reg_GSSV6_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg -
    Bits: 31:23 GSSR7(ro) - Reserved:
    Bits: 22:0  GSSV7(rw) - Gen3 Scrambler Seed Value: Seed value used by the scrambler of lane 7.
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg 0x0000035c
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg_GSSR7(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg_GSSR7_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg_GSSV7(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_scrambler_seed_value_7_reg_GSSV7_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_regf_lm_pcie_base_i_gen3_default_preset_reg -
    Bits: 31:7  R25(ro) - Reserved:
    Bits:  6:4  GDRXPH(rw) - Default Receiver Preset Hint: Default receiver preset hint value used for a lane that did not receive EQ TS2 in Recovery.RcvrCfg LTSSM state
    Bits:  3:0  GDTXP(rw) - Default Transmitter Preset: Default transmitter preset value used for a lane that did not receive EQ TS2 in Recovery.RcvrCfg LTSSM state
*/
#define NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg 0x00000360
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg_R25(_x) (((_x) & 0x1ffffff) << 7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg_R25_of(_x) (((_x) >> 7) & 0x1ffffff)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg_GDRXPH(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg_GDRXPH_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg_GDTXP(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_LM_i_regf_lm_pcie_base_i_gen3_default_preset_reg_GDTXP_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_vendor_id_device_id -
    Bits: 31:16 DID(ro) - Device ID: Device ID assigned by the manufacturer of the device. This field can be written independently for each Function from the local management bus.
    Bits: 15:0  VID(ro) - Vendor ID: This is the Vendor ID assigned by the PCI SIG to the manufacturer of the device The Vendor ID is set in the Vendor ID Register within the local management register block.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_vendor_id_device_id    0x00000000
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_vendor_id_device_id_DID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_vendor_id_device_id_DID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_vendor_id_device_id_VID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_vendor_id_device_id_VID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_command_status -
    Bits: 31    DPE(w1c) - Detected Parity Error: This bit is set when the core has received a poisoned TLP. The Parity Error Response enable bit (bit 6) has no effect on the setting of this bit. This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 30    SSE(w1c) - Signaled System Error: If the SERR enable bit is 1, this bit is set when the core has sent out a fatal or non-fatal error message on the link to the Root Complex. If the SERR enable bit is 0, this bit remains 0. This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 29    RMA(w1c) - Received Master Abort: This bit is set when the core has received a completion from the link with the Unsupported Request status. This field can also be cleared from the local management bus by writing a 1 into this bit position STICKY.
    Bits: 28    RTA(w1c) - Received Target Abort: This bit is set when the core has received a completion from the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position STICKY.
    Bits: 27    STA(w1c) - Signaled Target Abort: This bit is set when the core has sent a completion to the link with the Completer Abort status. This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 26:25 R5(ro) - Reserved:
    Bits: 24    MDPE(w1c) - Master Data Parity Error: When the Parity Error Response enable bit in the PCI Command Register of the associated Physical Function is set, the core sets this bit when it detects the following error conditions: (i) The core receives a Poisoned Completion TLP from the link in response to a request from this VF. (ii) The core sends out a poisoned write request on the link from this VF. (This bit remains 0 when the Parity Error Response enable bit in the PCI Command Register of the associated Physical Function is 0). This field can also be cleared from the local management bus by writing a 1 into this bit position. STICKY.
    Bits: 23:21 R4(ro) - Reserved:
    Bits: 20    CL(ro) - Capabilities List: Indicates the presence of PCI Extended Capabilities registers. This bit is hardwired to 1.
    Bits: 19    IS(ro) - Interrupt Status: Reserved
    Bits: 18:11 R3(ro) - Reserved:
    Bits: 10    IMD(ro) - INTx Message Disable: Reserved
    Bits:  9    R2(ro) - Reserved:
    Bits:  8    SE(ro) - SERR Enable: Reserved
    Bits:  7    R1(ro) - Reserved:
    Bits:  6    PERE(ro) - Parity Error Response Enable: Reserved
    Bits:  5:3  R0(ro) - Reserved:
    Bits:  2    BME(rw) - Bus-Master Enable: Enables the device to issue memory and I/O requests from this Function. This field can be written from the local management bus.
    Bits:  1    MSE(ro) - Mem-Space Enable: Reserved
    Bits:  0    IOSE(ro) - IO-Space Enable: Reserved
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_command_status         0x00000004
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_DPE   BIT(31)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_SSE   BIT(30)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_RMA   BIT(29)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_RTA   BIT(28)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_STA   BIT(27)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R5(_x) (((_x) & 0x3) << 25)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R5_of(_x) (((_x) >> 25) & 0x3)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_MDPE  BIT(24)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R4(_x) (((_x) & 0x7) << 21)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R4_of(_x) (((_x) >> 21) & 0x7)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_CL    BIT(20)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_IS    BIT(19)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R3(_x) (((_x) & 0xff) << 11)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R3_of(_x) (((_x) >> 11) & 0xff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_IMD   BIT(10)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R2    BIT(9)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_SE    BIT(8)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R1    BIT(7)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_PERE  BIT(6)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_R0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_BME   BIT(2)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_MSE   BIT(1)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_command_status_IOSE  BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_revision_id_class_code -
    Bits: 31:24 CC(ro) - Class Code: Identifies the function of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits: 23:16 SCC(ro) - Sub-Class Code: Identifies a sub-category within the selected function. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits: 15:8  PIB(ro) - Programming Interface Byte: Identifies the register set layout of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits:  7:0  RID(ro) - Revision ID: Assigned by the manufacturer of the device to identify the revision RO Setting of this field Denali Databahn-PCIe Core User Guide, PMC-Sierra Version 3.4 202 number of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code 0x00000008
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_CC(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_CC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_SCC(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_SCC_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_PIB(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_PIB_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_RID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_revision_id_class_code_RID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bist_header_latency_cache_line -
    Bits: 31:24 BR(ro) - BIST Register: Reserved
    Bits: 23    DT(ro) - Device Type: Identifies whether the device supports a single Function or multiple Functions. This bit is read as 0 when only Function 0 has been enabled in the Physical Function Configuration Register (in the local management block), and as 1 when more than one Function has been enabled.
    Bits: 22:16 HT(ro) - Header Type: Reserved
    Bits: 15:8  LT(ro) - Latency Timer: Reserved
    Bits:  7:0  CLS(ro) - Cache Line Size: Reserved
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line 0x0000000c
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_BR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_BR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_DT BIT(23)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_HT(_x) (((_x) & 0x7f) << 16)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_HT_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_LT(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_LT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_CLS(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bist_header_latency_cache_line_CLS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_0_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bar_0_reg              0x00000010
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_0_reg_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_0_reg_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_1_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bar_1_reg              0x00000014
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_1_reg_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_1_reg_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_2_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bar_2_reg              0x00000018
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_2_reg_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_2_reg_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_3_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bar_3_reg              0x0000001c
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_3_reg_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_3_reg_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_4_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bar_4_reg              0x00000020
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_4_reg_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_4_reg_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_bar_5_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_bar_5_reg              0x00000024
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_5_reg_NI(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_bar_5_reg_NI_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_rsvd_0A -
  Register: i_vf_pcie_base_rsvd_0E -
  Register: i_vf_pcie_base_rsvd_010_01F_[16] -
  Register: i_vf_power_mgmt_cap_struct_rsvd_022_023_[2] -
  Register: i_vf_MSI_cap_struct_rsvd_02B -
  Register: i_vf_MSIX_cap_struct_rsvd_02F -
  Register: i_vf_PCIE_cap_struct_rsvd_034_038_[5] -
  Register: i_vf_PCIE_cap_struct_rsvd_03A_03F_[6] -
  Register: i_vf_AER_cap_struct_rsvd_04B_04F_[5] -
  Register: i_vf_ARI_cap_struct_rsvd_052_09C_[75] -
    Bits: 31:0  RSVD(ro) - NA
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_rsvd_0A                  0x00000028
#define NFP_PCIEX_VF_i_vf_pcie_base_rsvd_0E                  0x00000038
#define NFP_PCIEX_VF_i_vf_pcie_base_rsvd_010_01F(_x)         (0x00000040 + (0x4 * ((_x) & 0xf)))
#define NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_rsvd_022_023(_x) (0x00000088 + (0x4 * ((_x) & 0x1)))
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_rsvd_02B            0x000000a8
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_rsvd_02F           0x000000bc
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_rsvd_034_038(_x)   (0x000000d0 + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_rsvd_03A_03F(_x)   (0x000000e8 + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_rsvd_04B_04F(_x)    (0x0000012c + (0x4 * ((_x) & 0x7)))
#define NFP_PCIEX_VF_i_vf_ARI_cap_struct_rsvd_052_09C(_x)    (0x00000148 + (0x4 * ((_x) & 0x7f)))
#define   NFP_PCIEX_VF_i_vf_pcie_base_VF_generic_reserved_reg_RSVD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_VF_generic_reserved_reg_RSVD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i -
    Bits: 31:16 SID(ro) - Subsystem ID: Specifies the Subsystem ID assigned by the manufacturer of the device. This field reflects the setting of the corresponding register in the configuration space of the associated Physical Function.
    Bits: 15:0  SVID(ro) - Subsystem Vendor ID: Specifies the Subsystem Vendor ID assigned by the PCI SIG to the manufacturer of the device. Its value comes from the Subsystem Vendor ID Register in the local management register block.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i 0x0000002c
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i_SID(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i_SID_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i_SVID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_subsystem_vendor_id_subsystem_i_SVID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_expansn_rom_bar_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_expansn_rom_bar_reg    0x00000030
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_expansn_rom_bar_reg_NI(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_expansn_rom_bar_reg_NI_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_capabilities_pointer -
    Bits: 31:8  R6(ro) - Reserved:
    Bits:  7:0  CP(ro) - Capabilities Pointer: Contains pointer to the first PCI Capability Structure. This field is set by default to 90 hex, to point to the Power Management Capability Structure. It can be modified by writing to VF 0 from the local management bus, and the setting is common across all VFs.
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_capabilities_pointer   0x00000034
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_capabilities_pointer_R6(_x) (((_x) & 0xffffff) << 8)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_capabilities_pointer_R6_of(_x) (((_x) >> 8) & 0xffffff)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_capabilities_pointer_CP(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_capabilities_pointer_CP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_pcie_base_i_intrpt_line_intrpt_pin_reg -
    Bits: 31:0  NI(ro) - Not Implemented:
*/
#define NFP_PCIEX_VF_i_vf_pcie_base_i_intrpt_line_intrpt_pin_reg 0x0000003c
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_intrpt_line_intrpt_pin_reg_NI(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_pcie_base_i_intrpt_line_intrpt_pin_reg_NI_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap -
    Bits: 31    PSDCS(ro) - PME Support for D3(cold) State: Indicates whether the Function is capable of sending PME messages when in the D3cold state. Because the device does not have aux power, this bit is hardwired to 0.
    Bits: 30    PSDHS(ro) - PME Support for D3(hot) State: Indicates whether the Function is capable of sending PME messages when in the D3hot state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 28    PSD1S(ro) - PME Support for D1 State: Indicates whether the Function is capable of sending PME messages when in the D1 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 27    PSD0S(ro) - PME Support for D0 State: Indicates whether the Function is capable of sending PME messages when in the D0 state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 26    D2S(ro) - D2 Support: Set if the Function supports the D2 power state. Currently hardwired to 0.
    Bits: 25    D1S(ro) - D1 Support: Set if the Function supports the D1 power state. This bit is set to 1 by default, but can be modified from the local management bus by writing into Function 0. All other Functions assume the value set in Function 0s Power Management Capabilities Register.
    Bits: 24:22 MCRAPS(ro) - Max Current Required from Aux Power Supply: Specifies the maximum current drawn by the device from the aux power source in the D3cold state. This field is not implemented in devices not supporting PME notification when in the D3cold state, and is therefore hardwired to 0.
    Bits: 21    DSI(ro) - Device Specific Initialization Bit: This bit, when set, indicates that the device requires additional configuration steps beyond setting up its PCI configuration space, to bring it to the D0active state from the D0uninitialized state. This bit is hardwired to 0.
    Bits: 20    R0(ro) - Reserved:
    Bits: 19    PC(ro) - PME Clock: Not applicable to PCI Express. This bit is hardwired to 0.
    Bits: 18:16 VID(ro) - Version ID: Indicates the version of the PCI Bus Power Management Specifications that the Function implements. This field is set by default to 011 (Version 1.2). It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. By default, this points to the MSI Capability Structure. This field can be re-written independently for each Function from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for Power Management. This field is set by default to 01 hex. It can be re-written independently for each Function from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap 0x00000080
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSDCS BIT(31)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSDHS BIT(30)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSD1S BIT(28)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_PSD0S BIT(27)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_D2S BIT(26)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_D1S BIT(25)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_MCRAPS(_x) (((_x) & 0x7) << 22)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_MCRAPS_of(_x) (((_x) >> 22) & 0x7)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_DSI BIT(21)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_R0 BIT(20)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_PC BIT(19)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_VID(_x) (((_x) & 0x7) << 16)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_VID_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_cap_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep -
    Bits: 31:24 DR(ro) - Data Register: This optional register is not implemented in the Databahn PCIe core. This field is hardwired to 0.
    Bits: 23:16 R1(ro) - Reserved:
    Bits: 15    PMES(rw) - PME Status: When PME notification is enabled, writing a 1 into this bit position from the local management bus sets this bit and causes the core to send a PME message from the associated Function. When the Root Complex processes this message, it will turn off this bit by writing a 1 into this bit position though a Config Write. This bit can be set or cleared from the local management bus, by writing a 1 or 0, respectively. It can only be cleared from the configuration path (by writing a 1).
    Bits: 14:9  R2(ro) - Reserved:
    Bits:  8    PE(rw) - PME Enable: Setting this bit enables the notification of PME events from the associated Function. This bit can be set also by writing into this register from the local management bus.
    Bits:  7:4  R3(ro) - Reserved:
    Bits:  3    NSR(ro) - No Soft Reset: When this bit is set to 1, the Function will maintain all its state in the PM state D3hot. The software is not required to re-initialize the Function registers on the transition back to D0. This bit is set to 1 by default, but can be modified independently for each VF from the local management bus.
    Bits:  2    R4(ro) - Reserved:
    Bits:  1:0  PS(rw) - Power State: Indicates the power state this Function is currently in. This field can be read by the software to monitor the current power state, or can be written to cause a transition to a new state. The valid settings are 00 (state D0), 01 (state D1) and 11 (state D3hot). The software should not write any other value into this field. This field can also be written from the local management bus independently for each VF Function.
*/
#define NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep 0x00000084
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_DR(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_DR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R1(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R1_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PMES BIT(15)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R2(_x) (((_x) & 0x3f) << 9)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R2_of(_x) (((_x) >> 9) & 0x3f)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PE BIT(8)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R3(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_NSR BIT(3)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_R4 BIT(2)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PS(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_VF_i_vf_power_mgmt_cap_struct_i_pwr_mgmt_ctrl_stat_rep_PS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_ctrl_reg -
    Bits: 31:25 R0(ro) - Reserved:
    Bits: 24    MCAP(ro) - Set to 1 to indicate that the device has per-vector masking capability. By default, this bit is set to 1 for PF 0 and 0 for PF 1. This bit can be written from the local management bus.
    Bits: 23    AC64(ro) - 64-Bit Address Capable: Set to 1 to indicate that the device is capable of generating 64-bit addresses for MSI messages. Because the core has this capability, this bit is hardwired to 1.
    Bits: 22:20 MME(rw) - Multiple Message Enable: Encodes the number of distinct messages that the core is programmed to generate for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). This setting must be based on the number of interrupt inputs of the core that are actually used by this Function. This field can be written from the local management bus.
    Bits: 19:17 MMC(ro) - Multiple Message Capable: Encodes the number of distinct messages that the core is capable of generating for this Function (000 = 1, 001 = 2, 010 = 4, 011 = 8, 100 = 16, 101 = 32). Thus, this field defines the number of the interrupt vectors for this Function. The core allows up to 32 distinct messages, but the setting of this field must be based on the number of interrupt inputs of the core that are actually used by the client. For example, if the client logic uses 8 of the 32 distinct MSI interrupt inputs of the core for this Function, then the value of this field must be set to 011. This field can be written from the local management bus.
    Bits: 16    ME(rw) - MSI Enable: Set by the configuration program to enable the MSI feature. This field can also be written from the local management bus.
    Bits: 15:8  CP(ro) - Pointer to the next PCI Capability Structure. The value read from this read-only field is the corresponding pointer in the MSI Capability Structure of the Physical Function this VF is attached to.
    Bits:  7:0  CID(ro) - Capability ID: Specifies that the capability structure is for MSI. Hardwired to 05 hex.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg      0x00000090
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_R0(_x) (((_x) & 0x7f) << 25)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_R0_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_MCAP BIT(24)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_AC64 BIT(23)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_MME(_x) (((_x) & 0x7) << 20)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_MME_of(_x) (((_x) >> 20) & 0x7)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_MMC(_x) (((_x) & 0x7) << 17)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_MMC_of(_x) (((_x) >> 17) & 0x7)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_ME BIT(16)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_ctrl_reg_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_msg_low_addr -
    Bits: 31:2  MAL(rw) - Message Address Low: Lower bits of the address to be used in MSI messages. This field can also be written from the local management bus.
    Bits:  1:0  R1(ro) - Reserved: The two lower bits of the address are hardwired to 0 to align the address on a double-word boundary.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_low_addr  0x00000094
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_low_addr_MAL(_x) (((_x) & 0x3fffffff) << 2)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_low_addr_MAL_of(_x) (((_x) >> 2) & 0x3fffffff)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_low_addr_R1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_low_addr_R1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_msg_hi_addr -
    Bits: 31:0  MAH(rw) - Message Address High: Contains bits 63:32 of the 64-bit address to be used in MSI Messages. A value of 0 specifies that 32-bit addresses are to be used in the messages. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_hi_addr   0x00000098
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_hi_addr_MAH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_hi_addr_MAH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_msg_data -
    Bits: 31:16 R2(ro) - Reserved: Hardwired to 0
    Bits: 15:0  MD(rw) - Message Data: Message data to be used for this Function. This field can also be written from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_data      0x0000009c
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_data_R2(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_data_R2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_data_MD(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_msg_data_MD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_mask -
    Bits: 31:0  MSIMask(rw) - Mask bits for MSI interrupts. The Multiple Message Capable field in the MSI Control Register specifies the number of distinct interrupts for the Function, which determines the number of valid mask bits
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_mask          0x000000a0
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_mask_MSIMask(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_mask_MSIMask_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_MSI_cap_struct_i_msi_pend -
    Bits: 31:0  MSIPend(ro) - Pending bits for MSI interrupts. A read from this location returns the state of the MSI_MASK inputs of the core.
*/
#define NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_pend          0x000000a4
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_pend_MSIPend(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_MSI_cap_struct_i_msi_pend_MSIPend_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_MSIX_cap_struct_i_msix_ctrl -
    Bits: 31    MSIXE(rw) - MSI-X Enable: Set by the configuration program to enable the MSI-X feature. This field can also be written from the local management bus.
    Bits: 30    FM(rw) - Function Mask: This bit serves as a global mask to all the interrupt conditions associated with this Function. When this bit is set, the core will not send out MSI messages from this Function. This field can also be written from the local management bus.
    Bits: 29:27 R0(ro) - Reserved:
    Bits: 26:16 MSIXTS(ro) - MSI-X Table Size: Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function. The programmed value is 1 minus the size of the table (that is, this field is set to 0 if the table size is 1.). This field is set by default to 3f hex. It can be re-written independently for each Function from the local management bus.
    Bits: 15:8  CP(ro) - Capabilities Pointer: Contains pointer to the next PCI Capability Structure. This is set to point to the PCI Express Capability Structure at 30 hex. This can be modified for VF 0 from the local management bus.
    Bits:  7:0  CID(ro) - Capability ID: Identifies that the capability structure is for MSI-X. This field is set by default to 11 hex. It can be rewritten independently for each Function from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl        0x000000b0
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_MSIXE BIT(31)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_FM   BIT(30)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_R0(_x) (((_x) & 0x7) << 27)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_R0_of(_x) (((_x) >> 27) & 0x7)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_MSIXTS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_MSIXTS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_CP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_CP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_ctrl_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_MSIX_cap_struct_i_msix_tbl_offset -
    Bits: 31:3  TO(ro) - Table Offset: Offset of the memory address where the MSI-X Table is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5).
*/
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_tbl_offset  0x000000b4
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_tbl_offset_TO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_tbl_offset_TO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_tbl_offset_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_tbl_offset_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_MSIX_cap_struct_i_msix_pending_intrpt -
    Bits: 31:3  PO(ro) - PBA Offset: Offset of the memory address where the PBA is located, relative to the selected BAR. The three least significant bits of the address are omitted, as the addresses are QWORD aligned.
    Bits:  2:0  BARI(ro) - BAR Indicator Register: Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, ... , 101 = BAR 5). The value programmed must be the same as the BAR Indicator configured in the MSI-X Table Offset Register.
*/
#define NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_pending_intrpt 0x000000b8
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_pending_intrpt_PO(_x) (((_x) & 0x1fffffff) << 3)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_pending_intrpt_PO_of(_x) (((_x) >> 3) & 0x1fffffff)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_pending_intrpt_BARI(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_i_vf_MSIX_cap_struct_i_msix_pending_intrpt_BARI_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_cap_list -
    Bits: 31    R0(ro) - Reserved:
    Bits: 30    TRS(ro) - TCS Routing Supported: When set to 1, this bit indicates that the device supports routing of Trusted Configuration Requests. Not valid for Endpoints. Hardwired to 0.
    Bits: 29:25 IMN(ro) - Interrupt Message Number: Identifies the MSI or MSI-X interrupt vector for the interrupt message generated corresponding to the status bits in the Slot Status Register, Root Status Register, or this capability structure. This field must be defined based on the chosen interrupt mode - MSI or MSI-X. This field is hardwired to 0.
    Bits: 24    SS(ro) - Slot Status: Set to 1 when the link connected to a slot. Hardwired to 0.
    Bits: 23:20 DT(ro) - Device Type: Indicates the type of device implementing this Function. This field is hardwired to 0 in the EP mode.
    Bits: 19:16 CV(ro) - Capability Version: Identifies the version number of the capability structure. When GEN2_ENABLE is strapped high, this field is permanently set to 2 (Gen2), and 1 (Gen1) otherwise.
    Bits: 15:8  NCP(ro) - Next Capability Pointer: Points to the next PCI capability structure. Set to 0 because this is the last capability structure.
    Bits:  7:0  CID(ro) - Capability ID: Specifies Capability ID assigned by PCI SIG for this structure. This field is hardwired to 10 hex.
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list    0x000000c0
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_R0 BIT(31)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_TRS BIT(30)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_IMN(_x) (((_x) & 0x1f) << 25)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_IMN_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_SS BIT(24)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_DT(_x) (((_x) & 0xf) << 20)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_DT_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_NCP(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_NCP_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_CID(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_cap_list_CID_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_dev_cap -
    Bits: 31:29 R3(ro) - Reserved:
    Bits: 28    FLRC(ro) - FLR Capable: Set when device has Function-Level Reset capability. Hardwired to 1.
    Bits: 27:26 CPLS(ro) - Captured Power Limit Scale: This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits: 25:18 CSPLV(ro) - Captured Slot Power Limit Value: This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits: 17:16 R2(ro) - Reserved:
    Bits: 15    RBER(ro) - Role-Based Error Reporting: This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits: 14:12 R1(ro) - Reserved:
    Bits: 11:9  AL1SL(ro) - Acceptable L1 Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L1 to L0. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits:  8:6  AL0SL(ro) - Acceptable L0S Latency: Specifies acceptable latency that the Endpoint can tolerate while transitioning from L0S to L0. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits:  5    ETFS(ro) - Extended Tag Field Supported: Set when device allows the tag field to be extended from 5 to 8 bits. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
    Bits:  4:3  PFS(ro) - Phantom Functions Supported: This field is used to extend the tag field by combining unused Function bits with the tag bits. This field is hardwired to 00 to disable this feature.
    Bits:  2:0  MPS(ro) - Max Payload Size: Specifies maximum payload size supported by the device. This field reflects the setting of the corresponding field in the PCIe Device Capability Register of PF 0.
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap     0x000000c4
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_R3(_x) (((_x) & 0x7) << 29)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_R3_of(_x) (((_x) >> 29) & 0x7)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_FLRC BIT(28)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_CPLS(_x) (((_x) & 0x3) << 26)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_CPLS_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_CSPLV(_x) (((_x) & 0xff) << 18)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_CSPLV_of(_x) (((_x) >> 18) & 0xff)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_R2(_x) (((_x) & 0x3) << 16)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_R2_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_RBER BIT(15)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_R1(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_R1_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_AL1SL(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_AL1SL_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_AL0SL(_x) (((_x) & 0x7) << 6)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_AL0SL_of(_x) (((_x) >> 6) & 0x7)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_ETFS BIT(5)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_PFS(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_PFS_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_MPS(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_MPS_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status -
    Bits: 31:22 R4(ro) - Reserved:
    Bits: 21    TP(ro) - Transaction Pending: Indicates if any of the Non-Posted requests issued by the Function are still pending.
    Bits: 20    APD(ro) - Aux Power Detected: Reserved
    Bits: 19    URD(ro) - Unsupported Request Detected: Reserved
    Bits: 18    FED(ro) - Fatal Error Detected: Reserved
    Bits: 17    NFER(ro) - Non-Fatal Error Detected: Reserved
    Bits: 16    CED(ro) - Correctable Error Detected: Reserved
    Bits: 15    FLR(rw) - Function-Level Reset: Writing a 1 into this bit position generated a Function-Level Reset for the selected VF. This bit reads as 0.
    Bits: 14:12 MRRS(ro) - Max Read Request Size: Reserved
    Bits: 11    EBS(ro) - Enable No Snoop: Reserved
    Bits: 10    EAP(ro) - Enable Aux Power: Reserved
    Bits:  9    EPF(ro) - Enable Phantom Functions: Reserved
    Bits:  8    ETFE(ro) - Extended Tag Field Enable: Reserved
    Bits:  7:5  MPS(ro) - Max Payload Size: Reserved
    Bits:  4    ERO(ro) - Enable Relaxed Ordering: Reserved
    Bits:  3    EURR(ro) - Enable Unsupported Request Reporting: Reserved
    Bits:  2    EFER(ro) - Enable Fatal Error Reporting: Reserved
    Bits:  1    ENFER(ro) - Enable Non-Fatal Error Reporting: Reserved
    Bits:  0    ECER(ro) - Enable Correctable Error Reporting: Reserved
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status 0x000000c8
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_R4(_x) (((_x) & 0x3ff) << 22)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_R4_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_TP BIT(21)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_APD BIT(20)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_URD BIT(19)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_FED BIT(18)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_NFER BIT(17)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_CED BIT(16)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_FLR BIT(15)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_MRRS(_x) (((_x) & 0x7) << 12)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_MRRS_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_EBS BIT(11)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_EAP BIT(10)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_EPF BIT(9)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_ETFE BIT(8)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_MPS(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_MPS_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_ERO BIT(4)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_EURR BIT(3)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_EFER BIT(2)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_ENFER BIT(1)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_ctrl_status_ECER BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_link_cap -
    Bits: 31:0  LCR(ro) - NA
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_link_cap         0x000000cc
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_link_cap_LCR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_link_cap_LCR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_PCIE_cap_struct_i_pcie_dev_cap_2 -
    Bits: 31:0  PDCR(ro) - NA
*/
#define NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_2   0x000000e4
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_2_PDCR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_PCIE_cap_struct_i_pcie_dev_cap_2_PDCR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. It is set by default to 140 hex to point to the ARI Capability Structure. This field reflects the setting of the corresponding field in the AER Enhanced Capability Header Register of PF 0.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field reflects the setting of the corresponding field in the AER Enhanced Capability Header Register of PF 0.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the PCI Express AER Extended Capability Structure (0001 hex).
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr 0x00000100
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_AER_enhanced_cap_hdr_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_uncorr_err_status -
    Bits: 31:23 R3(ro) - Reserved: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits: 21    R2(w1c) - Reserved: This bit is set when the core has received a request from the link that it does not support. This error is not Function-specific. This error is considered non-fatal by default. In the special case described in Sections 6.2.3.2.4.1 of the PCI Express Specifications, the error is reported by sending an ERR_COR message. In all other cases, the error is reported by sending an ERR_NONFATAL message. The header of the received request that caused the error is logged in the Header Log Registers. STICKY.
    Bits: 20:12 Reserved(ro) - Reserved:
    Bits: 11:5  R1(ro) - Reserved:
    Bits:  4    DLPER(ro) - Data Link Protocol Error Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  3:0  R0(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status 0x00000104
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R3(_x) (((_x) & 0x1ff) << 23)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R3_of(_x) (((_x) >> 23) & 0x1ff)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R2 BIT(21)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_Reserved(_x) (((_x) & 0x1ff) << 12)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_Reserved_of(_x) (((_x) >> 12) & 0x1ff)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R1(_x) (((_x) & 0x7f) << 5)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R1_of(_x) (((_x) >> 5) & 0x7f)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_DLPER BIT(4)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_status_R0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_uncorr_err_mask -
    Bits: 31:0  R4(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_mask   0x00000108
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_mask_R4(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_mask_R4_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_uncorr_err_severity -
    Bits: 31:0  R8(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_severity 0x0000010c
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_severity_R8(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_uncorr_err_severity_R8_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_corr_err_status -
    Bits: 31:16 R14(ro) - Reserved:
    Bits: 15    HLOS(w1c) - Header Log Overflow Status: This bit is set on a Header Log Register overflow, that is, when the header could not be logged in the Header Log Register because it is occupied by a previous header. STICKY.
    Bits: 14    CIES(ro) - Corrected Internal Error Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits: 13    ANFES(w1c) - Advisory Non-Fatal Error Status: This bit is set when an uncorrectable error occurs, which is determined to belong to one of the special cases described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications. This causes the core to generate an ERR_COR message in place of an ERR_NONFATAL message. STICKY.
    Bits: 12    RTTS(ro) - Replay Timer Timeout Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits: 11:9  R13(ro) - Reserved:
    Bits:  8    RNRS(ro) - Replay Number Rollover Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  7    BDS(ro) - Bad DLLP Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  6    BTPS(ro) - Bad TP Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
    Bits:  5:1  R12(ro) - Reserved:
    Bits:  0    RES(ro) - Receiver Error Status: This bit is not implemented for Virtual Functions. Hardwired to 0.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status   0x00000110
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_R14(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_R14_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_HLOS BIT(15)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_CIES BIT(14)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_ANFES BIT(13)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_RTTS BIT(12)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_R13(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_R13_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_RNRS BIT(8)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_BDS BIT(7)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_BTPS BIT(6)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_R12(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_R12_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_status_RES BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_corr_err_mask -
    Bits: 31:16 R17(ro) - Reserved:
    Bits: 15    HLOM(rw) - Header Log Overflow Mask: This bit, when set, masks the generation of error messages in response to a Header Log register overflow. STICKY.
    Bits: 14    CIEM(ro) - Corrected Internal Error Mask: This bit, when set, masks the generation of error messages in response to a corrected internal error condition.
    Bits: 13    ANFEM(rw) - Advisory Non-Fatal Error Mask: This bit, when set, masks the generation of error messages in response to an uncorrectable error occur, which is determined to belong to one of the special cases (as described in Section 6.2.3.2.4 of the PCI Express 2.0 Specifications). STICKY.
    Bits: 12    RTTM(ro) - Replay Timer Timeout Mask: This bit, when set, masks the generation of error messages in response to a Replay Timer timeout event.
    Bits: 11:9  R16(ro) - Reserved:
    Bits:  8    RNRM(ro) - Replay Number Rollover Mask: This bit, when set, masks the generation of error messages in response to a Replay Number Rollover event.
    Bits:  7    BDM(ro) - Bad DLLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad DLLP' received.
    Bits:  6    BTM(ro) - Bad TLP Mask: This bit, when set, masks the generation of error messages in response to a 'Bad TLP' received.
    Bits:  5:1  R15(ro) - Reserved:
    Bits:  0    REM(ro) - Receiver Error Mask: This bit, when set, masks the generation of error messages in response to the Physical Layer errors
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask     0x00000114
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_R17(_x) (((_x) & 0xffff) << 16)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_R17_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_HLOM BIT(15)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_CIEM BIT(14)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_ANFEM BIT(13)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_RTTM BIT(12)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_R16(_x) (((_x) & 0x7) << 9)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_R16_of(_x) (((_x) >> 9) & 0x7)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_RNRM BIT(8)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_BDM BIT(7)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_BTM BIT(6)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_R15(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_R15_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_corr_err_mask_REM BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_advcd_err_cap_ctrl -
    Bits: 31:11 R18(ro) - Reserved:
    Bits: 10    MHRE(ro) - Multiple Header Recording Enable: Setting this bit enables the Function to log multiple error headers in its Header Log Registers. It is hardwired to 0
    Bits:  9    MHRC(ro) - Multiple Header Recording Capable: This bit is set when the Function has the capability to log more than one error header in its Header Log Registers. It is hardwired to 0.
    Bits:  8    ECC(ro) - Enable ECRC Check: Setting this bit enables ECRC checking on the receive side of the core. This bit is hardwired to 0. The setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  7    ECCAP(ro) - ECRC Check Capability: This read-only bit indicates to the software that the device is capable of checking ECRC in packets received from the link. This bit is hardwired to 0. This setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  6    EEG(ro) - Enable ECRC Generation: Enables the ECRC generation on the transmit side of the core. This bit is hardwired to 0. The setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  5    EGC(ro) - ECRC Generation Capability: This read-only bit indicates to the software that the device is capable of generating ECRC in packets transmitted on the link. This bit is hardwired to 0. The setting of the corresponding bit in the Advanced Error Capabilities and Control Register of PF 0 applies to all Virtual Functions.
    Bits:  4:0  FER(ro) - First Error Pointer: This is a 5-bit pointer to the bit position in the Uncorrectable Error Status Register corresponding to the error that was detected first. When there are multiple bits set in the Uncorrectable Error Status Register, this field informs the software which error was observed first. To prevent the field from being overwritten before software was able to read it, this field is not updated while the status bit pointed by it in the Uncorrectable Error Status Register remains set. After the software clears this status bit, a subsequent error condition that sets any bit in the Uncorrectable Error Status Register will update the First Error Pointer. Any uncorrectable error type, including the special cases where the error is reported using an ERR_COR message, will set the First Error Pointer (assuming the software has reset the error pointed by it in the Uncorrectable Error Status Register). STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl 0x00000118
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_R18(_x) (((_x) & 0x1fffff) << 11)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_R18_of(_x) (((_x) >> 11) & 0x1fffff)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_MHRE BIT(10)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_MHRC BIT(9)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_ECC BIT(8)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_ECCAP BIT(7)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_EEG BIT(6)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_EGC BIT(5)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_FER(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_advcd_err_cap_ctrl_FER_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_0 -
    Bits: 31:0  HD0(ro) - Header DWORD 0: First DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_0         0x0000011c
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_0_HD0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_0_HD0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_1 -
    Bits: 31:0  HD1(ro) - Header DWORD 1: Second DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_1         0x00000120
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_1_HD1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_1_HD1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_2 -
    Bits: 31:0  HD2(ro) - Header DWORD 2: Third DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_2         0x00000124
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_2_HD2(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_2_HD2_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_AER_cap_struct_i_hdr_log_3 -
    Bits: 31:0  HD3(ro) - Header DWORD 3: Fourth DWORD of captured TLP header STICKY.
*/
#define NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_3         0x00000128
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_3_HD3(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_AER_cap_struct_i_hdr_log_3_HD3_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. The pointer is set by default to point to the Device Serial Number Capability Structure. This pointer can be modified for all Virtual Functions by writing into this register of VF 0 from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG-assigned value for the version of the capability structure. This field is taken from the setting of the corresponding field in the ARI Extended Capability Header Register of PF 0.
    Bits: 15:0  PCCID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI-SIG to the ARI Extended Capability (000E hex).
*/
#define NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr   0x00000140
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr_PCCID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_ext_cap_hdr_PCCID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_ARI_cap_struct_i_ARI_cap_and_ctrl -
    Bits: 31:0  R13(ro) - Reserved:
*/
#define NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_cap_and_ctrl  0x00000144
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_cap_and_ctrl_R13(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_PCIEX_VF_i_vf_ARI_cap_struct_i_ARI_cap_and_ctrl_R13_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg -
    Bits: 31:20 NCO(ro) - Next Capability Offset: Indicates offset to the next PCI Express capability structure. Its default value is NULL, but can be modified independently for all VFs by writing into VF 0 from the local management bus.
    Bits: 19:16 CV(ro) - Capability Version: Specifies the SIG assigned value for the version of the capability structure. This field is set by default to 1, but can be modified for all VFs by writing into this register field of Physical Function 0 from the local management bus.
    Bits: 15:0  PECID(ro) - PCI Express Extended Capability ID: This field is hardwired to the Capability ID assigned by PCI SIG to the TPH Requester Capability.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg 0x00000274
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_NCO(_x) (((_x) & 0xfff) << 20)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_NCO_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_CV(_x) (((_x) & 0xf) << 16)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_CV_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_PECID(_x) (((_x) & 0xffff) << 0)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ext_cap_header_reg_PECID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_req_cap_reg -
    Bits: 31:27 R2(ro) - Reserved:
    Bits: 26:16 STTS(ro) - ST Table Size: Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on). Max limit is 64 entries when the ST Table is located in the TPH Requester Capability Structure, and 2048 entries when located in the MSI-X table. Each entry is 16 bits long. This field is set by default to 3F hex (64 entries), but can be modified from the local management bus.
    Bits: 15:11 R1(ro) - Reserved:
    Bits: 10:9  STTL(ro) - ST Table Location: The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present. (00 = ST Table not present, 01 = ST Table in the TPH Requester Capability Structure, 10 = ST values stored in the MSI-X Table in client RAM, 11 = reserved.). This field is set by default to 01, but can be modified from the local management bus.
    Bits:  8    ERS(ro) - Extended TPH Requester Supported: When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix. This bit is hardwired to 0, as the core does not have this capability.
    Bits:  7:3  R0(ro) - Reserved:
    Bits:  2    DSMS(ro) - Device-Specific Mode Supported: A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation. In this mode, the Steering Tags are supplied by the client for each request through the HAL master interface. The client typically chooses the Steering Tag values from the ST Table, but is not required to do so. This bit is set to 1 by default, but can be modified from the local management bus.
    Bits:  1    IVMS(ro) - Hardwired to 0.
    Bits:  0    NSTM(ro) - No ST Mode Supported: When set to 1, indicates that this Function supports the 'No ST Mode' for the generation of TPH Steering Tags. In the No ST Mode, the device must use a Steering Tag value of 0 for all requests. This bit is hardwired to 1, as all TPH Requesters are required to support the No ST Mode of operation.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg   0x00000278
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_R2(_x) (((_x) & 0x1f) << 27)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_R2_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_STTS(_x) (((_x) & 0x7ff) << 16)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_STTS_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_R1(_x) (((_x) & 0x1f) << 11)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_R1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_STTL(_x) (((_x) & 0x3) << 9)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_STTL_of(_x) (((_x) >> 9) & 0x3)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_ERS BIT(8)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_R0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_R0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_DSMS BIT(2)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_IVMS BIT(1)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_cap_reg_NSTM BIT(0)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_req_ctrl_reg -
    Bits:  8    TRE(rw) - TPH Requester Enable: When set to 1, the Function is RW 0 allowed to generate requests with Transaction Processing Hints. The TPH_REQUESTER_ ENABLE[1:0] output of the core copies the setting of this register bit (bit i for VF i). This field can also be written from the local management bus.
    Bits:  2:0  STM(rw) - ST Mode: This field selects the ST mode (000 = No Steering Tag Mode, 001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved). The TPH_ST_MODE[5:0] output of the core reflects the setting of this register field (bits 3:0 for PF 0 and bits 5:3 for PF 1). This field can also be written from the local management bus.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ctrl_reg  0x0000027c
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ctrl_reg_TRE BIT(8)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ctrl_reg_STM(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_req_ctrl_reg_STM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_vf_TPH_cap_struct_i_TPH_st_table0_31_[32] -
    Bits: 31:24 ST1U(rw) - ST 1 Upper: This field is used for the upper 8 bits of the second Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits: 23:16 ST1L(rw) - ST 1 Lower: Lower 8 bits of the second Steering Tag. This is the 8-bit Steering Tag sent out in requests.
    Bits: 15:8  ST0U(rw) - ST 0 Upper: This field is used for the upper 8 bits of the first Steering Tag when Extended TPH Requester support is enabled. Because the core does not support TLP prefixes, this field is reserved.
    Bits:  7:0  ST0L(rw) - ST 0 Lower: Lower 8 bits of the first Steering Tag. This is the 8-bit Steering Tag sent out in requests.
*/
#define NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31(_x) (0x00000280 + (0x4 * ((_x) & 0x1f)))
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST1U(_x) (((_x) & 0xff) << 24)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST1U_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST1L(_x) (((_x) & 0xff) << 16)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST1L_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST0U(_x) (((_x) & 0xff) << 8)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST0U_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST0L(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIEX_VF_i_vf_TPH_cap_struct_i_TPH_st_table0_31_ST0L_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
    Bits:  3:0  AprobeTxAddr(rw) - Address for TX lane aprobe data.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMAAprobeTxAddr(_x) (0x00000000 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr 0x0000e000
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeTxAddr_AprobeTxAddr(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeTxAddr_AprobeTxAddr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
    Bits:  7:3  AprobeRxAddr(rw) - Address for RX lane aprobe data.
    Bits:  2:0  AprobeRegRxTxAddr(rw) - Address for RX and TX regulator lane aprobe data.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMAAprobeRxAddr(_x) (0x00000001 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr 0x0000e001
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRxAddr(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRxAddr_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRegRxTxAddr(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRegRxTxAddr_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
    Bits:  3    RstLanePcsSoftTx(rw) - TX lane soft reset. Active Low
    Bits:  2    RstLanePcsSoftRx(rw) - RX lane soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstBypassEn(rw) - RX and TX lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    Cmnctlporhardrstbypass(rw) - RX and TX lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxLanecontrol(_x) (0x00000002 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol 0x0000e002
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_RstLanePcsSoftTx BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_RstLanePcsSoftRx BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_CmnCtlPorHardRstBypassEn BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_Cmnctlporhardrstbypass BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
    Bits:  4:0  LanePcsPstateRx(rw) - Rx Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALanePstateRx(_x) (0x00000003 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx 0x0000e003
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateRx_LanePcsPstateRx(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateRx_LanePcsPstateRx_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
    Bits:  4:0  LanePcsPstateTx(rw) - TX Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALanePstateTx(_x) (0x00000004 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx 0x0000e004
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateTx_LanePcsPstateTx(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateTx_LanePcsPstateTx_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
    Bits:  6:4  PcsTxDataWidth(rw) - Defines TX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
    Bits:  2:0  PcsRxDataWidth(rw) - Defines RX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMADataWidth(_x) (0x00000005 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth 0x0000e005
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsTxDataWidth(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsTxDataWidth_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsRxDataWidth(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsRxDataWidth_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
    Bits:  6:4  PcsTxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
    Bits:  2:0  PcsRxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneControl(_x) (0x00000006 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl 0x0000e006
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsTxDivRate(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsTxDivRate_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsRxDivRate(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsRxDivRate_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
    Bits:  7    LBParRx2TxTimedEn(rw) - PMA Parallel RX-to-TX loop-back enable. Parallel loopback from the PMA receive lane 20-bit data ports, to the transmit lane 20-bit data ports. 0 = Disables loopback. 1 = Loops back the 20-bit receive data port to the transmitter.
    Bits:  6    LBTx2RxIoTimedEn(rw) - PMA TX-to-RX I/O serial loop-back enable (loop back done directly from TX to RX pads). Serial IO loopback from the transmit lane IO pins to the receive lane IO pins: 0 = Disables loopback. 1 = Loops back the driver IO signal to the RX IO pins.
    Bits:  5    LBTx2RxBufTimedEn(rw) - PMA TX-to-RX buffered serial loop-back enable (bypasses IO Driver). Serial transmit to receive buffered loopback: 0 = Disables loopback. 1 = Loops back the TX serializer output into the CDR.
    Bits:  4    LBRx2TxUntimedEn(rw) - PMA serial RX-to-TX loop-back enable (from AGC to IO Driver). Serial receive to transmit loopback: 0 = Disables loopback. 1 = Transmits the untimed, partial equalized RX signal out the transmit IO pins.
    Bits:  3    LBPllFbClk2CdrRefClkEn(rw) - PMA PLL feedback clock-to-CDR reference clock loopback enable.
    Bits:  2    LbCdrDivClk2TxEn(rw) - PMA CDR divided-recovered-clock loopback enable for internal GPON mode..
    Bits:  1    LBCdrDivClk2ExtEn(rw) - PMA CDR divided-recovered-clock loopback enable for external clean up GPON mode.
    Bits:  0    LBCdrClk2TxEn(rw) - PMA CDR recovered-clock loopback enable; asserted when PARRX2TXTIMEDEN is 1. Transmit bit clock select: 0 = Selects synthesizer bit clock for transmit. 1 = Selects CDR clock for transmit
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist(_x) (0x00000007 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist 0x0000e007
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBParRx2TxTimedEn BIT(7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBTx2RxIoTimedEn BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBTx2RxBufTimedEn BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBRx2TxUntimedEn BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBPllFbClk2CdrRefClkEn BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LbCdrDivClk2TxEn BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBCdrDivClk2ExtEn BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBCdrClk2TxEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
    Bits:  4    RxBistRxLocked(rw) - RX BIST locked indicator. '0' Indicates BIST is not word locked and error comparisons have not begun yet. '1' Indicates BIST is word locked and error comparisons have begun.
    Bits:  3    RxBistErrCntOvf(rw) - RX BIST error count overflow indicator. Indicates an overflow in the number of byte errors identified during the course of the test. This word is stable to sample when *_DONE_* signal has asserted.
    Bits:  2    RxBistDone(rw) - RX BIST completion: '0' Indicates test is not completed. '1' Indicates the test has completed, and will remain high until a new test is initiated.
    Bits:  1    PcsTxBistEn(rw) - Transmit lane BIST enable.
    Bits:  0    PcsRxBistEn(rw) - Recieve lane BIST enable.Active High
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist2(_x) (0x00000008 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 0x0000e008
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistRxLocked BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistErrCntOvf BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistDone BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_PcsTxBistEn BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_PcsRxBistEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
    Bits:  7:0  RxBistErrCount(rw) - RX BIST error count word. Indicates the number of byte errors identified during the course of the test.This word is stable to sample when *_DONE_* signal has asserted.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist3Reg(_x) (0x00000009 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist3(_x) (0x0000000a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg 0x0000e009
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 0x0000e00a
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST3_RxBistErrCount(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST3_RxBistErrCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
    Bits:  5    RXSigdetCdrLock2Data(rw) - RX CDR Lock to Data status indicator 0 - CDR is locked to reference clock 1 - CDR is locked to data.
    Bits:  4    RxPpmLockStatus(rw) - RX lane PLL lock status. 1 = CDR VCO is locked to reference clock.
    Bits:  3    PcsOutTxStatus(rw) - TX lane state transition status. Indicates the TX has completed a requested state transition. 0 = TX Lane has not completed its state change. 1 = TX Lane has completed its state change.
    Bits:  2    PcsOutTxReady(rw) - TX lane ready status signal: 0 = TX Lane is not ready for data transmission. 1 = TX Lane is ready for data transmission.
    Bits:  1    PcsOutRxStatus(rw) - RX lane state transition status. Indicates the RX has completed a requested state transition. 0 = RX Lane has not completed its state change. 1 = RX Lane has completed its state change.
    Bits:  0    PcsOutRxReady(rw) - RX lane ready status signal. 0 = RX Lane is not ready for data transmission. 1 = RX Lane is ready for data transmission.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneStatus(_x) (0x0000000b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus 0x0000e00b
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_RXSigdetCdrLock2Data BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_RxPpmLockStatus BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutTxStatus BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutTxReady BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutRxStatus BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutRxReady BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyIclk(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration(_x) (0x0000000c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration 0x0000e00c
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCal_RXCalDutyIclk(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCal_RXCalDutyIclk_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyQclk(rw) - RX lane QCLK duty calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration2(_x) (0x0000000d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 0x0000e00d
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCalq_RXCalDutyQclk(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCalq_RXCalDutyQclk_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData0(rw) - RX lane DATA0 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration3(_x) (0x0000000e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 0x0000e00e
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal3_RXCalOffsetData0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal3_RXCalOffsetData0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData1(rw) - RX lane DATA1 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration4(_x) (0x0000000f + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 0x0000e00f
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal31_RXCalOffsetData1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal31_RXCalOffsetData1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge0(rw) - RX lane EDGE0 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration5(_x) (0x00000010 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 0x0000e010
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE0_RXCalOffsetEdge0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE0_RXCalOffsetEdge0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge1(rw) - RX lane EDGE1 comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration6(_x) (0x00000011 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 0x0000e011
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE1_RXCalOffsetEdge1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE1_RXCalOffsetEdge1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetRoam(rw) - RX lane roam comparator offset calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration7(_x) (0x00000012 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 0x0000e012
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalR_RXCalOffsetRoam(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalR_RXCalOffsetRoam_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
    Bits:  3:0  RxCdrCalfoscCenterFreq(rw) - RX CDR VCO center frequency calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibrationCDRFreq(_x) (0x00000013 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq 0x0000e013
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal1_RxCdrCalfoscCenterFreq(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal1_RxCdrCalfoscCenterFreq_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
    Bits:  4:0  TxCalTclkDuty(rw) - TX lane clock duty calibration code.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibrationTxClk(_x) (0x00000014 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk 0x0000e014
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal2_TxCalTclkDuty(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal2_TxCalTclkDuty_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
    Bits:  7:3  TxDrvLevN(rw) - Defines the total number of driver units allocated to sum of the taps. The maximum value is 5'd23.
    Bits:  2:0  TxDrvHLev(rw) - Transmit Amplitude control signal. Used to define the full-scale maximum swing of the driver. 000=Not Supported, 001=1070mVdiff-pkpk (Default), 010=1140mVdiff-pkpk, 011=1200mVdiff-pkpk, 100=1260mVdiff-pkpk, 101=1310mVdiff-pkpk, 110=1350mVdiff-pkpk, 111=1400mVdiff-pkpk6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl1(_x) (0x00000015 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 0x0000e015
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvLevN(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvLevN_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvHLev(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvHLev_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
    Bits:  5:4  TxDrvLevNm2(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 2'h3.
    Bits:  3:0  TxDrvLevNm1(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 4'h9.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl2(_x) (0x00000016 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 0x0000e016
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm2(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm1(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
    Bits:  4:3  TxDrvSlew(rw) - TX driver Slew Rate control:00 - 31ps ,01 - 33ps,10 - 68ps,11 - 170ps
    Bits:  2:0  TxDrvLevNP1(rw) - Defines the total number of driver units allocated to the first pre-cursor (C-1) tap. The maximum value for C-1 is 3'h6.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl3(_x) (0x00000017 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 0x0000e017
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvSlew(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvSlew_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvLevNP1(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvLevNP1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
    Bits:  5:3  RxCalEqDfepstapf3DB(rw) - DFE post-shaping tap 3dB frequency -3'b000: 684MHz -3'b001: 576MHz -3'b010: 514MHz -3'b011: 435MHz -3'b100: 354MHz -3'b101: 281MHz -3'b110: 199MHz -3'b111: 125MHz
    Bits:  2:0  RxCalEqDcGain(rw) - RX agc high frequency dc gain: -3'b000: -3dB -3'b001: -2.5dB -3'b010: -2dB -3'b011: -1.5dB -3'b100: -1dB -3'b101: -0.5dB -3'b110: -0dB -3'b111: 0.5dB
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve(_x) (0x00000018 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 0x00008026
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve 0x0000e018
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDfepstapf3DB(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDfepstapf3DB_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDcGain(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDcGain_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:3  RxCalEqDfeTap1Gain(rw) - DFE first tap gain control -4'b0000: +1mVpeak -4'b0001: +10mVpeak . . . -4'b0110: +55mVpeak -4'b0111: +64mVpeak -4'b1000: -1mVpeak -4'b1001: -10mVpeak . . -4'b1110: -55mVpeak -4'b1111: -64mVpeak
    Bits:  2:0  RxCalEqDfepStapGain(rw) - DFE post-shaping tap gain 0: no pulse shaping tap 1: -24mVpeak 2: -45mVpeak 3: -64mVpeak 4: -80mVpeak 5: -93mVpeak 6: -101mVpeak 7: -105mVpeak
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve2(_x) (0x00000019 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 0x0000e019
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfeTap1Gain(_x) (((_x) & 0xf) << 3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfeTap1Gain_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfepStapGain(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfepStapGain_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  7:4  RxCalEqDfeTap3Gain(rw) - DFE third tap gain control -4'b0000: +0mVpeak -4'b0001: +7mVpeak . . . -4'b0110: +38mVpeak -4'b0111: +44mVpeak -4'b1000: -0mVpeak -4'b1001: -7mVpeak . . -4'b1110: -38mVpeak -4'b1111: -44mVpeak
    Bits:  3:0  RxCalEqDfetap2Gain(rw) - DFE second tap gain control -4'b0000: +0mVpeak -4'b0001: +9mVpeak . . . -4'b0110: +46mVpeak -4'b0111: +53mVpeak -4'b1000: -0mVpeak -4'b1001: -9mVpeak . . -4'b1110: -46mVpeak -4'b1111: -53mVpeak
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve3(_x) (0x0000001a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup 0x0000802d
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 0x0000e01a
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfeTap3Gain(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfeTap3Gain_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfetap2Gain(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfetap2Gain_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:4  RxCalEqLoFreqAgcGain(rw) - Low frequency agc gain (att) select -3'b000: Disconnected -3'b001: -18.5dB -3'b010: -12.5dB -3'b011: -9dB -3'b100: -6.5dB -3'b101: -4.5dB -3'b110: -2.9dB -3'b111: -1.6dB
    Bits:  3:0  RxCalEqDfetap4Gain(rw) - DFE fourth tap gain control -4'b0000: +0mVpeak -4'b0001: +6mVpeak . . . -4'b0110: +29mVpeak -4'b0111: +33mVpeak -4'b1000: -0mVpeak -4'b1001: -6mVpeak . . -4'b1110: -29mVpeak -4'b1111: -33mVpeak
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve4(_x) (0x0000001b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup 0x0000802e
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 0x0000e01b
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqLoFreqAgcGain(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqLoFreqAgcGain_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqDfetap4Gain(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqDfetap4Gain_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
    Bits:  7:3  RxCalEqHiFreqAgcCap(rw) - High frequency agc boost control Min d0: Boost ~4dB Max d31: Boost ~20dB
    Bits:  2:0  PcsRxEqPreCalCodeSel(rw) - Provides a RX Equalizer Pre-Hint, prior to beginning adaptive equalization Please refer to Datasheet for a description of what backplane ranges the RX-Hint values are intended to support.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneAdaptiveEqualizer(_x) (0x0000001c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer 0x0000e01c
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_RxCalEqHiFreqAgcCap(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_RxCalEqHiFreqAgcCap_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_PcsRxEqPreCalCodeSel(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_PcsRxEqPreCalCodeSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  7:0  RxeqBestEyeVal(rw) - RX lane best eye point measurement result.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx(_x) (0x0000001d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx 0x0000e01d
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq2_RxeqBestEyeVal(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq2_RxeqBestEyeVal_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  5:0  RxeqBestEyeVal2(rw) - RX lane best eye point measurement result.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2(_x) (0x0000001e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 0x0000e01e
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq3_RxeqBestEyeVal2(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq3_RxeqBestEyeVal2_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
    Bits:  2    RxCalRoamEyeMeasInCycleEn(rw) - RX lane single roam eye point measurement start signal. If asserted, single measurement at fix XADJUST and YADJUST is started.
    Bits:  1    RxCalEyeDiagFsminStart(rw) - Enables an eye diagram measurement within the PHY. 0 - Disables eye diagram measurement 1 - Enables eye diagram measurement
    Bits:  0    PcsRxeqStart(rw) - Adaptive RX Equalization enable 0 - Disables adaptive RX equalization 1 - Enables adaptive RX equalization
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneEyeDiagram(_x) (0x0000001f + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram 0x0000e01f
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_RxCalRoamEyeMeasInCycleEn BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_RxCalEyeDiagFsminStart BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_PcsRxeqStart BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
    Bits:  3    RxeqDone(rw) - PHY Adaptive Equalization stauts Signal 0-Indicatest adaptive equalization results are not valid for sampling 1-Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  2    RxCalRoamEyeMeasDone(rw) - PMA Adaptive Equalization Status Signal 0 - Indicates adaptive equalization results are not valid for sampling. 1 - Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  1    RxCalEyeDiagFsmErr(rw) - Eye diagram error signal. Indicates if the measurement was invalid because the eye diagram was interrupted by the link entering electrical idle. 0 - Indicates eye diagram is valid. 1- Indicates an error occurred, and the eye diagram measurement should be re-run.
    Bits:  0    RxCalEyeDiagFsmDone(rw) - PHY Eye diagram measurement status signal: 0 - Indicates eye diagram results are not valid for sampling, 1 - Indicates eye diagram is complete and results are valid for sampling.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagCtl(_x) (0x00000020 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl 0x0000e020
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxeqDone BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalRoamEyeMeasDone BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalEyeDiagFsmErr BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalEyeDiagFsmDone BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjust(rw) - 7-bit eye diagram time adjust control - 6-bits per UI - spans 2 UI
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDRxCalRoamXAdjustInit(_x) (0x00000021 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit 0x0000e021
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamXAdjust_RxCalRoamXAdjust(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamXAdjust_RxCalRoamXAdjust_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
    Bits:  5:0  RxCalRoamYAdjustInit(rw) - 6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDRxCalRoamYAdjustInit(_x) (0x00000022 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit 0x00008022
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit 0x0000e022
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamYAdjustInit_RxCalRoamYAdjustInit(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamYAdjustInit_RxCalRoamYAdjustInit_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
    Bits:  7:0  RxCalEyeDiagFsmEyeSumLo(rw) - Eye diagram status low bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagSumLo(_x) (0x00000023 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo 0x0000e023
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumLo_RxCalEyeDiagFsmEyeSumLo(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumLo_RxCalEyeDiagFsmEyeSumLo_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
    Bits:  5:0  RxCalEyeDiagFsmEyeSumHi(rw) - Eye diagram status hi bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagSumHi(_x) (0x00000024 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi 0x0000e024
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumHi_RxCalEyeDiagFsmEyeSumHi(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumHi_RxCalEyeDiagFsmEyeSumHi_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
    Bits:  7:0  RxCalRoamEyeMeasAcc(rw) - RX lane single roam eye point measurement result. If 0, eye is open at current XADJUST and YADJUST settings
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagRx(_x) (0x00000025 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagRx2(_x) (0x00000026 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx 0x0000e025
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 0x0000e026
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAEyeDiag2_RxCalRoamEyeMeasAcc(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAEyeDiag2_RxCalRoamEyeMeasAcc_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
    Bits:  3    RxScopeEn(rw) - Enable PHY to go into 'Scope' mode. Allows for outputting entire eye diagram data. Active High.
    Bits:  2    RxRoamXorBitSel(rw) - Eye diagram type select bit. 0=Select oscilloscope mode, 1=Select Bit Error Contour mode.
    Bits:  0    RxCdrFbDivSlipCycle(rw) - Rising edge detection enable to activate a feedback divider slip (ie, M+1) for one feedback cycle.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARoamScope(_x) (0x00000027 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope 0x0000e027
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxScopeEn BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxRoamXorBitSel BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxCdrFbDivSlipCycle BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
    Bits:  6    RxSigDetOvrEnCdrLock2Data(rw) - Enable for RXSIGDET_OVRCDRLOCK2DATA: 0 = CDR uses its internal locked to data signal, 1 = CDR uses RXSIGDET_OVRCDRLOCK2DATA.
    Bits:  5    RxSigDetOvrCdrLock2Data(rw) - Controls when the CDR should switch to lock to data, or lock to reference: 0 = CDR is locked to reference, 1 = CDR is locked to data.
    Bits:  4    PcsTxDetectRxEn(rw) - TX lane TX detect RX enable. Active High.
    Bits:  3    PcsTxBeaConEn(rw) - TX lane beacon enable. Active High.
    Bits:  2    PcsRxDmeEn(rw) - Receiver DME mode enable. Active High
    Bits:  1    CmnClkGenMuxselDpmatxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1]
    Bits:  0    CmnClkGenMuxselDpmarxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1].
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMAlaneControl(_x) (0x00000028 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl 0x0000e028
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_RxSigDetOvrEnCdrLock2Data BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_RxSigDetOvrCdrLock2Data BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsTxDetectRxEn BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsTxBeaConEn BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsRxDmeEn BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_CmnClkGenMuxselDpmatxRef BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_CmnClkGenMuxselDpmarxRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
    Bits:  0    PcsTxTxclkDiv2En(rw) - Enables divide by two on main Transmit clock in the PCS. Used in 32-bit mode.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxClkDiv(_x) (0x00000029 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv 0x0000e029
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxclkDiv_PcsTxTxclkDiv2En BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
    Bits:  1    CmnClkGenMuxSelDpmaTxRef(rw) - Selects reference clock to be used in TX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaRxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDCmnClkGenMuxSel(_x) (0x0000002a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel 0x0000e02a
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACmnClkGenMuxSel_CmnClkGenMuxSelDpmaTxRef BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACmnClkGenMuxSel_CmnClkGenMuxSelDpmaRxRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
    Bits:  4:2  RxSigdetRxtramdetDebounceCount(rw) - Controls signal detection max run-length 000 - 1* Rate/Reference Clock frequency 001 - 2* Rate/Reference Clock frequency 010 - 4* Rate/Reference Clock frequency 011 - 6* Rate/ Reference Clock frequency 100 - 8* Rate/ Reference Clock frequency 101 - 12* Rate/ Reference Clock frequency 110 - 16* Rate/ Reference Clock frequency 111 and above - 32* Rate/ Reference Clock frequency
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxTranDet(_x) (0x00000030 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet 0x0000e030
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTranDet_RxSigdetRxtramdetDebounceCount(_x) (((_x) & 0x7) << 2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTranDet_RxSigdetRxtramdetDebounceCount_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    PCSRxEqLocWrEn(rw) - PCSRXEQ* override enable. Active Low.
    Bits:  6    PcsRXBistLocWrEn(rw) - PCSRXBIST* override enable. Active Low.
    Bits:  5    PcsRxLocWrEn(rw) - PCSRX* override enable. Active Low.
    Bits:  4    PcsOutTxLocWrEn(rw) - PCSOUTTX* override enable. Active Low.
    Bits:  3    PcsoutRxLocWrEn(rw) - PCSOUTRX* override enable. Active Low.
    Bits:  2    LbLocWrEn(rw) - LB* override enable. Active Low.
    Bits:  1    LanePcsStateLocWREn(rw) - LANEPCSPSTATE* override enable. Active Low.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneoverrideEn(_x) (0x00000055 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn 0x0000e055
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PCSRxEqLocWrEn BIT(7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsRXBistLocWrEn BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsRxLocWrEn BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsOutTxLocWrEn BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsoutRxLocWrEn BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_LbLocWrEn BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_LanePcsStateLocWREn BIT(1)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    RxCalRoamEyeAsInLocWrEn(rw) - RXCALROAMEYEMEASIN* override enable. Active Low.
    Bits:  6    RxCalOffSetLocWrEn(rw) - RXCALOFFSET* override enable. Active Low.
    Bits:  5    RxCalEyeDiaframSminLocWrEn(rw) - RXCALEYEDIAGFSMIN* override enable. Active Low.
    Bits:  4    RXcaleqLocRen(rw) - RXCALEQ* override enable. Active Low.
    Bits:  3    RxcalDutyLocwRen(rw) - RXCALDUTY* override enable. Active Low.
    Bits:  2    RstLanePcsSoftLowRen(rw) - RSTLANEPCSSOFT* override enable. Active Low.
    Bits:  1    PcsTxBistLocWrEn(rw) - PCSTXBIST* override enable. Active Low.
    Bits:  0    PcsTxLocWrEn(rw) - PCSTX* override enable. Active Low.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxLaneoverrideEn(_x) (0x00000056 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn 0x0000e056
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalRoamEyeAsInLocWrEn BIT(7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalOffSetLocWrEn BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalEyeDiaframSminLocWrEn BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RXcaleqLocRen BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxcalDutyLocwRen BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RstLanePcsSoftLowRen BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_PcsTxBistLocWrEn BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_PcsTxLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
    Bits:  6    TxDrvLocWrEn(rw) - TXDRV* override enable. Active Low.
    Bits:  5    TxCalTclkDutyLocWrEn(rw) - TXCALTCLKDUTY* override enable. Active Low.
    Bits:  2    RxCdrCalFoscLocWrEn(rw) - RXCDRCALFOSC* override enable. Active Low.
    Bits:  1    RxCalRoamyAdjustLocWrEn(rw) - RXCALROAMYADJUST* override enable. Active Low
    Bits:  0    RxCalRoamXadjustLocWrEn(rw) - RXCALROAMXADJUST* override enable. Active Low
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxLaneCal(_x) (0x00000057 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal 0x0000e057
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_TxDrvLocWrEn BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_TxCalTclkDutyLocWrEn BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCdrCalFoscLocWrEn BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCalRoamyAdjustLocWrEn BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCalRoamXadjustLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscHscountMuxd0(rw) - CDR VCO calibration register.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRVCOCal(_x) (0x00000065 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1(_x) (0x00000066 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal 0x0000e065
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 0x0000e066
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACDRCal_RxCDRCalFoscHscountMuxd0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACDRCal_RxCDRCalFoscHscountMuxd0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD0(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMuxD0(_x) (0x00000067 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 0x0000e067
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD0_RxCDRCalFoscmeasCountMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD0_RxCDRCalFoscmeasCountMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD1(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMuxD1(_x) (0x00000068 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 0x0000e068
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD1_RxCDRCalFoscmeasCountMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD1_RxCDRCalFoscmeasCountMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD0(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 0. Used in 'Scope' mode.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0(_x) (0x00000069 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 0x0000e069
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD0_RxCDRFbDivSlipMdivMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD0_RxCDRFbDivSlipMdivMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD1(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1(_x) (0x0000006a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 0x0000e06a
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD1_RxCDRFbDivSlipMdivMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD1_RxCDRFbDivSlipMdivMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD0(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0(_x) (0x0000006b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 0x0000e06b
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMux_RxCdrRefckRefDivmuxD0(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMux_RxCdrRefckRefDivmuxD0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD1(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1(_x) (0x0000006c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 0x0000e06c
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMuxD1_RxCdrRefckRefDivmuxD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMuxD1_RxCdrRefckRefDivmuxD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  7:4  RxCDRCalFoscCenterFreqPhintMuxD1(rw) -
    Bits:  3:0  RxCDRCalFoscCenterFreqPhintMuxD0(rw) -
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1(_x) (0x0000006d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 0x0000e06d
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD1(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
    Bits:  3    TxCalClkDutyPreDivEnMuxD1(rw) -
    Bits:  2    TxCalClkDutyPreDivEnMuxD0(rw) -
    Bits:  1    RxCalDutyPreDivEnmuxd1(rw) -
    Bits:  0    RxCalDutyPreDivEnmuxd0(rw) -
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn(_x) (0x0000006e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn 0x0000e06e
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_TxCalClkDutyPreDivEnMuxD1 BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_TxCalClkDutyPreDivEnMuxD0 BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_RxCalDutyPreDivEnmuxd1 BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_RxCalDutyPreDivEnmuxd0 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
    Bits:  5    VpcsifEiosDetEn(rw) - EIOS detector enable.0 - Disabled.1 - Enabled. PCS continually monitors for EIOS ordered sets, and if detected, will de-assert ICTL_PIPE_RXVALID shortly after.No EIOS detected:CDR should remains in current state EOIS detected:CDR should lock to reference
    Bits:  4    VpcseqDebugstepEn(rw) - RX Equalization calibration debug control.
    Bits:  3    VpcSeqDebugEn(rw) - RX Equalization calibration debug enable.0 - Normal operation 1 - Debug mode. FSM will not change states until a positive edge of VPCSEQ_DEBUGSTEPEN is detected
    Bits:  2    VpcBistChkHold(rw) - PCS BIST check output error hold enable.0 - Do not hold error counter.1 - Hold error counter
    Bits:  1    vpcbistChkEn(rw) - PCS BIST check enable.0 - Normal operation 1 - Enable BIST check
    Bits:  0    VpcBistChkClr(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg(_x) (0x00001007 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg 0x0000f007
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcsifEiosDetEn BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcseqDebugstepEn BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcSeqDebugEn BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcBistChkHold BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_vpcbistChkEn BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcBistChkClr BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
    Bits:  7:6  VpcsencTxForceErr(rw) - 8b10b encoder error insertion control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Error transmitted
    Bits:  5:4  VpcsencForcePosDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Disparity forced to positive
    Bits:  3:2  VpcsencForceNegDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte. 0 - Normal operation 1 - Disparity forced to negative.
    Bits:  1:0  VpcsBistDatamode(rw) - PCS BIST data mode selection. 0 - UDP 1 - prbs7 2 - prbs23 3 - prbs31
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg2(_x) (0x00001008 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 0x0000f008
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencTxForceErr(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencTxForceErr_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForcePosDisp(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForcePosDisp_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForceNegDisp(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForceNegDisp_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsBistDatamode(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsBistDatamode_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
    Bits:  6    VPcsBistGenInsertErr(rw) - PCS BIST generator insert error control. The LSB of the transmitted pattern is inverted on each positive edge of this signal
    Bits:  5:2  VPcsBistGenInitDelay(rw) - PCS BIST generator data pattern initial delay. Controls length of time for training pattern. If set to 0, training pattern is controlled by VPCSBIST_GEN_INIT_CTRL. Length of time is 2^ VPCSBIST_GEN_INIT_CTRL clock cycles, maximum 2^12
    Bits:  1    VPcsBistGenInitCtrl(rw) - PCS BIST generator initial pattern manual control. 0 - send training sequence 1 - send prbs / UDP Used only if VPCSBIST_GEN_INIT_DELAY = 0
    Bits:  0    VPcsBistGenEn(rw) - PCS BIST generator enable. 0 - Normal operation 1 - Enable BIST data send
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg3(_x) (0x00001009 + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 0x0000f009
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInsertErr BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitDelay(_x) (((_x) & 0xf) << 2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitDelay_of(_x) (((_x) >> 2) & 0xf)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitCtrl BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxPolarity(rw) - Override for ICTL_PIPE_RXPOLARITY_ pins
    Bits:  6    VpcsifOvrRxeqEval(rw) - Override for ICTL_PIPE_RXEQEVAL_ pins
    Bits:  5:4  VpcsifOvrrate(rw) - Override for ICTL_PIPE_RATE_ pins
    Bits:  3:2  VpcsifOvrPowerDown(rw) - Override for ICTL_PIPE_POWERDOWN_ pins
    Bits:  1:0  VpcsifOvrDataBusWidth(rw) - Override for ICTL_PIPE_DATABUSWIDTH_ pins
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg(_x) (0x0000100a + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg 0x0000f00a
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrRxPolarity BIT(7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrRxeqEval BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrrate(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrrate_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrPowerDown(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrPowerDown_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrDataBusWidth(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrDataBusWidth_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
    Bits:  7:6  VpcsifOvrTxEleCidle(rw) - Override for ICTL_PIPE_TXELECIDLE_ pins
    Bits:  5    VpcsifOvrTxDtCtRxLb(rw) - Override for ICTL_PIPE_TXDTCTRX_LB_ pins
    Bits:  4    VpcsifOvrTxCompliance(rw) - Override for ICTL_PIPE_TXCOMPLIANCE_ pins
    Bits:  3    VpcsifOvrRxStandBy(rw) - Override for ICTL_PIPE_RXSTANDBY_ pins
    Bits:  2:0  VpcsifOvrRxPresentHint(rw) - Override for ICTL_PIPE_RXPRESETHINT_ pins
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg1(_x) (0x0000100b + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 0x0000f00b
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxEleCidle(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxEleCidle_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxDtCtRxLb BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxCompliance BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxStandBy BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxPresentHint(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxPresentHint_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
    Bits:  4    VPcsLbNe(rw) - PIPE Near End loopback enable.0 - Normal operation 1 - TX to RX loopback enabled.
    Bits:  3    VpcsLbFe(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter.
    Bits:  2    VpcsifOvrRxEqClr(rw) - Override for RXEQCLR pins
    Bits:  1    VpcsifOvrRst(rw) - Override for IRST_PIPE_RST_Lx_B_A pins
    Bits:  0    VpcsifOvrBlockAlignControl(rw) - Override for VPCSIF_OVR_BLOCKALIGNCONTROL_ pins
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg2(_x) (0x0000100c + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 0x0000f00c
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VPcsLbNe BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsLbFe BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrRxEqClr BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrRst BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrBlockAlignControl BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxstandByEna(rw) - Enables VPCSIF_OVR_RXSTANDBY to override external pin
    Bits:  6    VpcsifOvrRxPresentHintena(rw) - Enables VPCSIF_OVR_RXPRESETHINT to override external pin
    Bits:  5    VpcsifOvrRxPolarityEna(rw) - Enables VPCSIF_OVR_RXPOLARITY to override external pin
    Bits:  4    VpcsifOvrRxEqEvalEna(rw) - Enables VPCSIF_OVR_RXEQEVAL to override external pin
    Bits:  3    VpcsifOvrRstEna(rw) - Enables VPCSIF_OVR_RST to override external pin
    Bits:  2    VpcsifOvrRateEna(rw) - Enables VPCSIF_OVR_RATE to override external pin
    Bits:  1    VpcsifOvrpowerDowmEna(rw) - Enables VPCSIF_OVR_POWERDOWN to override external pin
    Bits:  0    VpcsifOvrDataBusWidthEna(rw) - Enables VPCSIF_OVR_DATABUSWIDTH to override external pin
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg3(_x) (0x0000100d + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 0x0000f00d
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxstandByEna BIT(7)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxPresentHintena BIT(6)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxPolarityEna BIT(5)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxEqEvalEna BIT(4)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRstEna BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRateEna BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrpowerDowmEna BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrDataBusWidthEna BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
    Bits:  3    VpcsifOvrtxEleCidleEna(rw) - Enables VPCSIF_OVR_TXELECIDLE to override external pin
    Bits:  2    VpcsifovrTxDtcTrxLbEna(rw) - Enables VPCSIF_OVR_TXDTCTRX_LB to override external pin
    Bits:  1    VpcsifOvrTxComplianceEna(rw) - Enables VPCSIF_OVR_TXCOMPLIANCE to override external pin
    Bits:  0    VpcsifOvrBlockAlignControlEna(rw) - Enables VPCSIF_OVR_BLOCKALIGNCONTROL to override external pin
*/
#define NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg4(_x) (0x0000100e + (0x2000 * ((_x) & 0x3)))
#define NFP_PCIES_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 0x0000f00e
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrtxEleCidleEna BIT(3)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifovrTxDtcTrxLbEna BIT(2)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrTxComplianceEna BIT(1)
#define   NFP_PCIES_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrBlockAlignControlEna BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr - Address for aprobe common lane.
    Bits:  6:4  SerDesAprobeSynAddr(rw) - Address for Synth lane aprobe data.
    Bits:  3:0  SerDesAprobeCmnAddr(rw) - Address for common and Synth regulator lane aprobe data.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr 0x00008000
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeSynAddr(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeSynAddr_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeCmnAddr(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeCmnAddr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr - Address for Synth lane aprobe data.
    Bits:  4:0  AprobeSynthAddr(rw) - Address for synth lane aprobe data.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr 0x00008001
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr_AprobeSynthAddr(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr_AprobeSynthAddr_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl - PMA Common/Synth lane control register
    Bits:  2    RstCmnPcsSoftSynth(rw) - Synth soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstByPassSynth(rw) - Common lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    CmnCtlPorHardRstByPassEnSynth(rw) - Common lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl 0x00008002
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_RstCmnPcsSoftSynth BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_CmnCtlPorHardRstByPassSynth BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_CmnCtlPorHardRstByPassEnSynth BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth - Common PCS pstate synth.
    Bits:  4:0  CmnPcsStateSynth(rw) - Synth power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth 0x00008003
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth_CmnPcsStateSynth(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth_CmnPcsStateSynth_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl - Common Test Bus status reg 1.
    Bits:  2    SynthPpmLockStatus(rw) - Synth lane PLL lock status. 1 - Synth VCO is locked to reference clock.
    Bits:  1    PcsOutSynthStatus(rw) - Synth lane state transition status. Indicates when the Synth has completed a requested state transition. 0 - Synth has not completed its state change. 1 - Synth has completed its state change.
    Bits:  0    PcsOutSynthReady(rw) - Synth lane ready status signal. 0 - Synth is not ready for data transmission. 1 - Synth is ready for data transmission.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl 0x00008004
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_SynthPpmLockStatus BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_PcsOutSynthStatus BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_PcsOutSynthReady BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl - Common and Synth refclock control.
    Bits:  4    CmnRefCkBufSynthRefEn(rw) - Synth reference clock enable. Active High.
    Bits:  3    CmnRefCkBufRxRefEn(rw) - RX lane reference clock enable. Active High.
    Bits:  2    CmnClkGenMuxSelPcsRef(rw) - Selects reference clock to be used in PCS. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  1    CmnClkGenMuxSelDpmaSynthRef(rw) - Selects reference clock to be used in Synth lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaCmnRef(rw) - Selects reference clock to be used in Common lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl 0x00008005
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnRefCkBufSynthRefEn BIT(4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnRefCkBufRxRefEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelPcsRef BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelDpmaSynthRef BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelDpmaCmnRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl - Common/synth reference clock control.
    Bits:  7:6  CmnrefCkDrvRefinpMacntl0(rw) - Reference clock output select for OCK_PMACNTLREF_0 DPMA clock. 00 - From bumps, ICK_CMNREF 01 - From SOC reference clock input, ICK_CMNREFSOC 10 - From right-side clock repeater network, ICK_REFBUSRIGHT 11 - From left-side clock repeater network, ICK_REFBUSLEFT
    Bits:  5:3  CmnRefCkdrvRefBusright2leftoutCtl(rw) -
    Bits:  2:0  CmnRefCkdrvRefBusleft2rightoutCtl(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl 0x00008006
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnrefCkDrvRefinpMacntl0(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnrefCkDrvRefinpMacntl0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusright2leftoutCtl(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusright2leftoutCtl_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusleft2rightoutCtl(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusleft2rightoutCtl_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl - PMA Common/Synth Lane Reference Clock Control Register.
    Bits:  7:6  SynthRefCkRefInCtl(rw) - Synth lane reference clock select.
    Bits:  5:4  RxCdrRefCkRefClkSel(rw) - RX lane reference clock select..
    Bits:  3:2  CmnRefCkDrvRefSocEn(rw) - RX lane reference clock select..
    Bits:  1:0  CmnRefCkdrvRefInPmACntl1(rw) - Enable for OCK_REFSOC 0 - OCK_REFSOC disabled and output at logic 0 1 - OCK_REFSOC enabled and outputs a copy of ICK_PMA_REFSOC
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl 0x00008007
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_of(_x) (((_x) >> 6) & 0x3)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REF (0)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFSOC (1)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFBUSRIGHT (2)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFBUSLEFT (3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REF (0)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFSOC (1)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFBUSRIGHT (2)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFBUSLEFT (3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_of(_x) (((_x) >> 2) & 0x3)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REF (0)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFSOC (1)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFBUSRIGHT (2)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFBUSLEFT (3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkdrvRefInPmACntl1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkdrvRefInPmACntl1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 - PMA Common/Synth Lane Control Register
    Bits:  6    RxEqCalEn(rw) - RX Equalization FSM enable. Active High.
    Bits:  5    CmnPcsSynthCkBypassEn(rw) - PCS Synth lane clock bypass enable. Active High.
    Bits:  4:3  CmnPcsRdyStatModeSel(rw) - Controls how Synth, TX and RX lane ready and status signals are controlled.
    Bits:  2    CmnPcsTxEnable(rw) - Transmit datapath FIFO enable. Active High.
    Bits:  1    CmnPcsPcieGen3En(rw) - PCIe Gen3 rate change. 1 - Gen3 rate change is requested.
    Bits:  0    CmnPcieGen3LutSel(rw) - PCIe Gen3 rate change LUT select. Active High.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 0x00008008
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_RxEqCalEn BIT(6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsSynthCkBypassEn BIT(5)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsRdyStatModeSel(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsRdyStatModeSel_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsTxEnable BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsPcieGen3En BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcieGen3LutSel BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  CmnRefCkBufTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnCalTcTerm(rw) - Common lane termination calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration 0x00008009
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnRefCkBufTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnRefCkBufTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnCalTcTerm(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnCalTcTerm_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  TxTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnBgBiasTermCal(rw) - Common lane termination calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 0x0000800a
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_TxTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_TxTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_CmnBgBiasTermCal(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_CmnBgBiasTermCal_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal - PMA Common/Synth Lane Register.
    Bits:  5:3  RxTermCal(rw) - RX lane termination calibration value.
    Bits:  2:0  RxDfeTermCal(rw) - RX lane DFE Termination calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal 0x0000800b
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxDfeTermCal(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxDfeTermCal_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal - PMA Common/Synth Lane Calibration Register.
    Bits:  3:0  SynthCalFoscCenterFreq(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal 0x0000800c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal_SynthCalFoscCenterFreq(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal_SynthCalFoscCenterFreq_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 - PMA Common/Synth Lane Control Register.
    Bits:  5    RxPowerSave(rw) - Power saving mode enable. Active High.Disables RX roam comparator.
    Bits:  3    PcsEn(rw) - Override for ICTL_PCS_EN_NT control pin.0 Multi Mode.1- PCIe Mode.
    Bits:  2    LbSynthPllFbclk2CdrRefclkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock..
    Bits:  1    LbSynthCdrDivclk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
    Bits:  0    CmnCalSynthLoopTimingEn(rw) - Looptiming mode enable. Active High. CDR recovered clock used as the reference clock for Synth VCO..
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 0x0000800d
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_RxPowerSave BIT(5)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_PcsEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_LbSynthPllFbclk2CdrRefclkEn BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_LbSynthCdrDivclk2TxEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_CmnCalSynthLoopTimingEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 - PMA Common/Synth Lane Status Registers.
    Bits:  3    MemTstEn(rw) - Memory test enable. Active High.
    Bits:  2:0  MemTstBitSel(rw) - Memory select signal test. The memory bit select will be passed to aprobe, if proper aprobe address is set.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 0x0000800e
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstBitSel(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstBitSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl - PMA Common/Synth Lane Control Register.
    Bits:  4:3  RxLosDetThresh(rw) - LOS Detect Threshold Level.
    Bits:  2:0  RxElecidleSigDetThresh(rw) - Signal Detect Threshold Level.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl 0x0000800f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxLosDetThresh(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxLosDetThresh_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxElecidleSigDetThresh(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxElecidleSigDetThresh_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 - PMA Common/Synth Lane Status Register.
    Bits:  3    CmnTstBusSampleEn(rw) - TX lane soft reset. Active Low
    Bits:  2    CmnTstBusLmonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  1    CmnTstBusHmonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  0    CmnTstBusAsyncEn(rw) - Testbus read or write enable. Active High
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 0x00008010
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusSampleEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusLmonitor BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusHmonitor BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusAsyncEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 - PMA Common/Synth Lane Status Register.
    Bits:  7:0  CmnTstBus(rw) - PHY Testbus status registers. Section 3.2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 0x00008011
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 0x00008012
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 0x00008013
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 0x00008014
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 0x00008015
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMALaneStatus4_CmnTstBus(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMALaneStatus4_CmnTstBus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel - Testbus Select. Section 3.2.
    Bits:  7:0  CmnTstBusSel(rw) - Testbus select. Section 3.2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel 0x00008016
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel_CmnTstBusSel(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel_CmnTstBusSel_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit - PMA Lane Transmit Control Register.
    Bits:  7:6  CmnTxPipeHlevLup2(rw) - TX IO driver HLEV look-up table entry
    Bits:  5:3  CmnTxPipeHlevlup1(rw) - TX IO driver HLEV look-up table entry.
    Bits:  2:0  CmnTxPipeHlevlup0(rw) - TX IO driver HLEV look-up table entry.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit 0x00008017
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevLup2(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevLup2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup1(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 - PMA Lane Transmit Control Register.
    Bits:  4:0  CmnTxPipelevnLup0(rw) - TX IO driver LEVN look-up table entry 0
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 0x00008018
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2_CmnTxPipelevnLup0(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2_CmnTxPipelevnLup0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 - PMA Lane Transmit Control Register.
    Bits:  3:0  CmnTxPipelevnmLup0(rw) - TX IO driver LEVNM1 look-up table entry 0
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 0x00008019
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3_CmnTxPipelevnmLup0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3_CmnTxPipelevnmLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 - PMA Lane Transmit Control Register.
    Bits:  5:4  CmnTxPipeTxdrvSlewGen3(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen3. If PCIEMODE_SEL=1. This value is used if PCIEMODE_SEL=0.
    Bits:  3:2  CmnTxPipeTxdrvSlewGen2(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen2 If PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
    Bits:  1:0  CmnTxPipeTxdrvSlewGen1(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen1 if PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 0x0000801a
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen3(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen3_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen2(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen2_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr - PMA Common Synth Lane Loop Back and BIST Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 - PMA Common Synth Lane Loop Back and BIST Register
    Bits:  7:0  RxBistCdrLock2DataPostAmble(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr 0x0000801b
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 0x0000801c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMALoopBackBIST4_RxBistCdrLock2DataPostAmble(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMALoopBackBIST4_RxBistCdrLock2DataPostAmble_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR - Delay in CDR switching from "locked to reference" mode to "locked to the data" mode.
    Bits:  7:0  RxLock2DataTmr(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR 0x0000801d
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR_RxLock2DataTmr(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR_RxLock2DataTmr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqCoarseIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter 0x0000801e
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter_RxeqCoarseIterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter_RxeqCoarseIterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqFineIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine 0x0000801f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine_RxeqFineIterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine_RxeqFineIterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 - RX CDR VCO fine frequency cal value.
    Bits:  7:0  SynthCalFoscInt(rw) - Synth lane VCO fine frequency calibration value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 0x00008020
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1_SynthCalFoscInt(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1_SynthCalFoscInt_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjustInit(rw) - RX Roam eye X ADJUST initial value.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit 0x00008021
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit_RxCalRoamXAdjustInit(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit_RxCalRoamXAdjustInit_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 - Common block control 2.
    Bits:  7    TxWPtrInitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  6:4  TxWPtrInit(rw) - TX parallel data path initial read pointer.
    Bits:  3:2  TxDvrReplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver.
    Bits:  1    LbSynthPllFbClk2CdrRefClkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock.
    Bits:  0    LbSynthCdrDivClk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 0x00008023
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInitDiv BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInit(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInit_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxDvrReplicaMode(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxDvrReplicaMode_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_LbSynthPllFbClk2CdrRefClkEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_LbSynthCdrDivClk2TxEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup - PMA Common/Synth Lane Adaptive Equalizer Registers
    Bits:  7:0  RxEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0_NT_ inputs.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup 0x00008024
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup_RxEqLookupCodeEn(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup_RxEqLookupCodeEn_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode - PMA Lane Adaptive Equalizer Register.
    Bits:  2:0  RxEqLooklastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode 0x00008025
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode_RxEqLooklastCode(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode_RxEqLooklastCode_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
    Bits:  6:3  RxEqDfeTap1GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 0x00008027
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfeTap1GainGen2(_x) (((_x) & 0xf) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfeTap1GainGen2_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfePSTapGainGen2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfePSTapGainGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 - PCIe Gen2 Equalization control.
    Bits:  7:4  RxEqDfeTap3GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-3 tap gain.
    Bits:  3:0  RxEqDfeTap2GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 0x00008028
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap3GainGen2(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap3GainGen2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap2GainGen2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap2GainGen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 - PCIe Gen2 Equalization control.
    Bits:  6:4  RxEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  3:0  RxEqDftAp4GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-4 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 0x00008029
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqLoFreqAgcGainGen2(_x) (((_x) & 0x7) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqLoFreqAgcGainGen2_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqDftAp4GainGen2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqDftAp4GainGen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq - PCIe Gen2 Equalization control.
    Bits:  4:0  RxEqHiFreqAgcCapGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq 0x0000802a
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq_RxEqHiFreqAgcCapGen2(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq_RxEqHiFreqAgcCapGen2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain - Equalization calibration lookup table
    Bits:  5:3  RxEqDfepstapf3DBLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency
    Bits:  2:0  RxEqDcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain 0x0000802b
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDfepstapf3DBLup0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDfepstapf3DBLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDcGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDcGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 - Equalization calibration lookup table
    Bits:  6:3  RxEqDfeTap1GainLup(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 0x0000802c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfeTap1GainLup(_x) (((_x) & 0xf) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfeTap1GainLup_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfePSTapGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfePSTapGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 0x00008030
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv 0x00008031
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 0x00008032
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDiv_SynthFDivFDiv(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDiv_SynthFDivFDiv_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 - Synth Lane Control Register
    Bits:  2:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 0x00008033
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2_SynthFDivFDiv(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2_SynthFDivFDiv_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscUpdateCycle(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle 0x00008035
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle_SynthFDivSscUpdateCycle(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle_SynthFDivSscUpdateCycle_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod - Synth Lane Control Register
    Bits:  3    SynthfDivStrFdiv(rw) -
    Bits:  2    SynthfDivSscIntfilterFreezeen(rw) -
    Bits:  1    SynthfDivSscGenEn(rw) -
    Bits:  0    SynthfDivmodulatorEn(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod 0x00008036
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivStrFdiv BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivSscIntfilterFreezeen BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivSscGenEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivmodulatorEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk - Synth PCS Div Clock0
    Bits:  7    SynthPcsPostDivClk0En(rw) - Synth PCS Post Div Clock Enable
    Bits:  6:0  SynthPcsPostDivClk0(rw) - Synth PCS Post Div Clock.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk 0x00008037
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0En BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat310(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 0x00008038
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 0x00008039
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 0x0000803a
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 0x0000803b
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT_TXBistPat310(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT_TXBistPat310_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat6332(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 0x0000803c
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 0x0000803d
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 0x0000803e
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 0x0000803f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT63_TXBistPat6332(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT63_TXBistPat6332_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat7964(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 0x00008040
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 0x00008041
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT79_TXBistPat7964(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT79_TXBistPat7964_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst - OOB Burst Time
    Bits:  7:0  TxBistOoBtBurst(rw) - OOB Burst Time (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst 0x00008042
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst_TxBistOoBtBurst(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst_TxBistOoBtBurst_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComRstInit(rw) - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit 0x00008043
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit_TxBistOoBtComRstInit(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit_TxBistOoBtComRstInit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas - OOB ComSas Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComSas(rw) - OOB ComSas Idle Time - 1 (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas 0x00008044
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas_TxBistOoBtComSas(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas_TxBistOoBtComSas_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake - OOB ComWake Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComWake(rw) - OOB ComWake Idle Time - 1 (Word Clock UI).
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake 0x00008045
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake_TxBistOoBtComWake(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake_TxBistOoBtComWake_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode - PMA PCS common BIST mode Select.
    Bits:  5    TxBISTBitErrorEn(rw) - Single-Bit error detection enable (on posedge).
    Bits:  4:3  CmnPCSBISToobmode(rw) - OOB Mode (for 80-bit memory pattern mode only, ignored otherwise). 0 - Disabled 1 - OOB ComReset/ComInit 2 - OOB ComWake 3 - OOB ComSas.
    Bits:  2:0  CmnPCSBISTModeSel(rw) - Selects the transmit BIST mode: 0 - Uses the 80-bit internal memory pattern (w/ OOB) 1 - Uses a 27 PRBS pattern 2 - Uses a 223 PRBS pattern 3 - Uses a 231 PRBS pattern 4 - Uses a D10.2 clock pattern 5 - Uses a half rate 1100 clock pattern.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode 0x00008050
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_TxBISTBitErrorEn BIT(5)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISToobmode(_x) (((_x) & 0x3) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISToobmode_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISTModeSel(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISTModeSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS - PMA TX BIST PRBS mode.
    Bits:  3:2  TxDrvreplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver. 00 - No replica path enabled 01 - Replica path is 25% scaled version of the main driver 10 - Replica path is 50% scaled version of the main driver 11 - Replica path is 75% scaled version of the main driver
    Bits:  1    TxBistRxBistErrEn(rw) - Enable error generation from RXBIST to TXBIST. Once this is set to 1, TXBIST will generate an error bit, if RXBIST detects bit error.
    Bits:  0    TxBISTPrbsRst(rw) - PRBS Reset. Active low
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS 0x00008051
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxDrvreplicaMode(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxDrvreplicaMode_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxBistRxBistErrEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxBISTPrbsRst BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl - PMA TX/RX termination control register.
    Bits:  5:4  TxTermCoarse(rw) - TX lane calibration impedance setting.
    Bits:  3:2  RxTermModeSelect(rw) - RX termination modes setting.
    Bits:  1:0  RxTermCoarse(rw) - RX lane calibration impedance setting.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl 0x00008052
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_85Ohms (0)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_100Ohms (1)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_120Ohms (2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermModeSelect(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermModeSelect_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_of(_x) (((_x) >> 0) & 0x3)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_85Ohms (0)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_100Ohms (1)
#define     NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_120Ohms (2)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR - PMA TX/RX Write Pointer.
    Bits:  7:6  TxWptrinitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  5:4  TxWptrInit(rw) - TX parallel data path initial read pointer.
    Bits:  0    RxAgcDccCoupleEn(rw) - RX AGC DC Couple Enable.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR 0x00008053
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrinitDiv(_x) (((_x) & 0x3) << 6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrinitDiv_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrInit(_x) (((_x) & 0x3) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrInit_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_RxAgcDccCoupleEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn - PMA PCS Common Overide Enable.
    Bits:  7    CmnPcsSynthLocWrEn(rw) - CMNPCSSYNTH* override enable. Active Low
    Bits:  6    CmnPcsRdyStatModeLocWrEn(rw) - CMNPCSRDYSTATMODE_* override enable. Active Low
    Bits:  5    CmnPcsPStateLocWrEn(rw) - CMNPCSPSTATE* override enable. Active Low.
    Bits:  4    CmnPcsBistLocWrEn(rw) - CMNPCSBIST* override enable. Active Low.
    Bits:  3    CmnPcsLocWrEn(rw) - CMNPCS* override enable. Active Low
    Bits:  2    CmnPcieGen3LocWrEn(rw) - CMNPCIEGEN3* override enable. Active Low.
    Bits:  1    CmncalTcLocWrEn(rw) - CMNCALTC* override enable. Active Low.
    Bits:  0    CmnBgBiasLocWrEn(rw) - CMNBGBIAS* override enable. Active Low.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn 0x0000805f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsSynthLocWrEn BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsRdyStatModeLocWrEn BIT(6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsPStateLocWrEn BIT(5)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsBistLocWrEn BIT(4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsLocWrEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcieGen3LocWrEn BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmncalTcLocWrEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnBgBiasLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 - PMA PCS Common Overide Enable.
    Bits:  7    RxDfeLocWrEn(rw) - RXDFE* override enable. Active Low
    Bits:  6    RxCdrRefCkLocWrEn(rw) - RXCDRREFCK* override enable. Active Low
    Bits:  5    RstCmnPcsSoftLocWrEn(rw) - RSTCMNPCSSOFT* override enable. Active Low.
    Bits:  4    PcsOutSynthLocWrEn(rw) - PCSOUTSYNTH* override enable. Active Low.
    Bits:  3    PcslocWrEn(rw) - PCS_EN * override enable. Active Low
    Bits:  2    CmnTstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low.
    Bits:  1    CmnRefCkDrvLocwRen(rw) - CMNREFCKDRV* override enable. Active Low.
    Bits:  0    CmnRefCkBufLocWrEn(rw) - CMNREFCKBUF* override enable. Active Low.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 0x00008060
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RxDfeLocWrEn BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RxCdrRefCkLocWrEn BIT(6)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RstCmnPcsSoftLocWrEn BIT(5)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_PcsOutSynthLocWrEn BIT(4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_PcslocWrEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnTstBusLocWrEn BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnRefCkDrvLocwRen BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnRefCkBufLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm - PMA TX/RX Terminal Overide Enable.
    Bits:  4    TxTermLocWrEn(rw) - TXTERM* override enable. Active Low.
    Bits:  3    SynthRefClkLocWrEn(rw) - SYNTHREFCK * override enable. Active Low.
    Bits:  2    SynthFDivLocWrEn(rw) - SYNTHFDIV* override enable. Active Low.
    Bits:  1    SynthCalFoscLocWrEn(rw) - SYNTHCALFOSC* override enable. Active Low.
    Bits:  0    RxTermLocWrEn(rw) - RXTERM* override enable. Active Low
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm 0x00008061
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_TxTermLocWrEn BIT(4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthRefClkLocWrEn BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthFDivLocWrEn BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthCalFoscLocWrEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_RxTermLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter - PMA Integral loop filter timer.
    Bits:  7:4  SynthDpifGainDelayCountPow2(rw) - Synth integral loop filter gear-shifting timer
    Bits:  3:0  RxDpifgainDelayCountPow2(rw) - RX integral loop filter gear-shifting timer
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter 0x00008065
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_SynthDpifGainDelayCountPow2(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_SynthDpifGainDelayCountPow2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_RxDpifgainDelayCountPow2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_RxDpifgainDelayCountPow2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 - PMA timer used for termination resistance.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 - PMA timer used for termination resistance.
    Bits:  7:0  CmnCaltcMeasCount(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 0x00008066
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 0x00008067
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMAcmncal_CmnCaltcMeasCount(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMAcmncal_CmnCaltcMeasCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0.
    Bits:  7:0  SynthCalFoscmeasCountMuxD0(rw) - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 0x0000806a
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0_SynthCalFoscmeasCountMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0_SynthCalFoscmeasCountMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 1.
    Bits:  7:0  SynthCalFoscmeasCountMuxD1(rw) - SYNTH VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 0x0000806b
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1_SynthCalFoscmeasCountMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1_SynthCalFoscmeasCountMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 0.
    Bits:  7:0  SynthFDivMdivMuxD0(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 0.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 0x0000806c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0_SynthFDivMdivMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0_SynthFDivMdivMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 1.
    Bits:  7:0  SynthFDivMdivMuxD1(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 0x0000806d
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1_SynthFDivMdivMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1_SynthFDivMdivMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle - PMA lane Calibration Register
    Bits:  7:1  CmnCalTcMeasPow2dlyCount1(rw) - Timer used in the termination resistance calibration configuration
    Bits:  0    CmnCalTcmeashalFCycleEn(rw) - Enables one of the termination resistance calibration configuration register.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle 0x0000806e
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcMeasPow2dlyCount1(_x) (((_x) & 0x7f) << 1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcMeasPow2dlyCount1_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcmeashalFCycleEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY - PMA lane Calibration Register
    Bits:  4:0  CmnCalTcMeasPow2dlyCount2(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY 0x0000806f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY_CmnCalTcMeasPow2dlyCount2(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY_CmnCalTcMeasPow2dlyCount2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr - PMA Rx Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr1(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr 0x00008070
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr_RxPPMWatchDogTmr1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr_RxPPMWatchDogTmr1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 - PMA Rx Watchdog Timer
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 - PMA Synth Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 0x00008071
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 0x00008073
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMAWatchDogTmr2_RxPPMWatchDogTmr(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMAWatchDogTmr2_RxPPMWatchDogTmr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register.
    Bits:  7:0  RxCDRCalFoscHscountMuxd1(rw) - CDR VCO calibration register.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 0x00008072
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1_RxCDRCalFoscHscountMuxd1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1_RxCDRCalFoscHscountMuxd1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 0x00008074
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0_CmnRpuOffsetUiS0q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0_CmnRpuOffsetUiS0q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 0x00008075
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1_CmnRpuOffsetUiS0q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1_CmnRpuOffsetUiS0q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q2(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 0x00008076
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2_CmnRpuOffsetUiS0q2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2_CmnRpuOffsetUiS0q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q3(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 0x00008077
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3_CmnRpuOffsetUiS0q3(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3_CmnRpuOffsetUiS0q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q4(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 0x00008078
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4_CmnRpuOffsetUiS0q4(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4_CmnRpuOffsetUiS0q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q5(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 0x00008079
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b 0x0000807a
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset5_CmnRpuOffsetUiS0q5(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset5_CmnRpuOffsetUiS0q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q6(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 0x0000807b
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6_CmnRpuOffsetUiS0q6(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6_CmnRpuOffsetUiS0q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q7(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 0x0000807c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7_CmnRpuOffsetUiS0q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7_CmnRpuOffsetUiS0q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 0x0000807d
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0_CmnRpuOffsetUiS1q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0_CmnRpuOffsetUiS1q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 0x0000807e
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1_CmnRpuOffsetUiS1q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1_CmnRpuOffsetUiS1q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q2(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 0x0000807f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2_CmnRpuOffsetUiS1q2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2_CmnRpuOffsetUiS1q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 0x00008080
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 0x00008081
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 0x00008093
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset31_CmnRpuOffsetUiS3q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset31_CmnRpuOffsetUiS3q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q4(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 0x00008082
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4_CmnRpuOffsetUiS1q4(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4_CmnRpuOffsetUiS1q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q5(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 0x00008083
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5_CmnRpuOffsetUiS1q5(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5_CmnRpuOffsetUiS1q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q6(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 0x00008084
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 0x00008085
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset61_CmnRpuOffsetUiS1q6(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset61_CmnRpuOffsetUiS1q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 0x00008086
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7_CmnRpuOffsetUiS1q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7_CmnRpuOffsetUiS1q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 0x00008087
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0_CmnRpuOffsetUiS2q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0_CmnRpuOffsetUiS2q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q1(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 0x00008088
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1_CmnRpuOffsetUiS2q1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1_CmnRpuOffsetUiS2q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q2(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 0x00008089
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2_CmnRpuOffsetUiS2q2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2_CmnRpuOffsetUiS2q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q3(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 0x0000808a
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 0x0000808b
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset32_CmnRpuOffsetUiS2q3(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset32_CmnRpuOffsetUiS2q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q4(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 0x0000808c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4_CmnRpuOffsetUiS2q4(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4_CmnRpuOffsetUiS2q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q5(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 0x0000808d
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 0x0000808e
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset52_CmnRpuOffsetUiS2q5(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset52_CmnRpuOffsetUiS2q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q6(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 0x0000808f
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 0x00008090
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset62_CmnRpuOffsetUiS2q6(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset62_CmnRpuOffsetUiS2q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 0x00008091
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7_CmnRpuOffsetUiS1q7(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7_CmnRpuOffsetUiS1q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 0x00008092
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0_CmnRpuOffsetUiS3q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0_CmnRpuOffsetUiS3q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS4q0(rw) - Reset and power management unit timer.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 0x00008094
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 0x00008095
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset40_CmnRpuOffsetUiS4q0(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset40_CmnRpuOffsetUiS4q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount2(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 0x00008096
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2_RxCalRoamEyeMeasCount2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2_RxCalRoamEyeMeasCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount1(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 0x00008097
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1_RxCalRoamEyeMeasCount1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1_RxCalRoamEyeMeasCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAModDiv - PMA lane Control Register.
    Bits:  7:4  SynthfbDivModdiv(rw) -
    Bits:  3:0  RxCdrFbDivModDiv(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv 0x00008098
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_SynthfbDivModdiv(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_SynthfbDivModdiv_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_RxCdrFbDivModDiv(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_RxCdrFbDivModDiv_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode - PMA lane Reference Control Register.
    Bits:  6:1  SynthrefCkRefDivMuxD0(rw) - Synth VCO Reference clock divider.
    Bits:  0    PcieModeSel(rw) - PCI Express Mode or Multi Standard Select.0 - PMA enters multi-standard mode (including PCIe Gen3). Direct pin interface controls for TXEQ. RXEQ performed through memory registers.1 - PMA enters PCIe mode only. Direct pin interface controls for PCIe Gen 3. Look up tables for PCIe Gen1 / Gen2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode 0x00008099
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_SynthrefCkRefDivMuxD0(_x) (((_x) & 0x3f) << 1)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_SynthrefCkRefDivMuxD0_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_PcieModeSel BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 - PMA lane Reference Control Register.
    Bits:  5:0  SynthrefCkRefDivMuxD1(rw) - Synth VCO Reference clock divider.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 0x0000809a
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1_SynthrefCkRefDivMuxD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1_SynthrefCkRefDivMuxD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust - PMA Common/Synth lane Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust - PMA Common/Synth lane Control Register.
    Bits:  3:2  RxDfebiasAdjustMuxd1(rw) -
    Bits:  1:0  RxDfebiasAdjustMuxd0(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust 0x0000809b
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust 0x0000809c
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd1(_x) (((_x) & 0x3) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd0(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd0_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount 0x0000809d
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount_RxPpmPpmDriftCount1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount_RxPpmPpmDriftCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 0x0000809e
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2_RxPpmPpmDriftCount2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2_RxPpmPpmDriftCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax 0x0000809f
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax_RxPpmPpmDriftCount1(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax_RxPpmPpmDriftCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 0x000080a0
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2_RxPpmPpmDriftCount2(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2_RxPpmPpmDriftCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax 0x000080a1
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax_SynthPpmPpmDriftCount(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax_SynthPpmPpmDriftCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 0x000080a2
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2_SynthPpmPpmDriftCount(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2_SynthPpmPpmDriftCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 0x000080a3
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12_SynthPpmPpmDriftMax(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12_SynthPpmPpmDriftMax_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 0x000080a4
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22_SynthPpmPpmDriftMax(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22_SynthPpmPpmDriftMax_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize 0x000080aa
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 0x000080ab
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDivSsc_SynthFDivSscStepSize(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDivSsc_SynthFDivSscStepSize_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 - Synth Lane Control Register
    Bits:  0    SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 0x000080ac
#define   NFP_PCIES_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2_SynthFDivSscStepSize BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg - PCS Lane Status Register.
    Bits:  5    TstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low
    Bits:  3    TstBusLMonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  2    TstBusHMonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  1    TstBusAsyncEn(rw) - Testbus read or write enable. Active high
    Bits:  0    MemTstEn(rw) - Memory test enable. Active High
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg 0x00009000
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusLocWrEn BIT(5)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusLMonitor BIT(3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusHMonitor BIT(2)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusAsyncEn BIT(1)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_MemTstEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b - PCS Lane Status Register .
    Bits:  7:0  TstBus(rw) - PHY Testbus status registers. Section 3.2
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 0x00009001
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS 0x00009002
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 0x00009003
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 0x00009004
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 0x00009005
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b 0x00009006
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2_TstBus(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2_TstBus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 - PCS Common/Synth Lane Loopback and BIST Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
    Bits:  7:0  VpcBistGenSkpDelay(rw) - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 0x00009007
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 0x00009008
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Vpc_VpcBistGenSkpDelay(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Vpc_VpcBistGenSkpDelay_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 - PCS BIST generator UDP pattern. LSB is transmitted first.
    Bits:  7:0  VpcsBistUdp(rw) - PCS BIST generator UDP pattern. LSB is transmitted first..
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 0x00009009
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 0x0000900a
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 0x0000900b
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 0x0000900c
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 0x0000900d
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 0x0000900e
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 0x0000900f
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 0x00009010
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Udp_VpcsBistUdp(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Udp_VpcsBistUdp_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:3  VPcsEBufEmpty(rw) - Elastic buffer empty threshold
    Bits:  2:0  VPcsBistGenSkpCnt(rw) - PCS BIST generator SKP insertion count control. Number of SKP ordered sets to insert per delay cycle.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg 0x00009011
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsEBufEmpty(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsEBufEmpty_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsBistGenSkpCnt(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsBistGenSkpCnt_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:5  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
    Bits:  4:0  VPcsEbufFullM0(rw) - Elastic buffer full threshold, PCIe Gen1 and PCIe Gen2.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 0x00009012
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM1(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM1_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM0(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7    VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:2  VPcsEBufRdThresholdM0(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen1 and PCIe Gen2.
    Bits:  1:0  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 0x00009013
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VpcsBufRdThresholdM1 BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEBufRdThresholdM0(_x) (((_x) & 0x1f) << 2)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEBufRdThresholdM0_of(_x) (((_x) >> 2) & 0x1f)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEbufFullM1(_x) (((_x) & 0x3) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEbufFullM1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  3:0  VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 0x00009014
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3_VpcsBufRdThresholdM1(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3_VpcsBufRdThresholdM1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:0  VPcsEqCoarseiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg 0x00009016
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VpcsEqCoarseRunMask BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VPcsEqCoarseiterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VPcsEqCoarseiterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 0x00009017
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 0x00009023
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq2_VpcsEqCoarseRunMask(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq2_VpcsEqCoarseRunMask_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:1  VPcsEqCoarseStep(rw) - RX Equalization calibration coarse mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
    Bits:  0    VpcsEqClrValsEn(rw) -
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 0x00009018
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VPcsEqCoarseStep(_x) (((_x) & 0x1f) << 1)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VPcsEqCoarseStep_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VpcsEqClrValsEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  2:0  VPcsEqDcGainGen2(rw) - PCIe Gen2 Equalization control - AGC high frequency gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 0x00009019
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqLoFreqAgcGainGen2(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqLoFreqAgcGainGen2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqDcGainGen2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqDcGainGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHoFreqAgcGainGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGaingen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 0x0000901a
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqHoFreqAgcGainGen2(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqHoFreqAgcGainGen2_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqDfePstapGaingen2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqDfePstapGaingen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 0x0000901b
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 0x0000901c
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap2Gaingen2(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap2Gaingen2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap1Gaingen2(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap1Gaingen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqDefpstapf3DbLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency.
    Bits:  2:0  VPcsEqDefpstapf3DbGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE 3dB cut-off frequency.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 0x0000901d
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbLup0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbGen2(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC low frequency gain.
    Bits:  2:0  VpcseqDcgainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 0x0000901e
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VPcsEqLoFreqAgcGainLup0(_x) (((_x) & 0x7) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VPcsEqLoFreqAgcGainLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VpcseqDcgainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VpcseqDcgainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHiFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 0x0000901f
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqHiFreqAgcGainLup0(_x) (((_x) & 0x1f) << 3)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqHiFreqAgcGainLup0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqDfePstapGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqDfePstapGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 0x00009020
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap2GainLup0(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap2GainLup0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap1GainLup0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap1GainLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap4GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-4 tap gain.
    Bits:  3:0  VPcsEqDfetap3GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-3 tap gain.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 0x00009021
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap4GainLup0(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap4GainLup0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap3GainLup0(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap3GainLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqFineRunMask(rw) - Equalization calibration fine mode variable control mask. Each bit controls whether or not an equalization variable will be swept during fine mode.0 - Do not sweep variable 1 - Sweep variable Bit 0 - AGC low frequency gain Bit 1 - AGC high frequency gain Bit 2 - AGC AC Boost Bit 3 - Pulse-shaping DFE 3dB cut-off frequency Bit 4 - Pulse-shaping DFE gain Bit 5 - Discontinuity DFE N-1 tap gain.
    Bits:  6:0  VPcsEqFineiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 0x00009022
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VpcsEqFineRunMask BIT(7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VPcsEqFineiterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VPcsEqFineiterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:5  VPcsEqLookupLastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
    Bits:  4:0  VpcsEqFineStep(rw) - RX Equalization calibration fine mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 0x00009024
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VPcsEqLookupLastCode(_x) (((_x) & 0x7) << 5)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VPcsEqLookupLastCode_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VpcsEqFineStep(_x) (((_x) & 0x1f) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VpcsEqFineStep_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0 inputs.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 0x00009025
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 0x00009026
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 0x00009027
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq14_VpcsEqLookupCodeEn(_x) (((_x) & 0xff) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq14_VpcsEqLookupCodeEn_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:0  VPcsEqTimeOut(rw) - .
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 0x00009028
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18_VPcsEqTimeOut(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18_VPcsEqTimeOut_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  Vpcsg2SymaAlignUnLockCnt(rw) - PCIe Gen2 symbol alignment unlock control. Symbol aligner will not move to unlocked mode until this number of incorrectly aligned ALIGN symbols. Setting this value to 0 will result in the symbol aligner not being able to move out of the locked mode until either electrical idle or reset.
    Bits:  3:0  Vpcsg2SymaAlignLockCnt(rw) - PCIe Gen2 symbol alignment lock control. Symbol aligner will not move to locked mode until this number of correctly aligned ALIGN symbols are seen. Setting this value to 0 will result in the symbol aligner not attempting to align.
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 0x00009029
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignUnLockCnt(_x) (((_x) & 0xf) << 4)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignUnLockCnt_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignLockCnt(_x) (((_x) & 0xf) << 0)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignLockCnt_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:1  VpcsEqLoFreqacGainSwpmin(rw) - .
    Bits:  0    PcsClkCtrl(rw) - .
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 0x0000902a
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_VpcsEqLoFreqacGainSwpmin(_x) (((_x) & 0x7) << 1)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_VpcsEqLoFreqacGainSwpmin_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_PcsClkCtrl BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSFASTPLL - PCS Fast PLL Register.
    Bits:  0    Fastpll(rw) - Fast Pll to lock the VCO
*/
#define NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSFASTPLL 0x0000902b
#define   NFP_PCIES_SerDesCommLane_SerDesPCSCommMap_SDPCSFASTPLL_Fastpll BIT(0)

#endif /* NFP6000_LONGNAMES */


#endif /* NFP6000_PCIE_H */
