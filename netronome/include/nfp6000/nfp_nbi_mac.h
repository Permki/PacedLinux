/*
 * Copyright (C) 2013, Netronome Systems, Inc.  All rights reserved.
 *
 * Disclaimer: this file is provided without any warranty
 * as part of an early-access program, and the content is
 * bound to change before the final release.
 */

#ifndef NFP6000_NBI_MAC_H
#define NFP6000_NBI_MAC_H

/*================================================================*/
#include "nfp_nbi.h"

/*----------------------------------------------------------------*/
/* CPP Address Map (CPP_BASE = IMB translation: island + indexes) */

/* CPP_BASE + NFP_NBI_MAC + NFP_NBI_MAC_* */
#define NFP_NBI_MAC                                          (0x100000)

/*----------------------------------------------------------------*/
/* XPB Address Map (XPB_BASE = NFP_XPB_ISLAND(island))          */

#define NFP_NBI_MACX                                         (NBIX_BASE + 0x300000)

/* XPB_BASE + NFP_NBI_MACX_CSR + NFP_NBI_MACX_CSR_* */
#define NFP_NBI_MACX_CSR                                     (NFP_NBI_MACX + 0x00000)
/* XPB_BASE + NFP_NBI_MACX_IM + (nfp_im.h) */
#define NFP_NBI_MACX_IM                                      (NFP_NBI_MACX + 0x10000)
/* XPB_BASE + NFP_NBI_MACX_ILK[2] + NFP_NBI_MACX_ILK_* */
#define NFP_NBI_MACX_ILK(_x)                                 (NFP_NBI_MACX + 0x20000 + ((_x) & 0x1) * 0x10000)
/* XPB_BASE + NFP_NBI_MACX_ETH[2] + NFP_NBI_MACX_ETH_* */
#define NFP_NBI_MACX_ETH(_x)                                 (NFP_NBI_MACX + 0x40000 + ((_x) & 0x1) * 0x20000)
/* XPB_BASE + NFP_NBI_MACX_MEMCTL[2] + NFP_NBI_MACX_MEMCTL_* */
#define NFP_NBI_MACX_MEMCTL(_x)                              (NFP_NBI_MACX + 0x80000 + ((_x) & 0x1) * 0x10000)
/* XPB_BASE + NFP_NBI_MACX_CDS_ECC[6] + (nfp_ecc.h) */
#define NFP_NBI_MACX_CDS_ECC(_x)                             (NFP_NBI_MACX + 0xa0000 + ((_x) & 0x7) * 0x10000)

/*================================================================*/


/* HGID: 60515d2e075a */

#ifndef NFP6000_LONGNAMES

/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsLo - Bits 31:0 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameTooLongErrors - Frame received exceeded the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxInRangeLengthErrors - A count of frames with a length/type field value between 46 (VLAN: 42) and less than 0x0600, that does not match the number of payload data octets received. Should count also if length/type field is less than 46 (VLAN: 42) and the frame is longer than 64 bytes.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxVlanReceivedOK - VLAN frame received without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) was received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsDropEvents - Counts the number of dropped packets due to internal errors of the MAC Client. Occurs when a Receive FIFO overflow condition persists.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxAlignmentErrors - Frame received with an alignment error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPauseMacCtlFramesReceived - Valid pause frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameCheckSequenceErrors - CRC-32 Error is detected but the frame is otherwise of correct length.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsUndersizePkts - Total number of packets that were less than 64 octets long with a good CRC. Note: Undersize packets are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsJabbers - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a bad Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsFragments - Total number of packets that were less than 64 octets long with a wrong CRC. Note: Fragments are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived2 - CBFC (Class Based Flow Control) pause frames received for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived3 - CBFC (Class Based Flow Control) pause frames received for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsOversizePkts - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a good Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived0 - CBFC (Class Based Flow Control) pause frames received for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived1 - CBFC (Class Based Flow Control) pause frames received for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived4 - CBFC (Class Based Flow Control) pause frames received for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived5 - CBFC (Class Based Flow Control) pause frames received for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived6 - CBFC (Class Based Flow Control) pause frames received for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived7 - CBFC (Class Based Flow Control) pause frames received for class 7.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxMacCtlFramesReceived - Valid control frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPauseMacCtlFramesTransmitted - Valid pause frame transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1518toMAXoctets - Frames (good and bad) with 1519 to MAX octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted0 - CBFC (Class Based Flow Control) pause frames transmitted for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted1 - CBFC (Class Based Flow Control) pause frames transmitted for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted4 - CBFC (Class Based Flow Control) pause frames transmitted for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted5 - CBFC (Class Based Flow Control) pause frames transmitted for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted2 - CBFC (Class Based Flow Control) pause frames transmitted for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted3 - CBFC (Class Based Flow Control) pause frames transmitted for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted6 - CBFC (Class Based Flow Control) pause frames transmitted for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted7 - CBFC (Class Based Flow Control) pause frames transmitted for class 7.
  Register: MacChannelStats[128]_RxCIfInOctetsLo - Bits 31:0 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsLo - Total number of octets for valid frames received. Good octets.
  Register: MacChannelStats[128]_RxCIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) that is signaled on the Rx FIFO interface.
  Register: MacChannelStats[128]_RxCIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacChannelStats[128]_RxCIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacChannelStats[128]_RxCIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacChannelStats[128]_RxCStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacChannelStats[128]_RxCStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacChannelStats[128]_RxCStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacChannelStats[128]_RxCStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacChannelStats[128]_RxCStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacChannelStats[128]_RxCStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacChannelStats[128]_RxChanFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacChannelStats[128]_RxChanVlanReceivedOK - VLAN frame received without error.
  Register: MacChannelStats[128]_TxCIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacChannelStats[128]_TxCIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacChannelStats[128]_TxCIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacChannelStats[128]_TxChanFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacChannelStats[128]_TxChanVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacChannelStats[128]_TxCIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacChannelStats[128]_TxCIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
    Bits: 31:0  StatCounter32(rc) - Clear on read 32 bit counter.
*/
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_OCTS_LO(_x, _y) (0x00000000 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_TOO_LONG_ERRS(_x, _y) (0x00000008 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_IN_RANGE_LEN_ERRS(_x, _y) (0x0000000c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_VLAN_FRAMES_OK(_x, _y) (0x00000010 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_ERRS(_x, _y) (0x00000014 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_BROADCAST_FRAMES(_x, _y) (0x00000018 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_DROP_ERRS(_x, _y) (0x0000001c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_ALIGN_ERRS(_x, _y) (0x00000020 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PAUSE_FRAMES(_x, _y) (0x00000024 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_OK(_x, _y) (0x00000028 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_CRC_ERRS(_x, _y) (0x0000002c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_UNICAST_FRAMES(_x, _y) (0x00000030 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_MULTICAST_FRAMES(_x, _y) (0x00000034 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES(_x, _y) (0x00000038 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_UNDERSIZE_FRAMES(_x, _y) (0x0000003c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_64_OCTS(_x, _y) (0x00000040 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_65_127_OCTS(_x, _y) (0x00000044 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_512_1023_OCTS(_x, _y) (0x00000048 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_1024_1518_OCTS(_x, _y) (0x0000004c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_JABBER_FRAMES(_x, _y) (0x00000050 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_FRAGMENTS(_x, _y) (0x00000054 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_2(_x, _y) (0x00000058 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_3(_x, _y) (0x0000005c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_128_255_OCTS(_x, _y) (0x00000060 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_256_511_OCTS(_x, _y) (0x00000064 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_1519_MAX_OCTS(_x, _y) (0x00000068 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_OVERSIZE_FRAMES(_x, _y) (0x0000006c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_0(_x, _y) (0x00000070 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_1(_x, _y) (0x00000074 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_4(_x, _y) (0x00000078 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_5(_x, _y) (0x0000007c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_6(_x, _y) (0x00000080 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_7(_x, _y) (0x00000084 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CTL_FRAMES(_x, _y) (0x00000088 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_OCTS_LO(_x, _y) (0x000000a0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_VLAN_FRAMES_OK(_x, _y) (0x000000a8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAME_ERRS(_x, _y) (0x000000ac + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_BROADCAST_FRAMES(_x, _y) (0x000000b0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_64_OCTS(_x, _y) (0x000000b4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_256_511_OCTS(_x, _y) (0x000000b8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_512_1023_OCTS(_x, _y) (0x000000bc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PAUSE_FRAMES(_x, _y) (0x000000c0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_OK(_x, _y) (0x000000c4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_UNICAST_FRAMES(_x, _y) (0x000000c8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_MULTICAST_FRAMES(_x, _y) (0x000000cc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_65_127_OCTS(_x, _y) (0x000000d0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_128_255_OCTS(_x, _y) (0x000000d4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_1024_1518_OCTS(_x, _y) (0x000000d8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMES_1519_MAX_OCTS(_x, _y) (0x000000dc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_0(_x, _y) (0x000000e0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_1(_x, _y) (0x000000e4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_4(_x, _y) (0x000000e8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_5(_x, _y) (0x000000ec + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_2(_x, _y) (0x000000f0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_3(_x, _y) (0x000000f4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_6(_x, _y) (0x000000f8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_7(_x, _y) (0x000000fc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacChannelStats_RX_OCTS_LO(_x)           (0x00010000 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_OCTS_OK_LO(_x)        (0x00010008 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAME_ERRS(_x)        (0x00010010 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_UNICAST_FRAMES(_x)    (0x00010014 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_MULTICAST_FRAMES(_x)  (0x00010018 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_BROADCAST_FRAMES(_x)  (0x0001001c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES(_x)            (0x00010020 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_64_OCTS(_x)    (0x00010024 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_65_127_OCTS(_x) (0x00010028 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_128_255_OCTS(_x) (0x0001002c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_256_511_OCTS(_x) (0x00010030 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_512_1023_OCTS(_x) (0x00010034 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_1024_1518_OCTS(_x) (0x00010038 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_FRAMES_1519_MAX_OCTS(_x) (0x0001003c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_CHAN_FRAMES_RECEIVED_OK(_x) (0x00010040 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_VLAN_FRAMES_OK(_x)    (0x00010044 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_OCTS_LO(_x)           (0x00010060 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_FRAME_ERRS(_x)        (0x00010068 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_UNICAST_FRAMES(_x)    (0x0001006c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_FRAMES_OK(_x)         (0x00010070 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_VLAN_FRAMES_OK(_x)    (0x00010074 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_MULTICAST_FRAMES(_x)  (0x00010078 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_BROADCAST_FRAMES(_x)  (0x0001007c + (0x100 * ((_x) & 0x7f)))
#define   NFP_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER32_STAT_COUNTER_32(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER32_STAT_COUNTER_32_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsHi - Bits 39:32 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted. Valid pause frame transmitted.for 24bit (TxCounter24)
  Register: MacChannelStats[128]_RxCIfInOctetsHi - Bits 39:32 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsHi - Total number of octets for valid frames received. Good octets.
  Register: MacChannelStats[128]_TxCIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
    Bits:  7:0  StatCounter8(rc) - Clear on read 8 bit counter.
*/
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_OCTS_HI(_x, _y) (0x00000004 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_OCTS_HI(_x, _y) (0x000000a4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacChannelStats_RX_OCTS_HI(_x)           (0x00010004 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RX_OCTS_OK_HI(_x)        (0x0001000c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TX_OCTS_HI(_x)           (0x00010064 + (0x100 * ((_x) & 0x7f)))
#define   NFP_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER8_VAL(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER8_VAL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacBlkReset - Main Block Resets
    Bits: 31:24 Rfu2(rw) - Reserved for Use.
    Bits: 23    MacHy1StatRst(rw) - The Reset for Hydra1 Stats logic.
    Bits: 22    MacHy0StatRst(rw) - The Reset for Hydra0 stats logic.
    Bits: 21    MacTxRstMpb(rw) - The Reset for tx gasket MPB logic.
    Bits: 20    MacRxRstMpb(rw) - The Reset for rx gasket MPB logic.
    Bits: 19    MacTxRstCore(rw) - The Reset for tx gasket core logic.
    Bits: 18    MacRxRstCore(rw) - The Reset for rx gasket core logic.
    Bits: 17    MacFcX2RstLk1(rw) - The fc_x2_rst must be held active for at least 20 cycles for fc logic to be reset.
    Bits: 16    MacFcX2RstLk0(rw) - The fc_x2_rst must be held active for at least 20 cycles for fc logic to be reset.
    Bits: 15    MacRxRstLk1(rw) - The rx_rst must be held active for at least 20 cycles for the RX logic to be reset. SerDes RX clocks must be operating.
    Bits: 14    MacRxRstLk0(rw) - The rx_rst must be held active for at least 20 cycles for RX logic to be reset. SerDes RX clocks must be operating.
    Bits: 13    MacTxRstLk1(rw) - The tx_rst must be held active for at least 20 cycles the TX logic to be reset. SerDes TX clocks must be operating.
    Bits: 12    MacTxRstLk0(rw) - The tx_rst must be held active for at least 20 cycles the TX logic to be reset. SerDes TX clocks must be operating.
    Bits: 11    MacRstLk1(rw) - RST must be held active for at least 20 cycles for the Memory Mapped Registers logic to be reset. Then 20 cycles is needed for the reset propagation delay before any Memory Mapped Registers can be written, once the writes are complete another 50 cycles is needed so that the Interlaken core can be configured based from the values written. The core can start sending data once the mmr writes plus 50 clock cycles are complete.
    Bits: 10    MacRstLk0(rw) - RST must be held active for at least 20 cycles for the Memory Mapped Registers, TX logic, and RX logic to be reset. Then 20 cycles is needed for the reset propagation delay before any Memory Mapped Registers can be written, once the writes are complete another 50 cycles is needed so that the Interlaken core can be configured based from the values written. The core can start sending data once the mmr writes plus 50 clock cycles are complete.
    Bits:  9    MacX2ClkEnLk1(rw) - X2 Clock enable for Laken1
    Bits:  8    MacX2ClkEnLk0(rw) - X2 Clock enable for Laken0
    Bits:  7    MacCoreClkEnLk1(rw) - Core Clock enable for Laken1
    Bits:  6    MacCoreClkEnLk0(rw) - Core Clock enable for Laken0
    Bits:  5    MacCoreClkEnHy1(rw) - Core Clock enable for Hydra1
    Bits:  4    MacCoreClkEnHy0(rw) - Core Clock enable for Hydra0
    Bits:  3    Rfu(rw) - Reserved for Use.
    Bits:  2    MacSerDesRst(rw) - Reset to all MAC SerDes
    Bits:  1    MacSReset(rw) - SRESET - Not Used
    Bits:  0    MacHReset(rw) - HRESET - Not Used
*/
#define NFP_NBI_MACX_CSR_BLOCK_RST                           0x00000000
#define   NFP_NBI_MACX_CSR_BLOCK_RST_RFU2(_x)                (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_RFU2_of(_x)             (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_HY1_STAT_RST        BIT(23)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_HY0_STAT_RST        BIT(22)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_TX_RST_MPB          BIT(21)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_RX_RST_MPB          BIT(20)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_TX_RST_CORE         BIT(19)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_RX_RST_CORE         BIT(18)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_FCX2RST_LK1         BIT(17)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_FCX2RST_LK0         BIT(16)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_RXRST_LK1           BIT(15)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_RXRST_LK0           BIT(14)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_TXRST_LK1           BIT(13)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_TXRST_LK0           BIT(12)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_RST_LK1             BIT(11)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_RST_LK0             BIT(10)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_X2CLKEN_LK1         BIT(9)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_X2CLKEN_LK0         BIT(8)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_CORECLKEN_LK1       BIT(7)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_CORECLKEN_LK0       BIT(6)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_CORECLKEN_HY1       BIT(5)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_CORECLKEN_HY0       BIT(4)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_RFU                     BIT(3)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_SERDES_RST          BIT(2)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_S_RST               BIT(1)
#define   NFP_NBI_MACX_CSR_BLOCK_RST_MAC_H_RST               BIT(0)
/*----------------------------------------------------------------
  Register: MacHyd0BlkReset - Hydra0 Resets Register
  Register: MacHyd1BlkReset - Hydra1 Resets Register
    Bits: 31:20 MacHydRxSerDesIfRst(rw) - Hydra RX Serdes Interface Resets. Rx Serdes clks must be running.
    Bits: 19:16 Rfu(rw) - Reserved for Use.
    Bits: 15:4  MacHydTxSerDesIfRst(rw) - Hydra TX Serdes Interface Resets. Tx Serdes clks must be running.
    Bits:  3    MacHydRxFFRst(rw) - Hydra RX Fifo Interface Clock Domain Reset.
    Bits:  2    MacHydTxFFRst(rw) - Hydra TX Fifo Interface Clock Domain Reset.
    Bits:  1    MacHydRegRst(rw) - Hydra Reg Clock Domain Reset.
    Bits:  0    MacHydRefRst(rw) - Hydra Ref Clock Domain Reset.
*/
#define NFP_NBI_MACX_CSR_HYD0_BLOCK_RST                      0x00000004
#define NFP_NBI_MACX_CSR_HYD1_BLOCK_RST                      0x00000008
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_RX_SERDES(_x)  (((_x) & 0xfff) << 20)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_RX_SERDES_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_RFU(_x)            (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_RFU_of(_x)         (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_TX_SERDES(_x)  (((_x) & 0xfff) << 4)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_TX_SERDES_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_RX_FF          BIT(3)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_TX_FF          BIT(2)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_REG            BIT(1)
#define   NFP_NBI_MACX_CSR_MACHYDBLKRESET_MAC_REF            BIT(0)
/*----------------------------------------------------------------
  Register: MacMuxCtrl - Mac Mux Control Register
    Bits: 31:25 Rfu(rw) - Reserved for Use.
    Bits: 24    LASelect(rw) - MAC ILA MUX Select
    Bits: 23:0  MacSerDesIntlknSel(rw) - Selects Interlaken or Ethernet MACs for SerDes connect
*/
#define NFP_NBI_MACX_CSR_MUX_CTRL                            0x0000000c
#define   NFP_NBI_MACX_CSR_MUX_CTRL_RFU(_x)                  (((_x) & 0x7f) << 25)
#define   NFP_NBI_MACX_CSR_MUX_CTRL_RFU_of(_x)               (((_x) >> 25) & 0x7f)
#define   NFP_NBI_MACX_CSR_MUX_CTRL_ILA_SEL                  BIT(24)
#define     NFP_NBI_MACX_CSR_MUX_CTRL_ILA_SEL_MAC            (0 << 24)
#define     NFP_NBI_MACX_CSR_MUX_CTRL_ILA_SEL_ILA            BIT(24)
#define   NFP_NBI_MACX_CSR_MUX_CTRL_INLK_SEL(_x)             (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_MUX_CTRL_INLK_SEL_of(_x)          (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacSerDesEn - Mac SerDes Enable Register
    Bits: 31:24 Rfu(rw) - Reserved for Use.
    Bits: 23:0  SerDesEnable(rw) - Serdes Enables. (May be redefined when SerDes added).
*/
#define NFP_NBI_MACX_CSR_SERDES                              0x00000010
#define   NFP_NBI_MACX_CSR_SERDES_RFU(_x)                    (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_SERDES_RFU_of(_x)                 (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_SERDES_ENABLE(_x)                 (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SERDES_ENABLE_of(_x)              (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacSysSupCtrl - Mac System Support Control Register
    Bits: 31:24 MacSysSupCtrlC(rw) - Extra Control Bits for system support block
    Bits: 23:20 MacMpbFreeBufFifoLowWm(rw) - Low Water mark for Free Buffer FIFO to start backpressuring NBI MPB thru denial of data credits.
    Bits: 19    MacIgLnkLstFreezeOnErrN(rw) - When 0, Freeze IG Linklist on Multibit ECC error.
    Bits: 18    MacEgLnkLstFreezeOnErrN(rw) - When 0, Freeze EG Linklist on Multibit ECC error.
    Bits: 17    DwrrArbiterDisable(rw) - IG DQ DWRR arbiter disable bit. Setting this bit to 1 will disable Ingress DQ operation.
    Bits: 16    DwrrWeightWrEnable(rw) - IG DQ DWRR arbiter inits to fixed weights. To overwrite the fixed weights, this bit must be set and remain set to use the override values.
    Bits: 15    MacIlkLiveIntSel(rw) - When set, ILK IP Interrupts are selected live to the ILK status register. When clear, the Interrupt bits are sticky and clear on read.
    Bits: 14    Lk1IgDqSegmentedEn(rw) - When set IG DQ from LK1 channels is segmented on buffer (256B) boundries, subject to the limits of packet credits.
    Bits: 13    Lk0IgDqSegmentedEn(rw) - When set IG DQ from LK0 channels is segmented on buffer (256B) boundries, subject to the limits of packet credits.
    Bits: 12    Lk1LinklistEn(rw) - When set and SplitMemIG set, enables the IG freelist FIFO for Laken1 to pull from the free pool.
    Bits: 11    Lk0LinklistEn(rw) - When set, enables the IG freelist FIFO for Laken0 to pull from the free pool.
    Bits: 10    Hy1LinklistEn(rw) - When set and SplitMemIG also set, enables the IG freelist FIFO for Hydra1 to pull from the free pool.
    Bits:  9    Hy0LinklistEn(rw) - When set, enables the IG freelist FIFO for Hydra0 to pull from the free pool.
    Bits:  8    SplitMemIG(rw) - When set, splits the channels, packet and linklist memories in half to support 2 active hydras. Ingress and Egress.
    Bits:  7    ExtraEthHistMode(rw) - When set, swaps some channel stats counters for additional histogram size counters. Ethernet ports only
    Bits:  6:4  MacSysSupCtrlA(rw) - Control Bits for system support block
    Bits:  3    TimeStampFrc(rw) - When set, timestamp runs as a 64-bit Free Running Counter incrementing the assigned every Core_Clock cycle. When 0, the counters operate as 32 bits of seconds and 32 bits of nsec when the appropriate increment value is set with the lower 32 bits rolling over to 0 at 999,999,999 + 1 and incrementing the upper 32 bit seconds counter
    Bits:  2    TimeStampSet(rw) - When set, timestamp loads with the init values from the setSec and setNsec registers. TimeStamEn MUST BE 0 for set function to operate.
    Bits:  1    TimeStampRst(rw) - When set, timestamp resets to 0.
    Bits:  0    TimeStampEn(rw) - When set, timestamp increments at the set incr value each core_clock.
*/
#define NFP_NBI_MACX_CSR_SYS_SUP_CTRL                        0x00000014
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_CTRLC(_x)            (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_CTRLC_of(_x)         (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_MPB_FREE_LOW_WM(_x)  (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_MPB_FREE_LOW_WM_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_IG_LL_FREEZE_ON_ERR  BIT(19)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_EG_LL_FREEZE_ON_ERR  BIT(18)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_DWRR_ARBITER_DIS     BIT(17)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_DWRR_WEIGHT_WR_EN    BIT(16)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_ILK_LIVE_INT_SEL     BIT(15)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_LK1_IG_DQ_SEG_EN     BIT(14)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_LK0_IG_DQ_SEG_EN     BIT(13)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_LK1_LL_EN            BIT(12)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_LK0_LL_EN            BIT(11)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_HY1_LL_EN            BIT(10)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_HY0_LL_EN            BIT(9)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_SPLIT_MEM_IG         BIT(8)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_EXTRA_ETH_HIST       BIT(7)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_CTRLA(_x)            (((_x) & 0x7) << 4)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_CTRLA_of(_x)         (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_TIMESTAMP_FRC        BIT(3)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_TIMESTAMP_SET        BIT(2)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_TIMESTAMP_RST        BIT(1)
#define   NFP_NBI_MACX_CSR_SYS_SUP_CTRL_TIMESTAMP_EN         BIT(0)
/*----------------------------------------------------------------
  Register: MacSysSupStat - Mac System Support Status Register
    Bits: 31:0  MacSysSupStat(rw) - Status Bits for system support block
*/
#define NFP_NBI_MACX_CSR_SYS_SUP_STAT                        0x00000018
#define   NFP_NBI_MACX_CSR_SYS_SUP_STAT_MAC_SYS_SUPPORT_STAT(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_SYS_SUP_STAT_MAC_SYS_SUPPORT_STAT_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampNsec - Mac TimeStamp Nanoseconds
    Bits: 31:0  MacTimeStampNsec(ro) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP_NBI_MACX_CSR_TS_NSEC                             0x0000001c
#define   NFP_NBI_MACX_CSR_TS_NSEC_MAC_TS_NSEC(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_TS_NSEC_MAC_TS_NSEC_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSec - Mac TimeStamp Seconds
    Bits: 31:0  MacTimeStampSec(ro) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP_NBI_MACX_CSR_TS_SEC                              0x00000020
#define   NFP_NBI_MACX_CSR_TS_SEC_MAC_TS_SEC(_x)             (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_TS_SEC_MAC_TS_SEC_of(_x)          (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampIncr - Mac TimeStamp Increment in Nanoseconds and fraction of nanoseconds
    Bits: 19:16 IncrNsec(rw) - Increment in whole nsecs to TsNsec in nsec every XPB Clock
    Bits: 15:0  IncrFraction(rw) - Increment in fractional to TsNsec in nsec every XPB Clock to compensate for various clock frequencies
*/
#define NFP_NBI_MACX_CSR_TS_INCR                             0x00000024
#define   NFP_NBI_MACX_CSR_TS_INCR_NSEC(_x)                  (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_TS_INCR_NSEC_of(_x)               (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_TS_INCR_FRAC(_x)                  (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_TS_INCR_FRAC_of(_x)               (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetNsec - Mac TimeStamp Set Nanoseconds
    Bits: 31:0  MacTimeStampSetNsec(rw) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP_NBI_MACX_CSR_TS_SET_NSEC                         0x00000028
#define   NFP_NBI_MACX_CSR_TS_SET_NSEC_MAC_TS_SET_NSEC(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_TS_SET_NSEC_MAC_TS_SET_NSEC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetSec - Mac TimeStamp Set Seconds
    Bits: 31:0  MacTimeStampSetSec(rw) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP_NBI_MACX_CSR_TS_SET_SEC                          0x0000002c
#define   NFP_NBI_MACX_CSR_TS_SET_SEC_MAC_TS_SEC(_x)         (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_TS_SET_SEC_MAC_TS_SEC_of(_x)      (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord3100 - Egress TDM cycle word 31:00 for Hydra0 and Interlaken(s).
  Register: MacTdm1CycleWord3100 - Egress TDM cycle word 31:00 for Hydra1 and Interlaken(s).
    Bits: 31:28 MacTdmPortSlot7(rw) - TDM egress port for TDM slot 7
    Bits: 27:24 MacTdmPortSlot6(rw) - TDM egress port for TDM slot 6
    Bits: 23:20 MacTdmPortSlot5(rw) - TDM egress port for TDM slot 5
    Bits: 19:16 MacTdmPortSlot4(rw) - TDM egress port for TDM slot 4
    Bits: 15:12 MacTdmPortSlot3(rw) - TDM egress port for TDM slot 3
    Bits: 11:8  MacTdmPortSlot2(rw) - TDM egress port for TDM slot 2
    Bits:  7:4  MacTdmPortSlot1(rw) - TDM egress port for TDM slot 1
    Bits:  3:0  MacTdmPortSlot0(rw) - TDM egress port for TDM slot 0
*/
#define NFP_NBI_MACX_CSR_TDM0_CYCLE_WORD_3100                0x00000030
#define NFP_NBI_MACX_CSR_TDM1_CYCLE_WORD_3100                0x00000038
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT7(_x)     (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT7_of(_x)  (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT6(_x)     (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT6_of(_x)  (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT5(_x)     (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT5_of(_x)  (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT4(_x)     (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT4_of(_x)  (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT3(_x)     (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT3_of(_x)  (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT2(_x)     (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT2_of(_x)  (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT1(_x)     (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT1_of(_x)  (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT0(_x)     (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD3100_SLOT0_of(_x)  (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord4732 - Egress TDM cycle word 47:32 for Hydra0.
  Register: MacTdm1CycleWord4732 - Egress TDM cycle word 47:32 for Hydra1.
    Bits: 15:12 MacTdmPortSlot11(rw) - TDM egress port for TDM slot 11
    Bits: 11:8  MacTdmPortSlot10(rw) - TDM egress port for TDM slot 10
    Bits:  7:4  MacTdmPortSlot9(rw) - TDM egress port for TDM slot 9
    Bits:  3:0  MacTdmPortSlot8(rw) - TDM egress port for TDM slot 8
*/
#define NFP_NBI_MACX_CSR_TDM0_CYCLE_WORD_4732                0x00000034
#define NFP_NBI_MACX_CSR_TDM1_CYCLE_WORD_4732                0x0000003c
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT11(_x)    (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT11_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT10(_x)    (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT10_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT9(_x)     (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT9_of(_x)  (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT8(_x)     (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MACTDMCYCLEWORD4732_SLOT8_of(_x)  (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0Mode0900 - Mac Hydra0 Ports Egress rate bits 29:00 (ports 9-0).
  Register: MacTdm1Mode0900 - Mac Hydra1 Ports Egress rate bits 29:00 (ports 9-0).
    Bits: 29:27 MacTdmModePort9(rw) - TDM egress port rate for Mac port 9
    Bits: 26:24 MacTdmModePort8(rw) - TDM egress port rate for Mac port 8
    Bits: 23:21 MacTdmModePort7(rw) - TDM egress port rate for Mac port 67
    Bits: 20:18 MacTdmModePort6(rw) - TDM egress port rate for Mac port 6
    Bits: 17:15 MacTdmModePort5(rw) - TDM egress port rate for Mac port 5
    Bits: 14:12 MacTdmModePort4(rw) - TDM egress port rate for Mac port 4
    Bits: 11:9  MacTdmModePort3(rw) - TDM egress port rate for Mac port 3
    Bits:  8:6  MacTdmModePort2(rw) - TDM egress port rate for Mac port 2
    Bits:  5:3  MacTdmModePort1(rw) - TDM egress port rate for Mac port 1
    Bits:  2:0  MacTdmModePort0(rw) - TDM egress port rate for Mac port 0
*/
#define NFP_NBI_MACX_CSR_TDM0_MODE_0900                      0x00000040
#define NFP_NBI_MACX_CSR_TDM1_MODE_0900                      0x00000048
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9(_x)          (((_x) & 0x7) << 27)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9_of(_x)       (((_x) >> 27) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT9_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8(_x)          (((_x) & 0x7) << 24)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8_of(_x)       (((_x) >> 24) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT8_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7(_x)          (((_x) & 0x7) << 21)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7_of(_x)       (((_x) >> 21) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT7_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6(_x)          (((_x) & 0x7) << 18)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6_of(_x)       (((_x) >> 18) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT6_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5(_x)          (((_x) & 0x7) << 15)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5_of(_x)       (((_x) >> 15) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT5_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4(_x)          (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4_of(_x)       (((_x) >> 12) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT4_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3(_x)          (((_x) & 0x7) << 9)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3_of(_x)       (((_x) >> 9) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT3_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2(_x)          (((_x) & 0x7) << 6)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2_of(_x)       (((_x) >> 6) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT2_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1(_x)          (((_x) & 0x7) << 3)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1_of(_x)       (((_x) >> 3) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT1_100G       (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0(_x)          (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0_of(_x)       (((_x) >> 0) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0_OFF        (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0_1G         (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0_10G        (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0_40G        (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE0900_PORT0_100G       (4)
/*----------------------------------------------------------------
  Register: MacTdm0Mode1110CrcEn - Mac Hydra0 Ports Egress rate bits 35:30 (ports 11-10). Also Tx Crc enable for ports 11-0.
  Register: MacTdm1Mode1110CrcEn - Mac Hydra1 Ports Egress rate bits 35:30 (ports 11-10). Also Tx Crc enable for ports 11-0.
    Bits: 27:16 MacEgressPortCrcEn(rw) - If set, Enables MAC egress port (11-0) to append CRC.
    Bits:  5:3  MacTdmModePort1(rw) - TDM egress port rate for Mac port 1
    Bits:  2:0  MacTdmModePort0(rw) - TDM egress port rate for Mac port 0
*/
#define NFP_NBI_MACX_CSR_TDM0_MODE_1110_CRC_EN               0x00000044
#define NFP_NBI_MACX_CSR_TDM1_MODE_1110_CRC_EN               0x0000004c
#define   NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_MAC_EG_PORT(_x) (((_x) & 0xfff) << 16)
#define   NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_MAC_EG_PORT_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1(_x)       (((_x) & 0x7) << 3)
#define   NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1_of(_x)    (((_x) >> 3) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1_OFF     (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1_1G      (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1_10G     (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1_40G     (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT1_100G    (4)
#define   NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0(_x)       (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0_of(_x)    (((_x) >> 0) & 0x7)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0_OFF     (0)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0_1G      (1)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0_10G     (2)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0_40G     (3)
#define     NFP_NBI_MACX_CSR_MACTDMMODE1110CRC_PORT0_100G    (4)
/*----------------------------------------------------------------
  Register: MacPort2to0ChanAssign - Mac Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacPort5to3ChanAssign - Mac Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacPort8to6ChanAssign - Mac Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacPort11to9ChanAssign - Mac Hydra0 Ports 11-9 Channel Assignment Register.
  Register: MacPort14to12ChanAssign - Mac Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacPort17to15ChanAssign - Mac Hydra1 Ports 5-3 Channel Assignment Register.
  Register: MacPort20to18ChanAssign - Mac Hydra1 Ports 8-6 Channel Assignment Register.
  Register: MacPort23to21ChanAssign - Mac Hydra1 Ports 11-9 Channel Assignment Register.
  Register: MacEgPort2to0ChanAssign - Mac EG Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort5to3ChanAssign - Mac EG Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacEgPort8to6ChanAssign - Mac EG Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacEgPort11to9ChanAssign - Mac EG Hydra0 Ports 11-9 Channel Assignment Register.
  Register: MacEgPort14to12ChanAssign - Mac EG Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort17to15ChanAssign - Mac EG Hydra1 Ports 5-3 Channel Assignment Register.
  Register: MacEgPort20to18ChanAssign - Mac EG Hydra1 Ports 8-6 Channel Assignment Register.
  Register: MacEgPort23to21ChanAssign - Mac EG Hydra1 Ports 11-9 Channel Assignment Register.
    Bits: 29:26 PortNumOfChannels2(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 25:20 PortBaseChan2(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits: 19:16 PortNumOfChannels1(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 15:10 PortBaseChan1(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits:  9:6  PortNumOfChannels0(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits:  5:0  PortBaseChan0(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
*/
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_2_TO_0             0x00000050
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_5_TO_3             0x00000054
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_8_TO_6             0x00000058
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_11_TO_9            0x0000005c
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_14_TO_12           0x00000060
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_17_TO_15           0x00000064
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_20_TO_18           0x00000068
#define NFP_NBI_MACX_CSR_CHAN_ASSIGN_PORT_23_TO_21           0x0000006c
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_2_TO_0          0x00000240
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_5_TO_3          0x00000244
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_8_TO_6          0x00000248
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_11_TO_9         0x0000024c
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_14_TO_12        0x00000250
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_17_TO_15        0x00000254
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_20_TO_18        0x00000258
#define NFP_NBI_MACX_CSR_EG_CHAN_ASSIGN_PORT_23_TO_21        0x0000025c
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_NUM_CHANS2(_x)  (((_x) & 0xf) << 26)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_NUM_CHANS2_of(_x) (((_x) >> 26) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_BASE_CHAN2(_x)  (((_x) & 0x3f) << 20)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_BASE_CHAN2_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_NUM_CHANS1(_x)  (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_NUM_CHANS1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_BASE_CHAN1(_x)  (((_x) & 0x3f) << 10)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_BASE_CHAN1_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_NUM_CHANS0(_x)  (((_x) & 0xf) << 6)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_NUM_CHANS0_of(_x) (((_x) >> 6) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_BASE_CHAN0(_x)  (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_MACPORTCHANASSIGN_BASE_CHAN0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacPrePendCtl03to00 - Ethernet Core 0: Mac ports 03-00 prepend skip bytes.(Port0 maps to ILK0.)
  Register: MacPrePendCtl15to12 - Ethernet Core 1: Mac ports 03-00 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only). Ports 0 Maps to Interlaken MAC 0 if enabled.
    Bits:  3:0  IGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only). Port 0 Maps to Interlaken MAC 0 if enabled.
*/
#define NFP_NBI_MACX_CSR_PREPEND_CTRL_03_TO_00               0x00000070
#define NFP_NBI_MACX_CSR_PREPEND_CTRL_15_TO_12               0x0000007c
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT3(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT3_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT3(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT3_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT2(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT2_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT2(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT2_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT1(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT1_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT1(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT0(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTS_PORT0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTS_PORT0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl07to04 - Ethernet Core 0: Mac ports 07-04 prepend skip bytes.
  Register: MacPrePendCtl19to16 - Ethernet Core 1: Mac ports 07-04 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP_NBI_MACX_CSR_PREPEND_CTRL_07_TO_04               0x00000074
#define NFP_NBI_MACX_CSR_PREPEND_CTRL_19_TO_16               0x00000080
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT7(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT7(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT7_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT6(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT6_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT6(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT6_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT5(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT5_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT5(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT5_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT4(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTS_PORT4_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT4(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTS_PORT4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl11to08 - Ethernet Core 0: Mac ports 11-08 prepend skip bytes.
  Register: MacPrePendCtl23to20 - Ethernet Core 1: Mac ports 11-08 prepend skip bytes.(Port23 maps to ILK1.)
    Bits: 31:28 EGSkipOctetsPort11(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only). Port 23 Maps to Interlaken MAC 1 if enabled.
    Bits: 27:24 IGSkipOctetsPort11(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only). Port 23 Maps to Interlaken MAC 1 if enabled.
    Bits: 23:20 EGSkipOctetsPort10(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort10(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP_NBI_MACX_CSR_PREPEND_CTRL_11_TO_08               0x00000078
#define NFP_NBI_MACX_CSR_PREPEND_CTRL_23_TO_20               0x00000084
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT11(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT11_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT11(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT11_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT10(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT10_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT10(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT10_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT9(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT9_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT9(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT9_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT8(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTS_PORT8_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT8(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTS_PORT8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtl15to00 - Mac IG ports 15-00 DSA TAG control.
  Register: MacEgPrePendDsaCtl15to00 - Mac EG ports 15-00 DSA TAG control.
    Bits: 31:30 DsaTagModePort15(rw) - DSA tagging mode for port 15.
    Bits: 29:28 DsaTagModePort14(rw) - DSA tagging mode for port 14.
    Bits: 27:26 DsaTagModePort13(rw) - DSA tagging mode for port 13.
    Bits: 25:24 DsaTagModePort12(rw) - DSA tagging mode for port 12.
    Bits: 23:22 DsaTagModePort11(rw) - DSA tagging mode for port 11.
    Bits: 21:20 DsaTagModePort10(rw) - DSA tagging mode for port 10.
    Bits: 19:18 DsaTagModePort9(rw) - DSA tagging mode for port 9.
    Bits: 17:16 DsaTagModePort8(rw) - DSA tagging mode for port 8.
    Bits: 15:14 DsaTagModePort7(rw) - DSA tagging mode for port 7.
    Bits: 13:12 DsaTagModePort6(rw) - DSA tagging mode for port 6.
    Bits: 11:10 DsaTagModePort5(rw) - DSA tagging mode for port 5.
    Bits:  9:8  DsaTagModePort4(rw) - DSA tagging mode for port 4.
    Bits:  7:6  DsaTagModePort3(rw) - DSA tagging mode for port 3.
    Bits:  5:4  DsaTagModePort2(rw) - DSA tagging mode for port 2.
    Bits:  3:2  DsaTagModePort1(rw) - DSA tagging mode for port 1.
    Bits:  1:0  DsaTagModePort0(rw) - DSA tagging mode for port 0.
*/
#define NFP_NBI_MACX_CSR_DSA_CTRL_15_TO_00                   0x00000088
#define NFP_NBI_MACX_CSR_EG_DSA_CTRL_15_TO_00                0x000001cc
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT15(_x)      (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT15_of(_x)   (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT14(_x)      (((_x) & 0x3) << 28)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT14_of(_x)   (((_x) >> 28) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT13(_x)      (((_x) & 0x3) << 26)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT13_of(_x)   (((_x) >> 26) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT12(_x)      (((_x) & 0x3) << 24)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT12_of(_x)   (((_x) >> 24) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT11(_x)      (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT11_of(_x)   (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT10(_x)      (((_x) & 0x3) << 20)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT10_of(_x)   (((_x) >> 20) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT9(_x)       (((_x) & 0x3) << 18)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT9_of(_x)    (((_x) >> 18) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT8(_x)       (((_x) & 0x3) << 16)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT8_of(_x)    (((_x) >> 16) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT7(_x)       (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT7_of(_x)    (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT6(_x)       (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT6_of(_x)    (((_x) >> 12) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT5(_x)       (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT5_of(_x)    (((_x) >> 10) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT4(_x)       (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT4_of(_x)    (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT3(_x)       (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT3_of(_x)    (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT2(_x)       (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT2_of(_x)    (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT1(_x)       (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT1_of(_x)    (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT0(_x)       (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT0_of(_x)    (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT0_DISABLED (0)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT0_4B      (1)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT0_8B      (2)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL1_PORT0_INV     (3)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtlLkand23to16 - Mac IG ports ILK and 23-16 DSA TAG control.
  Register: MacEgPrePendDsaCtlLkand23to16 - "Mac EG ports ILK and 23-16 DSA TAG control.
    Bits: 31:20 Rfu(rw) - Reserved for Use.
    Bits: 19:18 DsaTagModeLkCore1(rw) - DSA tagging mode for LK Core 1.
    Bits: 17:16 DsaTagModeLkCore0(rw) - DSA tagging mode for LK Core 0.
    Bits: 15:14 DsaTagModePort23(rw) - DSA tagging mode for port 23.
    Bits: 13:12 DsaTagModePort22(rw) - DSA tagging mode for port 22.
    Bits: 11:10 DsaTagModePort21(rw) - DSA tagging mode for port 21.
    Bits:  9:8  DsaTagModePort20(rw) - DSA tagging mode for port 20.
    Bits:  7:6  DsaTagModePort19(rw) - DSA tagging mode for port 19.
    Bits:  5:4  DsaTagModePort18(rw) - DSA tagging mode for port 18.
    Bits:  3:2  DsaTagModePort17(rw) - DSA tagging mode for port 17.
    Bits:  1:0  DsaTagModePort16(rw) - DSA tagging mode for port 16.
*/
#define NFP_NBI_MACX_CSR_DSA_CTRL_23_TO_16                   0x0000008c
#define NFP_NBI_MACX_CSR_EG_DSA_CTRL_23_TO_16                0x000001d0
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_RFU(_x)         (((_x) & 0xfff) << 20)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_RFU_of(_x)      (((_x) >> 20) & 0xfff)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_LK_CORE_1(_x)   (((_x) & 0x3) << 18)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_LK_CORE_1_of(_x) (((_x) >> 18) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_LK_CORE_0(_x)   (((_x) & 0x3) << 16)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_LK_CORE_0_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT23(_x)      (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT23_of(_x)   (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT22(_x)      (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT22_of(_x)   (((_x) >> 12) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT21(_x)      (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT21_of(_x)   (((_x) >> 10) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT20(_x)      (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT20_of(_x)   (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT19(_x)      (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT19_of(_x)   (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT18(_x)      (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT18_of(_x)   (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT17(_x)      (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT17_of(_x)   (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT16(_x)      (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT16_of(_x)   (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT16_DISABLED (0)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT16_4B     (1)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT16_8B     (2)
#define     NFP_NBI_MACX_CSR_MACPREPENDDSACTL2_PORT16_INV    (3)
/*----------------------------------------------------------------
  Register: MacInterlakenCtl1 - Interlaken control register 1.
    Bits: 31:29 LkBurstMaxCore1(rw) - Core1 Burstmax setting for the gasket controls.
    Bits: 28:22 LkNumChannelsUpper64(rw) - The number of contiguous channels, starting at the base_channel(upper64base of 0 maps to channel 64), Interlaken Core0 or Core1 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits: 21:16 LkBaseChannelUpper64(rw) - Sets the base channel number of the upper 64 channels for Interlaken use. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). A BaseChannel value of 0 maps to physical channel 64
    Bits: 15:13 LkBurstMaxCore0(rw) - Core0 Burstmax setting for the gasket controls.
    Bits: 12:6  LkNumChannelsLower64(rw) - The number of contiguous channels, starting at the base_channel, Interlaken Core0 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For Core0 ONLY. BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits:  5:0  LkBaseChannelLower64(rw) - Sets the base channel number of the lower 64 channels for Interlaken use. ONLY Core0 can access these channels (0-63).
*/
#define NFP_NBI_MACX_CSR_ILA_CTRL_1                          0x00000090
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1(_x)    (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_64B  (0)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_128B (1)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_196B (2)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_256B (3)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_320B (4)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_384B (5)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_448B (6)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_1_512B (7)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_NUM_CHANS_UPPER_64(_x) (((_x) & 0x7f) << 22)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_NUM_CHANS_UPPER_64_of(_x) (((_x) >> 22) & 0x7f)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BASE_CHAN_UPPER_64(_x) (((_x) & 0x3f) << 16)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BASE_CHAN_UPPER_64_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0(_x)    (((_x) & 0x7) << 13)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_of(_x) (((_x) >> 13) & 0x7)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_64B  (0)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_128B (1)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_196B (2)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_256B (3)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_320B (4)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_384B (5)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_448B (6)
#define     NFP_NBI_MACX_CSR_ILA_CTRL_1_BURSTMAX_CORE_0_512B (7)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_NUM_CHANS_LOWER_64(_x) (((_x) & 0x7f) << 6)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_NUM_CHANS_LOWER_64_of(_x) (((_x) >> 6) & 0x7f)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BASE_CHAN_LOWER_64(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_1_BASE_CHAN_LOWER_64_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacInterlakenCtl2 - Interlaken control register 2.
    Bits: 31:23 Rfu2(rw) - Reserved for Use.
    Bits: 22    LkNbiChanSwapEn1(rw) - When set, will map Laken1 Interlaken channels 0-63 to NBI channels 64-127.
    Bits: 21    IgOobFcSelCore1(rw) - When set, the ingress FC state is transmitted out thru the Out-Of-Band path only. The In-Band path will be all 1's. When clear, only the In-Band path will send FC state information.
    Bits: 20    EgOobFcSelCore1(rw) - When set, the egress FC decisions are made from the Xon vector provided by the OOB core1. If 0, then the FC decisions are made from the InBand Xon vector.
    Bits: 19:17 EgTdmModeLkCore1(rw) - RFU.
    Bits: 16    EgAtomicLkCore1(rw) - If set to 1, the dequeue is SOP to EOP, no interleave. If 0, segmented packet dequeue is allowed with channel interleaving on egress Core1.
    Bits: 15:7  Rfu(rw) - Reserved for Use.
    Bits:  6    LkNbiChanSwapEn0(rw) - When set, will map Laken0 Interlaken channels 0-63 to NBI channels 64-127 if split_mem not set and Laken0 only enabled on channels 64-127, otherwise channels are mapped one-to-one..
    Bits:  5    IgOobFcSelCore0(rw) - When set, the ingress FC state is transmitted out thru the Out-Of-Band path only. The In-Band path will be all 1's. When clear, only the In-Band path will send FC state information.
    Bits:  4    EgOobFcSelCore0(rw) - When set, the egress FC decisions are made from the Xon vector provided by the OOB core0. If 0, then the FC decisions are made from the InBand Xon vector.
    Bits:  3:1  EgTdmModeLkCore0(rw) - RFU.
    Bits:  0    EgAtomicLkCore0(rw) - If set to 1, the dequeue is SOP to EOP, no interleave. If 0, segmented packet dequeue is allowed with channel interleaving on egress Core0.
*/
#define NFP_NBI_MACX_CSR_ILA_CTRL_2                          0x00000094
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_RFU2(_x)               (((_x) & 0x1ff) << 23)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_RFU2_of(_x)            (((_x) >> 23) & 0x1ff)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_LK_NBI_CHAN_SWAP_EN_1  BIT(22)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_IG_OOB_FC_SEL_CORE_1   BIT(21)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_OOB_FC_SEL_CORE_1   BIT(20)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_TDM_MODE_LK_CORE_1(_x) (((_x) & 0x7) << 17)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_TDM_MODE_LK_CORE_1_of(_x) (((_x) >> 17) & 0x7)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_ATOMIC_LK_CORE_1    BIT(16)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_RFU(_x)                (((_x) & 0x1ff) << 7)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_RFU_of(_x)             (((_x) >> 7) & 0x1ff)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_LK_NBI_CHAN_SWAP_EN_0  BIT(6)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_IG_OOB_FC_SEL_CORE_0   BIT(5)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_OOB_FC_SEL_CORE_0   BIT(4)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_TDM_MODE_LK_CORE_0(_x) (((_x) & 0x7) << 1)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_TDM_MODE_LK_CORE_0_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_NBI_MACX_CSR_ILA_CTRL_2_EG_ATOMIC_LK_CORE_0    BIT(0)
/*----------------------------------------------------------------
  Register: EgBufferCreditPoolCount - Running count of total free buffers for egress.
    Bits: 31    EgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 EgBufferCreditCount1(ro) - Live value of egress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  EgBufferCreditCount(ro) - Live value of egress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP_NBI_MACX_CSR_EG_BUF_CREDIT_POOL                  0x00000098
#define   NFP_NBI_MACX_CSR_EG_BUF_CREDIT_POOL_LL_READY       BIT(31)
#define   NFP_NBI_MACX_CSR_EG_BUF_CREDIT_POOL_COUNT1(_x)     (((_x) & 0x3fff) << 16)
#define   NFP_NBI_MACX_CSR_EG_BUF_CREDIT_POOL_COUNT1_of(_x)  (((_x) >> 16) & 0x3fff)
#define   NFP_NBI_MACX_CSR_EG_BUF_CREDIT_POOL_COUNT(_x)      (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_CSR_EG_BUF_CREDIT_POOL_COUNT_of(_x)   (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: TxMpbCreditInit - Initial values for Ingress-side minipacket bus credits.
    Bits: 31:20 Rfu(rw) - Reserved for Use.
    Bits: 19:16 TxMpbCreditDataInit(rw) - TX MPB Data credits initial value.
    Bits: 15:12 Rfu2(rw) - Reserved for Use.
    Bits: 11:6  TxMpbCreditMaxPktInit(rw) - TX MPB Pkt Max credits initial value.
    Bits:  5:0  TxMpbCreditPktInit(rw) - TX MPB Pkt credits initial value. The register MUST BE set to 7 or less.
*/
#define NFP_NBI_MACX_CSR_TX_MPB_CREDIT                       0x0000009c
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_RFU(_x)             (((_x) & 0xfff) << 20)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_RFU_of(_x)          (((_x) >> 20) & 0xfff)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_DATA_INIT(_x)       (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_DATA_INIT_of(_x)    (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_RFU2(_x)            (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_RFU2_of(_x)         (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_MAX_PKT_INIT(_x)    (((_x) & 0x3f) << 6)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_MAX_PKT_INIT_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_PKT_INIT(_x)        (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_TX_MPB_CREDIT_PKT_INIT_of(_x)     (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: IgBufferCreditPoolCount - Running count of total free buffers for ingress.
    Bits: 31    IgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 IgBufferCreditCount1(ro) - Live value of ingress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  IgBufferCreditCount(ro) - Live value of ingress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP_NBI_MACX_CSR_IG_BUF_CREDIT_POOL                  0x000000a0
#define   NFP_NBI_MACX_CSR_IG_BUF_CREDIT_POOL_LL_READY       BIT(31)
#define   NFP_NBI_MACX_CSR_IG_BUF_CREDIT_POOL_COUNT1(_x)     (((_x) & 0x3fff) << 16)
#define   NFP_NBI_MACX_CSR_IG_BUF_CREDIT_POOL_COUNT1_of(_x)  (((_x) >> 16) & 0x3fff)
#define   NFP_NBI_MACX_CSR_IG_BUF_CREDIT_POOL_COUNT(_x)      (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_CSR_IG_BUF_CREDIT_POOL_COUNT_of(_x)   (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: RxMpbCreditInit - Initial values for Egress-side minipacket bus credits.
    Bits: 31:30 Rfu2(rw) - Reserved for Use.
    Bits: 29:16 RxMpbCreditDataInit(rw) - Egress-side MPB Data credits initial value(not used).
    Bits: 15:14 Rfu(rw) - Reserved for Use.
    Bits: 13:0  RxMpbCreditBufInit(rw) - Egress-side MPB Buffer credit init.(not used).
*/
#define NFP_NBI_MACX_CSR_RX_MPB_CREDIT                       0x000000a4
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_RFU2(_x)            (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_RFU2_of(_x)         (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_DATA_INIT(_x)       (((_x) & 0x3fff) << 16)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_DATA_INIT_of(_x)    (((_x) >> 16) & 0x3fff)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_RFU(_x)             (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_RFU_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_BUF_INIT(_x)        (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_CSR_RX_MPB_CREDIT_BUF_INIT_of(_x)     (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacTdmRateCreditInit - Egress TDM Per-Rate Credit Init values.
    Bits: 31:24 TDM100GECreditInit(rw) - Initial value of hydra 100G TDM credits.
    Bits: 23:16 TDM40GECreditInit(rw) - Initial value of hydra 40G TDM credits.
    Bits: 15:8  TDM10GECreditInit(rw) - Initial value of hydra 10G TDM credits.
    Bits:  7:0  TDM1GECreditInit(rw) - Initial value of hydra 1G TDM credits.
*/
#define NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT                0x000000a8
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_100G(_x)     (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_100G_of(_x)  (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_40G(_x)      (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_40G_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_10G(_x)      (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_10G_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_1G(_x)       (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_1G_of(_x)    (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus0 - Interrupts and errors status register 0.
    Bits: 31:0  MacInterruptErrStatus1(rw) - RFU.
*/
#define NFP_NBI_MACX_CSR_INTR_ERR_STS_0                      0x000000ac
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_0_MAC_INT_ERR_STS_1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_0_MAC_INT_ERR_STS_1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus1 - Interrupts and errors status register 1.
    Bits: 31:24 Rfu(rc) - Reserved for Use.
    Bits: 23:12 MacLinTrainingInthy0(rc) - Mac Link training Interrupt Hy0.
    Bits: 11:0  MacLinTrainingInthy1(rc) - Mac Link training Interrupt Hy1.
*/
#define NFP_NBI_MACX_CSR_INTR_ERR_STS_1                      0x000000b0
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_1_RFU(_x)            (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_1_RFU_of(_x)         (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_1_LINK_TRAIN_HY0(_x) (((_x) & 0xfff) << 12)
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_1_LINK_TRAIN_HY0_of(_x) (((_x) >> 12) & 0xfff)
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_1_LINK_TRAIN_HY1(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_INTR_ERR_STS_1_LINK_TRAIN_HY1_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacInterruptErrEn0 - Interrupts enable register 0.
    Bits: 31:0  MacInterruptErrEn0(rw) - RFU.
*/
#define NFP_NBI_MACX_CSR_INTR_ERR_EN_0                       0x000000b4
#define   NFP_NBI_MACX_CSR_INTR_ERR_EN_0_MAC_INT_ERR_EN_0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_INTR_ERR_EN_0_MAC_INT_ERR_EN_0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacInterruptErrEn1 - Interrupts enable register 1.
    Bits: 31:0  MacInterruptErrEn1(rw) - RFU.
*/
#define NFP_NBI_MACX_CSR_INTR_ERR_EN_1                       0x000000b8
#define   NFP_NBI_MACX_CSR_INTR_ERR_EN_1_MAC_INT_ERR_EN_1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_INTR_ERR_EN_1_MAC_INT_ERR_EN_1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacLiveStatus0 - Live status register 0.
    Bits: 31:0  MacLiveStatus0(ro) - Egress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Egress Chan Rd Addr field bit [6:5].
*/
#define NFP_NBI_MACX_CSR_LIVE_STATUS_0                       0x000000bc
#define   NFP_NBI_MACX_CSR_LIVE_STATUS_0_MAC_LIVE_STS_0(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_LIVE_STATUS_0_MAC_LIVE_STS_0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacLiveStatus1 - Live status register 1.
    Bits: 31:0  MacLiveStatus1(ro) - Ingress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Ingress Chan Rd Addr field bit [6:5].
*/
#define NFP_NBI_MACX_CSR_LIVE_STATUS_1                       0x000000c0
#define   NFP_NBI_MACX_CSR_LIVE_STATUS_1_MAC_LIVE_STS_1(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_LIVE_STATUS_1_MAC_LIVE_STS_1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacChanRdAddr - Addresses for reading IG/EG buffer count state.
    Bits: 31:23 Rfu1(rw) - Reserved for Use.
    Bits: 22:16 IgChanRdAddr(rw) - Channel index for reading Ig channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status1.
    Bits: 15:7  Rfu0(rw) - Reserved for Use.
    Bits:  6:0  EgChanRdAddr(rw) - Channel index for reading Eg channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status0.
*/
#define NFP_NBI_MACX_CSR_CHAN_RD_ADDR                        0x000000c4
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_RFU1(_x)             (((_x) & 0x1ff) << 23)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_RFU1_of(_x)          (((_x) >> 23) & 0x1ff)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_IG_CHAN(_x)          (((_x) & 0x7f) << 16)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_IG_CHAN_of(_x)       (((_x) >> 16) & 0x7f)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_RFU0(_x)             (((_x) & 0x1ff) << 7)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_RFU0_of(_x)          (((_x) >> 7) & 0x1ff)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_EG_CHAN(_x)          (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACX_CSR_CHAN_RD_ADDR_EG_CHAN_of(_x)       (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacChanBufCount - Read data for IG/EG buffercounts indexed by Chan Rd Addr.
    Bits: 31:27 Rfu1(ro) - Reserved for Use.
    Bits: 26:16 IgChanRdBufCnt(ro) - Live Ingress Chan buffer count indexed by Ig Chan Rd Addr.
    Bits: 15:11 Rfu0(ro) - Reserved for Use.
    Bits: 10:0  EgChanRdBufCnt(ro) - Live Egress Chan buffer count indexed by Eg Chan Rd Addr.
*/
#define NFP_NBI_MACX_CSR_CHAN_BUF_COUNT                      0x000000c8
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_RFU1(_x)           (((_x) & 0x1f) << 27)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_RFU1_of(_x)        (((_x) >> 27) & 0x1f)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_IG_CHAN(_x)        (((_x) & 0x7ff) << 16)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_IG_CHAN_of(_x)     (((_x) >> 16) & 0x7ff)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_RFU0(_x)           (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_RFU0_of(_x)        (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_EG_CHAN(_x)        (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_CHAN_BUF_COUNT_EG_CHAN_of(_x)     (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: PauseWaterMark[64] - Per Class water marks (N*2) and (N*2)+1 for pause generation.
    Bits: 31:28 PWMResv1(rw) - Reserved
    Bits: 27:16 PauseWaterMark1(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
    Bits: 15:12 PWMResv0(rw) - Reserved
    Bits: 11:0  PauseWaterMark0(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
*/
#define NFP_NBI_MACX_CSR_PAUSE_WATERMARK(_x)                 (0x000000cc + (0x4 * ((_x) & 0x3f)))
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_RESV1(_x)         (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_RESV1_of(_x)      (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_WM1(_x)           (((_x) & 0xfff) << 16)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_WM1_of(_x)        (((_x) >> 16) & 0xfff)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_RESV0(_x)         (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_RESV0_of(_x)      (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_WM0(_x)           (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_PAUSE_WATERMARK_WM0_of(_x)        (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRw - Indirect Read Access to Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(rw) - Read/Write address to buffer-counter array
    Bits: 23:22 Rfu2(rw) - Reserved for Use2.
    Bits: 21    CounterRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register.
    Bits: 20:0  Rfu(rw) - Reserved for Use.
*/
#define NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW         0x000001d4
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_ADDR(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_ADDR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_RFU2(_x) (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_RFU2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_RD_BUSY BIT(21)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_RFU(_x) (((_x) & 0x1fffff) << 0)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RW_RFU_of(_x) (((_x) >> 0) & 0x1fffff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRdData - Indirect Read Return Data for per-Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(ro) - Read/Write address to buffer-counter array
    Bits: 21    BufferCounterRdDataValid(ro) - Set to '1' when read complete and counter rd data is valid. Cleared when next read register is initiated
    Bits: 15:0  CounterRdData(ro) - 16 bit counter read value
*/
#define NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RD         0x000001d8
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RD_ADDR(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RD_ADDR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RD_VALID BIT(21)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RD_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_IG_CHAN_USED_BUF_CREDITS_RD_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgPortPrependEn0 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra0 and ILK0.
  Register: IgPortPrependEn1 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra1 and ILK1.
    Bits: 31:26 Rfu(rw) - Reserved for Use.
    Bits: 25:24 PrependLk(rw) - Ingress Interlaken prepend enable bits.
    Bits: 23:22 PrependEn11(rw) - Ingress port11 prepend enable bits.
    Bits: 21:20 PrependEn10(rw) - Ingress port10 prepend enable bits.
    Bits: 19:18 PrependEn9(rw) - Ingress port9 prepend enable bits.
    Bits: 17:16 PrependEn8(rw) - Ingress port8 prepend enable bits.
    Bits: 15:14 PrependEn7(rw) - Ingress port7 prepend enable bits.
    Bits: 13:12 PrependEn6(rw) - Ingress port6 prepend enable bits.
    Bits: 11:10 PrependEn5(rw) - Ingress port5 prepend enable bits.
    Bits:  9:8  PrependEn4(rw) - Ingress port4 prepend enable bits.
    Bits:  7:6  PrependEn3(rw) - Ingress port3 prepend enable bits.
    Bits:  5:4  PrependEn2(rw) - Ingress port2 prepend enable bits.
    Bits:  3:2  PrependEn1(rw) - Ingress port1 prepend enable bits.
    Bits:  1:0  PrependEn0(rw) - Ingress port0 prepend enable bits.
*/
#define NFP_NBI_MACX_CSR_IG_PREPEND_EN0                      0x000001dc
#define NFP_NBI_MACX_CSR_IG_PREPEND_EN1                      0x000001e0
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_RFU(_x)               (((_x) & 0x3f) << 26)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_RFU_of(_x)            (((_x) >> 26) & 0x3f)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_LK(_x)                (((_x) & 0x3) << 24)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_LK_of(_x)             (((_x) >> 24) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT11(_x)            (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT11_of(_x)         (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT10(_x)            (((_x) & 0x3) << 20)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT10_of(_x)         (((_x) >> 20) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT9(_x)             (((_x) & 0x3) << 18)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT9_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT8(_x)             (((_x) & 0x3) << 16)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT8_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT7(_x)             (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT7_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT6(_x)             (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT6_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT5(_x)             (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT5_of(_x)          (((_x) >> 10) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT4(_x)             (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT4_of(_x)          (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT3(_x)             (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT3_of(_x)          (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT2(_x)             (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT2_of(_x)          (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT1(_x)             (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT1_of(_x)          (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT0(_x)             (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_CSR_IGPREPENDEN_PORT0_of(_x)          (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACX_CSR_IGPREPENDEN_PORT0_OFF           (0)
#define     NFP_NBI_MACX_CSR_IGPREPENDEN_PORT0_CHK           (1)
#define     NFP_NBI_MACX_CSR_IGPREPENDEN_PORT0_TS            (2)
#define     NFP_NBI_MACX_CSR_IGPREPENDEN_PORT0_TS_CHK        (3)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg0 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg0 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch(rw) - VLAN Match Field for parser matching.
*/
#define NFP_NBI_MACX_CSR_EG_VLAN_MATCH_REG0                  0x000001e8
#define NFP_NBI_MACX_CSR_IG_VLAN_MATCH_REG0                  0x000001f0
#define   NFP_NBI_MACX_CSR_VLANMATCHREG_MASK(_x)             (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_CSR_VLANMATCHREG_MASK_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_CSR_VLANMATCHREG_VAL(_x)              (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_VLANMATCHREG_VAL_of(_x)           (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg1 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg1 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask1(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch1(rw) - VLAN Match Field for parser matching.
*/
#define NFP_NBI_MACX_CSR_EG_VLAN_MATCH_REG1                  0x000001ec
#define NFP_NBI_MACX_CSR_IG_VLAN_MATCH_REG1                  0x000001f4
#define   NFP_NBI_MACX_CSR_VLANMATCHREG1_MASK(_x)            (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_CSR_VLANMATCHREG1_MASK_of(_x)         (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_CSR_VLANMATCHREG1_VAL(_x)             (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_VLANMATCHREG1_VAL_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgCmdPrependEn0Lo - Enable bits for egress cmd prepend handling on channels 31-0. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn0Hi - Enable bits for egress cmd prepend handling on channels 63-32. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Lo - Enable bits for egress cmd prepend handling on channels 95-64. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Hi - Enable bits for egress cmd prepend handling on channels 127-96. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
    Bits: 31:0  EgCmdPrependEn(rw) - Egress Per-channel bit that enables the stripping of the 4-byte CMD PREPEND.
*/
#define NFP_NBI_MACX_CSR_EG_CMD_PREPEND_EN0_LO               0x00000200
#define NFP_NBI_MACX_CSR_EG_CMD_PREPEND_EN0_HI               0x00000204
#define NFP_NBI_MACX_CSR_EG_CMD_PREPEND_EN1_LO               0x00000208
#define NFP_NBI_MACX_CSR_EG_CMD_PREPEND_EN1_HI               0x0000020c
#define   NFP_NBI_MACX_CSR_EGCMDPREPENDEN_EG_CMD_PREPEND_EN(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_EGCMDPREPENDEN_EG_CMD_PREPEND_EN_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEgIlkChanAssign - Mac ILK EG Channel Assignment Register.
    Bits: 31:29 Rfu1(rw) - Reserved for Use.
    Bits: 28:22 LkNumChannelsUpper64(rw) - The number of contiguous channels, starting at the base_channel(upper64base of 0 maps to channel 64), Interlaken Core0 or Core1 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits: 21:16 LkBaseChannelUpper64(rw) - Sets the base channel number of the upper 64 channels for Interlaken use. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). A BaseChannel value of 0 maps to physical channel 64
    Bits: 15:13 Rfu0(rw) - Reserved for Use.
    Bits: 12:6  LkNumChannelsLower64(rw) - The number of contiguous channels, starting at the base_channel, Interlaken Core0 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For Core0 ONLY. BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits:  5:0  LkBaseChannelLower64(rw) - Sets the base channel number of the lower 64 channels for Interlaken use. ONLY Core0 can access these channels (0-63).
*/
#define NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN                  0x00000260
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_RFU1(_x)       (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_RFU1_of(_x)    (((_x) >> 29) & 0x7)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_NUM_CHANS_UPPER_64(_x) (((_x) & 0x7f) << 22)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_NUM_CHANS_UPPER_64_of(_x) (((_x) >> 22) & 0x7f)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_BASE_CHAN_UPPER_64(_x) (((_x) & 0x3f) << 16)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_BASE_CHAN_UPPER_64_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_RFU0(_x)       (((_x) & 0x7) << 13)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_RFU0_of(_x)    (((_x) >> 13) & 0x7)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_CHANS_LOWER_64(_x) (((_x) & 0x7f) << 6)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_CHANS_LOWER_64_of(_x) (((_x) >> 6) & 0x7f)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_BASE_CHAN_LOWER_64(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_EG_ILK_CHAN_ASSIGN_BASE_CHAN_LOWER_64_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacEgPortRR - Mac EG Port Round Robin DQ Enable Register.
    Bits: 23:0  EgPortRR(rw) - If set, EG Ethernet Port uses a round-robin DQ versus strict priority for multi-channel ports that are not in PFC mode.
*/
#define NFP_NBI_MACX_CSR_EG_PORT_RR                          0x00000264
#define   NFP_NBI_MACX_CSR_EG_PORT_RR_VAL(_x)                (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_EG_PORT_RR_VAL_of(_x)             (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacOobFcTmCntl - Mac TM OOB control.
    Bits: 31:22 Oob1023To512RFU(rw) - RFU.
    Bits: 21:18 Oob1023To512Mod32M1(rw) - Sets the size of the calendar == ((value + 1) * 32). A value of 0 => 32 channels. 7 => 256, 15 =>512.
    Bits: 17    Oob1023To512MsgEn(rw) - If set, enables OOB FC widget 1 for 13 bit messages.
    Bits: 16    Oob1023To512En(rw) - If set, enables OOB FC widget 1 for queues 512-1023. Uses ILK1 RX OOB pins. Also enables the FC address mux.
    Bits: 15:6  Oob511To0RFU(rw) - RFU.
    Bits:  5:2  Oob511To0Mod32M1(rw) - Sets the size of the calendar == ((value + 1) * 32). A value of 0 => 32 channels. 7 => 256. 15 => 512.
    Bits:  1    Oob511To0MsgEn(rw) - If set, enables OOB FC widget 0 for 13 bit messages.
    Bits:  0    Oob511To0En(rw) - If set, enables OOB FC widget 0 for queues 0-511. Uses ILK0 RX OOB pins. Also enables the FC address mux.
*/
#define NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL                      0x00000268
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_OOB_1023_TO_512_RFU(_x) (((_x) & 0x3ff) << 22)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_OOB_1023_TO_512_RFU_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_1023_TO_512_MOD32_M1(_x) (((_x) & 0xf) << 18)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_1023_TO_512_MOD32_M1_of(_x) (((_x) >> 18) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_1023_TO_512_MSG_EN BIT(17)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_1023_TO_512_EN     BIT(16)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_511_TO_0_RFU(_x)   (((_x) & 0x3ff) << 6)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_511_TO_0_RFU_of(_x) (((_x) >> 6) & 0x3ff)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_511_TO_0_MOD32_M1(_x) (((_x) & 0xf) << 2)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_511_TO_0_MOD32_M1_of(_x) (((_x) >> 2) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_511_TO_0_MSG_EN    BIT(1)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_CNTL_511_TO_0_EN        BIT(0)
/*----------------------------------------------------------------
  Register: MacOobFcTmReMap - Mac TM OOB 1024 vector remap register.
    Bits: 31:28 TmFcAddr7Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 7.
    Bits: 27:24 TmFcAddr6Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 6.
    Bits: 23:20 TmFcAddr5Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 5.
    Bits: 19:16 TmFcAddr4Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 4.
    Bits: 15:12 TmFcAddr3Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 3.
    Bits: 11:8  TmFcAddr2Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 2.
    Bits:  7:4  TmFcAddr1Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 1.
    Bits:  3:0  TmFcAddr0Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 0. (0 = 127:0, 3 = 511:384, etc)
*/
#define NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP                     0x0000026c
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR7(_x)         (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR7_of(_x)      (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR6(_x)         (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR6_of(_x)      (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR5(_x)         (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR5_of(_x)      (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR4(_x)         (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR4_of(_x)      (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR3(_x)         (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR3_of(_x)      (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR2(_x)         (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR2_of(_x)      (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR1(_x)         (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR1_of(_x)      (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR0(_x)         (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_OOB_FC_TM_REMAP_ADDR0_of(_x)      (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEqInh - Mac Rx Enqueue inhibit control.
    Bits: 25    MacEqInhIlk1(rw) - When set, Inhibits ILK1 Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[25] bit when in effect.
    Bits: 24    MacEqInhIlk0(rw) - When set, Inhibits ILK0 Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[24] bit when in effect.
    Bits: 23:0  MacEqInhEthPort(rw) - When set, per-port inhibit of Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[23:0] bits when in effect.
*/
#define NFP_NBI_MACX_CSR_EQ_INH                              0x00000278
#define   NFP_NBI_MACX_CSR_EQ_INH_ILK1                       BIT(25)
#define   NFP_NBI_MACX_CSR_EQ_INH_ILK0                       BIT(24)
#define   NFP_NBI_MACX_CSR_EQ_INH_ETH_PORT(_x)               (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_EQ_INH_ETH_PORT_of(_x)            (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEqInhDone - Mac Rx Enqueue inhibit state.
    Bits: 25    MacEqInhDoneIlk1(ro) - When set, indicates that RX enqueue is stopped for ILK1. Clears when MacEqInhIlk1 is cleared.
    Bits: 24    MacEqInhDoneIlk0(ro) - When set, indicates that RX enqueue is stopped for ILK0. Clears when MacEqInhIlk0 is cleared.
    Bits: 23:0  MacEqInhDoneEthPort(ro) - When set, indicates that RX enqueue is stopped for the associated port. Clears when associated MacEqInhEthPort bit is cleared.
*/
#define NFP_NBI_MACX_CSR_EQ_INH_DONE                         0x0000027c
#define   NFP_NBI_MACX_CSR_EQ_INH_DONE_ILK1                  BIT(25)
#define   NFP_NBI_MACX_CSR_EQ_INH_DONE_ILK0                  BIT(24)
#define   NFP_NBI_MACX_CSR_EQ_INH_DONE_ETH_PORT(_x)          (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_EQ_INH_DONE_ETH_PORT_of(_x)       (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacHy0EthIgPktHeadDropCntrPair[6] - Mac Hydra0 Ethernet Per-port head drop count due to overskid or free buffer underrun.
  Register: MacHy1EthIgPktHeadDropCntrPair[6] - Mac Hydra1 Ethernet Per-port head drop count due to overskid or free buffer underrun.
  Register: MacIlkIgPktHeadDropCntrPair - Mac Interlaken head drop count due to overskid or free buffer underrun.
    Bits: 31:16 MacHeadDropCounter1(ro) - Per-port packet head drops due to overskid and free buffer underrun. Clear on read.
    Bits: 15:0  MacHeadDropCounter0(ro) - Per-port packet head drops due to overskid and free buffer underrun. Clear on read.
*/
#define NFP_NBI_MACX_CSR_ETH0_IG_HEAD_DROP_CNTR_PAIR(_x)     (0x00000280 + (0x4 * ((_x) & 0x7)))
#define NFP_NBI_MACX_CSR_ETH1_IG_HEAD_DROP_CNTR_PAIR(_x)     (0x000002a0 + (0x4 * ((_x) & 0x7)))
#define NFP_NBI_MACX_CSR_ILK_IG_HEAD_DROP_CNTR_PAIR          0x000002b8
#define   NFP_NBI_MACX_CSR_MACHEADDROPCOUNTERS_1(_x)         (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_CSR_MACHEADDROPCOUNTERS_1_of(_x)      (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_CSR_MACHEADDROPCOUNTERS_0(_x)         (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_MACHEADDROPCOUNTERS_0_of(_x)      (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthFifoIfErr0 - Mac Hydra0 Fifo Interface Errors.
  Register: MacEthFifoIfErr1 - Mac Hydra1 Fifo Interface Errors.
    Bits: 24    RemLocFaultSticky(ro) - Clear on read. A set bit indicates a change in the Hydra faults REM_FAULT or LOC_FAULT. Read the associated Hydra registers to identify faulted port.
    Bits: 23:12 EthTxIfOvr(ro) - Clear on read. A set bit indicates an overflow of the associated port transmit Fifo interface.
    Bits: 11:0  EthTxIfUnf(ro) - Clear on read. A set bit indicates an underflow of the associated port transmit Fifo interface.
*/
#define NFP_NBI_MACX_CSR_ETH_FIFO_ERR_0                      0x00000400
#define NFP_NBI_MACX_CSR_ETH_FIFO_ERR_1                      0x00000404
#define   NFP_NBI_MACX_CSR_MACETHFIFOIFERR_REM_LOC_FAULT     BIT(24)
#define   NFP_NBI_MACX_CSR_MACETHFIFOIFERR_TX_IF_OVR(_x)     (((_x) & 0xfff) << 12)
#define   NFP_NBI_MACX_CSR_MACETHFIFOIFERR_TX_IF_OVR_of(_x)  (((_x) >> 12) & 0xfff)
#define   NFP_NBI_MACX_CSR_MACETHFIFOIFERR_TX_IF_UNF(_x)     (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_MACETHFIFOIFERR_TX_IF_UNF_of(_x)  (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthAnStatus0 - Mac Hydra0 AutoNegotiate Status.
  Register: MacEthAnStatus1 - Mac Hydra1 AutoNegotiate Status.
    Bits: 23:12 EthAnInt(ro) - Clear on read. A set bit indicates a new page-received interrupt from the auto-neg logic of the associated port.)
    Bits: 11:0  EthAnDone(ro) - A set bit indicates auto-neg of the associated port has completed.
*/
#define NFP_NBI_MACX_CSR_ETH_AN_STS_0                        0x00000408
#define NFP_NBI_MACX_CSR_ETH_AN_STS_1                        0x0000040c
#define   NFP_NBI_MACX_CSR_MACETHANSTATUS_INT(_x)            (((_x) & 0xfff) << 12)
#define   NFP_NBI_MACX_CSR_MACETHANSTATUS_INT_of(_x)         (((_x) >> 12) & 0xfff)
#define   NFP_NBI_MACX_CSR_MACETHANSTATUS_DONE(_x)           (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_MACETHANSTATUS_DONE_of(_x)        (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacOobFcIlkStatus - Mac RX OOB 512 error status 0 and 1 and LK 0 and 1 interrupts.
    Bits: 19    MacOobFcCrcErr1(ro) - Clear on read. A set bit indicates a CRC error for RX 512 OOB unit 1.)
    Bits: 18    MacOobFcFrmErr1(ro) - Clear on read. A set bit indicates a framing error for RX 512 OOB unit 1.)
    Bits: 17    MacOobFcCrcErr0(ro) - Clear on read. A set bit indicates a CRC error for RX 512 OOB unit 0.)
    Bits: 16    MacOobFcFrmErr0(ro) - Clear on read. A set bit indicates a framing error for RX 512 OOB unit 0.)
    Bits:  7    IlkInt2ndRx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd RX interrupt from the ILK1 .
    Bits:  6    IlkInt2ndTx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd TX interrupt from the ILK1 .
    Bits:  5    IlkIntRx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates RX interrupt from the ILK1 .
    Bits:  4    IlkIntTx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates TX interrupt from the ILK1 .
    Bits:  3    IlkInt2ndRx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd RX interrupt from the ILK0 .
    Bits:  2    IlkInt2ndTx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd TX interrupt from the ILK0 .
    Bits:  1    IlkIntRx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates RX interrupt from the ILK0 .
    Bits:  0    IlkIntTx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates TX interrupt from the ILK0 .
*/
#define NFP_NBI_MACX_CSR_OOB_FC_ILK_STS                      0x00000410
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_MAC_CRC_ERR_1      BIT(19)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_MAC_FRM_ERR_1      BIT(18)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_MAC_CRC_ERR_0      BIT(17)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_MAC_FRM_ERR_0      BIT(16)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_2ND_RX_1   BIT(7)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_2ND_TX_1   BIT(6)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_RX_1       BIT(5)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_TX_1       BIT(4)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_2ND_RX_0   BIT(3)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_2ND_TX_0   BIT(2)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_RX_0       BIT(1)
#define   NFP_NBI_MACX_CSR_OOB_FC_ILK_STS_ILK_INT_TX_0       BIT(0)
/*----------------------------------------------------------------
  Register: MacStatsHalfFullPort0011 - Mac Stats Half Full Alert Port0-11 RX/TX.
  Register: MacStatsHalfFullPort1223 - Mac Stats Half Full Alert Port12-23 RX/TX.
  Register: MacStatsHalfFullChan0063 - Mac Stats Half Full Alert Channel 00-63 RX/TX.
  Register: MacStatsHalfFullChan63127 - Mac Stats Half Full Alert Channel 63-127 RX/TX.
    Bits: 24    TxStatHalfFullVld(ro) - Clear on read. A set bit indicates a Tx stat @TX_STAT_ADDR went half full.)
    Bits: 23:16 TxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
    Bits:  8    RxStatHalfFullVld(ro) - Clear on read. A set bit indicates an Rx stat @RX_STAT_ADDR went half full.)
    Bits:  7:0  RxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
*/
#define NFP_NBI_MACX_CSR_STATS_HALF_FULL_PORT_00_11          0x00000420
#define NFP_NBI_MACX_CSR_STATS_HALF_FULL_PORT_12_23          0x00000424
#define NFP_NBI_MACX_CSR_STATS_HALF_FULL_CHAN_00_63          0x00000428
#define NFP_NBI_MACX_CSR_STATS_HALF_FULL_CHAN_63_127         0x0000042c
#define   NFP_NBI_MACX_CSR_MACSTATSHALFFULL_TX_VALID         BIT(24)
#define   NFP_NBI_MACX_CSR_MACSTATSHALFFULL_TX_ADDR(_x)      (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_CSR_MACSTATSHALFFULL_TX_ADDR_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_CSR_MACSTATSHALFFULL_RX_VALID         BIT(8)
#define   NFP_NBI_MACX_CSR_MACSTATSHALFFULL_RX_ADDR(_x)      (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_MACSTATSHALFFULL_RX_ADDR_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacPcpReMap[24] - PFC support which Remaps PCP for channel compression and channel for untagged.
    Bits: 31:30 PcpReMapRFU(rw) - RFU.
    Bits: 29:24 UntaggedChan(rw) - If PFC mode en, then an UNtagged packet will be directed to this absolute channel. For Hy0 the channels can be 0-63 and for Hy1 0-63 maps to 64-127
    Bits: 23:21 PcpReMap7(rw) - Maps tagged packet with PCP 7 to this value channel delta from the base channel.
    Bits: 20:18 PcpReMap6(rw) - Maps tagged packet with PCP 6 to this value channel delta from the base channel.
    Bits: 17:15 PcpReMap5(rw) - Maps tagged packet with PCP 5 to this value channel delta from the base channel.
    Bits: 14:12 PcpReMap4(rw) - Maps tagged packet with PCP 4 to this value channel delta from the base channel.
    Bits: 11:9  PcpReMap3(rw) - Maps tagged packet with PCP 3 to this value channel delta from the base channel.
    Bits:  8:6  PcpReMap2(rw) - Maps tagged packet with PCP 2 to this value channel delta from the base channel.
    Bits:  5:3  PcpReMap1(rw) - Maps tagged packet with PCP 1 to this value channel delta from the base channel.
    Bits:  2:0  PcpReMap0(rw) - Maps tagged packet with PCP 0 to this value channel delta from the base channel.
*/
#define NFP_NBI_MACX_CSR_PCP_REMAP(_x)                       (0x00000680 + (0x4 * ((_x) & 0x1f)))
#define   NFP_NBI_MACX_CSR_PCP_REMAP_RFU(_x)                 (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_RFU_of(_x)              (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_UNTAGGED(_x)            (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_UNTAGGED_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_7(_x)                   (((_x) & 0x7) << 21)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_7_of(_x)                (((_x) >> 21) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_6(_x)                   (((_x) & 0x7) << 18)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_6_of(_x)                (((_x) >> 18) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_5(_x)                   (((_x) & 0x7) << 15)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_5_of(_x)                (((_x) >> 15) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_4(_x)                   (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_4_of(_x)                (((_x) >> 12) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_3(_x)                   (((_x) & 0x7) << 9)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_3_of(_x)                (((_x) >> 9) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_2(_x)                   (((_x) & 0x7) << 6)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_2_of(_x)                (((_x) >> 6) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_1(_x)                   (((_x) & 0x7) << 3)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_1_of(_x)                (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_0(_x)                   (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_CSR_PCP_REMAP_0_of(_x)                (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacPortHwm[12] - Port HWMs and Skid before dropping for ports 2n+1 and 2n.
    Bits: 31:27 PortDropDelta1(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 26:16 PortHwm1(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
    Bits: 15:11 PortDropDelta0(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 10:0  PortHwm0(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
*/
#define NFP_NBI_MACX_CSR_PORT_HWM(_x)                        (0x00000700 + (0x4 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_CSR_PORT_HWM_DROP_DELTA1(_x)          (((_x) & 0x1f) << 27)
#define   NFP_NBI_MACX_CSR_PORT_HWM_DROP_DELTA1_of(_x)       (((_x) >> 27) & 0x1f)
#define   NFP_NBI_MACX_CSR_PORT_HWM_HWM1(_x)                 (((_x) & 0x7ff) << 16)
#define   NFP_NBI_MACX_CSR_PORT_HWM_HWM1_of(_x)              (((_x) >> 16) & 0x7ff)
#define   NFP_NBI_MACX_CSR_PORT_HWM_DROP_DELTA0(_x)          (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_CSR_PORT_HWM_DROP_DELTA0_of(_x)       (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_CSR_PORT_HWM_HWM0(_x)                 (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_PORT_HWM_HWM0_of(_x)              (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacPortHwmLk1Lk0 - Port HWMs and Skid before dropping for LK1 and LK0.
    Bits: 31:27 PortDropDelta1(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 26:16 PortHwm1(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
    Bits: 15:11 PortDropDelta0(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 10:0  PortHwm0(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
*/
#define NFP_NBI_MACX_CSR_PORT_HWM_ILK                        0x00000730
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_DROP_DELTA1(_x)      (((_x) & 0x1f) << 27)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_DROP_DELTA1_of(_x)   (((_x) >> 27) & 0x1f)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_HWM1(_x)             (((_x) & 0x7ff) << 16)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_HWM1_of(_x)          (((_x) >> 16) & 0x7ff)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_DROP_DELTA0(_x)      (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_DROP_DELTA0_of(_x)   (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_HWM0(_x)             (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_PORT_HWM_ILK_HWM0_of(_x)          (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdData - Mac read return data for Egress linklist memory.
  Register: IgLnkLstRdData - Mac read return data for Igress linklist memory.
    Bits: 29:18 LLRdOffsetAddr(ro) - Read offset Address to linklist membus
    Bits: 17    LLRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits: 15:0  LLRdData(ro) - 16 bit read data from linklist memory
*/
#define NFP_NBI_MACX_CSR_EG_LL_RDDATA                        0x000007b0
#define NFP_NBI_MACX_CSR_IG_LL_RDDATA                        0x000007b4
#define   NFP_NBI_MACX_CSR_LLMEMRDDATA_OFF(_x)               (((_x) & 0xfff) << 18)
#define   NFP_NBI_MACX_CSR_LLMEMRDDATA_OFF_of(_x)            (((_x) >> 18) & 0xfff)
#define   NFP_NBI_MACX_CSR_LLMEMRDDATA_VALID                 BIT(17)
#define   NFP_NBI_MACX_CSR_LLMEMRDDATA_DATA(_x)              (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_LLMEMRDDATA_DATA_of(_x)           (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdWr - Mac Read/Write port to Egress link list memory
  Register: IgLnkLstRdWr - Mac Read/Write port to Ingress link list memory
    Bits: 31:30 Rfu(rw) - Reserved for Use.
    Bits: 29:18 LLOffsetAddr(rw) - Read/Write offset Address to linklist membus
    Bits: 17    LLRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 16    LLWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 15:0  LLWrData(rw) - 16 bit write data to LinkList. 10 bits for EG, 11 for IG.
*/
#define NFP_NBI_MACX_CSR_EG_LL_RDWR                          0x000007b8
#define NFP_NBI_MACX_CSR_IG_LL_RDWR                          0x000007bc
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_RFU(_x)                 (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_RFU_of(_x)              (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_OFF(_x)                 (((_x) & 0xfff) << 18)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_OFF_of(_x)              (((_x) >> 18) & 0xfff)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_RD_BUSY                 BIT(17)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_WR_BUSY                 BIT(16)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_WR_DATA(_x)             (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_LLMEMRDWR_WR_DATA_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: SerDes4RdWr03To00 - Mac Write port to serdes lanes 3 to 0.
  Register: SerDes4RdWr07To04 - Mac Write port to serdes lanes 7 to 4.
  Register: SerDes4RdWr11To08 - Mac Write port to serdes lanes 11 to 8.
  Register: SerDes4RdWr15To12 - Mac Write port to serdes lanes 15 to 12.
  Register: SerDes4RdWr19To16 - Mac Write port to serdes lanes 19 to 16.
  Register: SerDes4RdWr23To20 - Mac Write port to serdes lanes 23 to 20.
    Bits: 31:29 SerDesPageAddr(rw) - Read/Write page address to serdes membus
    Bits: 28    SerDesPcsPmaSel(rw) - Write to 1 to select PCS Registers. Write to 0 to select PMA registers. PageAddr and OffsetAddr bits will index into the PCS or PMA register sets depending on the state of this bit.
    Bits: 27:16 SerDesOffsetAddr(rw) - Read/Write offset Address to serdes membus
    Bits: 15:10 Rfu(rw) - Reserved for Use.
    Bits:  9    SerDesRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits:  8    SerDesWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits:  7:0  SerDesWrData(rw) - 8 bit write data to SerDes. Dont care for a read op.
*/
#define NFP_NBI_MACX_CSR_SERDES4_RDWR_03_00                  0x000007c0
#define NFP_NBI_MACX_CSR_SERDES4_RDWR_07_04                  0x000007c4
#define NFP_NBI_MACX_CSR_SERDES4_RDWR_11_08                  0x000007c8
#define NFP_NBI_MACX_CSR_SERDES4_RDWR_15_12                  0x000007cc
#define NFP_NBI_MACX_CSR_SERDES4_RDWR_19_16                  0x000007d0
#define NFP_NBI_MACX_CSR_SERDES4_RDWR_23_20                  0x000007d4
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR(_x)         (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_of(_x)      (((_x) >> 29) & 0x7)
#define     NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_LANE0     (0)
#define     NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_LANE1     (1)
#define     NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_LANE2     (2)
#define     NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_LANE3     (3)
#define     NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_COMMON    (4)
#define     NFP_NBI_MACX_CSR_SERDES4RDWR_PAGE_ADDR_ALL       (7)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_PCS_PMA               BIT(28)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_OFF(_x)               (((_x) & 0xfff) << 16)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_OFF_of(_x)            (((_x) >> 16) & 0xfff)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_RFU(_x)               (((_x) & 0x3f) << 10)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_RFU_of(_x)            (((_x) >> 10) & 0x3f)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_RD_BUSY               BIT(9)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_WR_BUSY               BIT(8)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_WR_DATA(_x)           (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_SERDES4RDWR_WR_DATA_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRW - Ingress DQ DWRR Weights RW Access port.
    Bits: 31:30 TdmMemRdWrRFU1(rw) - RFU1.
    Bits: 29:24 TdmMemRdWrAddr(rw) - Address of 15-bit IG DQ DWRR port credit value to be read or written.(0-25) Hydra0 = 0-11, Hydra1 = 12-23, LK0 = 24, LK1 = 25.
    Bits: 23:22 TdmMemRdWrRFU0(rw) - RFU0.
    Bits: 21    TdmMemRdBusy(rw) - Write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 20    TdmMemWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 19:16 TdmMemUnused(rw) - unused.
    Bits: 15    TdmPortArbEnable(rw) - Set bit to 1 to enable the port for arbitration indexed @ addr TdmMemRdAddr(0-25).
    Bits: 14:0  TdmPortWeightWrData(rw) - 15 bit DWRR credit weight value to be written @ addr TdmMemRdAddr(0-25)
*/
#define NFP_NBI_MACX_CSR_TDM_MEM_RDWR                        0x000007d8
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_RFU1(_x)             (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_RFU1_of(_x)          (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_ADDR(_x)             (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_ADDR_of(_x)          (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_RFU0(_x)             (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_RFU0_of(_x)          (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_RD_BUSY              BIT(21)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_WR_BUSY              BIT(20)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_UNUSED(_x)           (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_UNUSED_of(_x)        (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_PORT_ARB_ENABLE      BIT(15)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_PORT_WEIGHTWR(_x)    (((_x) & 0x7fff) << 0)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDWR_PORT_WEIGHTWR_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDes4RdData03To00 - Mac read return data for serdes lanes 3 to 0.
  Register: SerDes4RdData07To04 - Mac read return data for serdes lanes 7 to 4.
  Register: SerDes4RdData11To08 - Mac read return data for serdes lanes 11 to 8.
  Register: SerDes4RdData15To12 - Mac read return data for serdes lanes 15 to 12.
  Register: SerDes4RdData19To16 - Mac read return data for serdes lanes 19 to 16.
  Register: SerDes4RdData23To20 - Mac read return data for serdes lanes 23 to 20.
    Bits: 31:29 SerDesRdPageAddr(ro) - Read page address to serdes membus
    Bits: 28:16 SerDesRdOffsetAddr(ro) - Read offset Address to serdes membus
    Bits:  9    SerDesRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits:  7:0  SerDesRdData(ro) - 8 bit read data from SerDes
*/
#define NFP_NBI_MACX_CSR_SERDES4_RDDATA_03_00                0x000007e0
#define NFP_NBI_MACX_CSR_SERDES4_RDDATA_07_04                0x000007e4
#define NFP_NBI_MACX_CSR_SERDES4_RDDATA_11_08                0x000007e8
#define NFP_NBI_MACX_CSR_SERDES4_RDDATA_15_12                0x000007ec
#define NFP_NBI_MACX_CSR_SERDES4_RDDATA_19_16                0x000007f0
#define NFP_NBI_MACX_CSR_SERDES4_RDDATA_23_20                0x000007f4
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR(_x)       (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_of(_x)    (((_x) >> 29) & 0x7)
#define     NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_LANE0   (0)
#define     NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_LANE1   (1)
#define     NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_LANE2   (2)
#define     NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_LANE3   (3)
#define     NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_COMMON  (4)
#define     NFP_NBI_MACX_CSR_SERDES4RDDATA_PAGE_ADDR_ALL     (7)
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_OFF(_x)             (((_x) & 0x1fff) << 16)
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_OFF_of(_x)          (((_x) >> 16) & 0x1fff)
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_VALID               BIT(9)
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_DATA(_x)            (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_SERDES4RDDATA_DATA_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRdData - IG DQ DWRR Weights read return data.
    Bits: 29:24 TdmMemRdAddr(ro) - Read address of last read to IG DQ TDM enry memory. Sets when read is initiated.
    Bits: 21    TdmMemRdDataValid(ro) - Sets to '1' when a read completes, cleared when the next read initiated.
    Bits: 19:16 TdmPortUnusedRdRet(ro) - 5 bit unused.
    Bits: 15    TdmPortArbEnable(ro) - If bit to 1, port enabled for arbitration indexed by @ addr TdmMemRdAddr.
    Bits: 14:0  TdmPortWeightRdData(ro) - 15 bit DWRR port credit init value @ addr TdmMemRdAddr
*/
#define NFP_NBI_MACX_CSR_TDM_MEM_RDDATA                      0x000007f8
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_ADDR(_x)           (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_ADDR_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_VALID              BIT(21)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_UNUSED_RET(_x)     (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_UNUSED_RET_of(_x)  (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_PORT_ARB_ENABLE    BIT(15)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_PORT_WEIGHTRD(_x)  (((_x) & 0x7fff) << 0)
#define   NFP_NBI_MACX_CSR_TDM_MEM_RDDATA_PORT_WEIGHTRD_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDesPdRx - SerDes per-lane RX Power Down - active low.
  Register: SerDesPdTx - SerDes per-lane TX Power Down - active low.
    Bits: 23:0  SerDesLanePowerDown(rw) - Active Low. Per-Lane PowerDown of RX or TX logic.
*/
#define NFP_NBI_MACX_CSR_SERDES_PD_RX                        0x00000800
#define NFP_NBI_MACX_CSR_SERDES_PD_TX                        0x00000804
#define   NFP_NBI_MACX_CSR_SERDESPDLN_VAL(_x)                (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SERDESPDLN_VAL_of(_x)             (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesPdSy - SerDes per-macro Synth Power Down - active low.
    Bits:  5:0  SerDesSynthPowerDown(rw) - Active Low. Per-macro PowerDown of Synth logic.
*/
#define NFP_NBI_MACX_CSR_SERDES_PD_SY                        0x00000808
#define   NFP_NBI_MACX_CSR_SERDES_PD_SY_VAL(_x)              (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_SERDES_PD_SY_VAL_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCkMuxSel - SerDes clock mux select.
    Bits: 31:30 SerDesCkMuxSel_RFU(rw) - A0-reserved. B0: Bit31=1 sets SerDes Lanes23-12 to transmit using the recovered clock when in Local Clock mode. Bit30=1 sets SerDes Lanes11-00 to transmit using the recovered clock when in Local Clock mode. Required for mixed 10G/1G operation within the same 4 lane SerDes macro
    Bits: 29    SerDesCkMuxSelGang2320(rw) - Mux selector for gang clocking lanes 23-20. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 28    SerDesCkMuxSelL23(rw) - Mux selector for lane23 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 27    SerDesCkMuxSelL22(rw) - Mux selector for lane22 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 26    SerDesCkMuxSelL21(rw) - Mux selector for lane21 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 25    SerDesCkMuxSelL20(rw) - Mux selector for lane20 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 24    SerDesCkMuxSelGang1916(rw) - Mux selector for gang clocking lanes 19-16. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 23    SerDesCkMuxSelL19(rw) - Mux selector for lane19 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 22    SerDesCkMuxSelL18(rw) - Mux selector for lane18 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 21    SerDesCkMuxSelL17(rw) - Mux selector for lane17 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 20    SerDesCkMuxSelL16(rw) - Mux selector for lane16 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 19    SerDesCkMuxSelGang1512(rw) - Mux selector for gang clocking lanes 15-12. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 18    SerDesCkMuxSelL15(rw) - Mux selector for lane15 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 17    SerDesCkMuxSelL14(rw) - Mux selector for lane14 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 16    SerDesCkMuxSelL13(rw) - Mux selector for lane13 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 15    SerDesCkMuxSelL12(rw) - Mux selector for lane12 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 14    SerDesCkMuxSelGang1108(rw) - Mux selector for gang clocking lanes 11-8. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 13    SerDesCkMuxSelL11(rw) - Mux selector for lane11 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 12    SerDesCkMuxSelL10(rw) - Mux selector for lane10 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 11    SerDesCkMuxSelL09(rw) - Mux selector for lane9 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 10    SerDesCkMuxSelL08(rw) - Mux selector for lane8 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  9    SerDesCkMuxSelGang0704(rw) - Mux selector for gang clocking lanes 7-4. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits:  8    SerDesCkMuxSelL07(rw) - Mux selector for lane7 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  7    SerDesCkMuxSelL06(rw) - Mux selector for lane6 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  6    SerDesCkMuxSelL05(rw) - Mux selector for lane5 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  5    SerDesCkMuxSelL04(rw) - Mux selector for lane4 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  4    SerDesCkMuxSelGang0300(rw) - Mux selector for gang clocking lanes 3-0. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits:  3    SerDesCkMuxSelL03(rw) - Mux selector for lane3 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  2    SerDesCkMuxSelL02(rw) - Mux selector for lane2 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  1    SerDesCkMuxSelL01(rw) - Mux selector for lane1 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  0    SerDesCkMuxSelL00(rw) - Mux selector for lane0 clocking. Asserted selects gang clock. Zero selects self-clock.
*/
#define NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL                   0x0000080c
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_RFU(_x)         (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_RFU_of(_x)      (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_GANG_2320       BIT(29)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE23          BIT(28)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE22          BIT(27)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE21          BIT(26)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE20          BIT(25)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_1916            BIT(24)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE19          BIT(23)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE18          BIT(22)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE17          BIT(21)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE16          BIT(20)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_GANG_1512       BIT(19)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE15          BIT(18)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE14          BIT(17)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE13          BIT(16)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE12          BIT(15)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_GANG_1108       BIT(14)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE11          BIT(13)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE10          BIT(12)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE9           BIT(11)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE8           BIT(10)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_GANG_0704       BIT(9)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE7           BIT(8)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE6           BIT(7)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE5           BIT(6)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE4           BIT(5)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_GANG_0300       BIT(4)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE3           BIT(3)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE2           BIT(2)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE1           BIT(1)
#define   NFP_NBI_MACX_CSR_SERDES_CK_MUX_SEL_LANE0           BIT(0)
/*----------------------------------------------------------------
  Register: SerDesSigDetect - SerDes per-lane Signal Detect.
    Bits: 23:0  SerDesLaneSigDetect(ro) - Active Hi when Serdes detects a signal(per lane).
*/
#define NFP_NBI_MACX_CSR_SERDES_SIG_DETECT                   0x00000810
#define   NFP_NBI_MACX_CSR_SERDES_SIG_DETECT_VAL(_x)         (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SERDES_SIG_DETECT_VAL_of(_x)      (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesSigDetectOvr - SerDes per-lane Signal Detect Override.
    Bits: 23:0  SerDesLaneSigDetectOvr(rw) - Override for SigDETECT from the serdes. Deasserts the PHY_LOS to the Ethernet MAC.
*/
#define NFP_NBI_MACX_CSR_SERDES_SIG_DETECT_OVR               0x00000814
#define   NFP_NBI_MACX_CSR_SERDES_SIG_DETECT_OVR_VAL(_x)     (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SERDES_SIG_DETECT_OVR_VAL_of(_x)  (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesEthRxActDetect - SerDes per-port Rx activity detect.
  Register: SerDesEthTxActDetect - SerDes per-port Tx activity detect.
    Bits: 23:0  SerDesPortActDetect(ro) - Active Hi when Activity on a port. Clear on Read
*/
#define NFP_NBI_MACX_CSR_SERDES_ETH_RX_ACT_DETECT            0x00000818
#define NFP_NBI_MACX_CSR_SERDES_ETH_TX_ACT_DETECT            0x0000081c
#define   NFP_NBI_MACX_CSR_SERDESACTDETECT_VAL(_x)           (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SERDESACTDETECT_VAL_of(_x)        (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesLinkUp - SerDes Link Up. A '1' indicates the Lane is Block-Locked or comma-sync'd, depending on mode. For a multi-lane port, all associated lanes must be block-locked AND aligned. These bits are just an indication of block_lock.
    Bits: 23:0  SerDesLInkUp(ro) - Active Hi when Serdes link up state occurs(per lane) as indicated by the EthMAC.
*/
#define NFP_NBI_MACX_CSR_SERDES_LINK_UP                      0x00000820
#define   NFP_NBI_MACX_CSR_SERDES_LINK_UP_VAL(_x)            (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SERDES_LINK_UP_VAL_of(_x)         (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: ParityErrInject - Setting a bit in this register will force a 1-shot error to be written into the parity field of the corresponding memory on the next write. To re-set the 1-shot, write the register to 0.
    Bits:  5    InjectIgParErrDescMem(rw) - Write a 1 to inject an error to IG descriptor memory.
    Bits:  4    InjectIgParErrTsmpMem(rw) - Write a 1 to inject an error to IG timestamp memory.
    Bits:  3    InjectIgParErrRsltMem(rw) - Write a 1 to inject an error to IG parse result memory.
    Bits:  2    InjectEgParErrDescMem(rw) - Write a 1 to inject an error to EG descriptor memory.
    Bits:  1    InjectEgParErrRslt1Mem(rw) - Write a 1 to inject an error to EG parse result1 memory.
    Bits:  0    InjectEgParErrRslt0Mem(rw) - Write a 1 to inject an error to EG parse result0 memory.
*/
#define NFP_NBI_MACX_CSR_PARITY_ERR_INJECT                   0x00000824
#define   NFP_NBI_MACX_CSR_PARITY_ERR_INJECT_IG_DESC_MEM     BIT(5)
#define   NFP_NBI_MACX_CSR_PARITY_ERR_INJECT_IG_TSMP_MEM     BIT(4)
#define   NFP_NBI_MACX_CSR_PARITY_ERR_INJECT_IG_RSLT_MEM     BIT(3)
#define   NFP_NBI_MACX_CSR_PARITY_ERR_INJECT_EG_DESC_MEM     BIT(2)
#define   NFP_NBI_MACX_CSR_PARITY_ERR_INJECT_EG_RSLT1_MEM    BIT(1)
#define   NFP_NBI_MACX_CSR_PARITY_ERR_INJECT_EG_RSLT0_MEM    BIT(0)
/*----------------------------------------------------------------
  Register: IgParityErrStatus - Ingress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 14:12 IgParErrType(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt_mem. 010=timestamp_mem, 100=desc_mem.
    Bits: 10:0  IgParErrAddr(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP_NBI_MACX_CSR_IG_PARITY_ERR_STATUS                0x00000840
#define   NFP_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_TYPE(_x)     (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_TYPE_of(_x)  (((_x) >> 12) & 0x7)
#define   NFP_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_ADDR(_x)     (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_ADDR_of(_x)  (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgParityErrStatus - Egress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 30:28 EgParErrType1(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits: 25:16 EgParErrAddr1(ro) - Address of parity error in memory indicated by a non-zero type field.
    Bits: 14:12 EgParErrType0(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits:  9:0  EgParErrAddr0(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS                0x00000844
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_TYPE1(_x)    (((_x) & 0x7) << 28)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_TYPE1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_ADDR1(_x)    (((_x) & 0x3ff) << 16)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_ADDR1_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_TYPE0(_x)    (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_TYPE0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_ADDR0(_x)    (((_x) & 0x3ff) << 0)
#define   NFP_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_ADDR0_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MemErrDropCounts - Packet drop counts due to Mem read errors. Clear on read. Each counter saturates at 255.
    Bits: 31:24 IgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 23:16 IgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 15:8  EgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits:  7:0  EgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
*/
#define NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS                 0x00000848
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_1(_x)      (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_1_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_0(_x)      (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_0_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_1(_x)      (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_1_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_0(_x)      (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_0_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: AssertConfig0 - Assert config reg 0.
    Bits: 31:0  AssertConfigCsr0(rw) - Assertion Config Register0: disable assertion 31:0.
*/
#define NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR0                  0x0000084c
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR0_ASSERT_CONFIG_CSR0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR0_ASSERT_CONFIG_CSR0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: AssertConfig1 - Assert config reg 1.
    Bits: 31:18 AssertConfigCsr1Disable(rw) - Assertion Config Register1: disable assertion 45:32.
    Bits: 17    AssertConfigCsr1EnaFsm1(rw) - Assertion Config Register1: enable FSM1.
    Bits: 16    AssertConfigCsr1EnaFsm0(rw) - Assertion Config Register1: enable FSM0.
    Bits: 15:8  AssertConfigCsr1FsmCfg1(rw) - Assertion Config Register1: FSM config1.
    Bits:  7:0  AssertConfigCsr1FsmCfg0(rw) - Assertion Config Register1: FSM config0.
*/
#define NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1                  0x00000850
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_DISABLE(_x)    (((_x) & 0x3fff) << 18)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_DISABLE_of(_x) (((_x) >> 18) & 0x3fff)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_FSM1           BIT(17)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_FSM0           BIT(16)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_FSM_CFG1(_x)   (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_FSM_CFG1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_FSM_CFG0(_x)   (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_FSM_CFG0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxInfo - Interlaken Mac TX Core Info
  Register: LkRxInfo - Interlaken Mac RX Core Info
    Bits: 31:24 LkMaxChan(ro) - The value of SLE_MAX_CHAN that is set in the rtl defines. This sets the number of per channel statistics counters that are kept.
    Bits: 23:14 LkMaxCal(ro) - The value of SLE_MAX_CAL that is set in the rtl defines.
    Bits: 13:8  LkMaxSerDes(ro) - The value of SLE_MAX_SERDES that is set in the rtl defines. This sets the maximum depth of programmable calculator that will be supported.
    Bits:  7:4  LkMajorRev(ro) - Indicates the major version of the SLE Interlaken RTL.
    Bits:  3:0  LkMinorRev(ro) - Indicates the minor version of the SLE Interlaken RTL.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_INFO                      0x00000000
#define NFP_NBI_MACX_ILK_INTLKN_RX_INFO                      0x00000200
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CHANNEL(_x)     (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CHANNEL_of(_x)  (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CALENDAR(_x)    (((_x) & 0x3ff) << 14)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CALENDAR_of(_x) (((_x) >> 14) & 0x3ff)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAX_SERDES(_x)      (((_x) & 0x3f) << 8)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAX_SERDES_of(_x)   (((_x) >> 8) & 0x3f)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAJOR_REV(_x)       (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MAJOR_REV_of(_x)    (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MINOR_REV(_x)       (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_LKINFO_INTLKN_MINOR_REV_of(_x)    (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxInfo2 - Interlaken Mac TX Core Info2
    Bits:  7:0  LkTxFifoDepth(ro) - The value of SLE_TX_FIFO_DEPTH that is set in the rtl defines.
*/
#define NFP_NBI_MACX_ILK_INTLKN_INFO2                        0x00000004
#define   NFP_NBI_MACX_ILK_INTLKN_INFO2_INTLKN_TX_FIFO_DEPTH(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_INFO2_INTLKN_TX_FIFO_DEPTH_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxLaneDisable - Interlaken Mac TX Core Lane Disable
  Register: LkRxLaneDisable - Interlaken Mac RX Core Lane Disable
    Bits: 23:0  LkLaneDisable(rw) - When set to 1, the logic driving the corresponding serdes lane is disabled. When set to 0, the logic for the corresponding serdes lane is enabled, if it exists.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_LANE_DISABLE              0x00000008
#define NFP_NBI_MACX_ILK_INTLKN_RX_LANE_DISABLE              0x00000208
#define   NFP_NBI_MACX_ILK_LKLANEDISABLE_INTLKN_LANE_DISABLE(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKLANEDISABLE_INTLKN_LANE_DISABLE_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxConfig - Interlaken Mac TX Core Config
  Register: LkRxConfig - Interlaken Mac RX Core Config
    Bits: 19    LkUser1(rw) - Unused, must be zero.
    Bits: 18    LkLookAside2Chan(rw) - Select number of channels for lookaside mode. A value of 1 selects 2 channels, a value of 0 selects 4 channels.
    Bits: 17    LkLookAsideMode(rw) - Select lookaside mode when set to 1, else standard mode.
    Bits: 16    LkUser0(rw) - Unused, must be zero.
    Bits: 15    LkFcRxToTxLb(rw) - Enable rx-to-tx loopback on the out-of-band flow control path (internal flow control loopback).
    Bits: 14    LkDataRxToTxLb(rw) - Enable rx-to-tx loopback data path (external data loopback).
    Bits: 13    LkFcTxToRxLb(rw) - Enable tx-to-rx loopback on the out-of-band flow control path (external flow control loopback).
    Bits: 12    LkDataTxToRxLb(rw) - Enable tx-to-rx loopback data path (internal data loopback).
    Bits:  9:8  LkMemWait(rw) - The number of wait states to assume when accessing the memory for the statistics counters. 0= Read data on the cycle following read enable/address 1= Read data two cycles after read eanble/address.
    Bits:  7    LkOutBandEn(rw) - When set to 1, out-of-band flow control is enabled.INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  6    LkInBandEn(rw) - When set to 1, the inband flow control is enabled. INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  5    LkMultExt(rw) - When set to 1, the multiple-use field is used for external use (given by the i_tx_multiple_use[7:0] input). The state of o_rx_chanext_use would be at an unknown state.
    Bits:  4    LkMultCh(rw) - When set to 1, the multiple-use field is used for channel number extention given by the i_tx_chanext input. The state of o_rx_multi_use would be at an unknown state.
    Bits:  3    LkMultFc(rw) - When set to 1, the multiple-use field is for flow control extention. If more than one of the MULT_EXT, MULT_CH, and MULT_FC, are enabled the multipe_use field and o_rx_chanext are undefined.
    Bits:  1    LkScramDis(rw) - When 1, the scrambler of the 64/67 code is disabled. See the Miscellaneous Notes section of the User's Guide.
    Bits:  0    LkSkipDis(rw) - In the TX, when set to 1, the generation of skip words in the metaframe is disabled. In the RX, this bit has no function.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_CONFIG                    0x00000010
#define NFP_NBI_MACX_ILK_INTLKN_RX_CONFIG                    0x00000210
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_USER1             BIT(19)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_LA_2CHAN          BIT(18)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_LA_MODE           BIT(17)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_USER0             BIT(16)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_OOB_FC_RX2TX_LB   BIT(15)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_DATA_RX2TX_LB     BIT(14)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_OOB_FC_TX2RX_LB   BIT(13)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_DATA_TX2RX_LB     BIT(12)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_MEM_WAIT(_x)      (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_MEM_WAIT_of(_x)   (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_OOB_EN            BIT(7)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_INBANDEN          BIT(6)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_MULTIUSE_EXT      BIT(5)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_MULTIUSE_CHAN_EXT BIT(4)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_MULTIUSE_FC_EXT   BIT(3)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_SCRAM_DISABLE     BIT(1)
#define   NFP_NBI_MACX_ILK_LKCONFIG_INTLKN_SKIP_DISABLE      BIT(0)
/*----------------------------------------------------------------
  Register: LkTxControl - Interlaken Mac TX Core Control
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL                   0x00000018
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_STATUS_MSG_ENABLE BIT(10)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_DATA_ALL_ZERO BIT(7)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_FC_OOB_ALL_ZERO BIT(6)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_DISPARITY_DISABLE BIT(4)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_CRC24_DISABLE BIT(3)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_CRC32_DISABLE BIT(2)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_UNALIGN_XOFF_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: LkTxFifoConfig - Interlaken Mac TX Core Fifo Config
    Bits: 17    LkTxFifoSingle(rw) - Interlaken TX FIFO Single Parity error inject
    Bits: 16    LkTxFifoInvPar(rw) - Interlaken TX FIFO Parity test function
    Bits: 11:8  LkTxFifoHwm(rw) - Interlaken TX FIFO HWM
    Bits:  3:0  LkTxFifoLwm(rw) - Interlaken TX FIFO LWM
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG                0x00000020
#define   NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_SINGLE BIT(17)
#define   NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_INVPAR BIT(16)
#define   NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_HWM(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_HWM_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_LWM(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_LWM_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkSerDesTxFifoConfig - Interlaken Mac TX Core SerDes Fifo Config
    Bits: 11:8  LkSerDesTxFifoHwm(rw) - Interlaken SerDes TXFIFO HWM
    Bits:  3:0  LkSerDesTxFifoLwm(rw) - Interlaken SerDes TXFIFO LWM
*/
#define NFP_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG         0x00000028
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_HWM(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_HWM_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_LWM(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_LWM_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxBurstConfig - Interlaken Mac TX Core Burst Config
  Register: LkRxBurstConfig - Interlaken Mac RX Core Burst Config
    Bits: 26:24 LkBurstMax(rw) - Interlaken BurstMax
    Bits: 18:16 LkBurstMin(rw) - Interlaken BurstMin
    Bits: 10:8  LkBurstShort(rw) - Interlaken BurstShort
    Bits:  2    LkBurstMaxChkDisable(rw) - Interlaken Burstmax Check Disable
    Bits:  1    LkBurstMinChkDisable(rw) - Interlaken Burstmin Check Disable
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_BURST_CONFIG              0x00000030
#define NFP_NBI_MACX_ILK_INTLKN_RX_BURST_CONFIG              0x00000230
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMAX(_x) (((_x) & 0x7) << 24)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMAX_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMIN(_x) (((_x) & 0x7) << 16)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMIN_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTSHORT(_x) (((_x) & 0x7) << 8)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTSHORT_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMAX_CHECK_DISABLE BIT(2)
#define   NFP_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMIN_CHECK_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: LkTxMetaFrameSyncPeriod - Interlaken Mac TX MetaFrame Sync Period
  Register: LkRxMetaFrameSyncPeriod - Interlaken Mac RX MetaFrame Sync Period
    Bits: 15:0  LkMetaFrameSyncPeriod(rw) - Interlaken MetFrame Sync Period
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_METAFRAME_SYNC_PERIOD     0x00000034
#define NFP_NBI_MACX_ILK_INTLKN_RX_METAFRAME_SYNC_PERIOD     0x00000234
#define   NFP_NBI_MACX_ILK_LKMETAFRAMESYNCPERIOD_INTLKN_METAFRAME_SYNC_PERIOD(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LKMETAFRAMESYNCPERIOD_INTLKN_METAFRAME_SYNC_PERIOD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxRateLimit0 - Interlaken TX Rate Limit0
    Bits: 31:16 LkMaxCredits(rw) - Interlaken Rate Limit Max Credits
    Bits: 10:8  LkGranularity(rw) - Interlaken Decrement Granularity
    Bits:  0    LkRateLimitEnable(rw) - Interlaken Rate Limit Enable
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0               0x00000038
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_MAX_CREDITS(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_MAX_CREDITS_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_GRANULARITY(_x) (((_x) & 0x7) << 8)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_GRANULARITY_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_RATE_LIMIT_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: LkTxRateLimit1 - Interlaken TX Rate Limit1
    Bits: 31:16 LkCreditInterval(rw) - Interlaken Rate Limit Credit Interval
    Bits: 15:0  LkCreditDelta(rw) - Interlaken Rate Limit Credit Delta
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1               0x0000003c
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_INTERVAL(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_INTERVAL_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_DELTA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_DELTA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxErrInject0 - Interlaken TX Error Inject0
  Register: LkTxErrInject1 - Interlaken TX Error Inject1
  Register: LkTxErrInject2 - Interlaken TX Error Inject2
  Register: LkTxErrInject3 - Interlaken TX Error Inject3
    Bits: 30:24 LkErrLocation(rw) - Interlaken Bit Err Insertion Location 0-66
    Bits: 20:16 LkErrLane(rw) - Interlaken Lane to inject error
    Bits: 10:8  LkErrType(rw) - Interlaken Word type to inject error
    Bits:  1    LkErrSingle(rw) - Interlaken Error Inject Single
    Bits:  0    LkErrEnable(rw) - Interlaken Error Inject Enable
*/
#define NFP_NBI_MACX_ILK_INTLKN_ERR_INJECT0                  0x00000050
#define NFP_NBI_MACX_ILK_INTLKN_ERR_INJECT1                  0x00000054
#define NFP_NBI_MACX_ILK_INTLKN_ERR_INJECT2                  0x00000058
#define NFP_NBI_MACX_ILK_INTLKN_ERR_INJECT3                  0x0000005c
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LOCATION(_x) (((_x) & 0x7f) << 24)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LOCATION_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LANE(_x) (((_x) & 0x1f) << 16)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LANE_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_TYPE(_x) (((_x) & 0x7) << 8)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_TYPE_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_SINGLE   BIT(1)
#define   NFP_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_ENABLE   BIT(0)
/*----------------------------------------------------------------
  Register: LkTxStatsAcc - Interlaken TX Statistics Counter Access
  Register: LkRxStatsAcc - Interlaken RX Statistics Counter Access
    Bits: 19:16 LkStatsAccType(rw) - Most of the counter type names match exactly with the recommended statistics from the Interlaken Protocol Definition. For TX counter types: 0x0 = TX_Packets, TX_Bytes, and TX_Bad_Packets, ADDR field indicates which channel number; 0x1 = RX_FC_Error. The number of out of band Flow Control Errors, either framing or CRC4 errors. All others: unused. For Rx counter types:
    Bits:  7:0  LkStatsAccAddr(rw) - When LkStatsAccType field = 0000 then LkStatsAccAddr[7:0] represent channel number. All other combinations of LkStatsAccType does not represent anything and therefore should be set to zeros.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_ACC                 0x00000074
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_ACC                 0x00000274
#define   NFP_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_TYPE(_x)  (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_TYPE_of(_x) (((_x) >> 16) & 0xf)
#define     NFP_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_TYPE_UNUSED (11)
#define   NFP_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_ADDR(_x)  (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsFill - Interlaken TX Statistics Counter Fill
  Register: LkRxStatsFill - Interlaken RX Statistics Counter Fill
    Bits: 31    LkStatsFillBOver(ro) - The Byte counter overflowed and started again from zero.
    Bits: 30    LkStatsFillPOver(ro) - The Packet counter overflowed and started again from zero.
    Bits: 29    LkStatsFillEOver(ro) - The Error counter overflowed and started again from zero.
    Bits: 28    LkStatsFillBHalf(ro) - The Byte counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 27    LkStatsFillPHalf(ro) - The Packet counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 26    LkStatsFillEHalf(ro) - The Err counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 19:16 LkStatsFillType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use this register, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsFillAddr(ro) - The address of a statistics counter that is half full or has overflowed. When in Single Channel Stats mode the return value if the LkStatsFillAddr field will always be zero. NOTE: LkStatsFillAddr is undefined when bits 31-26 are all zeros
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_FILL                0x00000078
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_FILL                0x00000278
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_BOVER   BIT(31)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_POVER   BIT(30)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_EOVER   BIT(29)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_BHALF   BIT(28)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_PHALF   BIT(27)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_EHALF   BIT(26)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_TYPE(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_TYPE_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_ADDR(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsParity - Interlaken TX Statistics Counter Parity
  Register: LkRxStatsParity - Interlaken RX Statistics Counter Parity
    Bits: 31    LkStatsParUncorr(ro) - Specifies whether any of the counters had a parity (or uncorrectable ECC) error.
    Bits: 30    LkStatsParCorr(ro) - Specifies whether any of the counters had a correctable ECC error.
    Bits: 19:16 LkStatsParType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use the parity protected memory, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsParAddr(ro) - The address of a statistics counter that had the error. When in Single Channel Stats mode the return value of the ADDR field will always be zero. NOTE: ADDR is undefined when bits 31-30 are all zeros
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_PARITY              0x0000007c
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_PARITY              0x0000027c
#define   NFP_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_UNCORR BIT(31)
#define   NFP_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_CORR   BIT(30)
#define   NFP_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_TYPE(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_TYPE_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_ADDR(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteHi - Interlaken TX Statistics Write Byte Counter High
  Register: LkRxStatsWrByteHi - Interlaken RX Statistics Write Byte Counter High
    Bits: 23:0  LkStatsWrByteHiWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_BYTE_HIGH     0x00000080
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_BYTE_HIGH     0x00000280
#define   NFP_NBI_MACX_ILK_LKSTATSWRBYTEHI_LK_STATS_WR_BYTE_HI_WDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRBYTEHI_LK_STATS_WR_BYTE_HI_WDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteLo - Interlaken TX Statistics Write Byte Counter Low
  Register: LkRxStatsWrByteLo - Interlaken RX Statistics Write Byte Counter Low
    Bits: 31:0  LkStatsWrByteLoWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_BYTE_LOW      0x00000084
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_BYTE_LOW      0x00000284
#define   NFP_NBI_MACX_ILK_LKSTATSWRBYTELO_LK_STATS_WR_BYTE_LO_WDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRBYTELO_LK_STATS_WR_BYTE_LO_WDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktHi - Interlaken TX Statistics Write Packet Counter High
  Register: LkRxStatsWrPktHi - Interlaken RX Statistics Write Packet Counter High
    Bits: 15:0  LkStatsWrPktHiWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_PKT_HIGH      0x00000088
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_PKT_HIGH      0x00000288
#define   NFP_NBI_MACX_ILK_LKSTATSWRPKTHI_LK_STATS_WR_PKT_HI_WDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRPKTHI_LK_STATS_WR_PKT_HI_WDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktLo - Interlaken TX Statistics Write Packet Counter Low
  Register: LkRxStatsWrPktLo - Interlaken RX Statistics Write Packet Counter Low
    Bits: 31:0  LkStatsWrPktLoWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_PKT_LOW       0x0000008c
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_PKT_LOW       0x0000028c
#define   NFP_NBI_MACX_ILK_LKSTATSWRPKTLO_LK_STATS_WR_PKT_LO_WDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRPKTLO_LK_STATS_WR_PKT_LO_WDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrHi - Interlaken TX Statistics Write Error Counter High
  Register: LkRxStatsWrErrHi - Interlaken RX Statistics Write Error Counter High
    Bits: 15:0  LkStatsWrErrHiWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_ERR_HIGH      0x00000090
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_ERR_HIGH      0x00000290
#define   NFP_NBI_MACX_ILK_LKSTATSWRERRHI_LK_STATS_WR_ERR_HI_WDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRERRHI_LK_STATS_WR_ERR_HI_WDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrLo - Interlaken TX Statistics Write Error Counter Low
  Register: LkRxStatsWrErrLo - Interlaken RX Statistics Write Error Counter Low
    Bits: 31:0  LkStatsWrErrLoWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_ERR_LOW       0x00000094
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_ERR_LOW       0x00000294
#define   NFP_NBI_MACX_ILK_LKSTATSWRERRLO_LK_STATS_WR_ERR_LO_WDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRERRLO_LK_STATS_WR_ERR_LO_WDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrParity - Interlaken TX Statistics Write Parity
  Register: LkRxStatsWrParity - Interlaken RX Statistics Write Parity
    Bits: 23:0  LkStatsWrParWData(rw) - The parity bits for the write data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_PARITY        0x00000098
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_PARITY        0x00000298
#define   NFP_NBI_MACX_ILK_LKSTATSWRPARITY_LK_STATS_WR_PAR_WDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSWRPARITY_LK_STATS_WR_PAR_WDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteHi - Interlaken TX Statistics Read Byte Counter High
  Register: LkRxStatsRdByteHi - Interlaken RX Statistics Read Byte Counter High
    Bits: 31    LkStatsRdByteHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdByteHiHalf(ro) - The counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 29    LkStatsRdByteHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdByteHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 23:0  LkStatsRdByteHiRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_BYTE_HIGH      0x000000a0
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_BYTE_HIGH      0x000002a0
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_OVER BIT(31)
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_HALF BIT(30)
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_UNCORR BIT(29)
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_CORR BIT(28)
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_RDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_RDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteLo - Interlaken TX Statistics Read Byte Counter Low
  Register: LkRxStatsRdByteLo - Interlaken RX Statistics Read Byte Counter Low
    Bits: 31:0  LkStatsRdByteLoWData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_BYTE_LOW       0x000000a4
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_BYTE_LOW       0x000002a4
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTELO_LK_STATS_RD_BYTE_LO_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDBYTELO_LK_STATS_RD_BYTE_LO_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktHi - Interlaken TX Statistics Read Packet Counter High
  Register: LkRxStatsRdPktHi - Interlaken RX Statistics Read Packet Counter High
    Bits: 31    LkStatsRdPktHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdPktHiHalf(ro) - The counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdPktHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdPktHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdPktHiRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_PKT_HIGH       0x000000a8
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_PKT_HIGH       0x000002a8
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_OVER BIT(31)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_HALF BIT(30)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_UNCORR BIT(29)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_CORR BIT(28)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_RDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_RDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktLo - Interlaken TX Statistics Read Packet Counter Low
  Register: LkRxStatsRdPktLo - Interlaken RX Statistics Read Packet Counter Low
    Bits: 31:0  LkStatsRdPktLoWData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_PKT_LOW        0x000000ac
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_PKT_LOW        0x000002ac
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTLO_LK_STATS_RD_PKT_LO_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPKTLO_LK_STATS_RD_PKT_LO_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrHi - Interlaken TX Statistics Read Error Counter High
  Register: LkRxStatsRdErrHi - Interlaken RX Statistics Read Error Counter High
    Bits: 31    LkStatsRdErrHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdErrHiHalf(ro) - The counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdErrHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdErrHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdErrHiRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_ERR_HIGH       0x000000b0
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_ERR_HIGH       0x000002b0
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_OVER BIT(31)
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_HALF BIT(30)
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_UNCORR BIT(29)
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_CORR BIT(28)
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_RDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_RDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrLo - Interlaken TX Statistics Read Error Counter Low
  Register: LkRxStatsRdErrLo - Interlaken RX Statistics Read Error Counter Low
    Bits: 31:0  LkStatsRdErrLoWData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_ERR_LOW        0x000000b4
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_ERR_LOW        0x000002b4
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRLO_LK_STATS_RD_ERR_LO_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDERRLO_LK_STATS_RD_ERR_LO_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdParity - Interlaken TX Statistics Read Parity
  Register: LkRxStatsRdParity - Interlaken RX Statistics Read Parity
    Bits: 23:0  LkStatsRdParRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATS_READ_PARITY         0x000000b8
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATS_READ_PARITY         0x000002b8
#define   NFP_NBI_MACX_ILK_LKSTATSRDPARITY_LK_STATS_PAR_RDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSTATSRDPARITY_LK_STATS_PAR_RDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxCalEnable - Interlaken TX Calendar Enable
  Register: LkRxCalEnable - Interlaken RX Calendar Enable
    Bits: 18:8  LkCalLast(rw) - Interlaken Calendar Last Entry Number
    Bits:  0    LkCalProgEnable(rw) - Interlaken Programmable Calendar enable
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXCAL_ENABLE                 0x000000c0
#define NFP_NBI_MACX_ILK_INTLKN_RXCAL_ENABLE                 0x000002c0
#define   NFP_NBI_MACX_ILK_LKCALENABLE_INTLKN_CAL_LAST(_x)   (((_x) & 0x7ff) << 8)
#define   NFP_NBI_MACX_ILK_LKCALENABLE_INTLKN_CAL_LAST_of(_x) (((_x) >> 8) & 0x7ff)
#define   NFP_NBI_MACX_ILK_LKCALENABLE_INTLKN_CAL_PROG_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: LkTxCalProgAccess - Interlaken TX Calendar Program Access
  Register: LkRxCalProgAccess - Interlaken RX Calendar Program Access
    Bits: 25:24 LkCalCmd(rw) - Interlaken Calendar Access command
    Bits: 10:0  LkCalAddr(rw) - Interlaken Prog Calendar Access address
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXCAL_PROG_ACCESS            0x000000c8
#define NFP_NBI_MACX_ILK_INTLKN_RXCAL_PROG_ACCESS            0x000002c8
#define   NFP_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_CMD(_x) (((_x) & 0x3) << 24)
#define   NFP_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_CMD_of(_x) (((_x) >> 24) & 0x3)
#define   NFP_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_ADDR(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_ADDR_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgWrData - Interlaken TX Calendar Program write data
  Register: LkRxCalProgWrData - Interlaken RX Calendar Program write data
    Bits:  8:0  LkCalProgWrData(rw) - Interlaken Prog Calendar Write data
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXCAL_PROG_WR_DATA           0x000000d0
#define NFP_NBI_MACX_ILK_INTLKN_RXCAL_PROG_WR_DATA           0x000002d0
#define   NFP_NBI_MACX_ILK_LKCALPROGWRDATA_INTLKN_CAL_PROG_WR_DATA(_x) (((_x) & 0x1ff) << 0)
#define   NFP_NBI_MACX_ILK_LKCALPROGWRDATA_INTLKN_CAL_PROG_WR_DATA_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgRdData - Interlaken TX Calendar Program read data
  Register: LkRxCalProgRdData - Interlaken RX Calendar Program read data
    Bits:  8:0  LkCalProgRdData(ro) - Interlaken Prog Calendar Read data
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXCAL_PROG_RD_DATA           0x000000d8
#define NFP_NBI_MACX_ILK_INTLKN_RXCAL_PROG_RD_DATA           0x000002d8
#define   NFP_NBI_MACX_ILK_LKCALPROGRDDATA_INTLKN_CAL_PROG_RD_DATA(_x) (((_x) & 0x1ff) << 0)
#define   NFP_NBI_MACX_ILK_LKCALPROGRDDATA_INTLKN_CAL_PROG_RD_DATA_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxDebugControl0 - Interlaken TX Debug bus control0
  Register: LkTxDebugControl1 - Interlaken TX Debug bus control1
  Register: LkRxDebugControl0 - Interlaken RX Debug bus control0
  Register: LkRxDebugControl1 - Interlaken RX Debug bus control1
    Bits: 31:30 LkDebugByte3(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[31:24] of the debug output.
    Bits: 29:24 LkDebugBus3(rw) - Interlaken Debug which internal debug busses to use bits[31:24] of the debug output.
    Bits: 23:22 LkDebugByte2(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[23:16] of the debug output.
    Bits: 21:16 LkDebugBus2(rw) - Interlaken Debug which internal debug busses to use bits[23:16] of the debug output.
    Bits: 15:14 LkDebugByte1(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[15:8] of the debug output.
    Bits: 13:8  LkDebugBus1(rw) - Interlaken Debug which internal debug busses to use bits[15:8] of the debug output.
    Bits:  7:6  LkDebugByte0(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[7:0] of the debug output.
    Bits:  5:0  LkDebugBus0(rw) - Interlaken Debug which internal debug busses to use bits[7:0] of the debug output.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_DEBUG_CTL0                0x00000100
#define NFP_NBI_MACX_ILK_INTLKN_TX_DEBUG_CTL1                0x00000104
#define NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_CTL0                0x00000300
#define NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_CTL1                0x00000304
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE3(_x) (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE3_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS3(_x) (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS3_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE2(_x) (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS2(_x) (((_x) & 0x3f) << 16)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS2_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE1(_x) (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE1_of(_x) (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS1(_x) (((_x) & 0x3f) << 8)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS1_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE0(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: LkTxDebugHold0 - Interlaken TX Debug hold control0
  Register: LkTxDebugHold1 - Interlaken TX Debug hold control1
  Register: LkRxDebugHold0 - Interlaken RX Debug hold control0
  Register: LkRxDebugHold1 - Interlaken RX Debug hold control1
    Bits: 31:0  LkDebugHold(rw) - Debug: For each bit that is set to 1, the corresponding bit in the debug output will latch and hold when it sees a high value on the selected debug bit.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_DEBUG_HOLD0               0x00000108
#define NFP_NBI_MACX_ILK_INTLKN_TX_DEBUG_HOLD1               0x0000010c
#define NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_HOLD0               0x00000308
#define NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_HOLD1               0x0000030c
#define   NFP_NBI_MACX_ILK_LKDEBUGHOLD_INTLKN_DEBUG_HOLD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKDEBUGHOLD_INTLKN_DEBUG_HOLD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxDebugObserve0 - Interlaken TX Debug observe data0
  Register: LkTxDebugObserve1 - Interlaken TX Debug observe data1
  Register: LkRxDebugObserve1 - Interlaken RX Debug observe data1
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_DEBUG_OBSERVE0            0x00000110
#define NFP_NBI_MACX_ILK_INTLKN_TX_DEBUG_OBSERVE1            0x00000114
#define NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE1            0x00000314
#define   NFP_NBI_MACX_ILK_LKDEBUGOBSERVE_INTLKN_DEBUG_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKDEBUGOBSERVE_INTLKN_DEBUG_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestControl - Interlaken TX SerDes Test Control
  Register: LkRxSerDesTestControl - Interlaken RX SerDes Test Control
    Bits: 31:24 LkSerDesTestRepC(rw) - The number of times to repeat pattern C when doing programmable pattern. 0 = Disable pattern C.
    Bits: 23:16 LkSerDesTestRepB(rw) - The number of times to repeat pattern B when doing programmable pattern. 0 = Disable pattern B.
    Bits: 15:8  LkSerDesTestRepA(rw) - The number of times to repeat pattern A when doing programmable pattern. 0 = Disable pattern A.
    Bits:  1    LkSerDesTestProgEn(rw) - Enable programmable pattern.
    Bits:  0    LkSerDesTestPrbsEn(rw) - Enable PRBS (Pseudo Random Bit Stream) pattern.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_CONTROL       0x00000120
#define NFP_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_CONTROL       0x00000320
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPC(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPB(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPB_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPA(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_PROG_EN BIT(1)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_PRBS_EN BIT(0)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternA - Interlaken TX SerDes Test Pattern A
  Register: LkRxSerDesTestPatternA - Interlaken RX SerDes Test Pattern A
    Bits: 31:0  LkSerDesTestPatternA(rw) - When doing programmable patterns, this bit pattern is sent REPA times. When doing PRBS, this value programs the desired polynomial. The recommended Interlaken polynomials are programmed as follows: PRBS31 : x^31 + x^28 + 1 : 32'h90000001 (bits 31, 28, and 0 are set) PRBS23 : x^23 + x^18 + 1 : 32'h00840001 (bits 23, 18, and 0 are set) PRBS7 : x^7 + x^6 + 1 : 32'h000000C1 (bits 7, 6, and 0 are set) Other commonly used PRBS polynomials are also supported: PRBS9 : x^9 + x^5 + 1 : 32'h00000221 (bits 9, 5, and 0 are set) PRBS11 : x^11 + x^9 + 1 : 32'h00000A01 (bits 11, 9, and 0 are set) PRBS15 : x^15 + x^14 + 1 : 32'h0000C001 (bits 15, 14, and 0 are set) PRBS29 : x^29 + x^27 + 1 : 32'h28000001 (bits 29, 27, and 0 are set) PRBS polynomials other than those listed above are not guaranteed to be functional as some logic optimizations may have been done to improve the area and performance of the design. When doing PRBS, bit[0] is ignored and assumed to be 1'b1..
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_PATTERN_A     0x00000124
#define NFP_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_PATTERN_A     0x00000324
#define   NFP_NBI_MACX_ILK_LKSERDESTESTPATTERNA_INTLKN_SERDES_TEST_PATTERN_A(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTPATTERNA_INTLKN_SERDES_TEST_PATTERN_A_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternB - Interlaken TX SerDes Test Pattern B
  Register: LkRxSerDesTestPatternB - Interlaken RX SerDes Test Pattern B
    Bits: 31:0  LkSerDesTestPatternB(rw) - When doing programmable patterns, this bit pattern is sent REPB times.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_PATTERN_B     0x00000128
#define NFP_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_PATTERN_B     0x00000328
#define   NFP_NBI_MACX_ILK_LKSERDESTESTPATTERNB_INTLKN_SERDES_TEST_PATTERN_B(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTPATTERNB_INTLKN_SERDES_TEST_PATTERN_B_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternC - Interlaken TX SerDes Test Pattern C
  Register: LkRxSerDesTestPatternC - Interlaken RX SerDes Test Pattern C
    Bits: 31:0  LkSerDesTestPatternC(rw) - When doing programmable patterns, this bit pattern is sent REPC times.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_PATTERN_C     0x0000012c
#define NFP_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_PATTERN_C     0x0000032c
#define   NFP_NBI_MACX_ILK_LKSERDESTESTPATTERNC_INTLKN_SERDES_TEST_PATTERN_C(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LKSERDESTESTPATTERNC_INTLKN_SERDES_TEST_PATTERN_C_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatusMessage - Interlaken TX Status Message Received from OOB
    Bits: 31    LkTxStatusMessageCurrent(ro) - The most recently received calendar included a status message.
    Bits: 30    LkTxStatusMessageValid(ro) - The most recently received status message was valid (no framing or CRC errors). When the most recently received status message was errored due to framing or CRC errors, the SIF and SL bits below are retained from the previous valid status message, if any.
    Bits: 26    LkTxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 24    LkTxStatusMessageSif(ro) - The status bit for the interface as a whole.
    Bits: 23:0  LkTxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG                0x00000140
#define   NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_CURRENT BIT(31)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_VALID BIT(30)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_SYNC BIT(26)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_SIF BIT(24)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_LANES(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_LANES_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap5to0 - Interlaken TX Lane Remapping 5 to 0
  Register: LkRxLaneReMap5to0 - Interlaken RX Lane Remapping 5 to 0
    Bits: 29:25 LkLaneReMap5(rw) - Interlaken Physical Remap for lane 5
    Bits: 24:20 LkLaneReMap4(rw) - Interlaken Physical Remap for lane 4
    Bits: 19:15 LkLaneReMap3(rw) - Interlaken Physical Remap for lane 3
    Bits: 14:10 LkLaneReMap2(rw) - Interlaken Physical Remap for lane 2
    Bits:  9:5  LkLaneReMap1(rw) - Interlaken Physical Remap for lane 1
    Bits:  4:0  LkLaneReMap0(rw) - Interlaken Physical Remap for lane 0
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXLANE_REMAP_5_0             0x00000150
#define NFP_NBI_MACX_ILK_INTLKN_RXLANE_REMAP_5_0             0x00000350
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE5_REMAP(_x) (((_x) & 0x1f) << 25)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE5_REMAP_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE4_REMAP(_x) (((_x) & 0x1f) << 20)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE4_REMAP_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE3_REMAP(_x) (((_x) & 0x1f) << 15)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE3_REMAP_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE2_REMAP(_x) (((_x) & 0x1f) << 10)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE2_REMAP_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE1_REMAP(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE1_REMAP_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE0_REMAP(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE0_REMAP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap11to6 - Interlaken TX Lane Remapping 11 to 6
  Register: LkRxLaneReMap11to6 - Interlaken RX Lane Remapping 11 to 6
    Bits: 29:25 LkLaneReMap11(rw) - Interlaken Physical Remap for lane 11
    Bits: 24:20 LkLaneReMap10(rw) - Interlaken Physical Remap for lane 10
    Bits: 19:15 LkLaneReMap9(rw) - Interlaken Physical Remap for lane 9
    Bits: 14:10 LkLaneReMap8(rw) - Interlaken Physical Remap for lane 8
    Bits:  9:5  LkLaneReMap7(rw) - Interlaken Physical Remap for lane 7
    Bits:  4:0  LkLaneReMap6(rw) - Interlaken Physical Remap for lane 6
*/
#define NFP_NBI_MACX_ILK_INTLKN_TXLANE_REMAP_11_6            0x00000154
#define NFP_NBI_MACX_ILK_INTLKN_RXLANE_REMAP_11_6            0x00000354
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE11_REMAP(_x) (((_x) & 0x1f) << 25)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE11_REMAP_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE10_REMAP(_x) (((_x) & 0x1f) << 20)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE10_REMAP_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE9_REMAP(_x) (((_x) & 0x1f) << 15)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE9_REMAP_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE8_REMAP(_x) (((_x) & 0x1f) << 10)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE8_REMAP_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE7_REMAP(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE7_REMAP_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE6_REMAP(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE6_REMAP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxInterrupt - Interlaken TX Interrupt
  Register: LkTxInterrupt2 - Interlaken TX Interrupt Second
    Bits: 31    LkTxIntFifoUnCorr(rw1c) - The transmitter's input fifo had an uncorrectable parity or ECC error.
    Bits: 30    LkTxIntFifoCorr(rw1c) - The transmitter's input fifo had an correctable ECC error.
    Bits: 29    LkTxIntFifoOver(rw1c) - The transmitter's input fifo overflowed. This should not happen if the high watermark in register SLE_TX_FIFO_CFG is set properly given the latency required for the user to respond to stall.
    Bits: 28    LkTxIntFifoUnder(rw1c) - The transmitter's input fifo went empty not on a burst boundary. To try to prevent Interlaken protocol errors a burst boundary was forced. This condition should not happen if the user sends data in complete bursts and the low watermark in register FIXME is set properly given the latency required for the user to respond to stall.
    Bits: 17    LkTxIntFcErr(rw1c) - An error occurred on the out band flow control (mismatch between calendar length and reset calendar pulse or CRC4 error)..
    Bits: 16    LkTxIntStatusMessageChange(rw1c) - When this interrupt is set, it reports if there is a change in the status that is part of the out-of-band flow control. Then STATUS_MSG_CHANGE interrupt sets if there is a change in any bit of register 0x140 : TX Status Message Received.
    Bits: 15    LkTxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error. Each channel in the design has a flag that sets when an uncorrectable parity or ECC error has been seen. To clear the CNT_UNCORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits: 14    LkTxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error. Each channel in the design has a flag that sets when a correctable ECC error has been seen. To clear the CNT_CORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits:  1    LkTxIntFcCntFill(rw1c) - The out-of-band flow control error counter is half full or overflowed.
    Bits:  0    LkTxIntChanCntFill(rw1c) - One or more per channel statistics counters (TX_Bytes, TX_Packets, and/or TX_Bad_Packets) are half full or overflowed.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT                 0x00000180
#define NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT2                0x00000188
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_UNCORRECTABLE BIT(31)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_CORRECTABLE BIT(30)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_OVERFLOW BIT(29)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_UNDERRUN BIT(28)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FC_ERR BIT(17)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_STATUS_MESSAGE_CHANGE BIT(16)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_COUNT_UNCORRECTABLE BIT(15)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_COUNT_CORRECTABLE BIT(14)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FC_CNT_FILL BIT(1)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_CHAN_CNT_FILL BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptMask - Interlaken TX Interrupt Mask
  Register: LkTxInterruptMask2 - Interlaken TX Interrupt Mask Second
    Bits: 31    LkTxIntFifoUnCorrMask(rw) - Mask Interrupt.
    Bits: 30    LkTxIntFifoCorrMask(rw) - Mask Interrupt.
    Bits: 29    LkTxIntFifoOverMask(rw) - Mask Interrupt.
    Bits: 28    LkTxIntFifoUnderMask(rw) - Mask Interrupt.
    Bits: 17    LkTxIntFcErrMask(rw) - Mask Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeMask(rw) - Mask Interrupt.
    Bits: 15    LkTxIntCntUnCorrMask(rw) - Mask Interrupt.
    Bits: 14    LkTxIntCntCorrMask(rw) - Mask Interrupt.
    Bits:  1    LkTxIntFcCntFillMask(rw) - Mask Interrupt.
    Bits:  0    LkTxIntChanCntFillMask(rw) - Mask Interrupt.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_MASK            0x00000184
#define NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_MASK2           0x0000018c
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_UNCORRECTABLE_MASK BIT(31)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_CORRECTABLE_MASK BIT(30)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_OVERFLOW_MASK BIT(29)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_UNDERRUN_MASK BIT(28)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FC_ERR_MASK BIT(17)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_STATUS_MESSAGE_CHANGE_MASK BIT(16)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_COUNT_UNCORRECTABLE_MASK BIT(15)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_COUNT_CORRECTABLE_MASK BIT(14)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FC_CNT_FILL_MASK BIT(1)
#define   NFP_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_CHAN_CNT_FILL_MASK BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptForce - Interlaken TX Interrupt Force
    Bits: 31    LkTxIntFifoUnCorrForce(rw) - Force Interrupt.
    Bits: 30    LkTxIntFifoCorrForce(rw) - Force Interrupt.
    Bits: 29    LkTxIntFifoOverForce(rw) - Force Interrupt.
    Bits: 28    LkTxIntFifoUnderForce(rw) - Force Interrupt.
    Bits: 17    LkTxIntFcErrForce(rw) - Force Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeForce(rw) - Force Interrupt.
    Bits: 15    LkTxIntCntUnCorrForce(rw) - Force Interrupt.
    Bits: 14    LkTxIntCntCorrForce(rw) - Force Interrupt.
    Bits:  1    LkTxIntFcCntFillForce(rw) - Force Interrupt.
    Bits:  0    LkTxIntChanCntFillForce(rw) - Force Interrupt.
*/
#define NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE           0x00000190
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_UNCORRECTABLE_FORCE BIT(31)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_CORRECTABLE_FORCE BIT(30)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_OVERFLOW_FORCE BIT(29)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_UNDERRUN_FORCE BIT(28)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FC_ERR_FORCE BIT(17)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_STATUS_MESSAGE_CHANGE_FORCE BIT(16)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_COUNT_UNCORRECTABLE_FORCE BIT(15)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_COUNT_CORRECTABLE_FORCE BIT(14)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FC_CNT_FILL_FORCE BIT(1)
#define   NFP_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_CHAN_CNT_FILL_FORCE BIT(0)
/*----------------------------------------------------------------
  Register: LkRxControl - Interlaken Mac RX Core Control
    Bits: 11    LkStatusMsgCont(rw) - When set to 1, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control on every calendar. When set to 0, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control only when one of the enabled lanes identifies a problem. Note: STATUS_MSG_CONT is unused in the TX (0x018).
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL                   0x00000218
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_STATUS_MSG_CONTINUOUS BIT(11)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_STATUS_MSG_ENABLE BIT(10)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_DATA_ALL_ZERO BIT(7)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_FC_OOB_ALL_ZERO BIT(6)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_DISPARITY_DISABLE BIT(4)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_CRC24_DISABLE BIT(3)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_CRC32_DISABLE BIT(2)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_UNALIGN_XOFF_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: LkSerDesRxFifoConfig - Interlaken Mac RX Core SerDes/FC Fifo Config
    Bits: 27:24 LkFcRxFifoHwm(rw) - Interlaken FC RXFIFO HWM
    Bits: 19:16 LkFcRxFifoLwm(rw) - Interlaken FC RXFIFO LWM
    Bits: 11:8  LkSerDesRxFifoHwm(rw) - Interlaken SerDes RXFIFO HWM
    Bits:  3:0  LkSerDesRxFifoLwm(rw) - Interlaken SerDes RXFIFO LWM
*/
#define NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG         0x00000228
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_HWM(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_HWM_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_LWM(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_LWM_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_HWM(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_HWM_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_LWM(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_LWM_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkRxDebugObserve0 - Interlaken RX Debug observe data0
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE0            0x00000310
#define   NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE0_INTLKN_DEBUG_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE0_INTLKN_DEBUG_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkRxInterrupt - Interlaken RX Interrupt
  Register: LkRxInterrupt2 - Interlaken RX Interrupt Second
    Bits: 31    LkRxIntCtlBitErr(rw1c) - Control Word Bit Error. A control word looked like a valid synchronization or skip word, but bit [55:0] of the word did not match the expected value.
    Bits: 29    LkRxIntMfErr(rw1c) - For one or more of the enabled lanes, a valid synchronization word was not received at the metaframe period. SLE_RX_MF_ERR (0x3AC) must be cleared before MF_ERR will clear.
    Bits: 28    LkRxIntBadCtlErr(rw1c) - A control word was received that does not match one of the defined control word types. SLE_RX_BADCTL_ERR MMR (0x3B0) must be cleared before BADCTL_ERR bit[28] will clear.
    Bits: 27    LkRxIntScRamErr(rw1c) - For one or more enabled lanes, a scrambler state word did not match its expected value. SLE_RX_SCRAM_ERR (0x3B4) must be cleared before SCRAM_ERR will clear.
    Bits: 26    LkRxIntCrc32Err(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 25    LkRxIntCdrErr(rw1c) - For one or more enabled lanes, the i_rx_serdes_valid input is low. SLE_RX_CDR_ERR (0x3BC) must be cleared before CDR_ERR will clear.
    Bits: 24    LkRxIntWdSyncChange(rw1c) - For one or more enabled lanes, the 64b/67b synchronization has changed, either from out of sync to in sync or from in sync to out of sync. SLE_RX_WRD SYNC MMR (0x3C0) must be cleared before WRD_SYN_CHANGE bit[24] will clear. A flow diagram for achieving and maintaining 64B/67B word boundary lock is shown in figure 5-10 on page 25 of the Interlaken Protocol Definition. Once we get sync ( the middle64B/67B word lock state in the diagram) we need to get 16 out of 64 words with bad framing bits in order to go out of sync, the upper and lower values are set by 0x218 : Receive Control Register.
    Bits: 23    LkRxIntAlignChange(rw1c) - The alignment state has changed, either from out of alignment to aligned or from aligned to out of alignment.
    Bits: 22    LkRxIntAlignErr(rw1c) - An alignment error occurred (synchronization word not seen on all lanes at the same time).
    Bits: 21    LkRxIntBurstErr(rw1c) - A protocol error occurred in the datapath related to the burst delineation logic.
    Bits: 20    LkRxIntBminErr(rw1c) - A BurstMin violation was detected.
    Bits: 19    LkRxIntBmaxErr(rw1c) - A BurstMax violation was detected.
    Bits: 18    LkRxIntCrc24Err(rw1c) - A burst CRC24 error was detected.
    Bits: 17    LkRxIntFcErr(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 16    LkRxIntStatusMessageChange(rw1c) - When this interrupt is set, it indicates that the diagnostics word's status message has changed. The status message can be seen in register 0x3C8 : Status Message Received.
    Bits: 15    LkRxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error.
    Bits: 14    LkRxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error.
    Bits: 13    LkRxIntBadCtlCntFill(rw1c) - The RX_Bad_Control_Error counter is over half full.
    Bits: 10    LkRxIntCrc32CntFill(rw1c) - One or more of the per lane RX_Lane_CRC_Error counters is over half full.
    Bits:  9    LkRxIntCdrCntFill(rw1c) - One or more of the per lane RX_CDR_Error counters is over half full.
    Bits:  8    LkRxIntWrdSyncCntFill(rw1c) - One or more of the per lane RX_Word_Sync_Error counters is over half full.
    Bits:  7    LkRxIntAlignFailCntFill(rw1c) - The RX_Alignment_Failure counter is over half full.
    Bits:  6    LkRxIntAliCntFill(rw1c) - The RX_Alignment Error counter is over half full.
    Bits:  5    LkRxIntBurstCntFill(rw1c) - The RX_Burst_Error counter is over half full.
    Bits:  4    LkRxIntBminCntFill(rw1c) - The RX_Burst Min error counter is over half full.
    Bits:  3    LkRxIntBmaxCntFill(rw1c) - The RX_Burst_Max_Error counter is over half full.
    Bits:  2    LkRxIntCrc24CntFill(rw1c) - The RX_CRC24_Error counter is over half full.
    Bits:  1    LkRxIntFcCntFill(rw1c) - The in band flow control error counter is over half full. Note, this error does not occur in Look-Aside mode.
    Bits:  0    LkRxIntChanCntFill(rw1c) - One or more per channel statistics counters (RX_Bytes, RX_Packets, and/or RX_Bad_Packets) are over half full.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT                 0x00000380
#define NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT2                0x00000388
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CTLBIT_ERR BIT(31)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_MF_ERR BIT(29)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BAD_CTL_ERR BIT(28)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_SCRAM_ERR BIT(27)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC32_ERR BIT(26)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CDR_ERR BIT(25)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_WRD_SYNC_CHANGE BIT(24)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_CHANGE BIT(23)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_ERR BIT(22)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BURST_ERR BIT(21)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMIN_ERR BIT(20)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMAX_ERR BIT(19)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC24_ERR BIT(18)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_FC_ERR BIT(17)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_STATUS_MESSAGE_CHANGE BIT(16)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CNT_UNCORRECTABLE BIT(15)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CNT_CORRECTABLE BIT(14)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BAD_CTL_CNT_FILL BIT(13)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC32_CNT_FILL BIT(10)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CDR_CNT_FILL BIT(9)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_WRD_SYNC_CNT_FILL BIT(8)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_FAIL_CNT_FILL BIT(7)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_CNT_FILL BIT(6)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BURST_CNT_FILL BIT(5)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMIN_CNT_FILL BIT(4)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMAX_CNT_FILL BIT(3)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC24_CNT_FILL BIT(2)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_FC_CNT_FILL BIT(1)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CHAN_CNT_FILL BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptMask - Interlaken RX Interrupt Mask
  Register: LkRxInterruptMask2 - Interlaken RX Interrupt Mask Second
    Bits: 31    LkRxIntCtlBitErrMask(rw) - Interrupt Mask
    Bits: 29    LkRxIntMfErrMask(rw) - Interrupt Mask.
    Bits: 28    LkRxIntBadCtlErrMask(rw) - Interrupt Mask.
    Bits: 27    LkRxIntScRamErrMask(rw) - Interrupt Mask.
    Bits: 26    LkRxIntCrc32ErrMask(rw) - Interrupt Mask.
    Bits: 25    LkRxIntCdrErrMask(rw) - Interrupt Mask.
    Bits: 24    LkRxIntWdSyncChangeMask(rw) - Interrupt Mask.
    Bits: 23    LkRxIntAlignChangeMask(rw) - Interrupt Mask.
    Bits: 22    LkRxIntAlignErrMask(rw) - Interrupt Mask.
    Bits: 21    LkRxIntBurstErrMask(rw) - Interrupt Mask.
    Bits: 20    LkRxIntBminErrMask(rw) - Interrupt Mask.
    Bits: 19    LkRxIntBmaxErrMask(rw) - Interrupt Mask.
    Bits: 18    LkRxIntCrc24ErrMask(rw) - Interrupt Mask.
    Bits: 17    LkRxIntFcErrMask(rw) - Interrupt Mask.
    Bits: 16    LkRxIntStatusMessageChangeMask(rw) - Interrupt Mask.
    Bits: 15    LkRxIntCntUnCorrMask(rw) - Interrupt Mask.
    Bits: 14    LkRxIntCntCorrMask(rw) - Interrupt Mask.
    Bits: 13    LkRxIntBadCtlCntFillMask(rw) - Interrupt Mask.
    Bits: 10    LkRxIntCrc32CntFillMask(rw) - Interrupt Mask.
    Bits:  9    LkRxIntCdrCntFillMask(rw) - Interrupt Mask.
    Bits:  8    LkRxIntWrdSyncCntFillMask(rw) - Interrupt Mask.
    Bits:  7    LkRxIntAlignFailCntFillMask(rw) - Interrupt Mask.
    Bits:  6    LkRxIntAliCntFillMask(rw) - Interrupt Mask.
    Bits:  5    LkRxIntBurstCntFillMask(rw) - Interrupt Mask.
    Bits:  4    LkRxIntBminCntFillMask(rw) - Interrupt Mask.
    Bits:  3    LkRxIntBmaxCntFillMask(rw) - Interrupt Mask.
    Bits:  2    LkRxIntCrc24CntFillMask(rw) - Interrupt Mask.
    Bits:  1    LkRxIntFcCntFillMask(rw) - Interrupt Mask.
    Bits:  0    LkRxIntChanCntFillMask(rw) - Interrupt Mask.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_MASK            0x00000384
#define NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_MASK2           0x0000038c
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CTLBIT_ERR_MASK BIT(31)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_MF_ERR_MASK BIT(29)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BAD_CTL_ERR_MASK BIT(28)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_SCRAM_ERR_MASK BIT(27)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC32_ERR_MASK BIT(26)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CDR_ERR_MASK BIT(25)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_WRD_SYNC_CHANGE_MASK BIT(24)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_CHANGE_MASK BIT(23)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_ERR_MASK BIT(22)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BURST_ERR_MASK BIT(21)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMIN_ERR_MASK BIT(20)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMAX_ERR_MASK BIT(19)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC24_ERR_MASK BIT(18)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_FC_ERR_MASK BIT(17)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_STATUS_MESSAGE_CHANGE_MASK BIT(16)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CNT_UNCORRECTABLE_MASK BIT(15)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CNT_CORRECTABLE_MASK BIT(14)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BAD_CTL_CNT_FILL_MASK BIT(13)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC32_CNT_FILL_MASK BIT(10)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CDR_CNT_FILL_MASK BIT(9)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_WRD_SYNC_CNT_FILL_MASK BIT(8)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_FAIL_CNT_FILL_MASK BIT(7)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_CNT_FILL_MASK BIT(6)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BURST_CNT_FILL_MASK BIT(5)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMIN_CNT_FILL_MASK BIT(4)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMAX_CNT_FILL_MASK BIT(3)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC24_CNT_FILL_MASK BIT(2)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_FC_CNT_FILL_MASK BIT(1)
#define   NFP_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CHAN_CNT_FILL_MASK BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptForce - Interlaken RX Interrupt Force
    Bits: 31    LkRxIntCtlBitErrForce(rw) - Interrupt Force
    Bits: 29    LkRxIntMfErrForce(rw) - Interrupt Force.
    Bits: 28    LkRxIntBadCtlErrForce(rw) - Interrupt Force.
    Bits: 27    LkRxIntScRamErrForce(rw) - Interrupt Force.
    Bits: 26    LkRxIntCrc32ErrForce(rw) - Interrupt Force.
    Bits: 25    LkRxIntCdrErrForce(rw) - Interrupt Force.
    Bits: 24    LkRxIntWdSyncChangeForce(rw) - Interrupt Force.
    Bits: 23    LkRxIntAlignChangeForce(rw) - Interrupt Force.
    Bits: 22    LkRxIntAlignErrForce(rw) - Interrupt Force.
    Bits: 21    LkRxIntBurstErrForce(rw) - Interrupt Force.
    Bits: 20    LkRxIntBminErrForce(rw) - Interrupt Force.
    Bits: 19    LkRxIntBmaxErrForce(rw) - Interrupt Force.
    Bits: 18    LkRxIntCrc24ErrForce(rw) - Interrupt Force.
    Bits: 17    LkRxIntFcErrForce(rw) - Interrupt Force.
    Bits: 16    LkRxIntStatusMessageChangeForce(rw) - Interrupt Force.
    Bits: 15    LkRxIntCntUnCorrForce(rw) - Interrupt Force.
    Bits: 14    LkRxIntCntCorrForce(rw) - Interrupt Force.
    Bits: 13    LkRxIntBadCtlCntFillForce(rw) - Interrupt Force.
    Bits: 10    LkRxIntCrc32CntFillForce(rw) - Interrupt Force.
    Bits:  9    LkRxIntCdrCntFillForce(rw) - Interrupt Force.
    Bits:  8    LkRxIntWrdSyncCntFillForce(rw) - Interrupt Force.
    Bits:  7    LkRxIntAlignFailCntFillForce(rw) - Interrupt Force.
    Bits:  6    LkRxIntAliCntFillForce(rw) - Interrupt Force.
    Bits:  5    LkRxIntBurstCntFillForce(rw) - Interrupt Force.
    Bits:  4    LkRxIntBminCntFillForce(rw) - Interrupt Force.
    Bits:  3    LkRxIntBmaxCntFillForce(rw) - Interrupt Force.
    Bits:  2    LkRxIntCrc24CntFillForce(rw) - Interrupt Force.
    Bits:  1    LkRxIntFcCntFillForce(rw) - Interrupt Force.
    Bits:  0    LkRxIntChanCntFillForce(rw) - Interrupt Force.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE           0x00000390
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CTLBIT_ERR_FORCE BIT(31)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_MF_ERR_FORCE BIT(29)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BAD_CTL_ERR_FORCE BIT(28)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_SCRAM_ERR_FORCE BIT(27)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC32_ERR_FORCE BIT(26)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CDR_ERR_FORCE BIT(25)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_WRD_SYNC_CHANGE_FORCE BIT(24)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_CHANGE_FORCE BIT(23)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_ERR_FORCE BIT(22)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BURST_ERR_FORCE BIT(21)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMIN_ERR_FORCE BIT(20)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMAX_ERR_FORCE BIT(19)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC24_ERR_FORCE BIT(18)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_FC_ERR_FORCE BIT(17)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_STATUS_MESSAGE_CHANGE_FORCE BIT(16)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CNT_UNCORRECTABLE_FORCE BIT(15)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CNT_CORRECTABLE_FORCE BIT(14)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BAD_CTL_CNT_FILL_FORCE BIT(13)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC32_CNT_FILL_FORCE BIT(10)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CDR_CNT_FILL_FORCE BIT(9)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_WRD_SYNC_CNT_FILL_FORCE BIT(8)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_FAIL_CNT_FILL_FORCE BIT(7)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_CNT_FILL_FORCE BIT(6)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BURST_CNT_FILL_FORCE BIT(5)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMIN_CNT_FILL_FORCE BIT(4)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMAX_CNT_FILL_FORCE BIT(3)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC24_CNT_FILL_FORCE BIT(2)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_FC_CNT_FILL_FORCE BIT(1)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CHAN_CNT_FILL_FORCE BIT(0)
/*----------------------------------------------------------------
  Register: LkRxMfError - Interlaken RX Metaframe Error
    Bits: 23:0  LkRxMfError(rw1c) - The MetaFrame Period Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_METAFRAME_ERROR           0x000003ac
#define   NFP_NBI_MACX_ILK_INTLKN_RX_METAFRAME_ERROR_INTLKN_RX_METAFRAME_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_METAFRAME_ERROR_INTLKN_RX_METAFRAME_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxBadCtlError - Interlaken RX Bad control word error
    Bits: 23:0  LkRxBadCtlError(rw1c) - The Bad Control Word Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_BAD_CTL_ERROR             0x000003b0
#define   NFP_NBI_MACX_ILK_INTLKN_RX_BAD_CTL_ERROR_INTLKN_RX_BAD_CTL_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_BAD_CTL_ERROR_INTLKN_RX_BAD_CTL_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxScramError - Interlaken RX Scrambler error
    Bits: 23:0  LkRxScramError(rw1c) - The Scrambler State Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_SCRAM_ERROR               0x000003b4
#define   NFP_NBI_MACX_ILK_INTLKN_RX_SCRAM_ERROR_INTLKN_RX_SCRAM_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_SCRAM_ERROR_INTLKN_RX_SCRAM_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32Error - Interlaken RX CRC32 error
    Bits: 23:0  LkRxCrc32Error(rw1c) - The CRC32 Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_CRC32_ERROR               0x000003b8
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CRC32_ERROR_INTLKN_RX_CRC32_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CRC32_ERROR_INTLKN_RX_CRC32_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrError - Interlaken RX CDR error
    Bits: 23:0  LkRxCdrError(rw1c) - The Assumed CDR lost status for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_CDR_ERROR                 0x000003bc
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CDR_ERROR_INTLKN_RX_CDR_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CDR_ERROR_INTLKN_RX_CDR_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncChange - Interlaken RX Word sync change
    Bits: 23:0  LkRxWrdSyncChange(rw1c) - The Word boundary lock status changed. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CHANGE          0x000003c0
#define   NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CHANGE_INTLKN_RX_WORD_SYNC_CHANGE(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CHANGE_INTLKN_RX_WORD_SYNC_CHANGE_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxAlignStatus - Interlaken RX Alignment Status
    Bits: 23    LkRxAligned(ro) - Indicates that the interface is in alignment. This signal is also available as the o_rx_align output from both the sle_lake_rx_wrap and sle_interlaken_top modules. When this bit changes, the ALIGN_CHANGE bit gets set in the RX Interrupt Registers.
    Bits: 22    LkRxAlignErr(ro) - An invalid synchronization pattern has been found. The status bit is a one shot pulse so it will most likely not be seen on an MMR read.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_ALIGN_STATUS              0x000003c4
#define   NFP_NBI_MACX_ILK_INTLKN_RX_ALIGN_STATUS_INTLKN_RX_ALIGNED BIT(23)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_ALIGN_STATUS_INTLKN_RX_ALIGN_ERR BIT(22)
/*----------------------------------------------------------------
  Register: LkRxStatusMessage - Interlaken RX Status Message
    Bits: 31    LkRxStatusMessageValidAll(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ALL enabled serdes lanes.
    Bits: 30    LkRxStatusMessageValidAny(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ANY enabled serdes lanes.
    Bits: 26    LkRxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 25    LkRxStatusMessageSifAll(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ALL enabled lanes.
    Bits: 24    LkRxStatusMessageSifAny(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ANY enabled lanes.
    Bits: 23:0  LkRxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE            0x000003c8
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_VALID_ALL BIT(31)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_VALID_ANY BIT(30)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_SYNC BIT(26)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_SIF_ALL BIT(25)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_SIF_ANY BIT(24)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_LANES(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_LANES_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSync - Interlaken RX Word Sync
    Bits: 23:0  LkRxWrdSync(ro) - The Word boundary lock status. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC                 0x000003cc
#define   NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_INTLKN_RX_WORD_SYNC(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_INTLKN_RX_WORD_SYNC_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32CntFill - Interlaken RX CRC32 err counters half full
    Bits: 23:0  LkRxCrc32CntFill(ro) - The half full status for the RX_Lane_CRC_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_CRC32_CNT_FILL            0x000003d8
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CRC32_CNT_FILL_INTLKN_RX_CRC32_CNT_FILL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CRC32_CNT_FILL_INTLKN_RX_CRC32_CNT_FILL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrLostCntFill - Interlaken RX CDR lost err counters half full
    Bits: 23:0  LkRxCdrLostCntFill(ro) - The half full status for the RX_CDR_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_CDR_LOST_CNT_FILL         0x000003dc
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CDR_LOST_CNT_FILL_INTLKN_RX_CDR_LOST_CNT_FILL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_CDR_LOST_CNT_FILL_INTLKN_RX_CDR_LOST_CNT_FILL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncCntFill - Interlaken RX word sync err counters half full
    Bits: 23:0  LkRxWrdSyncCntFill(ro) - The half full status of the RX_Word_Sync_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CNT_FILL        0x000003e0
#define   NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CNT_FILL_INTLKN_RX_WORD_SYNC_CNT_FILL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CNT_FILL_INTLKN_RX_WORD_SYNC_CNT_FILL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRevision - Ethernet MAC Revision register
    Bits: 31:16 EthCustVer(ro) - Indicates the customer version of the ETH Mac RTL.
    Bits: 15:8  EthCoreVer(ro) - Indicates the core version of the ETH Mac RTL.
    Bits:  7:0  EthCoreRev(ro) - Indicates the core revision of the ETH Mac RTL.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_REVISON(_x)               (0x00000000 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_REVISON_CUSTOM(_x)      (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_REVISON_CUSTOM_of(_x)   (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_REVISON_CORE(_x)        (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHSEG_REVISON_CORE_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_REVISON_CORE_REV(_x)    (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_REVISON_CORE_REV_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthScratch - Ethernet MAC scratch register
    Bits: 31:0  EthScratch(rw) - The Scratch Register provides a memory location to test the register access.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_SCRATCH(_x)               (0x00000004 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_SCRATCH_SCRATCH(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SCRATCH_SCRATCH_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthCmdConfig - Ethernet MAC configuration register
    Bits: 29    EthForceSendRf(rw) - Force send remote fault. (FIXME: undocumented, need description from MTIP)
    Bits: 28    EthForceSendLf(rw) - Force send local fault. (FIXME: undocumented, need description from MTIP)
    Bits: 27    EthDisableFltHdl(rw) - Disable default fault handling. (FIXME: undocumented, need description from MTIP)
    Bits: 22    EthTxFlush(rw) - Egress Flush Enable. If set to '1', the Core reads out the Tx FIFO and drops the data (data is not sent out on the line). The associated pause signals (link pause or priority flow control) are masked.
    Bits: 21    EthRxSfdAny(rw) - Enables, when set, that any character is allowed at the SFD position of the preamble and the frame will be accepted. Note that when this bit is set, no alignment error can occur. If cleared (default) the frame is accepted only if the 8th byte of the preamble contains the SFD value 0xd5. If another value is received, the frame is discarded and the alignment error counter increments.
    Bits: 20    EthPausePfcComp(rw) - Link Pause Compatibility with PFC Mode. If set to '1', Pause frames in legacy pause mode are processed similar to PFC frames in PFC mode, i.e. the transmit path is not paused by incoming Pause frames, only the pause status ff_rx_pfc_xoff<n>(0) is asserted as long as the internal pause timer has not expired. If set to '0' (Reset value), Pause frames are processed as described in FIXME on page FIXME. This bit is relevant only when PFC_MODE=0.
    Bits: 19    EthPfcMode(rw) - Priority Flow Control Mode. If set to '1', the Core generates and processes PFC control frames according to the Priority Flow Control Interface signals. If set to'0' (Reset Value), the Core operates in legacy Pause Frame mode and generates and processes standard Pause Frames (see FIXME).
    Bits: 18    EthRsColCntExt(rw) - If set to '1', sets the reconciliation sublayer parameter col_cnt to the value set in the global register WAN_RS_COL_CNT. When disabled (0), the col_cnt is set as defined by the IEEE 802.3ae standard (128) ignoring the global setting.
    Bits: 17    EthNoLgthCheck(rw) - Disable Payload Length Check. If set to '0' (Reset value), the Core checks the frame's payload length with the frame's Length/Type field. If set to '1', the payload length check is disabled.
    Bits: 16    EthSendIdle(rw) - Force Idle Generation. If set to '1', the MAC permanently sends XL/CGMII Idle sequences even when faults are received.
    Bits: 15    EthPhyTxEna(rw) - Enable PHY Transmit. If set to '1', the signal phy_txena<n> is set to '1'. If set to '0' (Reset value), the signal phy_txena<n> is set to '0'.
    Bits: 14    EthRxErrDiscard(rw) - Enable Receive Errored Frame Discard. If set to '1', any frame received with an error is discarded in the Core and not forwarded to the client interface. If set to '0' (Reset value), errored frames are forwarded to the client interface with ff_rx_err asserted. Note: Not available in this implementation.
    Bits: 13    EthCmdFrameEna(rw) - Enable Reception of all Command Frames. If set to '1', all command frames are accepted. If set to '0' (Reset Value), only Pause frames are accepted and all other command frames are rejected. A command or control frame is defined as having a type of 0x8808 and an opcode field that does not match the pause opcode.
    Bits: 12    EthSwReset(rw) - Self-Clearing Software Reset. When written with '1', all Statistics Counters are reset to 0.
    Bits: 11    EthTxPadEn(rw) - Enable Transmit Padding. If set to '1' (Reset value), the MAC transmit logic inserts padding bytes to always generate frames with a minimum length of 64 bytes with CRC or 60 bytes without CRC. If set to '0', the MAC transmit logic can send unpadded frames. Note: If TX_PAD_EN=0 in 40G and 100G mode of operation, the MAC does not insert padding bytes for frames equal or larger than 32 bytes, frames smaller than 32 bytes are always padded. If TX_PAD_EN=0 in 10G mode of operation, the MAC can send short unpadded frames of any size.
    Bits: 10    EthLoopBackEn(rw) - Enable PHY Interface Loopback. If set to '1', the signal loop_ena<n> is set to '1'. If set to '0' (Reset value), the signal loop_ena<n> is set to '0'.
    Bits:  9    EthTxAddrIns(rw) - Set Source MAC Address on Transmit. If set to '1', the MAC overwrites the source MAC address received from the client interface with the MAC address programmed in registers MAC_ADDR_0 and MAC_ADDR_1 . If set to '0' (Reset value), the source MAC address from the client interface is transmitted unmodified to the line.
    Bits:  8    EthPauseIgnore(rw) - Ignore Pause Frame Quanta. If set to '1', received pause frames are ignored by the MAC. If set to '0' (Reset value), the transmit process is stopped for the amount of time specified in the pause quanta received within a pause frame. This bit is relevant only when PFC_MODE=0.
    Bits:  7    EthPauseFwd(rw) - Terminate / Forward Pause Frames. If set to '1', pause frames are forwarded to the user application. If set to '0' (Reset value), pause frames are terminated and discarded within the MAC.
    Bits:  6    EthCrcFwd(rw) - Terminate / Forward Received CRC. If set to '1', the CRC field of received frames is forwarded with the frame to the user application. If set to '0' (Reset value), the CRC field is stripped from the frame. Note: If padding (Bit PAD_EN set to '1') is enabled, CRC_FWD is ignored.
    Bits:  5    EthPadEn(rw) - Enable Frame Padding Removal in receive path. If set to '1', padding is removed before the frame is conveyed to the MAC client application. If set to '0' (Reset value), no padding is removed on receive by the MAC. Note: Not available in this implementation.
    Bits:  4    EthPromisEn(rw) - Enable MAC Promiscuous Operation. If set to '1', all frames are received without any MAC address filtering. If set to '0' (Reset value), unicast frames with a destination address not matching the Core MAC address (programmed in registers MAC_ADDR_0 and MAC_ADDR_1) are rejected.
    Bits:  3    EthWanMode(rw) - Enable WAN Mode. Sets WAN mode (1) or LAN mode (0, default) of operation. Note: When changing the mode, verify correct setting of the transmit Inter-Packet-Gap (IPG) in register TX_IPG_LENGTH. Note: This bit is only available in 10G mode of operation. It is reserved in 40G and 100G mode of operation.
    Bits:  1    EthRxEna(rw) - MAC Receive Path Enable. Should be set to '1' to enable the MAC receive path, should be set to '0' (Reset value) to disable the MAC receive path.
    Bits:  0    EthTxEna(rw) - MAC Transmit Path Enable. Should be set to '1' to enable the MAC transmit path, should be set to '0' (Reset value) to disable the MAC transmit path.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_CMD_CONFIG(_x)            (0x00000008 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_FORCE_SEND_RF BIT(29)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_FORCE_SEND_LF BIT(28)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_DISABLE_FLT_HDL BIT(27)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_TX_FLUSH     BIT(22)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_RX_SFD_ANY   BIT(21)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PAUSE_PFC_COMP BIT(20)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PFC_MODE     BIT(19)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_RS_COL_CNT_EXT BIT(18)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_NO_LEN_CHECK BIT(17)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_SEND_IDLE    BIT(16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PHY_TX_ENABLE BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_RX_ERR_DISCARD BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_CMD_FRAME_ENABLE BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_SW_RESET     BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_TX_PAD_ENABLE BIT(11)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_LOOPBACK_ENABLE BIT(10)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_TX_ADDR_INSERT BIT(9)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PAUSE_IGNORE BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PAUSE_FWD    BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_CRC_FWD      BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PAD_ENABLE   BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_PROMISC_ENABLE BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_WAN_MODE     BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_RX_ENABLE    BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CMD_CONFIG_TX_ENABLE    BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthMacAddr0 - Ethernet MAC Addr 31:00
    Bits: 31:0  EthMacAddr0(rw) - The lower 32-Bit of the 48-Bit MAC Address. Bit 0 is LSB.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_MAC_ADDR_0(_x)            (0x0000000c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_MAC_ADDR_0_VAL(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_MAC_ADDR_0_VAL_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthMacAddr1 - Ethernet MAC Addr 47:32
    Bits: 15:0  EthMacAddr1(rw) - The upper 16-Bit of the 48-Bit MAC Address. Bit 0 is Bit 32 of MAC address. Bits 31:16 are unused and always set to '0'.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_MAC_ADDR_1(_x)            (0x00000010 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_MAC_ADDR_1_VAL(_x)      (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_MAC_ADDR_1_VAL_of(_x)   (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthFrmLength - Ethernet MAC max frame length
    Bits: 15:0  EthFrmLength(rw) - Maximum supported frame length. The MAC supports any frame size up to 16352 bytes (0x3fe0). Typical settings are 1518 for standard. Set to 1536 after Reset. Bits 31:16 are unused and always set to '0'.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_FRAME_LEN(_x)             (0x00000014 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_FRAME_LEN_VAL(_x)       (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_FRAME_LEN_VAL_of(_x)    (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRxFifoSections - Ethernet RX FIFO section thresholds
    Bits: 31:16 EthRxSectionEmptyWm(rw) - RX section empty threshold, reset value is 0x0. All threshold values are in steps of segment data words (10G: 32-bit, 40G: 128-bit, 100G: 384-bit). See also FIXME.
    Bits: 15:0  EthRxSectionAvailWm(rw) - RX section available threshold, reset value is 0x3.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_RX_FIFO_SECTIONS(_x)      (0x0000001c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_SECTIONS_EMPTY_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_SECTIONS_EMPTY_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_SECTIONS_AVAIL_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_SECTIONS_AVAIL_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxFifoSections - Ethernet TX FIFO section thresholds
    Bits: 31:16 EthTxSectionEmptyWm(rw) - TX section empty threshold, reset value is 0x0. All threshold values are in steps of segment data words (10G: 32-bit, 40G: 128-bit, 100G: 384-bit). See also FIXME.
    Bits: 15:0  EthTxSectionAvailWm(rw) - TX section available threshold, reset value is 0x3.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_TX_FIFO_SECTIONS(_x)      (0x00000020 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_SECTIONS_EMPTY_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_SECTIONS_EMPTY_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_SECTIONS_AVAIL_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_SECTIONS_AVAIL_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRxFifoAlmostFE - Ethernet RX FIFO almost full/empty WMs
    Bits: 31:16 EthRxFifoAlmostFullWm(ro) - RX FIFO almost full threshold Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
    Bits: 15:0  EthRxFifoAlmostEmptyWm(ro) - RX FIFO almost empty threshold. Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_RX_FIFO_ALMOST(_x)        (0x00000024 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_ALMOST_FULL_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_ALMOST_FULL_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_ALMOST_EMPTY_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_FIFO_ALMOST_EMPTY_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxFifoAlmostFE - Ethernet TX FIFO almost full/empty WMs
    Bits: 31:16 EthTxFifoAlmostFullWm(ro) - TX FIFO almost full threshold Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
    Bits: 15:0  EthTxFifoAlmostEmptyWm(ro) - TX FIFO almost empty threshold. Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_TX_FIFO_ALMOST(_x)        (0x00000028 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_ALMOST_FULL_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_ALMOST_FULL_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_ALMOST_EMPTY_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_FIFO_ALMOST_EMPTY_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthHashTableLoad - Ethernet Hash Table load register -WO
    Bits:  8    EthHashTableMcEn(wo) - Bit 8 enables (1) or disables (0) multicast frame reception for the entry.
    Bits:  5:0  EthHashTableAddr(wo) - Bits 5:0 specify the hash table address (code).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_HASH_TABLE_LOAD(_x)       (0x0000002c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_HASH_TABLE_LOAD_MC_EN   BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHSEG_HASH_TABLE_LOAD_ADDR(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_HASH_TABLE_LOAD_ADDR_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthStatus - Ethernet Status
    Bits:  3    EthTsAvail(rw1c) - Transmit Timestamp Available. Indicates that the timestamp of the last transmitted 1588 event frame is available in the register TS_TIMESTAMP. To clear TS_AVAIL, the bit must be written with a '1'.
    Bits:  2    EthPhyLos(ro) - PHY indicates loss-of-signal. Represents value of pin phy_los<n> when link training is disabled, else the signal detect indication from the Link Training Core when link training is enabled.
    Bits:  1    EthRxRemFault(ro) - Latch-High Remote Fault Status. Set to '1' when the MAC detects RX Remote Fault Sequences on the XL/CGMII receive interface. Reset to '0' after read and after reset.
    Bits:  0    EthRxLocFault(ro) - Latch-High Local Fault Status. Set to '1' when the MAC detects RX Local Fault Sequences on the XL/CGMII receive interface. Reset to '0' after read and after reset.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_STS(_x)                   (0x00000040 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_STS_TS_AVAIL            BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_STS_PHY_LOS             BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHSEG_STS_RX_REMOTE_FAULT     BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHSEG_STS_RX_LOCAL_FAULT      BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxIpgLength - Ethernet Transmit IPG length
    Bits:  6:0  EthTxIpgLength(rw) - Transmit Inter-Packet-Gap (IPG) value. A 7-bit value: Depending on LAN or WAN mode of operation (see COMMAND_CONFIG, the value has the following meaning:LAN Mode: Number of octets in steps of 4. Valid values are 8, 12, 16, ..., 100. DIC is fully supported for any setting. A default of 12 (reset value) must be set to conform to IEEE802.3ae. Warning: When set to 8, PCS layers may not be able to perform clock rate compensation.WAN Mode: Stretch factor. Valid values are 4..15. The stretch factor is calculated as (value+1)*8. A default of 12 (reset value) must be set to conform to IEEE 802.3ae (i.e. 13*8=104). A larger value shrinks the IPG (increasing bandwidth). The reset value 12 leads to IEEE802.3ae conformant behavior in both modes. Note: WAN mode is only available in 10G mode of operation.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_TX_IPG_LEN(_x)            (0x00000044 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_IPG_LEN_VAL(_x)      (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_IPG_LEN_VAL_of(_x)   (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthCreditTrigger - Ethernet application fifo/credit reset
    Bits:  0    EthCreditTrigger(rw) - Self-clearing Credit Reset. When written with a '1', this bit will trigger a reset of the RX application FIFO and will cause the INIT_CREDIT value to be loaded into the credit register. This bit should be programmed before enabling the MAC and after writing the initial credit value.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_CREDIT_TRIGGER(_x)        (0x00000048 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_CREDIT_TRIGGER_VAL      BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthInitCredit - Ethernet Init Credit
    Bits:  7:0  EthInitCredit(rw) - Specifies the initial/max credit value to be loaded. Note: The initial credit value must be set to '8' when operating in 10G mode of operation, '7' when operating in 40G mode of operation, and '2' when operating in 100G mode of operation.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_INIT_CREDIT(_x)           (0x0000004c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_INIT_CREDIT_VAL(_x)     (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_INIT_CREDIT_VAL_of(_x)  (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthCreditReg - Ethernet credit value for debug read-only
    Bits:  7:0  EthCreditReg(ro) - Current credit register value (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_CREDIT_REG(_x)            (0x00000050 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_CREDIT_REG_VAL(_x)      (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_CREDIT_REG_VAL_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL01 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL1(rw) - CL1_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL0(rw) - CL0_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered. When normal pause mode is enabled, CL0_PAUSE_QUANTA is used.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_PAUSE_QUANTA_CL01(_x)     (0x00000054 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL01_CL1(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL01_CL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL01_CL0(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL01_CL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL23 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL3(rw) - CL3_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL2(rw) - CL2_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_PAUSE_QUANTA_CL23(_x)     (0x00000058 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL23_CL3(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL23_CL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL23_CL2(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL23_CL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL45 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL5(rw) - CL5_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL4(rw) - CL4_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_PAUSE_QUANTA_CL45(_x)     (0x0000005c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL45_CL5(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL45_CL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL45_CL4(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL45_CL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL67 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL7(rw) - CL7_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL6(rw) - CL6_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_PAUSE_QUANTA_CL67(_x)     (0x00000060 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL67_CL7(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL67_CL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL67_CL6(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PAUSE_QUANTA_CL67_CL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL01 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL1(rw) - CL1_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL0(rw) - CL0_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.When normal pause mode is enabled, CL0_QUANTA_THRESH is used for refreshing pause frames.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_QUANTA_THRESH_CL01(_x)    (0x00000064 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL01_CL1(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL01_CL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL01_CL0(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL01_CL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL23 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL3(rw) - CL3_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL2(rw) - CL2_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_QUANTA_THRESH_CL23(_x)    (0x00000068 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL23_CL3(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL23_CL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL23_CL2(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL23_CL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL45 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL5(rw) - CL5_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL4(rw) - CL4_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_QUANTA_THRESH_CL45(_x)    (0x0000006c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL45_CL5(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL45_CL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL45_CL4(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL45_CL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL67 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL7(rw) - CL7_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL6(rw) - CL6_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_QUANTA_THRESH_CL67(_x)    (0x00000070 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL67_CL7(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL67_CL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL67_CL6(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_QUANTA_THRESH_CL67_CL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRxPauseStatus - Status bits for software to read the rx pause status.
    Bits:  7:0  EthRxPauseStatus(ro) - Status bit for software to read the pause status. One bit for each of the 8 classes.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_RX_PAUSE_STS(_x)          (0x00000074 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_PAUSE_STS_VAL(_x)    (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_RX_PAUSE_STS_VAL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTimestamp - Timestamp of the last frame transmitted with timestamp mark enabled.
    Bits: 31:0  EthTimestamp(ro) - Timestamp of the last frame transmitted with timestamp mark enabled. Valid when the status bit EthStatus[EthTsAvail] is set to '1'.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_TIMESTAMP(_x)             (0x0000007c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_TIMESTAMP_TIMESTAMP(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TIMESTAMP_TIMESTAMP_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxPreamble0 - The lower 32-Bit of the user defined 56-Bit Transmit Preamble.
    Bits: 31:0  EthTxPreamble0(rw) - The lower 32-Bit of the user defined 56-Bit Transmit Preamble. Bit 0 is LSB.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_TX_PREAMBLE_0(_x)         (0x00000280 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_PREAMBLE_0_TX_PREAMBLE_0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_PREAMBLE_0_TX_PREAMBLE_0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxPreamble1 - The upper 24-Bit of the user defined 56-Bit Transmit Preamble.
    Bits: 23:0  EthTxPreamble1(rw) - The upper 24-Bit of the user defined 56-Bit Transmit Preamble. Bit 0 is bit 32 of the preamble.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_TX_PREAMBLE_1(_x)         (0x00000284 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_PREAMBLE_1_VAL(_x)   (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_TX_PREAMBLE_1_VAL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPcsCtl - PCS control register for SGMII.
    Bits: 15    EthPcsReset(rw) - Self-Clearing Reset Command Register. When set to '1', a synchronous reset pulse is generated which resets all the PCS state machines, the Comma detection function and the 8b/10b coder / decoder. '0' for normal operation.
    Bits: 14    EthPhyLoopBack(rw) - When set to '1', a serial loopback is implemented in the PMA. Should be set to '0' (Reset value) during normal operation. (setting not relevant, function not used.)
    Bits: 13    EthSgmiiSpeedSel0(ro) - Read only bits that define that the PCS only operates in Gigabit mode.
    Bits: 12    EthAutoNegEnable(rw) - When set to 1 (Reset value) Auto Negotiation is enabled, set to 0 to disable Auto Negotiation.
    Bits: 11    EthPowerDown(rw) - When set to '1', the PCS drives its powerdown output pin.(setting not relevant, function not used.)
    Bits: 10    EthIsolate(rw) - When set to '1', the PCS is isolated from the MAC Layer device. Should be set to '0' (Reset value) to enable normal operation. Note: When set keeps the PCS in reset (equals bit15=1 permanently).
    Bits:  9    EthRestartAutoNeg(rw) - Self-clearing command bit: Set to '1' to restart an auto negotiation sequence. Set to '0' (Reset value) in normal operation mode.
    Bits:  8    EthDuplexMode(ro) - Read only bit always set to '1' to indication that the PCS only supports Full Duplex mode of operation and does not support Half Duplex mode of operation.
    Bits:  7    EthCollisionTest(ro) - Half duplex not supported by the PCS, read only bit set to '0'.
    Bits:  6    EthSgmiiSpeedSel1(ro) - Read only bits that define that the PCS only operates in Gigabit mode.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_SGMII_PCS_CTRL(_x)        (0x00000300 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_RESET    BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_PHY_LOOPBACK BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_SPEED_SEL_0 BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_AUTONEG_ENABLE BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_POWER_DOWN BIT(11)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_ISOLATE  BIT(10)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_RESTART_AUTONEG BIT(9)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_DUPLEX_MODE BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_COLLISION_TEST BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_CTRL_SPEED_SEL_1 BIT(6)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPcsStatus - PCS Status register for SGMII.
    Bits: 15    Eth100T4(ro) - Read Only bit set to '0' to indicate that the PCS does NOT support 100Base-T4 operation.
    Bits: 14:13 Eth100XHalfDuplex(ro) - Read Only bit set to '00' to indicate that the PCS does NOT support 100Base-X operation.
    Bits: 12:11 Eth10MbHalfDuplex(ro) - Read Only bit set to '00' to indicate that the PCS does NOT support 10Mbps operation.
    Bits: 10:9  Eth100T2HalfDuplex(ro) - Read Only bit set to '00' to indicate that the PCS does NOT support 100Base-T2 operation.
    Bits:  8    EthExtendedStatus(ro) - Read Only bit always set to '0' to indicate that the PCS does NOT implement an extended status register.
    Bits:  5    EthAutoNegComplete(ro) - Read Only Bit set to '1' to indicate that the Auto Negotiation process is completed and that the Auto Negotiation control registers are valid. Set to '0' if the Auto Negotiation process is not completed or if Auto Negotiation is disabled.
    Bits:  4    EthRemoteFault(ro) - Read Only Bit always set to '0'. The PCS does not implement a PHY specific remote fault detection optional function.
    Bits:  3    EthAutoNegAbility(ro) - Read Only Bit set to '1' to indicate that the PCS PCS supports Auto-Negotiation.
    Bits:  2    EthLinkStatus(ro) - Read Only Link Status Register. When read as a logic one, indicates that the PCS has determined that a valid link has been established. When read as a logic zero, indicates that the link is not valid.If the link synchronization is lost a '0' is latched which is cleared only after a register read access.
    Bits:  1    EthJabberDetect(ro) - Read Only bit always set to '0', the PCS does not support the optional Jabber detection function.
    Bits:  0    EthExtCapable(ro) - Read Only bit set to '1' to indicate that the PCS supports extended registers.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_SGMII_PCS_STS(_x)         (0x00000304 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_100BASET4 BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_100BASEX_HALF_DUPLEX(_x) (((_x) & 0x3) << 13)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_100BASEX_HALF_DUPLEX_of(_x) (((_x) >> 13) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_10M_HALF_DUPLEX(_x) (((_x) & 0x3) << 11)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_10M_HALF_DUPLEX_of(_x) (((_x) >> 11) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_100BASET2_HALF_DUPLEX(_x) (((_x) & 0x3) << 9)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_100BASET2_HALF_DUPLEX_of(_x) (((_x) >> 9) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_EXTENDED_STS BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_AUTONEG_COMPLETE BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_REMOTE_FAULT BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_AUTONEG_ABILITY BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_LINK_STS  BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_JABBER_DETECT BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PCS_STS_EXT_CAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPhyIdent0 - PCS PHY Identifier register for SGMII.
    Bits: 15:0  EthPhyIdentifier0(ro) - PHY Identification Register. Read only register programmed with a custom value.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_SGMII_PHY_IDENT0(_x)      (0x00000308 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PHY_IDENT0_VAL(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PHY_IDENT0_VAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPhyIdent1 - PCS PHY Identifier register for SGMII.
    Bits: 15:0  EthPhyIdentifier1(ro) - PHY Identification Register. Read only register programmed with a custom value.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_SGMII_PHY_IDENT1(_x)      (0x0000030c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PHY_IDENT1_VAL(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_SGMII_PHY_IDENT1_VAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiDevAbility - Device ability advertised to link partner during Auto-neg.
    Bits: 15    EthNextPageCapable(rw) - Next page capable. Set to '1' to indicate next page capability.
    Bits: 14    EthACK(ro) - Acknowledgement bit used during autonegotiation. Setting of the bit in the device ability advertisement register is not relevant to the operation of the autonegotiation function. The bit is typically set in the received partner ability register upon successful completion of autonegotiation.
    Bits: 13:12 EthRemoteFault(rw) - Remote fault condition advertise
    Bits:  8    EthPS2(rw) - Advertise that the PCS supports pause on both transmit and receive. PS2 (ASM_DIR) indicates pause asymmetry. Refer to IEEE802.3 Clause 37.2.4.2 for pause resolution.
    Bits:  7    EthPS1(rw) - Advertise that the PCS supports pause on both transmit and receive. PS1 (Pause) indicates pause capability.Refer to IEEE802.3 Clause 37.2.4.2 for pause resolution. The device-ability register reset to 1 indicating full pause support in both directions
    Bits:  6    EthHalfDuplex(rw) - Half Duplex Support. Set to '1' when the device advertises that is supports Half Duplex Mode of operation.
    Bits:  5    EthFullDuplex(rw) - Full Duplex Support. Set to '1' when the device advertises that it supports Full Duplex Mode of operation. The device-ability (advertisement) register reset value sets the bit to 1 indicating full duplex operation.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_DEV_ABILITY(_x)           (0x00000310 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_NP          BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_ACK         BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_REMOTE_FAULT(_x) (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_REMOTE_FAULT_of(_x) (((_x) >> 12) & 0x3)
#define     NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_REMOTE_FAULT_NO_ERROR (0)
#define     NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_REMOTE_FAULT_LINK_FAILURE (1)
#define     NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_REMOTE_FAULT_OFFLINE (2)
#define     NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_REMOTE_FAULT_AUTONEGOTIATION_ERROR (3)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_PAUSE_SUPPORT2 BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_PAUSE_SUPPORT1 BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_HALF_DUPLEX BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHSEG_DEV_ABILITY_FULL_DUPLEX BIT(5)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPartnerAbility - Device ability advertised by link partner during Auto-neg.
    Bits: 15    EthCopperLinkStatus(ro) - Read only bit, used by the SGMII PHY to advertise the Link Partner Copper status: 1=Copper interface link is up 0=Copper interface link is down.
    Bits: 14    EthACK(ro) - Acknowledgement bit used during autonegotiation. Setting of the bit in the device ability advertisement register is not relevant to the operation of the autonegotiation function. The bit is typically set in the received partner ability register upon successful completion of autonegotiation.
    Bits: 12    EthCopperDuplexStatus(ro) - Read only bit, used by the SGMII PHY to advertise the Link Partner Copper duplex capability: 0=Copper Interface resolved to Half-Duplex 1=Copper Interface resolved to Full-Duplex
    Bits: 11:10 EthCopperSpeed(ro) - Read only bits, used to by the SGMII PHY to advertise the Copper interface speed (Bit 11:10).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_PARTNER_ABILITY(_x)       (0x00000314 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_LINK_STS BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_ACK     BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_DUPLEX_STS BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_SPEED(_x) (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_SPEED_of(_x) (((_x) >> 10) & 0x3)
#define     NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_SPEED_10M (0)
#define     NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_SPEED_100M (1)
#define     NFP_NBI_MACX_ETH_MACETHSEG_PARTNER_ABILITY_COPPER_SPEED_1G (2)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiAnExpansion - reserved.
    Bits:  1    EthLatchedHiPageRcvd(ro) - Latched high page received indication (cleared on read).
    Bits:  0    EthRealTimePageRcvd(ro) - Real-time page receive indication.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_AN_EXPANSION(_x)          (0x00000318 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_AN_EXPANSION_LATCHED_PAGE_RCVD BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHSEG_AN_EXPANSION_REAL_TIME_PAGE_RCVD BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiDeviceNextPage - The PCS does not support next page autonegotiation.
  Register: MacEthSeg[12]_EthSgmiiPartnerNextPage - The PCS does not support next page autonegotiation.
  Register: MacEthSeg[12]_EthSgmiiExtendedStatus - The PCS does not support extended status.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_DEVICE_NEXT_PAGE(_x)      (0x0000031c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthSeg_PARTNER_NEXT_PAGE(_x)     (0x00000320 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthSeg_EXTENDED_STS(_x)          (0x0000033c + (0x400 * ((_x) & 0xf)))
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiLinkTimerLo - Auto Negotiation Link Timer bits 15:0.
    Bits: 15:0  EthLinkTimerLo(rw) - Auto Negotiation Link Timer (RW). Set the Link Timer value from 0 to 16ms in 8ns steps (125MHz clock periods). The reset value sets the Link Timer to 10ms (1250000). Bits 15:0 are stored in the LO register.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_LINK_TIMER_LO(_x)         (0x00000348 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_LINK_TIMER_LO_VAL(_x)   (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_LINK_TIMER_LO_VAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiLinkTimerHi - Auto Negotiation Link Timer bits 20:16.
    Bits:  4:0  EthLinkTimerHi(rw) - Auto Negotiation Link Timer (RW). Set the Link Timer value from 0 to 16ms in 8ns steps (125MHz clock periods). The reset value sets the Link Timer to 10ms (1250000). Bits 20:16 are stored in the HI register.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_INK_TIMER_HI(_x)          (0x0000034c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_INK_TIMER_HI_VAL(_x)    (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHSEG_INK_TIMER_HI_VAL_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiIfMode - SGMII Interface Mode register.
    Bits:  5    EthSgmiiPcsEnable(rw) - Enable SGMII/1000Base-X PCS instead of XGMII/10GBase-R for the 10G MAC. When set (1) the SGMII PCS layer becomes active and the channel is configured for 1G mode of operation. The other bits in this register have no meaning if this bit is not set. When cleared (0, default) the MAC operates in 10G mode with an XGMII (internally) and 10GBase-R PCS Layer. Note: This bit only configures the datapath within the combined MAC and PCS layers. It does not change the PMA/SERDES module, externally to the core. This must be controlled elsewhere to adapt the correct interface width (10-bit) and speed (125MHz). Note: After setting this bit=1, a PCS soft reset should be performed by writing bit15 of the PCS control register.
    Bits:  4    EthSgmiiHDuplex(rw) - SGMII Halfduplex Mode: When set (1), halfduplex is enabled, when cleared, fullduplex is enabled (default). Note: halfduplex is NOT supported in this implementation. This bit setting has no effect.
    Bits:  3:2  EthSgmiiSpeed(rw) - SGMII Speed. When the PCS operates in SGMII mode (SGMII_ENA set to '1') and when the PCS is programmed not to be automatically configured (USE_SGMII_AN set to '0'), sets the PCS speed of operation (Bit 4:0): Bits ignored when SGMII_ENA=0 or USE_SGMII_AN=0..
    Bits:  1    EthUseSgmiiAn(rw) - Use the SGMII Auto-Negotiation Results to Program the PCS Speed. When set to '0' (Reset Value), the PCS operation should be programmed with the register bit SGMII_SPEED and SGMII_DUPLEX. When '1', the PCS operation is automatically set according to the Partner abilities advertised during Auto-Negotiation. Ignored when SGMII_ENA is set to '0'.
    Bits:  0    EthSgmiiEna(rw) - SGMII Mode Enable. When set to '0' (Reset Value), the PCS operates in standard 1000Base-X Gigabit mode, when set to '1', the PCS operates in SGMII Mode. If the bit is '0' the bits 1..4 of this register are ignored.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_IF_MODE(_x)               (0x00000350 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_PCS_ENABLE BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_HDUPLEX   BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_SPEED(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_SPEED_of(_x) (((_x) >> 2) & 0x3)
#define     NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_SPEED_10M (0)
#define     NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_SPEED_100M (1)
#define     NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_SPEED_1G (2)
#define   NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_USE_SGMII_AN    BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHSEG_IF_MODE_SGMII_ENA       BIT(0)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthActCtlSeg - Active segment control registers
    Bits: 11:0  EthActivateSegment(rw) - Active segment control (1 bit per segment). '1' = Active.Bit0=Seg0...Bit11=Seg11
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_ACT_CTL_SEG        0x00003000
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_ACT_CTL_SEG_VAL(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_ACT_CTL_SEG_VAL_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthModeCtlSeg - Segment Mode control registers
    Bits: 23:0  EthSegmentModeCtl(rw) - Segment mode control (2 bits per segment) SEG0=1:0, SEG1=3:2...
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_MODE_CTL_SEG       0x00003004
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_MODE_CTL_SEG_VAL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_MODE_CTL_SEG_VAL_of(_x) (((_x) >> 0) & 0xffffff)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_MODE_CTL_SEG_VAL_10G (0)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_MODE_CTL_SEG_VAL_40G (1)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_MODE_CTL_SEG_VAL_100G (2)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTxClkCtlSeg - TXCLK control per segment registers
    Bits: 23:0  EthSegmentTxClkCtl(ro) - PMA Transmit Clock Selection (2 bits per segment) SEG0=1:0, SEG1=3:2...This register reflects the setting of the output pins sd_tx_clk_ctrl(23:0).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TXCLK_CTL_SEG      0x00003008
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TXCLK_CTL_SEG_VAL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TXCLK_CTL_SEG_VAL_of(_x) (((_x) >> 0) & 0xffffff)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TXCLK_CTL_SEG_VAL_AUTO (0)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TXCLK_CTL_SEG_VAL_1G (1)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TXCLK_CTL_SEG_VAL_OTHER (2)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthPrmblCtlSeg - User defined TX preamble control per segment
    Bits: 23:0  EthSegmentPrmblCtl(rw) - User defined Tx preamble control (2 bits per segment) SEG0=1:0, SEG1=3:2....
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_PRMBL_CTL_SEG      0x0000300c
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_PRMBL_CTL_SEG_VAL(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_PRMBL_CTL_SEG_VAL_of(_x) (((_x) >> 0) & 0xffffff)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_PRMBL_CTL_SEG_VAL_DEFAULT (0)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_PRMBL_CTL_SEG_VAL_REG (1)
#define     NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_PRMBL_CTL_SEG_VAL_FF (2)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthWanRsColCnt - The 16-bit limit for the column-counter for 10GBase-R fault statemachine.
    Bits: 15:0  EthWanRsColCnt(rw) - A 16-bit value used as limit for the column-counter for the 10GBase-R fault statemachine (IEEE802.3ae Clause 46.3.4). Defaults to 127 for IEEE 802.3ae conformant behavior. The setting is relevant only in 12x10G mode of operation and is used by a 10G MAC when it is configured to use the extended column counter (see command_config(RS_COL_CNT_EXT)). Bits 31:16: reserved, write 0 always.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_WAN_RS_COL_CNT     0x00003020
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_WAN_RS_COL_CNT_VAL(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_WAN_RS_COL_CNT_VAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmInitCredit0 - Specifies the Rx initial/max credit value to be loaded for Segment 0-3.
    Bits: 31:24 EthTdmInitCredit3(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 3.
    Bits: 23:16 EthTdmInitCredit2(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 2.
    Bits: 15:8  EthTdmInitCredit1(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 1.
    Bits:  7:0  EthTdmInitCredit0(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 0.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TDM_INIT_CREDIT0   0x00003024
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_3(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_2(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_1(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT0_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmInitCredit1 - Specifies the Rx initial/max credit value to be loaded for Segment 4-7.
    Bits: 31:24 EthTdmInitCredit7(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 7.
    Bits: 23:16 EthTdmInitCredit6(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 6.
    Bits: 15:8  EthTdmInitCredit5(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 5.
    Bits:  7:0  EthTdmInitCredit4(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 4.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TDM_INIT_CREDIT1   0x00003028
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_7(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_7_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_6(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_6_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_5(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_5_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT1_4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmInitCredit2 - Specifies the Rx initial/max credit value to be loaded for Segment 8-11.
    Bits: 31:24 EthTdmInitCredit11(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 11.
    Bits: 23:16 EthTdmInitCredit10(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 10.
    Bits: 15:8  EthTdmInitCredit9(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 9.
    Bits:  7:0  EthTdmInitCredit8(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 8.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TDM_INIT_CREDIT2   0x0000302c
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_11(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_11_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_10(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_10_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_9(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_9_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_8(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_INIT_CREDIT2_8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmCreditReg0 - Current credit value for Segment 0-3.
    Bits: 31:24 EthTdmCredit3(ro) - Current credit register value of Segment 3 (for debug purpose only).
    Bits: 23:16 EthTdmCredit2(ro) - Current credit register value of Segment 2 (for debug purpose only).
    Bits: 15:8  EthTdmCredit1(ro) - Current credit register value of Segment 1 (for debug purpose only).
    Bits:  7:0  EthTdmCredit0(ro) - Current credit register value of Segment 0 (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TDM_CREDIT_REG0    0x00003030
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_3(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_2(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_1(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG0_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmCreditReg1 - Current credit value for Segment 4-7.
    Bits: 31:24 EthTdmCredit7(ro) - Current credit register value of Segment 7 (for debug purpose only).
    Bits: 23:16 EthTdmCredit6(ro) - Current credit register value of Segment 6 (for debug purpose only).
    Bits: 15:8  EthTdmCredit5(ro) - Current credit register value of Segment 5 (for debug purpose only).
    Bits:  7:0  EthTdmCredit4(ro) - Current credit register value of Segment 4 (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TDM_CREDIT_REG1    0x00003034
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_7(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_7_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_6(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_6_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_5(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_5_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG1_4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmCreditReg2 - Current credit value for Segment 8-11.
    Bits: 31:24 EthTdmCredit11(ro) - Current credit register value of Segment 11 (for debug purpose only).
    Bits: 23:16 EthTdmCredit10(ro) - Current credit register value of Segment 10 (for debug purpose only).
    Bits: 15:8  EthTdmCredit9(ro) - Current credit register value of Segment 9 (for debug purpose only).
    Bits:  7:0  EthTdmCredit8(ro) - Current credit register value of Segment 8 (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_TDM_CREDIT_REG2    0x00003038
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_11(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_11_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_10(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_10_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_9(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_9_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_8(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_TDM_CREDIT_REG2_8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthVLIntvl - Virtual Lane Marker Interval.
    Bits:  0    EthVLIntvl(rw) - Bit 0: Virtual Lane Marker Interval. When set to '0' (reset value), alignment markers are inserted and detected after every 16383 blocks according to IEEE 802.3ba standard specification. For test purposes, setting this bit to '1' will change the interval to 1023 blocks.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_ETH_VL_INTERVAL        0x00003040
#define   NFP_NBI_MACX_ETH_MACETHGLOBAL_ETH_VL_INTERVAL_VAL  BIT(0)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioCfgStatus - MDIO Status
    Bits: 15:7  EthMdioClkDivisor(rw) - MDIO clock divisor. A value of 5 to 511 can be set. The frequency is reg_clk/((2*divisor)+1). The reset default is defined by the synthesis package setting MDIO_CLK_DIV. Setting the divisor to 0 disables MDC.
    Bits:  6    EthEnableClause45(rw) - Enable Clause 45 support. If '0', Clause 22 transactions are used. If '1' (default), Clause 45 transactions are used.
    Bits:  5    EthDisPreamble(rw) - Disable Preamble (if '1').
    Bits:  4:2  EthMdioHoldTime(rw) - MDIO hold time setting as per table.
    Bits:  1    EthMdioRdError(ro) - MDIO read error (read only bit). If '1', the last read transaction had no response from a PHY and the data read could be invalid. This can happen, if the PHY address does not match any PHY that is available on the MDIO bus.
    Bits:  0    EthMdioBusy(ro) - MDIO busy (read only bit). If '1' an MDIO transaction is currently ongoing. If '0' the application can access the other registers.
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_ETH_MDIO_CFG_STS      0x00003400
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_CLK_DIVISOR(_x) (((_x) & 0x1ff) << 7)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_CLK_DIVISOR_of(_x) (((_x) >> 7) & 0x1ff)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_ENABLE_CLAUSE_45 BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_DISABLE_PREAMBLE BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_HOLD_TIME(_x) (((_x) & 0x7) << 2)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_HOLD_TIME_of(_x) (((_x) >> 2) & 0x7)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_READ_ERROR BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_CFG_STS_ETH_MDIO_BUSY BIT(0)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioCommand - MDIO Command (PHY and Port Address)
    Bits: 15    EthMdioRdCmd(rw) - If written with '1', a read transaction is initiated..
    Bits: 14    EthMdioRdCmdCl45(rw) - If written with '1', a read with address post-increment transaction is initiated. Only for Clause 45 transactions.
    Bits:  9:5  EthMdioPortPhyAddr(rw) - Port address(clause 45) OR PHY address(clause 22).
    Bits:  4:0  EthMdioDevRegAddr(rw) - Device address(clause 45) OR Register address(clause 22).
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_ETH_MDIO_COMMAND      0x00003404
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_COMMAND_ETH_MDIO_READ_CMD BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_COMMAND_ETH_MDIO_READ_CMD_CL45 BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_COMMAND_ETH_MDIO_PORTPHY_ADDR(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_COMMAND_ETH_MDIO_PORTPHY_ADDR_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_COMMAND_ETH_MDIO_DEVREG_ADDR(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_COMMAND_ETH_MDIO_DEVREG_ADDR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioData - MDIO Data to write and last Data read.
    Bits: 31    EthMdioBusy(ro) - MDIO busy as found in MDIO_STATUS.0. The value read is invalid as long as Bit 31 is '1'. (read only bit).
    Bits: 15:0  EthMdioData(rw) - 16 bit data word When written: Initiates a write transaction to the PHY. The COMMAND register must have been initialized. The busy status bit will be set immediately and cleared when the write transaction has finished. When read: Returns the data read from the PHY register after a read transaction has been completed (initiated by writing a '1' to Bit 15 or Bit 14 of the COMMAND register).
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_ETH_MDIO_DATA         0x00003408
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_DATA_ETH_MDIO_BUSY BIT(31)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_DATA_ETH_MDIO_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_DATA_ETH_MDIO_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioRegAddr - MDIO Register Address.
    Bits: 31:0  EthMdioRegAddr(wo) - Address of register within Clause 45 PHY device to read from or write to. After writing this register an address-write transaction will be initiated to set the PHY's internal address register to the value given. The COMMAND register must have been initialized before the first write to this register. Note: When a read post increment access is issued this register will not change, only the register inside the PHY device is incremented. The register is relevant only when Clause 45 mode has been enabled. It should not be used when Clause 22 mode is active.
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_ETH_MDIO_REG_ADDR     0x0000340c
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_REG_ADDR_ETH_MDIO_REG_ADDR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHMDIOCTL_ETH_MDIO_REG_ADDR_ETH_MDIO_REG_ADDR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthVlanTpidCfg_EthVlanTpid[8] - VLAN Tag TPID X
    Bits: 15:0  EthVlanTpid(rw) - VLAN Tag TPID.
*/
#define NFP_NBI_MACX_ETH_MacEthVlanTpidCfg_VLAN_TPID_CFG(_x) (0x00003800 + (0x4 * ((_x) & 0x7)))
#define   NFP_NBI_MACX_ETH_MACETHVLANTPIDCFG_VLAN_TPID_CFG_VAL(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHVLANTPIDCFG_VLAN_TPID_CFG_VAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsCtl1 - PCS control register 1
    Bits: 15    EthPcsReset(rw) - Reset. 1=PCS reset (see FIXME), 0=normal operation. Self clearing.
    Bits: 14    EthPcsLoopback(rw) - Loopback. 1=Enable loopback (see FIXME), 0=normal.
    Bits: 13    EthPcsSpeedSelection13(ro) - Speed selection. (13,6)=11=bits 5:2 select speed.
    Bits: 11    EthPcsLowPower(ro) - Low power. 1=Low power mode, 0=normal. NOT SUPPORTED
    Bits:  6    EthPcsSpeedSelection6(ro) - Speed selection. (13,6)=11=bits 5:2 select speed.
    Bits:  5:2  EthPcsSpeedSel(ro) - PCS Speed Select.Speed Bits (13,6:2) are set to 110100 for 100GBASE-R, 110011 for 40GBASE-R, or 110000 for 10GBASE-R inherited from global configuration.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_CTL1(_x) (0x00004000 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_RESET BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_LOOPBACK BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_SPEED_SELECTION13 BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_LOW_POWER BIT(11)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_SPEED_SELECTION6 BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_SPEED_SEL(_x) (((_x) & 0xf) << 2)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_SPEED_SEL_of(_x) (((_x) >> 2) & 0xf)
#define     NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL1_ETH_PCS_SPEED_SEL_10PASS_TS_2BASE_TL (1)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsStatus1 - PCS status register 1
    Bits:  7    EthPcsFault(ro) - Fault detected. not available, always 0.
    Bits:  2    EthPcsRcvLinkStatus(ro) - Receive link status. 1=Link up, 0=link down. Latched Low, cleared on read.
    Bits:  1    EthPcsLowPowerAble(ro) - Low power ability. not available, always 0.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_STS1(_x) (0x00004004 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS1_ETH_PCS_FAULT BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS1_ETH_PCS_RCV_LINK_STS BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS1_ETH_PCS_LOW_POWER_ABILITY BIT(1)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevId0 - PCS Device ID 0
    Bits:  3:0  EthPcsDevId(ro) - Bits 3..0 are used and equal to the segment number of the PCS. All other bits are 0.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_DEV_ID0(_x) (0x00004008 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_ID0_ETH_PCS_DEV_ID(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_ID0_ETH_PCS_DEV_ID_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevId1 - PCS Device ID 1
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_DEV_ID1(_x) (0x0000400c + (0x400 * ((_x) & 0xf)))
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsSpeedAbility - PCS Speed Ability inherited from global cfg
    Bits:  8    EthPcsSpeed100GCapable(ro) - Only bit 8 is set for 100GBASE-R, inherited from global configuration.
    Bits:  7    EthPcsSpeed40GCapable(ro) - Only bit 7 is set for 40GBASE-R, inherited from global configuration.
    Bits:  1    EthPcsSpeed10PassTs2BaseTlCapable(ro) - Inherited from global configuration.
    Bits:  0    EthPcsSpeed10GCapable(ro) - Only bit 0 is set for 10GBASE-R, inherited from global configuration.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_SPEED_ABLILITY(_x) (0x00004010 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_SPEED_ABLILITY_ETH_PCS_SPEED_100G_CAPABLE BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_SPEED_ABLILITY_ETH_PCS_SPEED_40G_CAPABLE BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_SPEED_ABLILITY_ETH_PCS_SPEED_10PASS_TS_2BASE_TL_CAPABLE BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_SPEED_ABLILITY_ETH_PCS_SPEED_10G_CAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevInPkg1 - PCS Devices in package
    Bits:  6    EthPcsTcPresent(ro) - TC Present.
    Bits:  5    EthPcsDteXsPresent(ro) - DTE XS Present.
    Bits:  4    EthPcsPhyXsPresent(ro) - PHY XS Present.
    Bits:  3    EthPcsPCSPresent(ro) - PCS Present.
    Bits:  2    EthPcsWisPresent(ro) - WIS Present.
    Bits:  1    EthPcsPmdPmaPresent(ro) - PMD/PMAPresent.
    Bits:  0    EthPcsClause22RegsPresent(ro) - Clause 22 registers Present.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_DEV_IN_PKG1(_x) (0x00004014 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_TC_PRESENT BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_DTE_XS_PRESENT BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_PHY_XS_PRESENT BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_PCS_PRESENT BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_WIS_PRESENT BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_PMD_PMA_PRESENT BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG1_ETH_PCS_CLAUSE22_REGS_PRESENT BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevInPkg2 - PCS Devices in package
    Bits: 15    EthPcsVndrDev2Present(ro) - Vendor specific device 2 Present.
    Bits: 14    EthPcsVndrDev1Present(ro) - Vendor specific device 1 Present.
    Bits: 13    EthPcsClause22ExtPresent(ro) - Clause 22 extension Present.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_DEV_IN_PKG2(_x) (0x00004018 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG2_ETH_PCS_VENDOR_DEV2_PRESENT BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG2_ETH_PCS_VENDOR_DEV1_PRESENT BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_DEV_IN_PKG2_ETH_PCS_CLAUSE22_EXT_PRESENT BIT(13)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsCtl2 - PCS control register 2
    Bits:  2:0  EthPcsTypeSelection(ro) - Bits 2:0 are set 101=100GBASE-R, 100=40GBASE-R, or 000=10GBASE-R, inherited from global configuration.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_CTL2(_x) (0x0000401c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL2_ETH_PCS_TYPE_SELECTION(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_CTL2_ETH_PCS_TYPE_SELECTION_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsStatus2 - PCS status register 2
    Bits: 15:14 EthPcsDevPresent(ro) - Device present. 10=device responding at this address.
    Bits:  5    EthPcs100GBaseRCapable(ro) - 100GBASE-R capable.
    Bits:  4    EthPcs40GBaseRCapable(ro) - 40GBASE-R capable.
    Bits:  3    EthPcs10GBaseTCapable(ro) - 10GBASE-T capable.
    Bits:  2    EthPcs10GBaseWCapable(ro) - 10GBASE-W capable.
    Bits:  1    EthPcs10GBaseXCapable(ro) - 10GBASE-X capable.
    Bits:  0    EthPcs10GBaseRCapable(ro) - 10GBASE-R capable.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_STS2(_x) (0x00004020 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_DEV_PRESENT(_x) (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_DEV_PRESENT_of(_x) (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_100GBASE_R_CAPABLE BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_40GBASE_R_CAPABLE BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_10GBASE_T_CAPABLE BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_10GBASE_W_CAPABLE BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_10GBASE_X_CAPABLE BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_STS2_ETH_PCS_10GBASE_R_CAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBaseRStatus1 - PCS 10/40/100GBase-R status register 1
    Bits: 12    EthPcsRcvLinkStatus(ro) - Receive link status. 1=Link up, 0=link down.
    Bits:  3    EthPcsPrbs9Able(ro) - 10GBASE-R PRBS9 pattern testing ability.
    Bits:  2    EthPcsPrbs31Able(ro) - 10GBASE-R PRBS31 pattern testing ability.
    Bits:  1    EthPcsHighBer(ro) - High BER. 1=PCS reporting a high BER.
    Bits:  0    EthPcsBlockLocked(ro) - Block lock. 1=PCS locked to received blocks.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BASE_R_STS1(_x) (0x00004080 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS1_ETH_PCS_RCV_LINK_STS BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS1_ETH_PCS_PRBS9_ABLE BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS1_ETH_PCS_PRBS31_ABLE BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS1_ETH_PCS_HIGH_BER BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS1_ETH_PCS_BLOCK_LOCKED BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBaseRStatus2 - PCS 10/40/100GBase-R status register 2
    Bits: 15    EthPcsLatchedBlockLock(ro) - Latched block lock. (LatchedLow cleared on read).
    Bits: 14    EthPcsLatchedHighBerr(ro) - Latched high BER. (LatchedHi cleared on read).
    Bits: 13:8  EthPcsBerCounter(ro) - BER counter (non-rollover cleared on read).
    Bits:  7:0  EthPcsErrorBlockCounter(ro) - Errored block counter (non-rollover cleared on read).
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BASE_R_STS2(_x) (0x00004084 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS2_ETH_PCS_LATCHED_BLOCK_LOCK BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS2_ETH_PCS_LATCHED_HIGH_BER BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS2_ETH_PCS_BER_CNTR(_x) (((_x) & 0x3f) << 8)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS2_ETH_PCS_BER_CNTR_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS2_ETH_PCS_ERRORED_BLOCK_CNTR(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_STS2_ETH_PCS_ERRORED_BLOCK_CNTR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA0 - 10G BASE-R PCS test PAT A seed data 15:0
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA1 - 10G BASE-R PCS test PAT A seed data 31:16
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA2 - 10G BASE-R PCS test PAT A seed data 47:32
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB0 - 10G BASE-R PCS test PAT B seed data 15:0
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB1 - 10G BASE-R PCS test PAT B seed data 31:16
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB2 - 10G BASE-R PCS test PAT B seed data 47:32
    Bits: 15:0  EthPcsTestPatSeedData(rw) - 16 bits of Test Pattern Seed data.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_A0(_x) (0x00004088 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_A1(_x) (0x0000408c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_A2(_x) (0x00004090 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_B0(_x) (0x00004098 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_B1(_x) (0x0000409c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_B2(_x) (0x000040a0 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSTESTPATSEEDDATA_ETH_PCS_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSTESTPATSEEDDATA_ETH_PCS_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA3 - 10G BASE-R PCS test PAT A seed data 57:48
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB3 - 10G BASE-R PCS test PAT B seed data 57:48
    Bits:  9:0  EthPcsTestPatSeedDataH(rw) - Upper 10 bits of Test Pattern Seed data.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_A3(_x) (0x00004094 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_10G_SEED_B3(_x) (0x000040a4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSTESTPATSEEDDATAH_ETH_PCS_TEST_PAT_SEED_DATA_H(_x) (((_x) & 0x3ff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSTESTPATSEEDDATAH_ETH_PCS_TEST_PAT_SEED_DATA_H_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBaseRTestCtl - 10G BASE-R PCS test control register
    Bits:  6    EthPcsPrbs9TransmitPatEn(ro) - 10GBASE-R PRBS9 transmit test-pattern enable. NOT AVAILABLE
    Bits:  5    EthPcsPrbs31ReceivePatEn(ro) - 10GBASE-R PRBS31 receive test-pattern enable. NOT AVAILABLE
    Bits:  4    EthPcsPrbs31TransmitPatEn(ro) - 10GBASE-R PRBS31 transmit test-pattern enable. NOT AVAILABLE
    Bits:  3    EthPcsTransmitTestPatEn(rw) - Transmit test-pattern enable. When bits 3:2 are enabled, test pattern according to bits 1:0 are generated for 10GBASE-R, or scrambled idle test pattern are generated for 100GBASE-R and 40GBASE-R.
    Bits:  2    EthPcsReceiveTestPatEn(rw) - Receive test-pattern enable. When bits 3:2 are enabled, test pattern according to bits 1:0 are generated for 10GBASE-R, or scrambled idle test pattern are generated for 100GBASE-R and 40GBASE-R.
    Bits:  1    EthPcsTestPatSel(rw) - Test pattern select. 1=Square wave, 0=pseudo random. Must be '0' for 100GBASE-R and 40GBASE-R.
    Bits:  0    EthPcsDataPatSel(rw) - Data pattern select. 1=Zeros data pattern, 0=LF data. Must be '0' for 100GBASE-R and 40GBASE-R
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BASE_R_TEST_CTL(_x) (0x000040a8 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_PRBS9_TRANSMIT_PAT_EN BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_PRBS31_RECEIVE_PAT_EN BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_PRBS31_TRANSMIT_PAT_EN BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_TRANSMIT_TEST_PAT_EN BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_RECEIVE_TEST_PAT_EN BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_TEST_PAT_SEL BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BASE_R_TEST_CTL_ETH_PCS_DATA_PAT_SEL BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsTestCnt - Test-pattern error counter. (NR)
    Bits: 15:0  EthPcsTestErrCnt(ro) - Test-pattern error counter. (Non-Rollover clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_TEST_ERR_CNT(_x) (0x000040ac + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_TEST_ERR_CNT_ETH_PCS_TEST_ERR_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_TEST_ERR_CNT_ETH_PCS_TEST_ERR_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBerHiOrderCnt - Bits 21:6 of BER counter. (NR)
    Bits: 15:0  EthPcsBerHiOrderCnt(ro) - Bits 21:6 of BER counter. (Non-Rollover clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BER_HI_ORDER_CNT(_x) (0x000040b0 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BER_HI_ORDER_CNT_ETH_PCS_BER_HI_ORDER_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_BER_HI_ORDER_CNT_ETH_PCS_BER_HI_ORDER_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsErrBlkHiOrderCnt - Bits 21:8 of errored blocks counter. (NR)
    Bits: 15    EthPcsHiOrderCntPresent(ro) - High order counter present. Always 1, writes ignored.
    Bits: 13:0  EthPcsErrBlkHiOrderCnt(ro) - Bits 21:8 of Errored blocks counter. (Non-Rollover clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_ERR_BLK_HI_ORDER_CNT(_x) (0x000040b4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_ERR_BLK_HI_ORDER_CNT_ETH_PCS_HI_ORDER_CNT_PRESENT BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_ERR_BLK_HI_ORDER_CNT_ETH_PCS_ERR_BLK_HI_ORDER_CNT(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_ERR_BLK_HI_ORDER_CNT_ETH_PCS_ERR_BLK_HI_ORDER_CNT_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat1 - Lane alignment status
    Bits: 12    EthPcsLaneAlignmentStatus(ro) - Lane alignment status. 1=All Receive lanes locked and aligned.
    Bits:  7:0  EthPcsLaneBlockLock(ro) - Bit 0 = Lane0 lock... bit 7 = Lane 7 lock etc. Note: Bits 7:4 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_1(_x) (0x000040c8 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_1_ETH_PCS_LANE_ALIGN_STS BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_1_ETH_PCS_LANE_BLOCK_LOCK(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_1_ETH_PCS_LANE_BLOCK_LOCK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat2 - Lane alignment status
    Bits: 11:0  EthPcsLaneBlockLock(ro) - Bit 0 = Lane8 lock, ... bit 11 = lane19 lock. Note: Bits 11:0 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_2(_x) (0x000040cc + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_2_ETH_PCS_LANE_BLOCK_LOCK(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_2_ETH_PCS_LANE_BLOCK_LOCK_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat3 - Lane alignment status
    Bits:  7:0  EthPcsLaneAlignMkrLock(ro) - Bit 0 = Lane0 alingment marker lock... bit 7 = Lane 7 alignment marker lock. Note: Bits 7:4 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_3(_x) (0x000040d0 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_3_ETH_PCS_LANE_ALIGN_MARKER_LOCK(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_3_ETH_PCS_LANE_ALIGN_MARKER_LOCK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat4 - Lane alignment status
    Bits: 11:0  EthPcsLaneAlignMkrLock(ro) - Bit 0 = Lane8 alignment marker lock, ... bit 11 = lane19 alignment marker lock. Note: Bits 11:0 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_4(_x) (0x000040d4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_4_ETH_PCS_LANE_ALIGN_MARKER_LOCK(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CHAN_PCS_MULTILANE_ALIGN_STAT_4_ETH_PCS_LANE_ALIGN_MARKER_LOCK_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane0 - BIP error counter lane 0.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane1 - BIP error counter lane 1.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane2 - BIP error counter lane 2.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane3 - BIP error counter lane 3.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane4 - BIP error counter lane 4.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane5 - BIP error counter lane 5.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane6 - BIP error counter lane 6.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane7 - BIP error counter lane 7.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane8 - BIP error counter lane 8.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane9 - BIP error counter lane 9.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane10 - BIP error counter lane 10.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane11 - BIP error counter lane 11.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane12 - BIP error counter lane 12.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane13 - BIP error counter lane 13.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane14 - BIP error counter lane 14.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane15 - BIP error counter lane 15.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane16 - BIP error counter lane 16.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane17 - BIP error counter lane 17.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane18 - BIP error counter lane 18.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane19 - BIP error counter lane 19.
    Bits: 15:0  EthPcsBipErrCnt(ro) - BIP error counter lane x (Non-Rollover clear on read).
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE0(_x) (0x00004168 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE1(_x) (0x0000416c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE2(_x) (0x00004170 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE3(_x) (0x00004174 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE4(_x) (0x00004178 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE5(_x) (0x0000417c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE6(_x) (0x00004180 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE7(_x) (0x00004184 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE8(_x) (0x00004188 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE9(_x) (0x0000418c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE10(_x) (0x00004190 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE11(_x) (0x00004194 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE12(_x) (0x00004198 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE13(_x) (0x0000419c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE14(_x) (0x000041a0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE15(_x) (0x000041a4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE16(_x) (0x000041a8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE17(_x) (0x000041ac + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE18(_x) (0x000041b0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_BIP_ERR_CNT_LANE19(_x) (0x000041b4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSBIPERRCNT_ETH_PCS_BIP_ERR_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSBIPERRCNT_ETH_PCS_BIP_ERR_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane0 - Lane 0 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane1 - Lane 1 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane2 - Lane 2 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane3 - Lane 3 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane4 - Lane 4 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane5 - Lane 5 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane6 - Lane 6 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane7 - Lane 7 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane8 - Lane 8 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane9 - Lane 9 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane10 - Lane 10 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane11 - Lane 11 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane12 - Lane 12 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane13 - Lane 13 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane14 - Lane 14 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane15 - Lane 15 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane16 - Lane 16 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane17 - Lane 17 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane18 - Lane 18 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane19 - Lane 19 mapping register.
    Bits:  4:0  EthPcsLaneMap(ro) - Lane Mapping register for PCS lane x.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE0(_x) (0x000041b8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE1(_x) (0x000041bc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE2(_x) (0x000041c0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE3(_x) (0x000041c4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE4(_x) (0x000041c8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE5(_x) (0x000041cc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE6(_x) (0x000041d0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE7(_x) (0x000041d4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE8(_x) (0x000041d8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE9(_x) (0x000041dc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE10(_x) (0x000041e0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE11(_x) (0x000041e4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE12(_x) (0x000041e8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE13(_x) (0x000041ec + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE14(_x) (0x000041f0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE15(_x) (0x000041f4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE16(_x) (0x000041f8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE17(_x) (0x000041fc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE18(_x) (0x00004200 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CHAN_PCS_LANE_MAP_LANE19(_x) (0x00004204 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSLANEMAP_ETH_PCS_LANE_MAP(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHCHPCSSEG_ETHCHPCSLANEMAP_ETH_PCS_LANE_MAP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnCtl - KXAN control register
    Bits: 15    EthAnReset(rw) - Self Clearing bit should be set to '1' to reset the auto-negotiation process.
    Bits: 13    EthAnExtNPCtl(rw) - When set to '1', extended next pages are enabled. When set to '0', extended next pages are disabled. When enabled (1) transmission of next page with non-null code field is possible. The next page registers should be initialized and must be set (handshaking) every time a next page is received. When disabled (0) only null next page is transmitted in response to received next pages from link partner. Note: when 0, the registers AN_XNP are not writable (i.e. the 48bit next page message will internally be a null next page, having bit0 and bit13 set to 1, ignoring the values in AN_XNP registers).
    Bits: 12    EthAnAutoNegEnable(rw) - Should be set to '1' to enable the auto-negotiation process. Should be set to '0' (Reset value) to disable the auto-negotiation process.
    Bits:  9    EthAnRestartAutoNeg(rw) - Self Clearing bit should be set to '1' to restart the auto-negotiation process.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_KXAN_CTL(_x) (0x00007000 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_CTL_ETH_AN_RESET BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_CTL_ETH_AN_EXT_NEXT_PAGE_CTL BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_CTL_ETH_AN_AUTO_NEG_ENABLE BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_CTL_ETH_AN_RESTART_AUTO_NEG BIT(9)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnStatus - KXAN status register
    Bits:  9    EthAnParDetFault(ro) - Error with parallel detection. When the remote device does not support autonegotiation the autonegotiation module function falls back to parallel detection only monitoring the sync indications from the PCS layers. If none or more than one sync is detected the error is asserted.
    Bits:  7    EthAnExtNPStatus(ro) - Set to '1' to indicate that the Extended next pages are enabled.
    Bits:  6    EthAnPageRcvd(ro) - Latch High bit set to '1' to indicate that a page has been received. Set to '0' to indicate that a page has not been received.
    Bits:  5    EthAnComplete(ro) - Set to '1' to indicate that the Auto-Negotiation process is completed. Set to '0' to indicate that the Auto-Negotiation process is not completed.
    Bits:  4    EthAnRemFault(ro) - Latch High bit set to '1' to indicate that a remote fault condition is detected. Set to '0' to indicate that a remote fault condition is not detected.
    Bits:  3    EthAnAbility(ro) - Always set to '1' to indicate that the Core is able to perform Auto-Negotiation.
    Bits:  2    EthAnLinkStatus(ro) - Latched Low bit set to '1' to indicate that the PMA link is up. Set to '0' to indicate that the link is/was down. Note: this is a direct result of activity on the external pin phy_los.
    Bits:  0    EthAnLpAnAbility(ro) - Set to '1' to indicate that the Link Partner is able to perform Auto-Negotiation. Set to '0' to indicate that the Link Partner is not able to perform Auto-Negotiation.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_KXAN_STS(_x) (0x00007004 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_PAR_DET_FAULT BIT(9)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_EXT_NEXT_PAGE_STS BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_PAGE_RCVD BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_COMPLETE BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_REM_FAULT BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_ABILITY BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_LINK_STS BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_KXAN_STS_ETH_AN_LP_AN_ABILITY BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnAdvAbility0 - Advertised ability bits 15:0
    Bits: 15    EthAnNextPage(rw) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If a device wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnAck(rw) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that a device has successfully received its link partner's Link Codeword.
    Bits: 13    EthAnRemFault(rw) - The Remote Fault bit provides a standard transport mechanism for the transmission of simple fault information.
    Bits: 12:10 EthAnCPauseAbility(rw) - C2 (bit-12) is reserved. a) The C0 bit (bit-10) is the PAUSE bit indicating that the device is capable of providing the symmetric PAUSE functions. b) The C1 bit (bit-11) indicates that asymmetric PAUSE is supported. The value of the PAUSE bit (C0) when the C1 is set indicates the direction the PAUSE frames are supported for flow across the link.
    Bits:  9:5  EthAnENonce(rw) - Echoed Nonce field contains the nonce received from the link partner. When Acknowledge is set to logical zero, the bits in this field shall contain logical zeros. When Acknowledge is set to logical one, the bits in this field shall contain the value received in the Transmitted Nonce field from the link partner.
    Bits:  4:0  EthAnSelector(rw) - The selector field is a constant value defining 802.3ap support. The suggested value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_ADV_ABILITY0(_x) (0x00007008 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_NEXT_PAGE BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_ACK BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_REM_FAULT BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_C_PAUSE_ABILITY(_x) (((_x) & 0x7) << 10)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_C_PAUSE_ABILITY_of(_x) (((_x) >> 10) & 0x7)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_E_NONCE(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_E_NONCE_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_SELECTOR(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY0_ETH_AN_SELECTOR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnAdvAbility1 - Advertised ability bits 31:16
    Bits: 15:11 EthAnTechAbleReserved(rw) - Advertised ability Reserved bits.
    Bits: 10    EthAnTechAble100GBaseCr10(rw) - Advertised ability 100GBASE-CR10.
    Bits:  9    EthAnTechAble40GBaseCr4(rw) - Advertised ability 40GBASE-CR4.
    Bits:  8    EthAnTechAble40GBaseKr4(rw) - Advertised ability 40GBASE-KR4.
    Bits:  7    EthAnTechAble10GBaseKr(rw) - Advertised ability 10GBASE-KR.
    Bits:  6    EthAnTechAble10GBaseKx4(rw) - Advertised ability 10GBASE-KX4. (NOT SUPPORT DO NOT SET)
    Bits:  5    EthAnTechAble1GBaseKx(rw) - Advertised ability 1GBASE-KX.
    Bits:  4:0  EthAnAdvTNonce(rw) - Transmitted Nonce field contains a random or pseudo-random number. A new value shall be generated for each entry to the Ability Detect state.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_ADV_ABILITY1(_x) (0x0000700c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_RESERVED(_x) (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_RESERVED_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_ABLE_100GBASE_CR10 BIT(10)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_ABLE_40GBASE_CR4 BIT(9)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_ABLE_40GBASE_KR4 BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_ABLE_10GBASE_KR BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_ABLE_10GBASE_KX4 BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_TECH_ABLE_1GBASE_KX BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_ADV_T_NONCE(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY1_ETH_AN_ADV_T_NONCE_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnAdvAbility2 - Advertised ability bits 47:32
    Bits: 15    EthAnFecRequested(rw) - FEC capability F1: FEC requested.
    Bits: 14    EthAnFecAbility(rw) - FEC capability F0: FEC ability.
    Bits: 13:0  EthAnTechAbilityA24A11(rw) - Bit-13 to Bit-0 are reserved.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_ADV_ABILITY2(_x) (0x00007010 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY2_ETH_AN_FEC_REQUESTED BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY2_ETH_AN_FEC_ABILITY BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY2_ETH_AN_TECH_ABILITY_A24_A11(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_ADV_ABILITY2_ETH_AN_TECH_ABILITY_A24_A11_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnRemAbility0 - Received ability bits 15:0
    Bits: 15    EthAnNextPage(ro) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If a device wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnAck(ro) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that a device has successfully received its link partner's Link Codeword.
    Bits: 13    EthAnRemFault(ro) - The Remote Fault bit provides a standard transport mechanism for the transmission of simple fault information.
    Bits: 12:10 EthAnCPauseAbility(ro) - C2 (bit-12) is reserved. a) The C0 bit (bit-10) is the PAUSE bit indicating that the device is capable of providing the symmetric PAUSE functions. b) The C1 bit (bit-11) indicates that asymmetric PAUSE is supported. The value of the PAUSE bit (C0) when the C1 is set indicates the direction the PAUSE frames are supported for flow across the link.
    Bits:  9:5  EthAnENonce(ro) - Echoed Nonce field contains the nonce received from the link partner. When Acknowledge is set to logical zero, the bits in this field shall contain logical zeros. When Acknowledge is set to logical one, the bits in this field shall contain the value received in the Transmitted Nonce field from the link partner.
    Bits:  4:0  EthAnSelector(ro) - The selector field is a constant value defining 802.3ap support. The suggested value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_REM_ABILITY0(_x) (0x00007014 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_NEXT_PAGE BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_ACK BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_REM_FAULT BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_C_PAUSE_ABILITY(_x) (((_x) & 0x7) << 10)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_C_PAUSE_ABILITY_of(_x) (((_x) >> 10) & 0x7)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_E_NONCE(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_E_NONCE_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_SELECTOR(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY0_ETH_AN_SELECTOR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnRemAbility1 - Received ability bits 31:16
    Bits: 10    EthAnTechAble100GBaseCr10(ro) - Remote ability 100GBASE-CR10.
    Bits:  9    EthAnTechAble40GBaseCr4(ro) - Remote ability 40GBASE-CR4.
    Bits:  8    EthAnTechAble40GBaseKr4(ro) - Remote ability 40GBASE-KR4.
    Bits:  7    EthAnTechAble10GBaseKr(ro) - Remote ability 10GBASE-KR.
    Bits:  6    EthAnTechAble10GBaseKx4(ro) - Remote ability 10GBASE-KX4. (NOT SUPPORT DO NOT SET)
    Bits:  5    EthAnTechAble1GBaseKx(ro) - Remote ability 1GBASE-KX.
    Bits:  4:0  EthAnRemTNonce(ro) - Transmitted Nonce field contains a random or pseudo-random number. A new value shall be generated for each entry to the Ability Detect state.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_REM_ABILITY1(_x) (0x00007018 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_TECH_ABLE_100GBASE_CR10 BIT(10)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_TECH_ABLE_40GBASE_CR4 BIT(9)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_TECH_ABLE_40GBASE_KR4 BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_TECH_ABLE_10GBASE_KR BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_TECH_ABLE_10GBASE_KX4 BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_TECH_ABLE_1GBASE_KX BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_REM_T_NONCE(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY1_ETH_AN_REM_T_NONCE_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnRemAbility2 - Received ability bits 47:32
    Bits: 15    EthAnFecRequested(ro) - FEC capability F1: FEC requested.
    Bits: 14    EthAnFecAbility(ro) - FEC capability F0: FEC ability.
    Bits: 13:0  EthAnTechAbilityA24A11(ro) - Bit-13 to Bit-0 are reserved.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_REM_ABILITY2(_x) (0x0000701c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY2_ETH_AN_FEC_REQUESTED BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY2_ETH_AN_FEC_ABILITY BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY2_ETH_AN_TECH_ABILITY_A24_A11(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_REM_ABILITY2_ETH_AN_TECH_ABILITY_A24_A11_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnMsCnt - Upper 16 bits of 18-bit 1ms counter.
    Bits: 15:0  EthAnMsCnt(rw) - Number of 6.4ns steps required for counting 1ms. Upper 16 bits of 18-bit counter value. The lower 2 bits are fixed to '01' internally. Defaults to 0x9896 representing a timer value of 156249, which defines 1 millisecond
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_MS_CNT(_x) (0x00007020 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_MS_CNT_ETH_AN_MS_COUNT(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_MS_CNT_ETH_AN_MS_COUNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnXnp0 - Autoneg Next page ability word bits 15:0.
    Bits: 15    EthAnXnpNextPage(rw) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If a device wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnXnpAck(rw) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that a device has successfully received its link partner's Link Codeword.
    Bits: 13    EthAnXnpMP(rw) - Message page bit. There are two types of Next page word. Message page=(1)/Unformatted page=(0). For the Message Next Pages, the MP bit shall be set to logical one and for the Unformatted Next Pages, the MP bit shall be set to logical zero.
    Bits: 12    EthAnXnpAck2(rw) - Acknowledge 2 (Ack2) is used to indicate that the receiver is able to act on the information (or perform the task) defined in the message.
    Bits: 11    EthAnXnpToggleBit(rw) - Flag to keep track of the state of the local device's Toggle bit. Initial value is taken from base page.
    Bits: 10:0  EthAnXnpMU(rw) - These bits can be used as Message code field or Unformatted code field. When bit-13 is logical one, these bits represent message code field. Predefined message code field should be used as specified in the standard 802.3ap. For the null message code the value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_XNP_0(_x) (0x00007024 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_NEXT_PAGE BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_ACK BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_MP BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_ACK_2 BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_TOGGLE_BIT BIT(11)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_MU(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_AN_XNP_MU_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnXnp1 - Autoneg Next page ability word bits 31:16.
    Bits: 15:0  EthAnXnpUnformatted(rw) - Unformatted code field. Message code defines how the Unformatted codes will be interpreted.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_XNP_1(_x) (0x00007028 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_1_ETH_AN_XNP_UNFORMATTED(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_1_ETH_AN_XNP_UNFORMATTED_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnXnp2 - Autoneg Next page ability word bits 47:32.
    Bits: 15:0  EthAnXnpUnformatted(rw) - Unformatted code field. Message code defines how the Unformatted codes will be interpreted.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_XNP_2(_x) (0x0000702c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_2_ETH_AN_XNP_UNFORMATTED(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_XNP_2_ETH_AN_XNP_UNFORMATTED_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnLpXnp0 - Received Link partner Next page ability bits 15:0.
    Bits: 15    EthAnLpXnpNextPage(ro) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If the Link Partner wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnLpXnpAck(ro) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that the link partner has successfully received the Link Codeword.
    Bits: 13    EthAnLpXnpMP(ro) - Message page bit. There are two types of Next page word. Message page=(1)/Unformatted page=(0). For the Message Next Pages, the MP bit shall be set to logical one and for the Unformatted Next Pages, the MP bit shall be set to logical zero.
    Bits: 12    EthAnLpXnpAck2(ro) - Acknowledge 2 (Ack2) is used to indicate that the Link Partner receiver is able to act on the information (or perform the task) defined in the message.
    Bits: 11    EthAnLpXnpToggleBit(ro) - Flag to keep track of the state of the Link Partner device's Toggle bit.
    Bits: 10:0  EthAnLpXnpMU(ro) - These bits can be used as Message code field or Unformatted code field. When bit-13 is logical one, these bits represent message code field. Predefined message code field should be used as specified in the standard 802.3ap. For the null message code the value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_LP_XNP_0(_x) (0x00007030 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_NEXT_PAGE BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_ACK BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_MP BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_ACK_2 BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_TOGGLE_BIT BIT(11)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_MU(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_LP_XNP_0_ETH_AN_LP_XNP_MU_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnLpXnp1 - Received Link partner Next page ability bits 31:16.
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnLpXnp2 - Received Link partner Next page ability bits 47:32.
    Bits: 15:0  EthAnLPXnpUnformatted(ro) - Unformatted code field. Message code defines how the Unformatted codes will be interpreted.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_LP_XNP_1(_x) (0x00007034 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_LP_XNP_2(_x) (0x00007038 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETHANLPXNP12_ETH_AN_LP_XNP_UNFORMATTED(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETHANLPXNP12_ETH_AN_LP_XNP_UNFORMATTED_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnBpEthStatus - Reflects the currently selected operating mode.
    Bits:  8    EthAn100GCr10(ro) - 100G CR10.
    Bits:  6    EthAn40GCr4(ro) - 40G CR4.
    Bits:  5    EthAn40GKr4(ro) - 40G KR4.
    Bits:  4    EthAnFec(ro) - FEC.
    Bits:  3    EthAn10GKr(ro) - 10G KR.
    Bits:  2    EthAn10GKx4(ro) - 10G KX4. NOT SUPPORTED
    Bits:  1    EthAn1GKx(ro) - 1G KX.
    Bits:  0    EthAlways1(ro) - Always '1'.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_ETH_AN_BP_ETH_STS(_x) (0x0000703c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_100G_CR10 BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_40G_CR4 BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_40G_KR4 BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_FEC BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_10G_KR BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_10G_KX4 BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_1G_KX BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHAUTONEG_MACETHAUTONEGSEG_ETH_AN_BP_ETH_STS_ETH_AN_1 BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRCtl - Base-R PMD control.
    Bits:  1    EthFecTrainingEnable(rw) - Should be set to '1' to enable the Base-R startup protocol. Should be set to '0' (Reset value) to disable the Base-R startup protocol.
    Bits:  0    EthFecRestartTraining(rw) - Self Clearing Bit, should be set to '1' to restart the Base-R startup protocol. When '0' (Reset value) normal operation is enabled.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_KR_CTL(_x) (0x00007400 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_CTL_ETH_FEC_TRAINING_ENABLE BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_CTL_ETH_FEC_RESTART_TRAINING BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRStatus - Base-R PMD status.
    Bits: 15    EthFecSignalDetection(ro) - When set to '1', indicates that the training process is complete.
    Bits:  3    EthFecTrainingFail(ro) - When set to '0', indicates that Training failure has not been detected. When set to '1', indicates that Training failure has been detected.
    Bits:  2    EthFecStartUpStatus(ro) - When set to '0', indicates that the startup protocol is completed. When set to '1', indicates that the startup protocol is in progress.
    Bits:  1    EthFecFrameLock(ro) - When set to '0', indicates that Training frame delineation is not detected. When set to '1', indicates that Training frame delineation is detected.
    Bits:  0    EthFecRcvrStatus(rw) - When set to '0', indicates that the Receiver training is proceeding. When set to '1' by the application, indicates that the Receiver is trained and is ready to receive data. Note: this bit is writable, which differs from the corresponding notion in IEEE 802.3 Clause 45.2.1.77 for MMD register 1.151) as the application has to decide when the local device is trained. Writing this bit sets the mr_trained variable allowing the training statemachine to proceed (see IEEE 802.3 Clause 72.6.10.3.1).
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_KR_STATUS(_x) (0x00007404 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_STATUS_ETH_FEC_SIGNAL_DETECTION BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_STATUS_ETH_FEC_TRAINING_FAIL BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_STATUS_ETH_FEC_START_UP_STS BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_STATUS_ETH_FEC_FRAME_LOCK BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_STATUS_ETH_FEC_RCVR_STS BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLpCoef - Base-R LP coefficient update.
    Bits: 13    EthFecLpPreset(ro) - Should be set '1' to preset the transmitter coefficients, should be to '0' to enable normal operation.
    Bits: 12    EthFecLpInitialize(ro) - Should be set '1' to initialize the transmitter coefficients, should be to '0' to enable normal operation.
    Bits:  5:4  EthFecLpCoefP1Update(ro) - Coef (+1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  3:2  EthFecLpCoef0Update(ro) - Coef (0) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  1:0  EthFecLpCoefM1Update(ro) - Coef (-1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_KR_LP_COEF(_x) (0x00007408 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_PRESET BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_INITIALIZE BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_COEF_P1_UPDATE(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_COEF_P1_UPDATE_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_COEF_0_UPDATE(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_COEF_0_UPDATE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_COEF_M1_UPDATE(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_COEF_ETH_FEC_LP_COEF_M1_UPDATE_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLpStatus - Base-R LP status report.
    Bits: 15    EthFecLpRcvrReady(ro) - Set to '1' when the LP receiver has determined that training is complete and is prepared to receive data. Set to '0' when the LP receiver is requesting that training continues.
    Bits:  5:4  EthFecLpCoefP1Status(ro) - Coef (+1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  3:2  EthFecLpCoef0Status(ro) - Coef (0) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  1:0  EthFecLpCoefM1Status(ro) - Coef (-1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_KR_LP_STATUS(_x) (0x0000740c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_RCVR_READY BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_COEF_P1_STS(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_COEF_P1_STS_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_COEF_0_STS(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_COEF_0_STS_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_COEF_M1_STS(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LP_STATUS_ETH_FEC_LP_COEF_M1_STS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLdCoef - Base-R LD coefficient update.
    Bits: 13    EthFecLdPreset(rw) - Set '1' to preset the device transmitter coefficients, set to '0' to enable normal operation.
    Bits: 12    EthFecLdInitialize(rw) - Set '1' to initialize the device transmitter coefficients, set to '0' to enable normal operation.
    Bits:  5:4  EthFecLdCoefP1Update(rw) - Coef (+1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  3:2  EthFecLdCoef0Update(rw) - Coef (0) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  1:0  EthFecLdCoefM1Update(rw) - Coef (-1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_KR_LD_COEF(_x) (0x00007410 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_PRESET BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_INITIALIZE BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_COEF_P1_UPDATE(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_COEF_P1_UPDATE_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_COEF_0_UPDATE(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_COEF_0_UPDATE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_COEF_M1_UPDATE(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_COEF_ETH_FEC_LD_COEF_M1_UPDATE_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLdStatus - Base-R LD status report.
    Bits: 15    EthFecLdRcvrReady(rw) - Set to '1' when the LD receiver has determined that training is complete and is prepared to receive data. Set to '0' when the LD receiver is requesting that training continues.
    Bits:  5:4  EthFecLdCoefP1Status(rw) - Coef (+1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  3:2  EthFecLdCoef0Status(rw) - Coef (0) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  1:0  EthFecLdCoefM1Status(rw) - Coef (-1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_KR_LD_STATUS(_x) (0x00007414 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_RCVR_READY BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_COEF_P1_STS(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_COEF_P1_STS_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_COEF_0_STS(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_COEF_0_STS_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_COEF_M1_STS(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_KR_LD_STATUS_ETH_FEC_LD_COEF_M1_STS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecAbility - Base-R FEC ability.
    Bits:  1    EthFecErrIndicationAble(ro) - Set to '1' when the Core implements the FEC functions to indicate that the FEC is able to report FEC decoding errors to the PCS Layer. Set to '0' when the Core does not implement the FEC functions.
    Bits:  0    EthFecAble(ro) - Set to '1' when the Core implements the FEC functions, set to '0' when the Core does not implement the FEC functions.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_ABILITY(_x) (0x00007418 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_ABILITY_ETH_FEC_ERR_INDICATION_ABLE BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_ABILITY_ETH_FEC_ABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecControl - Base-R FEC control.
    Bits:  1    EthFecErrIndicationEnble(rw) - Should be set to '1' to configure the FEC decoder to indicate errors to the PCS layer. Should be set to '0' (Reset value) to configure the FEC decoder to not indicate errors to the PCS layer.
    Bits:  0    EthFecEnable(rw) - Should be set to '1' to force the Core FEC functions. Should be set to '0' (Reset value) to control the Core FEC functions by the autonegotiation core.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_CONTROL(_x) (0x0000741c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_CONTROL_ETH_FEC_ERR_INDICATION_ENABLE BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_CONTROL_ETH_FEC_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecStatus - Base-R FEC status.
    Bits:  1    EthFecLockedOdd(ro) - Set to '1' when the FEC decoder has locked on the block boundary on virtual lane 1. Set to '0' otherwise. Note: This bit is only valid in 100G mode of operation.
    Bits:  0    EthFecLocked(ro) - Set to '1' when the FEC decoder has locked on the block boundary. Set to '0' otherwise. Note: In 100G mode of operation, this bit refers to virtual lane 0.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_STATUS(_x) (0x00007420 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_STATUS_ETH_FEC_LOCKED_ODD BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETH_FEC_STATUS_ETH_FEC_LOCKED BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecCErrBlkCntLo - Base-R FEC Corrected block counter 15:0.
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecNcErrBlkCntLo - Base-R FEC Uncorrected block counter 15:0.
  Register: MacEthFecLT_EthFecCErrCntLoVl1 - Base-R FEC Corrected block counter 15:00. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl3 - Base-R FEC Corrected block counter 15:00. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl5 - Base-R FEC Corrected block counter 15:00. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl7 - Base-R FEC Corrected block counter 15:00. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl9 - Base-R FEC Corrected block counter 15:00. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl11 - Base-R FEC Corrected block counter 15:00. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl13 - Base-R FEC Corrected block counter 15:00. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl15 - Base-R FEC Corrected block counter 15:00. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl17 - Base-R FEC Corrected block counter 15:00. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl19 - Base-R FEC Corrected block counter 15:00. virtual lane 19 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl1 - Base-R FEC UnCorrected block counter 15:00. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl3 - Base-R FEC UnCorrected block counter 15:00. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl5 - Base-R FEC UnCorrected block counter 15:00. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl7 - Base-R FEC UnCorrected block counter 15:00. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl9 - Base-R FEC UnCorrected block counter 15:00. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl11 - Base-R FEC UnCorrected block counter 15:00. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl13 - Base-R FEC UnCorrected block counter 15:00. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl15 - Base-R FEC UnCorrected block counter 15:00. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl17 - Base-R FEC UnCorrected block counter 15:00. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl19 - Base-R FEC UnCorrected block counter 15:00. virtual lane 19 (100G)
    Bits: 15:0  EthFecBlocksCountLo(ro) - Bits 15:0 of the register are bits 15:0 of the counter.(clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_CORR_BLK_CNT_LO(_x) (0x00007424 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_UNCORR_BLK_CNT_LO(_x) (0x0000742c + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL1 0x00007700
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL3 0x00007708
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL5 0x00007710
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL7 0x00007718
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL9 0x00007720
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL11 0x00007728
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL13 0x00007730
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL15 0x00007738
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL17 0x00007740
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_LO_VL19 0x00007748
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL1 0x00007780
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL3 0x00007788
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL5 0x00007790
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL7 0x00007798
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL9 0x000077a0
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL11 0x000077a8
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL13 0x000077b0
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL15 0x000077b8
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL17 0x000077c0
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_LO_VL19 0x000077c8
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETHFECBLKCNTLO_ETH_FEC_BLOCKS_COUNT_LO(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETHFECBLKCNTLO_ETH_FEC_BLOCKS_COUNT_LO_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecCErrBlkCntHi - Base-R FEC Corrected block counter 31:16.
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecNcErrBlkCntHi - Base-R FEC Uncorrected block counter 31:16.
  Register: MacEthFecLT_EthFecCErrCntHiVl1 - Base-R FEC Corrected block counter 31:16. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl3 - Base-R FEC Corrected block counter 31:16. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl5 - Base-R FEC Corrected block counter 31:16. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl7 - Base-R FEC Corrected block counter 31:16. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl9 - Base-R FEC Corrected block counter 31:16. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl11 - Base-R FEC Corrected block counter 31:16. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl13 - Base-R FEC Corrected block counter 31:16. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl15 - Base-R FEC Corrected block counter 31:16. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl17 - Base-R FEC Corrected block counter 31:16. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl19 - Base-R FEC Corrected block counter 31:16. virtual lane 19 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl1 - Base-R FEC UnCorrected block counter 31:16. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl3 - Base-R FEC UnCorrected block counter 31:16. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl5 - Base-R FEC UnCorrected block counter 31:16. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl7 - Base-R FEC UnCorrected block counter 31:16. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl9 - Base-R FEC UnCorrected block counter 31:16. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl11 - Base-R FEC UnCorrected block counter 31:16. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl13 - Base-R FEC UnCorrected block counter 31:16. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl15 - Base-R FEC UnCorrected block counter 31:16. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl17 - Base-R FEC UnCorrected block counter 31:16. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl19 - Base-R FEC UnCorrected block counter 31:16. virtual lane 19 (100G)
    Bits: 15:0  EthFecBlocksCountHi(ro) - Bits 15:0 of the register are bits 31:16 of the counter.(clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_CORR_BLK_CNT_HI(_x) (0x00007428 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_ETH_FEC_UNCORR_BLK_CNT_HI(_x) (0x00007430 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL1 0x00007704
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL3 0x0000770c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL5 0x00007714
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL7 0x0000771c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL9 0x00007724
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL11 0x0000772c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL13 0x00007734
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL15 0x0000773c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL17 0x00007744
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_CORR_BLK_CNT_HI_VL19 0x0000774c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL1 0x00007784
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL3 0x0000778c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL5 0x00007794
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL7 0x0000779c
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL9 0x000077a4
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL11 0x000077ac
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL13 0x000077b4
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL15 0x000077bc
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL17 0x000077c4
#define NFP_NBI_MACX_ETH_MacEthFecLT_ETH_FEC_UNCORR_BLK_CNT_HI_VL19 0x000077cc
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETHFECBLKCNTHI_ETH_FEC_BLOCKS_COUNT_HI(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHFECLT_MACETHFECLTSEG_ETHFECBLKCNTHI_ETH_FEC_BLOCKS_COUNT_HI_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthPrbs_MacEthPrbsEnable - MAC0 PRBS enables
    Bits: 23    EthPrbs9EnSeg11(rw) - Enable PRBS9 generator on lane 11.
    Bits: 22    EthPrbs9EnSeg10(rw) - Enable PRBS9 generator on lane 10.
    Bits: 21    EthPrbs9EnSeg9(rw) - Enable PRBS9 generator on lane 9.
    Bits: 20    EthPrbs9EnSeg8(rw) - Enable PRBS9 generator on lane 8.
    Bits: 19    EthPrbs9EnSeg7(rw) - Enable PRBS9 generator on lane 7.
    Bits: 18    EthPrbs9EnSeg6(rw) - Enable PRBS9 generator on lane 6.
    Bits: 17    EthPrbs9EnSeg5(rw) - Enable PRBS9 generator on lane 5.
    Bits: 16    EthPrbs9EnSeg4(rw) - Enable PRBS9 generator on lane 4.
    Bits: 15    EthPrbs9EnSeg3(rw) - Enable PRBS9 generator on lane 3.
    Bits: 14    EthPrbs9EnSeg2(rw) - Enable PRBS9 generator on lane 2.
    Bits: 13    EthPrbs9EnSeg1(rw) - Enable PRBS9 generator on lane 1.
    Bits: 12    EthPrbs9EnSeg0(rw) - Enable PRBS9 generator on lane 0.
    Bits: 11    EthPrbs31EnSeg11(rw) - Enable PRBS31 generator on lane 11.
    Bits: 10    EthPrbs31EnSeg10(rw) - Enable PRBS31 generator on lane 10.
    Bits:  9    EthPrbs31EnSeg9(rw) - Enable PRBS31 generator on lane 9.
    Bits:  8    EthPrbs31EnSeg8(rw) - Enable PRBS31 generator on lane 8.
    Bits:  7    EthPrbs31EnSeg7(rw) - Enable PRBS31 generator on lane 7.
    Bits:  6    EthPrbs31EnSeg6(rw) - Enable PRBS31 generator on lane 6.
    Bits:  5    EthPrbs31EnSeg5(rw) - Enable PRBS31 generator on lane 5.
    Bits:  4    EthPrbs31EnSeg4(rw) - Enable PRBS31 generator on lane 4.
    Bits:  3    EthPrbs31EnSeg3(rw) - Enable PRBS31 generator on lane 3.
    Bits:  2    EthPrbs31EnSeg2(rw) - Enable PRBS31 generator on lane 2.
    Bits:  1    EthPrbs31EnSeg1(rw) - Enable PRBS31 generator on lane 1.
    Bits:  0    EthPrbs31EnSeg0(rw) - Enable PRBS31 generator on lane 0.
*/
#define NFP_NBI_MACX_ETH_MacEthPrbs_ETH_PRBS_ENABLE          0x00007800
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG11 BIT(23)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG10 BIT(22)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG9 BIT(21)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG8 BIT(20)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG7 BIT(19)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG6 BIT(18)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG5 BIT(17)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG4 BIT(16)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG3 BIT(15)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG2 BIT(14)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG1 BIT(13)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS9_EN_SEG0 BIT(12)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG11 BIT(11)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG10 BIT(10)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG9 BIT(9)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG8 BIT(8)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG7 BIT(7)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG6 BIT(6)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG5 BIT(5)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG4 BIT(4)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG3 BIT(3)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG2 BIT(2)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG1 BIT(1)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETH_PRBS_ENABLE_ETH_PRBS31_EN_SEG0 BIT(0)
/*----------------------------------------------------------------
  Register: MacEthPrbs_MacEthPrbs31ErrCntSeg[12] - MACX PRBS31 Err count 15:0
  Register: MacEthPrbs_MacEthPrbs9ErrCntSeg[12] - MACX PRBS9 Err count 15:0
    Bits: 15:0  EthPrbsErrCnt(ro) - Bits 15:0 of the register are the count.(clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthPrbs_ETH_PRBS31_ERR_CNT_SEG(_x) (0x00007804 + (0x4 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthPrbs_ETH_PRBS9_ERR_CNT_SEG(_x) (0x00007834 + (0x4 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETHPRBSERRCNT_ETH_PRBS_ERR_COUNT(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MACETHPRBS_ETHPRBSERRCNT_ETH_PRBS_ERR_COUNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacCoreGasketReg[10] - Mac Gasket Memory Control Register
    Bits: 14    MacMemCtrlBC2(rw) - Mac Cores Memory Control BC2.
    Bits: 13    MacMemCtrlBC1(rw) - Mac Cores Memory Control BC1.
    Bits: 12    MacMemCtrlTest1B(rw) - Mac Cores Memory Control TEST1B.
    Bits: 11    MacMemCtrlTest1A(rw) - Mac Cores Memory Control TEST1A/TEST1.
    Bits: 10    MacMemCtrlRMEB(rw) - Mac Cores Memory Control RMEB/RME.
    Bits:  9:8  MacMemCtrlRA(rw) - Mac Cores Memory Control RA.
    Bits:  7:4  MacMemCtrlRMB(rw) - Mac Cores Memory Control RMB.
    Bits:  3:0  MacMemCtrlRMA(rw) - Mac Cores Memory Control RMA/RM.
*/
#define NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG(_x)          (0x00000000 + (0x4 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_BC2 BIT(14)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_BC1 BIT(13)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_TEST1B BIT(12)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_TEST1A BIT(11)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMEB BIT(10)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RA(_x) (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RA_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMB(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMB_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMA(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMA_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacCoresPowerCsrs[4] - Mac Memory control Power ShutDown CSRs
    Bits: 31:0  MacPowerCsrs(rw) - 32 bit Memory Control Power CSRs. Setting bit to 1 Shuts down the memory.
*/
#define NFP_NBI_MACX_MEMCTL_MAC_CORE_POWER_CSRS(_x)          (0x00000200 + (0x4 * ((_x) & 0x3)))
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_POWER_CSRS_MAC_POWER_CSRS(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_MEMCTL_MAC_CORE_POWER_CSRS_MAC_POWER_CSRS_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
    Bits:  3:0  AprobeTxAddr(rw) - Address for TX lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_APROBE_TX_ADDR(_x) (0x00000000 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_APROBE_TX_ADDR 0x0000e000
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBETXADDR_APROBE_TX_ADDR(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBETXADDR_APROBE_TX_ADDR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
    Bits:  7:3  AprobeRxAddr(rw) - Address for RX lane aprobe data.
    Bits:  2:0  AprobeRegRxTxAddr(rw) - Address for RX and TX regulator lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_APROBE_RX_ADDR(_x) (0x00000001 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_APROBE_RX_ADDR 0x0000e001
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_RX_ADDR(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_RX_ADDR_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_REG_RXTX_ADDR(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_REG_RXTX_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
    Bits:  3    RstLanePcsSoftTx(rw) - TX lane soft reset. Active Low
    Bits:  2    RstLanePcsSoftRx(rw) - RX lane soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstBypassEn(rw) - RX and TX lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    Cmnctlporhardrstbypass(rw) - RX and TX lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TXRX_LANE_CONTROL(_x) (0x00000002 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TXRX_LANE_CONTROL 0x0000e002
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_RSTLANEPCSSOFT_TX BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_RSTLANEPCSSOFT_RX BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_CMNCTLPOR_HARDRSTBYPASSEN BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_CMNCTLPOR_HARDRSTBYPASS BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
    Bits:  4:0  LanePcsPstateRx(rw) - Rx Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_PSTATE_RX(_x) (0x00000003 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_PSTATE_RX 0x0000e003
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATERX_LANEPCSPSTATE_RX(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATERX_LANEPCSPSTATE_RX_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
    Bits:  4:0  LanePcsPstateTx(rw) - TX Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_PSTATE_TX(_x) (0x00000004 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_PSTATE_TX 0x0000e004
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATETX_LANEPCSPSTATE_TX(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATETX_LANEPCSPSTATE_TX_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
    Bits:  6:4  PcsTxDataWidth(rw) - Defines TX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
    Bits:  2:0  PcsRxDataWidth(rw) - Defines RX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PCS_DATAWIDTH(_x) (0x00000005 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PCS_DATAWIDTH 0x0000e005
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSTX_DATAWIDTH(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSTX_DATAWIDTH_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSRX_DATAWIDTH(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSRX_DATAWIDTH_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
    Bits:  6:4  PcsTxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
    Bits:  2:0  PcsRxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_CONTROL(_x) (0x00000006 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_CONTROL 0x0000e006
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSTX_DIVRATE(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSTX_DIVRATE_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSRX_DIVRATE(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSRX_DIVRATE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
    Bits:  7    LBParRx2TxTimedEn(rw) - PMA Parallel RX-to-TX loop-back enable. Parallel loopback from the PMA receive lane 20-bit data ports, to the transmit lane 20-bit data ports. 0 = Disables loopback. 1 = Loops back the 20-bit receive data port to the transmitter.
    Bits:  6    LBTx2RxIoTimedEn(rw) - PMA TX-to-RX I/O serial loop-back enable (loop back done directly from TX to RX pads). Serial IO loopback from the transmit lane IO pins to the receive lane IO pins: 0 = Disables loopback. 1 = Loops back the driver IO signal to the RX IO pins.
    Bits:  5    LBTx2RxBufTimedEn(rw) - PMA TX-to-RX buffered serial loop-back enable (bypasses IO Driver). Serial transmit to receive buffered loopback: 0 = Disables loopback. 1 = Loops back the TX serializer output into the CDR.
    Bits:  4    LBRx2TxUntimedEn(rw) - PMA serial RX-to-TX loop-back enable (from AGC to IO Driver). Serial receive to transmit loopback: 0 = Disables loopback. 1 = Transmits the untimed, partial equalized RX signal out the transmit IO pins.
    Bits:  3    LBPllFbClk2CdrRefClkEn(rw) - PMA PLL feedback clock-to-CDR reference clock loopback enable.
    Bits:  2    LbCdrDivClk2TxEn(rw) - PMA CDR divided-recovered-clock loopback enable for internal GPON mode..
    Bits:  1    LBCdrDivClk2ExtEn(rw) - PMA CDR divided-recovered-clock loopback enable for external clean up GPON mode.
    Bits:  0    LBCdrClk2TxEn(rw) - PMA CDR recovered-clock loopback enable; asserted when PARRX2TXTIMEDEN is 1. Transmit bit clock select: 0 = Selects synthesizer bit clock for transmit. 1 = Selects CDR clock for transmit
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BISTREGISTER(_x) (0x00000007 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BISTREGISTER 0x0000e007
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_PARRX2TXTIMEDEN BIT(7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_TX2RXIOTIMEDEN BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_TX2RXBUFTIMEDEN BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_RX2TXUNTIMEDEN BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_PLLFBCLK2CDRREFCLKEN BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRDIVCLK2TXEN BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRDIVCLK2EXTEN BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRCLK2TXEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
    Bits:  4    RxBistRxLocked(rw) - RX BIST locked indicator. '0' Indicates BIST is not word locked and error comparisons have not begun yet. '1' Indicates BIST is word locked and error comparisons have begun.
    Bits:  3    RxBistErrCntOvf(rw) - RX BIST error count overflow indicator. Indicates an overflow in the number of byte errors identified during the course of the test. This word is stable to sample when *_DONE_* signal has asserted.
    Bits:  2    RxBistDone(rw) - RX BIST completion: '0' Indicates test is not completed. '1' Indicates the test has completed, and will remain high until a new test is initiated.
    Bits:  1    PcsTxBistEn(rw) - Transmit lane BIST enable.
    Bits:  0    PcsRxBistEn(rw) - Recieve lane BIST enable.Active High
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST2REGISTER(_x) (0x00000008 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST2REGISTER 0x0000e008
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_RXLOCKED BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_ERRCOUNT_OVERFLOW BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_DONE BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_PCSTXBIST_EN BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_PCSRXBIST_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
    Bits:  7:0  RxBistErrCount(rw) - RX BIST error count word. Indicates the number of byte errors identified during the course of the test.This word is stable to sample when *_DONE_* signal has asserted.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST3REGISTER(_x) (0x00000009 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST3(_x) (0x0000000a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST3REGISTER 0x0000e009
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST3 0x0000e00a
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST3_RXBIST_ERRCOUNT(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST3_RXBIST_ERRCOUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
    Bits:  5    RXSigdetCdrLock2Data(rw) - RX CDR Lock to Data status indicator 0 - CDR is locked to reference clock 1 - CDR is locked to data.
    Bits:  4    RxPpmLockStatus(rw) - RX lane PLL lock status. 1 = CDR VCO is locked to reference clock.
    Bits:  3    PcsOutTxStatus(rw) - TX lane state transition status. Indicates the TX has completed a requested state transition. 0 = TX Lane has not completed its state change. 1 = TX Lane has completed its state change.
    Bits:  2    PcsOutTxReady(rw) - TX lane ready status signal: 0 = TX Lane is not ready for data transmission. 1 = TX Lane is ready for data transmission.
    Bits:  1    PcsOutRxStatus(rw) - RX lane state transition status. Indicates the RX has completed a requested state transition. 0 = RX Lane has not completed its state change. 1 = RX Lane has completed its state change.
    Bits:  0    PcsOutRxReady(rw) - RX lane ready status signal. 0 = RX Lane is not ready for data transmission. 1 = RX Lane is ready for data transmission.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_STATUS(_x) (0x0000000b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_STATUS 0x0000e00b
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_RXSIGDET_CDRLOCK2DATA BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_RXPPM_LOCKSTATUS BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTTX_STATUS BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTTX_READY BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTRX_STATUS BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTRX_READY BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyIclk(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_CALIBRATION(_x) (0x0000000c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_CALIBRATION 0x0000e00c
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCAL_RXCALDUTY_ICLK(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCAL_RXCALDUTY_ICLK_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyQclk(rw) - RX lane QCLK duty calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_CALIBRATION2(_x) (0x0000000d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_CALIBRATION2 0x0000e00d
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCALQ_RXCALDUTY_QCLK(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCALQ_RXCALDUTY_QCLK_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData0(rw) - RX lane DATA0 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION3(_x) (0x0000000e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION3 0x0000e00e
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL3_RXCALOFFSET_DATA0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL3_RXCALOFFSET_DATA0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData1(rw) - RX lane DATA1 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION4(_x) (0x0000000f + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION4 0x0000e00f
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL31_RXCALOFFSET_DATA1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL31_RXCALOFFSET_DATA1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge0(rw) - RX lane EDGE0 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION5(_x) (0x00000010 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION5 0x0000e010
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE0_RXCALOFFSET_EDGE0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE0_RXCALOFFSET_EDGE0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge1(rw) - RX lane EDGE1 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION6(_x) (0x00000011 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION6 0x0000e011
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE1_RXCALOFFSET_EDGE1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE1_RXCALOFFSET_EDGE1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetRoam(rw) - RX lane roam comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION7(_x) (0x00000012 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION7 0x0000e012
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALR_RXCALOFFSET_ROAM(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALR_RXCALOFFSET_ROAM_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
    Bits:  3:0  RxCdrCalfoscCenterFreq(rw) - RX CDR VCO center frequency calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CAL_CDR_FREQ(_x) (0x00000013 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CAL_CDR_FREQ 0x0000e013
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL1_RXCDRCALFOSC_CENTERFREQ(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL1_RXCDRCALFOSC_CENTERFREQ_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
    Bits:  4:0  TxCalTclkDuty(rw) - TX lane clock duty calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CAL_TX_CLK(_x) (0x00000014 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CAL_TX_CLK 0x0000e014
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL2_TXCALTCLKDUTY(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL2_TXCALTCLKDUTY_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
    Bits:  7:3  TxDrvLevN(rw) - Defines the total number of driver units allocated to sum of the taps. The maximum value is 5'd23.
    Bits:  2:0  TxDrvHLev(rw) - Transmit Amplitude control signal. Used to define the full-scale maximum swing of the driver. 000=Not Supported, 001=1070mVdiff-pkpk (Default), 010=1140mVdiff-pkpk, 011=1200mVdiff-pkpk, 100=1260mVdiff-pkpk, 101=1310mVdiff-pkpk, 110=1350mVdiff-pkpk, 111=1400mVdiff-pkpk6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL(_x) (0x00000015 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL 0x0000e015
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_LEVN(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_LEVN_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_HLEV(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_HLEV_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
    Bits:  5:4  TxDrvLevNm2(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 2'h3.
    Bits:  3:0  TxDrvLevNm1(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 4'h9.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL2(_x) (0x00000016 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL2 0x0000e016
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM2(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM1(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
    Bits:  4:3  TxDrvSlew(rw) - TX driver Slew Rate control:00 - 31ps ,01 - 33ps,10 - 68ps,11 - 170ps
    Bits:  2:0  TxDrvLevNP1(rw) - Defines the total number of driver units allocated to the first pre-cursor (C-1) tap. The maximum value for C-1 is 3'h6.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL3(_x) (0x00000017 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL3 0x0000e017
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_SLEW(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_SLEW_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_LEVNP1(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_LEVNP1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
    Bits:  5:3  RxCalEqDfepstapf3DB(rw) - DFE post-shaping tap 3dB frequency -3'b000: 684MHz -3'b001: 576MHz -3'b010: 514MHz -3'b011: 435MHz -3'b100: 354MHz -3'b101: 281MHz -3'b110: 199MHz -3'b111: 125MHz
    Bits:  2:0  RxCalEqDcGain(rw) - RX agc high frequency dc gain: -3'b000: -3dB -3'b001: -2.5dB -3'b010: -2dB -3'b011: -1.5dB -3'b100: -1dB -3'b101: -0.5dB -3'b110: -0dB -3'b111: 0.5dB
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE(_x) (0x00000018 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_GEN2 0x00008026
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE 0x0000e018
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DFEPSTAPF3DB(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DFEPSTAPF3DB_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DCGAIN(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DCGAIN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:3  RxCalEqDfeTap1Gain(rw) - DFE first tap gain control -4'b0000: +1mVpeak -4'b0001: +10mVpeak . . . -4'b0110: +55mVpeak -4'b0111: +64mVpeak -4'b1000: -1mVpeak -4'b1001: -10mVpeak . . -4'b1110: -55mVpeak -4'b1111: -64mVpeak
    Bits:  2:0  RxCalEqDfepStapGain(rw) - DFE post-shaping tap gain 0: no pulse shaping tap 1: -24mVpeak 2: -45mVpeak 3: -64mVpeak 4: -80mVpeak 5: -93mVpeak 6: -101mVpeak 7: -105mVpeak
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE2(_x) (0x00000019 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE2 0x0000e019
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFETAP1GAIN(_x) (((_x) & 0xf) << 3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFETAP1GAIN_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFEPSTAPGAIN(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFEPSTAPGAIN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  7:4  RxCalEqDfeTap3Gain(rw) - DFE third tap gain control -4'b0000: +0mVpeak -4'b0001: +7mVpeak . . . -4'b0110: +38mVpeak -4'b0111: +44mVpeak -4'b1000: -0mVpeak -4'b1001: -7mVpeak . . -4'b1110: -38mVpeak -4'b1111: -44mVpeak
    Bits:  3:0  RxCalEqDfetap2Gain(rw) - DFE second tap gain control -4'b0000: +0mVpeak -4'b0001: +9mVpeak . . . -4'b0110: +46mVpeak -4'b0111: +53mVpeak -4'b1000: -0mVpeak -4'b1001: -9mVpeak . . -4'b1110: -46mVpeak -4'b1111: -53mVpeak
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE3(_x) (0x0000001a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFE_TAP2_GAIN_LUP 0x0000802d
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE3 0x0000e01a
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP3GAIN(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP3GAIN_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP2GAIN(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP2GAIN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:4  RxCalEqLoFreqAgcGain(rw) - Low frequency agc gain (att) select -3'b000: Disconnected -3'b001: -18.5dB -3'b010: -12.5dB -3'b011: -9dB -3'b100: -6.5dB -3'b101: -4.5dB -3'b110: -2.9dB -3'b111: -1.6dB
    Bits:  3:0  RxCalEqDfetap4Gain(rw) - DFE fourth tap gain control -4'b0000: +0mVpeak -4'b0001: +6mVpeak . . . -4'b0110: +29mVpeak -4'b0111: +33mVpeak -4'b1000: -0mVpeak -4'b1001: -6mVpeak . . -4'b1110: -29mVpeak -4'b1111: -33mVpeak
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE4(_x) (0x0000001b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFE_TAP4_GAIN_LUP 0x0000802e
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE4 0x0000e01b
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_LOFREQAGCGAIN(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_LOFREQAGCGAIN_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_DFETAP4GAIN(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_DFETAP4GAIN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
    Bits:  7:3  RxCalEqHiFreqAgcCap(rw) - High frequency agc boost control Min d0: Boost ~4dB Max d31: Boost ~20dB
    Bits:  2:0  PcsRxEqPreCalCodeSel(rw) - Provides a RX Equalizer Pre-Hint, prior to beginning adaptive equalization Please refer to Datasheet for a description of what backplane ranges the RX-Hint values are intended to support.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZE(_x) (0x0000001c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZE 0x0000e01c
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_RXCALEQ_HIFREQAGCCAP(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_RXCALEQ_HIFREQAGCCAP_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_PCSRXEQ_PRECAL_CODE_SEL(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_PCSRXEQ_PRECAL_CODE_SEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  7:0  RxeqBestEyeVal(rw) - RX lane best eye point measurement result.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX(_x) (0x0000001d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX 0x0000e01d
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ2_RXEQ_BEST_EYE_VAL(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ2_RXEQ_BEST_EYE_VAL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  5:0  RxeqBestEyeVal2(rw) - RX lane best eye point measurement result.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX2(_x) (0x0000001e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX2 0x0000e01e
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ3_RXEQ_BEST_EYE_VAL2(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ3_RXEQ_BEST_EYE_VAL2_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
    Bits:  2    RxCalRoamEyeMeasInCycleEn(rw) - RX lane single roam eye point measurement start signal. If asserted, single measurement at fix XADJUST and YADJUST is started.
    Bits:  1    RxCalEyeDiagFsminStart(rw) - Enables an eye diagram measurement within the PHY. 0 - Disables eye diagram measurement 1 - Enables eye diagram measurement
    Bits:  0    PcsRxeqStart(rw) - Adaptive RX Equalization enable 0 - Disables adaptive RX equalization 1 - Enables adaptive RX equalization
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_EYE_DIAGRAM(_x) (0x0000001f + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_EYE_DIAGRAM 0x0000e01f
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_RXCALROAMEYEMEASIN_CYCLEEN BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_RXCALEYEDIAGFSMIN_START BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_PCSRXEQ_START BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
    Bits:  3    RxeqDone(rw) - PHY Adaptive Equalization stauts Signal 0-Indicatest adaptive equalization results are not valid for sampling 1-Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  2    RxCalRoamEyeMeasDone(rw) - PMA Adaptive Equalization Status Signal 0 - Indicates adaptive equalization results are not valid for sampling. 1 - Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  1    RxCalEyeDiagFsmErr(rw) - Eye diagram error signal. Indicates if the measurement was invalid because the eye diagram was interrupted by the link entering electrical idle. 0 - Indicates eye diagram is valid. 1- Indicates an error occurred, and the eye diagram measurement should be re-run.
    Bits:  0    RxCalEyeDiagFsmDone(rw) - PHY Eye diagram measurement status signal: 0 - Indicates eye diagram results are not valid for sampling, 1 - Indicates eye diagram is complete and results are valid for sampling.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_CTL(_x) (0x00000020 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_CTL 0x0000e020
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXEQ_DONE BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALROAMEYEMEASDONE BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALEYEDIAGFSM_ERR BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALEYEDIAGFSM_DONE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjust(rw) - 7-bit eye diagram time adjust control - 6-bits per UI - spans 2 UI
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_RX_CAL_ROAM_X_ADJUST_INIT(_x) (0x00000021 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_RX_CAL_ROAM_X_ADJUST_INIT 0x0000e021
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMXADJUST_RXCALROAMXADJUST(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMXADJUST_RXCALROAMXADJUST_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
    Bits:  5:0  RxCalRoamYAdjustInit(rw) - 6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT(_x) (0x00000022 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT 0x00008022
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT 0x0000e022
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMYADJUSTINIT_RXCALROAMYADJUST(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMYADJUSTINIT_RXCALROAMYADJUST_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
    Bits:  7:0  RxCalEyeDiagFsmEyeSumLo(rw) - Eye diagram status low bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_LO(_x) (0x00000023 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_LO 0x0000e023
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMLO_RXCALEYEDIAGFSM_EYESUM_LO(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMLO_RXCALEYEDIAGFSM_EYESUM_LO_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
    Bits:  5:0  RxCalEyeDiagFsmEyeSumHi(rw) - Eye diagram status hi bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_HI(_x) (0x00000024 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_HI 0x0000e024
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMHI_RXCALEYEDIAGFSM_EYESUM_HI(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMHI_RXCALEYEDIAGFSM_EYESUM_HI_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
    Bits:  7:0  RxCalRoamEyeMeasAcc(rw) - RX lane single roam eye point measurement result. If 0, eye is open at current XADJUST and YADJUST settings
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX(_x) (0x00000025 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX2(_x) (0x00000026 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX 0x0000e025
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX2 0x0000e026
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAEYEDIAG2_RXCALROAMEYEMEAS_ACC(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAEYEDIAG2_RXCALROAMEYEMEAS_ACC_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
    Bits:  3    RxScopeEn(rw) - Enable PHY to go into 'Scope' mode. Allows for outputting entire eye diagram data. Active High.
    Bits:  2    RxRoamXorBitSel(rw) - Eye diagram type select bit. 0=Select oscilloscope mode, 1=Select Bit Error Contour mode.
    Bits:  0    RxCdrFbDivSlipCycle(rw) - Rising edge detection enable to activate a feedback divider slip (ie, M+1) for one feedback cycle.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_ROAM_SCOPE(_x) (0x00000027 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_ROAM_SCOPE 0x0000e027
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXSCOPE_EN BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXROAM_XORBITSEL BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXCDRFBDIVSLIP_CYCLE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
    Bits:  6    RxSigDetOvrEnCdrLock2Data(rw) - Enable for RXSIGDET_OVRCDRLOCK2DATA: 0 = CDR uses its internal locked to data signal, 1 = CDR uses RXSIGDET_OVRCDRLOCK2DATA.
    Bits:  5    RxSigDetOvrCdrLock2Data(rw) - Controls when the CDR should switch to lock to data, or lock to reference: 0 = CDR is locked to reference, 1 = CDR is locked to data.
    Bits:  4    PcsTxDetectRxEn(rw) - TX lane TX detect RX enable. Active High.
    Bits:  3    PcsTxBeaConEn(rw) - TX lane beacon enable. Active High.
    Bits:  2    PcsRxDmeEn(rw) - Receiver DME mode enable. Active High
    Bits:  1    CmnClkGenMuxselDpmatxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1]
    Bits:  0    CmnClkGenMuxselDpmarxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1].
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CONTROL(_x) (0x00000028 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CONTROL 0x0000e028
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_RXSIGDET_OVRENCDRLOCK2DATA BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_RXSIGDET_OVRCDRLOCK2DATA BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSTX_DETECTRXEN BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSTX_BEACONEN BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSRX_DME_EN BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_CMNCLKGENMUXSEL_DPMATXREF BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_CMNCLKGENMUXSEL_DPMARXREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
    Bits:  0    PcsTxTxclkDiv2En(rw) - Enables divide by two on main Transmit clock in the PCS. Used in 32-bit mode.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_CLK_DIV2(_x) (0x00000029 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_CLK_DIV2 0x0000e029
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXCLKDIV_PCSTX_TXCLK_DIV2_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
    Bits:  1    CmnClkGenMuxSelDpmaTxRef(rw) - Selects reference clock to be used in TX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaRxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_CMN_CLK_GENMUX_SEL(_x) (0x0000002a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_CMN_CLK_GENMUX_SEL 0x0000e02a
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACMNCLKGENMUXSEL_CMNCLKGENMUXSEL_DPMATXREF BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACMNCLKGENMUXSEL_CMNCLKGENMUXSEL_DPMARXREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
    Bits:  4:2  RxSigdetRxtramdetDebounceCount(rw) - Controls signal detection max run-length 000 - 1* Rate/Reference Clock frequency 001 - 2* Rate/Reference Clock frequency 010 - 4* Rate/Reference Clock frequency 011 - 6* Rate/ Reference Clock frequency 100 - 8* Rate/ Reference Clock frequency 101 - 12* Rate/ Reference Clock frequency 110 - 16* Rate/ Reference Clock frequency 111 and above - 32* Rate/ Reference Clock frequency
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_TRAN_DET_COUNT(_x) (0x00000030 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_TRAN_DET_COUNT 0x0000e030
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTRANDET_RXSIGDET_RXTRAMDET_DEBOUNCE_COUNT(_x) (((_x) & 0x7) << 2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTRANDET_RXSIGDET_RXTRAMDET_DEBOUNCE_COUNT_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    PCSRxEqLocWrEn(rw) - PCSRXEQ* override enable. Active Low.
    Bits:  6    PcsRXBistLocWrEn(rw) - PCSRXBIST* override enable. Active Low.
    Bits:  5    PcsRxLocWrEn(rw) - PCSRX* override enable. Active Low.
    Bits:  4    PcsOutTxLocWrEn(rw) - PCSOUTTX* override enable. Active Low.
    Bits:  3    PcsoutRxLocWrEn(rw) - PCSOUTRX* override enable. Active Low.
    Bits:  2    LbLocWrEn(rw) - LB* override enable. Active Low.
    Bits:  1    LanePcsStateLocWREn(rw) - LANEPCSPSTATE* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_OVERRIDE_EN(_x) (0x00000055 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_OVERRIDE_EN 0x0000e055
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRXEQ_LOCWREN BIT(7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRXBIST_LOCWREN BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRX_LOCWREN BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSOUTTX_LOCWREN BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSOUTRX_LOCWREN BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_LB_LOCWREN BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_LANEPCSPSTATE_LOCWREN BIT(1)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    RxCalRoamEyeAsInLocWrEn(rw) - RXCALROAMEYEMEASIN* override enable. Active Low.
    Bits:  6    RxCalOffSetLocWrEn(rw) - RXCALOFFSET* override enable. Active Low.
    Bits:  5    RxCalEyeDiaframSminLocWrEn(rw) - RXCALEYEDIAGFSMIN* override enable. Active Low.
    Bits:  4    RXcaleqLocRen(rw) - RXCALEQ* override enable. Active Low.
    Bits:  3    RxcalDutyLocwRen(rw) - RXCALDUTY* override enable. Active Low.
    Bits:  2    RstLanePcsSoftLowRen(rw) - RSTLANEPCSSOFT* override enable. Active Low.
    Bits:  1    PcsTxBistLocWrEn(rw) - PCSTXBIST* override enable. Active Low.
    Bits:  0    PcsTxLocWrEn(rw) - PCSTX* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_LANE_OVERRIDE_EN(_x) (0x00000056 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_LANE_OVERRIDE_EN 0x0000e056
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALROAMEYEMEASIN_LOCWREN BIT(7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALOFFSET_LOCWREN BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALEYEDIAGFSMIN_LOCWREN BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALEQ_LOCWREN BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALDUTY_LOCWREN BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RSTLANEPCSSOFT_LOCWREN BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_PCSTXBIST_LOCWREN BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_PCSTX_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
    Bits:  6    TxDrvLocWrEn(rw) - TXDRV* override enable. Active Low.
    Bits:  5    TxCalTclkDutyLocWrEn(rw) - TXCALTCLKDUTY* override enable. Active Low.
    Bits:  2    RxCdrCalFoscLocWrEn(rw) - RXCDRCALFOSC* override enable. Active Low.
    Bits:  1    RxCalRoamyAdjustLocWrEn(rw) - RXCALROAMYADJUST* override enable. Active Low
    Bits:  0    RxCalRoamXadjustLocWrEn(rw) - RXCALROAMXADJUST* override enable. Active Low
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_TX_LANE_CAL(_x) (0x00000057 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_TX_LANE_CAL 0x0000e057
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_TXDRV_LOCWREN BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_TXCALTCLKDUTY_LOCWREN BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCDRCALFOSC_LOCWREN BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCALROAMYADJUST_LOCWREN BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCALROAMXADJUST_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscHscountMuxd0(rw) - CDR VCO calibration register.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL(_x) (0x00000065 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1(_x) (0x00000066 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL 0x0000e065
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1 0x0000e066
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACDRCAL_RXCDRCALFOSC_HSCOUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACDRCAL_RXCDRCALFOSC_HSCOUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD0(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD0(_x) (0x00000067 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD0 0x0000e067
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD0_RXCDRCALFOSCMEAS_COUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD0_RXCDRCALFOSCMEAS_COUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD1(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD1(_x) (0x00000068 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD1 0x0000e068
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD1_RXCDRCALFOSCMEAS_COUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD1_RXCDRCALFOSCMEAS_COUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD0(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 0. Used in 'Scope' mode.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD0(_x) (0x00000069 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD0 0x0000e069
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD0_RXCDRFBDIVSLIP_MDIV_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD0_RXCDRFBDIVSLIP_MDIV_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD1(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD1(_x) (0x0000006a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD1 0x0000e06a
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD1_RXCDRFBDIVSLIP_MDIV_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD1_RXCDRFBDIVSLIP_MDIV_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD0(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD0(_x) (0x0000006b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD0 0x0000e06b
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUX_RXCDRREFCK_REFDIV_MUXD0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUX_RXCDRREFCK_REFDIV_MUXD0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD1(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD1(_x) (0x0000006c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD1 0x0000e06c
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUXD1_RXCDRREFCK_REFDIV_MUXD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUXD1_RXCDRREFCK_REFDIV_MUXD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  7:4  RxCDRCalFoscCenterFreqPhintMuxD1(rw) -
    Bits:  3:0  RxCDRCalFoscCenterFreqPhintMuxD0(rw) -
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_CENTER_FREQ_MUXD1(_x) (0x0000006d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_CENTER_FREQ_MUXD1 0x0000e06d
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD1(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
    Bits:  3    TxCalClkDutyPreDivEnMuxD1(rw) -
    Bits:  2    TxCalClkDutyPreDivEnMuxD0(rw) -
    Bits:  1    RxCalDutyPreDivEnmuxd1(rw) -
    Bits:  0    RxCalDutyPreDivEnmuxd0(rw) -
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TXRX_CAL_DUTY_PRE_DIVEN(_x) (0x0000006e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TXRX_CAL_DUTY_PRE_DIVEN 0x0000e06e
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_TXCALTCLKDUTYPREDIVEN_MUXD1 BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_TXCALTCLKDUTYPREDIVEN_MUXD0 BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_RXCALDUTY_PREDIVEN_MUXD1 BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_RXCALDUTY_PREDIVEN_MUXD0 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
    Bits:  5    VpcsifEiosDetEn(rw) - EIOS detector enable.0 - Disabled.1 - Enabled. PCS continually monitors for EIOS ordered sets, and if detected, will de-assert ICTL_PIPE_RXVALID shortly after.No EIOS detected:CDR should remains in current state EOIS detected:CDR should lock to reference
    Bits:  4    VpcseqDebugstepEn(rw) - RX Equalization calibration debug control.
    Bits:  3    VpcSeqDebugEn(rw) - RX Equalization calibration debug enable.0 - Normal operation 1 - Debug mode. FSM will not change states until a positive edge of VPCSEQ_DEBUGSTEPEN is detected
    Bits:  2    VpcBistChkHold(rw) - PCS BIST check output error hold enable.0 - Do not hold error counter.1 - Hold error counter
    Bits:  1    vpcbistChkEn(rw) - PCS BIST check enable.0 - Normal operation 1 - Enable BIST check
    Bits:  0    VpcBistChkClr(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG(_x) (0x00001007 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG 0x0000f007
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSIF_EIOS_DET_EN BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSEQ_DEBUGSTEPEN BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSEQ_DEBUGEN BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_HOLD BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_EN BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_CLR BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
    Bits:  7:6  VpcsencTxForceErr(rw) - 8b10b encoder error insertion control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Error transmitted
    Bits:  5:4  VpcsencForcePosDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Disparity forced to positive
    Bits:  3:2  VpcsencForceNegDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte. 0 - Normal operation 1 - Disparity forced to negative.
    Bits:  1:0  VpcsBistDatamode(rw) - PCS BIST data mode selection. 0 - UDP 1 - prbs7 2 - prbs23 3 - prbs31
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG2(_x) (0x00001008 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG2 0x0000f008
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_TX_FORCE_ERR(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_TX_FORCE_ERR_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_POS_DISP(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_POS_DISP_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_NEG_DISP(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_NEG_DISP_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSBIST_DATA_MODE(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSBIST_DATA_MODE_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
    Bits:  6    VPcsBistGenInsertErr(rw) - PCS BIST generator insert error control. The LSB of the transmitted pattern is inverted on each positive edge of this signal
    Bits:  5:2  VPcsBistGenInitDelay(rw) - PCS BIST generator data pattern initial delay. Controls length of time for training pattern. If set to 0, training pattern is controlled by VPCSBIST_GEN_INIT_CTRL. Length of time is 2^ VPCSBIST_GEN_INIT_CTRL clock cycles, maximum 2^12
    Bits:  1    VPcsBistGenInitCtrl(rw) - PCS BIST generator initial pattern manual control. 0 - send training sequence 1 - send prbs / UDP Used only if VPCSBIST_GEN_INIT_DELAY = 0
    Bits:  0    VPcsBistGenEn(rw) - PCS BIST generator enable. 0 - Normal operation 1 - Enable BIST data send
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG3(_x) (0x00001009 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG3 0x0000f009
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INSERT_ERR BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_DELAY(_x) (((_x) & 0xf) << 2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_DELAY_of(_x) (((_x) >> 2) & 0xf)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_CTRL BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxPolarity(rw) - Override for ICTL_PIPE_RXPOLARITY_ pins
    Bits:  6    VpcsifOvrRxeqEval(rw) - Override for ICTL_PIPE_RXEQEVAL_ pins
    Bits:  5:4  VpcsifOvrrate(rw) - Override for ICTL_PIPE_RATE_ pins
    Bits:  3:2  VpcsifOvrPowerDown(rw) - Override for ICTL_PIPE_POWERDOWN_ pins
    Bits:  1:0  VpcsifOvrDataBusWidth(rw) - Override for ICTL_PIPE_DATABUSWIDTH_ pins
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG(_x) (0x0000100a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG 0x0000f00a
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RXPOLARITY BIT(7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RXEQEVAL BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RATE(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RATE_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_POWERDOWN(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_POWERDOWN_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_DATABUSWIDTH(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_DATABUSWIDTH_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
    Bits:  7:6  VpcsifOvrTxEleCidle(rw) - Override for ICTL_PIPE_TXELECIDLE_ pins
    Bits:  5    VpcsifOvrTxDtCtRxLb(rw) - Override for ICTL_PIPE_TXDTCTRX_LB_ pins
    Bits:  4    VpcsifOvrTxCompliance(rw) - Override for ICTL_PIPE_TXCOMPLIANCE_ pins
    Bits:  3    VpcsifOvrRxStandBy(rw) - Override for ICTL_PIPE_RXSTANDBY_ pins
    Bits:  2:0  VpcsifOvrRxPresentHint(rw) - Override for ICTL_PIPE_RXPRESETHINT_ pins
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG1(_x) (0x0000100b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG1 0x0000f00b
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXELECIDLE(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXELECIDLE_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXDTCTRX_LB BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXCOMPLIANCE BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXSTANDBY BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXPRESETHINT(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXPRESETHINT_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
    Bits:  4    VPcsLbNe(rw) - PIPE Near End loopback enable.0 - Normal operation 1 - TX to RX loopback enabled.
    Bits:  3    VpcsLbFe(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter.
    Bits:  2    VpcsifOvrRxEqClr(rw) - Override for RXEQCLR pins
    Bits:  1    VpcsifOvrRst(rw) - Override for IRST_PIPE_RST_Lx_B_A pins
    Bits:  0    VpcsifOvrBlockAlignControl(rw) - Override for VPCSIF_OVR_BLOCKALIGNCONTROL_ pins
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG2(_x) (0x0000100c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG2 0x0000f00c
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSLB_NE BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSLB_FE BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_RXEQCLR BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_RST BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_BLOCKALIGNCONTROL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxstandByEna(rw) - Enables VPCSIF_OVR_RXSTANDBY to override external pin
    Bits:  6    VpcsifOvrRxPresentHintena(rw) - Enables VPCSIF_OVR_RXPRESETHINT to override external pin
    Bits:  5    VpcsifOvrRxPolarityEna(rw) - Enables VPCSIF_OVR_RXPOLARITY to override external pin
    Bits:  4    VpcsifOvrRxEqEvalEna(rw) - Enables VPCSIF_OVR_RXEQEVAL to override external pin
    Bits:  3    VpcsifOvrRstEna(rw) - Enables VPCSIF_OVR_RST to override external pin
    Bits:  2    VpcsifOvrRateEna(rw) - Enables VPCSIF_OVR_RATE to override external pin
    Bits:  1    VpcsifOvrpowerDowmEna(rw) - Enables VPCSIF_OVR_POWERDOWN to override external pin
    Bits:  0    VpcsifOvrDataBusWidthEna(rw) - Enables VPCSIF_OVR_DATABUSWIDTH to override external pin
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG3(_x) (0x0000100d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG3 0x0000f00d
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXSTANDBY_ENA BIT(7)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXPRESETHINT_ENA BIT(6)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXPOLARITY_ENA BIT(5)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXEQEVAL_ENA BIT(4)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RST_ENA BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RATE_ENA BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_POWERDOWN_ENA BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_DATABUSWIDTH_ENA BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
    Bits:  3    VpcsifOvrtxEleCidleEna(rw) - Enables VPCSIF_OVR_TXELECIDLE to override external pin
    Bits:  2    VpcsifovrTxDtcTrxLbEna(rw) - Enables VPCSIF_OVR_TXDTCTRX_LB to override external pin
    Bits:  1    VpcsifOvrTxComplianceEna(rw) - Enables VPCSIF_OVR_TXCOMPLIANCE to override external pin
    Bits:  0    VpcsifOvrBlockAlignControlEna(rw) - Enables VPCSIF_OVR_BLOCKALIGNCONTROL to override external pin
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG4(_x) (0x0000100e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG4 0x0000f00e
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXELECIDLE_ENA BIT(3)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXDTCTRX_LB_ENA BIT(2)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXCOMPLIANCE_ENA BIT(1)
#define   NFP_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_BLOCKALIGNCONTROL_ENA BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr - Address for aprobe common lane.
    Bits:  6:4  SerDesAprobeSynAddr(rw) - Address for Synth lane aprobe data.
    Bits:  3:0  SerDesAprobeCmnAddr(rw) - Address for common and Synth regulator lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_APROBE_CMN_ADDR 0x00008000
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_SYN_ADDR(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_SYN_ADDR_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_CMN_ADDR(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_CMN_ADDR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr - Address for Synth lane aprobe data.
    Bits:  4:0  AprobeSynthAddr(rw) - Address for synth lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_APROBE_SYNTH_ADDR 0x00008001
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_SYNTH_ADDR_APROBE_SYNTH_ADDR(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_SYNTH_ADDR_APROBE_SYNTH_ADDR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl - PMA Common/Synth lane control register
    Bits:  2    RstCmnPcsSoftSynth(rw) - Synth soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstByPassSynth(rw) - Common lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
    Bits:  0    CmnCtlPorHardRstByPassEnSynth(rw) - Common lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_CONTROL 0x00008002
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_RSTCMNPCSSOFT_SYNTH BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_CMNCTLPOR_HARDRSTBYPASS_SYNTH BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_CMNCTLPOR_HARDRSTBYPASSEN_SYNTH BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth - Common PCS pstate synth.
    Bits:  4:0  CmnPcsStateSynth(rw) - Synth power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_PCS_PSTATE_SYNTH 0x00008003
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_PCS_PSTATE_SYNTH_CMNPCSPSTATE_SYNTH(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_PCS_PSTATE_SYNTH_CMNPCSPSTATE_SYNTH_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl - Common Test Bus status reg 1.
    Bits:  2    SynthPpmLockStatus(rw) - Synth lane PLL lock status. 1 - Synth VCO is locked to reference clock.
    Bits:  1    PcsOutSynthStatus(rw) - Synth lane state transition status. Indicates when the Synth has completed a requested state transition. 0 - Synth has not completed its state change. 1 - Synth has completed its state change.
    Bits:  0    PcsOutSynthReady(rw) - Synth lane ready status signal. 0 - Synth is not ready for data transmission. 1 - Synth is ready for data transmission.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_TST_BUS1 0x00008004
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_SYNTHPPM_LOCKSTATUS BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_PCSOUTSYNTH_STATUS BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_PCSOUTSYNTH_READY BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl - Common and Synth refclock control.
    Bits:  4    CmnRefCkBufSynthRefEn(rw) - Synth reference clock enable. Active High.
    Bits:  3    CmnRefCkBufRxRefEn(rw) - RX lane reference clock enable. Active High.
    Bits:  2    CmnClkGenMuxSelPcsRef(rw) - Selects reference clock to be used in PCS. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  1    CmnClkGenMuxSelDpmaSynthRef(rw) - Selects reference clock to be used in Synth lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaCmnRef(rw) - Selects reference clock to be used in Common lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_SYNTH_REFCLK_CONTROL 0x00008005
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNREFCKBUF_SYNTHREFEN BIT(4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNREFCKBUF_RXREFEN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_PCSREF BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_DPMASYNTHREF BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_DPMACMNREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl - Common/synth reference clock control.
    Bits:  7:6  CmnrefCkDrvRefinpMacntl0(rw) - Reference clock output select for OCK_PMACNTLREF_0 DPMA clock. 00 - From bumps, ICK_CMNREF 01 - From SOC reference clock input, ICK_CMNREFSOC 10 - From right-side clock repeater network, ICK_REFBUSRIGHT 11 - From left-side clock repeater network, ICK_REFBUSLEFT
    Bits:  5:3  CmnRefCkdrvRefBusright2leftoutCtl(rw) -
    Bits:  2:0  CmnRefCkdrvRefBusleft2rightoutCtl(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_REFCLK_CTL 0x00008006
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFINPMACNTL0(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFINPMACNTL0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSRIGHT2LEFTOUTCTL(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSRIGHT2LEFTOUTCTL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSLEFT2RIGHTOUTCTL(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSLEFT2RIGHTOUTCTL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl - PMA Common/Synth Lane Reference Clock Control Register.
    Bits:  7:6  SynthRefCkRefInCtl(rw) - Synth lane reference clock select.
    Bits:  5:4  RxCdrRefCkRefClkSel(rw) - RX lane reference clock select..
    Bits:  3:2  CmnRefCkDrvRefSocEn(rw) - RX lane reference clock select..
    Bits:  1:0  CmnRefCkdrvRefInPmACntl1(rw) - Enable for OCK_REFSOC 0 - OCK_REFSOC disabled and output at logic 0 1 - OCK_REFSOC enabled and outputs a copy of ICK_PMA_REFSOC
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_REF_CLK_CTL 0x00008007
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_of(_x) (((_x) >> 6) & 0x3)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REF (0)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFSOC (1)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFBUSRIGHT (2)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFBUSLEFT (3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REF (0)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFSOC (1)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFBUSRIGHT (2)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFBUSLEFT (3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_of(_x) (((_x) >> 2) & 0x3)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REF (0)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFSOC (1)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFBUSRIGHT (2)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFBUSLEFT (3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFINPM_ACNTL1(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFINPM_ACNTL1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 - PMA Common/Synth Lane Control Register
    Bits:  6    RxEqCalEn(rw) - RX Equalization FSM enable. Active High.
    Bits:  5    CmnPcsSynthCkBypassEn(rw) - PCS Synth lane clock bypass enable. Active High.
    Bits:  4:3  CmnPcsRdyStatModeSel(rw) - Controls how Synth, TX and RX lane ready and status signals are controlled.
    Bits:  2    CmnPcsTxEnable(rw) - Transmit datapath FIFO enable. Active High.
    Bits:  1    CmnPcsPcieGen3En(rw) - PCIe Gen3 rate change. 1 - Gen3 rate change is requested.
    Bits:  0    CmnPcieGen3LutSel(rw) - PCIe Gen3 rate change LUT select. Active High.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL3 0x00008008
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_RXEQ_CALEN BIT(6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSSYNTH_CKBYPASSEN BIT(5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSRDYSTATMODE_SEL(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSRDYSTATMODE_SEL_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCS_TXENABLE BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCS_PCIEGEN3_EN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCIEGEN3_LUTSEL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  CmnRefCkBufTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnCalTcTerm(rw) - Common lane termination calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_COMMON_SYNTH_CALIBRATION 0x00008009
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNREFCKBUF_TERMCAL(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNREFCKBUF_TERMCAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNCALTC_TERM(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNCALTC_TERM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  TxTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnBgBiasTermCal(rw) - Common lane termination calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_COMMON_SYNTH_CALIBRATION2 0x0000800a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_TXTERM_CAL(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_TXTERM_CAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_CMNBGBIAS_TERMCAL(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_CMNBGBIAS_TERMCAL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal - PMA Common/Synth Lane Register.
    Bits:  5:3  RxTermCal(rw) - RX lane termination calibration value.
    Bits:  2:0  RxDfeTermCal(rw) - RX lane DFE Termination calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_TERM_CAL 0x0000800b
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXTERM_CAL(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXTERM_CAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXDFE_TERMCAL(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXDFE_TERMCAL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal - PMA Common/Synth Lane Calibration Register.
    Bits:  3:0  SynthCalFoscCenterFreq(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_CAL 0x0000800c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CAL_SYNTHCALFOSC_CENTER_FREQ(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CAL_SYNTHCALFOSC_CENTER_FREQ_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 - PMA Common/Synth Lane Control Register.
    Bits:  5    RxPowerSave(rw) - Power saving mode enable. Active High.Disables RX roam comparator.
    Bits:  3    PcsEn(rw) - Override for ICTL_PCS_EN_NT control pin.0 Multi Mode.1- PCIe Mode.
    Bits:  2    LbSynthPllFbclk2CdrRefclkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock..
    Bits:  1    LbSynthCdrDivclk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
    Bits:  0    CmnCalSynthLoopTimingEn(rw) - Looptiming mode enable. Active High. CDR recovered clock used as the reference clock for Synth VCO..
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL_4 0x0000800d
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_RXPOWERSAVE BIT(5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_PCS_EN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_LB_SYNTHPLLFBCLK2CDRREFCLKEN BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_LB_SYNTHCDRDIVCLK2TXEN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_CMNCALSYNTH_LOOPTIMING_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 - PMA Common/Synth Lane Status Registers.
    Bits:  3    MemTstEn(rw) - Memory test enable. Active High.
    Bits:  2:0  MemTstBitSel(rw) - Memory select signal test. The memory bit select will be passed to aprobe, if proper aprobe address is set.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS2 0x0000800e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_EN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_BITSEL(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_BITSEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl - PMA Common/Synth Lane Control Register.
    Bits:  4:3  RxLosDetThresh(rw) - LOS Detect Threshold Level.
    Bits:  2:0  RxElecidleSigDetThresh(rw) - Signal Detect Threshold Level.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL 0x0000800f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXLOSDET_THRESH(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXLOSDET_THRESH_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXELECIDLE_SIGDETTHRESH(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXELECIDLE_SIGDETTHRESH_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 - PMA Common/Synth Lane Status Register.
    Bits:  3    CmnTstBusSampleEn(rw) - TX lane soft reset. Active Low
    Bits:  2    CmnTstBusLmonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  1    CmnTstBusHmonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  0    CmnTstBusAsyncEn(rw) - Testbus read or write enable. Active High
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS3 0x00008010
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_SAMPLE_EN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_LMONITOR BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_HMONITOR BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_ASYNC_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 - PMA Common/Synth Lane Status Register.
    Bits:  7:0  CmnTstBus(rw) - PHY Testbus status registers. Section 3.2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_0 0x00008011
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_1 0x00008012
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_2 0x00008013
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_3 0x00008014
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_4 0x00008015
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALANESTATUS4_CMNTSTBUS(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALANESTATUS4_CMNTSTBUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel - Testbus Select. Section 3.2.
    Bits:  7:0  CmnTstBusSel(rw) - Testbus select. Section 3.2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUSBUS_SEL 0x00008016
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUSBUS_SEL_CMNTSTBUS_SEL(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUSBUS_SEL_CMNTSTBUS_SEL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit - PMA Lane Transmit Control Register.
    Bits:  7:6  CmnTxPipeHlevLup2(rw) - TX IO driver HLEV look-up table entry
    Bits:  5:3  CmnTxPipeHlevlup1(rw) - TX IO driver HLEV look-up table entry.
    Bits:  2:0  CmnTxPipeHlevlup0(rw) - TX IO driver HLEV look-up table entry.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT 0x00008017
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP2(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP1(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 - PMA Lane Transmit Control Register.
    Bits:  4:0  CmnTxPipelevnLup0(rw) - TX IO driver LEVN look-up table entry 0
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT2 0x00008018
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT2_CMNTXPIPE_LEVN_LUP0(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT2_CMNTXPIPE_LEVN_LUP0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 - PMA Lane Transmit Control Register.
    Bits:  3:0  CmnTxPipelevnmLup0(rw) - TX IO driver LEVNM1 look-up table entry 0
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT3 0x00008019
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT3_CMNTXPIPE_LEVNM1_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT3_CMNTXPIPE_LEVNM1_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 - PMA Lane Transmit Control Register.
    Bits:  5:4  CmnTxPipeTxdrvSlewGen3(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen3. If PCIEMODE_SEL=1. This value is used if PCIEMODE_SEL=0.
    Bits:  3:2  CmnTxPipeTxdrvSlewGen2(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen2 If PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
    Bits:  1:0  CmnTxPipeTxdrvSlewGen1(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen1 if PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT4 0x0000801a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN3(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN3_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN2(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN2_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN1(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr - PMA Common Synth Lane Loop Back and BIST Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 - PMA Common Synth Lane Loop Back and BIST Register
    Bits:  7:0  RxBistCdrLock2DataPostAmble(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LOOP_BACK_BIST_RX_CDR 0x0000801b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LOOP_BACK_BIST_RX_CDR2 0x0000801c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALOOPBACKBIST4_RXBIST_CDRLOCK2DATA_POSTAMBLE(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALOOPBACKBIST4_RXBIST_CDRLOCK2DATA_POSTAMBLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR - Delay in CDR switching from "locked to reference" mode to "locked to the data" mode.
    Bits:  7:0  RxLock2DataTmr(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXLOCK2DATATMR 0x0000801d
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXLOCK2DATATMR_RXLOCK2DATATMR(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXLOCK2DATATMR_RXLOCK2DATATMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqCoarseIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_LANE_RX_EQ_ITER 0x0000801e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_ITER_RXEQ_COARSE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_ITER_RXEQ_COARSE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqFineIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_LANE_RX_EQ_FINE 0x0000801f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_FINE_RXEQ_FINE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_FINE_RXEQ_FINE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 - RX CDR VCO fine frequency cal value.
    Bits:  7:0  SynthCalFoscInt(rw) - Synth lane VCO fine frequency calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_LANE_CDR_CAL_FOSC_INT_LN1 0x00008020
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_LANE_CDR_CAL_FOSC_INT_LN1_SYNTHCALFOSC_INT(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_LANE_CDR_CAL_FOSC_INT_LN1_SYNTHCALFOSC_INT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjustInit(rw) - RX Roam eye X ADJUST initial value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_RX_CAL_ROAM_X_ADJUST_INIT 0x00008021
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_RX_CAL_ROAM_X_ADJUST_INIT_RXCALROAMXADJUST_INIT(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_RX_CAL_ROAM_X_ADJUST_INIT_RXCALROAMXADJUST_INIT_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 - Common block control 2.
    Bits:  7    TxWPtrInitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  6:4  TxWPtrInit(rw) - TX parallel data path initial read pointer.
    Bits:  3:2  TxDvrReplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver.
    Bits:  1    LbSynthPllFbClk2CdrRefClkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock.
    Bits:  0    LbSynthCdrDivClk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_BLOCK_CONTROL2 0x00008023
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT_DIV BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXDRV_REPLICAMODE(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXDRV_REPLICAMODE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_LB_SYNTHPLLFBCLK2CDRREFCLKEN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_LB_SYNTHCDRDIVCLK2TXEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup - PMA Common/Synth Lane Adaptive Equalizer Registers
    Bits:  7:0  RxEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0_NT_ inputs.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_LOOKUP 0x00008024
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_LOOKUP_RXEQ_LOOKUP_CODE_EN(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_LOOKUP_RXEQ_LOOKUP_CODE_EN_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode - PMA Lane Adaptive Equalizer Register.
    Bits:  2:0  RxEqLooklastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_LOOKUP_LASTCODE 0x00008025
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_LOOKUP_LASTCODE_RXEQ_LOOKUP_LASTCODE(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_LOOKUP_LASTCODE_RXEQ_LOOKUP_LASTCODE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
    Bits:  6:3  RxEqDfeTap1GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_DCGAIN_GEN2 0x00008027
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFETAP1GAIN_GEN2(_x) (((_x) & 0xf) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFETAP1GAIN_GEN2_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFEPSTAPGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFEPSTAPGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 - PCIe Gen2 Equalization control.
    Bits:  7:4  RxEqDfeTap3GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-3 tap gain.
    Bits:  3:0  RxEqDfeTap2GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_GAIN_GEN2 0x00008028
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP3GAIN_GEN2(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP3GAIN_GEN2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP2GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP2GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 - PCIe Gen2 Equalization control.
    Bits:  6:4  RxEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  3:0  RxEqDftAp4GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-4 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFETAP_GEN2 0x00008029
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_LOFREQAGCGAIN_GEN2(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_LOFREQAGCGAIN_GEN2_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_DFETAP4GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_DFETAP4GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq - PCIe Gen2 Equalization control.
    Bits:  4:0  RxEqHiFreqAgcCapGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_HI_FREQ_GEN2 0x0000802a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_HI_FREQ_GEN2_RXEQ_HIFREQAGCCAP_GEN2(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_HI_FREQ_GEN2_RXEQ_HIFREQAGCCAP_GEN2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain - Equalization calibration lookup table
    Bits:  5:3  RxEqDfepstapf3DBLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency
    Bits:  2:0  RxEqDcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DC_GAIN 0x0000802b
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DFEPSTAPF3DB_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DFEPSTAPF3DB_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DCGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DCGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 - Equalization calibration lookup table
    Bits:  6:3  RxEqDfeTap1GainLup(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_GAIN_LUP0 0x0000802c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFETAP1GAIN_LUP(_x) (((_x) & 0xf) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFETAP1GAIN_LUP_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFEPSTAPGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFEPSTAPGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_HI_FREQ_LUP0 0x00008030
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_FDIV 0x00008031
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCMAXCODE1 0x00008032
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIV_SYNTHFDIV_FDIV(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIV_SYNTHFDIV_FDIV_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 - Synth Lane Control Register
    Bits:  2:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2 0x00008033
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2_SYNTHFDIV_FDIV(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2_SYNTHFDIV_FDIV_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscUpdateCycle(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE 0x00008035
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE_SYNTHFDIV_SSCUPDATECYCLE(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE_SYNTHFDIV_SSCUPDATECYCLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod - Synth Lane Control Register
    Bits:  3    SynthfDivStrFdiv(rw) -
    Bits:  2    SynthfDivSscIntfilterFreezeen(rw) -
    Bits:  1    SynthfDivSscGenEn(rw) -
    Bits:  0    SynthfDivmodulatorEn(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_MOD 0x00008036
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_STR_FDIV BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_SSCINTFILTERFREEZEEN BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_SSCGENEN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_MODULATOREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk - Synth PCS Div Clock0
    Bits:  7    SynthPcsPostDivClk0En(rw) - Synth PCS Post Div Clock Enable
    Bits:  6:0  SynthPcsPostDivClk0(rw) - Synth PCS Post Div Clock.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PCS_DIVCLK 0x00008037
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0EN BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat310(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_31_0 0x00008038
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_31_0 0x00008039
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_3_31_0 0x0000803a
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_4_31_0 0x0000803b
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT_TXBIST_PAT_31_0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT_TXBIST_PAT_31_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat6332(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_63_32 0x0000803c
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_63_32 0x0000803d
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_3_63_32 0x0000803e
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_4_63_32 0x0000803f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT63_TXBIST_PAT_63_32(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT63_TXBIST_PAT_63_32_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat7964(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_79_64 0x00008040
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_79_64 0x00008041
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT79_TXBIST_PAT_79_64(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT79_TXBIST_PAT_79_64_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst - OOB Burst Time
    Bits:  7:0  TxBistOoBtBurst(rw) - OOB Burst Time (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTBURST 0x00008042
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTBURST_TXBIST_OOBTBURST(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTBURST_TXBIST_OOBTBURST_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComRstInit(rw) - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT 0x00008043
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT_TXBIST_OOBTCOMRSTINIT(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT_TXBIST_OOBTCOMRSTINIT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas - OOB ComSas Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComSas(rw) - OOB ComSas Idle Time - 1 (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTCOMSAS 0x00008044
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMSAS_TXBIST_OOBTCOMSAS(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMSAS_TXBIST_OOBTCOMSAS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake - OOB ComWake Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComWake(rw) - OOB ComWake Idle Time - 1 (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_COMWAKE 0x00008045
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_COMWAKE_TXBIST_OOBTCOMWAKE(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_COMWAKE_TXBIST_OOBTCOMWAKE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode - PMA PCS common BIST mode Select.
    Bits:  5    TxBISTBitErrorEn(rw) - Single-Bit error detection enable (on posedge).
    Bits:  4:3  CmnPCSBISToobmode(rw) - OOB Mode (for 80-bit memory pattern mode only, ignored otherwise). 0 - Disabled 1 - OOB ComReset/ComInit 2 - OOB ComWake 3 - OOB ComSas.
    Bits:  2:0  CmnPCSBISTModeSel(rw) - Selects the transmit BIST mode: 0 - Uses the 80-bit internal memory pattern (w/ OOB) 1 - Uses a 27 PRBS pattern 2 - Uses a 223 PRBS pattern 3 - Uses a 231 PRBS pattern 4 - Uses a D10.2 clock pattern 5 - Uses a half rate 1100 clock pattern.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_PCS_BIST_MODE 0x00008050
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_TXBIST_BITERROR_EN BIT(5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_OOBMODE(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_OOBMODE_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_MODESEL(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_MODESEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS - PMA TX BIST PRBS mode.
    Bits:  3:2  TxDrvreplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver. 00 - No replica path enabled 01 - Replica path is 25% scaled version of the main driver 10 - Replica path is 50% scaled version of the main driver 11 - Replica path is 75% scaled version of the main driver
    Bits:  1    TxBistRxBistErrEn(rw) - Enable error generation from RXBIST to TXBIST. Once this is set to 1, TXBIST will generate an error bit, if RXBIST detects bit error.
    Bits:  0    TxBISTPrbsRst(rw) - PRBS Reset. Active low
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_BIST_PRBS 0x00008051
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXDRV_REPLICAMODE(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXDRV_REPLICAMODE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXBIST_RXBIST_ERR_EN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXBIST_PRBSRST BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl - PMA TX/RX termination control register.
    Bits:  5:4  TxTermCoarse(rw) - TX lane calibration impedance setting.
    Bits:  3:2  RxTermModeSelect(rw) - RX termination modes setting.
    Bits:  1:0  RxTermCoarse(rw) - RX lane calibration impedance setting.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RX_TX_TERM_CONTROL 0x00008052
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_85OHMS (0)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_100OHMS (1)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_120OHMS (2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_MODESELECT(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_MODESELECT_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_of(_x) (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_85OHMS (0)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_100OHMS (1)
#define     NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_120OHMS (2)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR - PMA TX/RX Write Pointer.
    Bits:  7:6  TxWptrinitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  5:4  TxWptrInit(rw) - TX parallel data path initial read pointer.
    Bits:  0    RxAgcDccCoupleEn(rw) - RX AGC DC Couple Enable.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_TX_PTR 0x00008053
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_DIV(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_DIV_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_RXAGC_DCCOUPLEEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn - PMA PCS Common Overide Enable.
    Bits:  7    CmnPcsSynthLocWrEn(rw) - CMNPCSSYNTH* override enable. Active Low
    Bits:  6    CmnPcsRdyStatModeLocWrEn(rw) - CMNPCSRDYSTATMODE_* override enable. Active Low
    Bits:  5    CmnPcsPStateLocWrEn(rw) - CMNPCSPSTATE* override enable. Active Low.
    Bits:  4    CmnPcsBistLocWrEn(rw) - CMNPCSBIST* override enable. Active Low.
    Bits:  3    CmnPcsLocWrEn(rw) - CMNPCS* override enable. Active Low
    Bits:  2    CmnPcieGen3LocWrEn(rw) - CMNPCIEGEN3* override enable. Active Low.
    Bits:  1    CmncalTcLocWrEn(rw) - CMNCALTC* override enable. Active Low.
    Bits:  0    CmnBgBiasLocWrEn(rw) - CMNBGBIAS* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_LANE_OVERRIDE_EN 0x0000805f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSSYNTH_LOCWREN BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSRDYSTATMODE_LOCWREN BIT(6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSPSTATE_LOCWREN BIT(5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSBIST_LOCWREN BIT(4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCS_LOCWREN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCIEGEN3_LOCWREN BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNCALTC_LOCWREN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNBGBIAS_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 - PMA PCS Common Overide Enable.
    Bits:  7    RxDfeLocWrEn(rw) - RXDFE* override enable. Active Low
    Bits:  6    RxCdrRefCkLocWrEn(rw) - RXCDRREFCK* override enable. Active Low
    Bits:  5    RstCmnPcsSoftLocWrEn(rw) - RSTCMNPCSSOFT* override enable. Active Low.
    Bits:  4    PcsOutSynthLocWrEn(rw) - PCSOUTSYNTH* override enable. Active Low.
    Bits:  3    PcslocWrEn(rw) - PCS_EN * override enable. Active Low
    Bits:  2    CmnTstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low.
    Bits:  1    CmnRefCkDrvLocwRen(rw) - CMNREFCKDRV* override enable. Active Low.
    Bits:  0    CmnRefCkBufLocWrEn(rw) - CMNREFCKBUF* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_LANE_OVERRIDE_EN2 0x00008060
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RXDFE_LOCWREN BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RXCDRREFCK_LOCWREN BIT(6)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RSTCMNPCSSOFT_LOCWREN BIT(5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_PCSOUTSYNTH_LOCWREN BIT(4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_PCS_LOCWREN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNTSTBUS_LOCWREN BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNREFCKDRV_LOCWREN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNREFCKBUF_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm - PMA TX/RX Terminal Overide Enable.
    Bits:  4    TxTermLocWrEn(rw) - TXTERM* override enable. Active Low.
    Bits:  3    SynthRefClkLocWrEn(rw) - SYNTHREFCK * override enable. Active Low.
    Bits:  2    SynthFDivLocWrEn(rw) - SYNTHFDIV* override enable. Active Low.
    Bits:  1    SynthCalFoscLocWrEn(rw) - SYNTHCALFOSC* override enable. Active Low.
    Bits:  0    RxTermLocWrEn(rw) - RXTERM* override enable. Active Low
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_RX_TERM 0x00008061
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_TXTERM_LOCWREN BIT(4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHREFCK_LOCWREN BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHFDIV_LOCWREN BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHCALFOSC_LOCWREN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_RXTERM_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter - PMA Integral loop filter timer.
    Bits:  7:4  SynthDpifGainDelayCountPow2(rw) - Synth integral loop filter gear-shifting timer
    Bits:  3:0  RxDpifgainDelayCountPow2(rw) - RX integral loop filter gear-shifting timer
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_INTEGRAL_LOOP_FILTER 0x00008065
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_SYNTHDPIF_GAINDELAYCOUNT_POW2(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_SYNTHDPIF_GAINDELAYCOUNT_POW2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_RXDPIF_GAINDELAYCOUNT_POW2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_RXDPIF_GAINDELAYCOUNT_POW2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 - PMA timer used for termination resistance.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 - PMA timer used for termination resistance.
    Bits:  7:0  CmnCaltcMeasCount(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CALTCMEAS_COUNT1 0x00008066
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CALTCMEAS_COUNT2 0x00008067
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNCAL_CMNCALTCMEAS_COUNT(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNCAL_CMNCALTCMEAS_COUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0.
    Bits:  7:0  SynthCalFoscmeasCountMuxD0(rw) - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0 0x0000806a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0_SYNTHCALFOSCMEAS_COUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0_SYNTHCALFOSCMEAS_COUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 1.
    Bits:  7:0  SynthCalFoscmeasCountMuxD1(rw) - SYNTH VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1 0x0000806b
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1_SYNTHCALFOSCMEAS_COUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1_SYNTHCALFOSCMEAS_COUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 0.
    Bits:  7:0  SynthFDivMdivMuxD0(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 0.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0 0x0000806c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0_SYNTHFDIV_MDIV_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0_SYNTHFDIV_MDIV_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 1.
    Bits:  7:0  SynthFDivMdivMuxD1(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1 0x0000806d
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1_SYNTHFDIV_MDIV_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1_SYNTHFDIV_MDIV_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle - PMA lane Calibration Register
    Bits:  7:1  CmnCalTcMeasPow2dlyCount1(rw) - Timer used in the termination resistance calibration configuration
    Bits:  0    CmnCalTcmeashalFCycleEn(rw) - Enables one of the termination resistance calibration configuration register.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CAL_CYCLE 0x0000806e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_POW2DLYCOUNT1(_x) (((_x) & 0x7f) << 1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_POW2DLYCOUNT1_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_HALFCYCLE_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY - PMA lane Calibration Register
    Bits:  4:0  CmnCalTcMeasPow2dlyCount2(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_PWR2DLY 0x0000806f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PWR2DLY_CMNCALTCMEAS_POW2DLYCOUNT2(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PWR2DLY_CMNCALTCMEAS_POW2DLYCOUNT2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr - PMA Rx Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr1(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_WATCHDOG_TMR 0x00008070
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_WATCHDOG_TMR_RXPPM_WATCHDOGTMR(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_WATCHDOG_TMR_RXPPM_WATCHDOGTMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 - PMA Rx Watchdog Timer
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 - PMA Synth Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_WATCHDOG_TMR2 0x00008071
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_WATCHDOG_TMR2 0x00008073
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMAWATCHDOGTMR2_RXPPM_WATCHDOGTMR(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMAWATCHDOGTMR2_RXPPM_WATCHDOGTMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register.
    Bits:  7:0  RxCDRCalFoscHscountMuxd1(rw) - CDR VCO calibration register.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1 0x00008072
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1_RXCDRCALFOSC_HSCOUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1_RXCDRCALFOSC_HSCOUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q0 0x00008074
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q0_CMNRPU_OFFSETUI_S0Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q0_CMNRPU_OFFSETUI_S0Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q1 0x00008075
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q1_CMNRPU_OFFSETUI_S0Q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q1_CMNRPU_OFFSETUI_S0Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q2(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q2 0x00008076
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q2_CMNRPU_OFFSETUI_S0Q2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q2_CMNRPU_OFFSETUI_S0Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q3(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q3 0x00008077
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q3_CMNRPU_OFFSETUI_S0Q3(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q3_CMNRPU_OFFSETUI_S0Q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q4(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q4 0x00008078
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q4_CMNRPU_OFFSETUI_S0Q4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q4_CMNRPU_OFFSETUI_S0Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q5(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q5 0x00008079
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q5B 0x0000807a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET5_CMNRPU_OFFSETUI_S0Q5(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET5_CMNRPU_OFFSETUI_S0Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q6(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q6 0x0000807b
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q6_CMNRPU_OFFSETUI_S0Q6(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q6_CMNRPU_OFFSETUI_S0Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q7(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSETS0Q7 0x0000807c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS0Q7_CMNRPU_OFFSETUI_S0Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS0Q7_CMNRPU_OFFSETUI_S0Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q0 0x0000807d
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q0_CMNRPU_OFFSETUI_S1Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q0_CMNRPU_OFFSETUI_S1Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q1 0x0000807e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q1_CMNRPU_OFFSETUI_S1Q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q1_CMNRPU_OFFSETUI_S1Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q2(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q2 0x0000807f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q2_CMNRPU_OFFSETUI_S1Q2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q2_CMNRPU_OFFSETUI_S1Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q3 0x00008080
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q3_2 0x00008081
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S3Q1 0x00008093
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET31_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET31_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q4(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q4 0x00008082
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q4_CMNRPU_OFFSETUI_S1Q4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q4_CMNRPU_OFFSETUI_S1Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q5(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q5 0x00008083
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q5_CMNRPU_OFFSETUI_S1Q5(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q5_CMNRPU_OFFSETUI_S1Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q6(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q6 0x00008084
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q6_2 0x00008085
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET61_CMNRPU_OFFSETUI_S1Q6(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET61_CMNRPU_OFFSETUI_S1Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSETS1Q7 0x00008086
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS1Q7_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS1Q7_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q0 0x00008087
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q0_CMNRPU_OFFSETUI_S2Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q0_CMNRPU_OFFSETUI_S2Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q1 0x00008088
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q1_CMNRPU_OFFSETUI_S2Q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q1_CMNRPU_OFFSETUI_S2Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q2(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q2 0x00008089
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q2_CMNRPU_OFFSETUI_S2Q2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q2_CMNRPU_OFFSETUI_S2Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q3(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q3 0x0000808a
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q3_2 0x0000808b
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET32_CMNRPU_OFFSETUI_S2Q3(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET32_CMNRPU_OFFSETUI_S2Q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q4(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q4 0x0000808c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q4_CMNRPU_OFFSETUI_S2Q4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q4_CMNRPU_OFFSETUI_S2Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q5(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q5 0x0000808d
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q5_2 0x0000808e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET52_CMNRPU_OFFSETUI_S2Q5(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET52_CMNRPU_OFFSETUI_S2Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q6(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q6 0x0000808f
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q6_2 0x00008090
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET62_CMNRPU_OFFSETUI_S2Q6(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET62_CMNRPU_OFFSETUI_S2Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q7 0x00008091
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q7_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q7_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S3Q0 0x00008092
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S3Q0_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S3Q0_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS4q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S4Q0 0x00008094
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S4Q0_2 0x00008095
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET40_CMNRPU_OFFSETUI_S4Q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET40_CMNRPU_OFFSETUI_S4Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount2(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CAL_ROAM_COUNT2 0x00008096
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT2_RXCALROAMEYEMEAS_COUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT2_RXCALROAMEYEMEAS_COUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount1(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CAL_ROAM_COUNT1 0x00008097
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT1_RXCALROAMEYEMEAS_COUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT1_RXCALROAMEYEMEAS_COUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAModDiv - PMA lane Control Register.
    Bits:  7:4  SynthfbDivModdiv(rw) -
    Bits:  3:0  RxCdrFbDivModDiv(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_MOD_DIV 0x00008098
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_SYNTHFBDIV_MODDIV(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_SYNTHFBDIV_MODDIV_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_RXCDRFBDIV_MODDIV(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_RXCDRFBDIV_MODDIV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode - PMA lane Reference Control Register.
    Bits:  6:1  SynthrefCkRefDivMuxD0(rw) - Synth VCO Reference clock divider.
    Bits:  0    PcieModeSel(rw) - PCI Express Mode or Multi Standard Select.0 - PMA enters multi-standard mode (including PCIe Gen3). Direct pin interface controls for TXEQ. RXEQ performed through memory registers.1 - PMA enters PCIe mode only. Direct pin interface controls for PCIe Gen 3. Look up tables for PCIe Gen1 / Gen2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_PCIE_MODE 0x00008099
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_SYNTHREFCK_REFDIV_MUXD0(_x) (((_x) & 0x3f) << 1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_SYNTHREFCK_REFDIV_MUXD0_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_PCIEMODE_SEL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 - PMA lane Reference Control Register.
    Bits:  5:0  SynthrefCkRefDivMuxD1(rw) - Synth VCO Reference clock divider.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_REF_DIV_MUXD1 0x0000809a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_REF_DIV_MUXD1_SYNTHREFCK_REFDIV_MUXD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_REF_DIV_MUXD1_SYNTHREFCK_REFDIV_MUXD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust - PMA Common/Synth lane Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust - PMA Common/Synth lane Control Register.
    Bits:  3:2  RxDfebiasAdjustMuxd1(rw) -
    Bits:  1:0  RxDfebiasAdjustMuxd0(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_DFE_BIASADJUST 0x0000809b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_HI_FREQ_BIASADJUST 0x0000809c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD1(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD0(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD0_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_COUNT 0x0000809d
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT_RXPPM_PPMDRIFTCOUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT_RXPPM_PPMDRIFTCOUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_COUNT2 0x0000809e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT2_RXPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT2_RXPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_MAX 0x0000809f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX_RXPPM_PPMDRIFTCOUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX_RXPPM_PPMDRIFTCOUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_MAX2 0x000080a0
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX2_RXPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX2_RXPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX 0x000080a1
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX_SYNTHPPM_PPMDRIFTCOUNT(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX_SYNTHPPM_PPMDRIFTCOUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2 0x000080a2
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2_SYNTHPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2_SYNTHPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12 0x000080a3
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12_SYNTHPPM_PPMDRIFTMAX(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12_SYNTHPPM_PPMDRIFTMAX_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22 0x000080a4
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22_SYNTHPPM_PPMDRIFTMAX2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22_SYNTHPPM_PPMDRIFTMAX2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE 0x000080aa
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE1 0x000080ab
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIVSSC_SYNTHFDIV_SSCSTEPSIZE(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIVSSC_SYNTHFDIV_SSCSTEPSIZE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 - Synth Lane Control Register
    Bits:  0    SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE2 0x000080ac
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE2_SYNTHFDIV_SSCSTEPSIZE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg - PCS Lane Status Register.
    Bits:  5    TstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low
    Bits:  3    TstBusLMonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  2    TstBusHMonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  1    TstBusAsyncEn(rw) - Testbus read or write enable. Active high
    Bits:  0    MemTstEn(rw) - Memory test enable. Active High
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG 0x00009000
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_LOCWREN BIT(5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_LMONITOR BIT(3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_HMONITOR BIT(2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_ASYNC_EN BIT(1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_MEMTST_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b - PCS Lane Status Register .
    Bits:  7:0  TstBus(rw) - PHY Testbus status registers. Section 3.2
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG2 0x00009001
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS 0x00009002
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS2 0x00009003
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS3 0x00009004
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS4 0x00009005
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS4B 0x00009006
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2_TSTBUS(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2_TSTBUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 - PCS Common/Synth Lane Loopback and BIST Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
    Bits:  7:0  VpcBistGenSkpDelay(rw) - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSBIST_GEN_SKP_DELAY1 0x00009007
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSBIST_GEN_SKP_DELAY2 0x00009008
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2VPC_VPCSBIST_GEN_SKP_DELAY(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2VPC_VPCSBIST_GEN_SKP_DELAY_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 - PCS BIST generator UDP pattern. LSB is transmitted first.
    Bits:  7:0  VpcsBistUdp(rw) - PCS BIST generator UDP pattern. LSB is transmitted first..
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP1 0x00009009
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP2 0x0000900a
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP3 0x0000900b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP4 0x0000900c
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP5 0x0000900d
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP6 0x0000900e
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP7 0x0000900f
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP8 0x00009010
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2UDP_VPCSBIST_UDP(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2UDP_VPCSBIST_UDP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:3  VPcsEBufEmpty(rw) - Elastic buffer empty threshold
    Bits:  2:0  VPcsBistGenSkpCnt(rw) - PCS BIST generator SKP insertion count control. Number of SKP ordered sets to insert per delay cycle.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG 0x00009011
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSEBUF_EMPTY(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSEBUF_EMPTY_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSBIST_GEN_SKP_CNT(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSBIST_GEN_SKP_CNT_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:5  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
    Bits:  4:0  VPcsEbufFullM0(rw) - Elastic buffer full threshold, PCIe Gen1 and PCIe Gen2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG1 0x00009012
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M1(_x) (((_x) & 0x7) << 5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M1_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M0(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7    VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:2  VPcsEBufRdThresholdM0(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen1 and PCIe Gen2.
    Bits:  1:0  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG2 0x00009013
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M1 BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M0(_x) (((_x) & 0x1f) << 2)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M0_of(_x) (((_x) >> 2) & 0x1f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_FULL_M1(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_FULL_M1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  3:0  VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG3 0x00009014
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG3_VPCSEBUF_RD_THRESHOLD_M1(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG3_VPCSEBUF_RD_THRESHOLD_M1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:0  VPcsEqCoarseiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG 0x00009016
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_RUN_MASK BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG1 0x00009017
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG13 0x00009023
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ2_VPCSEQ_COARSE_RUN_MASK(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ2_VPCSEQ_COARSE_RUN_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:1  VPcsEqCoarseStep(rw) - RX Equalization calibration coarse mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
    Bits:  0    VpcsEqClrValsEn(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2 0x00009018
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_COARSE_STEP(_x) (((_x) & 0x1f) << 1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_COARSE_STEP_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_CLR_VALS_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  2:0  VPcsEqDcGainGen2(rw) - PCIe Gen2 Equalization control - AGC high frequency gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3 0x00009019
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_LOFREQAGCGAIN_GEN2(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_LOFREQAGCGAIN_GEN2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_DCGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_DCGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHoFreqAgcGainGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGaingen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4 0x0000901a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_HIFREQAGCCAP_GEN2(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_HIFREQAGCCAP_GEN2_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_DFEPSTAPGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_DFEPSTAPGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG5 0x0000901b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG6 0x0000901c
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP2GAIN_GEN2(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP2GAIN_GEN2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP1GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP1GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqDefpstapf3DbLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency.
    Bits:  2:0  VPcsEqDefpstapf3DbGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE 3dB cut-off frequency.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7 0x0000901d
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC low frequency gain.
    Bits:  2:0  VpcseqDcgainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8 0x0000901e
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_LOFREQAGCGAIN_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_LOFREQAGCGAIN_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_DCGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_DCGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHiFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9 0x0000901f
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_HIFREQAGCCAP_LUP0(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_HIFREQAGCCAP_LUP0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_DFEPSTAPGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_DFEPSTAPGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10 0x00009020
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP2GAIN_LUP0(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP2GAIN_LUP0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP1GAIN_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP1GAIN_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap4GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-4 tap gain.
    Bits:  3:0  VPcsEqDfetap3GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-3 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11 0x00009021
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP4GAIN_LUP0(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP4GAIN_LUP0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP3GAIN_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP3GAIN_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqFineRunMask(rw) - Equalization calibration fine mode variable control mask. Each bit controls whether or not an equalization variable will be swept during fine mode.0 - Do not sweep variable 1 - Sweep variable Bit 0 - AGC low frequency gain Bit 1 - AGC high frequency gain Bit 2 - AGC AC Boost Bit 3 - Pulse-shaping DFE 3dB cut-off frequency Bit 4 - Pulse-shaping DFE gain Bit 5 - Discontinuity DFE N-1 tap gain.
    Bits:  6:0  VPcsEqFineiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12 0x00009022
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_RUN_MASK BIT(7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:5  VPcsEqLookupLastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
    Bits:  4:0  VpcsEqFineStep(rw) - RX Equalization calibration fine mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14 0x00009024
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_LOOKUP_LASTCODE(_x) (((_x) & 0x7) << 5)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_LOOKUP_LASTCODE_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_FINE_STEP(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_FINE_STEP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0 inputs.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG15 0x00009025
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG16 0x00009026
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG17 0x00009027
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ14_VPCSEQ_LOOKUP_CODE_EN(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ14_VPCSEQ_LOOKUP_CODE_EN_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:0  VPcsEqTimeOut(rw) - .
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18 0x00009028
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18_VPCSEQ_TIMEOUT(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18_VPCSEQ_TIMEOUT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  Vpcsg2SymaAlignUnLockCnt(rw) - PCIe Gen2 symbol alignment unlock control. Symbol aligner will not move to unlocked mode until this number of incorrectly aligned ALIGN symbols. Setting this value to 0 will result in the symbol aligner not being able to move out of the locked mode until either electrical idle or reset.
    Bits:  3:0  Vpcsg2SymaAlignLockCnt(rw) - PCIe Gen2 symbol alignment lock control. Symbol aligner will not move to locked mode until this number of correctly aligned ALIGN symbols are seen. Setting this value to 0 will result in the symbol aligner not attempting to align.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19 0x00009029
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_UNLOCK_CNT(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_UNLOCK_CNT_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_LOCK_CNT(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_LOCK_CNT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:1  VpcsEqLoFreqacGainSwpmin(rw) - .
    Bits:  0    PcsClkCtrl(rw) - .
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20 0x0000902a
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_VPCSEQ_LOFREQAGCGAIN_SWPMIN(_x) (((_x) & 0x7) << 1)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_VPCSEQ_LOFREQAGCGAIN_SWPMIN_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_PCSCLK_CTRL BIT(0)

#else /* NFP6000_LONGNAMES */

/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsLo - Bits 31:0 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameTooLongErrors - Frame received exceeded the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxInRangeLengthErrors - A count of frames with a length/type field value between 46 (VLAN: 42) and less than 0x0600, that does not match the number of payload data octets received. Should count also if length/type field is less than 46 (VLAN: 42) and the frame is longer than 64 bytes.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxVlanReceivedOK - VLAN frame received without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) was received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsDropEvents - Counts the number of dropped packets due to internal errors of the MAC Client. Occurs when a Receive FIFO overflow condition persists.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxAlignmentErrors - Frame received with an alignment error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPauseMacCtlFramesReceived - Valid pause frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameCheckSequenceErrors - CRC-32 Error is detected but the frame is otherwise of correct length.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsUndersizePkts - Total number of packets that were less than 64 octets long with a good CRC. Note: Undersize packets are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsJabbers - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a bad Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsFragments - Total number of packets that were less than 64 octets long with a wrong CRC. Note: Fragments are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived2 - CBFC (Class Based Flow Control) pause frames received for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived3 - CBFC (Class Based Flow Control) pause frames received for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsOversizePkts - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a good Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived0 - CBFC (Class Based Flow Control) pause frames received for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived1 - CBFC (Class Based Flow Control) pause frames received for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived4 - CBFC (Class Based Flow Control) pause frames received for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived5 - CBFC (Class Based Flow Control) pause frames received for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived6 - CBFC (Class Based Flow Control) pause frames received for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived7 - CBFC (Class Based Flow Control) pause frames received for class 7.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxMacCtlFramesReceived - Valid control frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPauseMacCtlFramesTransmitted - Valid pause frame transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1518toMAXoctets - Frames (good and bad) with 1519 to MAX octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted0 - CBFC (Class Based Flow Control) pause frames transmitted for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted1 - CBFC (Class Based Flow Control) pause frames transmitted for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted4 - CBFC (Class Based Flow Control) pause frames transmitted for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted5 - CBFC (Class Based Flow Control) pause frames transmitted for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted2 - CBFC (Class Based Flow Control) pause frames transmitted for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted3 - CBFC (Class Based Flow Control) pause frames transmitted for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted6 - CBFC (Class Based Flow Control) pause frames transmitted for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted7 - CBFC (Class Based Flow Control) pause frames transmitted for class 7.
  Register: MacChannelStats[128]_RxCIfInOctetsLo - Bits 31:0 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsLo - Total number of octets for valid frames received. Good octets.
  Register: MacChannelStats[128]_RxCIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) that is signaled on the Rx FIFO interface.
  Register: MacChannelStats[128]_RxCIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacChannelStats[128]_RxCIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacChannelStats[128]_RxCIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacChannelStats[128]_RxCStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacChannelStats[128]_RxCStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacChannelStats[128]_RxCStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacChannelStats[128]_RxCStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacChannelStats[128]_RxCStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacChannelStats[128]_RxCStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacChannelStats[128]_RxChanFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacChannelStats[128]_RxChanVlanReceivedOK - VLAN frame received without error.
  Register: MacChannelStats[128]_TxCIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacChannelStats[128]_TxCIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacChannelStats[128]_TxCIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacChannelStats[128]_TxChanFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacChannelStats[128]_TxChanVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacChannelStats[128]_TxCIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacChannelStats[128]_TxCIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
    Bits: 31:0  StatCounter32(rc) - Clear on read 32 bit counter.
*/
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInOctetsLo(_x, _y) (0x00000000 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxFrameTooLongErrors(_x, _y) (0x00000008 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxInRangeLengthErrors(_x, _y) (0x0000000c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxVlanReceivedOK(_x, _y) (0x00000010 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInErrors(_x, _y) (0x00000014 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInBroadCastPkts(_x, _y) (0x00000018 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsDropEvents(_x, _y) (0x0000001c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxAlignmentErrors(_x, _y) (0x00000020 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPauseMacCtlFramesReceived(_x, _y) (0x00000024 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxFramesReceivedOK(_x, _y) (0x00000028 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxFrameCheckSequenceErrors(_x, _y) (0x0000002c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInUniCastPkts(_x, _y) (0x00000030 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInMultiCastPkts(_x, _y) (0x00000034 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts(_x, _y) (0x00000038 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsUndersizePkts(_x, _y) (0x0000003c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts64octets(_x, _y) (0x00000040 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts65to127octets(_x, _y) (0x00000044 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts512to1023octets(_x, _y) (0x00000048 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts1024to1518octets(_x, _y) (0x0000004c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsJabbers(_x, _y) (0x00000050 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsFragments(_x, _y) (0x00000054 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived2(_x, _y) (0x00000058 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived3(_x, _y) (0x0000005c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts128to255octets(_x, _y) (0x00000060 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts256to511octets(_x, _y) (0x00000064 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts1519toMaxoctets(_x, _y) (0x00000068 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsOversizePkts(_x, _y) (0x0000006c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived0(_x, _y) (0x00000070 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived1(_x, _y) (0x00000074 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived4(_x, _y) (0x00000078 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived5(_x, _y) (0x0000007c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived6(_x, _y) (0x00000080 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived7(_x, _y) (0x00000084 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxMacCtlFramesReceived(_x, _y) (0x00000088 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutOctetsLo(_x, _y) (0x000000a0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxVlanTransmittedOK(_x, _y) (0x000000a8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutErrors(_x, _y) (0x000000ac + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutBroadCastPkts(_x, _y) (0x000000b0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts64octets(_x, _y) (0x000000b4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts256to511octets(_x, _y) (0x000000b8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts512to1023octets(_x, _y) (0x000000bc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPauseMacCtlFramesTransmitted(_x, _y) (0x000000c0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxFramesTransmittedOK(_x, _y) (0x000000c4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutUniCastPkts(_x, _y) (0x000000c8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutMultiCastPkts(_x, _y) (0x000000cc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts65to127octets(_x, _y) (0x000000d0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts128to255octets(_x, _y) (0x000000d4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts1024to1518octets(_x, _y) (0x000000d8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts1518toMAXoctets(_x, _y) (0x000000dc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted0(_x, _y) (0x000000e0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted1(_x, _y) (0x000000e4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted4(_x, _y) (0x000000e8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted5(_x, _y) (0x000000ec + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted2(_x, _y) (0x000000f0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted3(_x, _y) (0x000000f4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted6(_x, _y) (0x000000f8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted7(_x, _y) (0x000000fc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacChannelStats_RxCIfInOctetsLo(_x)      (0x00010000 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsOctetsLo(_x)     (0x00010008 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCIfInErrors(_x)        (0x00010010 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCIfInUniCastPkts(_x)   (0x00010014 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCIfInMultiCastPkts(_x) (0x00010018 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCIfInBroadCastPkts(_x) (0x0001001c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts(_x)         (0x00010020 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts64octets(_x) (0x00010024 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts65to127octets(_x) (0x00010028 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts128to255octets(_x) (0x0001002c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts256to511octets(_x) (0x00010030 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts512to1023octets(_x) (0x00010034 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts1024to1518octets(_x) (0x00010038 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsPkts1519toMaxoctets(_x) (0x0001003c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxChanFramesReceivedOK(_x) (0x00010040 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxChanVlanReceivedOK(_x) (0x00010044 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxCIfOutOctetsLo(_x)     (0x00010060 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxCIfOutErrors(_x)       (0x00010068 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxCIfOutUniCastPkts(_x)  (0x0001006c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxChanFramesTransmittedOK(_x) (0x00010070 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxChanVlanTransmittedOK(_x) (0x00010074 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxCIfOutMultiCastPkts(_x) (0x00010078 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxCIfOutBroadCastPkts(_x) (0x0001007c + (0x100 * ((_x) & 0x7f)))
#define   NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter32_StatCounter32(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter32_StatCounter32_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsHi - Bits 39:32 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted. Valid pause frame transmitted.for 24bit (TxCounter24)
  Register: MacChannelStats[128]_RxCIfInOctetsHi - Bits 39:32 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsHi - Total number of octets for valid frames received. Good octets.
  Register: MacChannelStats[128]_TxCIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
    Bits:  7:0  StatCounter8(rc) - Clear on read 8 bit counter.
*/
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInOctetsHi(_x, _y) (0x00000004 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutOctetsHi(_x, _y) (0x000000a4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP_NBI_MAC_MacChannelStats_RxCIfInOctetsHi(_x)      (0x00010004 + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_RxCStatsOctetsHi(_x)     (0x0001000c + (0x100 * ((_x) & 0x7f)))
#define NFP_NBI_MAC_MacChannelStats_TxCIfOutOctetsHi(_x)     (0x00010064 + (0x100 * ((_x) & 0x7f)))
#define   NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter8_StatCounter8(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter8_StatCounter8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacBlkReset - Main Block Resets
    Bits: 31:24 Rfu2(rw) - Reserved for Use.
    Bits: 23    MacHy1StatRst(rw) - The Reset for Hydra1 Stats logic.
    Bits: 22    MacHy0StatRst(rw) - The Reset for Hydra0 stats logic.
    Bits: 21    MacTxRstMpb(rw) - The Reset for tx gasket MPB logic.
    Bits: 20    MacRxRstMpb(rw) - The Reset for rx gasket MPB logic.
    Bits: 19    MacTxRstCore(rw) - The Reset for tx gasket core logic.
    Bits: 18    MacRxRstCore(rw) - The Reset for rx gasket core logic.
    Bits: 17    MacFcX2RstLk1(rw) - The fc_x2_rst must be held active for at least 20 cycles for fc logic to be reset.
    Bits: 16    MacFcX2RstLk0(rw) - The fc_x2_rst must be held active for at least 20 cycles for fc logic to be reset.
    Bits: 15    MacRxRstLk1(rw) - The rx_rst must be held active for at least 20 cycles for the RX logic to be reset. SerDes RX clocks must be operating.
    Bits: 14    MacRxRstLk0(rw) - The rx_rst must be held active for at least 20 cycles for RX logic to be reset. SerDes RX clocks must be operating.
    Bits: 13    MacTxRstLk1(rw) - The tx_rst must be held active for at least 20 cycles the TX logic to be reset. SerDes TX clocks must be operating.
    Bits: 12    MacTxRstLk0(rw) - The tx_rst must be held active for at least 20 cycles the TX logic to be reset. SerDes TX clocks must be operating.
    Bits: 11    MacRstLk1(rw) - RST must be held active for at least 20 cycles for the Memory Mapped Registers logic to be reset. Then 20 cycles is needed for the reset propagation delay before any Memory Mapped Registers can be written, once the writes are complete another 50 cycles is needed so that the Interlaken core can be configured based from the values written. The core can start sending data once the mmr writes plus 50 clock cycles are complete.
    Bits: 10    MacRstLk0(rw) - RST must be held active for at least 20 cycles for the Memory Mapped Registers, TX logic, and RX logic to be reset. Then 20 cycles is needed for the reset propagation delay before any Memory Mapped Registers can be written, once the writes are complete another 50 cycles is needed so that the Interlaken core can be configured based from the values written. The core can start sending data once the mmr writes plus 50 clock cycles are complete.
    Bits:  9    MacX2ClkEnLk1(rw) - X2 Clock enable for Laken1
    Bits:  8    MacX2ClkEnLk0(rw) - X2 Clock enable for Laken0
    Bits:  7    MacCoreClkEnLk1(rw) - Core Clock enable for Laken1
    Bits:  6    MacCoreClkEnLk0(rw) - Core Clock enable for Laken0
    Bits:  5    MacCoreClkEnHy1(rw) - Core Clock enable for Hydra1
    Bits:  4    MacCoreClkEnHy0(rw) - Core Clock enable for Hydra0
    Bits:  3    Rfu(rw) - Reserved for Use.
    Bits:  2    MacSerDesRst(rw) - Reset to all MAC SerDes
    Bits:  1    MacSReset(rw) - SRESET - Not Used
    Bits:  0    MacHReset(rw) - HRESET - Not Used
*/
#define NFP_NBI_MACX_CSR_MacBlkReset                         0x00000000
#define   NFP_NBI_MACX_CSR_MacBlkReset_Rfu2(_x)              (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MacBlkReset_Rfu2_of(_x)           (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacHy1StatRst         BIT(23)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacHy0StatRst         BIT(22)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacTxRstMpb           BIT(21)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacRxRstMpb           BIT(20)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacTxRstCore          BIT(19)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacRxRstCore          BIT(18)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacFcX2RstLk1         BIT(17)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacFcX2RstLk0         BIT(16)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacRxRstLk1           BIT(15)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacRxRstLk0           BIT(14)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacTxRstLk1           BIT(13)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacTxRstLk0           BIT(12)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacRstLk1             BIT(11)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacRstLk0             BIT(10)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacX2ClkEnLk1         BIT(9)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacX2ClkEnLk0         BIT(8)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnLk1       BIT(7)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnLk0       BIT(6)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnHy1       BIT(5)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnHy0       BIT(4)
#define   NFP_NBI_MACX_CSR_MacBlkReset_Rfu                   BIT(3)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacSerDesRst          BIT(2)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacSReset             BIT(1)
#define   NFP_NBI_MACX_CSR_MacBlkReset_MacHReset             BIT(0)
/*----------------------------------------------------------------
  Register: MacHyd0BlkReset - Hydra0 Resets Register
  Register: MacHyd1BlkReset - Hydra1 Resets Register
    Bits: 31:20 MacHydRxSerDesIfRst(rw) - Hydra RX Serdes Interface Resets. Rx Serdes clks must be running.
    Bits: 19:16 Rfu(rw) - Reserved for Use.
    Bits: 15:4  MacHydTxSerDesIfRst(rw) - Hydra TX Serdes Interface Resets. Tx Serdes clks must be running.
    Bits:  3    MacHydRxFFRst(rw) - Hydra RX Fifo Interface Clock Domain Reset.
    Bits:  2    MacHydTxFFRst(rw) - Hydra TX Fifo Interface Clock Domain Reset.
    Bits:  1    MacHydRegRst(rw) - Hydra Reg Clock Domain Reset.
    Bits:  0    MacHydRefRst(rw) - Hydra Ref Clock Domain Reset.
*/
#define NFP_NBI_MACX_CSR_MacHyd0BlkReset                     0x00000004
#define NFP_NBI_MACX_CSR_MacHyd1BlkReset                     0x00000008
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydRxSerDesIfRst(_x) (((_x) & 0xfff) << 20)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydRxSerDesIfRst_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_Rfu(_x)            (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_Rfu_of(_x)         (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydTxSerDesIfRst(_x) (((_x) & 0xfff) << 4)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydTxSerDesIfRst_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydRxFFRst      BIT(3)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydTxFFRst      BIT(2)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydRegRst       BIT(1)
#define   NFP_NBI_MACX_CSR_MacHydBlkReset_MacHydRefRst       BIT(0)
/*----------------------------------------------------------------
  Register: MacMuxCtrl - Mac Mux Control Register
    Bits: 31:25 Rfu(rw) - Reserved for Use.
    Bits: 24    LASelect(rw) - MAC ILA MUX Select
    Bits: 23:0  MacSerDesIntlknSel(rw) - Selects Interlaken or Ethernet MACs for SerDes connect
*/
#define NFP_NBI_MACX_CSR_MacMuxCtrl                          0x0000000c
#define   NFP_NBI_MACX_CSR_MacMuxCtrl_Rfu(_x)                (((_x) & 0x7f) << 25)
#define   NFP_NBI_MACX_CSR_MacMuxCtrl_Rfu_of(_x)             (((_x) >> 25) & 0x7f)
#define   NFP_NBI_MACX_CSR_MacMuxCtrl_LASelect               BIT(24)
#define     NFP_NBI_MACX_CSR_MacMuxCtrl_LASelect_MAC         (0 << 24)
#define     NFP_NBI_MACX_CSR_MacMuxCtrl_LASelect_ILA         BIT(24)
#define   NFP_NBI_MACX_CSR_MacMuxCtrl_MacSerDesIntlknSel(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacMuxCtrl_MacSerDesIntlknSel_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacSerDesEn - Mac SerDes Enable Register
    Bits: 31:24 Rfu(rw) - Reserved for Use.
    Bits: 23:0  SerDesEnable(rw) - Serdes Enables. (May be redefined when SerDes added).
*/
#define NFP_NBI_MACX_CSR_MacSerDesEn                         0x00000010
#define   NFP_NBI_MACX_CSR_MacSerDesEn_Rfu(_x)               (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MacSerDesEn_Rfu_of(_x)            (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MacSerDesEn_SerDesEnable(_x)      (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacSerDesEn_SerDesEnable_of(_x)   (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacSysSupCtrl - Mac System Support Control Register
    Bits: 31:24 MacSysSupCtrlC(rw) - Extra Control Bits for system support block
    Bits: 23:20 MacMpbFreeBufFifoLowWm(rw) - Low Water mark for Free Buffer FIFO to start backpressuring NBI MPB thru denial of data credits.
    Bits: 19    MacIgLnkLstFreezeOnErrN(rw) - When 0, Freeze IG Linklist on Multibit ECC error.
    Bits: 18    MacEgLnkLstFreezeOnErrN(rw) - When 0, Freeze EG Linklist on Multibit ECC error.
    Bits: 17    DwrrArbiterDisable(rw) - IG DQ DWRR arbiter disable bit. Setting this bit to 1 will disable Ingress DQ operation.
    Bits: 16    DwrrWeightWrEnable(rw) - IG DQ DWRR arbiter inits to fixed weights. To overwrite the fixed weights, this bit must be set and remain set to use the override values.
    Bits: 15    MacIlkLiveIntSel(rw) - When set, ILK IP Interrupts are selected live to the ILK status register. When clear, the Interrupt bits are sticky and clear on read.
    Bits: 14    Lk1IgDqSegmentedEn(rw) - When set IG DQ from LK1 channels is segmented on buffer (256B) boundries, subject to the limits of packet credits.
    Bits: 13    Lk0IgDqSegmentedEn(rw) - When set IG DQ from LK0 channels is segmented on buffer (256B) boundries, subject to the limits of packet credits.
    Bits: 12    Lk1LinklistEn(rw) - When set and SplitMemIG set, enables the IG freelist FIFO for Laken1 to pull from the free pool.
    Bits: 11    Lk0LinklistEn(rw) - When set, enables the IG freelist FIFO for Laken0 to pull from the free pool.
    Bits: 10    Hy1LinklistEn(rw) - When set and SplitMemIG also set, enables the IG freelist FIFO for Hydra1 to pull from the free pool.
    Bits:  9    Hy0LinklistEn(rw) - When set, enables the IG freelist FIFO for Hydra0 to pull from the free pool.
    Bits:  8    SplitMemIG(rw) - When set, splits the channels, packet and linklist memories in half to support 2 active hydras. Ingress and Egress.
    Bits:  7    ExtraEthHistMode(rw) - When set, swaps some channel stats counters for additional histogram size counters. Ethernet ports only
    Bits:  6:4  MacSysSupCtrlA(rw) - Control Bits for system support block
    Bits:  3    TimeStampFrc(rw) - When set, timestamp runs as a 64-bit Free Running Counter incrementing the assigned every Core_Clock cycle. When 0, the counters operate as 32 bits of seconds and 32 bits of nsec when the appropriate increment value is set with the lower 32 bits rolling over to 0 at 999,999,999 + 1 and incrementing the upper 32 bit seconds counter
    Bits:  2    TimeStampSet(rw) - When set, timestamp loads with the init values from the setSec and setNsec registers. TimeStamEn MUST BE 0 for set function to operate.
    Bits:  1    TimeStampRst(rw) - When set, timestamp resets to 0.
    Bits:  0    TimeStampEn(rw) - When set, timestamp increments at the set incr value each core_clock.
*/
#define NFP_NBI_MACX_CSR_MacSysSupCtrl                       0x00000014
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacSysSupCtrlC(_x)  (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacSysSupCtrlC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacMpbFreeBufFifoLowWm(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacMpbFreeBufFifoLowWm_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacIgLnkLstFreezeOnErrN BIT(19)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacEgLnkLstFreezeOnErrN BIT(18)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_DwrrArbiterDisable  BIT(17)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_DwrrWeightWrEnable  BIT(16)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacIlkLiveIntSel    BIT(15)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_Lk1IgDqSegmentedEn  BIT(14)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_Lk0IgDqSegmentedEn  BIT(13)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_Lk1LinklistEn       BIT(12)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_Lk0LinklistEn       BIT(11)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_Hy1LinklistEn       BIT(10)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_Hy0LinklistEn       BIT(9)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_SplitMemIG          BIT(8)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_ExtraEthHistMode    BIT(7)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacSysSupCtrlA(_x)  (((_x) & 0x7) << 4)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_MacSysSupCtrlA_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_TimeStampFrc        BIT(3)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_TimeStampSet        BIT(2)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_TimeStampRst        BIT(1)
#define   NFP_NBI_MACX_CSR_MacSysSupCtrl_TimeStampEn         BIT(0)
/*----------------------------------------------------------------
  Register: MacSysSupStat - Mac System Support Status Register
    Bits: 31:0  MacSysSupStat(rw) - Status Bits for system support block
*/
#define NFP_NBI_MACX_CSR_MacSysSupStat                       0x00000018
#define   NFP_NBI_MACX_CSR_MacSysSupStat_MacSysSupStat(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacSysSupStat_MacSysSupStat_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampNsec - Mac TimeStamp Nanoseconds
    Bits: 31:0  MacTimeStampNsec(ro) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP_NBI_MACX_CSR_MacTimeStampNsec                    0x0000001c
#define   NFP_NBI_MACX_CSR_MacTimeStampNsec_MacTimeStampNsec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacTimeStampNsec_MacTimeStampNsec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSec - Mac TimeStamp Seconds
    Bits: 31:0  MacTimeStampSec(ro) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP_NBI_MACX_CSR_MacTimeStampSec                     0x00000020
#define   NFP_NBI_MACX_CSR_MacTimeStampSec_MacTimeStampSec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacTimeStampSec_MacTimeStampSec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampIncr - Mac TimeStamp Increment in Nanoseconds and fraction of nanoseconds
    Bits: 19:16 IncrNsec(rw) - Increment in whole nsecs to TsNsec in nsec every XPB Clock
    Bits: 15:0  IncrFraction(rw) - Increment in fractional to TsNsec in nsec every XPB Clock to compensate for various clock frequencies
*/
#define NFP_NBI_MACX_CSR_MacTimeStampIncr                    0x00000024
#define   NFP_NBI_MACX_CSR_MacTimeStampIncr_IncrNsec(_x)     (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacTimeStampIncr_IncrNsec_of(_x)  (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTimeStampIncr_IncrFraction(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_MacTimeStampIncr_IncrFraction_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetNsec - Mac TimeStamp Set Nanoseconds
    Bits: 31:0  MacTimeStampSetNsec(rw) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP_NBI_MACX_CSR_MacTimeStampSetNsec                 0x00000028
#define   NFP_NBI_MACX_CSR_MacTimeStampSetNsec_MacTimeStampSetNsec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacTimeStampSetNsec_MacTimeStampSetNsec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetSec - Mac TimeStamp Set Seconds
    Bits: 31:0  MacTimeStampSetSec(rw) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP_NBI_MACX_CSR_MacTimeStampSetSec                  0x0000002c
#define   NFP_NBI_MACX_CSR_MacTimeStampSetSec_MacTimeStampSetSec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacTimeStampSetSec_MacTimeStampSetSec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord3100 - Egress TDM cycle word 31:00 for Hydra0 and Interlaken(s).
  Register: MacTdm1CycleWord3100 - Egress TDM cycle word 31:00 for Hydra1 and Interlaken(s).
    Bits: 31:28 MacTdmPortSlot7(rw) - TDM egress port for TDM slot 7
    Bits: 27:24 MacTdmPortSlot6(rw) - TDM egress port for TDM slot 6
    Bits: 23:20 MacTdmPortSlot5(rw) - TDM egress port for TDM slot 5
    Bits: 19:16 MacTdmPortSlot4(rw) - TDM egress port for TDM slot 4
    Bits: 15:12 MacTdmPortSlot3(rw) - TDM egress port for TDM slot 3
    Bits: 11:8  MacTdmPortSlot2(rw) - TDM egress port for TDM slot 2
    Bits:  7:4  MacTdmPortSlot1(rw) - TDM egress port for TDM slot 1
    Bits:  3:0  MacTdmPortSlot0(rw) - TDM egress port for TDM slot 0
*/
#define NFP_NBI_MACX_CSR_MacTdm0CycleWord3100                0x00000030
#define NFP_NBI_MACX_CSR_MacTdm1CycleWord3100                0x00000038
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot7(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot6(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot6_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot5(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot5_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot4(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot4_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot3(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot3_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot2(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot1(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord4732 - Egress TDM cycle word 47:32 for Hydra0.
  Register: MacTdm1CycleWord4732 - Egress TDM cycle word 47:32 for Hydra1.
    Bits: 15:12 MacTdmPortSlot11(rw) - TDM egress port for TDM slot 11
    Bits: 11:8  MacTdmPortSlot10(rw) - TDM egress port for TDM slot 10
    Bits:  7:4  MacTdmPortSlot9(rw) - TDM egress port for TDM slot 9
    Bits:  3:0  MacTdmPortSlot8(rw) - TDM egress port for TDM slot 8
*/
#define NFP_NBI_MACX_CSR_MacTdm0CycleWord4732                0x00000034
#define NFP_NBI_MACX_CSR_MacTdm1CycleWord4732                0x0000003c
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot11(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot11_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot10(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot10_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot9(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot9_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot8(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0Mode0900 - Mac Hydra0 Ports Egress rate bits 29:00 (ports 9-0).
  Register: MacTdm1Mode0900 - Mac Hydra1 Ports Egress rate bits 29:00 (ports 9-0).
    Bits: 29:27 MacTdmModePort9(rw) - TDM egress port rate for Mac port 9
    Bits: 26:24 MacTdmModePort8(rw) - TDM egress port rate for Mac port 8
    Bits: 23:21 MacTdmModePort7(rw) - TDM egress port rate for Mac port 67
    Bits: 20:18 MacTdmModePort6(rw) - TDM egress port rate for Mac port 6
    Bits: 17:15 MacTdmModePort5(rw) - TDM egress port rate for Mac port 5
    Bits: 14:12 MacTdmModePort4(rw) - TDM egress port rate for Mac port 4
    Bits: 11:9  MacTdmModePort3(rw) - TDM egress port rate for Mac port 3
    Bits:  8:6  MacTdmModePort2(rw) - TDM egress port rate for Mac port 2
    Bits:  5:3  MacTdmModePort1(rw) - TDM egress port rate for Mac port 1
    Bits:  2:0  MacTdmModePort0(rw) - TDM egress port rate for Mac port 0
*/
#define NFP_NBI_MACX_CSR_MacTdm0Mode0900                     0x00000040
#define NFP_NBI_MACX_CSR_MacTdm1Mode0900                     0x00000048
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9(_x) (((_x) & 0x7) << 27)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_of(_x) (((_x) >> 27) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8(_x) (((_x) & 0x7) << 24)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_of(_x) (((_x) >> 24) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7(_x) (((_x) & 0x7) << 21)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_of(_x) (((_x) >> 21) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6(_x) (((_x) & 0x7) << 18)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_of(_x) (((_x) >> 18) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5(_x) (((_x) & 0x7) << 15)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_of(_x) (((_x) >> 15) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4(_x) (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_of(_x) (((_x) >> 12) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3(_x) (((_x) & 0x7) << 9)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_of(_x) (((_x) >> 9) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2(_x) (((_x) & 0x7) << 6)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_of(_x) (((_x) >> 6) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_of(_x) (((_x) >> 3) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_of(_x) (((_x) >> 0) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_100G (4)
/*----------------------------------------------------------------
  Register: MacTdm0Mode1110CrcEn - Mac Hydra0 Ports Egress rate bits 35:30 (ports 11-10). Also Tx Crc enable for ports 11-0.
  Register: MacTdm1Mode1110CrcEn - Mac Hydra1 Ports Egress rate bits 35:30 (ports 11-10). Also Tx Crc enable for ports 11-0.
    Bits: 27:16 MacEgressPortCrcEn(rw) - If set, Enables MAC egress port (11-0) to append CRC.
    Bits:  5:3  MacTdmModePort1(rw) - TDM egress port rate for Mac port 1
    Bits:  2:0  MacTdmModePort0(rw) - TDM egress port rate for Mac port 0
*/
#define NFP_NBI_MACX_CSR_MacTdm0Mode1110CrcEn                0x00000044
#define NFP_NBI_MACX_CSR_MacTdm1Mode1110CrcEn                0x0000004c
#define   NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacEgressPortCrcEn(_x) (((_x) & 0xfff) << 16)
#define   NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacEgressPortCrcEn_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1_of(_x) (((_x) >> 3) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort1_100G (4)
#define   NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0_of(_x) (((_x) >> 0) & 0x7)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0_OFF (0)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0_1G (1)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0_10G (2)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0_40G (3)
#define     NFP_NBI_MACX_CSR_MacTdmMode1110Crc_MacTdmModePort0_100G (4)
/*----------------------------------------------------------------
  Register: MacPort2to0ChanAssign - Mac Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacPort5to3ChanAssign - Mac Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacPort8to6ChanAssign - Mac Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacPort11to9ChanAssign - Mac Hydra0 Ports 11-9 Channel Assignment Register.
  Register: MacPort14to12ChanAssign - Mac Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacPort17to15ChanAssign - Mac Hydra1 Ports 5-3 Channel Assignment Register.
  Register: MacPort20to18ChanAssign - Mac Hydra1 Ports 8-6 Channel Assignment Register.
  Register: MacPort23to21ChanAssign - Mac Hydra1 Ports 11-9 Channel Assignment Register.
  Register: MacEgPort2to0ChanAssign - Mac EG Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort5to3ChanAssign - Mac EG Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacEgPort8to6ChanAssign - Mac EG Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacEgPort11to9ChanAssign - Mac EG Hydra0 Ports 11-9 Channel Assignment Register.
  Register: MacEgPort14to12ChanAssign - Mac EG Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort17to15ChanAssign - Mac EG Hydra1 Ports 5-3 Channel Assignment Register.
  Register: MacEgPort20to18ChanAssign - Mac EG Hydra1 Ports 8-6 Channel Assignment Register.
  Register: MacEgPort23to21ChanAssign - Mac EG Hydra1 Ports 11-9 Channel Assignment Register.
    Bits: 29:26 PortNumOfChannels2(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 25:20 PortBaseChan2(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits: 19:16 PortNumOfChannels1(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 15:10 PortBaseChan1(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits:  9:6  PortNumOfChannels0(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits:  5:0  PortBaseChan0(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
*/
#define NFP_NBI_MACX_CSR_MacPort2to0ChanAssign               0x00000050
#define NFP_NBI_MACX_CSR_MacPort5to3ChanAssign               0x00000054
#define NFP_NBI_MACX_CSR_MacPort8to6ChanAssign               0x00000058
#define NFP_NBI_MACX_CSR_MacPort11to9ChanAssign              0x0000005c
#define NFP_NBI_MACX_CSR_MacPort14to12ChanAssign             0x00000060
#define NFP_NBI_MACX_CSR_MacPort17to15ChanAssign             0x00000064
#define NFP_NBI_MACX_CSR_MacPort20to18ChanAssign             0x00000068
#define NFP_NBI_MACX_CSR_MacPort23to21ChanAssign             0x0000006c
#define NFP_NBI_MACX_CSR_MacEgPort2to0ChanAssign             0x00000240
#define NFP_NBI_MACX_CSR_MacEgPort5to3ChanAssign             0x00000244
#define NFP_NBI_MACX_CSR_MacEgPort8to6ChanAssign             0x00000248
#define NFP_NBI_MACX_CSR_MacEgPort11to9ChanAssign            0x0000024c
#define NFP_NBI_MACX_CSR_MacEgPort14to12ChanAssign           0x00000250
#define NFP_NBI_MACX_CSR_MacEgPort17to15ChanAssign           0x00000254
#define NFP_NBI_MACX_CSR_MacEgPort20to18ChanAssign           0x00000258
#define NFP_NBI_MACX_CSR_MacEgPort23to21ChanAssign           0x0000025c
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels2(_x) (((_x) & 0xf) << 26)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels2_of(_x) (((_x) >> 26) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan2(_x) (((_x) & 0x3f) << 20)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan2_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels1(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan1(_x) (((_x) & 0x3f) << 10)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan1_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels0(_x) (((_x) & 0xf) << 6)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels0_of(_x) (((_x) >> 6) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacPrePendCtl03to00 - Ethernet Core 0: Mac ports 03-00 prepend skip bytes.(Port0 maps to ILK0.)
  Register: MacPrePendCtl15to12 - Ethernet Core 1: Mac ports 03-00 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only). Ports 0 Maps to Interlaken MAC 0 if enabled.
    Bits:  3:0  IGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only). Port 0 Maps to Interlaken MAC 0 if enabled.
*/
#define NFP_NBI_MACX_CSR_MacPrePendCtl03to00                 0x00000070
#define NFP_NBI_MACX_CSR_MacPrePendCtl15to12                 0x0000007c
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort3(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort3_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort3(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort3_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort2(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort2_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort2(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort2_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort1(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort1_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort1(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort0(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl07to04 - Ethernet Core 0: Mac ports 07-04 prepend skip bytes.
  Register: MacPrePendCtl19to16 - Ethernet Core 1: Mac ports 07-04 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP_NBI_MACX_CSR_MacPrePendCtl07to04                 0x00000074
#define NFP_NBI_MACX_CSR_MacPrePendCtl19to16                 0x00000080
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort7(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort7(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort7_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort6(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort6_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort6(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort6_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort5(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort5_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort5(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort5_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort4(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort4_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort4(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl11to08 - Ethernet Core 0: Mac ports 11-08 prepend skip bytes.
  Register: MacPrePendCtl23to20 - Ethernet Core 1: Mac ports 11-08 prepend skip bytes.(Port23 maps to ILK1.)
    Bits: 31:28 EGSkipOctetsPort11(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only). Port 23 Maps to Interlaken MAC 1 if enabled.
    Bits: 27:24 IGSkipOctetsPort11(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only). Port 23 Maps to Interlaken MAC 1 if enabled.
    Bits: 23:20 EGSkipOctetsPort10(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort10(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP_NBI_MACX_CSR_MacPrePendCtl11to08                 0x00000078
#define NFP_NBI_MACX_CSR_MacPrePendCtl23to20                 0x00000084
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort11(_x) (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort11_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort11(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort11_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort10(_x) (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort10_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort10(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort10_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort9(_x) (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort9_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort9(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort9_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort8(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort8_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort8(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtl15to00 - Mac IG ports 15-00 DSA TAG control.
  Register: MacEgPrePendDsaCtl15to00 - Mac EG ports 15-00 DSA TAG control.
    Bits: 31:30 DsaTagModePort15(rw) - DSA tagging mode for port 15.
    Bits: 29:28 DsaTagModePort14(rw) - DSA tagging mode for port 14.
    Bits: 27:26 DsaTagModePort13(rw) - DSA tagging mode for port 13.
    Bits: 25:24 DsaTagModePort12(rw) - DSA tagging mode for port 12.
    Bits: 23:22 DsaTagModePort11(rw) - DSA tagging mode for port 11.
    Bits: 21:20 DsaTagModePort10(rw) - DSA tagging mode for port 10.
    Bits: 19:18 DsaTagModePort9(rw) - DSA tagging mode for port 9.
    Bits: 17:16 DsaTagModePort8(rw) - DSA tagging mode for port 8.
    Bits: 15:14 DsaTagModePort7(rw) - DSA tagging mode for port 7.
    Bits: 13:12 DsaTagModePort6(rw) - DSA tagging mode for port 6.
    Bits: 11:10 DsaTagModePort5(rw) - DSA tagging mode for port 5.
    Bits:  9:8  DsaTagModePort4(rw) - DSA tagging mode for port 4.
    Bits:  7:6  DsaTagModePort3(rw) - DSA tagging mode for port 3.
    Bits:  5:4  DsaTagModePort2(rw) - DSA tagging mode for port 2.
    Bits:  3:2  DsaTagModePort1(rw) - DSA tagging mode for port 1.
    Bits:  1:0  DsaTagModePort0(rw) - DSA tagging mode for port 0.
*/
#define NFP_NBI_MACX_CSR_MacPrePendDsaCtl15to00              0x00000088
#define NFP_NBI_MACX_CSR_MacEgPrePendDsaCtl15to00            0x000001cc
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort15(_x) (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort15_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort14(_x) (((_x) & 0x3) << 28)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort14_of(_x) (((_x) >> 28) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort13(_x) (((_x) & 0x3) << 26)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort13_of(_x) (((_x) >> 26) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort12(_x) (((_x) & 0x3) << 24)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort12_of(_x) (((_x) >> 24) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort11(_x) (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort11_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort10(_x) (((_x) & 0x3) << 20)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort10_of(_x) (((_x) >> 20) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort9(_x) (((_x) & 0x3) << 18)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort9_of(_x) (((_x) >> 18) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort8(_x) (((_x) & 0x3) << 16)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort8_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort7(_x) (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort7_of(_x) (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort6(_x) (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort6_of(_x) (((_x) >> 12) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort5(_x) (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort5_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort4(_x) (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort4_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort3(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort3_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort2(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort1(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_of(_x) (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_DISABLED (0)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_4B (1)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_8B (2)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_INV (3)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtlLkand23to16 - Mac IG ports ILK and 23-16 DSA TAG control.
  Register: MacEgPrePendDsaCtlLkand23to16 - "Mac EG ports ILK and 23-16 DSA TAG control.
    Bits: 31:20 Rfu(rw) - Reserved for Use.
    Bits: 19:18 DsaTagModeLkCore1(rw) - DSA tagging mode for LK Core 1.
    Bits: 17:16 DsaTagModeLkCore0(rw) - DSA tagging mode for LK Core 0.
    Bits: 15:14 DsaTagModePort23(rw) - DSA tagging mode for port 23.
    Bits: 13:12 DsaTagModePort22(rw) - DSA tagging mode for port 22.
    Bits: 11:10 DsaTagModePort21(rw) - DSA tagging mode for port 21.
    Bits:  9:8  DsaTagModePort20(rw) - DSA tagging mode for port 20.
    Bits:  7:6  DsaTagModePort19(rw) - DSA tagging mode for port 19.
    Bits:  5:4  DsaTagModePort18(rw) - DSA tagging mode for port 18.
    Bits:  3:2  DsaTagModePort17(rw) - DSA tagging mode for port 17.
    Bits:  1:0  DsaTagModePort16(rw) - DSA tagging mode for port 16.
*/
#define NFP_NBI_MACX_CSR_MacPrePendDsaCtlLkand23to16         0x0000008c
#define NFP_NBI_MACX_CSR_MacEgPrePendDsaCtlLkand23to16       0x000001d0
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_Rfu(_x)         (((_x) & 0xfff) << 20)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_Rfu_of(_x)      (((_x) >> 20) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModeLkCore1(_x) (((_x) & 0x3) << 18)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModeLkCore1_of(_x) (((_x) >> 18) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModeLkCore0(_x) (((_x) & 0x3) << 16)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModeLkCore0_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort23(_x) (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort23_of(_x) (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort22(_x) (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort22_of(_x) (((_x) >> 12) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort21(_x) (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort21_of(_x) (((_x) >> 10) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort20(_x) (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort20_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort19(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort19_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort18(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort18_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort17(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort17_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_of(_x) (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_DISABLED (0)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_4B (1)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_8B (2)
#define     NFP_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_INV (3)
/*----------------------------------------------------------------
  Register: MacInterlakenCtl1 - Interlaken control register 1.
    Bits: 31:29 LkBurstMaxCore1(rw) - Core1 Burstmax setting for the gasket controls.
    Bits: 28:22 LkNumChannelsUpper64(rw) - The number of contiguous channels, starting at the base_channel(upper64base of 0 maps to channel 64), Interlaken Core0 or Core1 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits: 21:16 LkBaseChannelUpper64(rw) - Sets the base channel number of the upper 64 channels for Interlaken use. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). A BaseChannel value of 0 maps to physical channel 64
    Bits: 15:13 LkBurstMaxCore0(rw) - Core0 Burstmax setting for the gasket controls.
    Bits: 12:6  LkNumChannelsLower64(rw) - The number of contiguous channels, starting at the base_channel, Interlaken Core0 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For Core0 ONLY. BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits:  5:0  LkBaseChannelLower64(rw) - Sets the base channel number of the lower 64 channels for Interlaken use. ONLY Core0 can access these channels (0-63).
*/
#define NFP_NBI_MACX_CSR_MacInterlakenCtl1                   0x00000090
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1(_x) (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_64B (0)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_128B (1)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_196B (2)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_256B (3)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_320B (4)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_384B (5)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_448B (6)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore1_512B (7)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkNumChannelsUpper64(_x) (((_x) & 0x7f) << 22)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkNumChannelsUpper64_of(_x) (((_x) >> 22) & 0x7f)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBaseChannelUpper64(_x) (((_x) & 0x3f) << 16)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBaseChannelUpper64_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0(_x) (((_x) & 0x7) << 13)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_of(_x) (((_x) >> 13) & 0x7)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_64B (0)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_128B (1)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_196B (2)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_256B (3)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_320B (4)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_384B (5)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_448B (6)
#define     NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBurstMaxCore0_512B (7)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkNumChannelsLower64(_x) (((_x) & 0x7f) << 6)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkNumChannelsLower64_of(_x) (((_x) >> 6) & 0x7f)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBaseChannelLower64(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl1_LkBaseChannelLower64_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacInterlakenCtl2 - Interlaken control register 2.
    Bits: 31:23 Rfu2(rw) - Reserved for Use.
    Bits: 22    LkNbiChanSwapEn1(rw) - When set, will map Laken1 Interlaken channels 0-63 to NBI channels 64-127.
    Bits: 21    IgOobFcSelCore1(rw) - When set, the ingress FC state is transmitted out thru the Out-Of-Band path only. The In-Band path will be all 1's. When clear, only the In-Band path will send FC state information.
    Bits: 20    EgOobFcSelCore1(rw) - When set, the egress FC decisions are made from the Xon vector provided by the OOB core1. If 0, then the FC decisions are made from the InBand Xon vector.
    Bits: 19:17 EgTdmModeLkCore1(rw) - RFU.
    Bits: 16    EgAtomicLkCore1(rw) - If set to 1, the dequeue is SOP to EOP, no interleave. If 0, segmented packet dequeue is allowed with channel interleaving on egress Core1.
    Bits: 15:7  Rfu(rw) - Reserved for Use.
    Bits:  6    LkNbiChanSwapEn0(rw) - When set, will map Laken0 Interlaken channels 0-63 to NBI channels 64-127 if split_mem not set and Laken0 only enabled on channels 64-127, otherwise channels are mapped one-to-one..
    Bits:  5    IgOobFcSelCore0(rw) - When set, the ingress FC state is transmitted out thru the Out-Of-Band path only. The In-Band path will be all 1's. When clear, only the In-Band path will send FC state information.
    Bits:  4    EgOobFcSelCore0(rw) - When set, the egress FC decisions are made from the Xon vector provided by the OOB core0. If 0, then the FC decisions are made from the InBand Xon vector.
    Bits:  3:1  EgTdmModeLkCore0(rw) - RFU.
    Bits:  0    EgAtomicLkCore0(rw) - If set to 1, the dequeue is SOP to EOP, no interleave. If 0, segmented packet dequeue is allowed with channel interleaving on egress Core0.
*/
#define NFP_NBI_MACX_CSR_MacInterlakenCtl2                   0x00000094
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_Rfu2(_x)        (((_x) & 0x1ff) << 23)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_Rfu2_of(_x)     (((_x) >> 23) & 0x1ff)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_LkNbiChanSwapEn1 BIT(22)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_IgOobFcSelCore1 BIT(21)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgOobFcSelCore1 BIT(20)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgTdmModeLkCore1(_x) (((_x) & 0x7) << 17)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgTdmModeLkCore1_of(_x) (((_x) >> 17) & 0x7)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgAtomicLkCore1 BIT(16)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_Rfu(_x)         (((_x) & 0x1ff) << 7)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_Rfu_of(_x)      (((_x) >> 7) & 0x1ff)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_LkNbiChanSwapEn0 BIT(6)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_IgOobFcSelCore0 BIT(5)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgOobFcSelCore0 BIT(4)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgTdmModeLkCore0(_x) (((_x) & 0x7) << 1)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgTdmModeLkCore0_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_NBI_MACX_CSR_MacInterlakenCtl2_EgAtomicLkCore0 BIT(0)
/*----------------------------------------------------------------
  Register: EgBufferCreditPoolCount - Running count of total free buffers for egress.
    Bits: 31    EgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 EgBufferCreditCount1(ro) - Live value of egress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  EgBufferCreditCount(ro) - Live value of egress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP_NBI_MACX_CSR_EgBufferCreditPoolCount             0x00000098
#define   NFP_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferLinklistReady BIT(31)
#define   NFP_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount1(_x) (((_x) & 0x3fff) << 16)
#define   NFP_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount1_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: TxMpbCreditInit - Initial values for Ingress-side minipacket bus credits.
    Bits: 31:20 Rfu(rw) - Reserved for Use.
    Bits: 19:16 TxMpbCreditDataInit(rw) - TX MPB Data credits initial value.
    Bits: 15:12 Rfu2(rw) - Reserved for Use.
    Bits: 11:6  TxMpbCreditMaxPktInit(rw) - TX MPB Pkt Max credits initial value.
    Bits:  5:0  TxMpbCreditPktInit(rw) - TX MPB Pkt credits initial value. The register MUST BE set to 7 or less.
*/
#define NFP_NBI_MACX_CSR_TxMpbCreditInit                     0x0000009c
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_Rfu(_x)           (((_x) & 0xfff) << 20)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_Rfu_of(_x)        (((_x) >> 20) & 0xfff)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditDataInit(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditDataInit_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_Rfu2(_x)          (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_Rfu2_of(_x)       (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditMaxPktInit(_x) (((_x) & 0x3f) << 6)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditMaxPktInit_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditPktInit(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditPktInit_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: IgBufferCreditPoolCount - Running count of total free buffers for ingress.
    Bits: 31    IgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 IgBufferCreditCount1(ro) - Live value of ingress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  IgBufferCreditCount(ro) - Live value of ingress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP_NBI_MACX_CSR_IgBufferCreditPoolCount             0x000000a0
#define   NFP_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferLinklistReady BIT(31)
#define   NFP_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount1(_x) (((_x) & 0x3fff) << 16)
#define   NFP_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount1_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: RxMpbCreditInit - Initial values for Egress-side minipacket bus credits.
    Bits: 31:30 Rfu2(rw) - Reserved for Use.
    Bits: 29:16 RxMpbCreditDataInit(rw) - Egress-side MPB Data credits initial value(not used).
    Bits: 15:14 Rfu(rw) - Reserved for Use.
    Bits: 13:0  RxMpbCreditBufInit(rw) - Egress-side MPB Buffer credit init.(not used).
*/
#define NFP_NBI_MACX_CSR_RxMpbCreditInit                     0x000000a4
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_Rfu2(_x)          (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_Rfu2_of(_x)       (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditDataInit(_x) (((_x) & 0x3fff) << 16)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditDataInit_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_Rfu(_x)           (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_Rfu_of(_x)        (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditBufInit(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditBufInit_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacTdmRateCreditInit - Egress TDM Per-Rate Credit Init values.
    Bits: 31:24 TDM100GECreditInit(rw) - Initial value of hydra 100G TDM credits.
    Bits: 23:16 TDM40GECreditInit(rw) - Initial value of hydra 40G TDM credits.
    Bits: 15:8  TDM10GECreditInit(rw) - Initial value of hydra 10G TDM credits.
    Bits:  7:0  TDM1GECreditInit(rw) - Initial value of hydra 1G TDM credits.
*/
#define NFP_NBI_MACX_CSR_MacTdmRateCreditInit                0x000000a8
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM100GECreditInit(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM100GECreditInit_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM40GECreditInit(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM40GECreditInit_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM10GECreditInit(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM10GECreditInit_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM1GECreditInit(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_MacTdmRateCreditInit_TDM1GECreditInit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus0 - Interrupts and errors status register 0.
    Bits: 31:0  MacInterruptErrStatus1(rw) - RFU.
*/
#define NFP_NBI_MACX_CSR_MacInterruptErrStatus0              0x000000ac
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus0_MacInterruptErrStatus1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus0_MacInterruptErrStatus1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus1 - Interrupts and errors status register 1.
    Bits: 31:24 Rfu(rc) - Reserved for Use.
    Bits: 23:12 MacLinTrainingInthy0(rc) - Mac Link training Interrupt Hy0.
    Bits: 11:0  MacLinTrainingInthy1(rc) - Mac Link training Interrupt Hy1.
*/
#define NFP_NBI_MACX_CSR_MacInterruptErrStatus1              0x000000b0
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus1_Rfu(_x)    (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus1_Rfu_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy0(_x) (((_x) & 0xfff) << 12)
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy0_of(_x) (((_x) >> 12) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy1(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy1_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacInterruptErrEn0 - Interrupts enable register 0.
    Bits: 31:0  MacInterruptErrEn0(rw) - RFU.
*/
#define NFP_NBI_MACX_CSR_MacInterruptErrEn0                  0x000000b4
#define   NFP_NBI_MACX_CSR_MacInterruptErrEn0_MacInterruptErrEn0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacInterruptErrEn0_MacInterruptErrEn0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacInterruptErrEn1 - Interrupts enable register 1.
    Bits: 31:0  MacInterruptErrEn1(rw) - RFU.
*/
#define NFP_NBI_MACX_CSR_MacInterruptErrEn1                  0x000000b8
#define   NFP_NBI_MACX_CSR_MacInterruptErrEn1_MacInterruptErrEn1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacInterruptErrEn1_MacInterruptErrEn1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacLiveStatus0 - Live status register 0.
    Bits: 31:0  MacLiveStatus0(ro) - Egress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Egress Chan Rd Addr field bit [6:5].
*/
#define NFP_NBI_MACX_CSR_MacLiveStatus0                      0x000000bc
#define   NFP_NBI_MACX_CSR_MacLiveStatus0_MacLiveStatus0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacLiveStatus0_MacLiveStatus0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacLiveStatus1 - Live status register 1.
    Bits: 31:0  MacLiveStatus1(ro) - Ingress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Ingress Chan Rd Addr field bit [6:5].
*/
#define NFP_NBI_MACX_CSR_MacLiveStatus1                      0x000000c0
#define   NFP_NBI_MACX_CSR_MacLiveStatus1_MacLiveStatus1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacLiveStatus1_MacLiveStatus1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacChanRdAddr - Addresses for reading IG/EG buffer count state.
    Bits: 31:23 Rfu1(rw) - Reserved for Use.
    Bits: 22:16 IgChanRdAddr(rw) - Channel index for reading Ig channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status1.
    Bits: 15:7  Rfu0(rw) - Reserved for Use.
    Bits:  6:0  EgChanRdAddr(rw) - Channel index for reading Eg channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status0.
*/
#define NFP_NBI_MACX_CSR_MacChanRdAddr                       0x000000c4
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_Rfu1(_x)            (((_x) & 0x1ff) << 23)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_Rfu1_of(_x)         (((_x) >> 23) & 0x1ff)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_IgChanRdAddr(_x)    (((_x) & 0x7f) << 16)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_IgChanRdAddr_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_Rfu0(_x)            (((_x) & 0x1ff) << 7)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_Rfu0_of(_x)         (((_x) >> 7) & 0x1ff)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_EgChanRdAddr(_x)    (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACX_CSR_MacChanRdAddr_EgChanRdAddr_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacChanBufCount - Read data for IG/EG buffercounts indexed by Chan Rd Addr.
    Bits: 31:27 Rfu1(ro) - Reserved for Use.
    Bits: 26:16 IgChanRdBufCnt(ro) - Live Ingress Chan buffer count indexed by Ig Chan Rd Addr.
    Bits: 15:11 Rfu0(ro) - Reserved for Use.
    Bits: 10:0  EgChanRdBufCnt(ro) - Live Egress Chan buffer count indexed by Eg Chan Rd Addr.
*/
#define NFP_NBI_MACX_CSR_MacChanBufCount                     0x000000c8
#define   NFP_NBI_MACX_CSR_MacChanBufCount_Rfu1(_x)          (((_x) & 0x1f) << 27)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_Rfu1_of(_x)       (((_x) >> 27) & 0x1f)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_IgChanRdBufCnt(_x) (((_x) & 0x7ff) << 16)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_IgChanRdBufCnt_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_Rfu0(_x)          (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_Rfu0_of(_x)       (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_EgChanRdBufCnt(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_MacChanBufCount_EgChanRdBufCnt_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: PauseWaterMark[64] - Per Class water marks (N*2) and (N*2)+1 for pause generation.
    Bits: 31:28 PWMResv1(rw) - Reserved
    Bits: 27:16 PauseWaterMark1(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
    Bits: 15:12 PWMResv0(rw) - Reserved
    Bits: 11:0  PauseWaterMark0(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
*/
#define NFP_NBI_MACX_CSR_PauseWaterMark(_x)                  (0x000000cc + (0x4 * ((_x) & 0x3f)))
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PWMResv1(_x)       (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PWMResv1_of(_x)    (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark1(_x) (((_x) & 0xfff) << 16)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark1_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PWMResv0(_x)       (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PWMResv0_of(_x)    (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark0(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark0_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRw - Indirect Read Access to Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(rw) - Read/Write address to buffer-counter array
    Bits: 23:22 Rfu2(rw) - Reserved for Use2.
    Bits: 21    CounterRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register.
    Bits: 20:0  Rfu(rw) - Reserved for Use.
*/
#define NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw           0x000001d4
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_CounterAddr(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_CounterAddr_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu2(_x) (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_CounterRdBusy BIT(21)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu(_x) (((_x) & 0x1fffff) << 0)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu_of(_x) (((_x) >> 0) & 0x1fffff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRdData - Indirect Read Return Data for per-Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(ro) - Read/Write address to buffer-counter array
    Bits: 21    BufferCounterRdDataValid(ro) - Set to '1' when read complete and counter rd data is valid. Cleared when next read register is initiated
    Bits: 15:0  CounterRdData(ro) - 16 bit counter read value
*/
#define NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData       0x000001d8
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterAddr(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterAddr_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_BufferCounterRdDataValid BIT(21)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterRdData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterRdData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgPortPrependEn0 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra0 and ILK0.
  Register: IgPortPrependEn1 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra1 and ILK1.
    Bits: 31:26 Rfu(rw) - Reserved for Use.
    Bits: 25:24 PrependLk(rw) - Ingress Interlaken prepend enable bits.
    Bits: 23:22 PrependEn11(rw) - Ingress port11 prepend enable bits.
    Bits: 21:20 PrependEn10(rw) - Ingress port10 prepend enable bits.
    Bits: 19:18 PrependEn9(rw) - Ingress port9 prepend enable bits.
    Bits: 17:16 PrependEn8(rw) - Ingress port8 prepend enable bits.
    Bits: 15:14 PrependEn7(rw) - Ingress port7 prepend enable bits.
    Bits: 13:12 PrependEn6(rw) - Ingress port6 prepend enable bits.
    Bits: 11:10 PrependEn5(rw) - Ingress port5 prepend enable bits.
    Bits:  9:8  PrependEn4(rw) - Ingress port4 prepend enable bits.
    Bits:  7:6  PrependEn3(rw) - Ingress port3 prepend enable bits.
    Bits:  5:4  PrependEn2(rw) - Ingress port2 prepend enable bits.
    Bits:  3:2  PrependEn1(rw) - Ingress port1 prepend enable bits.
    Bits:  1:0  PrependEn0(rw) - Ingress port0 prepend enable bits.
*/
#define NFP_NBI_MACX_CSR_IgPortPrependEn0                    0x000001dc
#define NFP_NBI_MACX_CSR_IgPortPrependEn1                    0x000001e0
#define   NFP_NBI_MACX_CSR_IgPrependEn_Rfu(_x)               (((_x) & 0x3f) << 26)
#define   NFP_NBI_MACX_CSR_IgPrependEn_Rfu_of(_x)            (((_x) >> 26) & 0x3f)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependLk(_x)         (((_x) & 0x3) << 24)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependLk_of(_x)      (((_x) >> 24) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn11(_x)       (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn11_of(_x)    (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn10(_x)       (((_x) & 0x3) << 20)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn10_of(_x)    (((_x) >> 20) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn9(_x)        (((_x) & 0x3) << 18)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn9_of(_x)     (((_x) >> 18) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn8(_x)        (((_x) & 0x3) << 16)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn8_of(_x)     (((_x) >> 16) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn7(_x)        (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn7_of(_x)     (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn6(_x)        (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn6_of(_x)     (((_x) >> 12) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn5(_x)        (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn5_of(_x)     (((_x) >> 10) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn4(_x)        (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn4_of(_x)     (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn3(_x)        (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn3_of(_x)     (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn2(_x)        (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn2_of(_x)     (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn1(_x)        (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn1_of(_x)     (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn0(_x)        (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_CSR_IgPrependEn_PrependEn0_of(_x)     (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACX_CSR_IgPrependEn_PrependEn0_OFF      (0)
#define     NFP_NBI_MACX_CSR_IgPrependEn_PrependEn0_CHK      (1)
#define     NFP_NBI_MACX_CSR_IgPrependEn_PrependEn0_TS       (2)
#define     NFP_NBI_MACX_CSR_IgPrependEn_PrependEn0_TS_CHK   (3)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg0 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg0 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch(rw) - VLAN Match Field for parser matching.
*/
#define NFP_NBI_MACX_CSR_EgVlanMatchReg0                     0x000001e8
#define NFP_NBI_MACX_CSR_IgVlanMatchReg0                     0x000001f0
#define   NFP_NBI_MACX_CSR_VlanMatchReg_VlanMask(_x)         (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_CSR_VlanMatchReg_VlanMask_of(_x)      (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_CSR_VlanMatchReg_VlanMatch(_x)        (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_VlanMatchReg_VlanMatch_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg1 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg1 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask1(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch1(rw) - VLAN Match Field for parser matching.
*/
#define NFP_NBI_MACX_CSR_EgVlanMatchReg1                     0x000001ec
#define NFP_NBI_MACX_CSR_IgVlanMatchReg1                     0x000001f4
#define   NFP_NBI_MACX_CSR_VlanMatchReg1_VlanMask1(_x)       (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_CSR_VlanMatchReg1_VlanMask1_of(_x)    (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_CSR_VlanMatchReg1_VlanMatch1(_x)      (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_VlanMatchReg1_VlanMatch1_of(_x)   (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgCmdPrependEn0Lo - Enable bits for egress cmd prepend handling on channels 31-0. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn0Hi - Enable bits for egress cmd prepend handling on channels 63-32. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Lo - Enable bits for egress cmd prepend handling on channels 95-64. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Hi - Enable bits for egress cmd prepend handling on channels 127-96. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
    Bits: 31:0  EgCmdPrependEn(rw) - Egress Per-channel bit that enables the stripping of the 4-byte CMD PREPEND.
*/
#define NFP_NBI_MACX_CSR_EgCmdPrependEn0Lo                   0x00000200
#define NFP_NBI_MACX_CSR_EgCmdPrependEn0Hi                   0x00000204
#define NFP_NBI_MACX_CSR_EgCmdPrependEn1Lo                   0x00000208
#define NFP_NBI_MACX_CSR_EgCmdPrependEn1Hi                   0x0000020c
#define   NFP_NBI_MACX_CSR_EgCmdPrependEn_EgCmdPrependEn(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_EgCmdPrependEn_EgCmdPrependEn_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEgIlkChanAssign - Mac ILK EG Channel Assignment Register.
    Bits: 31:29 Rfu1(rw) - Reserved for Use.
    Bits: 28:22 LkNumChannelsUpper64(rw) - The number of contiguous channels, starting at the base_channel(upper64base of 0 maps to channel 64), Interlaken Core0 or Core1 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits: 21:16 LkBaseChannelUpper64(rw) - Sets the base channel number of the upper 64 channels for Interlaken use. For either Core0 or Core1, depending on the state of SplitMemIg bit. If SplitMemIg is set, then the upper 64 channels are ONLY available to Interlaken Core1 (and/or Hydra1). A BaseChannel value of 0 maps to physical channel 64
    Bits: 15:13 Rfu0(rw) - Reserved for Use.
    Bits: 12:6  LkNumChannelsLower64(rw) - The number of contiguous channels, starting at the base_channel, Interlaken Core0 will use and respond to. Channels outside this range are ignored on Egress and dropped on ingress. For Core0 ONLY. BaseChannel plus NumChannel MUST NOT exceed 64.
    Bits:  5:0  LkBaseChannelLower64(rw) - Sets the base channel number of the lower 64 channels for Interlaken use. ONLY Core0 can access these channels (0-63).
*/
#define NFP_NBI_MACX_CSR_MacEgIlkChanAssign                  0x00000260
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_Rfu1(_x)       (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_Rfu1_of(_x)    (((_x) >> 29) & 0x7)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkNumChannelsUpper64(_x) (((_x) & 0x7f) << 22)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkNumChannelsUpper64_of(_x) (((_x) >> 22) & 0x7f)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkBaseChannelUpper64(_x) (((_x) & 0x3f) << 16)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkBaseChannelUpper64_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_Rfu0(_x)       (((_x) & 0x7) << 13)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_Rfu0_of(_x)    (((_x) >> 13) & 0x7)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkNumChannelsLower64(_x) (((_x) & 0x7f) << 6)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkNumChannelsLower64_of(_x) (((_x) >> 6) & 0x7f)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkBaseChannelLower64(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_MacEgIlkChanAssign_LkBaseChannelLower64_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacEgPortRR - Mac EG Port Round Robin DQ Enable Register.
    Bits: 23:0  EgPortRR(rw) - If set, EG Ethernet Port uses a round-robin DQ versus strict priority for multi-channel ports that are not in PFC mode.
*/
#define NFP_NBI_MACX_CSR_MacEgPortRR                         0x00000264
#define   NFP_NBI_MACX_CSR_MacEgPortRR_EgPortRR(_x)          (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacEgPortRR_EgPortRR_of(_x)       (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacOobFcTmCntl - Mac TM OOB control.
    Bits: 31:22 Oob1023To512RFU(rw) - RFU.
    Bits: 21:18 Oob1023To512Mod32M1(rw) - Sets the size of the calendar == ((value + 1) * 32). A value of 0 => 32 channels. 7 => 256, 15 =>512.
    Bits: 17    Oob1023To512MsgEn(rw) - If set, enables OOB FC widget 1 for 13 bit messages.
    Bits: 16    Oob1023To512En(rw) - If set, enables OOB FC widget 1 for queues 512-1023. Uses ILK1 RX OOB pins. Also enables the FC address mux.
    Bits: 15:6  Oob511To0RFU(rw) - RFU.
    Bits:  5:2  Oob511To0Mod32M1(rw) - Sets the size of the calendar == ((value + 1) * 32). A value of 0 => 32 channels. 7 => 256. 15 => 512.
    Bits:  1    Oob511To0MsgEn(rw) - If set, enables OOB FC widget 0 for 13 bit messages.
    Bits:  0    Oob511To0En(rw) - If set, enables OOB FC widget 0 for queues 0-511. Uses ILK0 RX OOB pins. Also enables the FC address mux.
*/
#define NFP_NBI_MACX_CSR_MacOobFcTmCntl                      0x00000268
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob1023To512RFU(_x) (((_x) & 0x3ff) << 22)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob1023To512RFU_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob1023To512Mod32M1(_x) (((_x) & 0xf) << 18)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob1023To512Mod32M1_of(_x) (((_x) >> 18) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob1023To512MsgEn  BIT(17)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob1023To512En     BIT(16)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob511To0RFU(_x)   (((_x) & 0x3ff) << 6)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob511To0RFU_of(_x) (((_x) >> 6) & 0x3ff)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob511To0Mod32M1(_x) (((_x) & 0xf) << 2)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob511To0Mod32M1_of(_x) (((_x) >> 2) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob511To0MsgEn     BIT(1)
#define   NFP_NBI_MACX_CSR_MacOobFcTmCntl_Oob511To0En        BIT(0)
/*----------------------------------------------------------------
  Register: MacOobFcTmReMap - Mac TM OOB 1024 vector remap register.
    Bits: 31:28 TmFcAddr7Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 7.
    Bits: 27:24 TmFcAddr6Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 6.
    Bits: 23:20 TmFcAddr5Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 5.
    Bits: 19:16 TmFcAddr4Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 4.
    Bits: 15:12 TmFcAddr3Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 3.
    Bits: 11:8  TmFcAddr2Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 2.
    Bits:  7:4  TmFcAddr1Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 1.
    Bits:  3:0  TmFcAddr0Sel(rw) - Selects the which 128 bit segment from the 1024 vector is presented to TM when FC_ADDR = 0. (0 = 127:0, 3 = 511:384, etc)
*/
#define NFP_NBI_MACX_CSR_MacOobFcTmReMap                     0x0000026c
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr7Sel(_x)  (((_x) & 0xf) << 28)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr7Sel_of(_x) (((_x) >> 28) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr6Sel(_x)  (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr6Sel_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr5Sel(_x)  (((_x) & 0xf) << 20)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr5Sel_of(_x) (((_x) >> 20) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr4Sel(_x)  (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr4Sel_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr3Sel(_x)  (((_x) & 0xf) << 12)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr3Sel_of(_x) (((_x) >> 12) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr2Sel(_x)  (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr2Sel_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr1Sel(_x)  (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr1Sel_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr0Sel(_x)  (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_CSR_MacOobFcTmReMap_TmFcAddr0Sel_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEqInh - Mac Rx Enqueue inhibit control.
    Bits: 25    MacEqInhIlk1(rw) - When set, Inhibits ILK1 Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[25] bit when in effect.
    Bits: 24    MacEqInhIlk0(rw) - When set, Inhibits ILK0 Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[24] bit when in effect.
    Bits: 23:0  MacEqInhEthPort(rw) - When set, per-port inhibit of Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[23:0] bits when in effect.
*/
#define NFP_NBI_MACX_CSR_MacEqInh                            0x00000278
#define   NFP_NBI_MACX_CSR_MacEqInh_MacEqInhIlk1             BIT(25)
#define   NFP_NBI_MACX_CSR_MacEqInh_MacEqInhIlk0             BIT(24)
#define   NFP_NBI_MACX_CSR_MacEqInh_MacEqInhEthPort(_x)      (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacEqInh_MacEqInhEthPort_of(_x)   (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEqInhDone - Mac Rx Enqueue inhibit state.
    Bits: 25    MacEqInhDoneIlk1(ro) - When set, indicates that RX enqueue is stopped for ILK1. Clears when MacEqInhIlk1 is cleared.
    Bits: 24    MacEqInhDoneIlk0(ro) - When set, indicates that RX enqueue is stopped for ILK0. Clears when MacEqInhIlk0 is cleared.
    Bits: 23:0  MacEqInhDoneEthPort(ro) - When set, indicates that RX enqueue is stopped for the associated port. Clears when associated MacEqInhEthPort bit is cleared.
*/
#define NFP_NBI_MACX_CSR_MacEqInhDone                        0x0000027c
#define   NFP_NBI_MACX_CSR_MacEqInhDone_MacEqInhDoneIlk1     BIT(25)
#define   NFP_NBI_MACX_CSR_MacEqInhDone_MacEqInhDoneIlk0     BIT(24)
#define   NFP_NBI_MACX_CSR_MacEqInhDone_MacEqInhDoneEthPort(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_MacEqInhDone_MacEqInhDoneEthPort_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacHy0EthIgPktHeadDropCntrPair[6] - Mac Hydra0 Ethernet Per-port head drop count due to overskid or free buffer underrun.
  Register: MacHy1EthIgPktHeadDropCntrPair[6] - Mac Hydra1 Ethernet Per-port head drop count due to overskid or free buffer underrun.
  Register: MacIlkIgPktHeadDropCntrPair - Mac Interlaken head drop count due to overskid or free buffer underrun.
    Bits: 31:16 MacHeadDropCounter1(ro) - Per-port packet head drops due to overskid and free buffer underrun. Clear on read.
    Bits: 15:0  MacHeadDropCounter0(ro) - Per-port packet head drops due to overskid and free buffer underrun. Clear on read.
*/
#define NFP_NBI_MACX_CSR_MacHy0EthIgPktHeadDropCntrPair(_x)  (0x00000280 + (0x4 * ((_x) & 0x7)))
#define NFP_NBI_MACX_CSR_MacHy1EthIgPktHeadDropCntrPair(_x)  (0x000002a0 + (0x4 * ((_x) & 0x7)))
#define NFP_NBI_MACX_CSR_MacIlkIgPktHeadDropCntrPair         0x000002b8
#define   NFP_NBI_MACX_CSR_MacHeadDropCounters_MacHeadDropCounter1(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_CSR_MacHeadDropCounters_MacHeadDropCounter1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_CSR_MacHeadDropCounters_MacHeadDropCounter0(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_MacHeadDropCounters_MacHeadDropCounter0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthFifoIfErr0 - Mac Hydra0 Fifo Interface Errors.
  Register: MacEthFifoIfErr1 - Mac Hydra1 Fifo Interface Errors.
    Bits: 24    RemLocFaultSticky(ro) - Clear on read. A set bit indicates a change in the Hydra faults REM_FAULT or LOC_FAULT. Read the associated Hydra registers to identify faulted port.
    Bits: 23:12 EthTxIfOvr(ro) - Clear on read. A set bit indicates an overflow of the associated port transmit Fifo interface.
    Bits: 11:0  EthTxIfUnf(ro) - Clear on read. A set bit indicates an underflow of the associated port transmit Fifo interface.
*/
#define NFP_NBI_MACX_CSR_MacEthFifoIfErr0                    0x00000400
#define NFP_NBI_MACX_CSR_MacEthFifoIfErr1                    0x00000404
#define   NFP_NBI_MACX_CSR_MacEthFifoIfErr_RemLocFaultSticky BIT(24)
#define   NFP_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfOvr(_x)    (((_x) & 0xfff) << 12)
#define   NFP_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfOvr_of(_x) (((_x) >> 12) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfUnf(_x)    (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfUnf_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthAnStatus0 - Mac Hydra0 AutoNegotiate Status.
  Register: MacEthAnStatus1 - Mac Hydra1 AutoNegotiate Status.
    Bits: 23:12 EthAnInt(ro) - Clear on read. A set bit indicates a new page-received interrupt from the auto-neg logic of the associated port.)
    Bits: 11:0  EthAnDone(ro) - A set bit indicates auto-neg of the associated port has completed.
*/
#define NFP_NBI_MACX_CSR_MacEthAnStatus0                     0x00000408
#define NFP_NBI_MACX_CSR_MacEthAnStatus1                     0x0000040c
#define   NFP_NBI_MACX_CSR_MacEthAnStatus_EthAnInt(_x)       (((_x) & 0xfff) << 12)
#define   NFP_NBI_MACX_CSR_MacEthAnStatus_EthAnInt_of(_x)    (((_x) >> 12) & 0xfff)
#define   NFP_NBI_MACX_CSR_MacEthAnStatus_EthAnDone(_x)      (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_CSR_MacEthAnStatus_EthAnDone_of(_x)   (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacOobFcIlkStatus - Mac RX OOB 512 error status 0 and 1 and LK 0 and 1 interrupts.
    Bits: 19    MacOobFcCrcErr1(ro) - Clear on read. A set bit indicates a CRC error for RX 512 OOB unit 1.)
    Bits: 18    MacOobFcFrmErr1(ro) - Clear on read. A set bit indicates a framing error for RX 512 OOB unit 1.)
    Bits: 17    MacOobFcCrcErr0(ro) - Clear on read. A set bit indicates a CRC error for RX 512 OOB unit 0.)
    Bits: 16    MacOobFcFrmErr0(ro) - Clear on read. A set bit indicates a framing error for RX 512 OOB unit 0.)
    Bits:  7    IlkInt2ndRx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd RX interrupt from the ILK1 .
    Bits:  6    IlkInt2ndTx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd TX interrupt from the ILK1 .
    Bits:  5    IlkIntRx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates RX interrupt from the ILK1 .
    Bits:  4    IlkIntTx1(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates TX interrupt from the ILK1 .
    Bits:  3    IlkInt2ndRx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd RX interrupt from the ILK0 .
    Bits:  2    IlkInt2ndTx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates 2nd TX interrupt from the ILK0 .
    Bits:  1    IlkIntRx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates RX interrupt from the ILK0 .
    Bits:  0    IlkIntTx0(ro) - Sticky, Clear on read (or selectable as live). A set bit indicates TX interrupt from the ILK0 .
*/
#define NFP_NBI_MACX_CSR_MacOobFcIlkStatus                   0x00000410
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_MacOobFcCrcErr1 BIT(19)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_MacOobFcFrmErr1 BIT(18)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_MacOobFcCrcErr0 BIT(17)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_MacOobFcFrmErr0 BIT(16)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkInt2ndRx1    BIT(7)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkInt2ndTx1    BIT(6)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkIntRx1       BIT(5)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkIntTx1       BIT(4)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkInt2ndRx0    BIT(3)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkInt2ndTx0    BIT(2)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkIntRx0       BIT(1)
#define   NFP_NBI_MACX_CSR_MacOobFcIlkStatus_IlkIntTx0       BIT(0)
/*----------------------------------------------------------------
  Register: MacStatsHalfFullPort0011 - Mac Stats Half Full Alert Port0-11 RX/TX.
  Register: MacStatsHalfFullPort1223 - Mac Stats Half Full Alert Port12-23 RX/TX.
  Register: MacStatsHalfFullChan0063 - Mac Stats Half Full Alert Channel 00-63 RX/TX.
  Register: MacStatsHalfFullChan63127 - Mac Stats Half Full Alert Channel 63-127 RX/TX.
    Bits: 24    TxStatHalfFullVld(ro) - Clear on read. A set bit indicates a Tx stat @TX_STAT_ADDR went half full.)
    Bits: 23:16 TxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
    Bits:  8    RxStatHalfFullVld(ro) - Clear on read. A set bit indicates an Rx stat @RX_STAT_ADDR went half full.)
    Bits:  7:0  RxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
*/
#define NFP_NBI_MACX_CSR_MacStatsHalfFullPort0011            0x00000420
#define NFP_NBI_MACX_CSR_MacStatsHalfFullPort1223            0x00000424
#define NFP_NBI_MACX_CSR_MacStatsHalfFullChan0063            0x00000428
#define NFP_NBI_MACX_CSR_MacStatsHalfFullChan63127           0x0000042c
#define   NFP_NBI_MACX_CSR_MacStatsHalfFull_TxStatHalfFullVld BIT(24)
#define   NFP_NBI_MACX_CSR_MacStatsHalfFull_TxStatAddr(_x)   (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_CSR_MacStatsHalfFull_TxStatAddr_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_CSR_MacStatsHalfFull_RxStatHalfFullVld BIT(8)
#define   NFP_NBI_MACX_CSR_MacStatsHalfFull_RxStatAddr(_x)   (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_MacStatsHalfFull_RxStatAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacPcpReMap[24] - PFC support which Remaps PCP for channel compression and channel for untagged.
    Bits: 31:30 PcpReMapRFU(rw) - RFU.
    Bits: 29:24 UntaggedChan(rw) - If PFC mode en, then an UNtagged packet will be directed to this absolute channel. For Hy0 the channels can be 0-63 and for Hy1 0-63 maps to 64-127
    Bits: 23:21 PcpReMap7(rw) - Maps tagged packet with PCP 7 to this value channel delta from the base channel.
    Bits: 20:18 PcpReMap6(rw) - Maps tagged packet with PCP 6 to this value channel delta from the base channel.
    Bits: 17:15 PcpReMap5(rw) - Maps tagged packet with PCP 5 to this value channel delta from the base channel.
    Bits: 14:12 PcpReMap4(rw) - Maps tagged packet with PCP 4 to this value channel delta from the base channel.
    Bits: 11:9  PcpReMap3(rw) - Maps tagged packet with PCP 3 to this value channel delta from the base channel.
    Bits:  8:6  PcpReMap2(rw) - Maps tagged packet with PCP 2 to this value channel delta from the base channel.
    Bits:  5:3  PcpReMap1(rw) - Maps tagged packet with PCP 1 to this value channel delta from the base channel.
    Bits:  2:0  PcpReMap0(rw) - Maps tagged packet with PCP 0 to this value channel delta from the base channel.
*/
#define NFP_NBI_MACX_CSR_MacPcpReMap(_x)                     (0x00000680 + (0x4 * ((_x) & 0x1f)))
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMapRFU(_x)       (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMapRFU_of(_x)    (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_UntaggedChan(_x)      (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_UntaggedChan_of(_x)   (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap7(_x)         (((_x) & 0x7) << 21)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap7_of(_x)      (((_x) >> 21) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap6(_x)         (((_x) & 0x7) << 18)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap6_of(_x)      (((_x) >> 18) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap5(_x)         (((_x) & 0x7) << 15)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap5_of(_x)      (((_x) >> 15) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap4(_x)         (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap4_of(_x)      (((_x) >> 12) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap3(_x)         (((_x) & 0x7) << 9)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap3_of(_x)      (((_x) >> 9) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap2(_x)         (((_x) & 0x7) << 6)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap2_of(_x)      (((_x) >> 6) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap1(_x)         (((_x) & 0x7) << 3)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap1_of(_x)      (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap0(_x)         (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_CSR_MacPcpReMap_PcpReMap0_of(_x)      (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacPortHwm[12] - Port HWMs and Skid before dropping for ports 2n+1 and 2n.
    Bits: 31:27 PortDropDelta1(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 26:16 PortHwm1(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
    Bits: 15:11 PortDropDelta0(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 10:0  PortHwm0(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
*/
#define NFP_NBI_MACX_CSR_MacPortHwm(_x)                      (0x00000700 + (0x4 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortDropDelta1(_x)     (((_x) & 0x1f) << 27)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortDropDelta1_of(_x)  (((_x) >> 27) & 0x1f)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortHwm1(_x)           (((_x) & 0x7ff) << 16)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortHwm1_of(_x)        (((_x) >> 16) & 0x7ff)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortDropDelta0(_x)     (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortDropDelta0_of(_x)  (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortHwm0(_x)           (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_MacPortHwm_PortHwm0_of(_x)        (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacPortHwmLk1Lk0 - Port HWMs and Skid before dropping for LK1 and LK0.
    Bits: 31:27 PortDropDelta1(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 26:16 PortHwm1(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
    Bits: 15:11 PortDropDelta0(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 10:0  PortHwm0(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
*/
#define NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0                    0x00000730
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortDropDelta1(_x) (((_x) & 0x1f) << 27)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortDropDelta1_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortHwm1(_x)     (((_x) & 0x7ff) << 16)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortHwm1_of(_x)  (((_x) >> 16) & 0x7ff)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortDropDelta0(_x) (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortDropDelta0_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortHwm0(_x)     (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_MacPortHwmLk1Lk0_PortHwm0_of(_x)  (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdData - Mac read return data for Egress linklist memory.
  Register: IgLnkLstRdData - Mac read return data for Igress linklist memory.
    Bits: 29:18 LLRdOffsetAddr(ro) - Read offset Address to linklist membus
    Bits: 17    LLRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits: 15:0  LLRdData(ro) - 16 bit read data from linklist memory
*/
#define NFP_NBI_MACX_CSR_EgLnkLstRdData                      0x000007b0
#define NFP_NBI_MACX_CSR_IgLnkLstRdData                      0x000007b4
#define   NFP_NBI_MACX_CSR_LLMemRdData_LLRdOffsetAddr(_x)    (((_x) & 0xfff) << 18)
#define   NFP_NBI_MACX_CSR_LLMemRdData_LLRdOffsetAddr_of(_x) (((_x) >> 18) & 0xfff)
#define   NFP_NBI_MACX_CSR_LLMemRdData_LLRdDataValid         BIT(17)
#define   NFP_NBI_MACX_CSR_LLMemRdData_LLRdData(_x)          (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_LLMemRdData_LLRdData_of(_x)       (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdWr - Mac Read/Write port to Egress link list memory
  Register: IgLnkLstRdWr - Mac Read/Write port to Ingress link list memory
    Bits: 31:30 Rfu(rw) - Reserved for Use.
    Bits: 29:18 LLOffsetAddr(rw) - Read/Write offset Address to linklist membus
    Bits: 17    LLRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 16    LLWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 15:0  LLWrData(rw) - 16 bit write data to LinkList. 10 bits for EG, 11 for IG.
*/
#define NFP_NBI_MACX_CSR_EgLnkLstRdWr                        0x000007b8
#define NFP_NBI_MACX_CSR_IgLnkLstRdWr                        0x000007bc
#define   NFP_NBI_MACX_CSR_LLMemRdWr_Rfu(_x)                 (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_Rfu_of(_x)              (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_LLOffsetAddr(_x)        (((_x) & 0xfff) << 18)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_LLOffsetAddr_of(_x)     (((_x) >> 18) & 0xfff)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_LLRdBusy                BIT(17)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_LLWrBusy                BIT(16)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_LLWrData(_x)            (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_CSR_LLMemRdWr_LLWrData_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: SerDes4RdWr03To00 - Mac Write port to serdes lanes 3 to 0.
  Register: SerDes4RdWr07To04 - Mac Write port to serdes lanes 7 to 4.
  Register: SerDes4RdWr11To08 - Mac Write port to serdes lanes 11 to 8.
  Register: SerDes4RdWr15To12 - Mac Write port to serdes lanes 15 to 12.
  Register: SerDes4RdWr19To16 - Mac Write port to serdes lanes 19 to 16.
  Register: SerDes4RdWr23To20 - Mac Write port to serdes lanes 23 to 20.
    Bits: 31:29 SerDesPageAddr(rw) - Read/Write page address to serdes membus
    Bits: 28    SerDesPcsPmaSel(rw) - Write to 1 to select PCS Registers. Write to 0 to select PMA registers. PageAddr and OffsetAddr bits will index into the PCS or PMA register sets depending on the state of this bit.
    Bits: 27:16 SerDesOffsetAddr(rw) - Read/Write offset Address to serdes membus
    Bits: 15:10 Rfu(rw) - Reserved for Use.
    Bits:  9    SerDesRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits:  8    SerDesWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits:  7:0  SerDesWrData(rw) - 8 bit write data to SerDes. Dont care for a read op.
*/
#define NFP_NBI_MACX_CSR_SerDes4RdWr03To00                   0x000007c0
#define NFP_NBI_MACX_CSR_SerDes4RdWr07To04                   0x000007c4
#define NFP_NBI_MACX_CSR_SerDes4RdWr11To08                   0x000007c8
#define NFP_NBI_MACX_CSR_SerDes4RdWr15To12                   0x000007cc
#define NFP_NBI_MACX_CSR_SerDes4RdWr19To16                   0x000007d0
#define NFP_NBI_MACX_CSR_SerDes4RdWr23To20                   0x000007d4
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr(_x)    (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_LANE0 (0)
#define     NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_LANE1 (1)
#define     NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_LANE2 (2)
#define     NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_LANE3 (3)
#define     NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_COMMON (4)
#define     NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPageAddr_ALL  (7)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesPcsPmaSel       BIT(28)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesOffsetAddr(_x)  (((_x) & 0xfff) << 16)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesOffsetAddr_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_Rfu(_x)               (((_x) & 0x3f) << 10)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_Rfu_of(_x)            (((_x) >> 10) & 0x3f)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesRdBusy          BIT(9)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesWrBusy          BIT(8)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesWrData(_x)      (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_SerDes4RdWr_SerDesWrData_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRW - Ingress DQ DWRR Weights RW Access port.
    Bits: 31:30 TdmMemRdWrRFU1(rw) - RFU1.
    Bits: 29:24 TdmMemRdWrAddr(rw) - Address of 15-bit IG DQ DWRR port credit value to be read or written.(0-25) Hydra0 = 0-11, Hydra1 = 12-23, LK0 = 24, LK1 = 25.
    Bits: 23:22 TdmMemRdWrRFU0(rw) - RFU0.
    Bits: 21    TdmMemRdBusy(rw) - Write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 20    TdmMemWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 19:16 TdmMemUnused(rw) - unused.
    Bits: 15    TdmPortArbEnable(rw) - Set bit to 1 to enable the port for arbitration indexed @ addr TdmMemRdAddr(0-25).
    Bits: 14:0  TdmPortWeightWrData(rw) - 15 bit DWRR credit weight value to be written @ addr TdmMemRdAddr(0-25)
*/
#define NFP_NBI_MACX_CSR_IgDqTdmMemoryRW                     0x000007d8
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU1(_x) (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU1_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrAddr(_x) (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrAddr_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU0(_x) (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU0_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdBusy      BIT(21)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemWrBusy      BIT(20)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemUnused(_x)  (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemUnused_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmPortArbEnable  BIT(15)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmPortWeightWrData(_x) (((_x) & 0x7fff) << 0)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmPortWeightWrData_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDes4RdData03To00 - Mac read return data for serdes lanes 3 to 0.
  Register: SerDes4RdData07To04 - Mac read return data for serdes lanes 7 to 4.
  Register: SerDes4RdData11To08 - Mac read return data for serdes lanes 11 to 8.
  Register: SerDes4RdData15To12 - Mac read return data for serdes lanes 15 to 12.
  Register: SerDes4RdData19To16 - Mac read return data for serdes lanes 19 to 16.
  Register: SerDes4RdData23To20 - Mac read return data for serdes lanes 23 to 20.
    Bits: 31:29 SerDesRdPageAddr(ro) - Read page address to serdes membus
    Bits: 28:16 SerDesRdOffsetAddr(ro) - Read offset Address to serdes membus
    Bits:  9    SerDesRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits:  7:0  SerDesRdData(ro) - 8 bit read data from SerDes
*/
#define NFP_NBI_MACX_CSR_SerDes4RdData03To00                 0x000007e0
#define NFP_NBI_MACX_CSR_SerDes4RdData07To04                 0x000007e4
#define NFP_NBI_MACX_CSR_SerDes4RdData11To08                 0x000007e8
#define NFP_NBI_MACX_CSR_SerDes4RdData15To12                 0x000007ec
#define NFP_NBI_MACX_CSR_SerDes4RdData19To16                 0x000007f0
#define NFP_NBI_MACX_CSR_SerDes4RdData23To20                 0x000007f4
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr(_x) (((_x) & 0x7) << 29)
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_of(_x) (((_x) >> 29) & 0x7)
#define     NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_LANE0 (0)
#define     NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_LANE1 (1)
#define     NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_LANE2 (2)
#define     NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_LANE3 (3)
#define     NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_COMMON (4)
#define     NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdPageAddr_ALL (7)
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdOffsetAddr(_x) (((_x) & 0x1fff) << 16)
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdOffsetAddr_of(_x) (((_x) >> 16) & 0x1fff)
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdDataValid   BIT(9)
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdData(_x)    (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_SerDes4RdData_SerDesRdData_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRdData - IG DQ DWRR Weights read return data.
    Bits: 29:24 TdmMemRdAddr(ro) - Read address of last read to IG DQ TDM enry memory. Sets when read is initiated.
    Bits: 21    TdmMemRdDataValid(ro) - Sets to '1' when a read completes, cleared when the next read initiated.
    Bits: 19:16 TdmPortUnusedRdRet(ro) - 5 bit unused.
    Bits: 15    TdmPortArbEnable(ro) - If bit to 1, port enabled for arbitration indexed by @ addr TdmMemRdAddr.
    Bits: 14:0  TdmPortWeightRdData(ro) - 15 bit DWRR port credit init value @ addr TdmMemRdAddr
*/
#define NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData                 0x000007f8
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmMemRdAddr(_x) (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmMemRdAddr_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmMemRdDataValid BIT(21)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortUnusedRdRet(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortUnusedRdRet_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortArbEnable BIT(15)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortWeightRdData(_x) (((_x) & 0x7fff) << 0)
#define   NFP_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortWeightRdData_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDesPdRx - SerDes per-lane RX Power Down - active low.
  Register: SerDesPdTx - SerDes per-lane TX Power Down - active low.
    Bits: 23:0  SerDesLanePowerDown(rw) - Active Low. Per-Lane PowerDown of RX or TX logic.
*/
#define NFP_NBI_MACX_CSR_SerDesPdRx                          0x00000800
#define NFP_NBI_MACX_CSR_SerDesPdTx                          0x00000804
#define   NFP_NBI_MACX_CSR_SerDesPdLn_SerDesLanePowerDown(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SerDesPdLn_SerDesLanePowerDown_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesPdSy - SerDes per-macro Synth Power Down - active low.
    Bits:  5:0  SerDesSynthPowerDown(rw) - Active Low. Per-macro PowerDown of Synth logic.
*/
#define NFP_NBI_MACX_CSR_SerDesPdSy                          0x00000808
#define   NFP_NBI_MACX_CSR_SerDesPdSy_SerDesSynthPowerDown(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_CSR_SerDesPdSy_SerDesSynthPowerDown_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCkMuxSel - SerDes clock mux select.
    Bits: 31:30 SerDesCkMuxSel_RFU(rw) - A0-reserved. B0: Bit31=1 sets SerDes Lanes23-12 to transmit using the recovered clock when in Local Clock mode. Bit30=1 sets SerDes Lanes11-00 to transmit using the recovered clock when in Local Clock mode. Required for mixed 10G/1G operation within the same 4 lane SerDes macro
    Bits: 29    SerDesCkMuxSelGang2320(rw) - Mux selector for gang clocking lanes 23-20. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 28    SerDesCkMuxSelL23(rw) - Mux selector for lane23 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 27    SerDesCkMuxSelL22(rw) - Mux selector for lane22 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 26    SerDesCkMuxSelL21(rw) - Mux selector for lane21 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 25    SerDesCkMuxSelL20(rw) - Mux selector for lane20 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 24    SerDesCkMuxSelGang1916(rw) - Mux selector for gang clocking lanes 19-16. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 23    SerDesCkMuxSelL19(rw) - Mux selector for lane19 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 22    SerDesCkMuxSelL18(rw) - Mux selector for lane18 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 21    SerDesCkMuxSelL17(rw) - Mux selector for lane17 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 20    SerDesCkMuxSelL16(rw) - Mux selector for lane16 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 19    SerDesCkMuxSelGang1512(rw) - Mux selector for gang clocking lanes 15-12. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 18    SerDesCkMuxSelL15(rw) - Mux selector for lane15 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 17    SerDesCkMuxSelL14(rw) - Mux selector for lane14 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 16    SerDesCkMuxSelL13(rw) - Mux selector for lane13 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 15    SerDesCkMuxSelL12(rw) - Mux selector for lane12 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 14    SerDesCkMuxSelGang1108(rw) - Mux selector for gang clocking lanes 11-8. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits: 13    SerDesCkMuxSelL11(rw) - Mux selector for lane11 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 12    SerDesCkMuxSelL10(rw) - Mux selector for lane10 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 11    SerDesCkMuxSelL09(rw) - Mux selector for lane9 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 10    SerDesCkMuxSelL08(rw) - Mux selector for lane8 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  9    SerDesCkMuxSelGang0704(rw) - Mux selector for gang clocking lanes 7-4. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits:  8    SerDesCkMuxSelL07(rw) - Mux selector for lane7 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  7    SerDesCkMuxSelL06(rw) - Mux selector for lane6 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  6    SerDesCkMuxSelL05(rw) - Mux selector for lane5 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  5    SerDesCkMuxSelL04(rw) - Mux selector for lane4 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  4    SerDesCkMuxSelGang0300(rw) - Mux selector for gang clocking lanes 3-0. Asserted selects multi-gang clock. Zero selects local-gang.
    Bits:  3    SerDesCkMuxSelL03(rw) - Mux selector for lane3 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  2    SerDesCkMuxSelL02(rw) - Mux selector for lane2 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  1    SerDesCkMuxSelL01(rw) - Mux selector for lane1 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  0    SerDesCkMuxSelL00(rw) - Mux selector for lane0 clocking. Asserted selects gang clock. Zero selects self-clock.
*/
#define NFP_NBI_MACX_CSR_SerDesCkMuxSel                      0x0000080c
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSel_RFU(_x) (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSel_RFU_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang2320 BIT(29)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL23  BIT(28)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL22  BIT(27)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL21  BIT(26)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL20  BIT(25)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1916 BIT(24)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL19  BIT(23)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL18  BIT(22)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL17  BIT(21)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL16  BIT(20)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1512 BIT(19)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL15  BIT(18)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL14  BIT(17)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL13  BIT(16)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL12  BIT(15)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1108 BIT(14)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL11  BIT(13)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL10  BIT(12)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL09  BIT(11)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL08  BIT(10)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang0704 BIT(9)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL07  BIT(8)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL06  BIT(7)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL05  BIT(6)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL04  BIT(5)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang0300 BIT(4)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL03  BIT(3)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL02  BIT(2)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL01  BIT(1)
#define   NFP_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL00  BIT(0)
/*----------------------------------------------------------------
  Register: SerDesSigDetect - SerDes per-lane Signal Detect.
    Bits: 23:0  SerDesLaneSigDetect(ro) - Active Hi when Serdes detects a signal(per lane).
*/
#define NFP_NBI_MACX_CSR_SerDesSigDetect                     0x00000810
#define   NFP_NBI_MACX_CSR_SerDesSigDetect_SerDesLaneSigDetect(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SerDesSigDetect_SerDesLaneSigDetect_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesSigDetectOvr - SerDes per-lane Signal Detect Override.
    Bits: 23:0  SerDesLaneSigDetectOvr(rw) - Override for SigDETECT from the serdes. Deasserts the PHY_LOS to the Ethernet MAC.
*/
#define NFP_NBI_MACX_CSR_SerDesSigDetectOvr                  0x00000814
#define   NFP_NBI_MACX_CSR_SerDesSigDetectOvr_SerDesLaneSigDetectOvr(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SerDesSigDetectOvr_SerDesLaneSigDetectOvr_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesEthRxActDetect - SerDes per-port Rx activity detect.
  Register: SerDesEthTxActDetect - SerDes per-port Tx activity detect.
    Bits: 23:0  SerDesPortActDetect(ro) - Active Hi when Activity on a port. Clear on Read
*/
#define NFP_NBI_MACX_CSR_SerDesEthRxActDetect                0x00000818
#define NFP_NBI_MACX_CSR_SerDesEthTxActDetect                0x0000081c
#define   NFP_NBI_MACX_CSR_SerDesActDetect_SerDesPortActDetect(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SerDesActDetect_SerDesPortActDetect_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesLinkUp - SerDes Link Up. A '1' indicates the Lane is Block-Locked or comma-sync'd, depending on mode. For a multi-lane port, all associated lanes must be block-locked AND aligned. These bits are just an indication of block_lock.
    Bits: 23:0  SerDesLInkUp(ro) - Active Hi when Serdes link up state occurs(per lane) as indicated by the EthMAC.
*/
#define NFP_NBI_MACX_CSR_SerDesLinkUp                        0x00000820
#define   NFP_NBI_MACX_CSR_SerDesLinkUp_SerDesLInkUp(_x)     (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_CSR_SerDesLinkUp_SerDesLInkUp_of(_x)  (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: ParityErrInject - Setting a bit in this register will force a 1-shot error to be written into the parity field of the corresponding memory on the next write. To re-set the 1-shot, write the register to 0.
    Bits:  5    InjectIgParErrDescMem(rw) - Write a 1 to inject an error to IG descriptor memory.
    Bits:  4    InjectIgParErrTsmpMem(rw) - Write a 1 to inject an error to IG timestamp memory.
    Bits:  3    InjectIgParErrRsltMem(rw) - Write a 1 to inject an error to IG parse result memory.
    Bits:  2    InjectEgParErrDescMem(rw) - Write a 1 to inject an error to EG descriptor memory.
    Bits:  1    InjectEgParErrRslt1Mem(rw) - Write a 1 to inject an error to EG parse result1 memory.
    Bits:  0    InjectEgParErrRslt0Mem(rw) - Write a 1 to inject an error to EG parse result0 memory.
*/
#define NFP_NBI_MACX_CSR_ParityErrInject                     0x00000824
#define   NFP_NBI_MACX_CSR_ParityErrInject_InjectIgParErrDescMem BIT(5)
#define   NFP_NBI_MACX_CSR_ParityErrInject_InjectIgParErrTsmpMem BIT(4)
#define   NFP_NBI_MACX_CSR_ParityErrInject_InjectIgParErrRsltMem BIT(3)
#define   NFP_NBI_MACX_CSR_ParityErrInject_InjectEgParErrDescMem BIT(2)
#define   NFP_NBI_MACX_CSR_ParityErrInject_InjectEgParErrRslt1Mem BIT(1)
#define   NFP_NBI_MACX_CSR_ParityErrInject_InjectEgParErrRslt0Mem BIT(0)
/*----------------------------------------------------------------
  Register: IgParityErrStatus - Ingress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 14:12 IgParErrType(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt_mem. 010=timestamp_mem, 100=desc_mem.
    Bits: 10:0  IgParErrAddr(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP_NBI_MACX_CSR_IgParityErrStatus                   0x00000840
#define   NFP_NBI_MACX_CSR_IgParityErrStatus_IgParErrType(_x) (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_IgParityErrStatus_IgParErrType_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_NBI_MACX_CSR_IgParityErrStatus_IgParErrAddr(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_CSR_IgParityErrStatus_IgParErrAddr_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgParityErrStatus - Egress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 30:28 EgParErrType1(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits: 25:16 EgParErrAddr1(ro) - Address of parity error in memory indicated by a non-zero type field.
    Bits: 14:12 EgParErrType0(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits:  9:0  EgParErrAddr0(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP_NBI_MACX_CSR_EgParityErrStatus                   0x00000844
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrType1(_x) (((_x) & 0x7) << 28)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrType1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr1(_x) (((_x) & 0x3ff) << 16)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr1_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrType0(_x) (((_x) & 0x7) << 12)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrType0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr0(_x) (((_x) & 0x3ff) << 0)
#define   NFP_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr0_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MemErrDropCounts - Packet drop counts due to Mem read errors. Clear on read. Each counter saturates at 255.
    Bits: 31:24 IgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 23:16 IgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 15:8  EgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits:  7:0  EgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
*/
#define NFP_NBI_MACX_CSR_MemErrDropCounts                    0x00000848
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop1(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop0(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop0_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop1(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: AssertConfig0 - Assert config reg 0.
    Bits: 31:0  AssertConfigCsr0(rw) - Assertion Config Register0: disable assertion 31:0.
*/
#define NFP_NBI_MACX_CSR_AssertConfig0                       0x0000084c
#define   NFP_NBI_MACX_CSR_AssertConfig0_AssertConfigCsr0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_CSR_AssertConfig0_AssertConfigCsr0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: AssertConfig1 - Assert config reg 1.
    Bits: 31:18 AssertConfigCsr1Disable(rw) - Assertion Config Register1: disable assertion 45:32.
    Bits: 17    AssertConfigCsr1EnaFsm1(rw) - Assertion Config Register1: enable FSM1.
    Bits: 16    AssertConfigCsr1EnaFsm0(rw) - Assertion Config Register1: enable FSM0.
    Bits: 15:8  AssertConfigCsr1FsmCfg1(rw) - Assertion Config Register1: FSM config1.
    Bits:  7:0  AssertConfigCsr1FsmCfg0(rw) - Assertion Config Register1: FSM config0.
*/
#define NFP_NBI_MACX_CSR_AssertConfig1                       0x00000850
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1Disable(_x) (((_x) & 0x3fff) << 18)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1Disable_of(_x) (((_x) >> 18) & 0x3fff)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1EnaFsm1 BIT(17)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1EnaFsm0 BIT(16)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg1(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxInfo - Interlaken Mac TX Core Info
  Register: LkRxInfo - Interlaken Mac RX Core Info
    Bits: 31:24 LkMaxChan(ro) - The value of SLE_MAX_CHAN that is set in the rtl defines. This sets the number of per channel statistics counters that are kept.
    Bits: 23:14 LkMaxCal(ro) - The value of SLE_MAX_CAL that is set in the rtl defines.
    Bits: 13:8  LkMaxSerDes(ro) - The value of SLE_MAX_SERDES that is set in the rtl defines. This sets the maximum depth of programmable calculator that will be supported.
    Bits:  7:4  LkMajorRev(ro) - Indicates the major version of the SLE Interlaken RTL.
    Bits:  3:0  LkMinorRev(ro) - Indicates the minor version of the SLE Interlaken RTL.
*/
#define NFP_NBI_MACX_ILK_LkTxInfo                            0x00000000
#define NFP_NBI_MACX_ILK_LkRxInfo                            0x00000200
#define   NFP_NBI_MACX_ILK_LkInfo_LkMaxChan(_x)              (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMaxChan_of(_x)           (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMaxCal(_x)               (((_x) & 0x3ff) << 14)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMaxCal_of(_x)            (((_x) >> 14) & 0x3ff)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMaxSerDes(_x)            (((_x) & 0x3f) << 8)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMaxSerDes_of(_x)         (((_x) >> 8) & 0x3f)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMajorRev(_x)             (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMajorRev_of(_x)          (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMinorRev(_x)             (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_LkInfo_LkMinorRev_of(_x)          (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxInfo2 - Interlaken Mac TX Core Info2
    Bits:  7:0  LkTxFifoDepth(ro) - The value of SLE_TX_FIFO_DEPTH that is set in the rtl defines.
*/
#define NFP_NBI_MACX_ILK_LkTxInfo2                           0x00000004
#define   NFP_NBI_MACX_ILK_LkTxInfo2_LkTxFifoDepth(_x)       (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LkTxInfo2_LkTxFifoDepth_of(_x)    (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxLaneDisable - Interlaken Mac TX Core Lane Disable
  Register: LkRxLaneDisable - Interlaken Mac RX Core Lane Disable
    Bits: 23:0  LkLaneDisable(rw) - When set to 1, the logic driving the corresponding serdes lane is disabled. When set to 0, the logic for the corresponding serdes lane is enabled, if it exists.
*/
#define NFP_NBI_MACX_ILK_LkTxLaneDisable                     0x00000008
#define NFP_NBI_MACX_ILK_LkRxLaneDisable                     0x00000208
#define   NFP_NBI_MACX_ILK_LkLaneDisable_LkLaneDisable(_x)   (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkLaneDisable_LkLaneDisable_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxConfig - Interlaken Mac TX Core Config
  Register: LkRxConfig - Interlaken Mac RX Core Config
    Bits: 19    LkUser1(rw) - Unused, must be zero.
    Bits: 18    LkLookAside2Chan(rw) - Select number of channels for lookaside mode. A value of 1 selects 2 channels, a value of 0 selects 4 channels.
    Bits: 17    LkLookAsideMode(rw) - Select lookaside mode when set to 1, else standard mode.
    Bits: 16    LkUser0(rw) - Unused, must be zero.
    Bits: 15    LkFcRxToTxLb(rw) - Enable rx-to-tx loopback on the out-of-band flow control path (internal flow control loopback).
    Bits: 14    LkDataRxToTxLb(rw) - Enable rx-to-tx loopback data path (external data loopback).
    Bits: 13    LkFcTxToRxLb(rw) - Enable tx-to-rx loopback on the out-of-band flow control path (external flow control loopback).
    Bits: 12    LkDataTxToRxLb(rw) - Enable tx-to-rx loopback data path (internal data loopback).
    Bits:  9:8  LkMemWait(rw) - The number of wait states to assume when accessing the memory for the statistics counters. 0= Read data on the cycle following read enable/address 1= Read data two cycles after read eanble/address.
    Bits:  7    LkOutBandEn(rw) - When set to 1, out-of-band flow control is enabled.INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  6    LkInBandEn(rw) - When set to 1, the inband flow control is enabled. INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  5    LkMultExt(rw) - When set to 1, the multiple-use field is used for external use (given by the i_tx_multiple_use[7:0] input). The state of o_rx_chanext_use would be at an unknown state.
    Bits:  4    LkMultCh(rw) - When set to 1, the multiple-use field is used for channel number extention given by the i_tx_chanext input. The state of o_rx_multi_use would be at an unknown state.
    Bits:  3    LkMultFc(rw) - When set to 1, the multiple-use field is for flow control extention. If more than one of the MULT_EXT, MULT_CH, and MULT_FC, are enabled the multipe_use field and o_rx_chanext are undefined.
    Bits:  1    LkScramDis(rw) - When 1, the scrambler of the 64/67 code is disabled. See the Miscellaneous Notes section of the User's Guide.
    Bits:  0    LkSkipDis(rw) - In the TX, when set to 1, the generation of skip words in the metaframe is disabled. In the RX, this bit has no function.
*/
#define NFP_NBI_MACX_ILK_LkTxConfig                          0x00000010
#define NFP_NBI_MACX_ILK_LkRxConfig                          0x00000210
#define   NFP_NBI_MACX_ILK_LkConfig_LkUser1                  BIT(19)
#define   NFP_NBI_MACX_ILK_LkConfig_LkLookAside2Chan         BIT(18)
#define   NFP_NBI_MACX_ILK_LkConfig_LkLookAsideMode          BIT(17)
#define   NFP_NBI_MACX_ILK_LkConfig_LkUser0                  BIT(16)
#define   NFP_NBI_MACX_ILK_LkConfig_LkFcRxToTxLb             BIT(15)
#define   NFP_NBI_MACX_ILK_LkConfig_LkDataRxToTxLb           BIT(14)
#define   NFP_NBI_MACX_ILK_LkConfig_LkFcTxToRxLb             BIT(13)
#define   NFP_NBI_MACX_ILK_LkConfig_LkDataTxToRxLb           BIT(12)
#define   NFP_NBI_MACX_ILK_LkConfig_LkMemWait(_x)            (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_ILK_LkConfig_LkMemWait_of(_x)         (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_ILK_LkConfig_LkOutBandEn              BIT(7)
#define   NFP_NBI_MACX_ILK_LkConfig_LkInBandEn               BIT(6)
#define   NFP_NBI_MACX_ILK_LkConfig_LkMultExt                BIT(5)
#define   NFP_NBI_MACX_ILK_LkConfig_LkMultCh                 BIT(4)
#define   NFP_NBI_MACX_ILK_LkConfig_LkMultFc                 BIT(3)
#define   NFP_NBI_MACX_ILK_LkConfig_LkScramDis               BIT(1)
#define   NFP_NBI_MACX_ILK_LkConfig_LkSkipDis                BIT(0)
/*----------------------------------------------------------------
  Register: LkTxControl - Interlaken Mac TX Core Control
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP_NBI_MACX_ILK_LkTxControl                         0x00000018
#define   NFP_NBI_MACX_ILK_LkTxControl_LkStatusMsgEn         BIT(10)
#define   NFP_NBI_MACX_ILK_LkTxControl_LkDataOutKill         BIT(7)
#define   NFP_NBI_MACX_ILK_LkTxControl_LkFcOutKill           BIT(6)
#define   NFP_NBI_MACX_ILK_LkTxControl_LkDispDis             BIT(4)
#define   NFP_NBI_MACX_ILK_LkTxControl_LkCrc24Dis            BIT(3)
#define   NFP_NBI_MACX_ILK_LkTxControl_LkCrc32Dis            BIT(2)
#define   NFP_NBI_MACX_ILK_LkTxControl_LkUnalignXoffDis      BIT(1)
/*----------------------------------------------------------------
  Register: LkTxFifoConfig - Interlaken Mac TX Core Fifo Config
    Bits: 17    LkTxFifoSingle(rw) - Interlaken TX FIFO Single Parity error inject
    Bits: 16    LkTxFifoInvPar(rw) - Interlaken TX FIFO Parity test function
    Bits: 11:8  LkTxFifoHwm(rw) - Interlaken TX FIFO HWM
    Bits:  3:0  LkTxFifoLwm(rw) - Interlaken TX FIFO LWM
*/
#define NFP_NBI_MACX_ILK_LkTxFifoConfig                      0x00000020
#define   NFP_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoSingle     BIT(17)
#define   NFP_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoInvPar     BIT(16)
#define   NFP_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoHwm(_x)    (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoHwm_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoLwm(_x)    (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoLwm_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkSerDesTxFifoConfig - Interlaken Mac TX Core SerDes Fifo Config
    Bits: 11:8  LkSerDesTxFifoHwm(rw) - Interlaken SerDes TXFIFO HWM
    Bits:  3:0  LkSerDesTxFifoLwm(rw) - Interlaken SerDes TXFIFO LWM
*/
#define NFP_NBI_MACX_ILK_LkSerDesTxFifoConfig                0x00000028
#define   NFP_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoHwm(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoHwm_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoLwm(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoLwm_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxBurstConfig - Interlaken Mac TX Core Burst Config
  Register: LkRxBurstConfig - Interlaken Mac RX Core Burst Config
    Bits: 26:24 LkBurstMax(rw) - Interlaken BurstMax
    Bits: 18:16 LkBurstMin(rw) - Interlaken BurstMin
    Bits: 10:8  LkBurstShort(rw) - Interlaken BurstShort
    Bits:  2    LkBurstMaxChkDisable(rw) - Interlaken Burstmax Check Disable
    Bits:  1    LkBurstMinChkDisable(rw) - Interlaken Burstmin Check Disable
*/
#define NFP_NBI_MACX_ILK_LkTxBurstConfig                     0x00000030
#define NFP_NBI_MACX_ILK_LkRxBurstConfig                     0x00000230
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstMax(_x)      (((_x) & 0x7) << 24)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstMax_of(_x)   (((_x) >> 24) & 0x7)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstMin(_x)      (((_x) & 0x7) << 16)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstMin_of(_x)   (((_x) >> 16) & 0x7)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstShort(_x)    (((_x) & 0x7) << 8)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstShort_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstMaxChkDisable BIT(2)
#define   NFP_NBI_MACX_ILK_LkBurstConfig_LkBurstMinChkDisable BIT(1)
/*----------------------------------------------------------------
  Register: LkTxMetaFrameSyncPeriod - Interlaken Mac TX MetaFrame Sync Period
  Register: LkRxMetaFrameSyncPeriod - Interlaken Mac RX MetaFrame Sync Period
    Bits: 15:0  LkMetaFrameSyncPeriod(rw) - Interlaken MetFrame Sync Period
*/
#define NFP_NBI_MACX_ILK_LkTxMetaFrameSyncPeriod             0x00000034
#define NFP_NBI_MACX_ILK_LkRxMetaFrameSyncPeriod             0x00000234
#define   NFP_NBI_MACX_ILK_LkMetaFrameSyncPeriod_LkMetaFrameSyncPeriod(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LkMetaFrameSyncPeriod_LkMetaFrameSyncPeriod_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxRateLimit0 - Interlaken TX Rate Limit0
    Bits: 31:16 LkMaxCredits(rw) - Interlaken Rate Limit Max Credits
    Bits: 10:8  LkGranularity(rw) - Interlaken Decrement Granularity
    Bits:  0    LkRateLimitEnable(rw) - Interlaken Rate Limit Enable
*/
#define NFP_NBI_MACX_ILK_LkTxRateLimit0                      0x00000038
#define   NFP_NBI_MACX_ILK_LkTxRateLimit0_LkMaxCredits(_x)   (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit0_LkMaxCredits_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit0_LkGranularity(_x)  (((_x) & 0x7) << 8)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit0_LkGranularity_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit0_LkRateLimitEnable  BIT(0)
/*----------------------------------------------------------------
  Register: LkTxRateLimit1 - Interlaken TX Rate Limit1
    Bits: 31:16 LkCreditInterval(rw) - Interlaken Rate Limit Credit Interval
    Bits: 15:0  LkCreditDelta(rw) - Interlaken Rate Limit Credit Delta
*/
#define NFP_NBI_MACX_ILK_LkTxRateLimit1                      0x0000003c
#define   NFP_NBI_MACX_ILK_LkTxRateLimit1_LkCreditInterval(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit1_LkCreditInterval_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit1_LkCreditDelta(_x)  (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LkTxRateLimit1_LkCreditDelta_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxErrInject0 - Interlaken TX Error Inject0
  Register: LkTxErrInject1 - Interlaken TX Error Inject1
  Register: LkTxErrInject2 - Interlaken TX Error Inject2
  Register: LkTxErrInject3 - Interlaken TX Error Inject3
    Bits: 30:24 LkErrLocation(rw) - Interlaken Bit Err Insertion Location 0-66
    Bits: 20:16 LkErrLane(rw) - Interlaken Lane to inject error
    Bits: 10:8  LkErrType(rw) - Interlaken Word type to inject error
    Bits:  1    LkErrSingle(rw) - Interlaken Error Inject Single
    Bits:  0    LkErrEnable(rw) - Interlaken Error Inject Enable
*/
#define NFP_NBI_MACX_ILK_LkTxErrInject0                      0x00000050
#define NFP_NBI_MACX_ILK_LkTxErrInject1                      0x00000054
#define NFP_NBI_MACX_ILK_LkTxErrInject2                      0x00000058
#define NFP_NBI_MACX_ILK_LkTxErrInject3                      0x0000005c
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrLocation(_x)   (((_x) & 0x7f) << 24)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrLocation_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrLane(_x)       (((_x) & 0x1f) << 16)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrLane_of(_x)    (((_x) >> 16) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrType(_x)       (((_x) & 0x7) << 8)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrType_of(_x)    (((_x) >> 8) & 0x7)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrSingle         BIT(1)
#define   NFP_NBI_MACX_ILK_LkTxErrInject_LkErrEnable         BIT(0)
/*----------------------------------------------------------------
  Register: LkTxStatsAcc - Interlaken TX Statistics Counter Access
  Register: LkRxStatsAcc - Interlaken RX Statistics Counter Access
    Bits: 19:16 LkStatsAccType(rw) - Most of the counter type names match exactly with the recommended statistics from the Interlaken Protocol Definition. For TX counter types: 0x0 = TX_Packets, TX_Bytes, and TX_Bad_Packets, ADDR field indicates which channel number; 0x1 = RX_FC_Error. The number of out of band Flow Control Errors, either framing or CRC4 errors. All others: unused. For Rx counter types:
    Bits:  7:0  LkStatsAccAddr(rw) - When LkStatsAccType field = 0000 then LkStatsAccAddr[7:0] represent channel number. All other combinations of LkStatsAccType does not represent anything and therefore should be set to zeros.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsAcc                        0x00000074
#define NFP_NBI_MACX_ILK_LkRxStatsAcc                        0x00000274
#define   NFP_NBI_MACX_ILK_LkStatsAcc_LkStatsAccType(_x)     (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LkStatsAcc_LkStatsAccType_of(_x)  (((_x) >> 16) & 0xf)
#define     NFP_NBI_MACX_ILK_LkStatsAcc_LkStatsAccType_Unused (11)
#define   NFP_NBI_MACX_ILK_LkStatsAcc_LkStatsAccAddr(_x)     (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsAcc_LkStatsAccAddr_of(_x)  (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsFill - Interlaken TX Statistics Counter Fill
  Register: LkRxStatsFill - Interlaken RX Statistics Counter Fill
    Bits: 31    LkStatsFillBOver(ro) - The Byte counter overflowed and started again from zero.
    Bits: 30    LkStatsFillPOver(ro) - The Packet counter overflowed and started again from zero.
    Bits: 29    LkStatsFillEOver(ro) - The Error counter overflowed and started again from zero.
    Bits: 28    LkStatsFillBHalf(ro) - The Byte counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 27    LkStatsFillPHalf(ro) - The Packet counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 26    LkStatsFillEHalf(ro) - The Err counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 19:16 LkStatsFillType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use this register, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsFillAddr(ro) - The address of a statistics counter that is half full or has overflowed. When in Single Channel Stats mode the return value if the LkStatsFillAddr field will always be zero. NOTE: LkStatsFillAddr is undefined when bits 31-26 are all zeros
*/
#define NFP_NBI_MACX_ILK_LkTxStatsFill                       0x00000078
#define NFP_NBI_MACX_ILK_LkRxStatsFill                       0x00000278
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillBOver      BIT(31)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillPOver      BIT(30)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillEOver      BIT(29)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillBHalf      BIT(28)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillPHalf      BIT(27)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillEHalf      BIT(26)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillType(_x)   (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillType_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillAddr(_x)   (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsFill_LkStatsFillAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsParity - Interlaken TX Statistics Counter Parity
  Register: LkRxStatsParity - Interlaken RX Statistics Counter Parity
    Bits: 31    LkStatsParUncorr(ro) - Specifies whether any of the counters had a parity (or uncorrectable ECC) error.
    Bits: 30    LkStatsParCorr(ro) - Specifies whether any of the counters had a correctable ECC error.
    Bits: 19:16 LkStatsParType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use the parity protected memory, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsParAddr(ro) - The address of a statistics counter that had the error. When in Single Channel Stats mode the return value of the ADDR field will always be zero. NOTE: ADDR is undefined when bits 31-30 are all zeros
*/
#define NFP_NBI_MACX_ILK_LkTxStatsParity                     0x0000007c
#define NFP_NBI_MACX_ILK_LkRxStatsParity                     0x0000027c
#define   NFP_NBI_MACX_ILK_LkStatsParity_LkStatsParUncorr    BIT(31)
#define   NFP_NBI_MACX_ILK_LkStatsParity_LkStatsParCorr      BIT(30)
#define   NFP_NBI_MACX_ILK_LkStatsParity_LkStatsParType(_x)  (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LkStatsParity_LkStatsParType_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_ILK_LkStatsParity_LkStatsParAddr(_x)  (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsParity_LkStatsParAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteHi - Interlaken TX Statistics Write Byte Counter High
  Register: LkRxStatsWrByteHi - Interlaken RX Statistics Write Byte Counter High
    Bits: 23:0  LkStatsWrByteHiWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrByteHi                   0x00000080
#define NFP_NBI_MACX_ILK_LkRxStatsWrByteHi                   0x00000280
#define   NFP_NBI_MACX_ILK_LkStatsWrByteHi_LkStatsWrByteHiWData(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrByteHi_LkStatsWrByteHiWData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteLo - Interlaken TX Statistics Write Byte Counter Low
  Register: LkRxStatsWrByteLo - Interlaken RX Statistics Write Byte Counter Low
    Bits: 31:0  LkStatsWrByteLoWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrByteLo                   0x00000084
#define NFP_NBI_MACX_ILK_LkRxStatsWrByteLo                   0x00000284
#define   NFP_NBI_MACX_ILK_LkStatsWrByteLo_LkStatsWrByteLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrByteLo_LkStatsWrByteLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktHi - Interlaken TX Statistics Write Packet Counter High
  Register: LkRxStatsWrPktHi - Interlaken RX Statistics Write Packet Counter High
    Bits: 15:0  LkStatsWrPktHiWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrPktHi                    0x00000088
#define NFP_NBI_MACX_ILK_LkRxStatsWrPktHi                    0x00000288
#define   NFP_NBI_MACX_ILK_LkStatsWrPktHi_LkStatsWrPktHiWData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrPktHi_LkStatsWrPktHiWData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktLo - Interlaken TX Statistics Write Packet Counter Low
  Register: LkRxStatsWrPktLo - Interlaken RX Statistics Write Packet Counter Low
    Bits: 31:0  LkStatsWrPktLoWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrPktLo                    0x0000008c
#define NFP_NBI_MACX_ILK_LkRxStatsWrPktLo                    0x0000028c
#define   NFP_NBI_MACX_ILK_LkStatsWrPktLo_LkStatsWrPktLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrPktLo_LkStatsWrPktLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrHi - Interlaken TX Statistics Write Error Counter High
  Register: LkRxStatsWrErrHi - Interlaken RX Statistics Write Error Counter High
    Bits: 15:0  LkStatsWrErrHiWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrErrHi                    0x00000090
#define NFP_NBI_MACX_ILK_LkRxStatsWrErrHi                    0x00000290
#define   NFP_NBI_MACX_ILK_LkStatsWrErrHi_LkStatsWrErrHiWData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrErrHi_LkStatsWrErrHiWData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrLo - Interlaken TX Statistics Write Error Counter Low
  Register: LkRxStatsWrErrLo - Interlaken RX Statistics Write Error Counter Low
    Bits: 31:0  LkStatsWrErrLoWData(rw) - The write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrErrLo                    0x00000094
#define NFP_NBI_MACX_ILK_LkRxStatsWrErrLo                    0x00000294
#define   NFP_NBI_MACX_ILK_LkStatsWrErrLo_LkStatsWrErrLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrErrLo_LkStatsWrErrLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrParity - Interlaken TX Statistics Write Parity
  Register: LkRxStatsWrParity - Interlaken RX Statistics Write Parity
    Bits: 23:0  LkStatsWrParWData(rw) - The parity bits for the write data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsWrParity                   0x00000098
#define NFP_NBI_MACX_ILK_LkRxStatsWrParity                   0x00000298
#define   NFP_NBI_MACX_ILK_LkStatsWrParity_LkStatsWrParWData(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsWrParity_LkStatsWrParWData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteHi - Interlaken TX Statistics Read Byte Counter High
  Register: LkRxStatsRdByteHi - Interlaken RX Statistics Read Byte Counter High
    Bits: 31    LkStatsRdByteHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdByteHiHalf(ro) - The counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 29    LkStatsRdByteHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdByteHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 23:0  LkStatsRdByteHiRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdByteHi                   0x000000a0
#define NFP_NBI_MACX_ILK_LkRxStatsRdByteHi                   0x000002a0
#define   NFP_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiOver BIT(31)
#define   NFP_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiHalf BIT(30)
#define   NFP_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiUncorr BIT(29)
#define   NFP_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiCorr BIT(28)
#define   NFP_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiRData(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiRData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteLo - Interlaken TX Statistics Read Byte Counter Low
  Register: LkRxStatsRdByteLo - Interlaken RX Statistics Read Byte Counter Low
    Bits: 31:0  LkStatsRdByteLoWData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdByteLo                   0x000000a4
#define NFP_NBI_MACX_ILK_LkRxStatsRdByteLo                   0x000002a4
#define   NFP_NBI_MACX_ILK_LkStatsRdByteLo_LkStatsRdByteLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdByteLo_LkStatsRdByteLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktHi - Interlaken TX Statistics Read Packet Counter High
  Register: LkRxStatsRdPktHi - Interlaken RX Statistics Read Packet Counter High
    Bits: 31    LkStatsRdPktHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdPktHiHalf(ro) - The counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdPktHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdPktHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdPktHiRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdPktHi                    0x000000a8
#define NFP_NBI_MACX_ILK_LkRxStatsRdPktHi                    0x000002a8
#define   NFP_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiOver BIT(31)
#define   NFP_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiHalf BIT(30)
#define   NFP_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiUncorr BIT(29)
#define   NFP_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiCorr BIT(28)
#define   NFP_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiRData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiRData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktLo - Interlaken TX Statistics Read Packet Counter Low
  Register: LkRxStatsRdPktLo - Interlaken RX Statistics Read Packet Counter Low
    Bits: 31:0  LkStatsRdPktLoWData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdPktLo                    0x000000ac
#define NFP_NBI_MACX_ILK_LkRxStatsRdPktLo                    0x000002ac
#define   NFP_NBI_MACX_ILK_LkStatsRdPktLo_LkStatsRdPktLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdPktLo_LkStatsRdPktLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrHi - Interlaken TX Statistics Read Error Counter High
  Register: LkRxStatsRdErrHi - Interlaken RX Statistics Read Error Counter High
    Bits: 31    LkStatsRdErrHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdErrHiHalf(ro) - The counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdErrHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdErrHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdErrHiRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdErrHi                    0x000000b0
#define NFP_NBI_MACX_ILK_LkRxStatsRdErrHi                    0x000002b0
#define   NFP_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiOver BIT(31)
#define   NFP_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiHalf BIT(30)
#define   NFP_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiUncorr BIT(29)
#define   NFP_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiCorr BIT(28)
#define   NFP_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiRData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiRData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrLo - Interlaken TX Statistics Read Error Counter Low
  Register: LkRxStatsRdErrLo - Interlaken RX Statistics Read Error Counter Low
    Bits: 31:0  LkStatsRdErrLoWData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdErrLo                    0x000000b4
#define NFP_NBI_MACX_ILK_LkRxStatsRdErrLo                    0x000002b4
#define   NFP_NBI_MACX_ILK_LkStatsRdErrLo_LkStatsRdErrLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdErrLo_LkStatsRdErrLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdParity - Interlaken TX Statistics Read Parity
  Register: LkRxStatsRdParity - Interlaken RX Statistics Read Parity
    Bits: 23:0  LkStatsRdParRData(ro) - The read data.
*/
#define NFP_NBI_MACX_ILK_LkTxStatsRdParity                   0x000000b8
#define NFP_NBI_MACX_ILK_LkRxStatsRdParity                   0x000002b8
#define   NFP_NBI_MACX_ILK_LkStatsRdParity_LkStatsRdParRData(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkStatsRdParity_LkStatsRdParRData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxCalEnable - Interlaken TX Calendar Enable
  Register: LkRxCalEnable - Interlaken RX Calendar Enable
    Bits: 18:8  LkCalLast(rw) - Interlaken Calendar Last Entry Number
    Bits:  0    LkCalProgEnable(rw) - Interlaken Programmable Calendar enable
*/
#define NFP_NBI_MACX_ILK_LkTxCalEnable                       0x000000c0
#define NFP_NBI_MACX_ILK_LkRxCalEnable                       0x000002c0
#define   NFP_NBI_MACX_ILK_LkCalEnable_LkCalLast(_x)         (((_x) & 0x7ff) << 8)
#define   NFP_NBI_MACX_ILK_LkCalEnable_LkCalLast_of(_x)      (((_x) >> 8) & 0x7ff)
#define   NFP_NBI_MACX_ILK_LkCalEnable_LkCalProgEnable       BIT(0)
/*----------------------------------------------------------------
  Register: LkTxCalProgAccess - Interlaken TX Calendar Program Access
  Register: LkRxCalProgAccess - Interlaken RX Calendar Program Access
    Bits: 25:24 LkCalCmd(rw) - Interlaken Calendar Access command
    Bits: 10:0  LkCalAddr(rw) - Interlaken Prog Calendar Access address
*/
#define NFP_NBI_MACX_ILK_LkTxCalProgAccess                   0x000000c8
#define NFP_NBI_MACX_ILK_LkRxCalProgAccess                   0x000002c8
#define   NFP_NBI_MACX_ILK_LkCalProgAccess_LkCalCmd(_x)      (((_x) & 0x3) << 24)
#define   NFP_NBI_MACX_ILK_LkCalProgAccess_LkCalCmd_of(_x)   (((_x) >> 24) & 0x3)
#define   NFP_NBI_MACX_ILK_LkCalProgAccess_LkCalAddr(_x)     (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_ILK_LkCalProgAccess_LkCalAddr_of(_x)  (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgWrData - Interlaken TX Calendar Program write data
  Register: LkRxCalProgWrData - Interlaken RX Calendar Program write data
    Bits:  8:0  LkCalProgWrData(rw) - Interlaken Prog Calendar Write data
*/
#define NFP_NBI_MACX_ILK_LkTxCalProgWrData                   0x000000d0
#define NFP_NBI_MACX_ILK_LkRxCalProgWrData                   0x000002d0
#define   NFP_NBI_MACX_ILK_LkCalProgWrData_LkCalProgWrData(_x) (((_x) & 0x1ff) << 0)
#define   NFP_NBI_MACX_ILK_LkCalProgWrData_LkCalProgWrData_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgRdData - Interlaken TX Calendar Program read data
  Register: LkRxCalProgRdData - Interlaken RX Calendar Program read data
    Bits:  8:0  LkCalProgRdData(ro) - Interlaken Prog Calendar Read data
*/
#define NFP_NBI_MACX_ILK_LkTxCalProgRdData                   0x000000d8
#define NFP_NBI_MACX_ILK_LkRxCalProgRdData                   0x000002d8
#define   NFP_NBI_MACX_ILK_LkCalProgRdData_LkCalProgRdData(_x) (((_x) & 0x1ff) << 0)
#define   NFP_NBI_MACX_ILK_LkCalProgRdData_LkCalProgRdData_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxDebugControl0 - Interlaken TX Debug bus control0
  Register: LkTxDebugControl1 - Interlaken TX Debug bus control1
  Register: LkRxDebugControl0 - Interlaken RX Debug bus control0
  Register: LkRxDebugControl1 - Interlaken RX Debug bus control1
    Bits: 31:30 LkDebugByte3(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[31:24] of the debug output.
    Bits: 29:24 LkDebugBus3(rw) - Interlaken Debug which internal debug busses to use bits[31:24] of the debug output.
    Bits: 23:22 LkDebugByte2(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[23:16] of the debug output.
    Bits: 21:16 LkDebugBus2(rw) - Interlaken Debug which internal debug busses to use bits[23:16] of the debug output.
    Bits: 15:14 LkDebugByte1(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[15:8] of the debug output.
    Bits: 13:8  LkDebugBus1(rw) - Interlaken Debug which internal debug busses to use bits[15:8] of the debug output.
    Bits:  7:6  LkDebugByte0(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[7:0] of the debug output.
    Bits:  5:0  LkDebugBus0(rw) - Interlaken Debug which internal debug busses to use bits[7:0] of the debug output.
*/
#define NFP_NBI_MACX_ILK_LkTxDebugControl0                   0x00000100
#define NFP_NBI_MACX_ILK_LkTxDebugControl1                   0x00000104
#define NFP_NBI_MACX_ILK_LkRxDebugControl0                   0x00000300
#define NFP_NBI_MACX_ILK_LkRxDebugControl1                   0x00000304
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte3(_x)   (((_x) & 0x3) << 30)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte3_of(_x) (((_x) >> 30) & 0x3)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus3(_x)    (((_x) & 0x3f) << 24)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus3_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte2(_x)   (((_x) & 0x3) << 22)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus2(_x)    (((_x) & 0x3f) << 16)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus2_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte1(_x)   (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte1_of(_x) (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus1(_x)    (((_x) & 0x3f) << 8)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus1_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte0(_x)   (((_x) & 0x3) << 6)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugByte0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus0(_x)    (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_ILK_LkDebugControl_LkDebugBus0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: LkTxDebugHold0 - Interlaken TX Debug hold control0
  Register: LkTxDebugHold1 - Interlaken TX Debug hold control1
  Register: LkRxDebugHold0 - Interlaken RX Debug hold control0
  Register: LkRxDebugHold1 - Interlaken RX Debug hold control1
    Bits: 31:0  LkDebugHold(rw) - Debug: For each bit that is set to 1, the corresponding bit in the debug output will latch and hold when it sees a high value on the selected debug bit.
*/
#define NFP_NBI_MACX_ILK_LkTxDebugHold0                      0x00000108
#define NFP_NBI_MACX_ILK_LkTxDebugHold1                      0x0000010c
#define NFP_NBI_MACX_ILK_LkRxDebugHold0                      0x00000308
#define NFP_NBI_MACX_ILK_LkRxDebugHold1                      0x0000030c
#define   NFP_NBI_MACX_ILK_LkDebugHold_LkDebugHold(_x)       (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkDebugHold_LkDebugHold_of(_x)    (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxDebugObserve0 - Interlaken TX Debug observe data0
  Register: LkTxDebugObserve1 - Interlaken TX Debug observe data1
  Register: LkRxDebugObserve1 - Interlaken RX Debug observe data1
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP_NBI_MACX_ILK_LkTxDebugObserve0                   0x00000110
#define NFP_NBI_MACX_ILK_LkTxDebugObserve1                   0x00000114
#define NFP_NBI_MACX_ILK_LkRxDebugObserve1                   0x00000314
#define   NFP_NBI_MACX_ILK_LkDebugObserve_LkDebugRdata(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkDebugObserve_LkDebugRdata_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestControl - Interlaken TX SerDes Test Control
  Register: LkRxSerDesTestControl - Interlaken RX SerDes Test Control
    Bits: 31:24 LkSerDesTestRepC(rw) - The number of times to repeat pattern C when doing programmable pattern. 0 = Disable pattern C.
    Bits: 23:16 LkSerDesTestRepB(rw) - The number of times to repeat pattern B when doing programmable pattern. 0 = Disable pattern B.
    Bits: 15:8  LkSerDesTestRepA(rw) - The number of times to repeat pattern A when doing programmable pattern. 0 = Disable pattern A.
    Bits:  1    LkSerDesTestProgEn(rw) - Enable programmable pattern.
    Bits:  0    LkSerDesTestPrbsEn(rw) - Enable PRBS (Pseudo Random Bit Stream) pattern.
*/
#define NFP_NBI_MACX_ILK_LkTxSerDesTestControl               0x00000120
#define NFP_NBI_MACX_ILK_LkRxSerDesTestControl               0x00000320
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepC(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepB(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepB_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepA(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestProgEn BIT(1)
#define   NFP_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestPrbsEn BIT(0)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternA - Interlaken TX SerDes Test Pattern A
  Register: LkRxSerDesTestPatternA - Interlaken RX SerDes Test Pattern A
    Bits: 31:0  LkSerDesTestPatternA(rw) - When doing programmable patterns, this bit pattern is sent REPA times. When doing PRBS, this value programs the desired polynomial. The recommended Interlaken polynomials are programmed as follows: PRBS31 : x^31 + x^28 + 1 : 32'h90000001 (bits 31, 28, and 0 are set) PRBS23 : x^23 + x^18 + 1 : 32'h00840001 (bits 23, 18, and 0 are set) PRBS7 : x^7 + x^6 + 1 : 32'h000000C1 (bits 7, 6, and 0 are set) Other commonly used PRBS polynomials are also supported: PRBS9 : x^9 + x^5 + 1 : 32'h00000221 (bits 9, 5, and 0 are set) PRBS11 : x^11 + x^9 + 1 : 32'h00000A01 (bits 11, 9, and 0 are set) PRBS15 : x^15 + x^14 + 1 : 32'h0000C001 (bits 15, 14, and 0 are set) PRBS29 : x^29 + x^27 + 1 : 32'h28000001 (bits 29, 27, and 0 are set) PRBS polynomials other than those listed above are not guaranteed to be functional as some logic optimizations may have been done to improve the area and performance of the design. When doing PRBS, bit[0] is ignored and assumed to be 1'b1..
*/
#define NFP_NBI_MACX_ILK_LkTxSerDesTestPatternA              0x00000124
#define NFP_NBI_MACX_ILK_LkRxSerDesTestPatternA              0x00000324
#define   NFP_NBI_MACX_ILK_LkSerDesTestPatternA_LkSerDesTestPatternA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkSerDesTestPatternA_LkSerDesTestPatternA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternB - Interlaken TX SerDes Test Pattern B
  Register: LkRxSerDesTestPatternB - Interlaken RX SerDes Test Pattern B
    Bits: 31:0  LkSerDesTestPatternB(rw) - When doing programmable patterns, this bit pattern is sent REPB times.
*/
#define NFP_NBI_MACX_ILK_LkTxSerDesTestPatternB              0x00000128
#define NFP_NBI_MACX_ILK_LkRxSerDesTestPatternB              0x00000328
#define   NFP_NBI_MACX_ILK_LkSerDesTestPatternB_LkSerDesTestPatternB(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkSerDesTestPatternB_LkSerDesTestPatternB_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternC - Interlaken TX SerDes Test Pattern C
  Register: LkRxSerDesTestPatternC - Interlaken RX SerDes Test Pattern C
    Bits: 31:0  LkSerDesTestPatternC(rw) - When doing programmable patterns, this bit pattern is sent REPC times.
*/
#define NFP_NBI_MACX_ILK_LkTxSerDesTestPatternC              0x0000012c
#define NFP_NBI_MACX_ILK_LkRxSerDesTestPatternC              0x0000032c
#define   NFP_NBI_MACX_ILK_LkSerDesTestPatternC_LkSerDesTestPatternC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkSerDesTestPatternC_LkSerDesTestPatternC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatusMessage - Interlaken TX Status Message Received from OOB
    Bits: 31    LkTxStatusMessageCurrent(ro) - The most recently received calendar included a status message.
    Bits: 30    LkTxStatusMessageValid(ro) - The most recently received status message was valid (no framing or CRC errors). When the most recently received status message was errored due to framing or CRC errors, the SIF and SL bits below are retained from the previous valid status message, if any.
    Bits: 26    LkTxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 24    LkTxStatusMessageSif(ro) - The status bit for the interface as a whole.
    Bits: 23:0  LkTxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkTxStatusMessage                   0x00000140
#define   NFP_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageCurrent BIT(31)
#define   NFP_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageValid BIT(30)
#define   NFP_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageSync BIT(26)
#define   NFP_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageSif BIT(24)
#define   NFP_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageLanes(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageLanes_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap5to0 - Interlaken TX Lane Remapping 5 to 0
  Register: LkRxLaneReMap5to0 - Interlaken RX Lane Remapping 5 to 0
    Bits: 29:25 LkLaneReMap5(rw) - Interlaken Physical Remap for lane 5
    Bits: 24:20 LkLaneReMap4(rw) - Interlaken Physical Remap for lane 4
    Bits: 19:15 LkLaneReMap3(rw) - Interlaken Physical Remap for lane 3
    Bits: 14:10 LkLaneReMap2(rw) - Interlaken Physical Remap for lane 2
    Bits:  9:5  LkLaneReMap1(rw) - Interlaken Physical Remap for lane 1
    Bits:  4:0  LkLaneReMap0(rw) - Interlaken Physical Remap for lane 0
*/
#define NFP_NBI_MACX_ILK_LkTxLaneReMap5to0                   0x00000150
#define NFP_NBI_MACX_ILK_LkRxLaneReMap5to0                   0x00000350
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap5(_x) (((_x) & 0x1f) << 25)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap5_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap4(_x) (((_x) & 0x1f) << 20)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap4_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap3(_x) (((_x) & 0x1f) << 15)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap3_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap2(_x) (((_x) & 0x1f) << 10)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap2_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap1(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap1_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap0(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap11to6 - Interlaken TX Lane Remapping 11 to 6
  Register: LkRxLaneReMap11to6 - Interlaken RX Lane Remapping 11 to 6
    Bits: 29:25 LkLaneReMap11(rw) - Interlaken Physical Remap for lane 11
    Bits: 24:20 LkLaneReMap10(rw) - Interlaken Physical Remap for lane 10
    Bits: 19:15 LkLaneReMap9(rw) - Interlaken Physical Remap for lane 9
    Bits: 14:10 LkLaneReMap8(rw) - Interlaken Physical Remap for lane 8
    Bits:  9:5  LkLaneReMap7(rw) - Interlaken Physical Remap for lane 7
    Bits:  4:0  LkLaneReMap6(rw) - Interlaken Physical Remap for lane 6
*/
#define NFP_NBI_MACX_ILK_LkTxLaneReMap11to6                  0x00000154
#define NFP_NBI_MACX_ILK_LkRxLaneReMap11to6                  0x00000354
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap11(_x) (((_x) & 0x1f) << 25)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap11_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap10(_x) (((_x) & 0x1f) << 20)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap10_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap9(_x) (((_x) & 0x1f) << 15)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap9_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap8(_x) (((_x) & 0x1f) << 10)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap8_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap7(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap7_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap6(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap6_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxInterrupt - Interlaken TX Interrupt
  Register: LkTxInterrupt2 - Interlaken TX Interrupt Second
    Bits: 31    LkTxIntFifoUnCorr(rw1c) - The transmitter's input fifo had an uncorrectable parity or ECC error.
    Bits: 30    LkTxIntFifoCorr(rw1c) - The transmitter's input fifo had an correctable ECC error.
    Bits: 29    LkTxIntFifoOver(rw1c) - The transmitter's input fifo overflowed. This should not happen if the high watermark in register SLE_TX_FIFO_CFG is set properly given the latency required for the user to respond to stall.
    Bits: 28    LkTxIntFifoUnder(rw1c) - The transmitter's input fifo went empty not on a burst boundary. To try to prevent Interlaken protocol errors a burst boundary was forced. This condition should not happen if the user sends data in complete bursts and the low watermark in register FIXME is set properly given the latency required for the user to respond to stall.
    Bits: 17    LkTxIntFcErr(rw1c) - An error occurred on the out band flow control (mismatch between calendar length and reset calendar pulse or CRC4 error)..
    Bits: 16    LkTxIntStatusMessageChange(rw1c) - When this interrupt is set, it reports if there is a change in the status that is part of the out-of-band flow control. Then STATUS_MSG_CHANGE interrupt sets if there is a change in any bit of register 0x140 : TX Status Message Received.
    Bits: 15    LkTxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error. Each channel in the design has a flag that sets when an uncorrectable parity or ECC error has been seen. To clear the CNT_UNCORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits: 14    LkTxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error. Each channel in the design has a flag that sets when a correctable ECC error has been seen. To clear the CNT_CORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits:  1    LkTxIntFcCntFill(rw1c) - The out-of-band flow control error counter is half full or overflowed.
    Bits:  0    LkTxIntChanCntFill(rw1c) - One or more per channel statistics counters (TX_Bytes, TX_Packets, and/or TX_Bad_Packets) are half full or overflowed.
*/
#define NFP_NBI_MACX_ILK_LkTxInterrupt                       0x00000180
#define NFP_NBI_MACX_ILK_LkTxInterrupt2                      0x00000188
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoUnCorr   BIT(31)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoCorr     BIT(30)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoOver     BIT(29)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoUnder    BIT(28)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFcErr        BIT(17)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntStatusMessageChange BIT(16)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntCntUnCorr    BIT(15)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntCntCorr      BIT(14)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFcCntFill    BIT(1)
#define   NFP_NBI_MACX_ILK_LkTxInterrupt_LkTxIntChanCntFill  BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptMask - Interlaken TX Interrupt Mask
  Register: LkTxInterruptMask2 - Interlaken TX Interrupt Mask Second
    Bits: 31    LkTxIntFifoUnCorrMask(rw) - Mask Interrupt.
    Bits: 30    LkTxIntFifoCorrMask(rw) - Mask Interrupt.
    Bits: 29    LkTxIntFifoOverMask(rw) - Mask Interrupt.
    Bits: 28    LkTxIntFifoUnderMask(rw) - Mask Interrupt.
    Bits: 17    LkTxIntFcErrMask(rw) - Mask Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeMask(rw) - Mask Interrupt.
    Bits: 15    LkTxIntCntUnCorrMask(rw) - Mask Interrupt.
    Bits: 14    LkTxIntCntCorrMask(rw) - Mask Interrupt.
    Bits:  1    LkTxIntFcCntFillMask(rw) - Mask Interrupt.
    Bits:  0    LkTxIntChanCntFillMask(rw) - Mask Interrupt.
*/
#define NFP_NBI_MACX_ILK_LkTxInterruptMask                   0x00000184
#define NFP_NBI_MACX_ILK_LkTxInterruptMask2                  0x0000018c
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoUnCorrMask BIT(31)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoCorrMask BIT(30)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoOverMask BIT(29)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoUnderMask BIT(28)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFcErrMask BIT(17)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntStatusMessageChangeMask BIT(16)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntCntUnCorrMask BIT(15)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntCntCorrMask BIT(14)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFcCntFillMask BIT(1)
#define   NFP_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntChanCntFillMask BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptForce - Interlaken TX Interrupt Force
    Bits: 31    LkTxIntFifoUnCorrForce(rw) - Force Interrupt.
    Bits: 30    LkTxIntFifoCorrForce(rw) - Force Interrupt.
    Bits: 29    LkTxIntFifoOverForce(rw) - Force Interrupt.
    Bits: 28    LkTxIntFifoUnderForce(rw) - Force Interrupt.
    Bits: 17    LkTxIntFcErrForce(rw) - Force Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeForce(rw) - Force Interrupt.
    Bits: 15    LkTxIntCntUnCorrForce(rw) - Force Interrupt.
    Bits: 14    LkTxIntCntCorrForce(rw) - Force Interrupt.
    Bits:  1    LkTxIntFcCntFillForce(rw) - Force Interrupt.
    Bits:  0    LkTxIntChanCntFillForce(rw) - Force Interrupt.
*/
#define NFP_NBI_MACX_ILK_LkTxInterruptForce                  0x00000190
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoUnCorrForce BIT(31)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoCorrForce BIT(30)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoOverForce BIT(29)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoUnderForce BIT(28)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFcErrForce BIT(17)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntStatusMessageChangeForce BIT(16)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntCntUnCorrForce BIT(15)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntCntCorrForce BIT(14)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFcCntFillForce BIT(1)
#define   NFP_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntChanCntFillForce BIT(0)
/*----------------------------------------------------------------
  Register: LkRxControl - Interlaken Mac RX Core Control
    Bits: 11    LkStatusMsgCont(rw) - When set to 1, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control on every calendar. When set to 0, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control only when one of the enabled lanes identifies a problem. Note: STATUS_MSG_CONT is unused in the TX (0x018).
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP_NBI_MACX_ILK_LkRxControl                         0x00000218
#define   NFP_NBI_MACX_ILK_LkRxControl_LkStatusMsgCont       BIT(11)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkStatusMsgEn         BIT(10)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkDataOutKill         BIT(7)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkFcOutKill           BIT(6)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkDispDis             BIT(4)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkCrc24Dis            BIT(3)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkCrc32Dis            BIT(2)
#define   NFP_NBI_MACX_ILK_LkRxControl_LkUnalignXoffDis      BIT(1)
/*----------------------------------------------------------------
  Register: LkSerDesRxFifoConfig - Interlaken Mac RX Core SerDes/FC Fifo Config
    Bits: 27:24 LkFcRxFifoHwm(rw) - Interlaken FC RXFIFO HWM
    Bits: 19:16 LkFcRxFifoLwm(rw) - Interlaken FC RXFIFO LWM
    Bits: 11:8  LkSerDesRxFifoHwm(rw) - Interlaken SerDes RXFIFO HWM
    Bits:  3:0  LkSerDesRxFifoLwm(rw) - Interlaken SerDes RXFIFO LWM
*/
#define NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig                0x00000228
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoHwm(_x) (((_x) & 0xf) << 24)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoHwm_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoLwm(_x) (((_x) & 0xf) << 16)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoLwm_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoHwm(_x) (((_x) & 0xf) << 8)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoHwm_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoLwm(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoLwm_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkRxDebugObserve0 - Interlaken RX Debug observe data0
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP_NBI_MACX_ILK_LkRxDebugObserve0                   0x00000310
#define   NFP_NBI_MACX_ILK_LkRxDebugObserve0_LkDebugRdata(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxDebugObserve0_LkDebugRdata_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkRxInterrupt - Interlaken RX Interrupt
  Register: LkRxInterrupt2 - Interlaken RX Interrupt Second
    Bits: 31    LkRxIntCtlBitErr(rw1c) - Control Word Bit Error. A control word looked like a valid synchronization or skip word, but bit [55:0] of the word did not match the expected value.
    Bits: 29    LkRxIntMfErr(rw1c) - For one or more of the enabled lanes, a valid synchronization word was not received at the metaframe period. SLE_RX_MF_ERR (0x3AC) must be cleared before MF_ERR will clear.
    Bits: 28    LkRxIntBadCtlErr(rw1c) - A control word was received that does not match one of the defined control word types. SLE_RX_BADCTL_ERR MMR (0x3B0) must be cleared before BADCTL_ERR bit[28] will clear.
    Bits: 27    LkRxIntScRamErr(rw1c) - For one or more enabled lanes, a scrambler state word did not match its expected value. SLE_RX_SCRAM_ERR (0x3B4) must be cleared before SCRAM_ERR will clear.
    Bits: 26    LkRxIntCrc32Err(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 25    LkRxIntCdrErr(rw1c) - For one or more enabled lanes, the i_rx_serdes_valid input is low. SLE_RX_CDR_ERR (0x3BC) must be cleared before CDR_ERR will clear.
    Bits: 24    LkRxIntWdSyncChange(rw1c) - For one or more enabled lanes, the 64b/67b synchronization has changed, either from out of sync to in sync or from in sync to out of sync. SLE_RX_WRD SYNC MMR (0x3C0) must be cleared before WRD_SYN_CHANGE bit[24] will clear. A flow diagram for achieving and maintaining 64B/67B word boundary lock is shown in figure 5-10 on page 25 of the Interlaken Protocol Definition. Once we get sync ( the middle64B/67B word lock state in the diagram) we need to get 16 out of 64 words with bad framing bits in order to go out of sync, the upper and lower values are set by 0x218 : Receive Control Register.
    Bits: 23    LkRxIntAlignChange(rw1c) - The alignment state has changed, either from out of alignment to aligned or from aligned to out of alignment.
    Bits: 22    LkRxIntAlignErr(rw1c) - An alignment error occurred (synchronization word not seen on all lanes at the same time).
    Bits: 21    LkRxIntBurstErr(rw1c) - A protocol error occurred in the datapath related to the burst delineation logic.
    Bits: 20    LkRxIntBminErr(rw1c) - A BurstMin violation was detected.
    Bits: 19    LkRxIntBmaxErr(rw1c) - A BurstMax violation was detected.
    Bits: 18    LkRxIntCrc24Err(rw1c) - A burst CRC24 error was detected.
    Bits: 17    LkRxIntFcErr(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 16    LkRxIntStatusMessageChange(rw1c) - When this interrupt is set, it indicates that the diagnostics word's status message has changed. The status message can be seen in register 0x3C8 : Status Message Received.
    Bits: 15    LkRxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error.
    Bits: 14    LkRxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error.
    Bits: 13    LkRxIntBadCtlCntFill(rw1c) - The RX_Bad_Control_Error counter is over half full.
    Bits: 10    LkRxIntCrc32CntFill(rw1c) - One or more of the per lane RX_Lane_CRC_Error counters is over half full.
    Bits:  9    LkRxIntCdrCntFill(rw1c) - One or more of the per lane RX_CDR_Error counters is over half full.
    Bits:  8    LkRxIntWrdSyncCntFill(rw1c) - One or more of the per lane RX_Word_Sync_Error counters is over half full.
    Bits:  7    LkRxIntAlignFailCntFill(rw1c) - The RX_Alignment_Failure counter is over half full.
    Bits:  6    LkRxIntAliCntFill(rw1c) - The RX_Alignment Error counter is over half full.
    Bits:  5    LkRxIntBurstCntFill(rw1c) - The RX_Burst_Error counter is over half full.
    Bits:  4    LkRxIntBminCntFill(rw1c) - The RX_Burst Min error counter is over half full.
    Bits:  3    LkRxIntBmaxCntFill(rw1c) - The RX_Burst_Max_Error counter is over half full.
    Bits:  2    LkRxIntCrc24CntFill(rw1c) - The RX_CRC24_Error counter is over half full.
    Bits:  1    LkRxIntFcCntFill(rw1c) - The in band flow control error counter is over half full. Note, this error does not occur in Look-Aside mode.
    Bits:  0    LkRxIntChanCntFill(rw1c) - One or more per channel statistics counters (RX_Bytes, RX_Packets, and/or RX_Bad_Packets) are over half full.
*/
#define NFP_NBI_MACX_ILK_LkRxInterrupt                       0x00000380
#define NFP_NBI_MACX_ILK_LkRxInterrupt2                      0x00000388
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCtlBitErr    BIT(31)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntMfErr        BIT(29)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBadCtlErr    BIT(28)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntScRamErr     BIT(27)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc32Err     BIT(26)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCdrErr       BIT(25)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntWdSyncChange BIT(24)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAlignChange  BIT(23)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAlignErr     BIT(22)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBurstErr     BIT(21)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBminErr      BIT(20)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBmaxErr      BIT(19)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc24Err     BIT(18)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntFcErr        BIT(17)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntStatusMessageChange BIT(16)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCntUnCorr    BIT(15)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCntCorr      BIT(14)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBadCtlCntFill BIT(13)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc32CntFill BIT(10)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCdrCntFill   BIT(9)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntWrdSyncCntFill BIT(8)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAlignFailCntFill BIT(7)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAliCntFill   BIT(6)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBurstCntFill BIT(5)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBminCntFill  BIT(4)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBmaxCntFill  BIT(3)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc24CntFill BIT(2)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntFcCntFill    BIT(1)
#define   NFP_NBI_MACX_ILK_LkRxInterrupt_LkRxIntChanCntFill  BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptMask - Interlaken RX Interrupt Mask
  Register: LkRxInterruptMask2 - Interlaken RX Interrupt Mask Second
    Bits: 31    LkRxIntCtlBitErrMask(rw) - Interrupt Mask
    Bits: 29    LkRxIntMfErrMask(rw) - Interrupt Mask.
    Bits: 28    LkRxIntBadCtlErrMask(rw) - Interrupt Mask.
    Bits: 27    LkRxIntScRamErrMask(rw) - Interrupt Mask.
    Bits: 26    LkRxIntCrc32ErrMask(rw) - Interrupt Mask.
    Bits: 25    LkRxIntCdrErrMask(rw) - Interrupt Mask.
    Bits: 24    LkRxIntWdSyncChangeMask(rw) - Interrupt Mask.
    Bits: 23    LkRxIntAlignChangeMask(rw) - Interrupt Mask.
    Bits: 22    LkRxIntAlignErrMask(rw) - Interrupt Mask.
    Bits: 21    LkRxIntBurstErrMask(rw) - Interrupt Mask.
    Bits: 20    LkRxIntBminErrMask(rw) - Interrupt Mask.
    Bits: 19    LkRxIntBmaxErrMask(rw) - Interrupt Mask.
    Bits: 18    LkRxIntCrc24ErrMask(rw) - Interrupt Mask.
    Bits: 17    LkRxIntFcErrMask(rw) - Interrupt Mask.
    Bits: 16    LkRxIntStatusMessageChangeMask(rw) - Interrupt Mask.
    Bits: 15    LkRxIntCntUnCorrMask(rw) - Interrupt Mask.
    Bits: 14    LkRxIntCntCorrMask(rw) - Interrupt Mask.
    Bits: 13    LkRxIntBadCtlCntFillMask(rw) - Interrupt Mask.
    Bits: 10    LkRxIntCrc32CntFillMask(rw) - Interrupt Mask.
    Bits:  9    LkRxIntCdrCntFillMask(rw) - Interrupt Mask.
    Bits:  8    LkRxIntWrdSyncCntFillMask(rw) - Interrupt Mask.
    Bits:  7    LkRxIntAlignFailCntFillMask(rw) - Interrupt Mask.
    Bits:  6    LkRxIntAliCntFillMask(rw) - Interrupt Mask.
    Bits:  5    LkRxIntBurstCntFillMask(rw) - Interrupt Mask.
    Bits:  4    LkRxIntBminCntFillMask(rw) - Interrupt Mask.
    Bits:  3    LkRxIntBmaxCntFillMask(rw) - Interrupt Mask.
    Bits:  2    LkRxIntCrc24CntFillMask(rw) - Interrupt Mask.
    Bits:  1    LkRxIntFcCntFillMask(rw) - Interrupt Mask.
    Bits:  0    LkRxIntChanCntFillMask(rw) - Interrupt Mask.
*/
#define NFP_NBI_MACX_ILK_LkRxInterruptMask                   0x00000384
#define NFP_NBI_MACX_ILK_LkRxInterruptMask2                  0x0000038c
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCtlBitErrMask BIT(31)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntMfErrMask BIT(29)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBadCtlErrMask BIT(28)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntScRamErrMask BIT(27)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc32ErrMask BIT(26)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCdrErrMask BIT(25)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntWdSyncChangeMask BIT(24)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAlignChangeMask BIT(23)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAlignErrMask BIT(22)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBurstErrMask BIT(21)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBminErrMask BIT(20)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBmaxErrMask BIT(19)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc24ErrMask BIT(18)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntFcErrMask BIT(17)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntStatusMessageChangeMask BIT(16)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCntUnCorrMask BIT(15)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCntCorrMask BIT(14)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBadCtlCntFillMask BIT(13)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc32CntFillMask BIT(10)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCdrCntFillMask BIT(9)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntWrdSyncCntFillMask BIT(8)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAlignFailCntFillMask BIT(7)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAliCntFillMask BIT(6)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBurstCntFillMask BIT(5)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBminCntFillMask BIT(4)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBmaxCntFillMask BIT(3)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc24CntFillMask BIT(2)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntFcCntFillMask BIT(1)
#define   NFP_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntChanCntFillMask BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptForce - Interlaken RX Interrupt Force
    Bits: 31    LkRxIntCtlBitErrForce(rw) - Interrupt Force
    Bits: 29    LkRxIntMfErrForce(rw) - Interrupt Force.
    Bits: 28    LkRxIntBadCtlErrForce(rw) - Interrupt Force.
    Bits: 27    LkRxIntScRamErrForce(rw) - Interrupt Force.
    Bits: 26    LkRxIntCrc32ErrForce(rw) - Interrupt Force.
    Bits: 25    LkRxIntCdrErrForce(rw) - Interrupt Force.
    Bits: 24    LkRxIntWdSyncChangeForce(rw) - Interrupt Force.
    Bits: 23    LkRxIntAlignChangeForce(rw) - Interrupt Force.
    Bits: 22    LkRxIntAlignErrForce(rw) - Interrupt Force.
    Bits: 21    LkRxIntBurstErrForce(rw) - Interrupt Force.
    Bits: 20    LkRxIntBminErrForce(rw) - Interrupt Force.
    Bits: 19    LkRxIntBmaxErrForce(rw) - Interrupt Force.
    Bits: 18    LkRxIntCrc24ErrForce(rw) - Interrupt Force.
    Bits: 17    LkRxIntFcErrForce(rw) - Interrupt Force.
    Bits: 16    LkRxIntStatusMessageChangeForce(rw) - Interrupt Force.
    Bits: 15    LkRxIntCntUnCorrForce(rw) - Interrupt Force.
    Bits: 14    LkRxIntCntCorrForce(rw) - Interrupt Force.
    Bits: 13    LkRxIntBadCtlCntFillForce(rw) - Interrupt Force.
    Bits: 10    LkRxIntCrc32CntFillForce(rw) - Interrupt Force.
    Bits:  9    LkRxIntCdrCntFillForce(rw) - Interrupt Force.
    Bits:  8    LkRxIntWrdSyncCntFillForce(rw) - Interrupt Force.
    Bits:  7    LkRxIntAlignFailCntFillForce(rw) - Interrupt Force.
    Bits:  6    LkRxIntAliCntFillForce(rw) - Interrupt Force.
    Bits:  5    LkRxIntBurstCntFillForce(rw) - Interrupt Force.
    Bits:  4    LkRxIntBminCntFillForce(rw) - Interrupt Force.
    Bits:  3    LkRxIntBmaxCntFillForce(rw) - Interrupt Force.
    Bits:  2    LkRxIntCrc24CntFillForce(rw) - Interrupt Force.
    Bits:  1    LkRxIntFcCntFillForce(rw) - Interrupt Force.
    Bits:  0    LkRxIntChanCntFillForce(rw) - Interrupt Force.
*/
#define NFP_NBI_MACX_ILK_LkRxInterruptForce                  0x00000390
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCtlBitErrForce BIT(31)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntMfErrForce BIT(29)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBadCtlErrForce BIT(28)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntScRamErrForce BIT(27)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc32ErrForce BIT(26)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCdrErrForce BIT(25)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntWdSyncChangeForce BIT(24)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAlignChangeForce BIT(23)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAlignErrForce BIT(22)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBurstErrForce BIT(21)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBminErrForce BIT(20)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBmaxErrForce BIT(19)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc24ErrForce BIT(18)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntFcErrForce BIT(17)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntStatusMessageChangeForce BIT(16)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCntUnCorrForce BIT(15)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCntCorrForce BIT(14)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBadCtlCntFillForce BIT(13)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc32CntFillForce BIT(10)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCdrCntFillForce BIT(9)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntWrdSyncCntFillForce BIT(8)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAlignFailCntFillForce BIT(7)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAliCntFillForce BIT(6)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBurstCntFillForce BIT(5)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBminCntFillForce BIT(4)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBmaxCntFillForce BIT(3)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc24CntFillForce BIT(2)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntFcCntFillForce BIT(1)
#define   NFP_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntChanCntFillForce BIT(0)
/*----------------------------------------------------------------
  Register: LkRxMfError - Interlaken RX Metaframe Error
    Bits: 23:0  LkRxMfError(rw1c) - The MetaFrame Period Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxMfError                         0x000003ac
#define   NFP_NBI_MACX_ILK_LkRxMfError_LkRxMfError(_x)       (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxMfError_LkRxMfError_of(_x)    (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxBadCtlError - Interlaken RX Bad control word error
    Bits: 23:0  LkRxBadCtlError(rw1c) - The Bad Control Word Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxBadCtlError                     0x000003b0
#define   NFP_NBI_MACX_ILK_LkRxBadCtlError_LkRxBadCtlError(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxBadCtlError_LkRxBadCtlError_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxScramError - Interlaken RX Scrambler error
    Bits: 23:0  LkRxScramError(rw1c) - The Scrambler State Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxScramError                      0x000003b4
#define   NFP_NBI_MACX_ILK_LkRxScramError_LkRxScramError(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxScramError_LkRxScramError_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32Error - Interlaken RX CRC32 error
    Bits: 23:0  LkRxCrc32Error(rw1c) - The CRC32 Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxCrc32Error                      0x000003b8
#define   NFP_NBI_MACX_ILK_LkRxCrc32Error_LkRxCrc32Error(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxCrc32Error_LkRxCrc32Error_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrError - Interlaken RX CDR error
    Bits: 23:0  LkRxCdrError(rw1c) - The Assumed CDR lost status for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxCdrError                        0x000003bc
#define   NFP_NBI_MACX_ILK_LkRxCdrError_LkRxCdrError(_x)     (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxCdrError_LkRxCdrError_of(_x)  (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncChange - Interlaken RX Word sync change
    Bits: 23:0  LkRxWrdSyncChange(rw1c) - The Word boundary lock status changed. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxWrdSyncChange                   0x000003c0
#define   NFP_NBI_MACX_ILK_LkRxWrdSyncChange_LkRxWrdSyncChange(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxWrdSyncChange_LkRxWrdSyncChange_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxAlignStatus - Interlaken RX Alignment Status
    Bits: 23    LkRxAligned(ro) - Indicates that the interface is in alignment. This signal is also available as the o_rx_align output from both the sle_lake_rx_wrap and sle_interlaken_top modules. When this bit changes, the ALIGN_CHANGE bit gets set in the RX Interrupt Registers.
    Bits: 22    LkRxAlignErr(ro) - An invalid synchronization pattern has been found. The status bit is a one shot pulse so it will most likely not be seen on an MMR read.
*/
#define NFP_NBI_MACX_ILK_LkRxAlignStatus                     0x000003c4
#define   NFP_NBI_MACX_ILK_LkRxAlignStatus_LkRxAligned       BIT(23)
#define   NFP_NBI_MACX_ILK_LkRxAlignStatus_LkRxAlignErr      BIT(22)
/*----------------------------------------------------------------
  Register: LkRxStatusMessage - Interlaken RX Status Message
    Bits: 31    LkRxStatusMessageValidAll(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ALL enabled serdes lanes.
    Bits: 30    LkRxStatusMessageValidAny(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ANY enabled serdes lanes.
    Bits: 26    LkRxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 25    LkRxStatusMessageSifAll(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ALL enabled lanes.
    Bits: 24    LkRxStatusMessageSifAny(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ANY enabled lanes.
    Bits: 23:0  LkRxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxStatusMessage                   0x000003c8
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageValidAll BIT(31)
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageValidAny BIT(30)
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageSync BIT(26)
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageSifAll BIT(25)
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageSifAny BIT(24)
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageLanes(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageLanes_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSync - Interlaken RX Word Sync
    Bits: 23:0  LkRxWrdSync(ro) - The Word boundary lock status. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxWrdSync                         0x000003cc
#define   NFP_NBI_MACX_ILK_LkRxWrdSync_LkRxWrdSync(_x)       (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxWrdSync_LkRxWrdSync_of(_x)    (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32CntFill - Interlaken RX CRC32 err counters half full
    Bits: 23:0  LkRxCrc32CntFill(ro) - The half full status for the RX_Lane_CRC_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxCrc32CntFill                    0x000003d8
#define   NFP_NBI_MACX_ILK_LkRxCrc32CntFill_LkRxCrc32CntFill(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxCrc32CntFill_LkRxCrc32CntFill_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrLostCntFill - Interlaken RX CDR lost err counters half full
    Bits: 23:0  LkRxCdrLostCntFill(ro) - The half full status for the RX_CDR_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxCdrLostCntFill                  0x000003dc
#define   NFP_NBI_MACX_ILK_LkRxCdrLostCntFill_LkRxCdrLostCntFill(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxCdrLostCntFill_LkRxCdrLostCntFill_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncCntFill - Interlaken RX word sync err counters half full
    Bits: 23:0  LkRxWrdSyncCntFill(ro) - The half full status of the RX_Word_Sync_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP_NBI_MACX_ILK_LkRxWrdSyncCntFill                  0x000003e0
#define   NFP_NBI_MACX_ILK_LkRxWrdSyncCntFill_LkRxWrdSyncCntFill(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ILK_LkRxWrdSyncCntFill_LkRxWrdSyncCntFill_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRevision - Ethernet MAC Revision register
    Bits: 31:16 EthCustVer(ro) - Indicates the customer version of the ETH Mac RTL.
    Bits: 15:8  EthCoreVer(ro) - Indicates the core version of the ETH Mac RTL.
    Bits:  7:0  EthCoreRev(ro) - Indicates the core revision of the ETH Mac RTL.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthRevision(_x)           (0x00000000 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCustVer(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCustVer_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreVer(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreVer_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreRev(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreRev_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthScratch - Ethernet MAC scratch register
    Bits: 31:0  EthScratch(rw) - The Scratch Register provides a memory location to test the register access.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthScratch(_x)            (0x00000004 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthScratch_EthScratch(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthScratch_EthScratch_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthCmdConfig - Ethernet MAC configuration register
    Bits: 29    EthForceSendRf(rw) - Force send remote fault. (FIXME: undocumented, need description from MTIP)
    Bits: 28    EthForceSendLf(rw) - Force send local fault. (FIXME: undocumented, need description from MTIP)
    Bits: 27    EthDisableFltHdl(rw) - Disable default fault handling. (FIXME: undocumented, need description from MTIP)
    Bits: 22    EthTxFlush(rw) - Egress Flush Enable. If set to '1', the Core reads out the Tx FIFO and drops the data (data is not sent out on the line). The associated pause signals (link pause or priority flow control) are masked.
    Bits: 21    EthRxSfdAny(rw) - Enables, when set, that any character is allowed at the SFD position of the preamble and the frame will be accepted. Note that when this bit is set, no alignment error can occur. If cleared (default) the frame is accepted only if the 8th byte of the preamble contains the SFD value 0xd5. If another value is received, the frame is discarded and the alignment error counter increments.
    Bits: 20    EthPausePfcComp(rw) - Link Pause Compatibility with PFC Mode. If set to '1', Pause frames in legacy pause mode are processed similar to PFC frames in PFC mode, i.e. the transmit path is not paused by incoming Pause frames, only the pause status ff_rx_pfc_xoff<n>(0) is asserted as long as the internal pause timer has not expired. If set to '0' (Reset value), Pause frames are processed as described in FIXME on page FIXME. This bit is relevant only when PFC_MODE=0.
    Bits: 19    EthPfcMode(rw) - Priority Flow Control Mode. If set to '1', the Core generates and processes PFC control frames according to the Priority Flow Control Interface signals. If set to'0' (Reset Value), the Core operates in legacy Pause Frame mode and generates and processes standard Pause Frames (see FIXME).
    Bits: 18    EthRsColCntExt(rw) - If set to '1', sets the reconciliation sublayer parameter col_cnt to the value set in the global register WAN_RS_COL_CNT. When disabled (0), the col_cnt is set as defined by the IEEE 802.3ae standard (128) ignoring the global setting.
    Bits: 17    EthNoLgthCheck(rw) - Disable Payload Length Check. If set to '0' (Reset value), the Core checks the frame's payload length with the frame's Length/Type field. If set to '1', the payload length check is disabled.
    Bits: 16    EthSendIdle(rw) - Force Idle Generation. If set to '1', the MAC permanently sends XL/CGMII Idle sequences even when faults are received.
    Bits: 15    EthPhyTxEna(rw) - Enable PHY Transmit. If set to '1', the signal phy_txena<n> is set to '1'. If set to '0' (Reset value), the signal phy_txena<n> is set to '0'.
    Bits: 14    EthRxErrDiscard(rw) - Enable Receive Errored Frame Discard. If set to '1', any frame received with an error is discarded in the Core and not forwarded to the client interface. If set to '0' (Reset value), errored frames are forwarded to the client interface with ff_rx_err asserted. Note: Not available in this implementation.
    Bits: 13    EthCmdFrameEna(rw) - Enable Reception of all Command Frames. If set to '1', all command frames are accepted. If set to '0' (Reset Value), only Pause frames are accepted and all other command frames are rejected. A command or control frame is defined as having a type of 0x8808 and an opcode field that does not match the pause opcode.
    Bits: 12    EthSwReset(rw) - Self-Clearing Software Reset. When written with '1', all Statistics Counters are reset to 0.
    Bits: 11    EthTxPadEn(rw) - Enable Transmit Padding. If set to '1' (Reset value), the MAC transmit logic inserts padding bytes to always generate frames with a minimum length of 64 bytes with CRC or 60 bytes without CRC. If set to '0', the MAC transmit logic can send unpadded frames. Note: If TX_PAD_EN=0 in 40G and 100G mode of operation, the MAC does not insert padding bytes for frames equal or larger than 32 bytes, frames smaller than 32 bytes are always padded. If TX_PAD_EN=0 in 10G mode of operation, the MAC can send short unpadded frames of any size.
    Bits: 10    EthLoopBackEn(rw) - Enable PHY Interface Loopback. If set to '1', the signal loop_ena<n> is set to '1'. If set to '0' (Reset value), the signal loop_ena<n> is set to '0'.
    Bits:  9    EthTxAddrIns(rw) - Set Source MAC Address on Transmit. If set to '1', the MAC overwrites the source MAC address received from the client interface with the MAC address programmed in registers MAC_ADDR_0 and MAC_ADDR_1 . If set to '0' (Reset value), the source MAC address from the client interface is transmitted unmodified to the line.
    Bits:  8    EthPauseIgnore(rw) - Ignore Pause Frame Quanta. If set to '1', received pause frames are ignored by the MAC. If set to '0' (Reset value), the transmit process is stopped for the amount of time specified in the pause quanta received within a pause frame. This bit is relevant only when PFC_MODE=0.
    Bits:  7    EthPauseFwd(rw) - Terminate / Forward Pause Frames. If set to '1', pause frames are forwarded to the user application. If set to '0' (Reset value), pause frames are terminated and discarded within the MAC.
    Bits:  6    EthCrcFwd(rw) - Terminate / Forward Received CRC. If set to '1', the CRC field of received frames is forwarded with the frame to the user application. If set to '0' (Reset value), the CRC field is stripped from the frame. Note: If padding (Bit PAD_EN set to '1') is enabled, CRC_FWD is ignored.
    Bits:  5    EthPadEn(rw) - Enable Frame Padding Removal in receive path. If set to '1', padding is removed before the frame is conveyed to the MAC client application. If set to '0' (Reset value), no padding is removed on receive by the MAC. Note: Not available in this implementation.
    Bits:  4    EthPromisEn(rw) - Enable MAC Promiscuous Operation. If set to '1', all frames are received without any MAC address filtering. If set to '0' (Reset value), unicast frames with a destination address not matching the Core MAC address (programmed in registers MAC_ADDR_0 and MAC_ADDR_1) are rejected.
    Bits:  3    EthWanMode(rw) - Enable WAN Mode. Sets WAN mode (1) or LAN mode (0, default) of operation. Note: When changing the mode, verify correct setting of the transmit Inter-Packet-Gap (IPG) in register TX_IPG_LENGTH. Note: This bit is only available in 10G mode of operation. It is reserved in 40G and 100G mode of operation.
    Bits:  1    EthRxEna(rw) - MAC Receive Path Enable. Should be set to '1' to enable the MAC receive path, should be set to '0' (Reset value) to disable the MAC receive path.
    Bits:  0    EthTxEna(rw) - MAC Transmit Path Enable. Should be set to '1' to enable the MAC transmit path, should be set to '0' (Reset value) to disable the MAC transmit path.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig(_x)          (0x00000008 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthForceSendRf BIT(29)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthForceSendLf BIT(28)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthDisableFltHdl BIT(27)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxFlush BIT(22)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRxSfdAny BIT(21)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPausePfcComp BIT(20)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPfcMode BIT(19)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRsColCntExt BIT(18)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthNoLgthCheck BIT(17)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthSendIdle BIT(16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPhyTxEna BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRxErrDiscard BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthCmdFrameEna BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthSwReset BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxPadEn BIT(11)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthLoopBackEn BIT(10)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxAddrIns BIT(9)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPauseIgnore BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPauseFwd BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthCrcFwd  BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPadEn   BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPromisEn BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthWanMode BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRxEna   BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxEna   BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthMacAddr0 - Ethernet MAC Addr 31:00
    Bits: 31:0  EthMacAddr0(rw) - The lower 32-Bit of the 48-Bit MAC Address. Bit 0 is LSB.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthMacAddr0(_x)           (0x0000000c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthMacAddr0_EthMacAddr0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthMacAddr0_EthMacAddr0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthMacAddr1 - Ethernet MAC Addr 47:32
    Bits: 15:0  EthMacAddr1(rw) - The upper 16-Bit of the 48-Bit MAC Address. Bit 0 is Bit 32 of MAC address. Bits 31:16 are unused and always set to '0'.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthMacAddr1(_x)           (0x00000010 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthMacAddr1_EthMacAddr1(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthMacAddr1_EthMacAddr1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthFrmLength - Ethernet MAC max frame length
    Bits: 15:0  EthFrmLength(rw) - Maximum supported frame length. The MAC supports any frame size up to 16352 bytes (0x3fe0). Typical settings are 1518 for standard. Set to 1536 after Reset. Bits 31:16 are unused and always set to '0'.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthFrmLength(_x)          (0x00000014 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthFrmLength_EthFrmLength(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthFrmLength_EthFrmLength_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRxFifoSections - Ethernet RX FIFO section thresholds
    Bits: 31:16 EthRxSectionEmptyWm(rw) - RX section empty threshold, reset value is 0x0. All threshold values are in steps of segment data words (10G: 32-bit, 40G: 128-bit, 100G: 384-bit). See also FIXME.
    Bits: 15:0  EthRxSectionAvailWm(rw) - RX section available threshold, reset value is 0x3.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections(_x)     (0x0000001c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionEmptyWm(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionEmptyWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionAvailWm(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionAvailWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxFifoSections - Ethernet TX FIFO section thresholds
    Bits: 31:16 EthTxSectionEmptyWm(rw) - TX section empty threshold, reset value is 0x0. All threshold values are in steps of segment data words (10G: 32-bit, 40G: 128-bit, 100G: 384-bit). See also FIXME.
    Bits: 15:0  EthTxSectionAvailWm(rw) - TX section available threshold, reset value is 0x3.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections(_x)     (0x00000020 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionEmptyWm(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionEmptyWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionAvailWm(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionAvailWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRxFifoAlmostFE - Ethernet RX FIFO almost full/empty WMs
    Bits: 31:16 EthRxFifoAlmostFullWm(ro) - RX FIFO almost full threshold Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
    Bits: 15:0  EthRxFifoAlmostEmptyWm(ro) - RX FIFO almost empty threshold. Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE(_x)     (0x00000024 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostFullWm(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostFullWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostEmptyWm(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostEmptyWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxFifoAlmostFE - Ethernet TX FIFO almost full/empty WMs
    Bits: 31:16 EthTxFifoAlmostFullWm(ro) - TX FIFO almost full threshold Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
    Bits: 15:0  EthTxFifoAlmostEmptyWm(ro) - TX FIFO almost empty threshold. Read Only Fixed thresholds set with a Core configuration parameter (see User Guide document for details).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE(_x)     (0x00000028 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostFullWm(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostFullWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostEmptyWm(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostEmptyWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthHashTableLoad - Ethernet Hash Table load register -WO
    Bits:  8    EthHashTableMcEn(wo) - Bit 8 enables (1) or disables (0) multicast frame reception for the entry.
    Bits:  5:0  EthHashTableAddr(wo) - Bits 5:0 specify the hash table address (code).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad(_x)      (0x0000002c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad_EthHashTableMcEn BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad_EthHashTableAddr(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad_EthHashTableAddr_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthStatus - Ethernet Status
    Bits:  3    EthTsAvail(rw1c) - Transmit Timestamp Available. Indicates that the timestamp of the last transmitted 1588 event frame is available in the register TS_TIMESTAMP. To clear TS_AVAIL, the bit must be written with a '1'.
    Bits:  2    EthPhyLos(ro) - PHY indicates loss-of-signal. Represents value of pin phy_los<n> when link training is disabled, else the signal detect indication from the Link Training Core when link training is enabled.
    Bits:  1    EthRxRemFault(ro) - Latch-High Remote Fault Status. Set to '1' when the MAC detects RX Remote Fault Sequences on the XL/CGMII receive interface. Reset to '0' after read and after reset.
    Bits:  0    EthRxLocFault(ro) - Latch-High Local Fault Status. Set to '1' when the MAC detects RX Local Fault Sequences on the XL/CGMII receive interface. Reset to '0' after read and after reset.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthStatus(_x)             (0x00000040 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthStatus_EthTsAvail    BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthStatus_EthPhyLos     BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxRemFault BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxLocFault BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxIpgLength - Ethernet Transmit IPG length
    Bits:  6:0  EthTxIpgLength(rw) - Transmit Inter-Packet-Gap (IPG) value. A 7-bit value: Depending on LAN or WAN mode of operation (see COMMAND_CONFIG, the value has the following meaning:LAN Mode: Number of octets in steps of 4. Valid values are 8, 12, 16, ..., 100. DIC is fully supported for any setting. A default of 12 (reset value) must be set to conform to IEEE802.3ae. Warning: When set to 8, PCS layers may not be able to perform clock rate compensation.WAN Mode: Stretch factor. Valid values are 4..15. The stretch factor is calculated as (value+1)*8. A default of 12 (reset value) must be set to conform to IEEE 802.3ae (i.e. 13*8=104). A larger value shrinks the IPG (increasing bandwidth). The reset value 12 leads to IEEE802.3ae conformant behavior in both modes. Note: WAN mode is only available in 10G mode of operation.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength(_x)        (0x00000044 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength_EthTxIpgLength(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength_EthTxIpgLength_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthCreditTrigger - Ethernet application fifo/credit reset
    Bits:  0    EthCreditTrigger(rw) - Self-clearing Credit Reset. When written with a '1', this bit will trigger a reset of the RX application FIFO and will cause the INIT_CREDIT value to be loaded into the credit register. This bit should be programmed before enabling the MAC and after writing the initial credit value.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthCreditTrigger(_x)      (0x00000048 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCreditTrigger_EthCreditTrigger BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthInitCredit - Ethernet Init Credit
    Bits:  7:0  EthInitCredit(rw) - Specifies the initial/max credit value to be loaded. Note: The initial credit value must be set to '8' when operating in 10G mode of operation, '7' when operating in 40G mode of operation, and '2' when operating in 100G mode of operation.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthInitCredit(_x)         (0x0000004c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthInitCredit_EthInitCredit(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthInitCredit_EthInitCredit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthCreditReg - Ethernet credit value for debug read-only
    Bits:  7:0  EthCreditReg(ro) - Current credit register value (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthCreditReg(_x)          (0x00000050 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCreditReg_EthCreditReg(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthCreditReg_EthCreditReg_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL01 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL1(rw) - CL1_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL0(rw) - CL0_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered. When normal pause mode is enabled, CL0_PAUSE_QUANTA is used.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01(_x)    (0x00000054 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL1(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL0(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL23 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL3(rw) - CL3_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL2(rw) - CL2_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23(_x)    (0x00000058 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL3(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL2(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL45 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL5(rw) - CL5_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL4(rw) - CL4_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45(_x)    (0x0000005c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL5(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL4(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthPauseQuantaCL67 - Value sent for PFC quanta for that class when XOFF is triggered
    Bits: 31:16 EthPauseQuantaCL7(rw) - CL7_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL6(rw) - CL6_PAUSE_QUANTA. Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67(_x)    (0x00000060 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL7(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL6(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL01 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL1(rw) - CL1_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL0(rw) - CL0_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.When normal pause mode is enabled, CL0_QUANTA_THRESH is used for refreshing pause frames.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01(_x)   (0x00000064 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL1(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL0(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL23 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL3(rw) - CL3_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL2(rw) - CL2_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23(_x)   (0x00000068 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL3(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL2(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL45 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL5(rw) - CL5_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL4(rw) - CL4_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45(_x)   (0x0000006c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL5(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL4(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthQuantaThreshCL67 - When a PFC quanta timer counts down to this value, a refresh pause frame should be re-sent
    Bits: 31:16 EthQuantaThreshCL7(rw) - CL7_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL6(rw) - CL6_QUANTA_THRESH. When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists. Note: Only a value >1 enables this function.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67(_x)   (0x00000070 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL7(_x) (((_x) & 0xffff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL6(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthRxPauseStatus - Status bits for software to read the rx pause status.
    Bits:  7:0  EthRxPauseStatus(ro) - Status bit for software to read the pause status. One bit for each of the 8 classes.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthRxPauseStatus(_x)      (0x00000074 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxPauseStatus_EthRxPauseStatus(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthRxPauseStatus_EthRxPauseStatus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTimestamp - Timestamp of the last frame transmitted with timestamp mark enabled.
    Bits: 31:0  EthTimestamp(ro) - Timestamp of the last frame transmitted with timestamp mark enabled. Valid when the status bit EthStatus[EthTsAvail] is set to '1'.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthTimestamp(_x)          (0x0000007c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTimestamp_EthTimestamp(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTimestamp_EthTimestamp_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxPreamble0 - The lower 32-Bit of the user defined 56-Bit Transmit Preamble.
    Bits: 31:0  EthTxPreamble0(rw) - The lower 32-Bit of the user defined 56-Bit Transmit Preamble. Bit 0 is LSB.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthTxPreamble0(_x)        (0x00000280 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxPreamble0_EthTxPreamble0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxPreamble0_EthTxPreamble0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthTxPreamble1 - The upper 24-Bit of the user defined 56-Bit Transmit Preamble.
    Bits: 23:0  EthTxPreamble1(rw) - The upper 24-Bit of the user defined 56-Bit Transmit Preamble. Bit 0 is bit 32 of the preamble.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthTxPreamble1(_x)        (0x00000284 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxPreamble1_EthTxPreamble1(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthTxPreamble1_EthTxPreamble1_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPcsCtl - PCS control register for SGMII.
    Bits: 15    EthPcsReset(rw) - Self-Clearing Reset Command Register. When set to '1', a synchronous reset pulse is generated which resets all the PCS state machines, the Comma detection function and the 8b/10b coder / decoder. '0' for normal operation.
    Bits: 14    EthPhyLoopBack(rw) - When set to '1', a serial loopback is implemented in the PMA. Should be set to '0' (Reset value) during normal operation. (setting not relevant, function not used.)
    Bits: 13    EthSgmiiSpeedSel0(ro) - Read only bits that define that the PCS only operates in Gigabit mode.
    Bits: 12    EthAutoNegEnable(rw) - When set to 1 (Reset value) Auto Negotiation is enabled, set to 0 to disable Auto Negotiation.
    Bits: 11    EthPowerDown(rw) - When set to '1', the PCS drives its powerdown output pin.(setting not relevant, function not used.)
    Bits: 10    EthIsolate(rw) - When set to '1', the PCS is isolated from the MAC Layer device. Should be set to '0' (Reset value) to enable normal operation. Note: When set keeps the PCS in reset (equals bit15=1 permanently).
    Bits:  9    EthRestartAutoNeg(rw) - Self-clearing command bit: Set to '1' to restart an auto negotiation sequence. Set to '0' (Reset value) in normal operation mode.
    Bits:  8    EthDuplexMode(ro) - Read only bit always set to '1' to indication that the PCS only supports Full Duplex mode of operation and does not support Half Duplex mode of operation.
    Bits:  7    EthCollisionTest(ro) - Half duplex not supported by the PCS, read only bit set to '0'.
    Bits:  6    EthSgmiiSpeedSel1(ro) - Read only bits that define that the PCS only operates in Gigabit mode.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl(_x)        (0x00000300 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthPcsReset BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthPhyLoopBack BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthSgmiiSpeedSel0 BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthAutoNegEnable BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthPowerDown BIT(11)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthIsolate BIT(10)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthRestartAutoNeg BIT(9)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthDuplexMode BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthCollisionTest BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsCtl_EthSgmiiSpeedSel1 BIT(6)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPcsStatus - PCS Status register for SGMII.
    Bits: 15    Eth100T4(ro) - Read Only bit set to '0' to indicate that the PCS does NOT support 100Base-T4 operation.
    Bits: 14:13 Eth100XHalfDuplex(ro) - Read Only bit set to '00' to indicate that the PCS does NOT support 100Base-X operation.
    Bits: 12:11 Eth10MbHalfDuplex(ro) - Read Only bit set to '00' to indicate that the PCS does NOT support 10Mbps operation.
    Bits: 10:9  Eth100T2HalfDuplex(ro) - Read Only bit set to '00' to indicate that the PCS does NOT support 100Base-T2 operation.
    Bits:  8    EthExtendedStatus(ro) - Read Only bit always set to '0' to indicate that the PCS does NOT implement an extended status register.
    Bits:  5    EthAutoNegComplete(ro) - Read Only Bit set to '1' to indicate that the Auto Negotiation process is completed and that the Auto Negotiation control registers are valid. Set to '0' if the Auto Negotiation process is not completed or if Auto Negotiation is disabled.
    Bits:  4    EthRemoteFault(ro) - Read Only Bit always set to '0'. The PCS does not implement a PHY specific remote fault detection optional function.
    Bits:  3    EthAutoNegAbility(ro) - Read Only Bit set to '1' to indicate that the PCS PCS supports Auto-Negotiation.
    Bits:  2    EthLinkStatus(ro) - Read Only Link Status Register. When read as a logic one, indicates that the PCS has determined that a valid link has been established. When read as a logic zero, indicates that the link is not valid.If the link synchronization is lost a '0' is latched which is cleared only after a register read access.
    Bits:  1    EthJabberDetect(ro) - Read Only bit always set to '0', the PCS does not support the optional Jabber detection function.
    Bits:  0    EthExtCapable(ro) - Read Only bit set to '1' to indicate that the PCS supports extended registers.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus(_x)     (0x00000304 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth100T4 BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth100XHalfDuplex(_x) (((_x) & 0x3) << 13)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth100XHalfDuplex_of(_x) (((_x) >> 13) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth10MbHalfDuplex(_x) (((_x) & 0x3) << 11)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth10MbHalfDuplex_of(_x) (((_x) >> 11) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth100T2HalfDuplex(_x) (((_x) & 0x3) << 9)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_Eth100T2HalfDuplex_of(_x) (((_x) >> 9) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthExtendedStatus BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthAutoNegComplete BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthRemoteFault BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthAutoNegAbility BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthLinkStatus BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthJabberDetect BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPcsStatus_EthExtCapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPhyIdent0 - PCS PHY Identifier register for SGMII.
    Bits: 15:0  EthPhyIdentifier0(ro) - PHY Identification Register. Read only register programmed with a custom value.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPhyIdent0(_x)     (0x00000308 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPhyIdent0_EthPhyIdentifier0(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPhyIdent0_EthPhyIdentifier0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPhyIdent1 - PCS PHY Identifier register for SGMII.
    Bits: 15:0  EthPhyIdentifier1(ro) - PHY Identification Register. Read only register programmed with a custom value.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPhyIdent1(_x)     (0x0000030c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPhyIdent1_EthPhyIdentifier1(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPhyIdent1_EthPhyIdentifier1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiDevAbility - Device ability advertised to link partner during Auto-neg.
    Bits: 15    EthNextPageCapable(rw) - Next page capable. Set to '1' to indicate next page capability.
    Bits: 14    EthACK(ro) - Acknowledgement bit used during autonegotiation. Setting of the bit in the device ability advertisement register is not relevant to the operation of the autonegotiation function. The bit is typically set in the received partner ability register upon successful completion of autonegotiation.
    Bits: 13:12 EthRemoteFault(rw) - Remote fault condition advertise
    Bits:  8    EthPS2(rw) - Advertise that the PCS supports pause on both transmit and receive. PS2 (ASM_DIR) indicates pause asymmetry. Refer to IEEE802.3 Clause 37.2.4.2 for pause resolution.
    Bits:  7    EthPS1(rw) - Advertise that the PCS supports pause on both transmit and receive. PS1 (Pause) indicates pause capability.Refer to IEEE802.3 Clause 37.2.4.2 for pause resolution. The device-ability register reset to 1 indicating full pause support in both directions
    Bits:  6    EthHalfDuplex(rw) - Half Duplex Support. Set to '1' when the device advertises that is supports Half Duplex Mode of operation.
    Bits:  5    EthFullDuplex(rw) - Full Duplex Support. Set to '1' when the device advertises that it supports Full Duplex Mode of operation. The device-ability (advertisement) register reset value sets the bit to 1 indicating full duplex operation.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility(_x)    (0x00000310 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthNextPageCapable BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthACK BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthRemoteFault(_x) (((_x) & 0x3) << 12)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthRemoteFault_of(_x) (((_x) >> 12) & 0x3)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthRemoteFault_no_error (0)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthRemoteFault_link_failure (1)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthRemoteFault_offline (2)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthRemoteFault_autonegotiation_error (3)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthPS2 BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthPS1 BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthHalfDuplex BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDevAbility_EthFullDuplex BIT(5)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiPartnerAbility - Device ability advertised by link partner during Auto-neg.
    Bits: 15    EthCopperLinkStatus(ro) - Read only bit, used by the SGMII PHY to advertise the Link Partner Copper status: 1=Copper interface link is up 0=Copper interface link is down.
    Bits: 14    EthACK(ro) - Acknowledgement bit used during autonegotiation. Setting of the bit in the device ability advertisement register is not relevant to the operation of the autonegotiation function. The bit is typically set in the received partner ability register upon successful completion of autonegotiation.
    Bits: 12    EthCopperDuplexStatus(ro) - Read only bit, used by the SGMII PHY to advertise the Link Partner Copper duplex capability: 0=Copper Interface resolved to Half-Duplex 1=Copper Interface resolved to Full-Duplex
    Bits: 11:10 EthCopperSpeed(ro) - Read only bits, used to by the SGMII PHY to advertise the Copper interface speed (Bit 11:10).
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility(_x) (0x00000314 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperLinkStatus BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthACK BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperDuplexStatus BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperSpeed(_x) (((_x) & 0x3) << 10)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperSpeed_of(_x) (((_x) >> 10) & 0x3)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperSpeed_10M (0)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperSpeed_100M (1)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerAbility_EthCopperSpeed_1G (2)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiAnExpansion - reserved.
    Bits:  1    EthLatchedHiPageRcvd(ro) - Latched high page received indication (cleared on read).
    Bits:  0    EthRealTimePageRcvd(ro) - Real-time page receive indication.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiAnExpansion(_x)   (0x00000318 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiAnExpansion_EthLatchedHiPageRcvd BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiAnExpansion_EthRealTimePageRcvd BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiDeviceNextPage - The PCS does not support next page autonegotiation.
  Register: MacEthSeg[12]_EthSgmiiPartnerNextPage - The PCS does not support next page autonegotiation.
  Register: MacEthSeg[12]_EthSgmiiExtendedStatus - The PCS does not support extended status.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiDeviceNextPage(_x) (0x0000031c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiPartnerNextPage(_x) (0x00000320 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiExtendedStatus(_x) (0x0000033c + (0x400 * ((_x) & 0xf)))
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiLinkTimerLo - Auto Negotiation Link Timer bits 15:0.
    Bits: 15:0  EthLinkTimerLo(rw) - Auto Negotiation Link Timer (RW). Set the Link Timer value from 0 to 16ms in 8ns steps (125MHz clock periods). The reset value sets the Link Timer to 10ms (1250000). Bits 15:0 are stored in the LO register.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiLinkTimerLo(_x)   (0x00000348 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiLinkTimerLo_EthLinkTimerLo(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiLinkTimerLo_EthLinkTimerLo_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiLinkTimerHi - Auto Negotiation Link Timer bits 20:16.
    Bits:  4:0  EthLinkTimerHi(rw) - Auto Negotiation Link Timer (RW). Set the Link Timer value from 0 to 16ms in 8ns steps (125MHz clock periods). The reset value sets the Link Timer to 10ms (1250000). Bits 20:16 are stored in the HI register.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiLinkTimerHi(_x)   (0x0000034c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiLinkTimerHi_EthLinkTimerHi(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiLinkTimerHi_EthLinkTimerHi_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthSeg[12]_EthSgmiiIfMode - SGMII Interface Mode register.
    Bits:  5    EthSgmiiPcsEnable(rw) - Enable SGMII/1000Base-X PCS instead of XGMII/10GBase-R for the 10G MAC. When set (1) the SGMII PCS layer becomes active and the channel is configured for 1G mode of operation. The other bits in this register have no meaning if this bit is not set. When cleared (0, default) the MAC operates in 10G mode with an XGMII (internally) and 10GBase-R PCS Layer. Note: This bit only configures the datapath within the combined MAC and PCS layers. It does not change the PMA/SERDES module, externally to the core. This must be controlled elsewhere to adapt the correct interface width (10-bit) and speed (125MHz). Note: After setting this bit=1, a PCS soft reset should be performed by writing bit15 of the PCS control register.
    Bits:  4    EthSgmiiHDuplex(rw) - SGMII Halfduplex Mode: When set (1), halfduplex is enabled, when cleared, fullduplex is enabled (default). Note: halfduplex is NOT supported in this implementation. This bit setting has no effect.
    Bits:  3:2  EthSgmiiSpeed(rw) - SGMII Speed. When the PCS operates in SGMII mode (SGMII_ENA set to '1') and when the PCS is programmed not to be automatically configured (USE_SGMII_AN set to '0'), sets the PCS speed of operation (Bit 4:0): Bits ignored when SGMII_ENA=0 or USE_SGMII_AN=0..
    Bits:  1    EthUseSgmiiAn(rw) - Use the SGMII Auto-Negotiation Results to Program the PCS Speed. When set to '0' (Reset Value), the PCS operation should be programmed with the register bit SGMII_SPEED and SGMII_DUPLEX. When '1', the PCS operation is automatically set according to the Partner abilities advertised during Auto-Negotiation. Ignored when SGMII_ENA is set to '0'.
    Bits:  0    EthSgmiiEna(rw) - SGMII Mode Enable. When set to '0' (Reset Value), the PCS operates in standard 1000Base-X Gigabit mode, when set to '1', the PCS operates in SGMII Mode. If the bit is '0' the bits 1..4 of this register are ignored.
*/
#define NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode(_x)        (0x00000350 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiPcsEnable BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiHDuplex BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiSpeed(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiSpeed_of(_x) (((_x) >> 2) & 0x3)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiSpeed_10M (0)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiSpeed_100M (1)
#define     NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiSpeed_1G (2)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthUseSgmiiAn BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthSeg_EthSgmiiIfMode_EthSgmiiEna BIT(0)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthActCtlSeg - Active segment control registers
    Bits: 11:0  EthActivateSegment(rw) - Active segment control (1 bit per segment). '1' = Active.Bit0=Seg0...Bit11=Seg11
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthActCtlSeg           0x00003000
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthActCtlSeg_EthActivateSegment(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthActCtlSeg_EthActivateSegment_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthModeCtlSeg - Segment Mode control registers
    Bits: 23:0  EthSegmentModeCtl(rw) - Segment mode control (2 bits per segment) SEG0=1:0, SEG1=3:2...
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthModeCtlSeg          0x00003004
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthModeCtlSeg_EthSegmentModeCtl(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthModeCtlSeg_EthSegmentModeCtl_of(_x) (((_x) >> 0) & 0xffffff)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthModeCtlSeg_EthSegmentModeCtl_10G (0)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthModeCtlSeg_EthSegmentModeCtl_40G (1)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthModeCtlSeg_EthSegmentModeCtl_100G (2)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTxClkCtlSeg - TXCLK control per segment registers
    Bits: 23:0  EthSegmentTxClkCtl(ro) - PMA Transmit Clock Selection (2 bits per segment) SEG0=1:0, SEG1=3:2...This register reflects the setting of the output pins sd_tx_clk_ctrl(23:0).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTxClkCtlSeg         0x00003008
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTxClkCtlSeg_EthSegmentTxClkCtl(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTxClkCtlSeg_EthSegmentTxClkCtl_of(_x) (((_x) >> 0) & 0xffffff)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthTxClkCtlSeg_EthSegmentTxClkCtl_AUTO (0)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthTxClkCtlSeg_EthSegmentTxClkCtl_1G (1)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthTxClkCtlSeg_EthSegmentTxClkCtl_OTHER (2)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthPrmblCtlSeg - User defined TX preamble control per segment
    Bits: 23:0  EthSegmentPrmblCtl(rw) - User defined Tx preamble control (2 bits per segment) SEG0=1:0, SEG1=3:2....
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthPrmblCtlSeg         0x0000300c
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthPrmblCtlSeg_EthSegmentPrmblCtl(_x) (((_x) & 0xffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthPrmblCtlSeg_EthSegmentPrmblCtl_of(_x) (((_x) >> 0) & 0xffffff)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthPrmblCtlSeg_EthSegmentPrmblCtl_DEFAULT (0)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthPrmblCtlSeg_EthSegmentPrmblCtl_REG (1)
#define     NFP_NBI_MACX_ETH_MacEthGlobal_EthPrmblCtlSeg_EthSegmentPrmblCtl_FF (2)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthWanRsColCnt - The 16-bit limit for the column-counter for 10GBase-R fault statemachine.
    Bits: 15:0  EthWanRsColCnt(rw) - A 16-bit value used as limit for the column-counter for the 10GBase-R fault statemachine (IEEE802.3ae Clause 46.3.4). Defaults to 127 for IEEE 802.3ae conformant behavior. The setting is relevant only in 12x10G mode of operation and is used by a 10G MAC when it is configured to use the extended column counter (see command_config(RS_COL_CNT_EXT)). Bits 31:16: reserved, write 0 always.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthWanRsColCnt         0x00003020
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthWanRsColCnt_EthWanRsColCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthWanRsColCnt_EthWanRsColCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmInitCredit0 - Specifies the Rx initial/max credit value to be loaded for Segment 0-3.
    Bits: 31:24 EthTdmInitCredit3(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 3.
    Bits: 23:16 EthTdmInitCredit2(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 2.
    Bits: 15:8  EthTdmInitCredit1(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 1.
    Bits:  7:0  EthTdmInitCredit0(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 0.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0      0x00003024
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit3(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit2(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit1(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit0_EthTdmInitCredit0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmInitCredit1 - Specifies the Rx initial/max credit value to be loaded for Segment 4-7.
    Bits: 31:24 EthTdmInitCredit7(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 7.
    Bits: 23:16 EthTdmInitCredit6(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 6.
    Bits: 15:8  EthTdmInitCredit5(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 5.
    Bits:  7:0  EthTdmInitCredit4(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 4.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1      0x00003028
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit7(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit7_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit6(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit6_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit5(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit5_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit1_EthTdmInitCredit4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmInitCredit2 - Specifies the Rx initial/max credit value to be loaded for Segment 8-11.
    Bits: 31:24 EthTdmInitCredit11(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 11.
    Bits: 23:16 EthTdmInitCredit10(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 10.
    Bits: 15:8  EthTdmInitCredit9(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 9.
    Bits:  7:0  EthTdmInitCredit8(rw) - Specifies the Rx initial/max credit value to be loaded for Segment 8.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2      0x0000302c
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit11(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit11_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit10(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit10_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit9(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit9_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit8(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmInitCredit2_EthTdmInitCredit8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmCreditReg0 - Current credit value for Segment 0-3.
    Bits: 31:24 EthTdmCredit3(ro) - Current credit register value of Segment 3 (for debug purpose only).
    Bits: 23:16 EthTdmCredit2(ro) - Current credit register value of Segment 2 (for debug purpose only).
    Bits: 15:8  EthTdmCredit1(ro) - Current credit register value of Segment 1 (for debug purpose only).
    Bits:  7:0  EthTdmCredit0(ro) - Current credit register value of Segment 0 (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0       0x00003030
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit3(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit2(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit1(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg0_EthTdmCredit0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmCreditReg1 - Current credit value for Segment 4-7.
    Bits: 31:24 EthTdmCredit7(ro) - Current credit register value of Segment 7 (for debug purpose only).
    Bits: 23:16 EthTdmCredit6(ro) - Current credit register value of Segment 6 (for debug purpose only).
    Bits: 15:8  EthTdmCredit5(ro) - Current credit register value of Segment 5 (for debug purpose only).
    Bits:  7:0  EthTdmCredit4(ro) - Current credit register value of Segment 4 (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1       0x00003034
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit7(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit7_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit6(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit6_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit5(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit5_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg1_EthTdmCredit4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthTdmCreditReg2 - Current credit value for Segment 8-11.
    Bits: 31:24 EthTdmCredit11(ro) - Current credit register value of Segment 11 (for debug purpose only).
    Bits: 23:16 EthTdmCredit10(ro) - Current credit register value of Segment 10 (for debug purpose only).
    Bits: 15:8  EthTdmCredit9(ro) - Current credit register value of Segment 9 (for debug purpose only).
    Bits:  7:0  EthTdmCredit8(ro) - Current credit register value of Segment 8 (for debug purpose only).
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2       0x00003038
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit11(_x) (((_x) & 0xff) << 24)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit11_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit10(_x) (((_x) & 0xff) << 16)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit10_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit9(_x) (((_x) & 0xff) << 8)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit9_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit8(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthTdmCreditReg2_EthTdmCredit8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthGlobal_EthVLIntvl - Virtual Lane Marker Interval.
    Bits:  0    EthVLIntvl(rw) - Bit 0: Virtual Lane Marker Interval. When set to '0' (reset value), alignment markers are inserted and detected after every 16383 blocks according to IEEE 802.3ba standard specification. For test purposes, setting this bit to '1' will change the interval to 1023 blocks.
*/
#define NFP_NBI_MACX_ETH_MacEthGlobal_EthVLIntvl             0x00003040
#define   NFP_NBI_MACX_ETH_MacEthGlobal_EthVLIntvl_EthVLIntvl BIT(0)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioCfgStatus - MDIO Status
    Bits: 15:7  EthMdioClkDivisor(rw) - MDIO clock divisor. A value of 5 to 511 can be set. The frequency is reg_clk/((2*divisor)+1). The reset default is defined by the synthesis package setting MDIO_CLK_DIV. Setting the divisor to 0 disables MDC.
    Bits:  6    EthEnableClause45(rw) - Enable Clause 45 support. If '0', Clause 22 transactions are used. If '1' (default), Clause 45 transactions are used.
    Bits:  5    EthDisPreamble(rw) - Disable Preamble (if '1').
    Bits:  4:2  EthMdioHoldTime(rw) - MDIO hold time setting as per table.
    Bits:  1    EthMdioRdError(ro) - MDIO read error (read only bit). If '1', the last read transaction had no response from a PHY and the data read could be invalid. This can happen, if the PHY address does not match any PHY that is available on the MDIO bus.
    Bits:  0    EthMdioBusy(ro) - MDIO busy (read only bit). If '1' an MDIO transaction is currently ongoing. If '0' the application can access the other registers.
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus      0x00003400
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthMdioClkDivisor(_x) (((_x) & 0x1ff) << 7)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthMdioClkDivisor_of(_x) (((_x) >> 7) & 0x1ff)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthEnableClause45 BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthDisPreamble BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthMdioHoldTime(_x) (((_x) & 0x7) << 2)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthMdioHoldTime_of(_x) (((_x) >> 2) & 0x7)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthMdioRdError BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCfgStatus_EthMdioBusy BIT(0)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioCommand - MDIO Command (PHY and Port Address)
    Bits: 15    EthMdioRdCmd(rw) - If written with '1', a read transaction is initiated..
    Bits: 14    EthMdioRdCmdCl45(rw) - If written with '1', a read with address post-increment transaction is initiated. Only for Clause 45 transactions.
    Bits:  9:5  EthMdioPortPhyAddr(rw) - Port address(clause 45) OR PHY address(clause 22).
    Bits:  4:0  EthMdioDevRegAddr(rw) - Device address(clause 45) OR Register address(clause 22).
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand        0x00003404
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand_EthMdioRdCmd BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand_EthMdioRdCmdCl45 BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand_EthMdioPortPhyAddr(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand_EthMdioPortPhyAddr_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand_EthMdioDevRegAddr(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioCommand_EthMdioDevRegAddr_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioData - MDIO Data to write and last Data read.
    Bits: 31    EthMdioBusy(ro) - MDIO busy as found in MDIO_STATUS.0. The value read is invalid as long as Bit 31 is '1'. (read only bit).
    Bits: 15:0  EthMdioData(rw) - 16 bit data word When written: Initiates a write transaction to the PHY. The COMMAND register must have been initialized. The busy status bit will be set immediately and cleared when the write transaction has finished. When read: Returns the data read from the PHY register after a read transaction has been completed (initiated by writing a '1' to Bit 15 or Bit 14 of the COMMAND register).
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioData           0x00003408
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioData_EthMdioBusy BIT(31)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioData_EthMdioData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioData_EthMdioData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthMdioCtl_EthMdioRegAddr - MDIO Register Address.
    Bits: 31:0  EthMdioRegAddr(wo) - Address of register within Clause 45 PHY device to read from or write to. After writing this register an address-write transaction will be initiated to set the PHY's internal address register to the value given. The COMMAND register must have been initialized before the first write to this register. Note: When a read post increment access is issued this register will not change, only the register inside the PHY device is incremented. The register is relevant only when Clause 45 mode has been enabled. It should not be used when Clause 22 mode is active.
*/
#define NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioRegAddr        0x0000340c
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioRegAddr_EthMdioRegAddr(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthMdioCtl_EthMdioRegAddr_EthMdioRegAddr_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthVlanTpidCfg_EthVlanTpid[8] - VLAN Tag TPID X
    Bits: 15:0  EthVlanTpid(rw) - VLAN Tag TPID.
*/
#define NFP_NBI_MACX_ETH_MacEthVlanTpidCfg_EthVlanTpid(_x)   (0x00003800 + (0x4 * ((_x) & 0x7)))
#define   NFP_NBI_MACX_ETH_MacEthVlanTpidCfg_EthVlanTpid_EthVlanTpid(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthVlanTpidCfg_EthVlanTpid_EthVlanTpid_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsCtl1 - PCS control register 1
    Bits: 15    EthPcsReset(rw) - Reset. 1=PCS reset (see FIXME), 0=normal operation. Self clearing.
    Bits: 14    EthPcsLoopback(rw) - Loopback. 1=Enable loopback (see FIXME), 0=normal.
    Bits: 13    EthPcsSpeedSelection13(ro) - Speed selection. (13,6)=11=bits 5:2 select speed.
    Bits: 11    EthPcsLowPower(ro) - Low power. 1=Low power mode, 0=normal. NOT SUPPORTED
    Bits:  6    EthPcsSpeedSelection6(ro) - Speed selection. (13,6)=11=bits 5:2 select speed.
    Bits:  5:2  EthPcsSpeedSel(ro) - PCS Speed Select.Speed Bits (13,6:2) are set to 110100 for 100GBASE-R, 110011 for 40GBASE-R, or 110000 for 10GBASE-R inherited from global configuration.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1(_x)     (0x00004000 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsReset BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsLoopback BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsSpeedSelection13 BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsLowPower BIT(11)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsSpeedSelection6 BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsSpeedSel(_x) (((_x) & 0xf) << 2)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsSpeedSel_of(_x) (((_x) >> 2) & 0xf)
#define     NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsSpeedSel_10PASS_TS_2BASE_TL (1)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsStatus1 - PCS status register 1
    Bits:  7    EthPcsFault(ro) - Fault detected. not available, always 0.
    Bits:  2    EthPcsRcvLinkStatus(ro) - Receive link status. 1=Link up, 0=link down. Latched Low, cleared on read.
    Bits:  1    EthPcsLowPowerAble(ro) - Low power ability. not available, always 0.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1(_x)  (0x00004004 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthPcsFault BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthPcsRcvLinkStatus BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthPcsLowPowerAble BIT(1)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevId0 - PCS Device ID 0
    Bits:  3:0  EthPcsDevId(ro) - Bits 3..0 are used and equal to the segment number of the PCS. All other bits are 0.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId0(_x)   (0x00004008 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId0_EthPcsDevId(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId0_EthPcsDevId_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevId1 - PCS Device ID 1
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId1(_x)   (0x0000400c + (0x400 * ((_x) & 0xf)))
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsSpeedAbility - PCS Speed Ability inherited from global cfg
    Bits:  8    EthPcsSpeed100GCapable(ro) - Only bit 8 is set for 100GBASE-R, inherited from global configuration.
    Bits:  7    EthPcsSpeed40GCapable(ro) - Only bit 7 is set for 40GBASE-R, inherited from global configuration.
    Bits:  1    EthPcsSpeed10PassTs2BaseTlCapable(ro) - Inherited from global configuration.
    Bits:  0    EthPcsSpeed10GCapable(ro) - Only bit 0 is set for 10GBASE-R, inherited from global configuration.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility(_x) (0x00004010 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthPcsSpeed100GCapable BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthPcsSpeed40GCapable BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthPcsSpeed10PassTs2BaseTlCapable BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthPcsSpeed10GCapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevInPkg1 - PCS Devices in package
    Bits:  6    EthPcsTcPresent(ro) - TC Present.
    Bits:  5    EthPcsDteXsPresent(ro) - DTE XS Present.
    Bits:  4    EthPcsPhyXsPresent(ro) - PHY XS Present.
    Bits:  3    EthPcsPCSPresent(ro) - PCS Present.
    Bits:  2    EthPcsWisPresent(ro) - WIS Present.
    Bits:  1    EthPcsPmdPmaPresent(ro) - PMD/PMAPresent.
    Bits:  0    EthPcsClause22RegsPresent(ro) - Clause 22 registers Present.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1(_x) (0x00004014 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsTcPresent BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsDteXsPresent BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsPhyXsPresent BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsPCSPresent BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsWisPresent BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsPmdPmaPresent BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg1_EthPcsClause22RegsPresent BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsDevInPkg2 - PCS Devices in package
    Bits: 15    EthPcsVndrDev2Present(ro) - Vendor specific device 2 Present.
    Bits: 14    EthPcsVndrDev1Present(ro) - Vendor specific device 1 Present.
    Bits: 13    EthPcsClause22ExtPresent(ro) - Clause 22 extension Present.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg2(_x) (0x00004018 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg2_EthPcsVndrDev2Present BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg2_EthPcsVndrDev1Present BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevInPkg2_EthPcsClause22ExtPresent BIT(13)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsCtl2 - PCS control register 2
    Bits:  2:0  EthPcsTypeSelection(ro) - Bits 2:0 are set 101=100GBASE-R, 100=40GBASE-R, or 000=10GBASE-R, inherited from global configuration.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl2(_x)     (0x0000401c + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl2_EthPcsTypeSelection(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl2_EthPcsTypeSelection_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsStatus2 - PCS status register 2
    Bits: 15:14 EthPcsDevPresent(ro) - Device present. 10=device responding at this address.
    Bits:  5    EthPcs100GBaseRCapable(ro) - 100GBASE-R capable.
    Bits:  4    EthPcs40GBaseRCapable(ro) - 40GBASE-R capable.
    Bits:  3    EthPcs10GBaseTCapable(ro) - 10GBASE-T capable.
    Bits:  2    EthPcs10GBaseWCapable(ro) - 10GBASE-W capable.
    Bits:  1    EthPcs10GBaseXCapable(ro) - 10GBASE-X capable.
    Bits:  0    EthPcs10GBaseRCapable(ro) - 10GBASE-R capable.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2(_x)  (0x00004020 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcsDevPresent(_x) (((_x) & 0x3) << 14)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcsDevPresent_of(_x) (((_x) >> 14) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcs100GBaseRCapable BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcs40GBaseRCapable BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcs10GBaseTCapable BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcs10GBaseWCapable BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcs10GBaseXCapable BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthPcs10GBaseRCapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBaseRStatus1 - PCS 10/40/100GBase-R status register 1
    Bits: 12    EthPcsRcvLinkStatus(ro) - Receive link status. 1=Link up, 0=link down.
    Bits:  3    EthPcsPrbs9Able(ro) - 10GBASE-R PRBS9 pattern testing ability.
    Bits:  2    EthPcsPrbs31Able(ro) - 10GBASE-R PRBS31 pattern testing ability.
    Bits:  1    EthPcsHighBer(ro) - High BER. 1=PCS reporting a high BER.
    Bits:  0    EthPcsBlockLocked(ro) - Block lock. 1=PCS locked to received blocks.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1(_x) (0x00004080 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthPcsRcvLinkStatus BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthPcsPrbs9Able BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthPcsPrbs31Able BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthPcsHighBer BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthPcsBlockLocked BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBaseRStatus2 - PCS 10/40/100GBase-R status register 2
    Bits: 15    EthPcsLatchedBlockLock(ro) - Latched block lock. (LatchedLow cleared on read).
    Bits: 14    EthPcsLatchedHighBerr(ro) - Latched high BER. (LatchedHi cleared on read).
    Bits: 13:8  EthPcsBerCounter(ro) - BER counter (non-rollover cleared on read).
    Bits:  7:0  EthPcsErrorBlockCounter(ro) - Errored block counter (non-rollover cleared on read).
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2(_x) (0x00004084 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthPcsLatchedBlockLock BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthPcsLatchedHighBerr BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthPcsBerCounter(_x) (((_x) & 0x3f) << 8)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthPcsBerCounter_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthPcsErrorBlockCounter(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthPcsErrorBlockCounter_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA0 - 10G BASE-R PCS test PAT A seed data 15:0
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA1 - 10G BASE-R PCS test PAT A seed data 31:16
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA2 - 10G BASE-R PCS test PAT A seed data 47:32
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB0 - 10G BASE-R PCS test PAT B seed data 15:0
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB1 - 10G BASE-R PCS test PAT B seed data 31:16
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB2 - 10G BASE-R PCS test PAT B seed data 47:32
    Bits: 15:0  EthPcsTestPatSeedData(rw) - 16 bits of Test Pattern Seed data.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedA0(_x) (0x00004088 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedA1(_x) (0x0000408c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedA2(_x) (0x00004090 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedB0(_x) (0x00004098 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedB1(_x) (0x0000409c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedB2(_x) (0x000040a0 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedData_EthPcsTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedData_EthPcsTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedA3 - 10G BASE-R PCS test PAT A seed data 57:48
  Register: MacEthChPcsSeg[12]_EthChPcs10GSeedB3 - 10G BASE-R PCS test PAT B seed data 57:48
    Bits:  9:0  EthPcsTestPatSeedDataH(rw) - Upper 10 bits of Test Pattern Seed data.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedA3(_x) (0x00004094 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcs10GSeedB3(_x) (0x000040a4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedDataH_EthPcsTestPatSeedDataH(_x) (((_x) & 0x3ff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedDataH_EthPcsTestPatSeedDataH_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBaseRTestCtl - 10G BASE-R PCS test control register
    Bits:  6    EthPcsPrbs9TransmitPatEn(ro) - 10GBASE-R PRBS9 transmit test-pattern enable. NOT AVAILABLE
    Bits:  5    EthPcsPrbs31ReceivePatEn(ro) - 10GBASE-R PRBS31 receive test-pattern enable. NOT AVAILABLE
    Bits:  4    EthPcsPrbs31TransmitPatEn(ro) - 10GBASE-R PRBS31 transmit test-pattern enable. NOT AVAILABLE
    Bits:  3    EthPcsTransmitTestPatEn(rw) - Transmit test-pattern enable. When bits 3:2 are enabled, test pattern according to bits 1:0 are generated for 10GBASE-R, or scrambled idle test pattern are generated for 100GBASE-R and 40GBASE-R.
    Bits:  2    EthPcsReceiveTestPatEn(rw) - Receive test-pattern enable. When bits 3:2 are enabled, test pattern according to bits 1:0 are generated for 10GBASE-R, or scrambled idle test pattern are generated for 100GBASE-R and 40GBASE-R.
    Bits:  1    EthPcsTestPatSel(rw) - Test pattern select. 1=Square wave, 0=pseudo random. Must be '0' for 100GBASE-R and 40GBASE-R.
    Bits:  0    EthPcsDataPatSel(rw) - Data pattern select. 1=Zeros data pattern, 0=LF data. Must be '0' for 100GBASE-R and 40GBASE-R
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl(_x) (0x000040a8 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsPrbs9TransmitPatEn BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsPrbs31ReceivePatEn BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsPrbs31TransmitPatEn BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsTransmitTestPatEn BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsReceiveTestPatEn BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsTestPatSel BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthPcsDataPatSel BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsTestCnt - Test-pattern error counter. (NR)
    Bits: 15:0  EthPcsTestErrCnt(ro) - Test-pattern error counter. (Non-Rollover clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestCnt(_x)  (0x000040ac + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestCnt_EthPcsTestErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestCnt_EthPcsTestErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBerHiOrderCnt - Bits 21:6 of BER counter. (NR)
    Bits: 15:0  EthPcsBerHiOrderCnt(ro) - Bits 21:6 of BER counter. (Non-Rollover clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBerHiOrderCnt(_x) (0x000040b0 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBerHiOrderCnt_EthPcsBerHiOrderCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBerHiOrderCnt_EthPcsBerHiOrderCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsErrBlkHiOrderCnt - Bits 21:8 of errored blocks counter. (NR)
    Bits: 15    EthPcsHiOrderCntPresent(ro) - High order counter present. Always 1, writes ignored.
    Bits: 13:0  EthPcsErrBlkHiOrderCnt(ro) - Bits 21:8 of Errored blocks counter. (Non-Rollover clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt(_x) (0x000040b4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt_EthPcsHiOrderCntPresent BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt_EthPcsErrBlkHiOrderCnt(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt_EthPcsErrBlkHiOrderCnt_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat1 - Lane alignment status
    Bits: 12    EthPcsLaneAlignmentStatus(ro) - Lane alignment status. 1=All Receive lanes locked and aligned.
    Bits:  7:0  EthPcsLaneBlockLock(ro) - Bit 0 = Lane0 lock... bit 7 = Lane 7 lock etc. Note: Bits 7:4 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat1(_x) (0x000040c8 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat1_EthPcsLaneAlignmentStatus BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat1_EthPcsLaneBlockLock(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat1_EthPcsLaneBlockLock_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat2 - Lane alignment status
    Bits: 11:0  EthPcsLaneBlockLock(ro) - Bit 0 = Lane8 lock, ... bit 11 = lane19 lock. Note: Bits 11:0 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat2(_x) (0x000040cc + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat2_EthPcsLaneBlockLock(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat2_EthPcsLaneBlockLock_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat3 - Lane alignment status
    Bits:  7:0  EthPcsLaneAlignMkrLock(ro) - Bit 0 = Lane0 alingment marker lock... bit 7 = Lane 7 alignment marker lock. Note: Bits 7:4 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat3(_x) (0x000040d0 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat3_EthPcsLaneAlignMkrLock(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat3_EthPcsLaneAlignMkrLock_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneAlignStat4 - Lane alignment status
    Bits: 11:0  EthPcsLaneAlignMkrLock(ro) - Bit 0 = Lane8 alignment marker lock, ... bit 11 = lane19 alignment marker lock. Note: Bits 11:0 are reserved for 40GBASE-R.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat4(_x) (0x000040d4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat4_EthPcsLaneAlignMkrLock(_x) (((_x) & 0xfff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneAlignStat4_EthPcsLaneAlignMkrLock_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane0 - BIP error counter lane 0.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane1 - BIP error counter lane 1.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane2 - BIP error counter lane 2.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane3 - BIP error counter lane 3.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane4 - BIP error counter lane 4.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane5 - BIP error counter lane 5.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane6 - BIP error counter lane 6.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane7 - BIP error counter lane 7.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane8 - BIP error counter lane 8.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane9 - BIP error counter lane 9.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane10 - BIP error counter lane 10.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane11 - BIP error counter lane 11.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane12 - BIP error counter lane 12.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane13 - BIP error counter lane 13.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane14 - BIP error counter lane 14.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane15 - BIP error counter lane 15.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane16 - BIP error counter lane 16.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane17 - BIP error counter lane 17.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane18 - BIP error counter lane 18.
  Register: MacEthChPcsSeg[12]_EthChPcsBipErrCntLane19 - BIP error counter lane 19.
    Bits: 15:0  EthPcsBipErrCnt(ro) - BIP error counter lane x (Non-Rollover clear on read).
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane0(_x) (0x00004168 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane1(_x) (0x0000416c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane2(_x) (0x00004170 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane3(_x) (0x00004174 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane4(_x) (0x00004178 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane5(_x) (0x0000417c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane6(_x) (0x00004180 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane7(_x) (0x00004184 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane8(_x) (0x00004188 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane9(_x) (0x0000418c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane10(_x) (0x00004190 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane11(_x) (0x00004194 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane12(_x) (0x00004198 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane13(_x) (0x0000419c + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane14(_x) (0x000041a0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane15(_x) (0x000041a4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane16(_x) (0x000041a8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane17(_x) (0x000041ac + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane18(_x) (0x000041b0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane19(_x) (0x000041b4 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCnt_EthPcsBipErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCnt_EthPcsBipErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane0 - Lane 0 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane1 - Lane 1 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane2 - Lane 2 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane3 - Lane 3 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane4 - Lane 4 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane5 - Lane 5 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane6 - Lane 6 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane7 - Lane 7 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane8 - Lane 8 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane9 - Lane 9 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane10 - Lane 10 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane11 - Lane 11 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane12 - Lane 12 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane13 - Lane 13 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane14 - Lane 14 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane15 - Lane 15 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane16 - Lane 16 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane17 - Lane 17 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane18 - Lane 18 mapping register.
  Register: MacEthChPcsSeg[12]_EthChPcsLaneMapLane19 - Lane 19 mapping register.
    Bits:  4:0  EthPcsLaneMap(ro) - Lane Mapping register for PCS lane x.
*/
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane0(_x) (0x000041b8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane1(_x) (0x000041bc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane2(_x) (0x000041c0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane3(_x) (0x000041c4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane4(_x) (0x000041c8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane5(_x) (0x000041cc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane6(_x) (0x000041d0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane7(_x) (0x000041d4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane8(_x) (0x000041d8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane9(_x) (0x000041dc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane10(_x) (0x000041e0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane11(_x) (0x000041e4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane12(_x) (0x000041e8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane13(_x) (0x000041ec + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane14(_x) (0x000041f0 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane15(_x) (0x000041f4 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane16(_x) (0x000041f8 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane17(_x) (0x000041fc + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane18(_x) (0x00004200 + (0x400 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMapLane19(_x) (0x00004204 + (0x400 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMap_EthPcsLaneMap(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLaneMap_EthPcsLaneMap_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnCtl - KXAN control register
    Bits: 15    EthAnReset(rw) - Self Clearing bit should be set to '1' to reset the auto-negotiation process.
    Bits: 13    EthAnExtNPCtl(rw) - When set to '1', extended next pages are enabled. When set to '0', extended next pages are disabled. When enabled (1) transmission of next page with non-null code field is possible. The next page registers should be initialized and must be set (handshaking) every time a next page is received. When disabled (0) only null next page is transmitted in response to received next pages from link partner. Note: when 0, the registers AN_XNP are not writable (i.e. the 48bit next page message will internally be a null next page, having bit0 and bit13 set to 1, ignoring the values in AN_XNP registers).
    Bits: 12    EthAnAutoNegEnable(rw) - Should be set to '1' to enable the auto-negotiation process. Should be set to '0' (Reset value) to disable the auto-negotiation process.
    Bits:  9    EthAnRestartAutoNeg(rw) - Self Clearing bit should be set to '1' to restart the auto-negotiation process.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnCtl(_x) (0x00007000 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnCtl_EthAnReset BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnCtl_EthAnExtNPCtl BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnCtl_EthAnAutoNegEnable BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnCtl_EthAnRestartAutoNeg BIT(9)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnStatus - KXAN status register
    Bits:  9    EthAnParDetFault(ro) - Error with parallel detection. When the remote device does not support autonegotiation the autonegotiation module function falls back to parallel detection only monitoring the sync indications from the PCS layers. If none or more than one sync is detected the error is asserted.
    Bits:  7    EthAnExtNPStatus(ro) - Set to '1' to indicate that the Extended next pages are enabled.
    Bits:  6    EthAnPageRcvd(ro) - Latch High bit set to '1' to indicate that a page has been received. Set to '0' to indicate that a page has not been received.
    Bits:  5    EthAnComplete(ro) - Set to '1' to indicate that the Auto-Negotiation process is completed. Set to '0' to indicate that the Auto-Negotiation process is not completed.
    Bits:  4    EthAnRemFault(ro) - Latch High bit set to '1' to indicate that a remote fault condition is detected. Set to '0' to indicate that a remote fault condition is not detected.
    Bits:  3    EthAnAbility(ro) - Always set to '1' to indicate that the Core is able to perform Auto-Negotiation.
    Bits:  2    EthAnLinkStatus(ro) - Latched Low bit set to '1' to indicate that the PMA link is up. Set to '0' to indicate that the link is/was down. Note: this is a direct result of activity on the external pin phy_los.
    Bits:  0    EthAnLpAnAbility(ro) - Set to '1' to indicate that the Link Partner is able to perform Auto-Negotiation. Set to '0' to indicate that the Link Partner is not able to perform Auto-Negotiation.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus(_x) (0x00007004 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnParDetFault BIT(9)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnExtNPStatus BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnPageRcvd BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnComplete BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnRemFault BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnAbility BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnLinkStatus BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnStatus_EthAnLpAnAbility BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnAdvAbility0 - Advertised ability bits 15:0
    Bits: 15    EthAnNextPage(rw) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If a device wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnAck(rw) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that a device has successfully received its link partner's Link Codeword.
    Bits: 13    EthAnRemFault(rw) - The Remote Fault bit provides a standard transport mechanism for the transmission of simple fault information.
    Bits: 12:10 EthAnCPauseAbility(rw) - C2 (bit-12) is reserved. a) The C0 bit (bit-10) is the PAUSE bit indicating that the device is capable of providing the symmetric PAUSE functions. b) The C1 bit (bit-11) indicates that asymmetric PAUSE is supported. The value of the PAUSE bit (C0) when the C1 is set indicates the direction the PAUSE frames are supported for flow across the link.
    Bits:  9:5  EthAnENonce(rw) - Echoed Nonce field contains the nonce received from the link partner. When Acknowledge is set to logical zero, the bits in this field shall contain logical zeros. When Acknowledge is set to logical one, the bits in this field shall contain the value received in the Transmitted Nonce field from the link partner.
    Bits:  4:0  EthAnSelector(rw) - The selector field is a constant value defining 802.3ap support. The suggested value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0(_x) (0x00007008 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnNextPage BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnAck BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnRemFault BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnCPauseAbility(_x) (((_x) & 0x7) << 10)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnCPauseAbility_of(_x) (((_x) >> 10) & 0x7)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnENonce(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnENonce_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnSelector(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility0_EthAnSelector_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnAdvAbility1 - Advertised ability bits 31:16
    Bits: 15:11 EthAnTechAbleReserved(rw) - Advertised ability Reserved bits.
    Bits: 10    EthAnTechAble100GBaseCr10(rw) - Advertised ability 100GBASE-CR10.
    Bits:  9    EthAnTechAble40GBaseCr4(rw) - Advertised ability 40GBASE-CR4.
    Bits:  8    EthAnTechAble40GBaseKr4(rw) - Advertised ability 40GBASE-KR4.
    Bits:  7    EthAnTechAble10GBaseKr(rw) - Advertised ability 10GBASE-KR.
    Bits:  6    EthAnTechAble10GBaseKx4(rw) - Advertised ability 10GBASE-KX4. (NOT SUPPORT DO NOT SET)
    Bits:  5    EthAnTechAble1GBaseKx(rw) - Advertised ability 1GBASE-KX.
    Bits:  4:0  EthAnAdvTNonce(rw) - Transmitted Nonce field contains a random or pseudo-random number. A new value shall be generated for each entry to the Ability Detect state.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1(_x) (0x0000700c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAbleReserved(_x) (((_x) & 0x1f) << 11)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAbleReserved_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAble100GBaseCr10 BIT(10)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAble40GBaseCr4 BIT(9)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAble40GBaseKr4 BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAble10GBaseKr BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAble10GBaseKx4 BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnTechAble1GBaseKx BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnAdvTNonce(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility1_EthAnAdvTNonce_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnAdvAbility2 - Advertised ability bits 47:32
    Bits: 15    EthAnFecRequested(rw) - FEC capability F1: FEC requested.
    Bits: 14    EthAnFecAbility(rw) - FEC capability F0: FEC ability.
    Bits: 13:0  EthAnTechAbilityA24A11(rw) - Bit-13 to Bit-0 are reserved.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility2(_x) (0x00007010 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility2_EthAnFecRequested BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility2_EthAnFecAbility BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility2_EthAnTechAbilityA24A11(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnAdvAbility2_EthAnTechAbilityA24A11_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnRemAbility0 - Received ability bits 15:0
    Bits: 15    EthAnNextPage(ro) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If a device wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnAck(ro) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that a device has successfully received its link partner's Link Codeword.
    Bits: 13    EthAnRemFault(ro) - The Remote Fault bit provides a standard transport mechanism for the transmission of simple fault information.
    Bits: 12:10 EthAnCPauseAbility(ro) - C2 (bit-12) is reserved. a) The C0 bit (bit-10) is the PAUSE bit indicating that the device is capable of providing the symmetric PAUSE functions. b) The C1 bit (bit-11) indicates that asymmetric PAUSE is supported. The value of the PAUSE bit (C0) when the C1 is set indicates the direction the PAUSE frames are supported for flow across the link.
    Bits:  9:5  EthAnENonce(ro) - Echoed Nonce field contains the nonce received from the link partner. When Acknowledge is set to logical zero, the bits in this field shall contain logical zeros. When Acknowledge is set to logical one, the bits in this field shall contain the value received in the Transmitted Nonce field from the link partner.
    Bits:  4:0  EthAnSelector(ro) - The selector field is a constant value defining 802.3ap support. The suggested value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0(_x) (0x00007014 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnNextPage BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnAck BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnRemFault BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnCPauseAbility(_x) (((_x) & 0x7) << 10)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnCPauseAbility_of(_x) (((_x) >> 10) & 0x7)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnENonce(_x) (((_x) & 0x1f) << 5)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnENonce_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnSelector(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility0_EthAnSelector_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnRemAbility1 - Received ability bits 31:16
    Bits: 10    EthAnTechAble100GBaseCr10(ro) - Remote ability 100GBASE-CR10.
    Bits:  9    EthAnTechAble40GBaseCr4(ro) - Remote ability 40GBASE-CR4.
    Bits:  8    EthAnTechAble40GBaseKr4(ro) - Remote ability 40GBASE-KR4.
    Bits:  7    EthAnTechAble10GBaseKr(ro) - Remote ability 10GBASE-KR.
    Bits:  6    EthAnTechAble10GBaseKx4(ro) - Remote ability 10GBASE-KX4. (NOT SUPPORT DO NOT SET)
    Bits:  5    EthAnTechAble1GBaseKx(ro) - Remote ability 1GBASE-KX.
    Bits:  4:0  EthAnRemTNonce(ro) - Transmitted Nonce field contains a random or pseudo-random number. A new value shall be generated for each entry to the Ability Detect state.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1(_x) (0x00007018 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnTechAble100GBaseCr10 BIT(10)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnTechAble40GBaseCr4 BIT(9)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnTechAble40GBaseKr4 BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnTechAble10GBaseKr BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnTechAble10GBaseKx4 BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnTechAble1GBaseKx BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnRemTNonce(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility1_EthAnRemTNonce_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnRemAbility2 - Received ability bits 47:32
    Bits: 15    EthAnFecRequested(ro) - FEC capability F1: FEC requested.
    Bits: 14    EthAnFecAbility(ro) - FEC capability F0: FEC ability.
    Bits: 13:0  EthAnTechAbilityA24A11(ro) - Bit-13 to Bit-0 are reserved.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility2(_x) (0x0000701c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility2_EthAnFecRequested BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility2_EthAnFecAbility BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility2_EthAnTechAbilityA24A11(_x) (((_x) & 0x3fff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnRemAbility2_EthAnTechAbilityA24A11_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnKxAnMsCnt - Upper 16 bits of 18-bit 1ms counter.
    Bits: 15:0  EthAnMsCnt(rw) - Number of 6.4ns steps required for counting 1ms. Upper 16 bits of 18-bit counter value. The lower 2 bits are fixed to '01' internally. Defaults to 0x9896 representing a timer value of 156249, which defines 1 millisecond
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnMsCnt(_x) (0x00007020 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnMsCnt_EthAnMsCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnKxAnMsCnt_EthAnMsCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnXnp0 - Autoneg Next page ability word bits 15:0.
    Bits: 15    EthAnXnpNextPage(rw) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If a device wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnXnpAck(rw) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that a device has successfully received its link partner's Link Codeword.
    Bits: 13    EthAnXnpMP(rw) - Message page bit. There are two types of Next page word. Message page=(1)/Unformatted page=(0). For the Message Next Pages, the MP bit shall be set to logical one and for the Unformatted Next Pages, the MP bit shall be set to logical zero.
    Bits: 12    EthAnXnpAck2(rw) - Acknowledge 2 (Ack2) is used to indicate that the receiver is able to act on the information (or perform the task) defined in the message.
    Bits: 11    EthAnXnpToggleBit(rw) - Flag to keep track of the state of the local device's Toggle bit. Initial value is taken from base page.
    Bits: 10:0  EthAnXnpMU(rw) - These bits can be used as Message code field or Unformatted code field. When bit-13 is logical one, these bits represent message code field. Predefined message code field should be used as specified in the standard 802.3ap. For the null message code the value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0(_x) (0x00007024 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpNextPage BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpAck BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpMP BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpAck2 BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpToggleBit BIT(11)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpMU(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp0_EthAnXnpMU_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnXnp1 - Autoneg Next page ability word bits 31:16.
    Bits: 15:0  EthAnXnpUnformatted(rw) - Unformatted code field. Message code defines how the Unformatted codes will be interpreted.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp1(_x) (0x00007028 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp1_EthAnXnpUnformatted(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp1_EthAnXnpUnformatted_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnXnp2 - Autoneg Next page ability word bits 47:32.
    Bits: 15:0  EthAnXnpUnformatted(rw) - Unformatted code field. Message code defines how the Unformatted codes will be interpreted.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp2(_x) (0x0000702c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp2_EthAnXnpUnformatted(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnXnp2_EthAnXnpUnformatted_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnLpXnp0 - Received Link partner Next page ability bits 15:0.
    Bits: 15    EthAnLpXnpNextPage(ro) - If the device does not have any Next Pages to send, the NP bit shall be set to logical zero. If the Link Partner wishes to engage in Next Page exchange, it shall set the NP bit to logical one.
    Bits: 14    EthAnLpXnpAck(ro) - Acknowledge (Ack) is used by the auto-negotiation function to indicate that the link partner has successfully received the Link Codeword.
    Bits: 13    EthAnLpXnpMP(ro) - Message page bit. There are two types of Next page word. Message page=(1)/Unformatted page=(0). For the Message Next Pages, the MP bit shall be set to logical one and for the Unformatted Next Pages, the MP bit shall be set to logical zero.
    Bits: 12    EthAnLpXnpAck2(ro) - Acknowledge 2 (Ack2) is used to indicate that the Link Partner receiver is able to act on the information (or perform the task) defined in the message.
    Bits: 11    EthAnLpXnpToggleBit(ro) - Flag to keep track of the state of the Link Partner device's Toggle bit.
    Bits: 10:0  EthAnLpXnpMU(ro) - These bits can be used as Message code field or Unformatted code field. When bit-13 is logical one, these bits represent message code field. Predefined message code field should be used as specified in the standard 802.3ap. For the null message code the value is 0x01.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0(_x) (0x00007030 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpNextPage BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpAck BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpMP BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpAck2 BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpToggleBit BIT(11)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpMU(_x) (((_x) & 0x7ff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp0_EthAnLpXnpMU_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnLpXnp1 - Received Link partner Next page ability bits 31:16.
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnLpXnp2 - Received Link partner Next page ability bits 47:32.
    Bits: 15:0  EthAnLPXnpUnformatted(ro) - Unformatted code field. Message code defines how the Unformatted codes will be interpreted.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp1(_x) (0x00007034 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp2(_x) (0x00007038 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp12_EthAnLPXnpUnformatted(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnLpXnp12_EthAnLPXnpUnformatted_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAutoNeg_MacEthAutoNegSeg[12]_EthAnBpEthStatus - Reflects the currently selected operating mode.
    Bits:  8    EthAn100GCr10(ro) - 100G CR10.
    Bits:  6    EthAn40GCr4(ro) - 40G CR4.
    Bits:  5    EthAn40GKr4(ro) - 40G KR4.
    Bits:  4    EthAnFec(ro) - FEC.
    Bits:  3    EthAn10GKr(ro) - 10G KR.
    Bits:  2    EthAn10GKx4(ro) - 10G KX4. NOT SUPPORTED
    Bits:  1    EthAn1GKx(ro) - 1G KX.
    Bits:  0    EthAlways1(ro) - Always '1'.
*/
#define NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus(_x) (0x0000703c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAn100GCr10 BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAn40GCr4 BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAn40GKr4 BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAnFec BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAn10GKr BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAn10GKx4 BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAn1GKx BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthAutoNeg_MacEthAutoNegSeg_EthAnBpEthStatus_EthAlways1 BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRCtl - Base-R PMD control.
    Bits:  1    EthFecTrainingEnable(rw) - Should be set to '1' to enable the Base-R startup protocol. Should be set to '0' (Reset value) to disable the Base-R startup protocol.
    Bits:  0    EthFecRestartTraining(rw) - Self Clearing Bit, should be set to '1' to restart the Base-R startup protocol. When '0' (Reset value) normal operation is enabled.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRCtl(_x) (0x00007400 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRCtl_EthFecTrainingEnable BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRCtl_EthFecRestartTraining BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRStatus - Base-R PMD status.
    Bits: 15    EthFecSignalDetection(ro) - When set to '1', indicates that the training process is complete.
    Bits:  3    EthFecTrainingFail(ro) - When set to '0', indicates that Training failure has not been detected. When set to '1', indicates that Training failure has been detected.
    Bits:  2    EthFecStartUpStatus(ro) - When set to '0', indicates that the startup protocol is completed. When set to '1', indicates that the startup protocol is in progress.
    Bits:  1    EthFecFrameLock(ro) - When set to '0', indicates that Training frame delineation is not detected. When set to '1', indicates that Training frame delineation is detected.
    Bits:  0    EthFecRcvrStatus(rw) - When set to '0', indicates that the Receiver training is proceeding. When set to '1' by the application, indicates that the Receiver is trained and is ready to receive data. Note: this bit is writable, which differs from the corresponding notion in IEEE 802.3 Clause 45.2.1.77 for MMD register 1.151) as the application has to decide when the local device is trained. Writing this bit sets the mr_trained variable allowing the training statemachine to proceed (see IEEE 802.3 Clause 72.6.10.3.1).
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRStatus(_x) (0x00007404 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRStatus_EthFecSignalDetection BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRStatus_EthFecTrainingFail BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRStatus_EthFecStartUpStatus BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRStatus_EthFecFrameLock BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRStatus_EthFecRcvrStatus BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLpCoef - Base-R LP coefficient update.
    Bits: 13    EthFecLpPreset(ro) - Should be set '1' to preset the transmitter coefficients, should be to '0' to enable normal operation.
    Bits: 12    EthFecLpInitialize(ro) - Should be set '1' to initialize the transmitter coefficients, should be to '0' to enable normal operation.
    Bits:  5:4  EthFecLpCoefP1Update(ro) - Coef (+1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  3:2  EthFecLpCoef0Update(ro) - Coef (0) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  1:0  EthFecLpCoefM1Update(ro) - Coef (-1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef(_x) (0x00007408 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpPreset BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpInitialize BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpCoefP1Update(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpCoefP1Update_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpCoef0Update(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpCoef0Update_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpCoefM1Update(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpCoef_EthFecLpCoefM1Update_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLpStatus - Base-R LP status report.
    Bits: 15    EthFecLpRcvrReady(ro) - Set to '1' when the LP receiver has determined that training is complete and is prepared to receive data. Set to '0' when the LP receiver is requesting that training continues.
    Bits:  5:4  EthFecLpCoefP1Status(ro) - Coef (+1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  3:2  EthFecLpCoef0Status(ro) - Coef (0) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  1:0  EthFecLpCoefM1Status(ro) - Coef (-1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus(_x) (0x0000740c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpRcvrReady BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpCoefP1Status(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpCoefP1Status_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpCoef0Status(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpCoef0Status_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpCoefM1Status(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLpStatus_EthFecLpCoefM1Status_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLdCoef - Base-R LD coefficient update.
    Bits: 13    EthFecLdPreset(rw) - Set '1' to preset the device transmitter coefficients, set to '0' to enable normal operation.
    Bits: 12    EthFecLdInitialize(rw) - Set '1' to initialize the device transmitter coefficients, set to '0' to enable normal operation.
    Bits:  5:4  EthFecLdCoefP1Update(rw) - Coef (+1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  3:2  EthFecLdCoef0Update(rw) - Coef (0) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
    Bits:  1:0  EthFecLdCoefM1Update(rw) - Coef (-1) Update: 11 = reserved, 01 = increment, 10 = decrement, 00 = hold.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef(_x) (0x00007410 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdPreset BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdInitialize BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdCoefP1Update(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdCoefP1Update_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdCoef0Update(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdCoef0Update_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdCoefM1Update(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdCoef_EthFecLdCoefM1Update_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecKRLdStatus - Base-R LD status report.
    Bits: 15    EthFecLdRcvrReady(rw) - Set to '1' when the LD receiver has determined that training is complete and is prepared to receive data. Set to '0' when the LD receiver is requesting that training continues.
    Bits:  5:4  EthFecLdCoefP1Status(rw) - Coef (+1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  3:2  EthFecLdCoef0Status(rw) - Coef (0) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
    Bits:  1:0  EthFecLdCoefM1Status(rw) - Coef (-1) Status: 11 = maximum, 01 = updated, 10 = minimum, 00 = not updated.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus(_x) (0x00007414 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdRcvrReady BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdCoefP1Status(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdCoefP1Status_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdCoef0Status(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdCoef0Status_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdCoefM1Status(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecKRLdStatus_EthFecLdCoefM1Status_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecAbility - Base-R FEC ability.
    Bits:  1    EthFecErrIndicationAble(ro) - Set to '1' when the Core implements the FEC functions to indicate that the FEC is able to report FEC decoding errors to the PCS Layer. Set to '0' when the Core does not implement the FEC functions.
    Bits:  0    EthFecAble(ro) - Set to '1' when the Core implements the FEC functions, set to '0' when the Core does not implement the FEC functions.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecAbility(_x) (0x00007418 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecAbility_EthFecErrIndicationAble BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecAbility_EthFecAble BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecControl - Base-R FEC control.
    Bits:  1    EthFecErrIndicationEnble(rw) - Should be set to '1' to configure the FEC decoder to indicate errors to the PCS layer. Should be set to '0' (Reset value) to configure the FEC decoder to not indicate errors to the PCS layer.
    Bits:  0    EthFecEnable(rw) - Should be set to '1' to force the Core FEC functions. Should be set to '0' (Reset value) to control the Core FEC functions by the autonegotiation core.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecControl(_x) (0x0000741c + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecControl_EthFecErrIndicationEnble BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecControl_EthFecEnable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecStatus - Base-R FEC status.
    Bits:  1    EthFecLockedOdd(ro) - Set to '1' when the FEC decoder has locked on the block boundary on virtual lane 1. Set to '0' otherwise. Note: This bit is only valid in 100G mode of operation.
    Bits:  0    EthFecLocked(ro) - Set to '1' when the FEC decoder has locked on the block boundary. Set to '0' otherwise. Note: In 100G mode of operation, this bit refers to virtual lane 0.
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecStatus(_x) (0x00007420 + (0x40 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecStatus_EthFecLockedOdd BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecStatus_EthFecLocked BIT(0)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecCErrBlkCntLo - Base-R FEC Corrected block counter 15:0.
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecNcErrBlkCntLo - Base-R FEC Uncorrected block counter 15:0.
  Register: MacEthFecLT_EthFecCErrCntLoVl1 - Base-R FEC Corrected block counter 15:00. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl3 - Base-R FEC Corrected block counter 15:00. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl5 - Base-R FEC Corrected block counter 15:00. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl7 - Base-R FEC Corrected block counter 15:00. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl9 - Base-R FEC Corrected block counter 15:00. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl11 - Base-R FEC Corrected block counter 15:00. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl13 - Base-R FEC Corrected block counter 15:00. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl15 - Base-R FEC Corrected block counter 15:00. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl17 - Base-R FEC Corrected block counter 15:00. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecCErrCntLoVl19 - Base-R FEC Corrected block counter 15:00. virtual lane 19 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl1 - Base-R FEC UnCorrected block counter 15:00. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl3 - Base-R FEC UnCorrected block counter 15:00. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl5 - Base-R FEC UnCorrected block counter 15:00. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl7 - Base-R FEC UnCorrected block counter 15:00. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl9 - Base-R FEC UnCorrected block counter 15:00. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl11 - Base-R FEC UnCorrected block counter 15:00. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl13 - Base-R FEC UnCorrected block counter 15:00. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl15 - Base-R FEC UnCorrected block counter 15:00. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl17 - Base-R FEC UnCorrected block counter 15:00. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecNcErrCntLoVl19 - Base-R FEC UnCorrected block counter 15:00. virtual lane 19 (100G)
    Bits: 15:0  EthFecBlocksCountLo(ro) - Bits 15:0 of the register are bits 15:0 of the counter.(clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecCErrBlkCntLo(_x) (0x00007424 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecNcErrBlkCntLo(_x) (0x0000742c + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl1      0x00007700
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl3      0x00007708
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl5      0x00007710
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl7      0x00007718
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl9      0x00007720
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl11     0x00007728
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl13     0x00007730
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl15     0x00007738
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl17     0x00007740
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntLoVl19     0x00007748
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl1     0x00007780
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl3     0x00007788
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl5     0x00007790
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl7     0x00007798
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl9     0x000077a0
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl11    0x000077a8
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl13    0x000077b0
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl15    0x000077b8
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl17    0x000077c0
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntLoVl19    0x000077c8
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecBlkCntLo_EthFecBlocksCountLo(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecBlkCntLo_EthFecBlocksCountLo_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecCErrBlkCntHi - Base-R FEC Corrected block counter 31:16.
  Register: MacEthFecLT_MacEthFecLTSeg[12]_EthFecNcErrBlkCntHi - Base-R FEC Uncorrected block counter 31:16.
  Register: MacEthFecLT_EthFecCErrCntHiVl1 - Base-R FEC Corrected block counter 31:16. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl3 - Base-R FEC Corrected block counter 31:16. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl5 - Base-R FEC Corrected block counter 31:16. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl7 - Base-R FEC Corrected block counter 31:16. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl9 - Base-R FEC Corrected block counter 31:16. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl11 - Base-R FEC Corrected block counter 31:16. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl13 - Base-R FEC Corrected block counter 31:16. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl15 - Base-R FEC Corrected block counter 31:16. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl17 - Base-R FEC Corrected block counter 31:16. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecCErrCntHiVl19 - Base-R FEC Corrected block counter 31:16. virtual lane 19 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl1 - Base-R FEC UnCorrected block counter 31:16. virtual lane 1 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl3 - Base-R FEC UnCorrected block counter 31:16. virtual lane 3 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl5 - Base-R FEC UnCorrected block counter 31:16. virtual lane 5 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl7 - Base-R FEC UnCorrected block counter 31:16. virtual lane 7 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl9 - Base-R FEC UnCorrected block counter 31:16. virtual lane 9 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl11 - Base-R FEC UnCorrected block counter 31:16. virtual lane 11 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl13 - Base-R FEC UnCorrected block counter 31:16. virtual lane 13 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl15 - Base-R FEC UnCorrected block counter 31:16. virtual lane 15 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl17 - Base-R FEC UnCorrected block counter 31:16. virtual lane 17 (100G)
  Register: MacEthFecLT_EthFecNcErrCntHiVl19 - Base-R FEC UnCorrected block counter 31:16. virtual lane 19 (100G)
    Bits: 15:0  EthFecBlocksCountHi(ro) - Bits 15:0 of the register are bits 31:16 of the counter.(clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecCErrBlkCntHi(_x) (0x00007428 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecNcErrBlkCntHi(_x) (0x00007430 + (0x40 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl1      0x00007704
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl3      0x0000770c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl5      0x00007714
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl7      0x0000771c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl9      0x00007724
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl11     0x0000772c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl13     0x00007734
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl15     0x0000773c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl17     0x00007744
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecCErrCntHiVl19     0x0000774c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl1     0x00007784
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl3     0x0000778c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl5     0x00007794
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl7     0x0000779c
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl9     0x000077a4
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl11    0x000077ac
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl13    0x000077b4
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl15    0x000077bc
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl17    0x000077c4
#define NFP_NBI_MACX_ETH_MacEthFecLT_EthFecNcErrCntHiVl19    0x000077cc
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecBlkCntHi_EthFecBlocksCountHi(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthFecLT_MacEthFecLTSeg_EthFecBlkCntHi_EthFecBlocksCountHi_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthPrbs_MacEthPrbsEnable - MAC0 PRBS enables
    Bits: 23    EthPrbs9EnSeg11(rw) - Enable PRBS9 generator on lane 11.
    Bits: 22    EthPrbs9EnSeg10(rw) - Enable PRBS9 generator on lane 10.
    Bits: 21    EthPrbs9EnSeg9(rw) - Enable PRBS9 generator on lane 9.
    Bits: 20    EthPrbs9EnSeg8(rw) - Enable PRBS9 generator on lane 8.
    Bits: 19    EthPrbs9EnSeg7(rw) - Enable PRBS9 generator on lane 7.
    Bits: 18    EthPrbs9EnSeg6(rw) - Enable PRBS9 generator on lane 6.
    Bits: 17    EthPrbs9EnSeg5(rw) - Enable PRBS9 generator on lane 5.
    Bits: 16    EthPrbs9EnSeg4(rw) - Enable PRBS9 generator on lane 4.
    Bits: 15    EthPrbs9EnSeg3(rw) - Enable PRBS9 generator on lane 3.
    Bits: 14    EthPrbs9EnSeg2(rw) - Enable PRBS9 generator on lane 2.
    Bits: 13    EthPrbs9EnSeg1(rw) - Enable PRBS9 generator on lane 1.
    Bits: 12    EthPrbs9EnSeg0(rw) - Enable PRBS9 generator on lane 0.
    Bits: 11    EthPrbs31EnSeg11(rw) - Enable PRBS31 generator on lane 11.
    Bits: 10    EthPrbs31EnSeg10(rw) - Enable PRBS31 generator on lane 10.
    Bits:  9    EthPrbs31EnSeg9(rw) - Enable PRBS31 generator on lane 9.
    Bits:  8    EthPrbs31EnSeg8(rw) - Enable PRBS31 generator on lane 8.
    Bits:  7    EthPrbs31EnSeg7(rw) - Enable PRBS31 generator on lane 7.
    Bits:  6    EthPrbs31EnSeg6(rw) - Enable PRBS31 generator on lane 6.
    Bits:  5    EthPrbs31EnSeg5(rw) - Enable PRBS31 generator on lane 5.
    Bits:  4    EthPrbs31EnSeg4(rw) - Enable PRBS31 generator on lane 4.
    Bits:  3    EthPrbs31EnSeg3(rw) - Enable PRBS31 generator on lane 3.
    Bits:  2    EthPrbs31EnSeg2(rw) - Enable PRBS31 generator on lane 2.
    Bits:  1    EthPrbs31EnSeg1(rw) - Enable PRBS31 generator on lane 1.
    Bits:  0    EthPrbs31EnSeg0(rw) - Enable PRBS31 generator on lane 0.
*/
#define NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable         0x00007800
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg11 BIT(23)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg10 BIT(22)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg9 BIT(21)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg8 BIT(20)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg7 BIT(19)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg6 BIT(18)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg5 BIT(17)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg4 BIT(16)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg3 BIT(15)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg2 BIT(14)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg1 BIT(13)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs9EnSeg0 BIT(12)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg11 BIT(11)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg10 BIT(10)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg9 BIT(9)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg8 BIT(8)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg7 BIT(7)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg6 BIT(6)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg5 BIT(5)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg4 BIT(4)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg3 BIT(3)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg2 BIT(2)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg1 BIT(1)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbsEnable_EthPrbs31EnSeg0 BIT(0)
/*----------------------------------------------------------------
  Register: MacEthPrbs_MacEthPrbs31ErrCntSeg[12] - MACX PRBS31 Err count 15:0
  Register: MacEthPrbs_MacEthPrbs9ErrCntSeg[12] - MACX PRBS9 Err count 15:0
    Bits: 15:0  EthPrbsErrCnt(ro) - Bits 15:0 of the register are the count.(clear on read)
*/
#define NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbs31ErrCntSeg(_x) (0x00007804 + (0x4 * ((_x) & 0xf)))
#define NFP_NBI_MACX_ETH_MacEthPrbs_MacEthPrbs9ErrCntSeg(_x) (0x00007834 + (0x4 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_ETH_MacEthPrbs_EthPrbsErrCnt_EthPrbsErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP_NBI_MACX_ETH_MacEthPrbs_EthPrbsErrCnt_EthPrbsErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacCoreGasketReg[10] - Mac Gasket Memory Control Register
    Bits: 14    MacMemCtrlBC2(rw) - Mac Cores Memory Control BC2.
    Bits: 13    MacMemCtrlBC1(rw) - Mac Cores Memory Control BC1.
    Bits: 12    MacMemCtrlTest1B(rw) - Mac Cores Memory Control TEST1B.
    Bits: 11    MacMemCtrlTest1A(rw) - Mac Cores Memory Control TEST1A/TEST1.
    Bits: 10    MacMemCtrlRMEB(rw) - Mac Cores Memory Control RMEB/RME.
    Bits:  9:8  MacMemCtrlRA(rw) - Mac Cores Memory Control RA.
    Bits:  7:4  MacMemCtrlRMB(rw) - Mac Cores Memory Control RMB.
    Bits:  3:0  MacMemCtrlRMA(rw) - Mac Cores Memory Control RMA/RM.
*/
#define NFP_NBI_MACX_MEMCTL_MacCoreGasketReg(_x)             (0x00000000 + (0x4 * ((_x) & 0xf)))
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlBC2 BIT(14)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlBC1 BIT(13)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlTest1B BIT(12)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlTest1A BIT(11)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMEB BIT(10)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRA(_x) (((_x) & 0x3) << 8)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRA_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMB(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMB_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMA(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMA_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacCoresPowerCsrs[4] - Mac Memory control Power ShutDown CSRs
    Bits: 31:0  MacPowerCsrs(rw) - 32 bit Memory Control Power CSRs. Setting bit to 1 Shuts down the memory.
*/
#define NFP_NBI_MACX_MEMCTL_MacCoresPowerCsrs(_x)            (0x00000200 + (0x4 * ((_x) & 0x3)))
#define   NFP_NBI_MACX_MEMCTL_MacCoresPowerCsrs_MacPowerCsrs(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_NBI_MACX_MEMCTL_MacCoresPowerCsrs_MacPowerCsrs_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
    Bits:  3:0  AprobeTxAddr(rw) - Address for TX lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMAAprobeTxAddr(_x) (0x00000000 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr 0x0000e000
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeTxAddr_AprobeTxAddr(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeTxAddr_AprobeTxAddr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
    Bits:  7:3  AprobeRxAddr(rw) - Address for RX lane aprobe data.
    Bits:  2:0  AprobeRegRxTxAddr(rw) - Address for RX and TX regulator lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMAAprobeRxAddr(_x) (0x00000001 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr 0x0000e001
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRxAddr(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRxAddr_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRegRxTxAddr(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRegRxTxAddr_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
    Bits:  3    RstLanePcsSoftTx(rw) - TX lane soft reset. Active Low
    Bits:  2    RstLanePcsSoftRx(rw) - RX lane soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstBypassEn(rw) - RX and TX lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    Cmnctlporhardrstbypass(rw) - RX and TX lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxLanecontrol(_x) (0x00000002 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol 0x0000e002
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_RstLanePcsSoftTx BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_RstLanePcsSoftRx BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_CmnCtlPorHardRstBypassEn BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_Cmnctlporhardrstbypass BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
    Bits:  4:0  LanePcsPstateRx(rw) - Rx Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALanePstateRx(_x) (0x00000003 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx 0x0000e003
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateRx_LanePcsPstateRx(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateRx_LanePcsPstateRx_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
    Bits:  4:0  LanePcsPstateTx(rw) - TX Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALanePstateTx(_x) (0x00000004 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx 0x0000e004
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateTx_LanePcsPstateTx(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateTx_LanePcsPstateTx_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
    Bits:  6:4  PcsTxDataWidth(rw) - Defines TX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
    Bits:  2:0  PcsRxDataWidth(rw) - Defines RX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMADataWidth(_x) (0x00000005 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth 0x0000e005
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsTxDataWidth(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsTxDataWidth_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsRxDataWidth(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsRxDataWidth_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
    Bits:  6:4  PcsTxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
    Bits:  2:0  PcsRxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneControl(_x) (0x00000006 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl 0x0000e006
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsTxDivRate(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsTxDivRate_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsRxDivRate(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsRxDivRate_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
    Bits:  7    LBParRx2TxTimedEn(rw) - PMA Parallel RX-to-TX loop-back enable. Parallel loopback from the PMA receive lane 20-bit data ports, to the transmit lane 20-bit data ports. 0 = Disables loopback. 1 = Loops back the 20-bit receive data port to the transmitter.
    Bits:  6    LBTx2RxIoTimedEn(rw) - PMA TX-to-RX I/O serial loop-back enable (loop back done directly from TX to RX pads). Serial IO loopback from the transmit lane IO pins to the receive lane IO pins: 0 = Disables loopback. 1 = Loops back the driver IO signal to the RX IO pins.
    Bits:  5    LBTx2RxBufTimedEn(rw) - PMA TX-to-RX buffered serial loop-back enable (bypasses IO Driver). Serial transmit to receive buffered loopback: 0 = Disables loopback. 1 = Loops back the TX serializer output into the CDR.
    Bits:  4    LBRx2TxUntimedEn(rw) - PMA serial RX-to-TX loop-back enable (from AGC to IO Driver). Serial receive to transmit loopback: 0 = Disables loopback. 1 = Transmits the untimed, partial equalized RX signal out the transmit IO pins.
    Bits:  3    LBPllFbClk2CdrRefClkEn(rw) - PMA PLL feedback clock-to-CDR reference clock loopback enable.
    Bits:  2    LbCdrDivClk2TxEn(rw) - PMA CDR divided-recovered-clock loopback enable for internal GPON mode..
    Bits:  1    LBCdrDivClk2ExtEn(rw) - PMA CDR divided-recovered-clock loopback enable for external clean up GPON mode.
    Bits:  0    LBCdrClk2TxEn(rw) - PMA CDR recovered-clock loopback enable; asserted when PARRX2TXTIMEDEN is 1. Transmit bit clock select: 0 = Selects synthesizer bit clock for transmit. 1 = Selects CDR clock for transmit
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist(_x) (0x00000007 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist 0x0000e007
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBParRx2TxTimedEn BIT(7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBTx2RxIoTimedEn BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBTx2RxBufTimedEn BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBRx2TxUntimedEn BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBPllFbClk2CdrRefClkEn BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LbCdrDivClk2TxEn BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBCdrDivClk2ExtEn BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBCdrClk2TxEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
    Bits:  4    RxBistRxLocked(rw) - RX BIST locked indicator. '0' Indicates BIST is not word locked and error comparisons have not begun yet. '1' Indicates BIST is word locked and error comparisons have begun.
    Bits:  3    RxBistErrCntOvf(rw) - RX BIST error count overflow indicator. Indicates an overflow in the number of byte errors identified during the course of the test. This word is stable to sample when *_DONE_* signal has asserted.
    Bits:  2    RxBistDone(rw) - RX BIST completion: '0' Indicates test is not completed. '1' Indicates the test has completed, and will remain high until a new test is initiated.
    Bits:  1    PcsTxBistEn(rw) - Transmit lane BIST enable.
    Bits:  0    PcsRxBistEn(rw) - Recieve lane BIST enable.Active High
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist2(_x) (0x00000008 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 0x0000e008
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistRxLocked BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistErrCntOvf BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistDone BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_PcsTxBistEn BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_PcsRxBistEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
    Bits:  7:0  RxBistErrCount(rw) - RX BIST error count word. Indicates the number of byte errors identified during the course of the test.This word is stable to sample when *_DONE_* signal has asserted.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist3Reg(_x) (0x00000009 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist3(_x) (0x0000000a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg 0x0000e009
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 0x0000e00a
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST3_RxBistErrCount(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST3_RxBistErrCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
    Bits:  5    RXSigdetCdrLock2Data(rw) - RX CDR Lock to Data status indicator 0 - CDR is locked to reference clock 1 - CDR is locked to data.
    Bits:  4    RxPpmLockStatus(rw) - RX lane PLL lock status. 1 = CDR VCO is locked to reference clock.
    Bits:  3    PcsOutTxStatus(rw) - TX lane state transition status. Indicates the TX has completed a requested state transition. 0 = TX Lane has not completed its state change. 1 = TX Lane has completed its state change.
    Bits:  2    PcsOutTxReady(rw) - TX lane ready status signal: 0 = TX Lane is not ready for data transmission. 1 = TX Lane is ready for data transmission.
    Bits:  1    PcsOutRxStatus(rw) - RX lane state transition status. Indicates the RX has completed a requested state transition. 0 = RX Lane has not completed its state change. 1 = RX Lane has completed its state change.
    Bits:  0    PcsOutRxReady(rw) - RX lane ready status signal. 0 = RX Lane is not ready for data transmission. 1 = RX Lane is ready for data transmission.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneStatus(_x) (0x0000000b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus 0x0000e00b
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_RXSigdetCdrLock2Data BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_RxPpmLockStatus BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutTxStatus BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutTxReady BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutRxStatus BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutRxReady BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyIclk(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration(_x) (0x0000000c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration 0x0000e00c
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCal_RXCalDutyIclk(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCal_RXCalDutyIclk_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyQclk(rw) - RX lane QCLK duty calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration2(_x) (0x0000000d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 0x0000e00d
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCalq_RXCalDutyQclk(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCalq_RXCalDutyQclk_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData0(rw) - RX lane DATA0 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration3(_x) (0x0000000e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 0x0000e00e
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal3_RXCalOffsetData0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal3_RXCalOffsetData0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData1(rw) - RX lane DATA1 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration4(_x) (0x0000000f + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 0x0000e00f
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal31_RXCalOffsetData1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal31_RXCalOffsetData1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge0(rw) - RX lane EDGE0 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration5(_x) (0x00000010 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 0x0000e010
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE0_RXCalOffsetEdge0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE0_RXCalOffsetEdge0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge1(rw) - RX lane EDGE1 comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration6(_x) (0x00000011 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 0x0000e011
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE1_RXCalOffsetEdge1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE1_RXCalOffsetEdge1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetRoam(rw) - RX lane roam comparator offset calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration7(_x) (0x00000012 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 0x0000e012
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalR_RXCalOffsetRoam(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalR_RXCalOffsetRoam_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
    Bits:  3:0  RxCdrCalfoscCenterFreq(rw) - RX CDR VCO center frequency calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibrationCDRFreq(_x) (0x00000013 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq 0x0000e013
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal1_RxCdrCalfoscCenterFreq(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal1_RxCdrCalfoscCenterFreq_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
    Bits:  4:0  TxCalTclkDuty(rw) - TX lane clock duty calibration code.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibrationTxClk(_x) (0x00000014 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk 0x0000e014
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal2_TxCalTclkDuty(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal2_TxCalTclkDuty_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
    Bits:  7:3  TxDrvLevN(rw) - Defines the total number of driver units allocated to sum of the taps. The maximum value is 5'd23.
    Bits:  2:0  TxDrvHLev(rw) - Transmit Amplitude control signal. Used to define the full-scale maximum swing of the driver. 000=Not Supported, 001=1070mVdiff-pkpk (Default), 010=1140mVdiff-pkpk, 011=1200mVdiff-pkpk, 100=1260mVdiff-pkpk, 101=1310mVdiff-pkpk, 110=1350mVdiff-pkpk, 111=1400mVdiff-pkpk6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl1(_x) (0x00000015 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 0x0000e015
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvLevN(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvLevN_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvHLev(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvHLev_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
    Bits:  5:4  TxDrvLevNm2(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 2'h3.
    Bits:  3:0  TxDrvLevNm1(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 4'h9.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl2(_x) (0x00000016 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 0x0000e016
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm2(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm1(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
    Bits:  4:3  TxDrvSlew(rw) - TX driver Slew Rate control:00 - 31ps ,01 - 33ps,10 - 68ps,11 - 170ps
    Bits:  2:0  TxDrvLevNP1(rw) - Defines the total number of driver units allocated to the first pre-cursor (C-1) tap. The maximum value for C-1 is 3'h6.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl3(_x) (0x00000017 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 0x0000e017
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvSlew(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvSlew_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvLevNP1(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvLevNP1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
    Bits:  5:3  RxCalEqDfepstapf3DB(rw) - DFE post-shaping tap 3dB frequency -3'b000: 684MHz -3'b001: 576MHz -3'b010: 514MHz -3'b011: 435MHz -3'b100: 354MHz -3'b101: 281MHz -3'b110: 199MHz -3'b111: 125MHz
    Bits:  2:0  RxCalEqDcGain(rw) - RX agc high frequency dc gain: -3'b000: -3dB -3'b001: -2.5dB -3'b010: -2dB -3'b011: -1.5dB -3'b100: -1dB -3'b101: -0.5dB -3'b110: -0dB -3'b111: 0.5dB
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve(_x) (0x00000018 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 0x00008026
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve 0x0000e018
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDfepstapf3DB(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDfepstapf3DB_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDcGain(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDcGain_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:3  RxCalEqDfeTap1Gain(rw) - DFE first tap gain control -4'b0000: +1mVpeak -4'b0001: +10mVpeak . . . -4'b0110: +55mVpeak -4'b0111: +64mVpeak -4'b1000: -1mVpeak -4'b1001: -10mVpeak . . -4'b1110: -55mVpeak -4'b1111: -64mVpeak
    Bits:  2:0  RxCalEqDfepStapGain(rw) - DFE post-shaping tap gain 0: no pulse shaping tap 1: -24mVpeak 2: -45mVpeak 3: -64mVpeak 4: -80mVpeak 5: -93mVpeak 6: -101mVpeak 7: -105mVpeak
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve2(_x) (0x00000019 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 0x0000e019
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfeTap1Gain(_x) (((_x) & 0xf) << 3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfeTap1Gain_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfepStapGain(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfepStapGain_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  7:4  RxCalEqDfeTap3Gain(rw) - DFE third tap gain control -4'b0000: +0mVpeak -4'b0001: +7mVpeak . . . -4'b0110: +38mVpeak -4'b0111: +44mVpeak -4'b1000: -0mVpeak -4'b1001: -7mVpeak . . -4'b1110: -38mVpeak -4'b1111: -44mVpeak
    Bits:  3:0  RxCalEqDfetap2Gain(rw) - DFE second tap gain control -4'b0000: +0mVpeak -4'b0001: +9mVpeak . . . -4'b0110: +46mVpeak -4'b0111: +53mVpeak -4'b1000: -0mVpeak -4'b1001: -9mVpeak . . -4'b1110: -46mVpeak -4'b1111: -53mVpeak
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve3(_x) (0x0000001a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup 0x0000802d
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 0x0000e01a
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfeTap3Gain(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfeTap3Gain_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfetap2Gain(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfetap2Gain_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:4  RxCalEqLoFreqAgcGain(rw) - Low frequency agc gain (att) select -3'b000: Disconnected -3'b001: -18.5dB -3'b010: -12.5dB -3'b011: -9dB -3'b100: -6.5dB -3'b101: -4.5dB -3'b110: -2.9dB -3'b111: -1.6dB
    Bits:  3:0  RxCalEqDfetap4Gain(rw) - DFE fourth tap gain control -4'b0000: +0mVpeak -4'b0001: +6mVpeak . . . -4'b0110: +29mVpeak -4'b0111: +33mVpeak -4'b1000: -0mVpeak -4'b1001: -6mVpeak . . -4'b1110: -29mVpeak -4'b1111: -33mVpeak
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve4(_x) (0x0000001b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup 0x0000802e
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 0x0000e01b
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqLoFreqAgcGain(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqLoFreqAgcGain_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqDfetap4Gain(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqDfetap4Gain_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
    Bits:  7:3  RxCalEqHiFreqAgcCap(rw) - High frequency agc boost control Min d0: Boost ~4dB Max d31: Boost ~20dB
    Bits:  2:0  PcsRxEqPreCalCodeSel(rw) - Provides a RX Equalizer Pre-Hint, prior to beginning adaptive equalization Please refer to Datasheet for a description of what backplane ranges the RX-Hint values are intended to support.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneAdaptiveEqualizer(_x) (0x0000001c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer 0x0000e01c
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_RxCalEqHiFreqAgcCap(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_RxCalEqHiFreqAgcCap_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_PcsRxEqPreCalCodeSel(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_PcsRxEqPreCalCodeSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  7:0  RxeqBestEyeVal(rw) - RX lane best eye point measurement result.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx(_x) (0x0000001d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx 0x0000e01d
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq2_RxeqBestEyeVal(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq2_RxeqBestEyeVal_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  5:0  RxeqBestEyeVal2(rw) - RX lane best eye point measurement result.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2(_x) (0x0000001e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 0x0000e01e
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq3_RxeqBestEyeVal2(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq3_RxeqBestEyeVal2_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
    Bits:  2    RxCalRoamEyeMeasInCycleEn(rw) - RX lane single roam eye point measurement start signal. If asserted, single measurement at fix XADJUST and YADJUST is started.
    Bits:  1    RxCalEyeDiagFsminStart(rw) - Enables an eye diagram measurement within the PHY. 0 - Disables eye diagram measurement 1 - Enables eye diagram measurement
    Bits:  0    PcsRxeqStart(rw) - Adaptive RX Equalization enable 0 - Disables adaptive RX equalization 1 - Enables adaptive RX equalization
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneEyeDiagram(_x) (0x0000001f + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram 0x0000e01f
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_RxCalRoamEyeMeasInCycleEn BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_RxCalEyeDiagFsminStart BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_PcsRxeqStart BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
    Bits:  3    RxeqDone(rw) - PHY Adaptive Equalization stauts Signal 0-Indicatest adaptive equalization results are not valid for sampling 1-Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  2    RxCalRoamEyeMeasDone(rw) - PMA Adaptive Equalization Status Signal 0 - Indicates adaptive equalization results are not valid for sampling. 1 - Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  1    RxCalEyeDiagFsmErr(rw) - Eye diagram error signal. Indicates if the measurement was invalid because the eye diagram was interrupted by the link entering electrical idle. 0 - Indicates eye diagram is valid. 1- Indicates an error occurred, and the eye diagram measurement should be re-run.
    Bits:  0    RxCalEyeDiagFsmDone(rw) - PHY Eye diagram measurement status signal: 0 - Indicates eye diagram results are not valid for sampling, 1 - Indicates eye diagram is complete and results are valid for sampling.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagCtl(_x) (0x00000020 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl 0x0000e020
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxeqDone BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalRoamEyeMeasDone BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalEyeDiagFsmErr BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalEyeDiagFsmDone BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjust(rw) - 7-bit eye diagram time adjust control - 6-bits per UI - spans 2 UI
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDRxCalRoamXAdjustInit(_x) (0x00000021 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit 0x0000e021
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamXAdjust_RxCalRoamXAdjust(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamXAdjust_RxCalRoamXAdjust_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
    Bits:  5:0  RxCalRoamYAdjustInit(rw) - 6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDRxCalRoamYAdjustInit(_x) (0x00000022 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit 0x00008022
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit 0x0000e022
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamYAdjustInit_RxCalRoamYAdjustInit(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamYAdjustInit_RxCalRoamYAdjustInit_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
    Bits:  7:0  RxCalEyeDiagFsmEyeSumLo(rw) - Eye diagram status low bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagSumLo(_x) (0x00000023 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo 0x0000e023
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumLo_RxCalEyeDiagFsmEyeSumLo(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumLo_RxCalEyeDiagFsmEyeSumLo_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
    Bits:  5:0  RxCalEyeDiagFsmEyeSumHi(rw) - Eye diagram status hi bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagSumHi(_x) (0x00000024 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi 0x0000e024
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumHi_RxCalEyeDiagFsmEyeSumHi(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumHi_RxCalEyeDiagFsmEyeSumHi_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
    Bits:  7:0  RxCalRoamEyeMeasAcc(rw) - RX lane single roam eye point measurement result. If 0, eye is open at current XADJUST and YADJUST settings
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagRx(_x) (0x00000025 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagRx2(_x) (0x00000026 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx 0x0000e025
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 0x0000e026
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAEyeDiag2_RxCalRoamEyeMeasAcc(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAEyeDiag2_RxCalRoamEyeMeasAcc_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
    Bits:  3    RxScopeEn(rw) - Enable PHY to go into 'Scope' mode. Allows for outputting entire eye diagram data. Active High.
    Bits:  2    RxRoamXorBitSel(rw) - Eye diagram type select bit. 0=Select oscilloscope mode, 1=Select Bit Error Contour mode.
    Bits:  0    RxCdrFbDivSlipCycle(rw) - Rising edge detection enable to activate a feedback divider slip (ie, M+1) for one feedback cycle.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARoamScope(_x) (0x00000027 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope 0x0000e027
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxScopeEn BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxRoamXorBitSel BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxCdrFbDivSlipCycle BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
    Bits:  6    RxSigDetOvrEnCdrLock2Data(rw) - Enable for RXSIGDET_OVRCDRLOCK2DATA: 0 = CDR uses its internal locked to data signal, 1 = CDR uses RXSIGDET_OVRCDRLOCK2DATA.
    Bits:  5    RxSigDetOvrCdrLock2Data(rw) - Controls when the CDR should switch to lock to data, or lock to reference: 0 = CDR is locked to reference, 1 = CDR is locked to data.
    Bits:  4    PcsTxDetectRxEn(rw) - TX lane TX detect RX enable. Active High.
    Bits:  3    PcsTxBeaConEn(rw) - TX lane beacon enable. Active High.
    Bits:  2    PcsRxDmeEn(rw) - Receiver DME mode enable. Active High
    Bits:  1    CmnClkGenMuxselDpmatxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1]
    Bits:  0    CmnClkGenMuxselDpmarxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1].
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMAlaneControl(_x) (0x00000028 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl 0x0000e028
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_RxSigDetOvrEnCdrLock2Data BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_RxSigDetOvrCdrLock2Data BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsTxDetectRxEn BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsTxBeaConEn BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsRxDmeEn BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_CmnClkGenMuxselDpmatxRef BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_CmnClkGenMuxselDpmarxRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
    Bits:  0    PcsTxTxclkDiv2En(rw) - Enables divide by two on main Transmit clock in the PCS. Used in 32-bit mode.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxClkDiv(_x) (0x00000029 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv 0x0000e029
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxclkDiv_PcsTxTxclkDiv2En BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
    Bits:  1    CmnClkGenMuxSelDpmaTxRef(rw) - Selects reference clock to be used in TX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaRxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDCmnClkGenMuxSel(_x) (0x0000002a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel 0x0000e02a
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACmnClkGenMuxSel_CmnClkGenMuxSelDpmaTxRef BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACmnClkGenMuxSel_CmnClkGenMuxSelDpmaRxRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
    Bits:  4:2  RxSigdetRxtramdetDebounceCount(rw) - Controls signal detection max run-length 000 - 1* Rate/Reference Clock frequency 001 - 2* Rate/Reference Clock frequency 010 - 4* Rate/Reference Clock frequency 011 - 6* Rate/ Reference Clock frequency 100 - 8* Rate/ Reference Clock frequency 101 - 12* Rate/ Reference Clock frequency 110 - 16* Rate/ Reference Clock frequency 111 and above - 32* Rate/ Reference Clock frequency
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxTranDet(_x) (0x00000030 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet 0x0000e030
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTranDet_RxSigdetRxtramdetDebounceCount(_x) (((_x) & 0x7) << 2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTranDet_RxSigdetRxtramdetDebounceCount_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    PCSRxEqLocWrEn(rw) - PCSRXEQ* override enable. Active Low.
    Bits:  6    PcsRXBistLocWrEn(rw) - PCSRXBIST* override enable. Active Low.
    Bits:  5    PcsRxLocWrEn(rw) - PCSRX* override enable. Active Low.
    Bits:  4    PcsOutTxLocWrEn(rw) - PCSOUTTX* override enable. Active Low.
    Bits:  3    PcsoutRxLocWrEn(rw) - PCSOUTRX* override enable. Active Low.
    Bits:  2    LbLocWrEn(rw) - LB* override enable. Active Low.
    Bits:  1    LanePcsStateLocWREn(rw) - LANEPCSPSTATE* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneoverrideEn(_x) (0x00000055 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn 0x0000e055
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PCSRxEqLocWrEn BIT(7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsRXBistLocWrEn BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsRxLocWrEn BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsOutTxLocWrEn BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsoutRxLocWrEn BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_LbLocWrEn BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_LanePcsStateLocWREn BIT(1)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    RxCalRoamEyeAsInLocWrEn(rw) - RXCALROAMEYEMEASIN* override enable. Active Low.
    Bits:  6    RxCalOffSetLocWrEn(rw) - RXCALOFFSET* override enable. Active Low.
    Bits:  5    RxCalEyeDiaframSminLocWrEn(rw) - RXCALEYEDIAGFSMIN* override enable. Active Low.
    Bits:  4    RXcaleqLocRen(rw) - RXCALEQ* override enable. Active Low.
    Bits:  3    RxcalDutyLocwRen(rw) - RXCALDUTY* override enable. Active Low.
    Bits:  2    RstLanePcsSoftLowRen(rw) - RSTLANEPCSSOFT* override enable. Active Low.
    Bits:  1    PcsTxBistLocWrEn(rw) - PCSTXBIST* override enable. Active Low.
    Bits:  0    PcsTxLocWrEn(rw) - PCSTX* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxLaneoverrideEn(_x) (0x00000056 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn 0x0000e056
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalRoamEyeAsInLocWrEn BIT(7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalOffSetLocWrEn BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalEyeDiaframSminLocWrEn BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RXcaleqLocRen BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxcalDutyLocwRen BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RstLanePcsSoftLowRen BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_PcsTxBistLocWrEn BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_PcsTxLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
    Bits:  6    TxDrvLocWrEn(rw) - TXDRV* override enable. Active Low.
    Bits:  5    TxCalTclkDutyLocWrEn(rw) - TXCALTCLKDUTY* override enable. Active Low.
    Bits:  2    RxCdrCalFoscLocWrEn(rw) - RXCDRCALFOSC* override enable. Active Low.
    Bits:  1    RxCalRoamyAdjustLocWrEn(rw) - RXCALROAMYADJUST* override enable. Active Low
    Bits:  0    RxCalRoamXadjustLocWrEn(rw) - RXCALROAMXADJUST* override enable. Active Low
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxLaneCal(_x) (0x00000057 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal 0x0000e057
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_TxDrvLocWrEn BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_TxCalTclkDutyLocWrEn BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCdrCalFoscLocWrEn BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCalRoamyAdjustLocWrEn BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCalRoamXadjustLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscHscountMuxd0(rw) - CDR VCO calibration register.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRVCOCal(_x) (0x00000065 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1(_x) (0x00000066 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal 0x0000e065
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 0x0000e066
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACDRCal_RxCDRCalFoscHscountMuxd0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACDRCal_RxCDRCalFoscHscountMuxd0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD0(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMuxD0(_x) (0x00000067 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 0x0000e067
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD0_RxCDRCalFoscmeasCountMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD0_RxCDRCalFoscmeasCountMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD1(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMuxD1(_x) (0x00000068 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 0x0000e068
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD1_RxCDRCalFoscmeasCountMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD1_RxCDRCalFoscmeasCountMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD0(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 0. Used in 'Scope' mode.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0(_x) (0x00000069 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 0x0000e069
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD0_RxCDRFbDivSlipMdivMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD0_RxCDRFbDivSlipMdivMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD1(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1(_x) (0x0000006a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 0x0000e06a
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD1_RxCDRFbDivSlipMdivMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD1_RxCDRFbDivSlipMdivMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD0(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0(_x) (0x0000006b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 0x0000e06b
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMux_RxCdrRefckRefDivmuxD0(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMux_RxCdrRefckRefDivmuxD0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD1(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1(_x) (0x0000006c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 0x0000e06c
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMuxD1_RxCdrRefckRefDivmuxD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMuxD1_RxCdrRefckRefDivmuxD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  7:4  RxCDRCalFoscCenterFreqPhintMuxD1(rw) -
    Bits:  3:0  RxCDRCalFoscCenterFreqPhintMuxD0(rw) -
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1(_x) (0x0000006d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 0x0000e06d
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD1(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
    Bits:  3    TxCalClkDutyPreDivEnMuxD1(rw) -
    Bits:  2    TxCalClkDutyPreDivEnMuxD0(rw) -
    Bits:  1    RxCalDutyPreDivEnmuxd1(rw) -
    Bits:  0    RxCalDutyPreDivEnmuxd0(rw) -
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn(_x) (0x0000006e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn 0x0000e06e
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_TxCalClkDutyPreDivEnMuxD1 BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_TxCalClkDutyPreDivEnMuxD0 BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_RxCalDutyPreDivEnmuxd1 BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_RxCalDutyPreDivEnmuxd0 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
    Bits:  5    VpcsifEiosDetEn(rw) - EIOS detector enable.0 - Disabled.1 - Enabled. PCS continually monitors for EIOS ordered sets, and if detected, will de-assert ICTL_PIPE_RXVALID shortly after.No EIOS detected:CDR should remains in current state EOIS detected:CDR should lock to reference
    Bits:  4    VpcseqDebugstepEn(rw) - RX Equalization calibration debug control.
    Bits:  3    VpcSeqDebugEn(rw) - RX Equalization calibration debug enable.0 - Normal operation 1 - Debug mode. FSM will not change states until a positive edge of VPCSEQ_DEBUGSTEPEN is detected
    Bits:  2    VpcBistChkHold(rw) - PCS BIST check output error hold enable.0 - Do not hold error counter.1 - Hold error counter
    Bits:  1    vpcbistChkEn(rw) - PCS BIST check enable.0 - Normal operation 1 - Enable BIST check
    Bits:  0    VpcBistChkClr(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg(_x) (0x00001007 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg 0x0000f007
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcsifEiosDetEn BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcseqDebugstepEn BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcSeqDebugEn BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcBistChkHold BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_vpcbistChkEn BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcBistChkClr BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
    Bits:  7:6  VpcsencTxForceErr(rw) - 8b10b encoder error insertion control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Error transmitted
    Bits:  5:4  VpcsencForcePosDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Disparity forced to positive
    Bits:  3:2  VpcsencForceNegDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte. 0 - Normal operation 1 - Disparity forced to negative.
    Bits:  1:0  VpcsBistDatamode(rw) - PCS BIST data mode selection. 0 - UDP 1 - prbs7 2 - prbs23 3 - prbs31
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg2(_x) (0x00001008 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 0x0000f008
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencTxForceErr(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencTxForceErr_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForcePosDisp(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForcePosDisp_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForceNegDisp(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForceNegDisp_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsBistDatamode(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsBistDatamode_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
    Bits:  6    VPcsBistGenInsertErr(rw) - PCS BIST generator insert error control. The LSB of the transmitted pattern is inverted on each positive edge of this signal
    Bits:  5:2  VPcsBistGenInitDelay(rw) - PCS BIST generator data pattern initial delay. Controls length of time for training pattern. If set to 0, training pattern is controlled by VPCSBIST_GEN_INIT_CTRL. Length of time is 2^ VPCSBIST_GEN_INIT_CTRL clock cycles, maximum 2^12
    Bits:  1    VPcsBistGenInitCtrl(rw) - PCS BIST generator initial pattern manual control. 0 - send training sequence 1 - send prbs / UDP Used only if VPCSBIST_GEN_INIT_DELAY = 0
    Bits:  0    VPcsBistGenEn(rw) - PCS BIST generator enable. 0 - Normal operation 1 - Enable BIST data send
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg3(_x) (0x00001009 + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 0x0000f009
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInsertErr BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitDelay(_x) (((_x) & 0xf) << 2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitDelay_of(_x) (((_x) >> 2) & 0xf)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitCtrl BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxPolarity(rw) - Override for ICTL_PIPE_RXPOLARITY_ pins
    Bits:  6    VpcsifOvrRxeqEval(rw) - Override for ICTL_PIPE_RXEQEVAL_ pins
    Bits:  5:4  VpcsifOvrrate(rw) - Override for ICTL_PIPE_RATE_ pins
    Bits:  3:2  VpcsifOvrPowerDown(rw) - Override for ICTL_PIPE_POWERDOWN_ pins
    Bits:  1:0  VpcsifOvrDataBusWidth(rw) - Override for ICTL_PIPE_DATABUSWIDTH_ pins
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg(_x) (0x0000100a + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg 0x0000f00a
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrRxPolarity BIT(7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrRxeqEval BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrrate(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrrate_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrPowerDown(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrPowerDown_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrDataBusWidth(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrDataBusWidth_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
    Bits:  7:6  VpcsifOvrTxEleCidle(rw) - Override for ICTL_PIPE_TXELECIDLE_ pins
    Bits:  5    VpcsifOvrTxDtCtRxLb(rw) - Override for ICTL_PIPE_TXDTCTRX_LB_ pins
    Bits:  4    VpcsifOvrTxCompliance(rw) - Override for ICTL_PIPE_TXCOMPLIANCE_ pins
    Bits:  3    VpcsifOvrRxStandBy(rw) - Override for ICTL_PIPE_RXSTANDBY_ pins
    Bits:  2:0  VpcsifOvrRxPresentHint(rw) - Override for ICTL_PIPE_RXPRESETHINT_ pins
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg1(_x) (0x0000100b + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 0x0000f00b
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxEleCidle(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxEleCidle_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxDtCtRxLb BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxCompliance BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxStandBy BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxPresentHint(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxPresentHint_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
    Bits:  4    VPcsLbNe(rw) - PIPE Near End loopback enable.0 - Normal operation 1 - TX to RX loopback enabled.
    Bits:  3    VpcsLbFe(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter.
    Bits:  2    VpcsifOvrRxEqClr(rw) - Override for RXEQCLR pins
    Bits:  1    VpcsifOvrRst(rw) - Override for IRST_PIPE_RST_Lx_B_A pins
    Bits:  0    VpcsifOvrBlockAlignControl(rw) - Override for VPCSIF_OVR_BLOCKALIGNCONTROL_ pins
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg2(_x) (0x0000100c + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 0x0000f00c
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VPcsLbNe BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsLbFe BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrRxEqClr BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrRst BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrBlockAlignControl BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxstandByEna(rw) - Enables VPCSIF_OVR_RXSTANDBY to override external pin
    Bits:  6    VpcsifOvrRxPresentHintena(rw) - Enables VPCSIF_OVR_RXPRESETHINT to override external pin
    Bits:  5    VpcsifOvrRxPolarityEna(rw) - Enables VPCSIF_OVR_RXPOLARITY to override external pin
    Bits:  4    VpcsifOvrRxEqEvalEna(rw) - Enables VPCSIF_OVR_RXEQEVAL to override external pin
    Bits:  3    VpcsifOvrRstEna(rw) - Enables VPCSIF_OVR_RST to override external pin
    Bits:  2    VpcsifOvrRateEna(rw) - Enables VPCSIF_OVR_RATE to override external pin
    Bits:  1    VpcsifOvrpowerDowmEna(rw) - Enables VPCSIF_OVR_POWERDOWN to override external pin
    Bits:  0    VpcsifOvrDataBusWidthEna(rw) - Enables VPCSIF_OVR_DATABUSWIDTH to override external pin
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg3(_x) (0x0000100d + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 0x0000f00d
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxstandByEna BIT(7)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxPresentHintena BIT(6)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxPolarityEna BIT(5)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxEqEvalEna BIT(4)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRstEna BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRateEna BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrpowerDowmEna BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrDataBusWidthEna BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
    Bits:  3    VpcsifOvrtxEleCidleEna(rw) - Enables VPCSIF_OVR_TXELECIDLE to override external pin
    Bits:  2    VpcsifovrTxDtcTrxLbEna(rw) - Enables VPCSIF_OVR_TXDTCTRX_LB to override external pin
    Bits:  1    VpcsifOvrTxComplianceEna(rw) - Enables VPCSIF_OVR_TXCOMPLIANCE to override external pin
    Bits:  0    VpcsifOvrBlockAlignControlEna(rw) - Enables VPCSIF_OVR_BLOCKALIGNCONTROL to override external pin
*/
#define NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg4(_x) (0x0000100e + (0x2000 * ((_x) & 0x3)))
#define NFP_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 0x0000f00e
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrtxEleCidleEna BIT(3)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifovrTxDtcTrxLbEna BIT(2)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrTxComplianceEna BIT(1)
#define   NFP_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrBlockAlignControlEna BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr - Address for aprobe common lane.
    Bits:  6:4  SerDesAprobeSynAddr(rw) - Address for Synth lane aprobe data.
    Bits:  3:0  SerDesAprobeCmnAddr(rw) - Address for common and Synth regulator lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr 0x00008000
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeSynAddr(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeSynAddr_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeCmnAddr(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeCmnAddr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr - Address for Synth lane aprobe data.
    Bits:  4:0  AprobeSynthAddr(rw) - Address for synth lane aprobe data.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr 0x00008001
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr_AprobeSynthAddr(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr_AprobeSynthAddr_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl - PMA Common/Synth lane control register
    Bits:  2    RstCmnPcsSoftSynth(rw) - Synth soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstByPassSynth(rw) - Common lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
    Bits:  0    CmnCtlPorHardRstByPassEnSynth(rw) - Common lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl 0x00008002
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_RstCmnPcsSoftSynth BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_CmnCtlPorHardRstByPassSynth BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_CmnCtlPorHardRstByPassEnSynth BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth - Common PCS pstate synth.
    Bits:  4:0  CmnPcsStateSynth(rw) - Synth power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth 0x00008003
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth_CmnPcsStateSynth(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth_CmnPcsStateSynth_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl - Common Test Bus status reg 1.
    Bits:  2    SynthPpmLockStatus(rw) - Synth lane PLL lock status. 1 - Synth VCO is locked to reference clock.
    Bits:  1    PcsOutSynthStatus(rw) - Synth lane state transition status. Indicates when the Synth has completed a requested state transition. 0 - Synth has not completed its state change. 1 - Synth has completed its state change.
    Bits:  0    PcsOutSynthReady(rw) - Synth lane ready status signal. 0 - Synth is not ready for data transmission. 1 - Synth is ready for data transmission.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl 0x00008004
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_SynthPpmLockStatus BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_PcsOutSynthStatus BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_PcsOutSynthReady BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl - Common and Synth refclock control.
    Bits:  4    CmnRefCkBufSynthRefEn(rw) - Synth reference clock enable. Active High.
    Bits:  3    CmnRefCkBufRxRefEn(rw) - RX lane reference clock enable. Active High.
    Bits:  2    CmnClkGenMuxSelPcsRef(rw) - Selects reference clock to be used in PCS. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  1    CmnClkGenMuxSelDpmaSynthRef(rw) - Selects reference clock to be used in Synth lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaCmnRef(rw) - Selects reference clock to be used in Common lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl 0x00008005
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnRefCkBufSynthRefEn BIT(4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnRefCkBufRxRefEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelPcsRef BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelDpmaSynthRef BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelDpmaCmnRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl - Common/synth reference clock control.
    Bits:  7:6  CmnrefCkDrvRefinpMacntl0(rw) - Reference clock output select for OCK_PMACNTLREF_0 DPMA clock. 00 - From bumps, ICK_CMNREF 01 - From SOC reference clock input, ICK_CMNREFSOC 10 - From right-side clock repeater network, ICK_REFBUSRIGHT 11 - From left-side clock repeater network, ICK_REFBUSLEFT
    Bits:  5:3  CmnRefCkdrvRefBusright2leftoutCtl(rw) -
    Bits:  2:0  CmnRefCkdrvRefBusleft2rightoutCtl(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl 0x00008006
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnrefCkDrvRefinpMacntl0(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnrefCkDrvRefinpMacntl0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusright2leftoutCtl(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusright2leftoutCtl_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusleft2rightoutCtl(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusleft2rightoutCtl_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl - PMA Common/Synth Lane Reference Clock Control Register.
    Bits:  7:6  SynthRefCkRefInCtl(rw) - Synth lane reference clock select.
    Bits:  5:4  RxCdrRefCkRefClkSel(rw) - RX lane reference clock select..
    Bits:  3:2  CmnRefCkDrvRefSocEn(rw) - RX lane reference clock select..
    Bits:  1:0  CmnRefCkdrvRefInPmACntl1(rw) - Enable for OCK_REFSOC 0 - OCK_REFSOC disabled and output at logic 0 1 - OCK_REFSOC enabled and outputs a copy of ICK_PMA_REFSOC
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl 0x00008007
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_of(_x) (((_x) >> 6) & 0x3)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REF (0)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFSOC (1)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFBUSRIGHT (2)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFBUSLEFT (3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REF (0)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFSOC (1)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFBUSRIGHT (2)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFBUSLEFT (3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_of(_x) (((_x) >> 2) & 0x3)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REF (0)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFSOC (1)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFBUSRIGHT (2)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFBUSLEFT (3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkdrvRefInPmACntl1(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkdrvRefInPmACntl1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 - PMA Common/Synth Lane Control Register
    Bits:  6    RxEqCalEn(rw) - RX Equalization FSM enable. Active High.
    Bits:  5    CmnPcsSynthCkBypassEn(rw) - PCS Synth lane clock bypass enable. Active High.
    Bits:  4:3  CmnPcsRdyStatModeSel(rw) - Controls how Synth, TX and RX lane ready and status signals are controlled.
    Bits:  2    CmnPcsTxEnable(rw) - Transmit datapath FIFO enable. Active High.
    Bits:  1    CmnPcsPcieGen3En(rw) - PCIe Gen3 rate change. 1 - Gen3 rate change is requested.
    Bits:  0    CmnPcieGen3LutSel(rw) - PCIe Gen3 rate change LUT select. Active High.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 0x00008008
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_RxEqCalEn BIT(6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsSynthCkBypassEn BIT(5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsRdyStatModeSel(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsRdyStatModeSel_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsTxEnable BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsPcieGen3En BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcieGen3LutSel BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  CmnRefCkBufTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnCalTcTerm(rw) - Common lane termination calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration 0x00008009
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnRefCkBufTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnRefCkBufTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnCalTcTerm(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnCalTcTerm_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  TxTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnBgBiasTermCal(rw) - Common lane termination calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 0x0000800a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_TxTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_TxTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_CmnBgBiasTermCal(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_CmnBgBiasTermCal_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal - PMA Common/Synth Lane Register.
    Bits:  5:3  RxTermCal(rw) - RX lane termination calibration value.
    Bits:  2:0  RxDfeTermCal(rw) - RX lane DFE Termination calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal 0x0000800b
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxDfeTermCal(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxDfeTermCal_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal - PMA Common/Synth Lane Calibration Register.
    Bits:  3:0  SynthCalFoscCenterFreq(rw) - RX lane ICLK duty calibration code.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal 0x0000800c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal_SynthCalFoscCenterFreq(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal_SynthCalFoscCenterFreq_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 - PMA Common/Synth Lane Control Register.
    Bits:  5    RxPowerSave(rw) - Power saving mode enable. Active High.Disables RX roam comparator.
    Bits:  3    PcsEn(rw) - Override for ICTL_PCS_EN_NT control pin.0 Multi Mode.1- PCIe Mode.
    Bits:  2    LbSynthPllFbclk2CdrRefclkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock..
    Bits:  1    LbSynthCdrDivclk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
    Bits:  0    CmnCalSynthLoopTimingEn(rw) - Looptiming mode enable. Active High. CDR recovered clock used as the reference clock for Synth VCO..
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 0x0000800d
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_RxPowerSave BIT(5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_PcsEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_LbSynthPllFbclk2CdrRefclkEn BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_LbSynthCdrDivclk2TxEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_CmnCalSynthLoopTimingEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 - PMA Common/Synth Lane Status Registers.
    Bits:  3    MemTstEn(rw) - Memory test enable. Active High.
    Bits:  2:0  MemTstBitSel(rw) - Memory select signal test. The memory bit select will be passed to aprobe, if proper aprobe address is set.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 0x0000800e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstBitSel(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstBitSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl - PMA Common/Synth Lane Control Register.
    Bits:  4:3  RxLosDetThresh(rw) - LOS Detect Threshold Level.
    Bits:  2:0  RxElecidleSigDetThresh(rw) - Signal Detect Threshold Level.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl 0x0000800f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxLosDetThresh(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxLosDetThresh_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxElecidleSigDetThresh(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxElecidleSigDetThresh_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 - PMA Common/Synth Lane Status Register.
    Bits:  3    CmnTstBusSampleEn(rw) - TX lane soft reset. Active Low
    Bits:  2    CmnTstBusLmonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  1    CmnTstBusHmonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  0    CmnTstBusAsyncEn(rw) - Testbus read or write enable. Active High
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 0x00008010
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusSampleEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusLmonitor BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusHmonitor BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusAsyncEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 - PMA Common/Synth Lane Status Register.
    Bits:  7:0  CmnTstBus(rw) - PHY Testbus status registers. Section 3.2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 0x00008011
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 0x00008012
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 0x00008013
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 0x00008014
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 0x00008015
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALaneStatus4_CmnTstBus(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALaneStatus4_CmnTstBus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel - Testbus Select. Section 3.2.
    Bits:  7:0  CmnTstBusSel(rw) - Testbus select. Section 3.2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel 0x00008016
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel_CmnTstBusSel(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel_CmnTstBusSel_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit - PMA Lane Transmit Control Register.
    Bits:  7:6  CmnTxPipeHlevLup2(rw) - TX IO driver HLEV look-up table entry
    Bits:  5:3  CmnTxPipeHlevlup1(rw) - TX IO driver HLEV look-up table entry.
    Bits:  2:0  CmnTxPipeHlevlup0(rw) - TX IO driver HLEV look-up table entry.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit 0x00008017
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevLup2(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevLup2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup1(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 - PMA Lane Transmit Control Register.
    Bits:  4:0  CmnTxPipelevnLup0(rw) - TX IO driver LEVN look-up table entry 0
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 0x00008018
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2_CmnTxPipelevnLup0(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2_CmnTxPipelevnLup0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 - PMA Lane Transmit Control Register.
    Bits:  3:0  CmnTxPipelevnmLup0(rw) - TX IO driver LEVNM1 look-up table entry 0
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 0x00008019
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3_CmnTxPipelevnmLup0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3_CmnTxPipelevnmLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 - PMA Lane Transmit Control Register.
    Bits:  5:4  CmnTxPipeTxdrvSlewGen3(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen3. If PCIEMODE_SEL=1. This value is used if PCIEMODE_SEL=0.
    Bits:  3:2  CmnTxPipeTxdrvSlewGen2(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen2 If PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
    Bits:  1:0  CmnTxPipeTxdrvSlewGen1(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen1 if PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 0x0000801a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen3(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen3_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen2(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen2_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen1(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr - PMA Common Synth Lane Loop Back and BIST Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 - PMA Common Synth Lane Loop Back and BIST Register
    Bits:  7:0  RxBistCdrLock2DataPostAmble(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr 0x0000801b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 0x0000801c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALoopBackBIST4_RxBistCdrLock2DataPostAmble(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALoopBackBIST4_RxBistCdrLock2DataPostAmble_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR - Delay in CDR switching from "locked to reference" mode to "locked to the data" mode.
    Bits:  7:0  RxLock2DataTmr(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR 0x0000801d
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR_RxLock2DataTmr(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR_RxLock2DataTmr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqCoarseIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter 0x0000801e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter_RxeqCoarseIterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter_RxeqCoarseIterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqFineIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine 0x0000801f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine_RxeqFineIterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine_RxeqFineIterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 - RX CDR VCO fine frequency cal value.
    Bits:  7:0  SynthCalFoscInt(rw) - Synth lane VCO fine frequency calibration value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 0x00008020
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1_SynthCalFoscInt(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1_SynthCalFoscInt_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjustInit(rw) - RX Roam eye X ADJUST initial value.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit 0x00008021
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit_RxCalRoamXAdjustInit(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit_RxCalRoamXAdjustInit_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 - Common block control 2.
    Bits:  7    TxWPtrInitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  6:4  TxWPtrInit(rw) - TX parallel data path initial read pointer.
    Bits:  3:2  TxDvrReplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver.
    Bits:  1    LbSynthPllFbClk2CdrRefClkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock.
    Bits:  0    LbSynthCdrDivClk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 0x00008023
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInitDiv BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInit(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInit_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxDvrReplicaMode(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxDvrReplicaMode_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_LbSynthPllFbClk2CdrRefClkEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_LbSynthCdrDivClk2TxEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup - PMA Common/Synth Lane Adaptive Equalizer Registers
    Bits:  7:0  RxEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0_NT_ inputs.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup 0x00008024
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup_RxEqLookupCodeEn(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup_RxEqLookupCodeEn_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode - PMA Lane Adaptive Equalizer Register.
    Bits:  2:0  RxEqLooklastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode 0x00008025
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode_RxEqLooklastCode(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode_RxEqLooklastCode_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
    Bits:  6:3  RxEqDfeTap1GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 0x00008027
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfeTap1GainGen2(_x) (((_x) & 0xf) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfeTap1GainGen2_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfePSTapGainGen2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfePSTapGainGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 - PCIe Gen2 Equalization control.
    Bits:  7:4  RxEqDfeTap3GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-3 tap gain.
    Bits:  3:0  RxEqDfeTap2GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 0x00008028
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap3GainGen2(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap3GainGen2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap2GainGen2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap2GainGen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 - PCIe Gen2 Equalization control.
    Bits:  6:4  RxEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  3:0  RxEqDftAp4GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-4 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 0x00008029
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqLoFreqAgcGainGen2(_x) (((_x) & 0x7) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqLoFreqAgcGainGen2_of(_x) (((_x) >> 4) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqDftAp4GainGen2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqDftAp4GainGen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq - PCIe Gen2 Equalization control.
    Bits:  4:0  RxEqHiFreqAgcCapGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq 0x0000802a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq_RxEqHiFreqAgcCapGen2(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq_RxEqHiFreqAgcCapGen2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain - Equalization calibration lookup table
    Bits:  5:3  RxEqDfepstapf3DBLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency
    Bits:  2:0  RxEqDcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain 0x0000802b
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDfepstapf3DBLup0(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDfepstapf3DBLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDcGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDcGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 - Equalization calibration lookup table
    Bits:  6:3  RxEqDfeTap1GainLup(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 0x0000802c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfeTap1GainLup(_x) (((_x) & 0xf) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfeTap1GainLup_of(_x) (((_x) >> 3) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfePSTapGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfePSTapGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 0x00008030
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv 0x00008031
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 0x00008032
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDiv_SynthFDivFDiv(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDiv_SynthFDivFDiv_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 - Synth Lane Control Register
    Bits:  2:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 0x00008033
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2_SynthFDivFDiv(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2_SynthFDivFDiv_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscUpdateCycle(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle 0x00008035
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle_SynthFDivSscUpdateCycle(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle_SynthFDivSscUpdateCycle_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod - Synth Lane Control Register
    Bits:  3    SynthfDivStrFdiv(rw) -
    Bits:  2    SynthfDivSscIntfilterFreezeen(rw) -
    Bits:  1    SynthfDivSscGenEn(rw) -
    Bits:  0    SynthfDivmodulatorEn(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod 0x00008036
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivStrFdiv BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivSscIntfilterFreezeen BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivSscGenEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivmodulatorEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk - Synth PCS Div Clock0
    Bits:  7    SynthPcsPostDivClk0En(rw) - Synth PCS Post Div Clock Enable
    Bits:  6:0  SynthPcsPostDivClk0(rw) - Synth PCS Post Div Clock.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk 0x00008037
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0En BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat310(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 0x00008038
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 0x00008039
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 0x0000803a
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 0x0000803b
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT_TXBistPat310(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT_TXBistPat310_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat6332(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 0x0000803c
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 0x0000803d
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 0x0000803e
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 0x0000803f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT63_TXBistPat6332(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT63_TXBistPat6332_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat7964(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 0x00008040
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 0x00008041
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT79_TXBistPat7964(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT79_TXBistPat7964_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst - OOB Burst Time
    Bits:  7:0  TxBistOoBtBurst(rw) - OOB Burst Time (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst 0x00008042
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst_TxBistOoBtBurst(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst_TxBistOoBtBurst_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComRstInit(rw) - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit 0x00008043
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit_TxBistOoBtComRstInit(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit_TxBistOoBtComRstInit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas - OOB ComSas Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComSas(rw) - OOB ComSas Idle Time - 1 (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas 0x00008044
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas_TxBistOoBtComSas(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas_TxBistOoBtComSas_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake - OOB ComWake Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComWake(rw) - OOB ComWake Idle Time - 1 (Word Clock UI).
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake 0x00008045
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake_TxBistOoBtComWake(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake_TxBistOoBtComWake_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode - PMA PCS common BIST mode Select.
    Bits:  5    TxBISTBitErrorEn(rw) - Single-Bit error detection enable (on posedge).
    Bits:  4:3  CmnPCSBISToobmode(rw) - OOB Mode (for 80-bit memory pattern mode only, ignored otherwise). 0 - Disabled 1 - OOB ComReset/ComInit 2 - OOB ComWake 3 - OOB ComSas.
    Bits:  2:0  CmnPCSBISTModeSel(rw) - Selects the transmit BIST mode: 0 - Uses the 80-bit internal memory pattern (w/ OOB) 1 - Uses a 27 PRBS pattern 2 - Uses a 223 PRBS pattern 3 - Uses a 231 PRBS pattern 4 - Uses a D10.2 clock pattern 5 - Uses a half rate 1100 clock pattern.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode 0x00008050
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_TxBISTBitErrorEn BIT(5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISToobmode(_x) (((_x) & 0x3) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISToobmode_of(_x) (((_x) >> 3) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISTModeSel(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISTModeSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS - PMA TX BIST PRBS mode.
    Bits:  3:2  TxDrvreplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver. 00 - No replica path enabled 01 - Replica path is 25% scaled version of the main driver 10 - Replica path is 50% scaled version of the main driver 11 - Replica path is 75% scaled version of the main driver
    Bits:  1    TxBistRxBistErrEn(rw) - Enable error generation from RXBIST to TXBIST. Once this is set to 1, TXBIST will generate an error bit, if RXBIST detects bit error.
    Bits:  0    TxBISTPrbsRst(rw) - PRBS Reset. Active low
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS 0x00008051
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxDrvreplicaMode(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxDrvreplicaMode_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxBistRxBistErrEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxBISTPrbsRst BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl - PMA TX/RX termination control register.
    Bits:  5:4  TxTermCoarse(rw) - TX lane calibration impedance setting.
    Bits:  3:2  RxTermModeSelect(rw) - RX termination modes setting.
    Bits:  1:0  RxTermCoarse(rw) - RX lane calibration impedance setting.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl 0x00008052
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_of(_x) (((_x) >> 4) & 0x3)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_85Ohms (0)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_100Ohms (1)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_120Ohms (2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermModeSelect(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermModeSelect_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_of(_x) (((_x) >> 0) & 0x3)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_85Ohms (0)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_100Ohms (1)
#define     NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_120Ohms (2)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR - PMA TX/RX Write Pointer.
    Bits:  7:6  TxWptrinitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  5:4  TxWptrInit(rw) - TX parallel data path initial read pointer.
    Bits:  0    RxAgcDccCoupleEn(rw) - RX AGC DC Couple Enable.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR 0x00008053
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrinitDiv(_x) (((_x) & 0x3) << 6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrinitDiv_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrInit(_x) (((_x) & 0x3) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrInit_of(_x) (((_x) >> 4) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_RxAgcDccCoupleEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn - PMA PCS Common Overide Enable.
    Bits:  7    CmnPcsSynthLocWrEn(rw) - CMNPCSSYNTH* override enable. Active Low
    Bits:  6    CmnPcsRdyStatModeLocWrEn(rw) - CMNPCSRDYSTATMODE_* override enable. Active Low
    Bits:  5    CmnPcsPStateLocWrEn(rw) - CMNPCSPSTATE* override enable. Active Low.
    Bits:  4    CmnPcsBistLocWrEn(rw) - CMNPCSBIST* override enable. Active Low.
    Bits:  3    CmnPcsLocWrEn(rw) - CMNPCS* override enable. Active Low
    Bits:  2    CmnPcieGen3LocWrEn(rw) - CMNPCIEGEN3* override enable. Active Low.
    Bits:  1    CmncalTcLocWrEn(rw) - CMNCALTC* override enable. Active Low.
    Bits:  0    CmnBgBiasLocWrEn(rw) - CMNBGBIAS* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn 0x0000805f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsSynthLocWrEn BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsRdyStatModeLocWrEn BIT(6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsPStateLocWrEn BIT(5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsBistLocWrEn BIT(4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsLocWrEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcieGen3LocWrEn BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmncalTcLocWrEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnBgBiasLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 - PMA PCS Common Overide Enable.
    Bits:  7    RxDfeLocWrEn(rw) - RXDFE* override enable. Active Low
    Bits:  6    RxCdrRefCkLocWrEn(rw) - RXCDRREFCK* override enable. Active Low
    Bits:  5    RstCmnPcsSoftLocWrEn(rw) - RSTCMNPCSSOFT* override enable. Active Low.
    Bits:  4    PcsOutSynthLocWrEn(rw) - PCSOUTSYNTH* override enable. Active Low.
    Bits:  3    PcslocWrEn(rw) - PCS_EN * override enable. Active Low
    Bits:  2    CmnTstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low.
    Bits:  1    CmnRefCkDrvLocwRen(rw) - CMNREFCKDRV* override enable. Active Low.
    Bits:  0    CmnRefCkBufLocWrEn(rw) - CMNREFCKBUF* override enable. Active Low.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 0x00008060
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RxDfeLocWrEn BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RxCdrRefCkLocWrEn BIT(6)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RstCmnPcsSoftLocWrEn BIT(5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_PcsOutSynthLocWrEn BIT(4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_PcslocWrEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnTstBusLocWrEn BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnRefCkDrvLocwRen BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnRefCkBufLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm - PMA TX/RX Terminal Overide Enable.
    Bits:  4    TxTermLocWrEn(rw) - TXTERM* override enable. Active Low.
    Bits:  3    SynthRefClkLocWrEn(rw) - SYNTHREFCK * override enable. Active Low.
    Bits:  2    SynthFDivLocWrEn(rw) - SYNTHFDIV* override enable. Active Low.
    Bits:  1    SynthCalFoscLocWrEn(rw) - SYNTHCALFOSC* override enable. Active Low.
    Bits:  0    RxTermLocWrEn(rw) - RXTERM* override enable. Active Low
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm 0x00008061
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_TxTermLocWrEn BIT(4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthRefClkLocWrEn BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthFDivLocWrEn BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthCalFoscLocWrEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_RxTermLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter - PMA Integral loop filter timer.
    Bits:  7:4  SynthDpifGainDelayCountPow2(rw) - Synth integral loop filter gear-shifting timer
    Bits:  3:0  RxDpifgainDelayCountPow2(rw) - RX integral loop filter gear-shifting timer
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter 0x00008065
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_SynthDpifGainDelayCountPow2(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_SynthDpifGainDelayCountPow2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_RxDpifgainDelayCountPow2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_RxDpifgainDelayCountPow2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 - PMA timer used for termination resistance.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 - PMA timer used for termination resistance.
    Bits:  7:0  CmnCaltcMeasCount(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 0x00008066
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 0x00008067
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAcmncal_CmnCaltcMeasCount(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAcmncal_CmnCaltcMeasCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0.
    Bits:  7:0  SynthCalFoscmeasCountMuxD0(rw) - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 0x0000806a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0_SynthCalFoscmeasCountMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0_SynthCalFoscmeasCountMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 1.
    Bits:  7:0  SynthCalFoscmeasCountMuxD1(rw) - SYNTH VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 0x0000806b
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1_SynthCalFoscmeasCountMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1_SynthCalFoscmeasCountMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 0.
    Bits:  7:0  SynthFDivMdivMuxD0(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 0.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 0x0000806c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0_SynthFDivMdivMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0_SynthFDivMdivMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 1.
    Bits:  7:0  SynthFDivMdivMuxD1(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 0x0000806d
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1_SynthFDivMdivMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1_SynthFDivMdivMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle - PMA lane Calibration Register
    Bits:  7:1  CmnCalTcMeasPow2dlyCount1(rw) - Timer used in the termination resistance calibration configuration
    Bits:  0    CmnCalTcmeashalFCycleEn(rw) - Enables one of the termination resistance calibration configuration register.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle 0x0000806e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcMeasPow2dlyCount1(_x) (((_x) & 0x7f) << 1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcMeasPow2dlyCount1_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcmeashalFCycleEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY - PMA lane Calibration Register
    Bits:  4:0  CmnCalTcMeasPow2dlyCount2(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY 0x0000806f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY_CmnCalTcMeasPow2dlyCount2(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY_CmnCalTcMeasPow2dlyCount2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr - PMA Rx Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr1(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr 0x00008070
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr_RxPPMWatchDogTmr1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr_RxPPMWatchDogTmr1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 - PMA Rx Watchdog Timer
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 - PMA Synth Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 0x00008071
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 0x00008073
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAWatchDogTmr2_RxPPMWatchDogTmr(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAWatchDogTmr2_RxPPMWatchDogTmr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register.
    Bits:  7:0  RxCDRCalFoscHscountMuxd1(rw) - CDR VCO calibration register.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 0x00008072
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1_RxCDRCalFoscHscountMuxd1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1_RxCDRCalFoscHscountMuxd1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 0x00008074
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0_CmnRpuOffsetUiS0q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0_CmnRpuOffsetUiS0q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 0x00008075
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1_CmnRpuOffsetUiS0q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1_CmnRpuOffsetUiS0q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q2(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 0x00008076
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2_CmnRpuOffsetUiS0q2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2_CmnRpuOffsetUiS0q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q3(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 0x00008077
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3_CmnRpuOffsetUiS0q3(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3_CmnRpuOffsetUiS0q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q4(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 0x00008078
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4_CmnRpuOffsetUiS0q4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4_CmnRpuOffsetUiS0q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q5(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 0x00008079
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b 0x0000807a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset5_CmnRpuOffsetUiS0q5(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset5_CmnRpuOffsetUiS0q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q6(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 0x0000807b
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6_CmnRpuOffsetUiS0q6(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6_CmnRpuOffsetUiS0q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q7(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 0x0000807c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7_CmnRpuOffsetUiS0q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7_CmnRpuOffsetUiS0q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 0x0000807d
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0_CmnRpuOffsetUiS1q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0_CmnRpuOffsetUiS1q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 0x0000807e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1_CmnRpuOffsetUiS1q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1_CmnRpuOffsetUiS1q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q2(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 0x0000807f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2_CmnRpuOffsetUiS1q2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2_CmnRpuOffsetUiS1q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 0x00008080
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 0x00008081
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 0x00008093
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset31_CmnRpuOffsetUiS3q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset31_CmnRpuOffsetUiS3q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q4(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 0x00008082
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4_CmnRpuOffsetUiS1q4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4_CmnRpuOffsetUiS1q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q5(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 0x00008083
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5_CmnRpuOffsetUiS1q5(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5_CmnRpuOffsetUiS1q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q6(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 0x00008084
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 0x00008085
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset61_CmnRpuOffsetUiS1q6(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset61_CmnRpuOffsetUiS1q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 0x00008086
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7_CmnRpuOffsetUiS1q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7_CmnRpuOffsetUiS1q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 0x00008087
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0_CmnRpuOffsetUiS2q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0_CmnRpuOffsetUiS2q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q1(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 0x00008088
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1_CmnRpuOffsetUiS2q1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1_CmnRpuOffsetUiS2q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q2(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 0x00008089
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2_CmnRpuOffsetUiS2q2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2_CmnRpuOffsetUiS2q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q3(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 0x0000808a
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 0x0000808b
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset32_CmnRpuOffsetUiS2q3(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset32_CmnRpuOffsetUiS2q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q4(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 0x0000808c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4_CmnRpuOffsetUiS2q4(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4_CmnRpuOffsetUiS2q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q5(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 0x0000808d
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 0x0000808e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset52_CmnRpuOffsetUiS2q5(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset52_CmnRpuOffsetUiS2q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q6(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 0x0000808f
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 0x00008090
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset62_CmnRpuOffsetUiS2q6(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset62_CmnRpuOffsetUiS2q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 0x00008091
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7_CmnRpuOffsetUiS1q7(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7_CmnRpuOffsetUiS1q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 0x00008092
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0_CmnRpuOffsetUiS3q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0_CmnRpuOffsetUiS3q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS4q0(rw) - Reset and power management unit timer.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 0x00008094
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 0x00008095
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset40_CmnRpuOffsetUiS4q0(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset40_CmnRpuOffsetUiS4q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount2(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 0x00008096
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2_RxCalRoamEyeMeasCount2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2_RxCalRoamEyeMeasCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount1(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 0x00008097
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1_RxCalRoamEyeMeasCount1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1_RxCalRoamEyeMeasCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAModDiv - PMA lane Control Register.
    Bits:  7:4  SynthfbDivModdiv(rw) -
    Bits:  3:0  RxCdrFbDivModDiv(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv 0x00008098
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_SynthfbDivModdiv(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_SynthfbDivModdiv_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_RxCdrFbDivModDiv(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_RxCdrFbDivModDiv_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode - PMA lane Reference Control Register.
    Bits:  6:1  SynthrefCkRefDivMuxD0(rw) - Synth VCO Reference clock divider.
    Bits:  0    PcieModeSel(rw) - PCI Express Mode or Multi Standard Select.0 - PMA enters multi-standard mode (including PCIe Gen3). Direct pin interface controls for TXEQ. RXEQ performed through memory registers.1 - PMA enters PCIe mode only. Direct pin interface controls for PCIe Gen 3. Look up tables for PCIe Gen1 / Gen2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode 0x00008099
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_SynthrefCkRefDivMuxD0(_x) (((_x) & 0x3f) << 1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_SynthrefCkRefDivMuxD0_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_PcieModeSel BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 - PMA lane Reference Control Register.
    Bits:  5:0  SynthrefCkRefDivMuxD1(rw) - Synth VCO Reference clock divider.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 0x0000809a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1_SynthrefCkRefDivMuxD1(_x) (((_x) & 0x3f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1_SynthrefCkRefDivMuxD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust - PMA Common/Synth lane Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust - PMA Common/Synth lane Control Register.
    Bits:  3:2  RxDfebiasAdjustMuxd1(rw) -
    Bits:  1:0  RxDfebiasAdjustMuxd0(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust 0x0000809b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust 0x0000809c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd1(_x) (((_x) & 0x3) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd0(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd0_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount 0x0000809d
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount_RxPpmPpmDriftCount1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount_RxPpmPpmDriftCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 0x0000809e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2_RxPpmPpmDriftCount2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2_RxPpmPpmDriftCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax 0x0000809f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax_RxPpmPpmDriftCount1(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax_RxPpmPpmDriftCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 0x000080a0
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2_RxPpmPpmDriftCount2(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2_RxPpmPpmDriftCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax 0x000080a1
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax_SynthPpmPpmDriftCount(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax_SynthPpmPpmDriftCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 0x000080a2
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2_SynthPpmPpmDriftCount(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2_SynthPpmPpmDriftCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 0x000080a3
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12_SynthPpmPpmDriftMax(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12_SynthPpmPpmDriftMax_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 0x000080a4
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22_SynthPpmPpmDriftMax(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22_SynthPpmPpmDriftMax_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize 0x000080aa
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 0x000080ab
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDivSsc_SynthFDivSscStepSize(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDivSsc_SynthFDivSscStepSize_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 - Synth Lane Control Register
    Bits:  0    SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 0x000080ac
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2_SynthFDivSscStepSize BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg - PCS Lane Status Register.
    Bits:  5    TstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low
    Bits:  3    TstBusLMonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  2    TstBusHMonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  1    TstBusAsyncEn(rw) - Testbus read or write enable. Active high
    Bits:  0    MemTstEn(rw) - Memory test enable. Active High
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg 0x00009000
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusLocWrEn BIT(5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusLMonitor BIT(3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusHMonitor BIT(2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusAsyncEn BIT(1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_MemTstEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b - PCS Lane Status Register .
    Bits:  7:0  TstBus(rw) - PHY Testbus status registers. Section 3.2
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 0x00009001
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS 0x00009002
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 0x00009003
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 0x00009004
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 0x00009005
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b 0x00009006
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2_TstBus(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2_TstBus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 - PCS Common/Synth Lane Loopback and BIST Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
    Bits:  7:0  VpcBistGenSkpDelay(rw) - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 0x00009007
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 0x00009008
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Vpc_VpcBistGenSkpDelay(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Vpc_VpcBistGenSkpDelay_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 - PCS BIST generator UDP pattern. LSB is transmitted first.
    Bits:  7:0  VpcsBistUdp(rw) - PCS BIST generator UDP pattern. LSB is transmitted first..
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 0x00009009
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 0x0000900a
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 0x0000900b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 0x0000900c
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 0x0000900d
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 0x0000900e
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 0x0000900f
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 0x00009010
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Udp_VpcsBistUdp(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Udp_VpcsBistUdp_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:3  VPcsEBufEmpty(rw) - Elastic buffer empty threshold
    Bits:  2:0  VPcsBistGenSkpCnt(rw) - PCS BIST generator SKP insertion count control. Number of SKP ordered sets to insert per delay cycle.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg 0x00009011
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsEBufEmpty(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsEBufEmpty_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsBistGenSkpCnt(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsBistGenSkpCnt_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:5  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
    Bits:  4:0  VPcsEbufFullM0(rw) - Elastic buffer full threshold, PCIe Gen1 and PCIe Gen2.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 0x00009012
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM1(_x) (((_x) & 0x7) << 5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM1_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM0(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7    VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:2  VPcsEBufRdThresholdM0(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen1 and PCIe Gen2.
    Bits:  1:0  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 0x00009013
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VpcsBufRdThresholdM1 BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEBufRdThresholdM0(_x) (((_x) & 0x1f) << 2)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEBufRdThresholdM0_of(_x) (((_x) >> 2) & 0x1f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEbufFullM1(_x) (((_x) & 0x3) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEbufFullM1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  3:0  VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 0x00009014
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3_VpcsBufRdThresholdM1(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3_VpcsBufRdThresholdM1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:0  VPcsEqCoarseiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg 0x00009016
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VpcsEqCoarseRunMask BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VPcsEqCoarseiterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VPcsEqCoarseiterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 0x00009017
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 0x00009023
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq2_VpcsEqCoarseRunMask(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq2_VpcsEqCoarseRunMask_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:1  VPcsEqCoarseStep(rw) - RX Equalization calibration coarse mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
    Bits:  0    VpcsEqClrValsEn(rw) -
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 0x00009018
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VPcsEqCoarseStep(_x) (((_x) & 0x1f) << 1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VPcsEqCoarseStep_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VpcsEqClrValsEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  2:0  VPcsEqDcGainGen2(rw) - PCIe Gen2 Equalization control - AGC high frequency gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 0x00009019
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqLoFreqAgcGainGen2(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqLoFreqAgcGainGen2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqDcGainGen2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqDcGainGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHoFreqAgcGainGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGaingen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 0x0000901a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqHoFreqAgcGainGen2(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqHoFreqAgcGainGen2_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqDfePstapGaingen2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqDfePstapGaingen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 0x0000901b
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 0x0000901c
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap2Gaingen2(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap2Gaingen2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap1Gaingen2(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap1Gaingen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqDefpstapf3DbLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency.
    Bits:  2:0  VPcsEqDefpstapf3DbGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE 3dB cut-off frequency.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 0x0000901d
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbLup0(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbGen2(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC low frequency gain.
    Bits:  2:0  VpcseqDcgainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 0x0000901e
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VPcsEqLoFreqAgcGainLup0(_x) (((_x) & 0x7) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VPcsEqLoFreqAgcGainLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VpcseqDcgainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VpcseqDcgainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHiFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 0x0000901f
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqHiFreqAgcGainLup0(_x) (((_x) & 0x1f) << 3)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqHiFreqAgcGainLup0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqDfePstapGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqDfePstapGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 0x00009020
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap2GainLup0(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap2GainLup0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap1GainLup0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap1GainLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap4GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-4 tap gain.
    Bits:  3:0  VPcsEqDfetap3GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-3 tap gain.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 0x00009021
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap4GainLup0(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap4GainLup0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap3GainLup0(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap3GainLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqFineRunMask(rw) - Equalization calibration fine mode variable control mask. Each bit controls whether or not an equalization variable will be swept during fine mode.0 - Do not sweep variable 1 - Sweep variable Bit 0 - AGC low frequency gain Bit 1 - AGC high frequency gain Bit 2 - AGC AC Boost Bit 3 - Pulse-shaping DFE 3dB cut-off frequency Bit 4 - Pulse-shaping DFE gain Bit 5 - Discontinuity DFE N-1 tap gain.
    Bits:  6:0  VPcsEqFineiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 0x00009022
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VpcsEqFineRunMask BIT(7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VPcsEqFineiterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VPcsEqFineiterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:5  VPcsEqLookupLastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
    Bits:  4:0  VpcsEqFineStep(rw) - RX Equalization calibration fine mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 0x00009024
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VPcsEqLookupLastCode(_x) (((_x) & 0x7) << 5)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VPcsEqLookupLastCode_of(_x) (((_x) >> 5) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VpcsEqFineStep(_x) (((_x) & 0x1f) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VpcsEqFineStep_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0 inputs.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 0x00009025
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 0x00009026
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 0x00009027
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq14_VpcsEqLookupCodeEn(_x) (((_x) & 0xff) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq14_VpcsEqLookupCodeEn_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:0  VPcsEqTimeOut(rw) - .
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 0x00009028
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18_VPcsEqTimeOut(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18_VPcsEqTimeOut_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  Vpcsg2SymaAlignUnLockCnt(rw) - PCIe Gen2 symbol alignment unlock control. Symbol aligner will not move to unlocked mode until this number of incorrectly aligned ALIGN symbols. Setting this value to 0 will result in the symbol aligner not being able to move out of the locked mode until either electrical idle or reset.
    Bits:  3:0  Vpcsg2SymaAlignLockCnt(rw) - PCIe Gen2 symbol alignment lock control. Symbol aligner will not move to locked mode until this number of correctly aligned ALIGN symbols are seen. Setting this value to 0 will result in the symbol aligner not attempting to align.
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 0x00009029
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignUnLockCnt(_x) (((_x) & 0xf) << 4)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignUnLockCnt_of(_x) (((_x) >> 4) & 0xf)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignLockCnt(_x) (((_x) & 0xf) << 0)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignLockCnt_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:1  VpcsEqLoFreqacGainSwpmin(rw) - .
    Bits:  0    PcsClkCtrl(rw) - .
*/
#define NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 0x0000902a
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_VpcsEqLoFreqacGainSwpmin(_x) (((_x) & 0x7) << 1)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_VpcsEqLoFreqacGainSwpmin_of(_x) (((_x) >> 1) & 0x7)
#define   NFP_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_PcsClkCtrl BIT(0)

#endif /* NFP6000_LONGNAMES */


#endif /* NFP6000_NBI_MAC_H */
