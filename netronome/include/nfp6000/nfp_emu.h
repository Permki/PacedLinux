/*
 * Copyright (C) 2013, Netronome Systems, Inc.  All rights reserved.
 *
 * Disclaimer: this file is provided without any warranty
 * as part of an early-access program, and the content is
 * bound to change before the final release.
 */

#ifndef NFP6000_EMU_H
#define NFP6000_EMU_H

/*================================================================*/
/* TGT 7                                                          */

/*----------------------------------------------------------------*/
/* CPP Address Map (CPP_BASE = IMB translation: island + indexes) */

/* CPP_BASE + NFP_EMU_MEM */
#define NFP_EMU_MEM                                          (0x000000)

/*----------------------------------------------------------------*/
/* XPB Address Map (XPB_BASE = NFP_XPB_ISLAND(island))          */

#define EMUX_BASE                                            (0xa0000)

/* XPB_BASE + NFP_EMUX_CFG + NFP_EMUX_CFG_* */
#define NFP_EMUX_CFG                                         (EMUX_BASE + 0x000000)
/* XPB_BASE + NFP_EMUX_LE[2] + NFP_EMUX_LE_* */
#define NFP_EMUX_LE(_x)                                      (EMUX_BASE + 0x040000 + ((_x) & 1) * 0x010000)
/* XPB_BASE + NFP_EMUX_Q_ECC + (nfp_ecc.h) */
#define NFP_EMUX_Q_ECC                                       (EMUX_BASE + 0x0c0000)
/* XPB_BASE + NFP_EMUX_EXTCFG + NFP_EMUX_EXTCFG_* */
#define NFP_EMUX_EXTCFG                                      (EMUX_BASE + 0x300000)
/* XPB_BASE + NFP_EMUX_DM_ECC[2][4] + (nfp_ecc.h) */
#define NFP_EMUX_DM_ECC(_x, _y)                               (EMUX_BASE + 0x320000 + (0x10000 * ((_x) & 1)) + (0x40 * ((_y) & 3)))
/* XPB_BASE + NFP_EMUX_DCACHE_ECC[16] + (nfp_ecc.h) */
#define NFP_EMUX_DCACHE_ECC(_x)                              (EMUX_BASE + 0x390000 + (0x40 * ((_x) & 0xf)))
/* XPB_BASE + NFP_EMUX_TCACHE[8] + NFP_EMUX_TCACHE_* */
#define NFP_EMUX_TCACHE(_x)                                  (EMUX_BASE + 0x400000 + ((_x) & 0x7) * 0x020000)
/* XPB_BASE + NFP_EMUX_TCACHE_ECC[8] + (nfp_ecc.h) */
#define NFP_EMUX_TCACHE_ECC(_x)                              (EMUX_BASE + 0x410000 + ((_x) & 0x7) * 0x020000)
/* XPB_BASE + NFP_EMUX_DCT[2] + NFP_EMUX_DCT_* */
#define NFP_EMUX_DCT(_x)                                     (EMUX_BASE + 0x500000 + (0x20000 * ((_x) & 1)))
/* XPB_BASE + NFP_EMUX_PHY[2] + NFP_EMUX_PHY_* */
#define NFP_EMUX_PHY(_x)                                     (EMUX_BASE + 0x510000 + (0x20000 * ((_x) & 1)))
/* XPB_BASE + NFP_EMUX_PLLCNTL + NFP_EMUX_PLLCNTL_* */
#define NFP_EMUX_PLLCNTL                                     (EMUX_BASE + 0x9f0000)

/*================================================================*/


/* HGID: 60515d2e075a */

#ifndef NFP6000_LONGNAMES

/*----------------------------------------------------------------
  Register: ConfigCPP - CPP MU Configuration Register
    Bits: 15:8  DirAccWays(rw) - When bit n in this field is set to 1, permit MU commands to direct access that way of the cache; when low, maps direct access to that way to High Locality of Reference accesses. If all 1s then all MU commands, with the exception of the Queue Engine commands highlighted in the Note below, are forced to be direct access. Note: This applies only the External Memory Units, all other Memory Units are direct access only
    Bits:  5    CPPErrorSuppress(rw) - If set, data errors generated for outbound CPP data buses will be suppressed internally and will not be sent out on the bus. CPP targets will suppress Push bus errors, CPP masters will suppress Pull bus errors.
    Bits:  4    CPPErrorIgnore(rw) - If set, data errors received on inbound CPP data buses will be ignored internally. CPP targets will ignore Pull bus errors, CPP masters will ignore Push bus errors.
    Bits:  3    DisableDualChRead(rw) - Controls the use of the CTM Bulk Engine performance feature to use both DCache channels for parallel non-dependent reads if the ordered commands are blocked/empty (CTM Only).
    Bits:  2:1  Addr32Bit(rw) - Select mode of addressing. Note that only Bulk, Atomic and Queue operations are supported in 32-bit modes.
    Bits:  0    IgnBulkAlign(rw) - If set, then CPP address[3;0] are ignored for bulk DRAM access, as with the IXP. If clear, then CPP address[3;0] are used, and unaligned accesses occur if they are not zero.
*/
#define NFP_EMUX_CFG_CFG                                     0x00000000
#define   NFP_EMUX_CFG_CFG_WAYS(_x)                          (((_x) & 0xff) << 8)
#define   NFP_EMUX_CFG_CFG_WAYS_of(_x)                       (((_x) >> 8) & 0xff)
#define   NFP_EMUX_CFG_CFG_ERROR_SUPPRESS                    BIT(5)
#define   NFP_EMUX_CFG_CFG_ERROR_IGNORE                      BIT(4)
#define   NFP_EMUX_CFG_CFG_DISABLE_DUAL_READ                 BIT(3)
#define     NFP_EMUX_CFG_CFG_DISABLE_DUAL_READ_ENABLED       (0 << 3)
#define     NFP_EMUX_CFG_CFG_DISABLE_DUAL_READ_DISABLED      BIT(3)
#define   NFP_EMUX_CFG_CFG_ADDRESSING(_x)                    (((_x) & 0x3) << 1)
#define   NFP_EMUX_CFG_CFG_ADDRESSING_of(_x)                 (((_x) >> 1) & 0x3)
#define     NFP_EMUX_CFG_CFG_ADDRESSING_40BIT                (0)
#define     NFP_EMUX_CFG_CFG_ADDRESSING_32BIT                (1)
#define     NFP_EMUX_CFG_CFG_ADDRESSING_32BITHLR             (2)
#define     NFP_EMUX_CFG_CFG_ADDRESSING_32BITLLR             (3)
#define   NFP_EMUX_CFG_CFG_BULK_ALIGN                        BIT(0)
#define     NFP_EMUX_CFG_CFG_BULK_ALIGN_ENFORCE              (0 << 0)
#define     NFP_EMUX_CFG_CFG_BULK_ALIGN_IGNORE               BIT(0)
/*----------------------------------------------------------------
  Register: ConfigVQDR[4] - Virtual QDR X Configuration Register
    Bits: 21:20 QueueType(rw) - Type of queues in the channel, similar to IXP IgnoreEOP and IgnoreSegCnt
    Bits: 15:0  MemWinBase(rw) - Bits [16;24] of full 40-bit MU address space for the base of the virtual QDR channel
*/
#define NFP_EMUX_CFG_VQDR(_x)                                (0x00000004 + (0x4 * ((_x) & 0x3)))
#define   NFP_EMUX_CFG_VQDR_QUEUE_TYPE(_x)                   (((_x) & 0x3) << 20)
#define   NFP_EMUX_CFG_VQDR_QUEUE_TYPE_of(_x)                (((_x) >> 20) & 0x3)
#define     NFP_EMUX_CFG_VQDR_QUEUE_TYPE_SEGMENTS            (0)
#define     NFP_EMUX_CFG_VQDR_QUEUE_TYPE_PACKETS             (1)
#define     NFP_EMUX_CFG_VQDR_QUEUE_TYPE_PACKETS32           (2)
#define     NFP_EMUX_CFG_VQDR_QUEUE_TYPE_BUFFERS             (3)
#define   NFP_EMUX_CFG_VQDR_BASE(_x)                         (((_x) & 0xffff) << 0)
#define   NFP_EMUX_CFG_VQDR_BASE_of(_x)                      (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: XpbTimeout - XPB Timeout
    Bits: 31:0  XpbTimeoutData(rw) - XPB timeout data.
*/
#define NFP_EMUX_CFG_XPB_TIMEOUT                             0x00000c00
#define   NFP_EMUX_CFG_XPB_TIMEOUT_XPB_TIMEOUT_DATA(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_CFG_XPB_TIMEOUT_XPB_TIMEOUT_DATA_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LookupEngineStatus - Lookup Engine Status Register. Contains read only status information for the Lookup Engine Instance.
    Bits:  3:0  ErrorCounter(ro) - It is a saturating counter and Holds the Error-count of Invalid opcode,pull-data-error,dcache-data-error
*/
#define NFP_EMUX_LE_LOOKUP_ENGINE_STATUS                     0x00000000
#define   NFP_EMUX_LE_LOOKUP_ENGINE_STATUS_ERROR_COUNTER(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_LE_LOOKUP_ENGINE_STATUS_ERROR_COUNTER_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LookupEngineConfig - Lookup Engine Configuration Register. Read/Write configuration information for the Lookup Engine.
    Bits:  8    Reset_Error_Counter(rw) - Reset Error-counter in LookupEngineStatus register when set.
    Bits:  7:6  MemoryLocalityConfig(rw) - What locality to use when accessing the External memory through Tcache
    Bits:  5:0  RecursionLimit(rw) - The recursion limit value is set to limit the maximum number of recursive lookups allowed
*/
#define NFP_EMUX_LE_LOOKUP_ENGINE_CONFIG                     0x00000004
#define   NFP_EMUX_LE_LOOKUP_ENGINE_CONFIG_RESET_ERR_COUNTER BIT(8)
#define   NFP_EMUX_LE_LOOKUP_ENGINE_CONFIG_LOCALITY_CONFIG(_x) (((_x) & 0x3) << 6)
#define   NFP_EMUX_LE_LOOKUP_ENGINE_CONFIG_LOCALITY_CONFIG_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_EMUX_LE_LOOKUP_ENGINE_CONFIG_RECURSION_LIMIT(_x) (((_x) & 0x3f) << 0)
#define   NFP_EMUX_LE_LOOKUP_ENGINE_CONFIG_RECURSION_LIMIT_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: AlgorithmicTableLocation[8] - Lookup Engine Algorithmic Table Types. These Read/Write registers define the location for each of the eight algorithmic table types.
    Bits:  5:1  Address(rw) - Upper address bits 32:28 of the table
    Bits:  0    Location(rw) - The location of the table
*/
#define NFP_EMUX_LE_ALGORITHMIC_TABLE_LOCATION(_x)           (0x00000008 + (0x4 * ((_x) & 0x7)))
#define   NFP_EMUX_LE_ALGORITHMIC_TABLE_LOCATION_ADDRESS(_x) (((_x) & 0x1f) << 1)
#define   NFP_EMUX_LE_ALGORITHMIC_TABLE_LOCATION_ADDRESS_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_EMUX_LE_ALGORITHMIC_TABLE_LOCATION_LOCATION    BIT(0)
#define     NFP_EMUX_LE_ALGORITHMIC_TABLE_LOCATION_LOCATION_INTERNAL (0 << 0)
#define     NFP_EMUX_LE_ALGORITHMIC_TABLE_LOCATION_LOCATION_EXTERNAL BIT(0)
/*----------------------------------------------------------------
  Register: DirectTableLocation - Lookup Engine Direct Table Type. Read/Write registers define the bits[32:28] of the Small Direct lookup table DLUT32 and DLUT24
    Bits:  5:1  Address(rw) - Upper address bits 32:28 of Small Direct Lookup Table - DLUT24 and DLUT32
*/
#define NFP_EMUX_LE_DIRECT_TABLE_LOCATION                    0x00000028
#define   NFP_EMUX_LE_DIRECT_TABLE_LOCATION_ADDRESS(_x)      (((_x) & 0x1f) << 1)
#define   NFP_EMUX_LE_DIRECT_TABLE_LOCATION_ADDRESS_of(_x)   (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: ConfigDrams - Data Mover DRAM Config
    Bits: 29:28 PacemkrMode(rw) - Pacemaker Mode: The data mover pacemaker controls how fast read transactions may be submitted to the DDR DRAM Controller. This must be set to 0 (OFF) when the ME core clock is faster than the DDR data rate (i.e. 1.2 GHz NFP with DDR3-1066); and set to 1 (1 transaction every 4 cycles) when the ME core clock is slower than the DDR data rate (i.e. 1.2 GHz NFP with DDR3-1333). Settings of 0x2 and 0x3 are not recommended, as these settings add additional delay with no additional benefit.
    Bits: 26:24 DCacheReqFIFODepth(rw) - Dcache Request FIFO Depth: This limits the number of transactions put in flight. For most configurations the default value is correct. However, when the P_CLK is slowed running against fast memory, the number of transactions put in flight into the SDRAM latency must be limited to prevent overrunning the data FIFOs. Note that a setting 0x7 (2 transactions in flight) is always safe.
    Bits: 23    TfawDisable(rw) - Controls the TFAW Timer within the Data Mover scheduler
    Bits: 22:20 Channels(rw) - Sets the number and type of DRAM channels and ranks in use.
    Bits: 19    Cabits(rw) - Configures the number fo DRAM column address bits being used
    Bits: 18:16 Rabits(rw) - Configures the number of DRAM row address bits being used
    Bits: 15:14 ToDwell(rw) - When set to N, the Data Mover scheduler will perform N+1 snapshots processing DRAM writes before moving on to DRAM reads.
    Bits: 13:12 FromDwell(rw) - When set to N, the Data Mover scheduler will perform N+1 snapshots processing DRAM reads before moving on to DRAM writes.
    Bits: 11:5  TRCTimer(rw) - Programmed to N, this configures the DRAM access scheduler to guarantee N+1 core clock cycles between the issue of accesses to the same bank. The purpose of this is to mock the TRC parameter of the memories in the scheduling algorithm. N has a range of 0 to 127 and should be set to (TRC/CoreClockPeriod)-1. This parameter can be approximate, as the actual TRC is configured in the DRAM controller.
    Bits:  4:0  SnapshotTmr(rw) - If set to N, the DRAM access scheduler will wait a minimum of N*4 clock cycles between snapshots of transaction requests in order to gather reads and writes together.
*/
#define NFP_EMUX_EXTCFG_DATA_MOVER                           0x00000000
#define   NFP_EMUX_EXTCFG_DATA_MOVER_PACE_MODE(_x)           (((_x) & 0x3) << 28)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_PACE_MODE_of(_x)        (((_x) >> 28) & 0x3)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_PACE_MODE_OFF         (0)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_PACE_MODE_4           (1)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_PACE_MODE_5           (2)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_PACE_MODE_6           (3)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH(_x)        (((_x) & 0x7) << 24)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_of(_x)     (((_x) >> 24) & 0x7)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_16       (0)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_14       (1)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_12       (2)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_10       (3)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_8        (4)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_6        (5)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_4        (6)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_DCACHE_DEPTH_2        (7)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_TFAW_DISABLE            BIT(23)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_TFAW_DISABLE_ENABLED  (0 << 23)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_TFAW_DISABLE_DISABLED BIT(23)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS(_x)            (((_x) & 0x7) << 20)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_of(_x)         (((_x) >> 20) & 0x7)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_SINGLE_64_BIT_ECC_1_RANK (0)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_SINGLE_64_BIT_ECC_2_RANK (1)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_SINGLE_32_BIT_ECC_1_RANK (4)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_SINGLE_32_BIT_ECC_2_RANK (5)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_DUAL_32_BIT_ECC_1_RANK (6)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_CHANNELS_DUAL_32_BIT_ECC_2_RANK (7)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_COL_BITS                BIT(19)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_COL_BITS_10           (0 << 19)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_COL_BITS_11           BIT(19)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS(_x)            (((_x) & 0x7) << 16)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS_of(_x)         (((_x) >> 16) & 0x7)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS_12           (0)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS_13           (1)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS_14           (2)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS_15           (3)
#define     NFP_EMUX_EXTCFG_DATA_MOVER_ROW_BITS_16           (4)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_TO_DWELL(_x)            (((_x) & 0x3) << 14)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_TO_DWELL_of(_x)         (((_x) >> 14) & 0x3)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_FROM_DWELL(_x)          (((_x) & 0x3) << 12)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_FROM_DWELL_of(_x)       (((_x) >> 12) & 0x3)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_TRC_TIMER(_x)           (((_x) & 0x7f) << 5)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_TRC_TIMER_of(_x)        (((_x) >> 5) & 0x7f)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_SNAPSHOT_TIMER(_x)      (((_x) & 0x1f) << 0)
#define   NFP_EMUX_EXTCFG_DATA_MOVER_SNAPSHOT_TIMER_of(_x)   (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: ConfigPerfTweaks - TCache Config - Performance Adjustments
    Bits:  2    LevelSets(rw) - Set to enable the one-way function mapping from MU address to cache/DRAM set addressing for memory load balancing
    Bits:  1    LvlChans(rw) - Set to enable the one-way function mapping from MU address to cache/DRAM channel addressing for memory load balancing
    Bits:  0    LevelBanks(rw) - Set to enable the one-way function mapping from MU address to cache/DRAM bank addressing for memory load balancing
*/
#define NFP_EMUX_EXTCFG_TCACHE_CFG                           0x00000004
#define   NFP_EMUX_EXTCFG_TCACHE_CFG_LEVEL_SETS              BIT(2)
#define     NFP_EMUX_EXTCFG_TCACHE_CFG_LEVEL_SETS_CLR        (0 << 2)
#define     NFP_EMUX_EXTCFG_TCACHE_CFG_LEVEL_SETS_SET        BIT(2)
#define   NFP_EMUX_EXTCFG_TCACHE_CFG_CHANNEL_LEVEL           BIT(1)
#define     NFP_EMUX_EXTCFG_TCACHE_CFG_CHANNEL_LEVEL_CLR     (0 << 1)
#define     NFP_EMUX_EXTCFG_TCACHE_CFG_CHANNEL_LEVEL_SET     BIT(1)
#define   NFP_EMUX_EXTCFG_TCACHE_CFG_BANK_LEVEL              BIT(0)
#define     NFP_EMUX_EXTCFG_TCACHE_CFG_BANK_LEVEL_CLR        (0 << 0)
#define     NFP_EMUX_EXTCFG_TCACHE_CFG_BANK_LEVEL_SET        BIT(0)
/*----------------------------------------------------------------
  Register: CommandStatus - Tag Bank N Command Status Register
    Bits:  2    Aborted(ro) - Indicates a command aborted; cleared by a read
    Bits:  1    Valid(ro) - Asserted when a tcache command has completed; cleared by a read
    Bits:  0    IntfErr(ro) - Asserted if an error occurred in a tcache command; cleared by a read
*/
#define NFP_EMUX_TCACHE_CMDST                                0x00000008
#define   NFP_EMUX_TCACHE_CMDST_ABORTED                      BIT(2)
#define   NFP_EMUX_TCACHE_CMDST_VALID                        BIT(1)
#define   NFP_EMUX_TCACHE_CMDST_ERROR                        BIT(0)
/*----------------------------------------------------------------
  Register: CommandControl - Tag Bank N Command Control Register
    Bits: 24:16 Set(wo) - Set to access
    Bits: 15:8  Ways(wo) - For write: mask of ways to write (one bit per way); for read: which way to read (binary encoding:upper five bits not used for read)
    Bits:  2:0  Type(wo) - Command type
*/
#define NFP_EMUX_TCACHE_CMDCTL                               0x0000000c
#define   NFP_EMUX_TCACHE_CMDCTL_SET(_x)                     (((_x) & 0x1ff) << 16)
#define   NFP_EMUX_TCACHE_CMDCTL_SET_of(_x)                  (((_x) >> 16) & 0x1ff)
#define   NFP_EMUX_TCACHE_CMDCTL_WAYS(_x)                    (((_x) & 0xff) << 8)
#define   NFP_EMUX_TCACHE_CMDCTL_WAYS_of(_x)                 (((_x) >> 8) & 0xff)
#define   NFP_EMUX_TCACHE_CMDCTL_TYPE(_x)                    (((_x) & 0x7) << 0)
#define   NFP_EMUX_TCACHE_CMDCTL_TYPE_of(_x)                 (((_x) >> 0) & 0x7)
#define     NFP_EMUX_TCACHE_CMDCTL_TYPE_WRWAYS               (4)
#define     NFP_EMUX_TCACHE_CMDCTL_TYPE_YES                  (5)
/*----------------------------------------------------------------
  Register: WriteData - Tag Bank N Write Data Register
    Bits: 18:16 State(rw) - State value to write to ways of set for write command
    Bits: 14:0  Tag(rw) - Tag data to write to ways of set for write command
*/
#define NFP_EMUX_TCACHE_WDATA                                0x00000010
#define   NFP_EMUX_TCACHE_WDATA_STATE(_x)                    (((_x) & 0x7) << 16)
#define   NFP_EMUX_TCACHE_WDATA_STATE_of(_x)                 (((_x) >> 16) & 0x7)
#define     NFP_EMUX_TCACHE_WDATA_STATE_LOCKED               (0)
#define     NFP_EMUX_TCACHE_WDATA_STATE_INUSE                (1)
#define     NFP_EMUX_TCACHE_WDATA_STATE_DIRTYHLR             (2)
#define     NFP_EMUX_TCACHE_WDATA_STATE_DIRTYLLR             (3)
#define     NFP_EMUX_TCACHE_WDATA_STATE_CLEANHLR             (4)
#define     NFP_EMUX_TCACHE_WDATA_STATE_CLEANLLR             (5)
#define   NFP_EMUX_TCACHE_WDATA_TAG(_x)                      (((_x) & 0x7fff) << 0)
#define   NFP_EMUX_TCACHE_WDATA_TAG_of(_x)                   (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: CommandResponse - Tag Bank N Command Response Register
    Bits: 31    Valid(ro) - Asserted if the command response is valid; cleared when a new command is set
    Bits: 30:28 Type(ro) - Type of command response
    Bits: 22:20 Way(ro) - Way in command response
    Bits: 18:16 State(ro) - State from command response
    Bits: 14:0  Tag(ro) - Tag from command response
*/
#define NFP_EMUX_TCACHE_CMDRESP                              0x00000014
#define   NFP_EMUX_TCACHE_CMDRESP_VALID                      BIT(31)
#define   NFP_EMUX_TCACHE_CMDRESP_TYPE(_x)                   (((_x) & 0x7) << 28)
#define   NFP_EMUX_TCACHE_CMDRESP_TYPE_of(_x)                (((_x) >> 28) & 0x7)
#define   NFP_EMUX_TCACHE_CMDRESP_WAY(_x)                    (((_x) & 0x7) << 20)
#define   NFP_EMUX_TCACHE_CMDRESP_WAY_of(_x)                 (((_x) >> 20) & 0x7)
#define   NFP_EMUX_TCACHE_CMDRESP_STATE(_x)                  (((_x) & 0x7) << 16)
#define   NFP_EMUX_TCACHE_CMDRESP_STATE_of(_x)               (((_x) >> 16) & 0x7)
#define   NFP_EMUX_TCACHE_CMDRESP_TAG(_x)                    (((_x) & 0x7fff) << 0)
#define   NFP_EMUX_TCACHE_CMDRESP_TAG_of(_x)                 (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: ReadData - Tag Bank N Read Data Register
    Bits: 18:16 State(ro) - State of way read using read command; only set when a read command response is valid
    Bits: 14:0  Tag(ro) - Tag of way read using read command; only set when a read command response is valid
*/
#define NFP_EMUX_TCACHE_RDATA                                0x00000018
#define   NFP_EMUX_TCACHE_RDATA_STATE(_x)                    (((_x) & 0x7) << 16)
#define   NFP_EMUX_TCACHE_RDATA_STATE_of(_x)                 (((_x) >> 16) & 0x7)
#define   NFP_EMUX_TCACHE_RDATA_TAG(_x)                      (((_x) & 0x7fff) << 0)
#define   NFP_EMUX_TCACHE_RDATA_TAG_of(_x)                   (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: PerformanceCounterMode - Performance counter mode
    Bits:  3:0  Data(rw) - Tag cache bank performance counter mode
*/
#define NFP_EMUX_TCACHE_PERFMODE                             0x00000034
#define   NFP_EMUX_TCACHE_PERFMODE_DATA(_x)                  (((_x) & 0xf) << 0)
#define   NFP_EMUX_TCACHE_PERFMODE_DATA_of(_x)               (((_x) >> 0) & 0xf)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_HOLD               (0)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_RESET              (1)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_STATS              (2)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_REQ0MON            (3)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_ALLOCCLEAN         (4)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_ALLOCRDY           (5)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_ALLOCEVICT         (6)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_DIRTY              (7)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_SETREQ             (8)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_FULLALL            (9)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_FULLHIGH           (10)
#define     NFP_EMUX_TCACHE_PERFMODE_DATA_FULLPAIRS          (11)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_00 -
    Bits: 31:16 VERSION(ro) - Holds the controller version number. READ-ONLY
    Bits: 11:8  DRAM_CLASS(rw) - Defines the mode of operation of the controller.
    Bits:  0    START(rw) - Initiate command processing in the controller. Set to 1 to initiate.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_00                         0x00000000
#define   NFP_EMUX_DCT_I_DENALI_CTL_00_VERSION(_x)           (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_00_VERSION_of(_x)        (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_00_DRAM_CLASS(_x)        (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_00_DRAM_CLASS_of(_x)     (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_00_START                 BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_01 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 17:16 MAX_CS_REG(ro) - Holds the maximum number of chip selects available. READ-ONLY
    Bits: 11:8  MAX_COL_REG(ro) - Holds the maximum width of column address in DRAMs. READ-ONLY
    Bits:  4:0  MAX_ROW_REG(ro) - Holds the maximum width of memory address bus. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_01                         0x00000004
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_MAX_CS_REG(_x)        (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_MAX_CS_REG_of(_x)     (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_MAX_COL_REG(_x)       (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_MAX_COL_REG_of(_x)    (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_MAX_ROW_REG(_x)       (((_x) & 0x1f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_01_MAX_ROW_REG_of(_x)    (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_02 -
    Bits: 31:24 OBSOLETE1(ro) - PADDING_BITS
    Bits: 23:0  TINIT(rw) - DRAM TINIT value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_02                         0x00000008
#define   NFP_EMUX_DCT_I_DENALI_CTL_02_OBSOLETE1(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_02_OBSOLETE1_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_02_TINIT(_x)             (((_x) & 0xffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_02_TINIT_of(_x)          (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_03 -
    Bits: 31:0  TRST_PWRON(rw) - Duration of memory reset during power-on initialization.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_03                         0x0000000c
#define   NFP_EMUX_DCT_I_DENALI_CTL_03_TRST_PWRON(_x)        (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_03_TRST_PWRON_of(_x)     (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_04 -
    Bits: 31:0  CKE_INACTIVE(rw) - Number of cycles after reset before CKE will be active.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_04                         0x00000010
#define   NFP_EMUX_DCT_I_DENALI_CTL_04_CKE_INACTIVE(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_04_CKE_INACTIVE_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_05 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  TCPD(rw) - DRAM TCPD value in cycles.
    Bits:  3:0  INITAREF(rw) - Number of auto-refresh commands to execute during DRAM initialization.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_05                         0x00000014
#define   NFP_EMUX_DCT_I_DENALI_CTL_05_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_05_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_05_TCPD(_x)              (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_05_TCPD_of(_x)           (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_05_INITAREF(_x)          (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_05_INITAREF_of(_x)       (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_06 -
    Bits: 29:24 CASLAT_LIN(rw) - Sets latency from read command send to data receive from/to controller. Bit (0) is half-cycle increment and the upper bits define memory CAS latency for the controller.
    Bits: 16    NO_CMD_INIT(rw) - Disable DRAM commands until the TDLL parameter has expired during initialization. Set to 1 to disable.
    Bits: 15:0  TDLL(rw) - DRAM TDLL value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_06                         0x00000018
#define   NFP_EMUX_DCT_I_DENALI_CTL_06_CASLAT_LIN(_x)        (((_x) & 0x3f) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_06_CASLAT_LIN_of(_x)     (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_06_NO_CMD_INIT           BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_06_TDLL(_x)              (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_06_TDLL_of(_x)           (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_07 -
    Bits: 28:24 TCCD(rw) - DRAM CAS-to-CAS value in cycles.
    Bits: 18:16 TBST_INT_INTERVAL(rw) - DRAM burst interrupt interval value in cycles.
    Bits: 12:8  ADDITIVE_LAT(rw) - DRAM additive latency value in cycles.
    Bits:  4:0  WRLAT(rw) - DRAM WRLAT value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_07                         0x0000001c
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_TCCD(_x)              (((_x) & 0x1f) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_TCCD_of(_x)           (((_x) >> 24) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_TBST_INT_INTERVAL(_x) (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_TBST_INT_INTERVAL_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_ADDITIVE_LAT(_x)      (((_x) & 0x1f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_ADDITIVE_LAT_of(_x)   (((_x) >> 8) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_WRLAT(_x)             (((_x) & 0x1f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_07_WRLAT_of(_x)          (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_08 -
    Bits: 27:24 TWTR(rw) - DRAM TWTR value in cycles.
    Bits: 23:16 TRAS_MIN(rw) - DRAM TRAS_MIN value in cycles.
    Bits: 15:8  TRC(rw) - DRAM TRC value in cycles.
    Bits:  7:0  TRRD(rw) - DRAM TRRD value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_08                         0x00000020
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TWTR(_x)              (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TWTR_of(_x)           (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TRAS_MIN(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TRAS_MIN_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TRC(_x)               (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TRC_of(_x)            (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TRRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_08_TRRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_09 -
    Bits: 28:24 TMRD(rw) - DRAM TMRD value in cycles.
    Bits: 19:16 TRTP(rw) - DRAM TRTP value in cycles.
    Bits: 13:8  TFAW(rw) - DRAM TFAW value in cycles.
    Bits:  4:0  TRP(rw) - DRAM TRP value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_09                         0x00000024
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TMRD(_x)              (((_x) & 0x1f) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TMRD_of(_x)           (((_x) >> 24) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TRTP(_x)              (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TRTP_of(_x)           (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TFAW(_x)              (((_x) & 0x3f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TFAW_of(_x)           (((_x) >> 8) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TRP(_x)               (((_x) & 0x1f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_09_TRP_of(_x)            (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_10 -
    Bits: 24:8  TRAS_MAX(rw) - DRAM TRAS_MAX value in cycles.
    Bits:  7:0  TMOD(rw) - Number of cycles after MRS command and before any other command.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_10                         0x00000028
#define   NFP_EMUX_DCT_I_DENALI_CTL_10_TRAS_MAX(_x)          (((_x) & 0x1ffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_10_TRAS_MAX_of(_x)       (((_x) >> 8) & 0x1ffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_10_TMOD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_10_TMOD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_11 -
    Bits: 31:24 TRCD(rw) - DRAM TRCD value in cycles.
    Bits: 16    WRITEINTERP(rw) - Allow controller to interrupt a write burst to the DRAMs with a read command. Set to 1 to allow interruption.
    Bits: 15:8  TCKESR(rw) - Minimum CKE low pulse width during a self-refresh.
    Bits:  2:0  TCKE(rw) - Minimum CKE pulse width.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_11                         0x0000002c
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_TRCD(_x)              (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_TRCD_of(_x)           (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_WRITEINTERP           BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_TCKESR(_x)            (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_TCKESR_of(_x)         (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_TCKE(_x)              (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_11_TCKE_of(_x)           (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_12 -
    Bits: 24    TRAS_LOCKOUT(rw) - Allow the controller to execute auto pre-charge commands before the TRAS_MIN parameter expires. Set to 1 to enable.
    Bits: 16    CONCURRENTAP(rw) - Allow controller to issue commands to other banks while a bank is in auto pre-charge. Set to 1 to enable.
    Bits:  8    AP(rw) - Enable auto pre-charge mode of controller. Set to 1 to enable.
    Bits:  5:0  TWR(rw) - DRAM TWR value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_12                         0x00000030
#define   NFP_EMUX_DCT_I_DENALI_CTL_12_TRAS_LOCKOUT          BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_12_CONCURRENTAP          BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_12_AP                    BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_12_TWR(_x)               (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_12_TWR_of(_x)            (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_13 -
    Bits: 24    REG_DIMM_ENABLE(rw) - Enable registered DIMM operation of the controller. Set to 1 to enable.
    Bits: 20:16 TRP_AB(rw) - DRAM TRP all bank value in cycles.
    Bits: 10:8  BSTLEN(rw) - Encoded burst length sent to DRAMs during initialization. Set to 1 for BL2, set to 2 for BL4, or set to 3 for BL8.
    Bits:  5:0  TDAL(rw) - DRAM TDAL value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_13                         0x00000034
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_REG_DIMM_ENABLE       BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_TRP_AB(_x)            (((_x) & 0x1f) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_TRP_AB_of(_x)         (((_x) >> 16) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_BSTLEN(_x)            (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_BSTLEN_of(_x)         (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_TDAL(_x)              (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_13_TDAL_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_14 -
    Bits: 24    TREF_ENABLE(rw) - Issue auto-refresh commands to the DRAMs at the interval defined in the TREF parameter. Set to 1 to enable.
    Bits: 16    RESERVED2(rw) - Reserved for future use. Must be cleared to 0x0.
    Bits:  8    AREFRESH(wo) - Initiate auto-refresh at the end of the current burst boundary. Set to 1 to trigger. WRITE-ONLY
    Bits:  1:0  ADDRESS_MIRRORING(rw) - Indicates which chip selects support address mirroring. Bit (0) controls cs0, bit (1) controls cs1, etc. Set each bit to 1 to enable.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_14                         0x00000038
#define   NFP_EMUX_DCT_I_DENALI_CTL_14_TREF_ENABLE           BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_14_RESERVED2             BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_14_AREFRESH              BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_14_ADDRESS_MIRRORING(_x) (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_14_ADDRESS_MIRRORING_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_15 -
    Bits: 29:16 TREF(rw) - DRAM TREF value in cycles.
    Bits:  9:0  TRFC(rw) - DRAM TRFC value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_15                         0x0000003c
#define   NFP_EMUX_DCT_I_DENALI_CTL_15_TREF(_x)              (((_x) & 0x3fff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_15_TREF_of(_x)           (((_x) >> 16) & 0x3fff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_15_TRFC(_x)              (((_x) & 0x3ff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_15_TRFC_of(_x)           (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_16 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  TPDEX(rw) - DRAM TPDEX value in cycles.
    Bits:  7:0  OBSOLETE0(ro) - PADDING_BITS
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_16                         0x00000040
#define   NFP_EMUX_DCT_I_DENALI_CTL_16_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_16_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_16_TPDEX(_x)             (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_16_TPDEX_of(_x)          (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_16_OBSOLETE0(_x)         (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_16_OBSOLETE0_of(_x)      (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_17 -
    Bits: 31:16 TXARD(rw) - DRAM TXARD value in cycles.
    Bits: 15:0  TXPDLL(rw) - DRAM TXPDLL value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_17                         0x00000044
#define   NFP_EMUX_DCT_I_DENALI_CTL_17_TXARD(_x)             (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_17_TXARD_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_17_TXPDLL(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_17_TXPDLL_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_18 -
    Bits: 31:16 TXSR(rw) - DRAM TXSR value in cycles.
    Bits: 15:0  TXARDS(rw) - DRAM TXARDS value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_18                         0x00000048
#define   NFP_EMUX_DCT_I_DENALI_CTL_18_TXSR(_x)              (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_18_TXSR_of(_x)           (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_18_TXARDS(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_18_TXARDS_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_19 -
    Bits: 24    SREFRESH_EXIT_NO_REFRESH(rw) - Disables the automatic refresh request associated with self-refresh exit. Set to 1 to disable.
    Bits: 16    PWRUP_SREFRESH_EXIT(rw) - Allow powerup via self-refresh instead of full memory initialization. Set to 1 to enable.
    Bits: 15:0  TXSNR(rw) - DRAM TXSNR value in cycles.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_19                         0x0000004c
#define   NFP_EMUX_DCT_I_DENALI_CTL_19_SREFRESH_EXIT_NO_REFRESH BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_19_PWRUP_SREFRESH_EXIT   BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_19_TXSNR(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_19_TXSNR_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_20 -
    Bits: 31:24 CKSRE(rw) - Clock hold delay on self-refresh entry.
    Bits: 17:16 LOWPOWER_REFRESH_ENABLE(rw) - Enable refreshes while in low power mode. Bit (0) controls cs0, bit (1) controls cs1, etc. Set each bit to 1 to disable.
    Bits: 10:8  CKE_DELAY(rw) - Additional cycles to delay CKE for status reporting.
    Bits:  0    ENABLE_QUICK_SREFRESH(rw) - Allow user to interrupt memory initialization to enter self-refresh mode. Set to 1 to allow interruption.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_20                         0x00000050
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_CKSRE(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_CKSRE_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_LOWPOWER_REFRESH_ENABLE(_x) (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_LOWPOWER_REFRESH_ENABLE_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_CKE_DELAY(_x)         (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_CKE_DELAY_of(_x)      (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_20_ENABLE_QUICK_SREFRESH BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_21 -
    Bits: 27:24 LP_ARB_STATE(ro) - Reports on the state of the arbiter. Bits (2:0) indicate which interface has control of the low power control module and bit (3) indicates if the software programmable interface has an active lock on the arbiter. For bits (2:0), value of 0 indicates module is idle, value of 1 indicates software programmable interface is in control, value of 2 indicates external pin interface is in control, value of 3 indicates automatic interface is in control, value of 4 indicates dynamic power control per chip select interface is in control, and value of 5 indicates that the controller is in control. READ-ONLY
    Bits: 21:16 LP_STATE(ro) - Low power state status parameter. Bits (4:0) indicate the current low power state and bit (5) set indicates that status bits are valid. READ-ONLY
    Bits: 15:8  LP_CMD(wo) - Low power software command request interface. Bit (0) controls exit, bit (1) controls entry, bits (4:2) define the low power state, bit (5) controls memory clock gating, bit (6) controls controller clock gating, and bit (7) controls lock. WRITE-ONLY
    Bits:  7:0  CKSRX(rw) - Clock stable delay on self-refresh exit.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_21                         0x00000054
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_LP_ARB_STATE(_x)      (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_LP_ARB_STATE_of(_x)   (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_LP_STATE(_x)          (((_x) & 0x3f) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_LP_STATE_of(_x)       (((_x) >> 16) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_LP_CMD(_x)            (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_LP_CMD_of(_x)         (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_CKSRX(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_21_CKSRX_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_22 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 17:16 LP_AUTO_MEM_GATE_EN(rw) - Enable memory clock gating when entering a low power state via the auto low power counters. Bit (0) controls power-down, and bit (1) controls self-refresh. Set each bit to 1 to enable.
    Bits: 10:8  LP_AUTO_EXIT_EN(rw) - Enable auto exit from each of the low power states when a read or write command enters the command queue. Bit (0) controls power-down, bit (1) controls self-refresh, and bit (2) controls self-refresh with memory and controller clock gating. Set each bit to 1 to enable.
    Bits:  2:0  LP_AUTO_ENTRY_EN(rw) - Enable auto entry into each of the low power states when the associated idle timer expires. Bit (0) controls power-down, bit (1) controls self-refresh, and bit (2) controls self-refresh with memory and controller clock gating. Set each bit to 1 to enable.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_22                         0x00000058
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_LP_AUTO_MEM_GATE_EN(_x) (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_LP_AUTO_MEM_GATE_EN_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_LP_AUTO_EXIT_EN(_x)   (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_LP_AUTO_EXIT_EN_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_LP_AUTO_ENTRY_EN(_x)  (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_22_LP_AUTO_ENTRY_EN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_23 -
    Bits: 31:24 LP_AUTO_SR_MC_GATE_IDLE(rw) - Number of long count sequences until the controller will place memory in self-refresh with controller and memory clock gating.
    Bits: 23:16 LP_AUTO_SR_IDLE(rw) - Number of long count sequences until the controller will place memory in self-refresh.
    Bits: 11:0  LP_AUTO_PD_IDLE(rw) - Defines the idle time until the controller will place memory in active power-down.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_23                         0x0000005c
#define   NFP_EMUX_DCT_I_DENALI_CTL_23_LP_AUTO_SR_MC_GATE_IDLE(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_23_LP_AUTO_SR_MC_GATE_IDLE_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_23_LP_AUTO_SR_IDLE(_x)   (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_23_LP_AUTO_SR_IDLE_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_23_LP_AUTO_PD_IDLE(_x)   (((_x) & 0xfff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_23_LP_AUTO_PD_IDLE_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_24 -
    Bits: 31:8  OBSOLETE1(ro) - PADDING_BITS
    Bits:  7:0  RESERVED0(rw) - Reserved for future use. Must be cleared to 0x0.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_24                         0x00000060
#define   NFP_EMUX_DCT_I_DENALI_CTL_24_OBSOLETE1(_x)         (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_24_OBSOLETE1_of(_x)      (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_24_RESERVED0(_x)         (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_24_RESERVED0_of(_x)      (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_25 -
    Bits: 25:0  WRITE_MODEREG(rw) - Write memory mode register data to the DRAMs. Bits (7:0) define the memory mode register number if bit (23) is set, bits (15:8) define the chip select if bit (24) is clear, bits (23:16) define which memory mode register/s to write, bit (24) defines whether all chip selects will be written, and bit (25) triggers the write.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_25                         0x00000064
#define   NFP_EMUX_DCT_I_DENALI_CTL_25_WRITE_MODEREG(_x)     (((_x) & 0x3ffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_25_WRITE_MODEREG_of(_x)  (((_x) >> 0) & 0x3ffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_26 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  MR0_DATA_0(rw) - Data to program into memory mode register 0 for chip select 0.
    Bits:  7:0  MRW_STATUS(ro) - Write memory mode register status. Bit (0) set indicates a WRITE_MODEREG parameter programming error. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_26                         0x00000068
#define   NFP_EMUX_DCT_I_DENALI_CTL_26_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_26_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_26_MR0_DATA_0(_x)        (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_26_MR0_DATA_0_of(_x)     (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_26_MRW_STATUS(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_26_MRW_STATUS_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_27 -
    Bits: 31:16 MR2_DATA_0(rw) - Data to program into memory mode register 2 for chip select 0.
    Bits: 15:0  MR1_DATA_0(rw) - Data to program into memory mode register 1 for chip select 0.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_27                         0x0000006c
#define   NFP_EMUX_DCT_I_DENALI_CTL_27_MR2_DATA_0(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_27_MR2_DATA_0_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_27_MR1_DATA_0(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_27_MR1_DATA_0_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_28 -
    Bits: 31:16 MR3_DATA_0(rw) - Data to program into memory mode register 3 for chip select 0.
    Bits: 15:0  MRSINGLE_DATA_0(rw) - Data to program into memory mode register single write to chip select 0.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_28                         0x00000070
#define   NFP_EMUX_DCT_I_DENALI_CTL_28_MR3_DATA_0(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_28_MR3_DATA_0_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_28_MRSINGLE_DATA_0(_x)   (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_28_MRSINGLE_DATA_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_29 -
    Bits: 31:16 MR1_DATA_1(rw) - Data to program into memory mode register 1 for chip select 1.
    Bits: 15:0  MR0_DATA_1(rw) - Data to program into memory mode register 0 for chip select 1.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_29                         0x00000074
#define   NFP_EMUX_DCT_I_DENALI_CTL_29_MR1_DATA_1(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_29_MR1_DATA_1_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_29_MR0_DATA_1(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_29_MR0_DATA_1_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_30 -
    Bits: 31:16 MRSINGLE_DATA_1(rw) - Data to program into memory mode register single write to chip select 1.
    Bits: 15:0  MR2_DATA_1(rw) - Data to program into memory mode register 2 for chip select 1.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_30                         0x00000078
#define   NFP_EMUX_DCT_I_DENALI_CTL_30_MRSINGLE_DATA_1(_x)   (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_30_MRSINGLE_DATA_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_30_MR2_DATA_1(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_30_MR2_DATA_1_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_31 -
    Bits: 25:24 BIST_RESULT(ro) - BIST operation status (pass/fail). Bit (0) indicates data check status and bit (1) indicates address check status. Value of 1 is a passing result. READ-ONLY
    Bits: 16    BIST_GO(wo) - Initiate a BIST operation. Set to 1 to trigger. WRITE-ONLY
    Bits: 15:0  MR3_DATA_1(rw) - Data to program into memory mode register 3 for chip select 1.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_31                         0x0000007c
#define   NFP_EMUX_DCT_I_DENALI_CTL_31_BIST_RESULT(_x)       (((_x) & 0x3) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_31_BIST_RESULT_of(_x)    (((_x) >> 24) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_31_BIST_GO               BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_31_MR3_DATA_1(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_31_MR3_DATA_1_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_32 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 16    BIST_ADDR_CHECK(rw) - Enable address checking with BIST operation. Set to 1 to enable.
    Bits:  8    BIST_DATA_CHECK(rw) - Enable data checking with BIST operation. Set to 1 to enable.
    Bits:  5:0  ADDR_SPACE(rw) - Sets the number of address bits to check during BIST operation.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_32                         0x00000080
#define   NFP_EMUX_DCT_I_DENALI_CTL_32_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_32_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_32_BIST_ADDR_CHECK       BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_32_BIST_DATA_CHECK       BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_32_ADDR_SPACE(_x)        (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_32_ADDR_SPACE_of(_x)     (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_33 -
    Bits: 31:0  BIST_START_ADDRESS(rw) - Start BIST checking at this address.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_33                         0x00000084
#define   NFP_EMUX_DCT_I_DENALI_CTL_33_BIST_START_ADDRESS(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_33_BIST_START_ADDRESS_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_34 -
    Bits: 31:8  OBSOLETE1(ro) - PADDING_BITS
    Bits:  2:0  BIST_START_ADDRESS(rw) - Start BIST checking at this address. This register is a continuation of DENALI_CTL_34, and contains bits [34:32] of BIST_START_ADDRESS.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_34                         0x00000088
#define   NFP_EMUX_DCT_I_DENALI_CTL_34_OBSOLETE1(_x)         (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_34_OBSOLETE1_of(_x)      (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_34_BIST_START_ADDRESS(_x) (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_34_BIST_START_ADDRESS_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_35 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_35                         0x0000008c
#define   NFP_EMUX_DCT_I_DENALI_CTL_35_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_35_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_36 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This register is a continuation of DENALI_CTL_35, and contains bits [63:32] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_36                         0x00000090
#define   NFP_EMUX_DCT_I_DENALI_CTL_36_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_36_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_37 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This register is a continuation of DENALI_CTL_35, and contains bits [95:64] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_37                         0x00000094
#define   NFP_EMUX_DCT_I_DENALI_CTL_37_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_37_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_38 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This register is a continuation of DENALI_CTL_35, and contains bits [127:96] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_38                         0x00000098
#define   NFP_EMUX_DCT_I_DENALI_CTL_38_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_38_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_39 -
    Bits: 27:16 ZQINIT(rw) - Number of cycles needed for a ZQINIT command.
    Bits: 15:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This bit field is a continuation of DENALI_CTL_35, and contains bits [143:128] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_39                         0x0000009c
#define   NFP_EMUX_DCT_I_DENALI_CTL_39_ZQINIT(_x)            (((_x) & 0xfff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_39_ZQINIT_of(_x)         (((_x) >> 16) & 0xfff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_39_BIST_DATA_MASK(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_39_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_40 -
    Bits: 27:16 ZQCS(rw) - Number of cycles needed for a ZQCS command.
    Bits: 11:0  ZQCL(rw) - Number of cycles needed for a ZQCL command.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_40                         0x000000a0
#define   NFP_EMUX_DCT_I_DENALI_CTL_40_ZQCS(_x)              (((_x) & 0xfff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_40_ZQCS_of(_x)           (((_x) >> 16) & 0xfff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_40_ZQCL(_x)              (((_x) & 0xfff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_40_ZQCL_of(_x)           (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_41 -
    Bits: 31:16 OBSOLETE2(ro) - PADDING_BITS
    Bits:  9:8  ZQ_ON_SREF_EXIT(rw) - Defines the type of ZQ calibration performed at self-refresh exit. Bit (0) selects ZQCS and bit (1) selects ZQCL. Set either bit to 1 to enable.
    Bits:  1:0  ZQ_REQ(wo) - User request to initiate a ZQ calibration. Bit (0) controls ZQCS and bit (1) controls ZQCL. Set either bit to 1 to trigger. WRITE-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_41                         0x000000a4
#define   NFP_EMUX_DCT_I_DENALI_CTL_41_OBSOLETE2(_x)         (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_41_OBSOLETE2_of(_x)      (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_41_ZQ_ON_SREF_EXIT(_x)   (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_41_ZQ_ON_SREF_EXIT_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_41_ZQ_REQ(_x)            (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_41_ZQ_REQ_of(_x)         (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_42 -
    Bits: 31:0  OBSOLETE0(ro) - PADDING_BITS
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_42                         0x000000a8
#define   NFP_EMUX_DCT_I_DENALI_CTL_42_OBSOLETE0(_x)         (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_42_OBSOLETE0_of(_x)      (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_43 -
    Bits: 26:24 ROW_DIFF(rw) - Difference between number of address pins available and number being used.
    Bits: 17:16 BANK_DIFF(rw) - Encoded number of banks on the DRAM(s).
    Bits:  8    ZQCS_ROTATE(rw) - Selects whether a ZQCS command will calibrate just one chip select or all chip selects. Set to 1 for rotating CS.
    Bits:  0    ZQ_IN_PROGRESS(ro) - Indicates that a ZQ command is currently in progress. Value of 1 indicates command in progress. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_43                         0x000000ac
#define   NFP_EMUX_DCT_I_DENALI_CTL_43_ROW_DIFF(_x)          (((_x) & 0x7) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_43_ROW_DIFF_of(_x)       (((_x) >> 24) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_43_BANK_DIFF(_x)         (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_43_BANK_DIFF_of(_x)      (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_43_ZQCS_ROTATE           BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_43_ZQ_IN_PROGRESS        BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_44 -
    Bits: 31:24 COMMAND_AGE_COUNT(rw) - Initial value of individual command aging counters for command aging.
    Bits: 23:16 AGE_COUNT(rw) - Initial value of master aging-rate counter for command aging.
    Bits: 11:8  APREBIT(rw) - Location of the auto pre-charge bit in the DRAM address.
    Bits:  2:0  COL_DIFF(rw) - Difference between number of column pins available and number being used.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_44                         0x000000b0
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_COMMAND_AGE_COUNT(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_COMMAND_AGE_COUNT_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_AGE_COUNT(_x)         (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_AGE_COUNT_of(_x)      (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_APREBIT(_x)           (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_APREBIT_of(_x)        (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_COL_DIFF(_x)          (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_44_COL_DIFF_of(_x)       (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_45 -
    Bits: 24    BIG_ENDIAN_EN(rw) - Set byte ordering as little endian or big endian. Set to 1 for big endian.
    Bits: 19:16 BURST_ON_FLY_BIT(rw) - Identifies the burst-on-fly bit in the memory mode registers.
    Bits:  9:8  CS_MAP(rw) - Defines which chip selects are active.
    Bits:  0    INHIBIT_DRAM_CMD(rw) - Inhibit read/write command traffic and associated bank commands. Set to 1 to inhibit.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_45                         0x000000b4
#define   NFP_EMUX_DCT_I_DENALI_CTL_45_BIG_ENDIAN_EN         BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_45_BURST_ON_FLY_BIT(_x)  (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_45_BURST_ON_FLY_BIT_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_45_CS_MAP(_x)            (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_45_CS_MAP_of(_x)         (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_45_INHIBIT_DRAM_CMD      BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_46 -
    Bits: 24    CTRLUPD_REQ_PER_AREF_EN(rw) - Enable an automatic controller-initiated update (dfi_ctrlupd_req) after every refresh. Set to 1 to enable.
    Bits: 16    CTRLUPD_REQ(wo) - Assert the DFI controller-initiated update request signal dfi_ctrlupd_req. Set to 1 to trigger. WRITE-ONLY
    Bits:  8    CONTROLLER_BUSY(ro) - Indicator that the controller is processing a command. Evaluates all ports for outstanding transactions. Value of 1 indicates controller busy. READ-ONLY
    Bits:  2:0  Q_FULLNESS(rw) - Quantity that determines command queue full.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_46                         0x000000b8
#define   NFP_EMUX_DCT_I_DENALI_CTL_46_CTRLUPD_REQ_PER_AREF_EN BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_46_CTRLUPD_REQ           BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_46_CONTROLLER_BUSY       BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_46_Q_FULLNESS(_x)        (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_46_Q_FULLNESS_of(_x)     (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_47 -
    Bits: 31:24 OBSOLETE1(ro) - PADDING_BITS
    Bits: 18:0  INT_STATUS(ro) - Status of interrupt features in the controller. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_47                         0x000000bc
#define   NFP_EMUX_DCT_I_DENALI_CTL_47_OBSOLETE1(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_47_OBSOLETE1_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_47_INT_STATUS(_x)        (((_x) & 0x7ffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_47_INT_STATUS_of(_x)     (((_x) >> 0) & 0x7ffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_48 -
    Bits: 31:0  OBSOLETE1(ro) - PADDING_BITS
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_48                         0x000000c0
#define   NFP_EMUX_DCT_I_DENALI_CTL_48_OBSOLETE1(_x)         (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_48_OBSOLETE1_of(_x)      (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_49 -
    Bits: 31:24 OBSOLETE1(ro) - PADDING_BITS
    Bits: 18:0  INT_MASK(rw) - Mask for controller_int signals from the INT_STATUS parameter.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_49                         0x000000c4
#define   NFP_EMUX_DCT_I_DENALI_CTL_49_OBSOLETE1(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_49_OBSOLETE1_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_49_INT_MASK(_x)          (((_x) & 0x7ffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_49_INT_MASK_of(_x)       (((_x) >> 0) & 0x7ffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_50 -
    Bits: 31:0  OUT_OF_RANGE_ADDR(ro) - Address of command that caused an out-of-range interrupt. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_50                         0x000000c8
#define   NFP_EMUX_DCT_I_DENALI_CTL_50_OUT_OF_RANGE_ADDR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_50_OUT_OF_RANGE_ADDR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_51 -
    Bits: 27:24 OUT_OF_RANGE_SOURCE_ID(ro) - Source ID of command that caused an out-of-range interrupt. READ-ONLY
    Bits: 21:16 OUT_OF_RANGE_TYPE(ro) - Type of command that caused an out-of-range interrupt. READ-ONLY
    Bits: 15:8  OUT_OF_RANGE_LENGTH(ro) - Length of command that caused an out-of-range interrupt. READ-ONLY
    Bits:  2:0  OUT_OF_RANGE_ADDR(ro) - Address of command that caused an out-of-range interrupt. This bit field is a continuation of DENALI_CTL_50, and contains bits [34:32] of OUT_OF_RANGE_ADDR. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_51                         0x000000cc
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_SOURCE_ID(_x) (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_SOURCE_ID_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_TYPE(_x) (((_x) & 0x3f) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_TYPE_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_LENGTH(_x) (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_LENGTH_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_ADDR(_x) (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_51_OUT_OF_RANGE_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_52 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_52                         0x000000d0
#define   NFP_EMUX_DCT_I_DENALI_CTL_52_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_52_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_53 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [63:32] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_53                         0x000000d4
#define   NFP_EMUX_DCT_I_DENALI_CTL_53_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_53_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_54 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [95:64] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_54                         0x000000d8
#define   NFP_EMUX_DCT_I_DENALI_CTL_54_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_54_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_55 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [127:96] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_55                         0x000000dc
#define   NFP_EMUX_DCT_I_DENALI_CTL_55_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_55_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_56 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [159:128] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_56                         0x000000e0
#define   NFP_EMUX_DCT_I_DENALI_CTL_56_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_56_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_57 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [191:160] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_57                         0x000000e4
#define   NFP_EMUX_DCT_I_DENALI_CTL_57_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_57_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_58 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [223:192] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_58                         0x000000e8
#define   NFP_EMUX_DCT_I_DENALI_CTL_58_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_58_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_59 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [255:224] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_59                         0x000000ec
#define   NFP_EMUX_DCT_I_DENALI_CTL_59_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_59_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_60 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [287:256] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_60                         0x000000f0
#define   NFP_EMUX_DCT_I_DENALI_CTL_60_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_60_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_61 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_61                         0x000000f4
#define   NFP_EMUX_DCT_I_DENALI_CTL_61_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_61_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_62 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [63:32] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_62                         0x000000f8
#define   NFP_EMUX_DCT_I_DENALI_CTL_62_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_62_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_63 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [95:64] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_63                         0x000000fc
#define   NFP_EMUX_DCT_I_DENALI_CTL_63_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_63_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_64 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [127:96] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_64                         0x00000100
#define   NFP_EMUX_DCT_I_DENALI_CTL_64_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_64_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_65 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [159:128] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_65                         0x00000104
#define   NFP_EMUX_DCT_I_DENALI_CTL_65_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_65_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_66 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [191:160] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_66                         0x00000108
#define   NFP_EMUX_DCT_I_DENALI_CTL_66_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_66_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_67 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [223:192] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_67                         0x0000010c
#define   NFP_EMUX_DCT_I_DENALI_CTL_67_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_67_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_68 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [255:224] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_68                         0x00000110
#define   NFP_EMUX_DCT_I_DENALI_CTL_68_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_68_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_69 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [287:256] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_69                         0x00000114
#define   NFP_EMUX_DCT_I_DENALI_CTL_69_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_69_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_70 -
    Bits: 31:0  BIST_FAIL_ADDR(ro) - Address of BIST error. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_70                         0x00000118
#define   NFP_EMUX_DCT_I_DENALI_CTL_70_BIST_FAIL_ADDR(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_70_BIST_FAIL_ADDR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_71 -
    Bits: 25:24 ODT_RD_MAP_CS1(rw) - Determines which chip(s) will have termination when a read occurs on chip select 1. Set bit X to enable termination on csX when cs1 is performing a read.
    Bits: 17:16 ODT_WR_MAP_CS0(rw) - Determines which chip(s) will have termination when a write occurs on chip select 0. Set bit X to enable termination on csX when cs0 is performing a write.
    Bits:  9:8  ODT_RD_MAP_CS0(rw) - Determines which chip(s) will have termination when a read occurs on chip select 0. Set bit X to enable termination on csX when cs0 is performing a read.
    Bits:  2:0  BIST_FAIL_ADDR(ro) - Address of BIST error. This register is a continuation of DENALI_CTL_70, and contains bits [34:32] of BIST_FAIL_ADDR. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_71                         0x0000011c
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_ODT_RD_MAP_CS1(_x)    (((_x) & 0x3) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_ODT_RD_MAP_CS1_of(_x) (((_x) >> 24) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_ODT_WR_MAP_CS0(_x)    (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_ODT_WR_MAP_CS0_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_ODT_RD_MAP_CS0(_x)    (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_ODT_RD_MAP_CS0_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_BIST_FAIL_ADDR(_x)    (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_71_BIST_FAIL_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_72 -
    Bits: 27:24 TODTH_RD(rw) - Defines the DRAM minimum ODT high time after an ODT assertion for a read command.
    Bits: 19:16 TODTH_WR(rw) - Defines the DRAM minimum ODT high time after an ODT assertion for a write command.
    Bits: 12:8  TODTL_2CMD(rw) - Defines the DRAM delay from an ODT de-assertion to the next non-write, non-read command.
    Bits:  1:0  ODT_WR_MAP_CS1(rw) - Determines which chip(s) will have termination when a write occurs on chip select 1. Set bit X to enable termination on csX when cs1 is performing a write.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_72                         0x00000120
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_TODTH_RD(_x)          (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_TODTH_RD_of(_x)       (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_TODTH_WR(_x)          (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_TODTH_WR_of(_x)       (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_TODTL_2CMD(_x)        (((_x) & 0x1f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_TODTL_2CMD_of(_x)     (((_x) >> 8) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_ODT_WR_MAP_CS1(_x)    (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_72_ODT_WR_MAP_CS1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_73 -
    Bits: 29:24 ADD_ODT_CLK_DIFFTYPE_DIFFCS(rw) - Additional delay to insert between different transaction types to different chip selects to meet ODT timing requirements.
    Bits: 19:16 ADD_ODT_CLK_W2R_SAMECS(rw) - Additional delay to insert between write and read transaction types to the same chip select to meet ODT timing requirements. Any value including 0x0 supported.
    Bits: 11:8  ADD_ODT_CLK_R2W_SAMECS(rw) - Additional delay to insert between read and write transaction types to the same chip select to meet ODT timing requirements.
    Bits:  0    ODT_EN(rw) - Enable support of DRAM ODT. When enabled, controller will assert and de-assert ODT output to DRAM as needed.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_73                         0x00000124
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ADD_ODT_CLK_DIFFTYPE_DIFFCS(_x) (((_x) & 0x3f) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ADD_ODT_CLK_DIFFTYPE_DIFFCS_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ADD_ODT_CLK_W2R_SAMECS(_x) (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ADD_ODT_CLK_W2R_SAMECS_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ADD_ODT_CLK_R2W_SAMECS(_x) (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ADD_ODT_CLK_R2W_SAMECS_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_73_ODT_EN                BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_74 -
    Bits: 26:24 W2R_DIFFCS_DLY(rw) - Additional delay to insert between writes and reads to different chip selects. Allowed programming dependent on memory system.
    Bits: 18:16 R2W_DIFFCS_DLY(rw) - Additional delay to insert between reads and writes to different chip selects. Program to a non-zero value.
    Bits: 10:8  R2R_DIFFCS_DLY(rw) - Additional delay to insert between reads to different chip selects. Program to a non-zero value.
    Bits:  3:0  ADD_ODT_CLK_SAMETYPE_DIFFCS(rw) - Additional delay to insert between same transaction types to different chip selects to meet ODT timing requirements.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_74                         0x00000128
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_W2R_DIFFCS_DLY(_x)    (((_x) & 0x7) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_W2R_DIFFCS_DLY_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_R2W_DIFFCS_DLY(_x)    (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_R2W_DIFFCS_DLY_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_R2R_DIFFCS_DLY(_x)    (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_R2R_DIFFCS_DLY_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_ADD_ODT_CLK_SAMETYPE_DIFFCS(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_74_ADD_ODT_CLK_SAMETYPE_DIFFCS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_75 -
    Bits: 26:24 W2R_SAMECS_DLY(rw) - Additional delay to insert between writes and reads to the same chip select.
    Bits: 18:16 R2W_SAMECS_DLY(rw) - Additional delay to insert between reads and writes to the same chip select. Program to a non-zero value.
    Bits: 10:8  R2R_SAMECS_DLY(rw) - Additional delay to insert between two reads to the same chip select. Any value including 0x0 supported.
    Bits:  2:0  W2W_DIFFCS_DLY(rw) - Additional delay to insert between writes and writes to different chip selects. Program to a non-zero value.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_75                         0x0000012c
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_W2R_SAMECS_DLY(_x)    (((_x) & 0x7) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_W2R_SAMECS_DLY_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_R2W_SAMECS_DLY(_x)    (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_R2W_SAMECS_DLY_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_R2R_SAMECS_DLY(_x)    (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_R2R_SAMECS_DLY_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_W2W_DIFFCS_DLY(_x)    (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_75_W2W_DIFFCS_DLY_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_76 -
    Bits: 25:24 SW_LEVELING_MODE(rw) - Defines the leveling operation for software leveling. Set to 0 for none, set to 1 for write leveling, set to 2 for data eye training, or set to 3 for gate training.
    Bits: 20:16 OCD_ADJUST_PUP_CS_0(rw) - OCD pull-up adjust setting for DRAMs for chip select 0.
    Bits: 12:8  OCD_ADJUST_PDN_CS_0(rw) - OCD pull-down adjust setting for DRAMs for chip select 0.
    Bits:  2:0  W2W_SAMECS_DLY(rw) - Additional delay to insert between two writes to the same chip select. Any value including 0x0 supported.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_76                         0x00000130
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_SW_LEVELING_MODE(_x)  (((_x) & 0x3) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_SW_LEVELING_MODE_of(_x) (((_x) >> 24) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_OCD_ADJUST_PUP_CS_0(_x) (((_x) & 0x1f) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_OCD_ADJUST_PUP_CS_0_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_OCD_ADJUST_PDN_CS_0(_x) (((_x) & 0x1f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_OCD_ADJUST_PDN_CS_0_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_W2W_SAMECS_DLY(_x)    (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_76_W2W_SAMECS_DLY_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_77 -
    Bits: 24    SWLVL_OP_DONE(ro) - Signals that software leveling is currently in progress. Value of 1 indicates operation complete. READ-ONLY
    Bits: 16    SWLVL_EXIT(wo) - User request to exit software leveling. Set to 1 to exit. WRITE-ONLY
    Bits:  8    SWLVL_START(wo) - User request to initiate software leveling of type in the SW_LEVELING_MODE parameter. Set to 1 to trigger. WRITE-ONLY
    Bits:  0    SWLVL_LOAD(wo) - User request to load delays and execute software leveling. Set to 1 to trigger. WRITE-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_77                         0x00000134
#define   NFP_EMUX_DCT_I_DENALI_CTL_77_SWLVL_OP_DONE         BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_77_SWLVL_EXIT            BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_77_SWLVL_START           BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_77_SWLVL_LOAD            BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_78 -
    Bits: 31:24 SWLVL_RESP_2(ro) - Leveling response for data slice 2. READ-ONLY
    Bits: 23:16 SWLVL_RESP_1(ro) - Leveling response for data slice 1. READ-ONLY
    Bits: 15:8  SWLVL_RESP_0(ro) - Leveling response for data slice 0. READ-ONLY
    Bits:  3:0  LVL_STATUS(ro) - Status of write level, data eye training, and gate training requests. This is used with the LVL_REQ interrupt. Bit (0) correlates to a write leveling request, bit (1) correlates to a data eye training request, bit (2) correlates to a gate training request, and bit (3) is reserved. Value of 1 indicates request received. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_78                         0x00000138
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_SWLVL_RESP_2(_x)      (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_SWLVL_RESP_2_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_SWLVL_RESP_1(_x)      (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_SWLVL_RESP_1_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_SWLVL_RESP_0(_x)      (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_SWLVL_RESP_0_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_LVL_STATUS(_x)        (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_78_LVL_STATUS_of(_x)     (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_79 -
    Bits: 31:24 SWLVL_RESP_6(ro) - Leveling response for data slice 6. READ-ONLY
    Bits: 23:16 SWLVL_RESP_5(ro) - Leveling response for data slice 5. READ-ONLY
    Bits: 15:8  SWLVL_RESP_4(ro) - Leveling response for data slice 4. READ-ONLY
    Bits:  7:0  SWLVL_RESP_3(ro) - Leveling response for data slice 3. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_79                         0x0000013c
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_6(_x)      (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_6_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_5(_x)      (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_5_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_4(_x)      (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_4_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_3(_x)      (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_79_SWLVL_RESP_3_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_80 -
    Bits: 24    WRLVL_CS(rw) - Specifies the target chip select for the write leveling operation initiated through the WRLVL_REQ parameter.
    Bits: 16    WRLVL_REQ(wo) - User request to initiate write leveling. Set to 1 to trigger. WRITE-ONLY
    Bits: 15:8  SWLVL_RESP_8(ro) - Leveling response for data slice 8. READ-ONLY
    Bits:  7:0  SWLVL_RESP_7(ro) - Leveling response for data slice 7. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_80                         0x00000140
#define   NFP_EMUX_DCT_I_DENALI_CTL_80_WRLVL_CS              BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_80_WRLVL_REQ             BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_80_SWLVL_RESP_8(_x)      (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_80_SWLVL_RESP_8_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_80_SWLVL_RESP_7(_x)      (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_80_SWLVL_RESP_7_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_81 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 16    WRLVL_EN(rw) - Enable the MC write leveling module. Set to 1 to enable.
    Bits: 13:8  WLMRD(rw) - Delay from issuing MRS to first write leveling strobe.
    Bits:  5:0  WLDQSEN(rw) - Delay from issuing MRS to first DQS strobe for write leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_81                         0x00000144
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_WRLVL_EN              BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_WLMRD(_x)             (((_x) & 0x3f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_WLMRD_of(_x)          (((_x) >> 8) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_WLDQSEN(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_81_WLDQSEN_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_82 -
    Bits: 31:16 OBSOLETE1(ro) - PADDING_BITS
    Bits: 15:0  WRLVL_INTERVAL(rw) - Number of long count sequences counted between automatic write leveling commands.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_82                         0x00000148
#define   NFP_EMUX_DCT_I_DENALI_CTL_82_OBSOLETE1(_x)         (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_82_OBSOLETE1_of(_x)      (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_82_WRLVL_INTERVAL(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_82_WRLVL_INTERVAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_83 -
    Bits: 24    WRLVL_REG_EN(rw) - Enable the dfi_wrlvl_delay_X signals to be programmed when hardware and software leveling are disabled. Set to 1 to enable.
    Bits: 19:0  WRLVL_ERROR_STATUS(ro) - Holds the error associated with the write level error interrupt. Uppermost bit set indicates a TDFI_WRLVL_RESP parameter violation. Next uppermost bit set indicates a TDFI_WRLVL_MAX parameter violation. Lower bits are reserved. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_83                         0x0000014c
#define   NFP_EMUX_DCT_I_DENALI_CTL_83_WRLVL_REG_EN          BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_83_WRLVL_ERROR_STATUS(_x) (((_x) & 0xfffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_83_WRLVL_ERROR_STATUS_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_84 -
    Bits: 31:16 WRLVL_DELAY_1(rw) - Number of delay elements for write data slice 1. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_0(rw) - Number of delay elements for write data slice 0. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_84                         0x00000150
#define   NFP_EMUX_DCT_I_DENALI_CTL_84_WRLVL_DELAY_1(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_84_WRLVL_DELAY_1_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_84_WRLVL_DELAY_0(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_84_WRLVL_DELAY_0_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_85 -
    Bits: 31:16 WRLVL_DELAY_3(rw) - Number of delay elements for write data slice 3. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_2(rw) - Number of delay elements for write data slice 2. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_85                         0x00000154
#define   NFP_EMUX_DCT_I_DENALI_CTL_85_WRLVL_DELAY_3(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_85_WRLVL_DELAY_3_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_85_WRLVL_DELAY_2(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_85_WRLVL_DELAY_2_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_86 -
    Bits: 31:16 WRLVL_DELAY_5(rw) - Number of delay elements for write data slice 5. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_4(rw) - Number of delay elements for write data slice 4. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_86                         0x00000158
#define   NFP_EMUX_DCT_I_DENALI_CTL_86_WRLVL_DELAY_5(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_86_WRLVL_DELAY_5_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_86_WRLVL_DELAY_4(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_86_WRLVL_DELAY_4_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_87 -
    Bits: 31:16 WRLVL_DELAY_7(rw) - Number of delay elements for write data slice 7. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_6(rw) - Number of delay elements for write data slice 6. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_87                         0x0000015c
#define   NFP_EMUX_DCT_I_DENALI_CTL_87_WRLVL_DELAY_7(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_87_WRLVL_DELAY_7_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_87_WRLVL_DELAY_6(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_87_WRLVL_DELAY_6_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_88 -
    Bits: 24    RDLVL_GATE_REQ(wo) - User request to initiate gate training. Set to 1 to trigger. WRITE-ONLY
    Bits: 16    RDLVL_REQ(wo) - User request to initiate data eye training. Set to 1 to trigger. WRITE-ONLY
    Bits: 15:0  WRLVL_DELAY_8(rw) - Number of delay elements for write data slice 8. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_88                         0x00000160
#define   NFP_EMUX_DCT_I_DENALI_CTL_88_RDLVL_GATE_REQ        BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_88_RDLVL_REQ             BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_88_WRLVL_DELAY_8(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_88_WRLVL_DELAY_8_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_89 -
    Bits: 24    RDLVL_REG_EN(rw) - Enable the dfi_rdlvl_delay_X signals to be programmed when hardware and software leveling are disabled. Set to 1 to enable.
    Bits: 16    RDLVL_BEGIN_DELAY_EN(rw) - Enable the data eye training logic to find the DQ data eye. Set to 1 to enable.
    Bits:  8    RDLVL_EDGE(rw) - Specifies the read DQS edge positive or negative to be used for the data eye training operation. Set to 1 for negative edge.
    Bits:  0    RDLVL_CS(rw) - Specifies the target chip select for the data eye training operation initiated through the RDLVL_REQ parameter or the gate training operation initiated through the RDLVL_GATE_REQ parameter.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_89                         0x00000164
#define   NFP_EMUX_DCT_I_DENALI_CTL_89_RDLVL_REG_EN          BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_89_RDLVL_BEGIN_DELAY_EN  BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_89_RDLVL_EDGE            BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_89_RDLVL_CS              BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_90 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_BEGIN_DELAY_0(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 0. READ-ONLY
    Bits:  0    RDLVL_GATE_REG_EN(rw) - Enable the dfi_rdlvl_gate_delay_X signals to be programmed when hardware and software leveling are disabled. Set to 1 to enable.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_90                         0x00000168
#define   NFP_EMUX_DCT_I_DENALI_CTL_90_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_90_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_90_RDLVL_BEGIN_DELAY_0(_x) (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_90_RDLVL_BEGIN_DELAY_0_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_90_RDLVL_GATE_REG_EN     BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_91 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_0(ro) - Calculated midpoint of DQ delay for data slice 0. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_0(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 0. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_91                         0x0000016c
#define   NFP_EMUX_DCT_I_DENALI_CTL_91_RDLVL_MIDPOINT_DELAY_0(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_91_RDLVL_MIDPOINT_DELAY_0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_91_RDLVL_END_DELAY_0(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_91_RDLVL_END_DELAY_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_92 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_0(rw) - Direction of the data eye midpoint delay offset for data slice 0. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_0(rw) - Offset the data eye midpoint delay for data slice 0.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_92                         0x00000170
#define   NFP_EMUX_DCT_I_DENALI_CTL_92_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_92_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_92_RDLVL_OFFSET_DIR_0    BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_92_RDLVL_OFFSET_DELAY_0(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_92_RDLVL_OFFSET_DELAY_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_93 -
    Bits: 31:16 RDLVL_GATE_DELAY_0(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 0. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_0(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 0. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_93                         0x00000174
#define   NFP_EMUX_DCT_I_DENALI_CTL_93_RDLVL_GATE_DELAY_0(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_93_RDLVL_GATE_DELAY_0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_93_RDLVL_DELAY_0(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_93_RDLVL_DELAY_0_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_94 -
    Bits: 31:16 RDLVL_END_DELAY_1(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 1. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_1(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 1. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_94                         0x00000178
#define   NFP_EMUX_DCT_I_DENALI_CTL_94_RDLVL_END_DELAY_1(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_94_RDLVL_END_DELAY_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_94_RDLVL_BEGIN_DELAY_1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_94_RDLVL_BEGIN_DELAY_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_95 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_1(rw) - Offset the data eye midpoint delay for data slice 1.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_1(ro) - Calculated midpoint of DQ delay for data slice 1. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_95                         0x0000017c
#define   NFP_EMUX_DCT_I_DENALI_CTL_95_RDLVL_OFFSET_DELAY_1(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_95_RDLVL_OFFSET_DELAY_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_95_RDLVL_MIDPOINT_DELAY_1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_95_RDLVL_MIDPOINT_DELAY_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_96 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_1(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 1. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_1(rw) - Direction of the data eye midpoint delay offset for data slice 1. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_96                         0x00000180
#define   NFP_EMUX_DCT_I_DENALI_CTL_96_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_96_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_96_RDLVL_DELAY_1(_x)     (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_96_RDLVL_DELAY_1_of(_x)  (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_96_RDLVL_OFFSET_DIR_1    BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_97 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_2(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 2. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_1(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 1. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_97                         0x00000184
#define   NFP_EMUX_DCT_I_DENALI_CTL_97_RDLVL_BEGIN_DELAY_2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_97_RDLVL_BEGIN_DELAY_2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_97_RDLVL_GATE_DELAY_1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_97_RDLVL_GATE_DELAY_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_98 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_2(ro) - Calculated midpoint of DQ delay for data slice 2. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_2(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 2. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_98                         0x00000188
#define   NFP_EMUX_DCT_I_DENALI_CTL_98_RDLVL_MIDPOINT_DELAY_2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_98_RDLVL_MIDPOINT_DELAY_2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_98_RDLVL_END_DELAY_2(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_98_RDLVL_END_DELAY_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_99 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_2(rw) - Direction of the data eye midpoint delay offset for data slice 2. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_2(rw) - Offset the data eye midpoint delay for data slice 2.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_99                         0x0000018c
#define   NFP_EMUX_DCT_I_DENALI_CTL_99_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_99_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_99_RDLVL_OFFSET_DIR_2    BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_99_RDLVL_OFFSET_DELAY_2(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_99_RDLVL_OFFSET_DELAY_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_100 -
    Bits: 31:16 RDLVL_GATE_DELAY_2(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 2. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_2(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 2. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_100                        0x00000190
#define   NFP_EMUX_DCT_I_DENALI_CTL_100_RDLVL_GATE_DELAY_2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_100_RDLVL_GATE_DELAY_2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_100_RDLVL_DELAY_2(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_100_RDLVL_DELAY_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_101 -
    Bits: 31:16 RDLVL_END_DELAY_3(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 3. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_3(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 3. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_101                        0x00000194
#define   NFP_EMUX_DCT_I_DENALI_CTL_101_RDLVL_END_DELAY_3(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_101_RDLVL_END_DELAY_3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_101_RDLVL_BEGIN_DELAY_3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_101_RDLVL_BEGIN_DELAY_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_102 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_3(rw) - Offset the data eye midpoint delay for data slice 3.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_3(ro) - Calculated midpoint of DQ delay for data slice 3. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_102                        0x00000198
#define   NFP_EMUX_DCT_I_DENALI_CTL_102_RDLVL_OFFSET_DELAY_3(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_102_RDLVL_OFFSET_DELAY_3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_102_RDLVL_MIDPOINT_DELAY_3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_102_RDLVL_MIDPOINT_DELAY_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_103 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_3(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 3. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_3(rw) - Direction of the data eye midpoint delay offset for data slice 3. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_103                        0x0000019c
#define   NFP_EMUX_DCT_I_DENALI_CTL_103_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_103_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_103_RDLVL_DELAY_3(_x)    (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_103_RDLVL_DELAY_3_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_103_RDLVL_OFFSET_DIR_3   BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_104 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_4(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 4. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_3(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 3. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_104                        0x000001a0
#define   NFP_EMUX_DCT_I_DENALI_CTL_104_RDLVL_BEGIN_DELAY_4(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_104_RDLVL_BEGIN_DELAY_4_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_104_RDLVL_GATE_DELAY_3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_104_RDLVL_GATE_DELAY_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_105 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_4(ro) - Calculated midpoint of DQ delay for data slice 4. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_4(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 4. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_105                        0x000001a4
#define   NFP_EMUX_DCT_I_DENALI_CTL_105_RDLVL_MIDPOINT_DELAY_4(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_105_RDLVL_MIDPOINT_DELAY_4_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_105_RDLVL_END_DELAY_4(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_105_RDLVL_END_DELAY_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_106 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_4(rw) - Direction of the data eye midpoint delay offset for data slice 4. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_4(rw) - Offset the data eye midpoint delay for data slice 4.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_106                        0x000001a8
#define   NFP_EMUX_DCT_I_DENALI_CTL_106_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_106_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_106_RDLVL_OFFSET_DIR_4   BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_106_RDLVL_OFFSET_DELAY_4(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_106_RDLVL_OFFSET_DELAY_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_107 -
    Bits: 31:16 RDLVL_GATE_DELAY_4(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 4. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_4(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 4. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_107                        0x000001ac
#define   NFP_EMUX_DCT_I_DENALI_CTL_107_RDLVL_GATE_DELAY_4(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_107_RDLVL_GATE_DELAY_4_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_107_RDLVL_DELAY_4(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_107_RDLVL_DELAY_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_108 -
    Bits: 31:16 RDLVL_END_DELAY_5(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 5. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_5(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 5. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_108                        0x000001b0
#define   NFP_EMUX_DCT_I_DENALI_CTL_108_RDLVL_END_DELAY_5(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_108_RDLVL_END_DELAY_5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_108_RDLVL_BEGIN_DELAY_5(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_108_RDLVL_BEGIN_DELAY_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_109 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_5(rw) - Offset the data eye midpoint delay for data slice 5.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_5(ro) - Calculated midpoint of DQ delay for data slice 5. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_109                        0x000001b4
#define   NFP_EMUX_DCT_I_DENALI_CTL_109_RDLVL_OFFSET_DELAY_5(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_109_RDLVL_OFFSET_DELAY_5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_109_RDLVL_MIDPOINT_DELAY_5(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_109_RDLVL_MIDPOINT_DELAY_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_110 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_5(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 5. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_5(rw) - Direction of the data eye midpoint delay offset for data slice 5. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_110                        0x000001b8
#define   NFP_EMUX_DCT_I_DENALI_CTL_110_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_110_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_110_RDLVL_DELAY_5(_x)    (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_110_RDLVL_DELAY_5_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_110_RDLVL_OFFSET_DIR_5   BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_111 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_6(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 6. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_5(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 5. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_111                        0x000001bc
#define   NFP_EMUX_DCT_I_DENALI_CTL_111_RDLVL_BEGIN_DELAY_6(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_111_RDLVL_BEGIN_DELAY_6_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_111_RDLVL_GATE_DELAY_5(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_111_RDLVL_GATE_DELAY_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_112 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_6(ro) - Calculated midpoint of DQ delay for data slice 6. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_6(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 6. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_112                        0x000001c0
#define   NFP_EMUX_DCT_I_DENALI_CTL_112_RDLVL_MIDPOINT_DELAY_6(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_112_RDLVL_MIDPOINT_DELAY_6_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_112_RDLVL_END_DELAY_6(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_112_RDLVL_END_DELAY_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_113 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_6(rw) - Direction of the data eye midpoint delay offset for data slice 6. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_6(rw) - Offset the data eye midpoint delay for data slice 6.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_113                        0x000001c4
#define   NFP_EMUX_DCT_I_DENALI_CTL_113_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_113_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_113_RDLVL_OFFSET_DIR_6   BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_113_RDLVL_OFFSET_DELAY_6(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_113_RDLVL_OFFSET_DELAY_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_114 -
    Bits: 31:16 RDLVL_GATE_DELAY_6(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 6. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_6(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 6. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_114                        0x000001c8
#define   NFP_EMUX_DCT_I_DENALI_CTL_114_RDLVL_GATE_DELAY_6(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_114_RDLVL_GATE_DELAY_6_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_114_RDLVL_DELAY_6(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_114_RDLVL_DELAY_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_115 -
    Bits: 31:16 RDLVL_END_DELAY_7(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 7. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_7(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 7. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_115                        0x000001cc
#define   NFP_EMUX_DCT_I_DENALI_CTL_115_RDLVL_END_DELAY_7(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_115_RDLVL_END_DELAY_7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_115_RDLVL_BEGIN_DELAY_7(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_115_RDLVL_BEGIN_DELAY_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_116 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_7(rw) - Offset the data eye midpoint delay for data slice 7.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_7(ro) - Calculated midpoint of DQ delay for data slice 7. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_116                        0x000001d0
#define   NFP_EMUX_DCT_I_DENALI_CTL_116_RDLVL_OFFSET_DELAY_7(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_116_RDLVL_OFFSET_DELAY_7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_116_RDLVL_MIDPOINT_DELAY_7(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_116_RDLVL_MIDPOINT_DELAY_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_117 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_7(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 7. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_7(rw) - Direction of the data eye midpoint delay offset for data slice 7. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_117                        0x000001d4
#define   NFP_EMUX_DCT_I_DENALI_CTL_117_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_117_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_117_RDLVL_DELAY_7(_x)    (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_117_RDLVL_DELAY_7_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_117_RDLVL_OFFSET_DIR_7   BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_118 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_8(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 8. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_7(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 7. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_118                        0x000001d8
#define   NFP_EMUX_DCT_I_DENALI_CTL_118_RDLVL_BEGIN_DELAY_8(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_118_RDLVL_BEGIN_DELAY_8_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_118_RDLVL_GATE_DELAY_7(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_118_RDLVL_GATE_DELAY_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_119 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_8(ro) - Calculated midpoint of DQ delay for data slice 8. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_8(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 8. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_119                        0x000001dc
#define   NFP_EMUX_DCT_I_DENALI_CTL_119_RDLVL_MIDPOINT_DELAY_8(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_119_RDLVL_MIDPOINT_DELAY_8_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_119_RDLVL_END_DELAY_8(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_119_RDLVL_END_DELAY_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_120 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_8(rw) - Direction of the data eye midpoint delay offset for data slice 8. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_8(rw) - Offset the data eye midpoint delay for data slice 8.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_120                        0x000001e0
#define   NFP_EMUX_DCT_I_DENALI_CTL_120_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_120_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_120_RDLVL_OFFSET_DIR_8   BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_120_RDLVL_OFFSET_DELAY_8(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_120_RDLVL_OFFSET_DELAY_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_121 -
    Bits: 31:16 RDLVL_GATE_DELAY_8(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 8. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_8(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 8. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_121                        0x000001e4
#define   NFP_EMUX_DCT_I_DENALI_CTL_121_RDLVL_GATE_DELAY_8(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_121_RDLVL_GATE_DELAY_8_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_121_RDLVL_DELAY_8(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_121_RDLVL_DELAY_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_122 -
    Bits: 31:16 DLL_RST_DELAY(rw) - Minimum cycles required for DLL reset signal dll_rst_n to be held. If this signal is not being used by the PHY, this parameter may be ignored.
    Bits:  8    MEM_RST_VALID(ro) - Register access to mem_rst_valid signal. READ-ONLY
    Bits:  1:0  CKE_STATUS(ro) - Register access to cke_status signal. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_122                        0x000001e8
#define   NFP_EMUX_DCT_I_DENALI_CTL_122_DLL_RST_DELAY(_x)    (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_122_DLL_RST_DELAY_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_122_MEM_RST_VALID        BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_122_CKE_STATUS(_x)       (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_122_CKE_STATUS_of(_x)    (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_123 -
    Bits: 30:24 TDFI_PHY_RDLAT(rw) - Defines the DFI tPHY_RDLAT timing parameter (in DFI PHY clocks), the maximum cycles between a dfi_rddata_en assertion and a dfi_rddata_valid assertion.
    Bits: 22:16 UPDATE_ERROR_STATUS(ro) - Identifies the source of any DFI MC-initiated or PHY-initiated update errors. Value of 1 indicates a timing violation of the associated timing parameter. READ-ONLY
    Bits: 14:8  TDFI_PHY_WRLAT(ro) - Holds the calculated DFI tPHY_WRLAT timing parameter (in DFI PHY clocks), the maximum cycles between a write command and a dfi_wrdata_en assertion. READ-ONLY
    Bits:  7:0  DLL_RST_ADJ_DLY(rw) - Minimum cycles after setting master delay in DLL until the DLL reset signal dll_rst_n may be asserted. If this signal is not being used by the PHY, this parameter may be ignored.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_123                        0x000001ec
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_TDFI_PHY_RDLAT(_x)   (((_x) & 0x7f) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_TDFI_PHY_RDLAT_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_UPDATE_ERROR_STATUS(_x) (((_x) & 0x7f) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_UPDATE_ERROR_STATUS_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_TDFI_PHY_WRLAT(_x)   (((_x) & 0x7f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_TDFI_PHY_WRLAT_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_DLL_RST_ADJ_DLY(_x)  (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_123_DLL_RST_ADJ_DLY_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_124 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 19:16 TDFI_CTRLUPD_MIN(ro) - Reports the DFI tCTRLUPD_MIN timing parameter (in DFI clocks), the minimum cycles that dfi_ctrlupd_req must be asserted. READ-ONLY
    Bits:  9:8  DRAM_CLK_DISABLE(rw) - Set value for the dfi_dram_clk_disable signal. Bit (0) controls cs0, bit (1) controls cs1, etc. Set each bit to 1 to disable.
    Bits:  6:0  TDFI_RDDATA_EN(ro) - Holds the calculated DFI tRDDATA_EN timing parameter (in DFI PHY clocks), the maximum cycles between a read command and a dfi_rddata_en assertion. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_124                        0x000001f0
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_OBSOLETE3(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_OBSOLETE3_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_TDFI_CTRLUPD_MIN(_x) (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_TDFI_CTRLUPD_MIN_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_DRAM_CLK_DISABLE(_x) (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_DRAM_CLK_DISABLE_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_TDFI_RDDATA_EN(_x)   (((_x) & 0x7f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_124_TDFI_RDDATA_EN_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_125 -
    Bits: 31:16 TDFI_PHYUPD_TYPE0(rw) - Defines the DFI tPHYUPD_TYPE0 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 0. If programmed to a non-zero, a timing violation will cause an interrupt and bit (2) set in the UPDATE_ERROR_STATUS parameter.
    Bits: 13:0  TDFI_CTRLUPD_MAX(rw) - Defines the DFI tCTRLUPD_MAX timing parameter (in DFI clocks), the maximum cycles that dfi_ctrlupd_req can be asserted. If programmed to a non-zero, a timing violation will cause an interrupt and bit (1) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_125                        0x000001f4
#define   NFP_EMUX_DCT_I_DENALI_CTL_125_TDFI_PHYUPD_TYPE0(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_125_TDFI_PHYUPD_TYPE0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_125_TDFI_CTRLUPD_MAX(_x) (((_x) & 0x3fff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_125_TDFI_CTRLUPD_MAX_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_126 -
    Bits: 31:16 TDFI_PHYUPD_TYPE2(rw) - Defines the DFI tPHYUPD_TYPE2 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 2. If programmed to a non-zero, a timing violation will cause an interrupt and bit (4) set in the UPDATE_ERROR_STATUS parameter.
    Bits: 15:0  TDFI_PHYUPD_TYPE1(rw) - Defines the DFI tPHYUPD_TYPE1 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 1. If programmed to a non-zero, a timing violation will cause an interrupt and bit (3) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_126                        0x000001f8
#define   NFP_EMUX_DCT_I_DENALI_CTL_126_TDFI_PHYUPD_TYPE2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_126_TDFI_PHYUPD_TYPE2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_126_TDFI_PHYUPD_TYPE1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_126_TDFI_PHYUPD_TYPE1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_127 -
    Bits: 29:16 TDFI_PHYUPD_RESP(rw) - Defines the DFI tPHYUPD_RESP timing parameter (in DFI clocks), the maximum cycles between a dfi_phyupd_req assertion and a dfi_phyupd_ack assertion. If programmed to a non-zero, a timing violation will cause an interrupt and bit (6) set in the UPDATE_ERROR_STATUS parameter.
    Bits: 15:0  TDFI_PHYUPD_TYPE3(rw) - Defines the DFI tPHYUPD_TYPE3 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 3. If programmed to a non-zero, a timing violation will cause an interrupt and bit (5) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_127                        0x000001fc
#define   NFP_EMUX_DCT_I_DENALI_CTL_127_TDFI_PHYUPD_RESP(_x) (((_x) & 0x3fff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_127_TDFI_PHYUPD_RESP_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_127_TDFI_PHYUPD_TYPE3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_127_TDFI_PHYUPD_TYPE3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_128 -
    Bits: 31:0  TDFI_CTRLUPD_INTERVAL(rw) - Defines the DFI tCTRLUPD_INTERVAL timing parameter (in DFI clocks), the maximum cycles between dfi_ctrlupd_req assertions. If programmed to a non-zero, a timing violation will cause an interrupt and bit (0) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_128                        0x00000200
#define   NFP_EMUX_DCT_I_DENALI_CTL_128_TDFI_CTRLUPD_INTERVAL(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_128_TDFI_CTRLUPD_INTERVAL_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_129 -
    Bits: 27:24 TDFI_DRAM_CLK_DISABLE(rw) - Defines the DFI tDRAM_CLK_DISABLE timing parameter (in DFI clocks), the delay between a dfi_dram_clock_disable assertion and the memory clock disable.
    Bits: 19:16 TDFI_CTRL_DELAY(rw) - Defines the DFI tCTRL_DELAY timing parameter (in DFI clocks), the delay between a DFI command change and a memory command.
    Bits: 14:8  WRLAT_ADJ(rw) - Adjustment value for PHY write timing.
    Bits:  6:0  RDLAT_ADJ(rw) - Adjustment value for PHY read timing.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_129                        0x00000204
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_TDFI_DRAM_CLK_DISABLE(_x) (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_TDFI_DRAM_CLK_DISABLE_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_TDFI_CTRL_DELAY(_x)  (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_TDFI_CTRL_DELAY_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_WRLAT_ADJ(_x)        (((_x) & 0x7f) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_WRLAT_ADJ_of(_x)     (((_x) >> 8) & 0x7f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_RDLAT_ADJ(_x)        (((_x) & 0x7f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_129_RDLAT_ADJ_of(_x)     (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_130 -
    Bits: 25:16 TDFI_WRLVL_WW(rw) - Defines the DFI tWRLVL_WW timing parameter (in DFI clocks), the minimum cycles between dfi_wrlvl_strobe assertions.
    Bits: 15:8  TDFI_WRLVL_EN(rw) - Defines the DFI tWRLVL_EN timing parameter (in DFI clocks), the minimum cycles from a dfi_wrlvl_en assertion to the first dfi_wrlvl_strobe assertion.
    Bits:  3:0  TDFI_DRAM_CLK_ENABLE(rw) - Defines the DFI tDRAM_CLK_ENABLE timing parameter (in DFI clocks), the delay between a dfi_dram_clk_disable de-assertion and the memory clock enable.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_130                        0x00000208
#define   NFP_EMUX_DCT_I_DENALI_CTL_130_TDFI_WRLVL_WW(_x)    (((_x) & 0x3ff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_130_TDFI_WRLVL_WW_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_130_TDFI_WRLVL_EN(_x)    (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_130_TDFI_WRLVL_EN_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_130_TDFI_DRAM_CLK_ENABLE(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_130_TDFI_DRAM_CLK_ENABLE_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_131 -
    Bits: 31:0  TDFI_WRLVL_RESP(rw) - Defines the DFI tWRLVL_RESP timing parameter (in DFI clocks), the maximum cycles between a dfi_wrlvl_req assertion and a dfi_wrlvl_en assertion.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_131                        0x0000020c
#define   NFP_EMUX_DCT_I_DENALI_CTL_131_TDFI_WRLVL_RESP(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_131_TDFI_WRLVL_RESP_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_132 -
    Bits: 31:0  TDFI_WRLVL_MAX(rw) - Defines the DFI tWRLVL_MAX timing parameter (in DFI clocks), the maximum cycles between a dfi_wrlvl_en assertion and a valid dfi_wrlvl_resp.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_132                        0x00000210
#define   NFP_EMUX_DCT_I_DENALI_CTL_132_TDFI_WRLVL_MAX(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_132_TDFI_WRLVL_MAX_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_133 -
    Bits: 31:24 TDFI_WRLVL_RESPLAT(rw) - Defines the DFI tWRLVL_RESPLAT timing parameter (in DFI clocks), the number of cycles between a dfi_wrlvl_strobe assertion and a valid dfi_wrlvl_resp.
    Bits: 23:16 TDFI_WRLVL_DLL(rw) - Defines the DFI tWRLVL_DLL timing parameter (in DFI clocks), the minimum cycles between a dfi_wrlvl_load assertion and a dfi_wrlvl_strobe assertion.
    Bits: 15:0  DFI_WRLVL_MAX_DELAY(rw) - Maximum number of elements for the write level delay line.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_133                        0x00000214
#define   NFP_EMUX_DCT_I_DENALI_CTL_133_TDFI_WRLVL_RESPLAT(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_133_TDFI_WRLVL_RESPLAT_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_133_TDFI_WRLVL_DLL(_x)   (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_133_TDFI_WRLVL_DLL_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_133_DFI_WRLVL_MAX_DELAY(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_133_DFI_WRLVL_MAX_DELAY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_134 -
    Bits: 31:24 TDFI_RDLVL_LOAD(rw) - Defines the DFI tRDLVL_LOAD timing parameter (in DFI clocks), the minimum cycles between dfi_rdlvl_delay_X or dfi_rdlvl_gate_delay_X programming and a dfi_rdlvl_load assertion.
    Bits: 23:16 TDFI_RDLVL_DLL(rw) - Defines the DFI tRDLVL_DLL timing parameter (in DFI clocks), the minimum cycles between a dfi_rdlvl_load assertion and a read or mode register read.
    Bits: 15:8  TDFI_RDLVL_EN(rw) - Defines the DFI tRDLVL_EN timing parameter (in DFI clocks), the minimum cycles from a dfi_rdlvl_en or dfi_rdlvl_gate_en assertion to the first read or MRR.
    Bits:  7:0  TDFI_WRLVL_LOAD(rw) - Defines the DFI tWRLVL_LOAD timing parameter (in DFI clocks), the minimum cycles between dfi_wrlvl_delay_X programming and a dfi_wrlvl_load assertion.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_134                        0x00000218
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_RDLVL_LOAD(_x)  (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_RDLVL_LOAD_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_RDLVL_DLL(_x)   (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_RDLVL_DLL_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_RDLVL_EN(_x)    (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_RDLVL_EN_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_WRLVL_LOAD(_x)  (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_134_TDFI_WRLVL_LOAD_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_135 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_MAX_DELAY(rw) - Maximum number of elements for the data eye training delay line.
    Bits:  7:0  TDFI_RDLVL_RESPLAT(rw) - Defines the DFI tRDLVL_RESPLAT timing parameter (in DFI clocks), the maximum cycles between a read or mode register read and a valid dfi_rdlvl_resp.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_135                        0x0000021c
#define   NFP_EMUX_DCT_I_DENALI_CTL_135_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_135_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_135_RDLVL_MAX_DELAY(_x)  (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_135_RDLVL_MAX_DELAY_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_135_TDFI_RDLVL_RESPLAT(_x) (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_135_TDFI_RDLVL_RESPLAT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_136 -
    Bits: 25:16 TDFI_RDLVL_RR(rw) - Defines the DFI tRDLVL_RR timing parameter (in DFI clocks), the minimum cycles between read commands.
    Bits: 15:0  RDLVL_GATE_MAX_DELAY(rw) - Maximum number of elements for the gate delay.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_136                        0x00000220
#define   NFP_EMUX_DCT_I_DENALI_CTL_136_TDFI_RDLVL_RR(_x)    (((_x) & 0x3ff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_136_TDFI_RDLVL_RR_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_136_RDLVL_GATE_MAX_DELAY(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_136_RDLVL_GATE_MAX_DELAY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_137 -
    Bits: 31:0  TDFI_RDLVL_RESP(rw) - Defines the DFI tRDLVL_RESP timing parameter (in DFI clocks), the maximum cycles between a dfi_rdlvl_req or dfi_rdlvl_gate_req assertion and a dfi_rdlvl_en or dfi_rdlvl_gate_en assertion.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_137                        0x00000224
#define   NFP_EMUX_DCT_I_DENALI_CTL_137_TDFI_RDLVL_RESP(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_137_TDFI_RDLVL_RESP_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_138 -
    Bits: 31:0  RDLVL_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during data eye training.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_138                        0x00000228
#define   NFP_EMUX_DCT_I_DENALI_CTL_138_RDLVL_RESP_MASK(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_138_RDLVL_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_139 -
    Bits: 31:0  RDLVL_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during data eye training. This bit field is a continuation of the DENALI_CTL_138 register, and contains bits [63:32] of RDLVL_RESP_MASK.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_139                        0x0000022c
#define   NFP_EMUX_DCT_I_DENALI_CTL_139_RDLVL_RESP_MASK(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_139_RDLVL_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_140 -
    Bits: 31:8  OBSOLETE1(ro) - PADDING_BITS
    Bits:  7:0  RDLVL_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during data eye training. This bit field is a continuation of the DENALI_CTL_138 register, and contains bits [71:64] of RDLVL_RESP_MASK.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_140                        0x00000230
#define   NFP_EMUX_DCT_I_DENALI_CTL_140_OBSOLETE1(_x)        (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_140_OBSOLETE1_of(_x)     (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_140_RDLVL_RESP_MASK(_x)  (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_140_RDLVL_RESP_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_141 -
    Bits: 31:0  RDLVL_GATE_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during gate training.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_141                        0x00000234
#define   NFP_EMUX_DCT_I_DENALI_CTL_141_RDLVL_GATE_RESP_MASK(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_141_RDLVL_GATE_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_142 -
    Bits: 31:0  RDLVL_GATE_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during gate training. This bit field is a continuation of the DENALI_CTL_141 register, and contains bits [63:32] of RDLVL_GATE_RESP_MASK.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_142                        0x00000238
#define   NFP_EMUX_DCT_I_DENALI_CTL_142_RDLVL_GATE_RESP_MASK(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_142_RDLVL_GATE_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_143 -
    Bits: 24    RDLVL_GATE_PREAMBLE_CHECK_EN(rw) - Enable the preamble check sequence during initial gate training. Set to 1 to enable.
    Bits: 16    RDLVL_GATE_EN(rw) - Enable the MC gate training module. Set to 1 to enable.
    Bits:  8    RDLVL_EN(rw) - Enable the MC data eye training module. Set to 1 to enable.
    Bits:  7:0  RDLVL_GATE_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during gate training. This bit field is a continuation of the DENALI_CTL_141 register, and contains bits [71:64] of RDLVL_GATE_RESP_MASK.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_143                        0x0000023c
#define   NFP_EMUX_DCT_I_DENALI_CTL_143_RDLVL_GATE_PREAMBLE_CHECK_EN BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_143_RDLVL_GATE_EN        BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_143_RDLVL_EN             BIT(8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_143_RDLVL_GATE_RESP_MASK(_x) (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_143_RDLVL_GATE_RESP_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_144 -
    Bits: 31:0  TDFI_RDLVL_MAX(rw) - Defines the DFI tRDLVL_MAX timing parameter (in DFI clocks), the maximum cycles between a dfi_rdlvl_en or dfi_rdlvl_gate_en assertion and a valid dfi_rdlvl_resp.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_144                        0x00000240
#define   NFP_EMUX_DCT_I_DENALI_CTL_144_TDFI_RDLVL_MAX(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_144_TDFI_RDLVL_MAX_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_145 -
    Bits: 31:16 OBSOLETE2(ro) - PADDING_BITS
    Bits: 11:8  RDLVL_GATE_DQ_0_COUNT(rw) - Number of consecutive 0s that defines a 1 to 0 transition for gate training.
    Bits:  3:0  RDLVL_DQ_0_COUNT(rw) - Number of consecutive 0s that defines a 1 to 0 transition for data eye training.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_145                        0x00000244
#define   NFP_EMUX_DCT_I_DENALI_CTL_145_OBSOLETE2(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_145_OBSOLETE2_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_145_RDLVL_GATE_DQ_0_COUNT(_x) (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_145_RDLVL_GATE_DQ_0_COUNT_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_I_DENALI_CTL_145_RDLVL_DQ_0_COUNT(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_145_RDLVL_DQ_0_COUNT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_146 -
    Bits: 31:0  RDLVL_ERROR_STATUS(ro) - Holds the error associated with the data eye training error or gate training error interrupt. Uppermost bit set indicates a TDFI_RDLVL_RESP parameter violation. Next uppermost bit set indicates a TDFI_RDLVL_MAX parameter violation. Lower bits are reserved. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_146                        0x00000248
#define   NFP_EMUX_DCT_I_DENALI_CTL_146_RDLVL_ERROR_STATUS(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_146_RDLVL_ERROR_STATUS_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_147 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_INTERVAL(rw) - Number of long count sequences counted between automatic data eye training commands.
    Bits:  5:0  RDLVL_ERROR_STATUS(ro) - Holds the error associated with the data eye training error or gate training error interrupt. Uppermost bit set indicates a TDFI_RDLVL_RESP parameter violation. Next uppermost bit set indicates a TDFI_RDLVL_MAX parameter violation. Lower bits are reserved. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_147                        0x0000024c
#define   NFP_EMUX_DCT_I_DENALI_CTL_147_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_147_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_147_RDLVL_INTERVAL(_x)   (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_147_RDLVL_INTERVAL_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_147_RDLVL_ERROR_STATUS(_x) (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_147_RDLVL_ERROR_STATUS_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_148 -
    Bits: 31:24 READ_DATA_FIFO_DEPTH(ro) - Reports the depth of the controller core read data queue. READ-ONLY
    Bits: 18:16 TDFI_PHY_WRDATA(rw) - Defines the DFI tPHY_WRDATA timing parameter (in DFI PHY clocks), the maximum cycles between a dfi_wrdata_en assertion and a dfi_wrdata signal.
    Bits: 15:0  RDLVL_GATE_INTERVAL(rw) - Number of long count sequences counted between automatic gate training commands.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_148                        0x00000250
#define   NFP_EMUX_DCT_I_DENALI_CTL_148_READ_DATA_FIFO_DEPTH(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_148_READ_DATA_FIFO_DEPTH_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_148_TDFI_PHY_WRDATA(_x)  (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_148_TDFI_PHY_WRDATA_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_I_DENALI_CTL_148_RDLVL_GATE_INTERVAL(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_148_RDLVL_GATE_INTERVAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_149 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 23:16 WRITE_DATA_FIFO_PTR_WIDTH(ro) - Reports the width of the controller core write data latency queue pointer. READ-ONLY
    Bits: 15:8  WRITE_DATA_FIFO_DEPTH(ro) - Reports the depth of the controller core write data latency queue. READ-ONLY
    Bits:  7:0  READ_DATA_FIFO_PTR_WIDTH(ro) - Reports the width of the controller core read data queue pointer. READ-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_149                        0x00000254
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_OBSOLETE3(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_OBSOLETE3_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_WRITE_DATA_FIFO_PTR_WIDTH(_x) (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_WRITE_DATA_FIFO_PTR_WIDTH_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_WRITE_DATA_FIFO_DEPTH(_x) (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_WRITE_DATA_FIFO_DEPTH_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_READ_DATA_FIFO_PTR_WIDTH(_x) (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_149_READ_DATA_FIFO_PTR_WIDTH_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_150 -
    Bits: 31:0  ZQ_INTERVAL(rw) - Number of long count sequences allowed between automatic ZQCS commands.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_150                        0x00000258
#define   NFP_EMUX_DCT_I_DENALI_CTL_150_ZQ_INTERVAL(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_150_ZQ_INTERVAL_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_151 -
    Bits: 31:16 OBSOLETE1(ro) - PADDING_BITS
    Bits:  8:0  RESERVED0(rw) - Reserved for future use. Must be cleared to 0x0.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_151                        0x0000025c
#define   NFP_EMUX_DCT_I_DENALI_CTL_151_OBSOLETE1(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_151_OBSOLETE1_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_151_RESERVED0(_x)        (((_x) & 0x1ff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_151_RESERVED0_of(_x)     (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_152 -
    Bits: 31:0  RDIMM_CTL_0(rw) - RDIMM control word values for DIMM 0. Bits (3:0) correlate to control word 0, bits (7:4) correlate to control word 1, etc.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_152                        0x00000260
#define   NFP_EMUX_DCT_I_DENALI_CTL_152_RDIMM_CTL_0(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_152_RDIMM_CTL_0_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_153 -
    Bits: 31:0  RDIMM_CTL_0(rw) - RDIMM control word values for DIMM 0. Bits (3:0) correlate to control word 0, bits (7:4) correlate to control word 1, etc. This register is a continuation of DENALI_CTL_152, and contains bits [63:32] of RDIMM_CTL_0.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_153                        0x00000264
#define   NFP_EMUX_DCT_I_DENALI_CTL_153_RDIMM_CTL_0(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_153_RDIMM_CTL_0_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_154 -
    Bits: 24    RDIMM_CW_HOLD_CKE_EN(rw) - Defines if the CKE value will be held or asserted for all DDR3 RDIMM control word accesses. Set to 1 to hold current value.
    Bits: 16    RDIMM_CWW_REQ(wo) - Triggers a control word write to all DIMMs specified in the RDIMM_CW_MAP parameter with the values in the RDIMM_CTL_X parameter(s). Ignored during initialization because an automatic control word write happens during initialization. WRITE-ONLY
    Bits: 15:0  RDIMM_CW_MAP(rw) - Defines which RDIMM control words will be updated during initialization. Bit (0) correlates to control word 0, bit (1) correlates to control word 1, etc. Set each bit to 1 to write.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_154                        0x00000268
#define   NFP_EMUX_DCT_I_DENALI_CTL_154_RDIMM_CW_HOLD_CKE_EN BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_154_RDIMM_CWW_REQ        BIT(16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_154_RDIMM_CW_MAP(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_154_RDIMM_CW_MAP_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_155 -
    Bits: 31:8  RDIMM_TSTAB(rw) - Defines the TSTAB value in cycles for the registered DIMM. This is the delay required from a control word write to CW2 or CW10 to another control word write or to a DRAM access.
    Bits:  3:0  RDIMM_TMRD(rw) - Defines the TMRD value in cycles for the registered DIMM. This is the delay required from a control word write to another control word write or to a DRAM access.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_155                        0x0000026c
#define   NFP_EMUX_DCT_I_DENALI_CTL_155_RDIMM_TSTAB(_x)      (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_I_DENALI_CTL_155_RDIMM_TSTAB_of(_x)   (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_155_RDIMM_TMRD(_x)       (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_155_RDIMM_TMRD_of(_x)    (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_156 -
    Bits: 24    CA_PARITY_ERROR(ro) - Contains one hot indication of registered DIMM parity errors. Bit (0) correlates to DIMM0, bit (1) correlates to DIMM1, etc. Value of 1 indicates an error on that DIMM. READ-ONLY
    Bits: 22:0  CA_PARITY_ERROR_INJECT(rw) - Selects bit to corrupt on the CA bus for CA parity error injection.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_156                        0x00000270
#define   NFP_EMUX_DCT_I_DENALI_CTL_156_CA_PARITY_ERROR      BIT(24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_156_CA_PARITY_ERROR_INJECT(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_156_CA_PARITY_ERROR_INJECT_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_157 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 20:16 LONG_COUNT_MASK(rw) - Reduces the length of the long counter from 1024 cycles. The only supported values are 0x00 (1024 cycles), 0x10 (512 clocks), 0x18 (256 clocks), 0x1C (128 clocks), 0x1E (64 clocks) and 0x1F (32 clocks).
    Bits: 13:0  TREF_INTERVAL(rw) - Defines the cycles between refreshes to different chip selects.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_157                        0x00000274
#define   NFP_EMUX_DCT_I_DENALI_CTL_157_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_157_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_I_DENALI_CTL_157_LONG_COUNT_MASK(_x)  (((_x) & 0x1f) << 16)
#define   NFP_EMUX_DCT_I_DENALI_CTL_157_LONG_COUNT_MASK_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_157_TREF_INTERVAL(_x)    (((_x) & 0x3fff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_157_TREF_INTERVAL_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_158 -
    Bits: 29:24 WR_TO_ODTH(rw) - Defines the delay from a write command to ODT assertion.
    Bits: 17:0  INT_ACK(wo) - Clear mask of the INT_STATUS parameter. WRITE-ONLY
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_158                        0x00000278
#define   NFP_EMUX_DCT_I_DENALI_CTL_158_WR_TO_ODTH(_x)       (((_x) & 0x3f) << 24)
#define   NFP_EMUX_DCT_I_DENALI_CTL_158_WR_TO_ODTH_of(_x)    (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_DCT_I_DENALI_CTL_158_INT_ACK(_x)          (((_x) & 0x3ffff) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_158_INT_ACK_of(_x)       (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_159 -
    Bits:  5:0  RD_TO_ODTH(rw) - Defines the delay from a read to ODT assertion.
*/
#define NFP_EMUX_DCT_I_DENALI_CTL_159                        0x0000027c
#define   NFP_EMUX_DCT_I_DENALI_CTL_159_RD_TO_ODTH(_x)       (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_I_DENALI_CTL_159_RD_TO_ODTH_of(_x)    (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_RIDR -
    Bits: 31:24 UDRID(ro) - User-Defined Revision ID: General purpose revision identification set by the user.
    Bits: 23:20 PHYMJR(ro) - PHY Major Revision: Indicates major revision of the PHY such addition of the features that make the new version not compatible with previous versions.
    Bits: 19:16 PHYMDR(ro) - PHY Moderate Revision: Indicates moderate revision of the PHY such as addition of new features. Normally the new version is still compatible with previous versions.
    Bits: 15:12 PHYMNR(ro) - PHY Minor Revision: Indicates minor update of the PHY such as bug fixes. Normally no new features are included.
    Bits: 11:8  PUBMJR(ro) - PUB Major Revision: Indicates major revision of the PUB such addition of the features that make the new version not compatible with previous versions.
    Bits:  7:4  PUBMDR(ro) - PUB Moderate Revision: Indicates moderate revision of the PUB such as addition of new features. Normally the new version is still compatible with previous versions.
    Bits:  3:0  PUBMNR(ro) - PUB Minor Revision: Indicates minor update of the PUB such as bug fixes. Normally no new features are included.
*/
#define NFP_EMUX_PHY_I_MUPUB_RIDR                            0x00000000
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_UDRID(_x)                (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_UDRID_of(_x)             (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PHYMJR(_x)               (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PHYMJR_of(_x)            (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PHYMDR(_x)               (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PHYMDR_of(_x)            (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PHYMNR(_x)               (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PHYMNR_of(_x)            (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PUBMJR(_x)               (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PUBMJR_of(_x)            (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PUBMDR(_x)               (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PUBMDR_of(_x)            (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PUBMNR(_x)               (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_RIDR_PUBMNR_of(_x)            (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_PIR -
    Bits: 31    INITBYP(w1c) - Initialization Bypass: Bypasses or stops, if set, all initialization routines currently running, including PHY initialization, DRAM initialization, and PHY training. Initialization may be triggered manually using INIT and the other relevant bits of the PIR register. This bit is self-clearing.
    Bits: 30    ZCALBYP(rw) - Impedance Calibration Bypass: Bypasses or stops, if set, impedance calibration of all ZQ control blocks that automatically triggers after reset. Impedance calibration may be triggered manually using INIT and ZCAL bits of the PIR register. This bit is self-clearing.
    Bits: 29    DCALBYP(rw) - Digital Delay Line (DDL) Calibration Bypass: Bypasses or stops, if set, DDL calibration that automatically triggers after reset. DDL calibration may be triggered manually using INIT and DCAL bits of the PIR register. This bit is self- clearing.
    Bits: 28    LOCKBYP(rw) - PLL Lock Bypass: Bypasses or stops, if set, the waiting of PLLs to lock. PLL lock wait is automatically triggered after reset. PLL lock wait may be triggered manually using INIT and PLLLOCK bits of the PIR register. This bit is self- clearing.
    Bits: 27    CLRSR(rw) - Clear Status Registers: A write of '1' to this bit will clear (reset to '0') all status registers, including PGSR and DXnGSR. The clear status register bit is self- clearing. Note, this bit does not clear the PGSR.IDONE bit. If the IDONE bit is set it remains at 1'b1 to indicate the PUB has competed its task. This bit is primarily for debug purposes and is typically not needed during normal functional operation. It can be used when PGSR.IDONE=1, to manually clear the PGSR status bits, although starting a new init process will automatically clear the PGSR status bits. Or it can be used to manually clear the DXnGSR status bits, although starting a new data training process will automatically clear the DXnGSR status bits.
    Bits: 19    RDIMMINIT(rw) - RDIMM Initialization: Executes the RDIMM buffer chip initialization before executing DRAM initialization. The RDIMM buffer chip initialization is run after the DRAM is reset and CKE have been driven high by the DRAM initialization sequence.
    Bits: 18    CTLDINIT(rw) - Controller DRAM Initialization: Indicates if set that DRAM initialization will be performed by the controller. Otherwise if not set it indicates that DRAM initialization will be performed using the built-in initialization sequence or using software through the configuration port.
    Bits: 17    PLLBYP(rw) - PLL Bypass: A setting of 1 on this bit will put all PHY PLLs in bypass mode.
    Bits: 16    ICPC(rw) - Initialization Complete Pin Configuration: Specifies how the DFI initialization complete output pin (dfi_init_complete) should be used to indicate the status of initialization. Valid value are:
    Bits: 15    WREYE(rw) - Write Data Eye Training: Executes a PUB training routine to maximize the write data eye.
    Bits: 14    RDEYE(rw) - Read Data Eye Training: Executes a PUB training routine to maximize the read data eye.
    Bits: 13    WRDSKW(rw) - Write Data Bit Deskew: Executes a PUB training routine to deskew the DQ bits during write.
    Bits: 12    RDDSKW(rw) - Read Data Bit Deskew: Executes a PUB training routine to deskew the DQ bits during read.
    Bits: 11    WLADJ(rw) - Write Leveling Adjust (DDR3 Only): Executes a PUB training routine that re- adjusts the write latency used during write in case the write leveling routine changed the expected latency.
    Bits: 10    QSGATE(rw) - Read DQS Gate Training: Executes a PUB training routine to determine the optimum position of the read data DQS strobe for maximum system timing margins.
    Bits:  9    WL(rw) - Write Leveling (DDR3 Only): Executes a PUB write leveling routine.
    Bits:  8    DRAMINIT(rw) - DRAM Initialization: Executes the DRAM initialization sequence.
    Bits:  7    DRAMRST(rw) - DRAM Reset (DDR3 Only): Issues a reset to the DRAM (by driving the DRAM reset pin low) and wait 200us. This can be triggered in isolation or with the full DRAM initialization (DRAMINIT). For the later case, the reset is issued and 200us is waited before starting the full initialization sequence.
    Bits:  6    PHYRST(rw) - PHY Reset: Resets the AC and DATX8 modules by asserting the AC/DATX8 reset pin.
    Bits:  5    DCAL(rw) - Digital Delay Line (DDL) Calibration: Performs PHY delay line calibration.
    Bits:  4    PLLINIT(rw) - PLL Initialization: Executes the PLL initialization sequence which includes correct driving of PLL power-down, reset and gear shift pins, and then waiting for the PHY PLLs to lock.
    Bits:  1    ZCAL(rw) - Impedance Calibration: Performs PHY impedance calibration. When set the impedance calibration will be performed in parallel with PHY initialization (PLL initialization + DDL calibration + PHY reset).
    Bits:  0    INIT(rw) - Initialization Trigger: A write of '1' to this bit triggers the DDR system initialization, including PHY initialization, DRAM initialization, and PHY training. The exact initialization steps to be executed are specified in bits 1 to 15 of this register. A bit setting of 1 means the step will be executed as part of the initialization sequence, while a setting of '0' means the step will be bypassed. The initialization trigger bit is self-clearing.
*/
#define NFP_EMUX_PHY_I_MUPUB_PIR                             0x00000004
#define   NFP_EMUX_PHY_I_MUPUB_PIR_INITBYP                   BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_ZCALBYP                   BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_DCALBYP                   BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_LOCKBYP                   BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_CLRSR                     BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_RDIMMINIT                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_CTLDINIT                  BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_PLLBYP                    BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_ICPC                      BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_WREYE                     BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_RDEYE                     BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_WRDSKW                    BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_RDDSKW                    BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_WLADJ                     BIT(11)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_QSGATE                    BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_WL                        BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_DRAMINIT                  BIT(8)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_DRAMRST                   BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_PHYRST                    BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_DCAL                      BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_PLLINIT                   BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_ZCAL                      BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_PIR_INIT                      BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGCR0 -
    Bits: 31:26 CKEN(rw) - CK Enable: Controls whether the CK going to the SDRAM is enabled (toggling) or disabled (static value) and whether the CK is inverted. Two bits for each of the up to three CK pairs. Valid values for the two bits are:
    Bits: 25    PUBMODE(rw) - Delay Line Test Start: A write of 1 to this bit will trigger delay line oscillator mode period measurement. This bit is not self clearing and needs to be reset to 0 before the measurement can be re-triggered.
    Bits: 18:14 DTOSEL(rw) - Digital Test Output Select: Selects the PHY digital test output that should be driven onto PHY digital test output (phy_dto) pin: Valid values are:
    Bits: 13:12 OSCWDL(rw) - Oscillator Mode Write-Leveling Delay Line Select: Selects which of the two write leveling LCDLs is active. The delay select value of the inactive LCDL is set to zero while the delay select value of the active LCDL can be varied by the input write leveling delay select pin. Valid values are:
    Bits: 11:9  OSCDIV(rw) - Oscillator Mode Division: Specifies the factor by which the delay line oscillator mode output is divided down before it is output on the delay line digital test output pin dl_dto. Valid values are:
    Bits:  8    OSCEN(rw) - Oscillator Enable: Enables, if set, the delay line oscillation.
    Bits:  7    DLTST(rw) - Delay Line Test Start: A write of '1' to this bit will trigger delay line oscillator mode period measurement. This bit is not self clearing and needs to be reset to '0' before the measurement can be re-triggered.
    Bits:  6    DLTMODE(rw) - Delay Line Test Mode: Selects, if set, the delay line oscillator test mode.
    Bits:  5    RDBVT(rw) - Read Data BDL VT Compensation: Enables, if set the VT drift compensation of the read data bit delay lines.
    Bits:  4    WDBVT(rw) - Write Data BDL VT Compensation: Enables, if set the VT drift compensation of the write data bit delay lines.
    Bits:  3    RGLVT(rw) - Read DQS Gating LCDL Delay VT Compensation: Enables, if set the VT drift compensation of the read DQS gating LCDL.
    Bits:  2    RDLVT(rw) - Read DQS LCDL Delay VT Compensation: Enables, if set the VT drift compensation of the read DQS LCDL.
    Bits:  1    WDLVT(rw) - Write DQ LCDL Delay VT Compensation: Enables, if set the VT drift compensation of the write DQ LCDL.
    Bits:  0    WLLVT(rw) - Write Leveling LCDL Delay VT Compensation: Enables, if set, the VT drift compensation of the write leveling LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_PGCR0                           0x00000008
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_CKEN(_x)                (((_x) & 0x3f) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_CKEN_of(_x)             (((_x) >> 26) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_PUBMODE                 BIT(25)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_DTOSEL(_x)              (((_x) & 0x1f) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_DTOSEL_of(_x)           (((_x) >> 14) & 0x1f)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_OSCWDL(_x)              (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_OSCWDL_of(_x)           (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_OSCDIV(_x)              (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_OSCDIV_of(_x)           (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_OSCEN                   BIT(8)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_DLTST                   BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_DLTMODE                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_RDBVT                   BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_WDBVT                   BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_RGLVT                   BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_RDLVT                   BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_WDLVT                   BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR0_WLLVT                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGCR1 -
    Bits: 31    LBMODE(rw) - Loopback Mode: Indicates, if set, that the PHY/PUB is in loopback mode.
    Bits: 30:29 LBGDQS(rw) - Loopback DQS Gating: Selects the DQS gating mode that should be used when the PHY is in loopback mode, including BIST loopback mode. Valid values are:
    Bits: 28    LBDQSS(rw) - Loopback DQS Shift: Selects how the read DQS is shifted during loopback to ensure that the read DQS is centered into the read data eye. Valid values are:
    Bits: 27    IOLB(rw) - I/O Loop-Back Select: Selects where inside the I/O the loop-back of signals happens. Valid values are:
    Bits: 26    INHVT(rw) - VT Calculation Inhibit: Inhibits calculation of the next VT compensated delay line values. A value of 1 will inhibit the VT calculation. This bit should be set to 1_During writes to the delay line registers.
    Bits: 25    DXHRST(rw) - DX PHY High-Speed Reset: a Write of '0' to this bit resets the DX macro without resetting the PUB RTL logic. This bit is not self-clearing and a '1' must be written to de-assert the reset.
    Bits: 24:23 ZCKSEL(rw) - Impedance Clock Divider Select: Selects the divide ratio for the clock used by the impedance control logic relative to the clock used by the memory controller and SDRAM. Valid values are:
    Bits: 22:15 DLDLMT(rw) - Delay Line VT Drift Limit: Specifies the minimum change in the delay line VT drift in one direction which should result in the assertion of the delay line VT drift status signal (vt_drift). The limit is specified in terms of delay select values. A value of 0 disables the assertion of delay line VT drift status signal.
    Bits: 14:13 FDEPTH(rw) - Filter Depth: Specifies the number of measurements over which all AC and DATX8 initial period measurements, that happen after reset or when calibration is manually triggered, are averaged. Valid values are:
    Bits: 12:11 LPFDEPTH(rw) - Low-Pass Filter Depth: Specifies the number of measurements over which MDL period measurements are filtered. This determines the time constant of the low pass filter. Valid values are:
    Bits: 10    LPFEN(rw) - Low-Pass Filter Enable: Enables, if set, the low pass filtering of MDL period measurements.
    Bits:  9    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the AC master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or on when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high.
    Bits:  8:7  IODDRM(rw) - I/O DDR Mode (D3F I/O Only): Selects the DDR mode for the I/Os. These bits connect to bits [2:1], of the IOM pin of the SSTL I/O. For more information, refer to the SSTL I/O chapter in the DWC DDR PHY Databook.
    Bits:  6    WLSELT(rw) - Write Leveling Select Type: Selects the encoding type for the write leveling select signal depending on the desired setup/hold margins for the internal pipelines. Refer to the DDR PHY Databook for details of how the select type is used. Valid values are:
    Bits:  5    ACHRST(rw) - AC PHY High-Speed Reset: a Write of '0' to this bit resets the AC macro without resetting the PUB RTL logic. This bit is not self-clearing and a '1' must be written to de-assert the reset.
    Bits:  4    WSLOPT(rw) - Write System Latency Optimization: controls the insertion of a pipeline stage on the AC signals from the DFI interface to the PHY to cater for a negative write system latency (WSL) value (only -1 possible). Valid values are:
    Bits:  2    WLSTEP(rw) - Write Leveling Step: Specifies the number of delay step-size increments during each step of write leveling. Valid values are:
    Bits:  1    WLMODE(rw) - Write Leveling (Software) Mode: Indicates if set that the PUB is in software write leveling mode in which software executes single steps of DQS pulsing by writing '1' to PIR.WL. The write leveling DQ status from the DRAM is captured in DXnGSR0.WLDQ.
    Bits:  0    PDDISDX(rw) - Power Down Disabled Byte: Indicates if set that the PLL and I/Os of a disabled byte should be powered down.
*/
#define NFP_EMUX_PHY_I_MUPUB_PGCR1                           0x0000000c
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LBMODE                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LBGDQS(_x)              (((_x) & 0x3) << 29)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LBGDQS_of(_x)           (((_x) >> 29) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LBDQSS                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_IOLB                    BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_INHVT                   BIT(26)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_DXHRST                  BIT(25)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_ZCKSEL(_x)              (((_x) & 0x3) << 23)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_ZCKSEL_of(_x)           (((_x) >> 23) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_DLDLMT(_x)              (((_x) & 0xff) << 15)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_DLDLMT_of(_x)           (((_x) >> 15) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_FDEPTH(_x)              (((_x) & 0x3) << 13)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_FDEPTH_of(_x)           (((_x) >> 13) & 0x3)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_FDEPTH_2              (0)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_FDEPTH_4              (1)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_FDEPTH_8              (2)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_FDEPTH_16             (3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFDEPTH(_x)            (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFDEPTH_of(_x)         (((_x) >> 11) & 0x3)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFDEPTH_2            (0)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFDEPTH_4            (1)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFDEPTH_8            (2)
#define     NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFDEPTH_16           (3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_LPFEN                   BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_MDLEN                   BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_IODDRM(_x)              (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_IODDRM_of(_x)           (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_WLSELT                  BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_ACHRST                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_WSLOPT                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_WLSTEP                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_WLMODE                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR1_PDDISDX                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGSR0 -
    Bits: 31    APLOCK(ro) - AC PLL Lock: Indicates, if set, that AC PLL has locked. This is a direct status of the AC PLL lock pin.
    Bits: 29:28 PLDONE_CHN(ro) - PLL Lock Done per Channel: Indicates PLL locking has completed for each underlying channel. Bit 28 represents channel 0 while bit 29 represents channel 1.
    Bits: 27    WEERR(ro) - Write Eye Training Error: Indicates if set that there is an error in write eye training.
    Bits: 26    REERR(ro) - Read Eye Training Error: Indicates if set that there is an error in read eye training.
    Bits: 25    WDERR(ro) - Write Bit Deskew Error: Indicates if set that there is an error in write bit deskew.
    Bits: 24    RDERR(ro) - Read Bit Deskew Error: Indicates if set that there is an error in read bit deskew.
    Bits: 23    WLAERR(ro) - Write Leveling Adjustment Error: Indicates if set that there is an error in write leveling adjustment.
    Bits: 22    QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training.
    Bits: 21    WLERR(ro) - Write Leveling Error: Indicates if set that there is an error in write leveling.
    Bits: 20    ZCERR(ro) - Impedance Calibration Error: Indicates if set that there is an error in impedance calibration.
    Bits: 11    WEDONE(ro) - Write Eye Training Done: Indicates if set that write eye training has completed.
    Bits: 10    REDONE(ro) - Read Eye Training Done: Indicates if set that read eye training has completed.
    Bits:  9    WDDONE(ro) - Write Bit Deskew Done: Indicates if set that write bit deskew has completed.
    Bits:  8    RDDONE(ro) - Read Bit Deskew Done: Indicates if set that read bit deskew has completed.
    Bits:  7    WLADONE(ro) - Write Leveling Adjustment Done: Indicates if set that write leveling adjustment has completed.
    Bits:  6    QSGDONE(ro) - DQS Gate Training Done: Indicates if set that DQS gate training has completed.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates if set that write leveling has completed.
    Bits:  4    DIDONE(ro) - DRAM Initialization Done: Indicates if set that DRAM initialization has completed.
    Bits:  3    ZCDONE(ro) - Impedance Calibration Done: Indicates if set that impedance calibration has completed.
    Bits:  2    DCDONE(ro) - Digital Delay Line (DDL) Calibration Done: Indicates if set that DDL calibration has completed.
    Bits:  1    PLDONE(ro) - PLL Lock Done: Indicates if set that PLL locking has completed.
    Bits:  0    IDONE(ro) - Initialization Done: Indicates if set that the DDR system initialization has completed. This bit is set after all the selected initialization routines in PIR register have completed.
*/
#define NFP_EMUX_PHY_I_MUPUB_PGSR0                           0x00000010
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_APLOCK                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_PLDONE_CHN(_x)          (((_x) & 0x3) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_PLDONE_CHN_of(_x)       (((_x) >> 28) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WEERR                   BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_REERR                   BIT(26)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WDERR                   BIT(25)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_RDERR                   BIT(24)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WLAERR                  BIT(23)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_QSGERR                  BIT(22)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WLERR                   BIT(21)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_ZCERR                   BIT(20)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WEDONE                  BIT(11)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_REDONE                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WDDONE                  BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_RDDONE                  BIT(8)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WLADONE                 BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_QSGDONE                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_WLDONE                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_DIDONE                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_ZCDONE                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_DCDONE                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_PLDONE                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR0_IDONE                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGSR1 -
    Bits: 31    PARERR(ro) - RDIMM Parity Error: Indicates, if set, that there was a parity error (i.e. err_out_n was sampled low) during one of the transactions to the RDIMM buffer chip. This bit remains asserted until cleared by the PIR.CLRSR.
    Bits: 30    VTSTOP(ro) - VT Stop: Indicates if set that the VT calculation logic has stopped computing the next values for the VT compensated delay line values. After assertion of the PGCR.INHVT, the VTSTOP bit should be read to ensure all VT compensation logic has stopped computations before writing to the delay line registers.
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the AC delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the AC delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_PGSR1                           0x00000014
#define   NFP_EMUX_PHY_I_MUPUB_PGSR1_PARERR                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR1_VTSTOP                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR1_DLTCODE(_x)             (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR1_DLTCODE_of(_x)          (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_PGSR1_DLTDONE                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PLLCR -
    Bits: 31    BYP(rw) - PLL Bypass: Bypasses the PLL if set to 1.
    Bits: 30    PLLRST(rw) - PLL Rest: Resets the PLLs by driving the PLL reset pin. This bit is not self-clearing and a '0' must be written to de-assert the reset.
    Bits: 29    PLLPD(rw) - PLL Power Down: Puts the PLLs in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down.
    Bits: 19:18 FRQSEL(rw) - PLL Frequency Select: Selects the operating range of the PLL. Valid values for PHYs that go up to 2133 Mbps are: 00 = PLL reference clock (ctl_clk/REF_CLK) ranges from 335MHz to 533MHz 01 = PLL reference clock (ctl_clk/REF_CLK) ranges from 225MHz to 385MHz 10 = Reserved 11 = PLL reference clock (ctl_clk/REF_CLK) ranges from 166MHz to 275MHz Valid values for PHYs that don't go up to 2133 Mbps are:00 = PLL reference clock (ctl_clk/REF_CLK) ranges from 250MHz to 400MHz 01 = PLL reference clock (ctl_clk/REF_CLK) ranges from 166MHz to 300MHz 10 = Reserved 11 = Reserved
    Bits: 17    QPMODE(rw) - PLL Quadrature Phase Mode: Enables, if set, the quadrature phase clock outputs. This mode is not used in this version of the PHY.
    Bits: 16:13 CPPC(rw) - Charge Pump Proportional Current Control
    Bits: 12:11 CPIC(rw) - Charge Pump Integrating Current Control
    Bits: 10    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode.
    Bits:  9:6  ATOEN(rw) - Analog Test Enable (ATOEN): Selects the analog test signal that should be driven on the analog test output pin. Otherwise the analog test output is tri-stated. This allows analog test output pins from multiple PLLs to be connected together. Valid values are:
    Bits:  5:2  ATC(rw) - Analog Test Control: Selects various PLL analog test signals to be brought out via PLL analog test output pin (pll_ato). Valid values are:
    Bits:  1:0  DTC(rw) - Digital Test Control: Selects various PLL digital test signals and other test mode signals to be brought out via bit [1], of the PLL digital test output (pll_dto[1],). Valid values are:
*/
#define NFP_EMUX_PHY_I_MUPUB_PLLCR                           0x00000018
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_BYP                     BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_PLLRST                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_PLLPD                   BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_FRQSEL(_x)              (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_FRQSEL_of(_x)           (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_QPMODE                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_CPPC(_x)                (((_x) & 0xf) << 13)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_CPPC_of(_x)             (((_x) >> 13) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_CPIC(_x)                (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_CPIC_of(_x)             (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_GSHIFT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_ATOEN(_x)               (((_x) & 0xf) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_ATOEN_of(_x)            (((_x) >> 6) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC(_x)                 (((_x) & 0xf) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_of(_x)              (((_x) >> 2) & 0xf)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VDD_CKIN          (1)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VRFBF             (2)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VDD_CKO           (3)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VP_CP             (4)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VPFIL(VP)         (5)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_GD                (7)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VCNTRL_ATB        (8)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VREF_ATB          (9)
#define     NFP_EMUX_PHY_I_MUPUB_PLLCR_ATC_VPSF_ATB          (10)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_DTC(_x)                 (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PLLCR_DTC_of(_x)              (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR0 -
    Bits: 31:21 tPLLPD(rw) - PLL Power-Down Time: Number of configuration or APB clock cycles that the PLL must remain in power-down mode, i.e. number of clock cycles from when PLL power-down pin is asserted to when PLL power-down pin is de-asserted. This must correspond to a value that is equal to or more than 1us. Default value corresponds to 1us.
    Bits: 20:6  tPLLGS(rw) - PLL Gear Shift Time: Number of configuration or APB clock cycles from when the PLL reset pin is de-asserted to when the PLL gear shift pin is de-asserted. This must correspond to a value that is equal to or more than 4us. Default value corresponds to 4us.
    Bits:  5:0  tPHYRST(rw) - PHY Reset Time: Number of configuration or APB clock cycles that the PHY reset must remain asserted after PHY calibration is done before the reset to the PHY is de-asserted. This is used to extend the reset to the PHY so that the reset is asserted for some clock cycles after the clocks are stable.
*/
#define NFP_EMUX_PHY_I_MUPUB_PTR0                            0x0000001c
#define   NFP_EMUX_PHY_I_MUPUB_PTR0_TPLLPD(_x)               (((_x) & 0x7ff) << 21)
#define   NFP_EMUX_PHY_I_MUPUB_PTR0_TPLLPD_of(_x)            (((_x) >> 21) & 0x7ff)
#define   NFP_EMUX_PHY_I_MUPUB_PTR0_TPLLGS(_x)               (((_x) & 0x7fff) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_PTR0_TPLLGS_of(_x)            (((_x) >> 6) & 0x7fff)
#define   NFP_EMUX_PHY_I_MUPUB_PTR0_TPHYRST(_x)              (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PTR0_TPHYRST_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR1 -
    Bits: 31:16 tPLLLOCK(rw) - PLL Lock Time: Number of configuration or APB clock cycles for the PLL to stabilize and lock, i.e. number of clock cycles from when the PLL reset pin is de-asserted to when the PLL has lock and is ready for use. This must correspond to a value that is equal to or more than 100us. Default value corresponds to 100us.
    Bits: 12:0  tPLLRST(rw) - PLL Reset Time: Number of configuration or APB clock cycles that the PLL must remain in reset mode, i.e. number of clock cycles from when PLL power-down pin is de-asserted and PLL reset pin is asserted to when PLL reset pin is de-asserted. This must correspond to a value that is equal to or more than 9us. Default value corresponds to 9us.
*/
#define NFP_EMUX_PHY_I_MUPUB_PTR1                            0x00000020
#define   NFP_EMUX_PHY_I_MUPUB_PTR1_TPLLLOCK(_x)             (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_PTR1_TPLLLOCK_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_PTR1_TPLLRST(_x)              (((_x) & 0x1fff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PTR1_TPLLRST_of(_x)           (((_x) >> 0) & 0x1fff)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR2 -
    Bits: 19:15 tWLDLYS(rw) - Write Leveling Delay Settling Time: Number of controller clock cycles from when a new value of the write leveling delay is applies to the LCDL to when to DQS high is driven high. This allows the delay to settle.
    Bits: 14:10 tCALH(rw) - Calibration Hold Time: Number of controller clock cycles from when the clock was disabled (cal_clk_en deasserted) to when calibration is enable (cal_en asserted).
    Bits:  9:5  tCALS(rw) - Calibration Setup Time: Number of controller clock cycles from when calibration is enabled (cal_en asserted) to when the calibration clock is asserted again (cal_clk_en asserted).
    Bits:  4:0  tCALON(rw) - Calibration On Time: Number of clock cycles that the calibration clock is enabled (cal_clk_en asserted).
*/
#define NFP_EMUX_PHY_I_MUPUB_PTR2                            0x00000024
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TWLDLYS(_x)              (((_x) & 0x1f) << 15)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TWLDLYS_of(_x)           (((_x) >> 15) & 0x1f)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TCALH(_x)                (((_x) & 0x1f) << 10)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TCALH_of(_x)             (((_x) >> 10) & 0x1f)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TCALS(_x)                (((_x) & 0x1f) << 5)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TCALS_of(_x)             (((_x) >> 5) & 0x1f)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TCALON(_x)               (((_x) & 0x1f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PTR2_TCALON_of(_x)            (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR3 -
    Bits: 28:20 tDINIT1(rw) - DRAM Initialization Time 1: DRAM initialization timein DRAM clock cycles corresponding to the following:
    Bits: 19:0  tDINIT0(rw) - DRAM Initialization Time 0: DRAM initialization time in DRAM clock cycles corresponding to the following:
*/
#define NFP_EMUX_PHY_I_MUPUB_PTR3                            0x00000028
#define   NFP_EMUX_PHY_I_MUPUB_PTR3_TDINIT1(_x)              (((_x) & 0x1ff) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_PTR3_TDINIT1_of(_x)           (((_x) >> 20) & 0x1ff)
#define   NFP_EMUX_PHY_I_MUPUB_PTR3_TDINIT0(_x)              (((_x) & 0xfffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PTR3_TDINIT0_of(_x)           (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR4 -
    Bits: 27:18 tDINIT3(rw) - DRAM Initialization Time 3: DRAM initialization time in DRAM clock cycles corresponding to the following:
    Bits: 17:0  tDINIT2(rw) - DRAM Initialization Time 2: DRAM initialization time in DRAM clock cycles corresponding to the following:
*/
#define NFP_EMUX_PHY_I_MUPUB_PTR4                            0x0000002c
#define   NFP_EMUX_PHY_I_MUPUB_PTR4_TDINIT3(_x)              (((_x) & 0x3ff) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_PTR4_TDINIT3_of(_x)           (((_x) >> 18) & 0x3ff)
#define   NFP_EMUX_PHY_I_MUPUB_PTR4_TDINIT2(_x)              (((_x) & 0x3ffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PTR4_TDINIT2_of(_x)           (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ACMDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_ACMDLR                          0x00000030
#define   NFP_EMUX_PHY_I_MUPUB_ACMDLR_MDLD(_x)               (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_ACMDLR_MDLD_of(_x)            (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_ACMDLR_TPRD(_x)               (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_ACMDLR_TPRD_of(_x)            (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_ACMDLR_IPRD(_x)               (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ACMDLR_IPRD_of(_x)            (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ACBDLR -
    Bits: 23:18 ACBD(rw) - Address/Command Bit Delay: Delay select for the BDLs on address and command signals.
    Bits: 17:12 CK2BD(rw) - CK2 Bit Delay: Delay select for the BDL on CK2.
    Bits: 11:6  CK1BD(rw) - CK1 Bit Delay: Delay select for the BDL on CK1.
    Bits:  5:0  CK0BD(rw) - CK0 Bit Delay: Delay select for the BDL on CK0.
*/
#define NFP_EMUX_PHY_I_MUPUB_ACBDLR                          0x00000034
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_ACBD(_x)               (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_ACBD_of(_x)            (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_CK2BD(_x)              (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_CK2BD_of(_x)           (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_CK1BD(_x)              (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_CK1BD_of(_x)           (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_CK0BD(_x)              (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ACBDLR_CK0BD_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_ACIOCR -
    Bits: 31:30 ACSR(rw) - Address/Command Slew Rate (D3F I/O Only): Selects slew rate of the I/O for all address and command pins.
    Bits: 29    RSTIOM(rw) - SDRAM Reset I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for SDRAM Reset.
    Bits: 28    RSTPDR(rw) - SDRAM Reset Power Down Receiver: Powers down, when set, the input receiver on the I/O for SDRAM RST# pin.
    Bits: 27    RSTPDD(rw) - SDRAM Reset Power Down Driver: Powers down, when set, the output driver on the I/O for SDRAM RST# pin.
    Bits: 26    RSTODT(rw) - SDRAM Reset On-Die Termination: Enables, when set, the on-die termination on the I/O for SDRAM RST# pin.
    Bits: 23:22 RANKPDR(rw) - Rank Power Down Receiver: Powers down, when set, the input receiver on the I/O CKE[3:0],, ODT[3:0],, and CS#[3:0], pins. RANKPDR[0], controls the power down for CKE[0],, ODT[0],, and CS#[0],, RANKPDR[1], controls the power down for CKE[1],, ODT[1],, and CS#[1],, and so on.
    Bits: 19:18 CSPDD(rw) - CS# Power Down Driver: Powers down, when set, the output driver on the I/O for CS#[3:0], pins. CSPDD[0], controls the power down for CS#[0],, CSPDD[1], controls the power down for CS#[1],, and so on. CKE and ODT driver power down is controlled by DSGCR register.
    Bits: 15:14 RANKODT(rw) - Rank On-Die Termination: Enables, when set, the on-die termination on the I/O for CKE[3:0],, ODT[3:0],, and CS#[3:0], pins. RANKODT[0], controls the on-die termination for CKE[0],, ODT[0],, and CS#[0],, RANKODT[1], controls the on-die termination for CKE[1],, ODT[1],, and CS#[1],, and so on.
    Bits: 12:11 CKPDR(rw) - CK Power Down Receiver: Powers down, when set, the input receiver on the I/O for CK[0],, CK[1],, and CK[2], pins, respectively.
    Bits:  9:8  CKPDD(rw) - CK Power Down Driver: Powers down, when set, the output driver on the I/O for CK[0],, CK[1],, and CK[2], pins, respectively.
    Bits:  6:5  CKODT(rw) - CK On-Die Termination: Enables, when set, the on-die termination on the I/O for CK[0],, CK[1],, and CK[2], pins, respectively.
    Bits:  4    ACPDR(rw) - AC Power Down Receiver: Powers down, when set, the input receiver on the I/O for RAS#, CAS#, WE#, BA[2:0],, and A[15:0], pins.
    Bits:  3    ACPDD(rw) - AC Power Down Driver: Powers down, when set, the output driver on the I/O for RAS#, CAS#, WE#, BA[2:0],, and A[15:0], pins.
    Bits:  2    ACODT(rw) - Address/Command On-Die Termination: Enables, when set, the on-die termination on the I/O for RAS#, CAS#, WE#, BA[2:0],, and A[15:0], pins.
    Bits:  1    ACOE(rw) - Address/Command Output Enable: Enables, when set, the output driver on the I/O for all address and command pins.
    Bits:  0    ACIOM(rw) - Address/Command I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for all address and command pins. This bit connects to bit [0], of the IOM pin on the D3F I/Os, and for other I/O libraries, it connects to the IOM pin of the I/O.
*/
#define NFP_EMUX_PHY_I_MUPUB_ACIOCR                          0x00000038
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACSR(_x)               (((_x) & 0x3) << 30)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACSR_of(_x)            (((_x) >> 30) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RSTIOM                 BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RSTPDR                 BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RSTPDD                 BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RSTODT                 BIT(26)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RANKPDR(_x)            (((_x) & 0x3) << 22)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RANKPDR_of(_x)         (((_x) >> 22) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CSPDD(_x)              (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CSPDD_of(_x)           (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RANKODT(_x)            (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_RANKODT_of(_x)         (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CKPDR(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CKPDR_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CKPDD(_x)              (((_x) & 0x3) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CKPDD_of(_x)           (((_x) >> 8) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CKODT(_x)              (((_x) & 0x3) << 5)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_CKODT_of(_x)           (((_x) >> 5) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACPDR                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACPDD                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACOE                   BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_ACIOCR_ACIOM                  BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DXCCR -
    Bits: 31:28 DDPDRCDO(rw) - Dynamic Data Power Down Receiver Count Down Offset: Offset applied in calculating window of time where receiver is powered up.
    Bits: 27:24 DDPDDCDO(rw) - Dynamic Data Power Down Driver Count Down Offset: Offset applied in calculating window of time where driver is powered up.
    Bits: 23    DYNDXPDR(rw) - Data Power Down Receiver: Dynamically powers down, when set, the input receiver on I/O for the DQ pins of the active DATX8 macros. Applies only when DXPDR and DXnGCR.DXPDR are not set to 1. Receiver is powered-up on a DFI READ command and powered-down (trddata_en + fixed_read_latency + n) HDR cycles after the last DFI READ command. Note that n is defined by the register bit field DXCCR[31:28] (DDPDRCDO).
    Bits: 22    DYNDXPDD(rw) - Dynamic Data Power Down Driver: Dynamically powers down, when set, the output driver on I/O for the DQ pins of the active DATX8 macros. Applies only when DXPDD and DXnGCR.DXPDD are not set to 1. Driver is powered-up on a DFI WRITE command and powered-down (twrlat + WL/2 + n) HDR cycles after the last DFI WRITE command. Note that n is defined by the register bit field DXCCR[27:24] (DDPDDCDO).
    Bits: 21    UDQIOM(rw) - Unused DQ I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for unused DQ pins.
    Bits: 20    UDQPDR(rw) - Unused DQ Power Down Receiver: Powers down, when set, the input receiver on the I/O for unused DQ pins.
    Bits: 19    UDQPDD(rw) - Unused DQ Power Down Driver: Powers down, when set, the output driver on the I/O for unused DQ pins.
    Bits: 18    UDQODT(rw) - Unused DQ On-Die Termination: Enables, when set, the on-die termination on the I/O for unused DQ pins.
    Bits: 17:15 MSBUDQ(rw) - Most Significant Byte Unused DQs: Specifies the number of DQ bits that are not used in the most significant byte. The used (valid) bits for this byte are [8-MSBDQ- 1:0],. To disable the whole byte, use the DXnGCR.DXEN register.
    Bits: 14:13 DXSR(rw) - Data Slew Rate (D3F I/O Only): Selects slew rate of the I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros.
    Bits: 12:9  DQSNRES(rw) - DQS# Resistor: Selects the on-die pull-up/pull-down resistor for DQS# pins. Same encoding as DQSRES.
    Bits:  8:5  DQSRES(rw) - DQS Resistor: Selects the on-die pull-down/pull-up resistor for DQS pins. DQSRES[3], selects pull-down (when set to 0) or pull-up (when set to 1). DQSRES[2:0], selects the resistor value as follows:
    Bits:  4    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the PDR configuration bit of the individual DATX8.
    Bits:  3    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the PDD configuration bit of the individual DATX8.
    Bits:  2    MDLEN(rw) - Master Delay Line Enable: Enables, if set, all DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or on when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the MDLEN bit in the individual DATX8.
    Bits:  1    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the IOM configuration bit of the individual DATX8.
    Bits:  0    DXODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the ODT configuration bit of the individual DATX8 ('DATX8 Common Configuration Register (DXCCR)' on page 68)
*/
#define NFP_EMUX_PHY_I_MUPUB_DXCCR                           0x0000003c
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DDPDRCDO(_x)            (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DDPDRCDO_of(_x)         (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DDPDDCDO(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DDPDDCDO_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DYNDXPDR                BIT(23)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DYNDXPDD                BIT(22)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_UDQIOM                  BIT(21)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_UDQPDR                  BIT(20)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_UDQPDD                  BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_UDQODT                  BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_MSBUDQ(_x)              (((_x) & 0x7) << 15)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_MSBUDQ_of(_x)           (((_x) >> 15) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DXSR(_x)                (((_x) & 0x3) << 13)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DXSR_of(_x)             (((_x) >> 13) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DQSNRES(_x)             (((_x) & 0xf) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DQSNRES_of(_x)          (((_x) >> 9) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DQSRES(_x)              (((_x) & 0xf) << 5)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DQSRES_of(_x)           (((_x) >> 5) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DXPDR                   BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DXPDD                   BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_MDLEN                   BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DXIOM                   BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DXCCR_DXODT                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DSGCR -
    Bits: 31    CKEOE(rw) - SDRAM CKE Output Enable: Enables, when set, the output driver on the I/O for SDRAM CKE pins.
    Bits: 30    RSTOE(rw) - SDRAM Reset Output Enable: Enables, when set, the output driver on the I/O for SDRAM RST# pin.
    Bits: 29    ODTOE(rw) - SDRAM ODT Output Enable: Enables, when set, the output driver on the I/O for SDRAM ODT pins.
    Bits: 28    CKOE(rw) - SDRAM CK Output Enable: Enables, when set, the output driver on the I/O for SDRAM CK/CK# pins.
    Bits: 25:24 ODTPDD(rw) - ODT Power Down Driver: Powers down, when set, the output driver on the I/O for ODT[3:0], pins. ODTPDD[0], controls the power down for ODT[0],, ODTPDD[1], controls the power down for ODT[1],, and so on.
    Bits: 21:20 CKEPDD(rw) - CKE Power Down Driver: Powers down, when set, the output driver on the I/O for CKE[3:0], pins. CKEPDD[0], controls the power down for CKE[0],, CKEPDD[1], controls the power down for CKE[1],, and so on.
    Bits: 19    SDRMODE(rw) - Single Data Rate Mode: Indicates if set that the external controller is configured to run in single data rate (SDR) mode. Otherwise if not set the controller is running in half data rate (HDR) mode. This bit not supported in the current version of the PUB.
    Bits: 18    RRMODE(rw) - Rise-to-Rise Mode: Indicates if set that the PHY mission mode is configured to run in rise-to-rise mode. Otherwise if not set the PHY mission modeis running in rise-to- fall mode.
    Bits: 17    ATOAE(rw) - ATO Analog Test Enable: Enables, if set, the analog test output (ATO) I/O.
    Bits: 16    DTOOE(rw) - DTO Output Enable: Enables, when set, the output driver on the I/O for DTO pins.
    Bits: 15    DTOIOM(rw) - DTO I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DTO pins.
    Bits: 14    DTOPDR(rw) - DTO Power Down Receiver: Powers down, when set, the input receiver on the I/O for DTO pins.
    Bits: 13    DTOPDD(rw) - DTO Power Down Driver: Powers down, when set, the output driver on the I/O for DTO pins.
    Bits: 12    DTOODT(rw) - DTO On-Die Termination: Enables, when set, the on-die termination on the I/O for DTO pins.
    Bits: 11:8  PUAD(rw) - PHY Update Acknowledge Delay: Specifies the number of clock cycles that the indication for the completion of PHY update from the PHY to the controller should be delayed. This essentially delays, by this many clock cycles, the de-assertion of dfi_ctrlup_ack and dfi_phyupd_req signals relative to the time when the delay lines or I/Os are updated.
    Bits:  7    BRRMODE(rw) - Bypass Rise-to-Rise Mode: Indicates if set that the PHY bypass mode is configured to run in rise-to-rise mode. Otherwise if not set the PHY bypass mode is running in rise-to-fall mode.
    Bits:  6    DQSGX(rw) - DQS Gate Extension: Specifies if set that the DQS gating must be extended by two DRAM clock cycles and then re-centered, i.e. one clock cycle extension on either side.
    Bits:  5    CUAEN(rw) - Controller Update Acknowledge Enable: Specifies, if set, that the PHY should issue controller update acknowledge when the DFI controller update request is asserted. By default the PHY does not acknowledge controller initiated update requests but simply does an update whenever there is a controller update request. This speeds up the update.
    Bits:  4    LPPLLPD(rw) - Low Power PLL Power Down: Specifies if set that the PHY should respond to the DFI low power opportunity request and power down the PLL of the byte if the wakeup time request satisfies the PLL lock time.
    Bits:  3    LPIOPD(rw) - Low Power I/O Power Down: Specifies if set that the PHY should respond to the DFI low power opportunity request and power down the I/Os of the byte.
    Bits:  2    ZUEN(rw) - Impedance Update Enable: Specifies, if set, that in addition to DDL VT update, the PHY could also perform impedance calibration (update). Refer to the 'Impedance Control Register 0-1 (ZQnCR0-1)' on page 104 bit fields DFICU0, DFICU1 and DFICCU bits to control if an impedance calibration is performed (update) with a DFI controller update request. Refer to the 'Impedance Control Register 0-1 (ZQnCR0-1)' on page 104 bit fields DFIPU0 and DFIPU1 bits to control if an impedance calibration is performed (update) with a DFI PHY update request.
    Bits:  1    BDISEN(rw) - Byte Disable Enable: Specifies if set that the PHY should respond to DFI byte disable request. Otherwise the byte disable from the DFI is ignored in which case bytes can only be disabled using the DXnGCR register.
    Bits:  0    PUREN(rw) - PHY Update Request Enable: Specifies if set, that the PHY should issue PHY- initiated update request when there is DDL VT drift.
*/
#define NFP_EMUX_PHY_I_MUPUB_DSGCR                           0x00000040
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_CKEOE                   BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_RSTOE                   BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_ODTOE                   BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_CKOE                    BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_ODTPDD(_x)              (((_x) & 0x3) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_ODTPDD_of(_x)           (((_x) >> 24) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_CKEPDD(_x)              (((_x) & 0x3) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_CKEPDD_of(_x)           (((_x) >> 20) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_SDRMODE                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_RRMODE                  BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_ATOAE                   BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_DTOOE                   BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_DTOIOM                  BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_DTOPDR                  BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_DTOPDD                  BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_DTOODT                  BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_PUAD(_x)                (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_PUAD_of(_x)             (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_BRRMODE                 BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_DQSGX                   BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_CUAEN                   BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_LPPLLPD                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_LPIOPD                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_ZUEN                    BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_BDISEN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DSGCR_PUREN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCR -
    Bits: 29    UDIMM(rw) - Un-buffered DIMM Address Mirroring: Indicates if set that there is address mirroring on the second rank of an un-buffered DIMM (the rank connected to CS#[1],). In this case, the PUB re-scrambles the bank and address when sending mode register commands to the second rank. This only applies to PUB internal SDRAM transactions. Transactions generated by the controller must make its own adjustments when using an un-buffered DIMM. DCR[NOSRA], must be set if address mirroring is enabled.
    Bits: 28    DDR2T(rw) - DDR 2T Timing: Indicates if set that 2T timing should be used by PUB internally generated SDRAM transactions.
    Bits: 27    NOSRA(rw) - No Simultaneous Rank Access: Specifies if set that simultaneous rank access on the same clock cycle is not allowed. This means that multiple chip select signals should not be asserted at the same time. This may be required on some DIMM systems.
    Bits: 17:10 BYTEMASK(rw) - Byte Mask: Mask applied to all beats of read data on all bytes lanes during read DQS gate training. This allows training to be conducted based on selected bit(s) from the byte lanes. Note that this mask applies in DDR3 MPR operation mode as well and must be in keeping with the PDQ field setting.
    Bits:  7    MPRDQ(rw) - Multi-Purpose Register (MPR) DQ (DDR3 Only): Specifies the value that is driven on non-primary DQ pins during MPR reads. Valid values are:
    Bits:  6:4  PDQ(rw) - Primary DQ (DDR3 Only): Specifies the DQ pin in a byte that is designated as a primary pin for Multi-Purpose Register (MPR) reads. Valid values are 0 to 7 for DQ[0], to DQ[7],, respectively.
    Bits:  3    DDR8BNK(rw) - DDR 8-Bank: Indicates if set that the SDRAM used has 8 banks. tRPA = tRP+1 and tFAW are used for 8-bank DRAMs, other tRPA = tRP and no tFAW is used. Note that a setting of 1 for DRAMs that have fewer than 8 banks still results in correct functionality but less tighter DRAM command spacing for the parameters described here.
    Bits:  2:0  DDRMD(rw) - DDR Mode: SDRAM DDR mode. Valid values are:
*/
#define NFP_EMUX_PHY_I_MUPUB_DCR                             0x00000044
#define   NFP_EMUX_PHY_I_MUPUB_DCR_UDIMM                     BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_DDR2T                     BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_NOSRA                     BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_BYTEMASK(_x)              (((_x) & 0xff) << 10)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_BYTEMASK_of(_x)           (((_x) >> 10) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_MPRDQ                     BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_PDQ(_x)                   (((_x) & 0x7) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_PDQ_of(_x)                (((_x) >> 4) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_DDR8BNK                   BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_DDRMD(_x)                 (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCR_DDRMD_of(_x)              (((_x) >> 0) & 0x7)
#define     NFP_EMUX_PHY_I_MUPUB_DCR_DDRMD_DDR               (1)
#define     NFP_EMUX_PHY_I_MUPUB_DCR_DDRMD_DDR2              (2)
#define     NFP_EMUX_PHY_I_MUPUB_DCR_DDRMD_DDR3              (3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTPR0 -
    Bits: 31:26 tRC(rw) - Activate to activate command delay (same bank). Valid values are 2 to 63.
    Bits: 25:22 tRRD(rw) - Activate to activate command delay (different banks). Valid values are 1 to 15.
    Bits: 21:16 tRAS(rw) - Activate to precharge command delay. Valid values are 2 to 63.
    Bits: 15:12 tRCD(rw) - Activate to read or write delay. Minimum time from when an activate command is issued to when a read or write to the activated row can be issued. Valid values are 2 to 15.
    Bits: 11:8  tRP(rw) - Precharge command period: The minimum time between a precharge command and any other command. Note that the Controller automatically derives tRPA for 8- bank DDR2_Devices by adding 1 to tRP. Valid values are 2 to 15.
    Bits:  7:4  tWTR(rw) - Internal write to read command delay. Valid values are 1 to 15.
    Bits:  3:0  tRTP(rw) - Internal read to precharge command delay. Valid values are 2 to 15.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTPR0                           0x00000048
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRC(_x)                 (((_x) & 0x3f) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRC_of(_x)              (((_x) >> 26) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRRD(_x)                (((_x) & 0xf) << 22)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRRD_of(_x)             (((_x) >> 22) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRAS(_x)                (((_x) & 0x3f) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRAS_of(_x)             (((_x) >> 16) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRCD(_x)                (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRCD_of(_x)             (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRP(_x)                 (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRP_of(_x)              (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TWTR(_x)                (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TWTR_of(_x)             (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRTP(_x)                (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR0_TRTP_of(_x)             (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTPR1 -
    Bits: 31:30 tAOND_tAOFD(rw) - ODT turn-on/turn-off delays (DDR2 only). The delays are in clock cycles. Most DDR2_Devices utilize a fixed value of 2/2.5. For non-standard SDRAMs, the user must ensure that the operational Write Latency is always greater than or equal to the ODT turn-on delay. For example, a DDR2 SDRAM with CAS latency set to 3 and CAS additive latency set to 0 has a Write Latency of 2. Thus 2/2.5 can be used, but not 3/3.5 or higher. Valid values are:
    Bits: 29:26 tWLO(rw) - Write leveling output delay: Number of clock cycles from when write leveling DQS is driven high by the control block to when the results from the SDRAM on DQ is sampled by the control block. This must include the SDRAM tWLO timing parameter plus the round trip delay from control block to SDRAM back to control block.
    Bits: 25:20 tWLMRD(rw) - Minimum delay from when write leveling mode is programmed to the first DQS/DQS# rising edge.
    Bits: 19:11 tRFC(rw) - Refresh-to-Refresh: Indicates the minimum time, in clock cycles, between two refresh commands or between a refresh and an active command. This is derived from the minimum refresh interval from the datasheet, tRFC(min), divided by the clock cycle time. The default number of clock cycles is for the largest JEDEC tRFC(min parameter value supported.
    Bits: 10:5  tFAW(rw) - 4-bank activate period. No more than 4-bank activate commands may be issued in a given tFAW period. Only applies to 8-bank devices. Valid values are 2 to 63.
    Bits:  4:2  tMOD(rw) - Load mode update delay (DDR3 only). The minimum time between a load mode register command and a non-load mode register command. Valid values are:
    Bits:  1:0  tMRD(rw) - Load mode cycle time: The minimum time between a load mode register command and any other command. For DDR3 this is the minimum time between two load mode register commands. Valid values for DDR2 are 2 to 3. For DDR3, the value used for tMRD is 4 plus the value programmed in these bits, i.e. tMRD value for DDR3 ranges from 4 to 7.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTPR1                           0x0000004c
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TAOND_TAOFD(_x)         (((_x) & 0x3) << 30)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TAOND_TAOFD_of(_x)      (((_x) >> 30) & 0x3)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TAOND_TAOFD_2_2_5     (0)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TAOND_TAOFD_3_3_5     (1)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TAOND_TAOFD_4_4_5     (2)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TAOND_TAOFD_5_5_5     (3)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TWLO(_x)                (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TWLO_of(_x)             (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TWLMRD(_x)              (((_x) & 0x3f) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TWLMRD_of(_x)           (((_x) >> 20) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TRFC(_x)                (((_x) & 0x1ff) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TRFC_of(_x)             (((_x) >> 11) & 0x1ff)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TFAW(_x)                (((_x) & 0x3f) << 5)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TFAW_of(_x)             (((_x) >> 5) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD(_x)                (((_x) & 0x7) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_of(_x)             (((_x) >> 2) & 0x7)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_12               (0)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_13               (1)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_14               (2)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_15               (3)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_16               (4)
#define     NFP_EMUX_PHY_I_MUPUB_DTPR1_TMOD_17               (5)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TMRD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR1_TMRD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTPR2 -
    Bits: 31    tCCD(rw) - Read to read and write to write command delay. Valid values are:
    Bits: 30    tRTW(rw) - Read to Write command delay. This parameter allows the user to increase the delay between issuing Write commands to the SDRAM when preceded by Read commands. This provides an option to increase bus turn-around margin for high frequency systems. Valid values are:
    Bits: 29    tRTODT(rw) - Read to ODT delay (DDR3 only). Specifies whether ODT can be enabled immediately after the read post-amble or one clock delay has to be added. If tRTODT is set to 1, then the read-to-write latency is increased by 1 if ODT is enabled. Valid values are:
    Bits: 28:19 tDLLK(rw) - DLL locking time. Valid values are 2 to 1023.
    Bits: 18:15 tCKE(rw) - CKE minimum pulse width. Also specifies the minimum time that the SDRAM must remain in power down or self refresh mode. For DDR3 this parameter must be set to the value of tCKESR which is usually bigger than the value of tCKE. Valid values are 2 to 15.
    Bits: 14:10 tXP(rw) - Power down exit delay. The minimum time between a power down exit command and any other command. This parameter must be set to the maximum of the various minimum power down exit delay parameters specified in the SDRAM datasheet, i.e. max(tXP, tXARD, tXARDS) for DDR2 and max(tXP, tXPDLL) for DDR3. Valid values are 2 to 31.
    Bits:  9:0  tXS(rw) - Self refresh exit delay. The minimum time between a self refresh exit command and any other command. This parameter must be set to the maximum of the various minimum self refresh exit delay parameters specified in the SDRAM datasheet, i.e. max(tXSNR, tXSRD) for DDR2 and max(tXS, tXSDLL) for DDR3. Valid values are 2 to 1023.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTPR2                           0x00000050
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TCCD                    BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TRTW                    BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TRTODT                  BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TDLLK(_x)               (((_x) & 0x3ff) << 19)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TDLLK_of(_x)            (((_x) >> 19) & 0x3ff)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TCKE(_x)                (((_x) & 0xf) << 15)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TCKE_of(_x)             (((_x) >> 15) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TXP(_x)                 (((_x) & 0x1f) << 10)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TXP_of(_x)              (((_x) >> 10) & 0x1f)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TXS(_x)                 (((_x) & 0x3ff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTPR2_TXS_of(_x)              (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR0 -
    Bits: 15:13 RSVD(rw) - Reserved. These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'.
    Bits: 12    PD(rw) - Power-Down Control: Controls the exit time for power-down modes. Refer to the SDRAM datasheet for details on power-down modes. Valid values are:
    Bits: 11:9  WR(rw) - Write Recovery: This is the value of the write recovery in clock cycles. It is calculated by dividing the datasheet write recovery time, tWR (ns) by the datasheet clock cycle time, tCK (ns) and rounding up a non-integer value to the next integer. All other settings are reserved and should not be used. NOTE: tWR (ns) is the time from the first SDRAM positive clock edge after the last data-in pair of a write command, to when a precharge of the same bank can be issued. Valid values are:
    Bits:  8    DR(rw) - DLL Reset: Writing a '1' to this bit will reset the SDRAM DLL. This bit is self- clearing, i.e. it returns back to '0' after the DLL reset has been issued.
    Bits:  7    TM(rw) - Operating Mode: Selects either normal operating mode (0) or test mode (1). Test mode is reserved for the manufacturer and should not be used.
    Bits:  6:4  CL3_1(rw) - CAS Latency: The delay, in clock cycles, between when the SDRAM registers a read command to when data is available. Valid values are: 0010 = 5 0100 = 6 0110 = 7 1000 = 8 1010 = 9 1100 = 10 1110 = 11 0001 = 12 0011 = 13 0101 = 14 All other settings are reserved and should not be used.
    Bits:  3    BT(rw) - Burst Type: Indicates whether a burst is sequential (0) or interleaved (1).
    Bits:  2    CL0(rw) - CAS Latency: The delay, in clock cycles, between when the SDRAM registers a read command to when data is available. Valid values are: 0010 = 5 0100 = 6 0110 = 7 1000 = 8 1010 = 9 1100 = 10 1110 = 11 0001 = 12 0011 = 13 0101 = 14 All other settings are reserved and should not be used.
    Bits:  1:0  BL(rw) - Burst Length: Determines the maximum number of column locations that can be accessed during a given read or write command. Valid values are:
*/
#define NFP_EMUX_PHY_I_MUPUB_MR0                             0x00000054
#define   NFP_EMUX_PHY_I_MUPUB_MR0_RSVD(_x)                  (((_x) & 0x7) << 13)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_RSVD_of(_x)               (((_x) >> 13) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_PD                        BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_WR(_x)                    (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_WR_of(_x)                 (((_x) >> 9) & 0x7)
#define     NFP_EMUX_PHY_I_MUPUB_MR0_WR_5                    (1)
#define     NFP_EMUX_PHY_I_MUPUB_MR0_WR_6                    (2)
#define     NFP_EMUX_PHY_I_MUPUB_MR0_WR_7                    (3)
#define     NFP_EMUX_PHY_I_MUPUB_MR0_WR_8                    (4)
#define     NFP_EMUX_PHY_I_MUPUB_MR0_WR_10                   (5)
#define     NFP_EMUX_PHY_I_MUPUB_MR0_WR_12                   (6)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_DR                        BIT(8)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_TM                        BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_CL3_1(_x)                 (((_x) & 0x7) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_CL3_1_of(_x)              (((_x) >> 4) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_BT                        BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_CL0                       BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_BL(_x)                    (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_MR0_BL_of(_x)                 (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR1 -
    Bits: 15:13 RSVD3(rw) - Reserved. These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'.
    Bits: 12    QOFF(rw) - Output Enable/Disable: When '0', all outputs function normal; when '1' all SDRAM outputs are disabled removing output buffer current. This feature is intended to be used for IDD characterization of read current and should not be used in normal operation.
    Bits: 11    TDQS(rw) - Termination Data Strobe: When enabled ('1') TDQS provides additional termination resistance outputs that may be useful in some system configurations. Refer to the SDRAM datasheet for details.
    Bits: 10    RSVD2(rw) - Reserved. This is a JEDEC reserved bit for DDR3 and is recommended by JEDEC to be programmed to '0'.
    Bits:  9    RTT2(rw) - On Die Termination: Selects the effective resistance for SDRAM on die termination. Valid values are:
    Bits:  8    RSVD1(rw) - Reserved. This is a JEDEC reserved bit for DDR3 and is recommended by JEDEC to be programmed to '0'.
    Bits:  7    LEVEL(rw) - Write Leveling Enable: Enables write-leveling when set.
    Bits:  6    RTT1(rw) - On Die Termination: Selects the effective resistance for SDRAM on die termination. Valid values are:
    Bits:  5    DIC1(rw) - Output Driver Impedance Control: Controls the output drive strength. Valid values are:
    Bits:  4:3  AL(rw) - Posted CAS Additive Latency: Setting additive latency that allows read and write commands to be issued to the SDRAM earlier than normal (refer to the SDRAM datasheet for details). Valid values are:
    Bits:  2    RTT0(rw) - On Die Termination: Selects the effective resistance for SDRAM on die termination. Valid values are:
    Bits:  1    DIC0(rw) - Output Driver Impedance Control: Controls the output drive strength. Valid values are:
    Bits:  0    DE(rw) - DLL Enable/Disable: Enable (0) or disable (1) the DLL. DLL must be enabled for normal operation.
*/
#define NFP_EMUX_PHY_I_MUPUB_MR1                             0x00000058
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RSVD3(_x)                 (((_x) & 0x7) << 13)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RSVD3_of(_x)              (((_x) >> 13) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_QOFF                      BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_TDQS                      BIT(11)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RSVD2                     BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RTT2                      BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RSVD1                     BIT(8)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_LEVEL                     BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RTT1                      BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_DIC1                      BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_AL(_x)                    (((_x) & 0x3) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_AL_of(_x)                 (((_x) >> 3) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_RTT0                      BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_DIC0                      BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_MR1_DE                        BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR2 -
    Bits: 15:11 RSVD2(rw) - These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'
    Bits: 10:9  RTTWR(rw) - Dynamic ODT: Selects RTT for dynamic ODT. Valid values are:
    Bits:  8    RSVD1(rw) - Reserved. This bit is JEDEC reserved and is recommended by JEDEC to be programmed to '0'.
    Bits:  7    SRT(rw) - Self-Refresh Temperature Range: Selects either normal ('0') or extended ('1') operating temperature range during self-refresh.
    Bits:  6    ASR(rw) - Auto Self-Refresh: When enabled ('1'), SDRAM automatically provides self-refresh power management functions for all supported operating temperature values. Otherwise the SRT bit must be programmed to indicate the temperature range.
    Bits:  5:3  CWL(rw) - CAS Write Latency: The delay, in clock cycles, between when the SDRAM registers a write command to when write data is available.All other settings are reserved and should not be used. Valid values are:
    Bits:  2:0  PASR(rw) - Partial Array Self Refresh: Specifies that data located in areas of the array beyond the specified location will be lost if self refresh is entered. Valid settings for 4 banks are: 000 = Full Array 001 = Half Array (BA[1:0] = 00 & 01) 010 = Quarter Array (BA[1:0] = 00) 011 = Not defined 100 = 3/4 Array (BA[1:0] = 01, 10, & 11) 101 = Half Array (BA[1:0] = 10 & 11) 110 = Quarter Array (BA[1:0] = 11) 111 = Not defined Valid settings for 8 banks are: 000 = Full Array 001 = Half Array (BA[2:0] = 000, 001, 010 & 011) 010 = Quarter Array (BA[2:0] = 000, 001) 011 = 1/8 Array (BA[2:0] = 000) 100 = 3/4 Array (BA[2:0] = 010, 011, 100, 101, 110 & 111) 101 = Half Array (BA[2:0] = 100, 101, 110 & 111) 110 = Quarter Array (BA[2:0] = 110 & 111) 111 = 1/8 Array (BA[2:0] 111)
*/
#define NFP_EMUX_PHY_I_MUPUB_MR2                             0x0000005c
#define   NFP_EMUX_PHY_I_MUPUB_MR2_RSVD2(_x)                 (((_x) & 0x1f) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_RSVD2_of(_x)              (((_x) >> 11) & 0x1f)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_RTTWR(_x)                 (((_x) & 0x3) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_RTTWR_of(_x)              (((_x) >> 9) & 0x3)
#define     NFP_EMUX_PHY_I_MUPUB_MR2_RTTWR_RZQ_4             (1)
#define     NFP_EMUX_PHY_I_MUPUB_MR2_RTTWR_RZQ_2             (2)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_RSVD1                     BIT(8)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_SRT                       BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_ASR                       BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_CWL(_x)                   (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_CWL_of(_x)                (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_PASR(_x)                  (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_MR2_PASR_of(_x)               (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR3 -
    Bits: 15:3  RSVD(rw) - These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'
    Bits:  2    MPR(rw) - Multi-Purpose Register Enable: Enables, if set, that read data should come from the Multi-Purpose Register. Otherwise read data come from the DRAM array.
    Bits:  1:0  MPRLOC(rw) - Multi-Purpose Register (MPR) Location: Selects MPR data location: Valid value are: 00 = Predefined pattern for system calibration All other settings are reserved and should not be used.
*/
#define NFP_EMUX_PHY_I_MUPUB_MR3                             0x00000060
#define   NFP_EMUX_PHY_I_MUPUB_MR3_RSVD(_x)                  (((_x) & 0x1fff) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_MR3_RSVD_of(_x)               (((_x) >> 3) & 0x1fff)
#define   NFP_EMUX_PHY_I_MUPUB_MR3_MPR                       BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_MR3_MPRLOC(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_MR3_MPRLOC_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ODTCR -
    Bits: 29:28 WRODT3(ro) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 25:24 WRODT2(ro) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 21:20 WRODT1(rw) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 17:16 WRODT0(rw) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 13:12 RDODT3(ro) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
    Bits:  9:8  RDODT2(ro) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
    Bits:  5:4  RDODT1(rw) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
    Bits:  1:0  RDODT0(rw) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
*/
#define NFP_EMUX_PHY_I_MUPUB_ODTCR                           0x00000064
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT3(_x)              (((_x) & 0x3) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT3_of(_x)           (((_x) >> 28) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT2(_x)              (((_x) & 0x3) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT2_of(_x)           (((_x) >> 24) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT1(_x)              (((_x) & 0x3) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT1_of(_x)           (((_x) >> 20) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT0(_x)              (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_WRODT0_of(_x)           (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT3(_x)              (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT3_of(_x)           (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT2(_x)              (((_x) & 0x3) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT2_of(_x)           (((_x) >> 8) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT1(_x)              (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT1_of(_x)           (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT0(_x)              (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ODTCR_RDODT0_of(_x)           (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTCR -
    Bits: 31:28 RFSHDT(rw) - Refresh During Training: A non-zero value specifies that a burst of refreshes equal to the number specified in this field should be sent to the SDRAM after training each rank except the last rank.
    Bits: 25:24 RANKEN(rw) - Rank Enable: Specifies the ranks that are enabled for data-training. Bit 0 controls rank 0, bit 1 controls rank 1, bit 2 controls rank 2, and bit 3 controls rank 3. Setting the bit to '1' enables the rank, and setting it to '0' disables the rank.
    Bits: 23    DTEXG(rw) - Data Training with Early/Extended Gate: Specifies if set that the DQS gate training should be performed with an early/extended gate as specified in DSGCR.DQSGX.
    Bits: 22    DTEXD(rw) - Data Training Extended Write DQS: Enables, if set, an extended write DQS whereby two additional pulses of DQS are added as post-amble to a burst of writes. Generally this should only be enabled when running read bit deskew with the intention of performing read eye deskew prior to running write leveling adjustment.
    Bits: 21    DTDSTP(w1c) - Data Training Debug Step: A write of 1 to this bit steps the data training algorithm through a single step. This bit is self-clearing.
    Bits: 20    DTDEN(rw) - Data Training Debug Enable: Enables, if set, the data training debug mode.
    Bits: 19:16 DTDBS(rw) - Data Training Debug Byte Select: Selects the byte during data training debug mode.
    Bits: 14    DTWDQMO(rw) - Data Training WDQ Margin Override: If set the Training WDQ Margin value specified in DTCR[11:8], (DTWDQM) is used during data training. Otherwise the value is computed as of the ddr_clk period measurement found durig calibration of the WDQ LCDL.
    Bits: 13    DTBDC(rw) - Data Training Bit Deskew Centering: Enables, if set, eye centering capability during write and read bit deskew training.
    Bits: 12    DTWBDDM(rw) - Data Training Write Bit Deskew Data Mask. If set it enables write bit deskew of the data mask
    Bits: 11:8  DTWDQM(rw) - Training WDQ Margin: Defines how close to 0 or how close to 2*(wdq calibration_value) the WDQ lcdl can be moved during training. Basically defines how much timing margin.
    Bits:  7    DTCMPD(rw) - Data Training Compare Data: Specifies, if set, that DQS gate training should also check if the returning read data is correct. Otherwise data-training only checks if the correct number of DQS edges were returned.
    Bits:  6    DTMPR(rw) - Data Training Using MPR (DDR3 Only): Specifies, if set, that DQS gate training should use the SDRAM Multi-Purpose Register (MPR) register. Otherwise data- training is performed by first writing to some locations in the SDRAM and then reading them back.
    Bits:  5:4  DTRANK(rw) - Data Training Rank: Selects the SDRAM rank to be used during data bit deskew and eye centering.
    Bits:  3:0  DTRPTN(rw) - Data Training Repeat Number: Repeat number used to confirm stability of DDR write or read
*/
#define NFP_EMUX_PHY_I_MUPUB_DTCR                            0x00000068
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_RFSHDT(_x)               (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_RFSHDT_of(_x)            (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_RANKEN(_x)               (((_x) & 0x3) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_RANKEN_of(_x)            (((_x) >> 24) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTEXG                    BIT(23)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTEXD                    BIT(22)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTDSTP                   BIT(21)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTDEN                    BIT(20)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTDBS(_x)                (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTDBS_of(_x)             (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTWDQMO                  BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTBDC                    BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTWBDDM                  BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTWDQM(_x)               (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTWDQM_of(_x)            (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTCMPD                   BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTMPR                    BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTRANK(_x)               (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTRANK_of(_x)            (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTRPTN(_x)               (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTCR_DTRPTN_of(_x)            (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR0 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTAR0                           0x0000006c
#define   NFP_EMUX_PHY_I_MUPUB_DTAR0_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR0_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR0_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR0_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR0_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR0_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR1 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTAR1                           0x00000070
#define   NFP_EMUX_PHY_I_MUPUB_DTAR1_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR1_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR1_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR1_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR1_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR1_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR2 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTAR2                           0x00000074
#define   NFP_EMUX_PHY_I_MUPUB_DTAR2_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR2_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR2_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR2_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR2_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR2_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR3 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTAR3                           0x00000078
#define   NFP_EMUX_PHY_I_MUPUB_DTAR3_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR3_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR3_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR3_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR3_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTAR3_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTDR0 -
    Bits: 31:24 DTBYTE3(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 23:16 DTBYTE2(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 15:8  DTBYTE1(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits:  7:0  DTBYTE0(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTDR0                           0x0000007c
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE3(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE3_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE2(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE2_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE1(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE1_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE0(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR0_DTBYTE0_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTDR1 -
    Bits: 31:24 DTBYTE7(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 23:16 DTBYTE6(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 15:8  DTBYTE5(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits:  7:0  DTBYTE4(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTDR1                           0x00000080
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE7(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE7_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE6(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE6_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE5(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE5_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE4(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTDR1_DTBYTE4_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTEDR0 -
    Bits: 31:24 DTWBMX(ro) - Data Training Write BDL Shift Maximum.
    Bits: 23:16 DTWBMN(ro) - Data Training Write BDL Shift Minimum.
    Bits: 15:8  DTWLMX(ro) - Data Training WDQ LCDL Maximum.
    Bits:  7:0  DTWLMN(ro) - Data Training WDQ LCDL Minimum.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTEDR0                          0x00000084
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWBMX(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWBMX_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWBMN(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWBMN_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWLMX(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWLMX_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWLMN(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR0_DTWLMN_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTEDR1 -
    Bits: 31:24 DTRBMX(ro) - Data Training Read BDL Shift Maximum.
    Bits: 23:16 DTRBMN(ro) - Data Training Read BDL Shift Minimum.
    Bits: 15:8  DTRLMX(ro) - Data Training RDQS LCDL Maximum.
    Bits:  7:0  DTRLMN(ro) - Data Training RDQS LCDL Minimum.
*/
#define NFP_EMUX_PHY_I_MUPUB_DTEDR1                          0x00000088
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRBMX(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRBMX_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRBMN(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRBMN_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRLMX(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRLMX_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRLMN(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DTEDR1_DTRLMN_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGCR2 -
    Bits: 31    DYNACPDD(rw) - Dynamic AC Power Down Driver: Powers down, when set, the output driver on I/O for ADDR and BA. This bit is ORed with bit ACIOCR[3] (ACPDD)
    Bits: 30    LPMSTRC0(rw) - Low-Power Master Channel 0: set to 1 to have channel 0 act as master to drive channel 1 low-power functions simultaneously. Only valid in shared-AC mode.
    Bits: 29    ACPDDC(rw) - AC Power-Down with Dual Channels : Set to 1 to power-down address/command lane when both data channels are powered-down. Only valid in shared-AC mode.
    Bits: 28    SHRAC(rw) - Shared-AC mode: set to 1 to enable shared address/command mode with two independent data channels - available only if shared address/command mode support is compiled in.
    Bits: 27:20 PUBMODE(rw) - PUB Mode Timer: Specifies the number of controller clocks to wait when entering and exiting pub mode data training. The default value ensures controller refreshes do not cause memory model errors when entering and exiting data training. The value should be increased if controller initiated SDRAM ZQ short or long operation may occur just before or just after the execution of data training.
    Bits: 19    FXDLAT(rw) - Fixed Latency: Specified whether all reads should be returned to the controller with a fixed read latency. Enabling fixed read latency increases the read latency. Valid values are:
    Bits: 18    NOBUB(rw) - No Bubbles: Specified whether reads should be returned to the controller with no bubbles. Enabling no-bubble reads increases the read latency. Valid values are:
    Bits: 17:0  tREFPRD(rw) - Refresh Period: Indicates the period in clock cycles after which the PUB has to issue a refresh command to the SDRAM. This is derived from the maximum refresh interval from the datasheet, tRFC(max) or REFI, divided by the clock cycle time. A further 400 clocks must be subtracted from the derived number to account for command flow and missed slots of refreshes in the internal PUB blocks. The default corresponds to DDR3 9*7.8us at 1066MHz when a burst of 9 refreshes are issued at every refresh interval.
*/
#define NFP_EMUX_PHY_I_MUPUB_PGCR2                           0x0000008c
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_DYNACPDD                BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_LPMSTRC0                BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_ACPDDC                  BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_SHRAC                   BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_PUBMODE(_x)             (((_x) & 0xff) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_PUBMODE_of(_x)          (((_x) >> 20) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_FXDLAT                  BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_NOBUB                   BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_TREFPRD(_x)             (((_x) & 0x3ffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_PGCR2_TREFPRD_of(_x)          (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMGCR0 -
    Bits: 31    MIRROR(rw) - RDIMM Mirror: Selects between two different ballouts of the RDIMM buffer chip for front or back operation. This register bit controls the buffer chip MIRROR signal.
    Bits: 30    QCSEN(rw) - RDMIMM Quad CS Enable: Enables, if set, the Quad CS mode for the RDIMM registering buffer chip. This register bit controls the buffer chip QCSEN# signal.
    Bits: 29    MIRROROE(rw) - MIRROR Output Enable: Enables, when set, the output driver on the I/O for MIRROR pin.
    Bits: 28    QCSENOE(rw) - QCSEN# Output Enable: Enables, when set, the output driver on the I/O for QCSEN# pin.
    Bits: 27    RDIMMIOM(rw) - RDIMM Outputs I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for QCSEN# and MIRROR pins.
    Bits: 26    RDIMMPDR(rw) - RDIMM Outputs Power Down Receiver: Powers down, when set, the input receiver on the I/O for QCSEN# and MIRROR pins.
    Bits: 25    RDIMMPDD(rw) - RDIMM Outputs Power Down Driver: Powers down, when set, the output driver on the I/O for QCSEN# and MIRROR pins.
    Bits: 24    RDIMMODT(rw) - RDIMM Outputs On-Die Termination: Enables, when set, the on-die termination on the I/O for QCSEN# and MIRROR pins.
    Bits: 23    ERROUTOE(rw) - ERROUT# Output Enable: Enables, when set, the output driver on the I/O for ERROUT# pin.
    Bits: 22    ERROUTIOM(rw) - ERROUT# I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for ERROUT# pin.
    Bits: 21    ERROUTPDR(rw) - ERROUT# Power Down Receiver: Powers down, when set, the input receiver on the I/O for ERROUT# pin.
    Bits: 20    ERROUTPDD(rw) - ERROUT# Power Down Driver: Powers down, when set, the output driver on the I/O for ERROUT# pin.
    Bits: 19    ERROUTODT(rw) - ERROUT# On-Die Termination: Enables, when set, the on-die termination on the I/O for ERROUT# pin.
    Bits: 18    PARINOE(rw) - PAR_IN Output Enable: Enables, when set, the output driver on the I/O for PAR_IN pin.
    Bits: 17    PARINIOM(rw) - PAR_IN I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for PAR_IN pin.
    Bits: 16    PARINPDR(rw) - PAR_IN Power Down Receiver: Powers down, when set, the input receiver on the I/O for PAR_IN pin.
    Bits: 15    PARINPDD(rw) - PAR_IN Power Down Driver: Powers down, when set, the output driver on the I/O for PAR_IN pin.
    Bits: 14    PARINODT(rw) - PAR_IN On-Die Termination: Enables, when set, the on-die termination on the I/O for PAR_IN pin.
    Bits:  2    SOPERR(rw) - Stop On Parity Error: Indicates, if set, that the PUB is to stop driving commands to the DRAM upon encountering a parity error. Transactions can resume only after status is cleared via PIR.CLRSR.
    Bits:  1    ERRNOREG(rw) - Parity Error No Registering: Indicates, if set, that parity error signal from the RDIMM should be passed to the DFI controller without any synchronization or registering. Otherwise, the error signal is synchronized as shown in Figure 4-28 on page 208.
    Bits:  0    RDIMM(rw) - Registered DIMM: Indicates if set that a registered DIMM is used. In this case, the PUB increases the SDRAM write and read latencies (WL/RL) by 1 and also enforces that accesses adhere to RDIMM buffer chip. This only applies to PUB internal SDRAM transactions. Transactions generated by the controller must make its own adjustments to WL/RL when using a registered DIMM. The DCR.NOSRA register bit must be set to '1' if using the standard RDIMM buffer chip so that normal DRAM accesses do not assert multiple chip select bits at the same time.
*/
#define NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0                       0x000000b0
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_MIRROR              BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_QCSEN               BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_MIRROROE            BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_QCSENOE             BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_RDIMMIOM            BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_RDIMMPDR            BIT(26)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_RDIMMPDD            BIT(25)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_RDIMMODT            BIT(24)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_ERROUTOE            BIT(23)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_ERROUTIOM           BIT(22)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_ERROUTPDR           BIT(21)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_ERROUTPDD           BIT(20)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_ERROUTODT           BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_PARINOE             BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_PARINIOM            BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_PARINPDR            BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_PARINPDD            BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_PARINODT            BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_SOPERR              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_ERRNOREG            BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR0_RDIMM               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMGCR1 -
    Bits: 31:16 CRINIT(rw) - Control Registers Initialization Enable: Indicates which RDIMM buffer chip control registers (RC0 to RC15) should be initialized (written) when the PUB is triggered to initialize the buffer chip. A setting of '1' on CRINIT[n], bit means that CRn should be written during initialization.
    Bits: 14:12 tBCMRD(rw) - Command word to command word programming delay: Number of DRAM clock cycles between two RDIMM buffer chip command programming accesses. The value used for tBCMRD is 8 plus the value programmed in these bits, i.e. tBCMRD value ranges from 8 to 15. This parameter corresponds to the buffer chip tMRD parameter.
    Bits: 11:0  tBCSTAB(rw) - Stabilization time: Number of DRAM clock cycles for the RDIMM buffer chip to stabilize. This parameter corresponds to the buffer chip tSTAB parameter. Default value is in decimal format and corresponds to 6us at 533MHz.
*/
#define NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1                       0x000000b4
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1_CRINIT(_x)          (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1_CRINIT_of(_x)       (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1_TBCMRD(_x)          (((_x) & 0x7) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1_TBCMRD_of(_x)       (((_x) >> 12) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1_TBCSTAB(_x)         (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMGCR1_TBCSTAB_of(_x)      (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMCR0 -
    Bits: 31:28 RC7(rw) - Control Word 7: Reserved, free to use by vendor.
    Bits: 27:24 RC6(rw) - Control Word 6: Reserved, free to use by vendor.
    Bits: 23:20 RC5(rw) - Control Word 5 (CK Driver Characteristics Control Word): RC5[1:0], is driver settings for clock Y1, Y1#, Y3, and Y3# outputs, and RC5[3:2], is driver settings for clock Y0, Y0#, Y2, and Y2# outputs. Bit definitions are:
    Bits: 19:16 RC4(rw) - Control Word 4 (Control Signals Driver Characteristics Control Word): RC4[1:0], is driver settings for control A outputs, and RC4[3:2], is driver settings for control B outputs. Bit definitions are:
    Bits: 15:12 RC3(rw) - Control Word 3 (Command/Address Signals Driver Characteristics Control Word): RC3[1:0], is driver settings for command/address A outputs, and RC3[3:2], is driver settings for command/address B outputs. Bit definitions are:
    Bits: 11:8  RC2(rw) - Control Word 2 (Timing Control Word): Bit definitions are:
    Bits:  7:4  RC1(rw) - Control Word 1 (Clock Driver Enable Control Word): Bit definitions are: RC1[0],: 0 = Y0/Y0# clock enabled, 1 = Y0/Y0# clock disabled. RC1[1],: 0 = Y1/Y1# clock enabled, 1 = Y1/Y1# clock disabled. RC1[2],: 0 = Y2/Y2# clock enabled, 1 = Y2/Y2# clock disabled. RC1[3],: 0 = Y3/Y3# clock enabled, 1 = Y3/Y3# clock disabled.
    Bits:  3:0  RC0(rw) - Control Word 0 (Global Features Control Word): Bit definitions are: RC0[0],: 0 = Output inversion enabled, 1 = Output inversion disabled. RC0[1],: 0 = Floating outputs disabled, 1 = Floating outputs enabled. RC0[2],: 0 = A outputs enabled, 1 = A outputs disabled. RC0[3],: 0 = B outputs enabled, 1 = B outputs disabled.
*/
#define NFP_EMUX_PHY_I_MUPUB_RDIMMCR0                        0x000000b8
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC7(_x)              (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC7_of(_x)           (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC6(_x)              (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC6_of(_x)           (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC5(_x)              (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC5_of(_x)           (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC4(_x)              (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC4_of(_x)           (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC3(_x)              (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC3_of(_x)           (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC2(_x)              (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC2_of(_x)           (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC1(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC1_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC0(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR0_RC0_of(_x)           (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMCR1 -
    Bits: 31:28 RC15(rw) - Control Word 15: Reserved for future use.
    Bits: 27:24 RC14(rw) - Control Word 14: Reserved for future use.
    Bits: 23:20 RC13(rw) - Control Word 13: Reserved for future use.
    Bits: 19:16 RC12(rw) - Control Word 12: Reserved for future use.
    Bits: 15:12 RC11(rw) - Control Word 11 (Operating Voltage VDD Control Word):
    Bits: 11:8  RC10(rw) - Control Word 10 (RDIMM Operating Speed Control Word): RC10[2:0], is RDIMM operating speed setting as follows RC10[3],: Don't care.:
    Bits:  7:4  RC9(rw) - Control Word 9 (Power Saving Settings Control Word): Bit definitions are: RC9[0]: 0 = Floating outputs as defined in RC0, 1 = Weak drive enabled. RC9[1]: 0 = Reserved. RC9[2]: 0 = CKE power down with IBT ON, QxODT is a function of DxODT, 1 = CKE power down with IBT off, QxODT held LOW. RC9[2] is valid only when RC9[3] is 1. RC9[3]: 0 = CKE power down mode disabled, 1 = CKE power down mode enabled
    Bits:  3:0  RC8(rw) - Control Word 8 (Additional Input Bus Termination Setting Control Word):
*/
#define NFP_EMUX_PHY_I_MUPUB_RDIMMCR1                        0x000000bc
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC15(_x)             (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC15_of(_x)          (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC14(_x)             (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC14_of(_x)          (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC13(_x)             (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC13_of(_x)          (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC12(_x)             (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC12_of(_x)          (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC11(_x)             (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC11_of(_x)          (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC10(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC10_of(_x)          (((_x) >> 8) & 0xf)
#define     NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_800 (0)
#define     NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_1066 (1)
#define     NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_1333 (2)
#define     NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_1600 (3)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC9(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC9_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC8(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC8_of(_x)           (((_x) >> 0) & 0xf)
#define     NFP_EMUX_PHY_I_MUPUB_RDIMMCR1_RC8_OFF            (7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUAR -
    Bits: 11    ATYPE(rw) - Access Type: Specifies the type of access to be performed using this address. Valid values are:
    Bits: 10    INCA(rw) - Increment Address: Specifies, if set, that the cache address specified in WADDR and SADDR should be automatically incremented after each access of the cache. The increment happens in such a way that all the slices of a selected word are first accessed before going to the next word.
    Bits:  9:8  CSEL(rw) - Cache Select: Selects the cache to be accessed. Valid values are:
    Bits:  7:4  CSADDR(rw) - Cache Slice Address: Address of the cache slice to be accessed.
    Bits:  3:0  CWADDR(rw) - Cache Word Address: Address of the cache word to be accessed.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCUAR                           0x000000c0
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_ATYPE                   BIT(11)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_INCA                    BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_CSEL(_x)                (((_x) & 0x3) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_CSEL_of(_x)             (((_x) >> 8) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_CSADDR(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_CSADDR_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_CWADDR(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCUAR_CWADDR_of(_x)           (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUDR -
    Bits: 31:0  CDATA(rw) - Cache Data: Data to be written to or read from a cache. This data corresponds to the cache word slice specified by the DCU Address Register.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCUDR                           0x000000c4
#define   NFP_EMUX_PHY_I_MUPUB_DCUDR_CDATA(_x)               (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCUDR_CDATA_of(_x)            (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCURR -
    Bits: 23    XCEN(rw) - Expected Compare Enable: Indicates if set that read data coming back from the SDRAM should be should be compared with the expected data.
    Bits: 22    RCEN(rw) - Read Capture Enable: Indicates if set that read data coming back from the SDRAM should be captured into the read data cache.
    Bits: 21    SCOF(rw) - Stop Capture On Full: Specifies if set that the capture of read data should stop when the capture cache is full.
    Bits: 20    SONF(rw) - Stop On Nth Fail: Specifies if set that the execution of commands and the capture of read data should stop when there are N read data failures. The number of failures is specified by NFAIL. Otherwise commands execute until the end of the program or until manually stopped using a STOP command.
    Bits: 19:12 NFAIL(rw) - Number of Failures: Specifies the number of failures after which the execution of commands and the capture of read data should stop if SONF bit of this register is set. Execution of commands and the capture of read data will stop after (NFAIL+1) failures if SONF is set. Valid values are from 0 to 254.
    Bits: 11:8  EADDR(rw) - End Address: Cache word address where the execution of command should end.
    Bits:  7:4  SADDR(rw) - Start Address: Cache word address where the execution of commands should begin.
    Bits:  3:0  DINST(rw) - DCU Instruction: Selects the DCU command to be executed: Valid values are:
*/
#define NFP_EMUX_PHY_I_MUPUB_DCURR                           0x000000c8
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_XCEN                    BIT(23)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_RCEN                    BIT(22)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_SCOF                    BIT(21)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_SONF                    BIT(20)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_NFAIL(_x)               (((_x) & 0xff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_NFAIL_of(_x)            (((_x) >> 12) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_EADDR(_x)               (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_EADDR_of(_x)            (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_SADDR(_x)               (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_SADDR_of(_x)            (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_DINST(_x)               (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCURR_DINST_of(_x)            (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCULR -
    Bits: 31:28 XLEADDR(rw) - Expected Data Loop End Address: The last expected data cache word address that contains valid expected data. Expected data should looped between 0 and this address.
    Bits: 17    IDA(rw) - Increment DRAM Address: Indicates if set that DRAM addresses should be incremented every time a DRAM read/write command inside the loop is executed.
    Bits: 16    LINF(rw) - Loop Infinite: Indicates if set that the loop should be executed indefinitely until stopped by the STOP command. Otherwise the loop is execute LCNT times.
    Bits: 15:8  LCNT(rw) - Loop Count: The number of times that the loop should be executed if LINF is not set.
    Bits:  7:4  LEADDR(rw) - Loop End Address: Command cache word address where the loop should end.
    Bits:  3:0  LSADDR(rw) - Loop Start Address: Command cache word address where the loop should start.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCULR                           0x000000cc
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_XLEADDR(_x)             (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_XLEADDR_of(_x)          (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_IDA                     BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LINF                    BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LCNT(_x)                (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LCNT_of(_x)             (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LEADDR(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LEADDR_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LSADDR(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCULR_LSADDR_of(_x)           (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUGCR -
    Bits: 15:0  RCSW(rw) - Read Capture Start Word: The capture and compare of read data should start after Nth word. For example setting this value to 12 will skip the first 12 read data.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCUGCR                          0x000000d0
#define   NFP_EMUX_PHY_I_MUPUB_DCUGCR_RCSW(_x)               (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCUGCR_RCSW_of(_x)            (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUTPR -
    Bits: 31:24 tDCUT3(rw) - DCU Generic Timing Parameter 3.
    Bits: 23:16 tDCUT2(rw) - DCU Generic Timing Parameter 2.
    Bits: 15:8  tDCUT1(rw) - DCU Generic Timing Parameter 1.
    Bits:  7:0  tDCUT0(rw) - DCU Generic Timing Parameter 0.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCUTPR                          0x000000d4
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT3(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT3_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT2(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT2_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT1(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT1_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT0(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCUTPR_TDCUT0_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUSR0 -
    Bits:  2    CFULL(ro) - Capture Full: Indicates if set that the capture cache is full.
    Bits:  1    CFAIL(ro) - Capture Fail: Indicates if set that at least one read data word has failed.
    Bits:  0    RDONE(ro) - Run Done: Indicates if set that the DCU has finished executing the commands in the command cache. This bit is also set to indicate that a STOP command has successfully been executed and command execution has stopped.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCUSR0                          0x000000d8
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR0_CFULL                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR0_CFAIL                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR0_RDONE                  BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUSR1 -
    Bits: 31:24 LPCNT(ro) - Loop Count: Indicates the value of the loop count. This is useful when the program has stopped because of failures to assess how many reads were executed before first fail.
    Bits: 23:16 FLCNT(ro) - Fail Count: Number of read words that have failed.
    Bits: 15:0  RDCNT(ro) - Read Count: Number of read words returned from the SDRAM.
*/
#define NFP_EMUX_PHY_I_MUPUB_DCUSR1                          0x000000dc
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR1_LPCNT(_x)              (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR1_LPCNT_of(_x)           (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR1_FLCNT(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR1_FLCNT_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR1_RDCNT(_x)              (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DCUSR1_RDCNT_of(_x)           (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTRR -
    Bits: 26:25 BCCSEL(rw) - BIST Clock Cycle Select: Selects the clock numbers on which the AC loopback data is written into the FIFO. Data is written into the loopback FIFO once every four clock cycles. Valid values are:
    Bits: 24:23 BCKSEL(rw) - BIST CK Select: Selects the CK that should be used to register the AC loopback signals from the I/Os. Valid values are:
    Bits: 22:19 BDXSEL(rw) - BIST DATX8 Select: Select the byte lane for comparison of loopback/read data. Valid values are 0 to 8.
    Bits: 18:17 BDPAT(rw) - BIST Data Pattern Selects the data pattern used during BIST. Valid values are:
    Bits: 16    BDMEN(rw) - BIST Data Mask Enable: Enables if set that the data mask BIST should be included in the BIST run, i.e. data pattern generated and loopback data compared. This is valid only for loopback mode.
    Bits: 15    BACEN(rw) - BIST AC Enable: Enables the running of BIST on the address/command lane PHY. This bit is exclusive with BDXEN, i.e. both cannot be set to '1' at the same time.
    Bits: 14    BDXEN(rw) - BIST DATX8 Enable: Enables the running of BIST on the data byte lane PHYs. This bit is exclusive with BACEN, i.e. both cannot be set to '1' at the same time.
    Bits: 13    BSONF(rw) - BIST Stop On Nth Fail: Specifies if set that the BIST should stop when an nth data word or address/command comparison error has been encountered.
    Bits: 12:5  NFAIL(rw) - Number of Failures: Specifies the number of failures after which the execution of commands and the capture of read data should stop if BSONF bit of this register is set. Execution of commands and the capture of read data will stop after (NFAIL+1) failures if BSONF is set.
    Bits:  4    BINF(rw) - BIST Infinite Run: Specifies if set that the BIST should be run indefinitely until when it is either stopped or a failure has been encountered. Otherwise BIST is run until number of BIST words specified in the BISTWCR register has been generated.
    Bits:  3    BMODE(rw) - BIST Mode Selects the mode in which BIST is run. Valid values are:
    Bits:  2:0  BINST(rw) - BIST Instruction: Selects the BIST instruction to be executed: Valid values are:
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTRR                          0x00000100
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BCCSEL(_x)             (((_x) & 0x3) << 25)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BCCSEL_of(_x)          (((_x) >> 25) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BCKSEL(_x)             (((_x) & 0x3) << 23)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BCKSEL_of(_x)          (((_x) >> 23) & 0x3)
#define     NFP_EMUX_PHY_I_MUPUB_BISTRR_BCKSEL_CK0           (0)
#define     NFP_EMUX_PHY_I_MUPUB_BISTRR_BCKSEL_CK1           (1)
#define     NFP_EMUX_PHY_I_MUPUB_BISTRR_BCKSEL_CK2           (2)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BDXSEL(_x)             (((_x) & 0xf) << 19)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BDXSEL_of(_x)          (((_x) >> 19) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BDPAT(_x)              (((_x) & 0x3) << 17)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BDPAT_of(_x)           (((_x) >> 17) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BDMEN                  BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BACEN                  BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BDXEN                  BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BSONF                  BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_NFAIL(_x)              (((_x) & 0xff) << 5)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_NFAIL_of(_x)           (((_x) >> 5) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BINF                   BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BMODE                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BINST(_x)              (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTRR_BINST_of(_x)           (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTWCR -
    Bits: 15:0  BWCNT(rw) - BIST Word Count: Indicates the number of words to generate during BIST. This must be a multiple of DRAM burst length (BL) divided by 2, e.g. for BL=8, valid values are 4, 8, 12, 16, and so on.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTWCR                         0x00000104
#define   NFP_EMUX_PHY_I_MUPUB_BISTWCR_BWCNT(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWCR_BWCNT_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTMSKR0 -
    Bits: 31:28 ODTMSK(rw) - Mask bit for each of the up to 4 ODT bits.
    Bits: 27:24 CSMSK(rw) - Mask bit for each of the up to 4 CS# bits.
    Bits: 23:20 CKEMSK(rw) - Mask bit for each of the up to 4 CKE bits.
    Bits: 19    WEMSK(rw) - Mask bit for the WE#.
    Bits: 18:16 BAMSK(rw) - Mask bit for each of the up to 3 bank address bits.
    Bits: 15:0  AMSK(rw) - Mask bit for each of the up to 16 address bits.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTMSKR0                       0x00000108
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_ODTMSK(_x)          (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_ODTMSK_of(_x)       (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_CSMSK(_x)           (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_CSMSK_of(_x)        (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_CKEMSK(_x)          (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_CKEMSK_of(_x)       (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_WEMSK               BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_BAMSK(_x)           (((_x) & 0x7) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_BAMSK_of(_x)        (((_x) >> 16) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_AMSK(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR0_AMSK_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTMSKR1 -
    Bits: 31:28 DMMSK(rw) - Mask bit for the data mask (DM) bit.
    Bits: 27    PARMSK(rw) - Mask bit for the PAR_IN. Only for DIMM parity support and only if the design is compiled for less than 3 ranks.
    Bits:  1    CASMSK(rw) - Mask bit for the CAS.
    Bits:  0    RASMSK(rw) - Mask bit for the RAS.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTMSKR1                       0x0000010c
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR1_DMMSK(_x)           (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR1_DMMSK_of(_x)        (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR1_PARMSK              BIT(27)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR1_CASMSK              BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR1_RASMSK              BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTMSKR2 -
    Bits: 31:0  DQMSK(rw) - Mask bit for each of the 8 data (DQ) bits.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTMSKR2                       0x00000110
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR2_DQMSK(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTMSKR2_DQMSK_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTLSR -
    Bits: 31:0  SEED(rw) - LFSR seed for pseudo-random BIST patterns.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTLSR                         0x00000114
#define   NFP_EMUX_PHY_I_MUPUB_BISTLSR_SEED(_x)              (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTLSR_SEED_of(_x)           (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTAR0 -
    Bits: 30:28 BBANK(rw) - BIST Bank Address: Selects the SDRAM bank address to be used during BIST.
    Bits: 27:12 BROW(rw) - BIST Row Address: Selects the SDRAM row address to be used during BIST.
    Bits: 11:0  BCOL(rw) - BIST Column Address: Selects the SDRAM column address to be used during BIST. The lower bits of this address must be '0000' for BL16, '000' for BL8, '00' for BL4 and '0' for BL2.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTAR0                         0x00000118
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR0_BBANK(_x)             (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR0_BBANK_of(_x)          (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR0_BROW(_x)              (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR0_BROW_of(_x)           (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR0_BCOL(_x)              (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR0_BCOL_of(_x)           (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTAR1 -
    Bits: 15:4  BAINC(rw) - BIST Address Increment: Selects the value by which the SDRAM address is incremented for each write/read access. This value must be at the beginning of a burst boundary, i.e. the lower bits must be '0000' for BL16, '000' for BL8, '00' for BL4 and '0' for BL2.
    Bits:  3:2  BMRANK(rw) - BIST Maximum Rank: Specifies the maximum SDRAM rank to be used during BIST. The default value is set to maximum ranks minus 1. Example default shown here is for a 4-rank system
    Bits:  1:0  BRANK(rw) - BIST Rank: Selects the SDRAM rank to be used during BIST. Valid values range from 0 to maximum ranks minus 1.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTAR1                         0x0000011c
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR1_BAINC(_x)             (((_x) & 0xfff) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR1_BAINC_of(_x)          (((_x) >> 4) & 0xfff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR1_BMRANK(_x)            (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR1_BMRANK_of(_x)         (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR1_BRANK(_x)             (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR1_BRANK_of(_x)          (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTAR2 -
    Bits: 30:28 BMBANK(rw) - BIST Maximum Bank Address: Specifies the maximum SDRAM bank address to be used during BIST before the address increments to the next rank.
    Bits: 27:12 BMROW(rw) - BIST Maximum Row Address: Specifies the maximum SDRAM row address to be used during BIST before the address increments to the next bank.
    Bits: 11:0  BMCOL(rw) - BIST Maximum Column Address: Specifies the maximum SDRAM column address to be used during BIST before the address increments to the next row.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTAR2                         0x00000120
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR2_BMBANK(_x)            (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR2_BMBANK_of(_x)         (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR2_BMROW(_x)             (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR2_BMROW_of(_x)          (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR2_BMCOL(_x)             (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTAR2_BMCOL_of(_x)          (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTUDPR -
    Bits: 31:16 BUDP1(rw) - BIST User Data Pattern 1: Data to be applied on odd DQ pins during BIST.
    Bits: 15:0  BUDP0(rw) - BIST User Data Pattern 0: Data to be applied on even DQ pins during BIST.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTUDPR                        0x00000124
#define   NFP_EMUX_PHY_I_MUPUB_BISTUDPR_BUDP1(_x)            (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTUDPR_BUDP1_of(_x)         (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTUDPR_BUDP0(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTUDPR_BUDP0_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTGSR -
    Bits: 31:30 CASBER(ro) - CAS Bit Error: Indicates the number of bit errors on CAS.
    Bits: 29:28 RASBER(ro) - RAS Bit Error: Indicates the number of bit errors on RAS.
    Bits: 27:20 DMBER(ro) - DM Bit Error: Indicates the number of bit errors on data mask (DM) bit. DMBER[1:0], are for even DQS cycles first DM beat, and DMBER[3:2], are for even DQS cycles second DM beat. Similarly, DMBER[5:4], are for odd DQS cycles first DM beat, and DMBER[7:6], are for odd DQS cycles second DM beat.
    Bits:  2    BDXERR(ro) - BIST Data Error: indicates if set that there is a data comparison error in the byte lane.
    Bits:  1    BACERR(ro) - BIST Address/Command Error: indicates if set that there is a data comparison error in the address/command lane.
    Bits:  0    BDONE(ro) - BIST Done: Indicates if set that the BIST has finished executing. This bit is reset to zero when BIST is triggered.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTGSR                         0x00000128
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_CASBER(_x)            (((_x) & 0x3) << 30)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_CASBER_of(_x)         (((_x) >> 30) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_RASBER(_x)            (((_x) & 0x3) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_RASBER_of(_x)         (((_x) >> 28) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_DMBER(_x)             (((_x) & 0xff) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_DMBER_of(_x)          (((_x) >> 20) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_BDXERR                BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_BACERR                BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_BISTGSR_BDONE                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTWER -
    Bits: 31:16 DXWER(ro) - Byte Word Error: Indicates the number of word errors on the byte lane. An error on any bit of the data bus including the data mask bit increments the error count.
    Bits: 15:0  ACWER(ro) - Address/Command Word Error: Indicates the number of word errors on the address/command lane. An error on any bit of the address/command bus increments the error count.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTWER                         0x0000012c
#define   NFP_EMUX_PHY_I_MUPUB_BISTWER_DXWER(_x)             (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWER_DXWER_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWER_ACWER(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWER_ACWER_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER0 -
    Bits: 31:0  ABER(ro) - Address Bit Error: Each group of two bits indicate the bit error count on each of the up to 16 address bits. [1:0], is the error count for A[0],, [3:2], for A[1],, and so on.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTBER0                        0x00000130
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER0_ABER(_x)             (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER0_ABER_of(_x)          (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER1 -
    Bits: 31:24 ODTBER(ro) - ODT Bit Error: Each group of two bits indicates the bit error count on each of the up to 4 ODT bits. [1:0], is the error count for ODT[0],, [3:2], for ODT[1],, and so on.
    Bits: 23:16 CSBER(ro) - CS# Bit Error: Each group of two bits indicate the bit error count on each of the up to 4 CS# bits. [1:0], is the error count for CS#[0],, [3:2], for CS#[1],, and so on.
    Bits: 15:8  CKEBER(ro) - CKE Bit Error: Each group of two bits indicate the bit error count on each of the up to 4 CKE bits. [1:0], is the error count for CKE[0],, [3:2], for CKE[1],, and so on.
    Bits:  7:6  WEBER(ro) - WE# Bit Error: Indicates the number of bit errors on WE#.
    Bits:  5:0  BABER(ro) - Bank Address Bit Error: Each group of two bits indicate the bit error count on each of the up to 3 bank address bits. [1:0], is the error count for BA[0],, [3:2], for BA[1],, and so on.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTBER1                        0x00000134
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_ODTBER(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_ODTBER_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_CSBER(_x)            (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_CSBER_of(_x)         (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_CKEBER(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_CKEBER_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_WEBER(_x)            (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_WEBER_of(_x)         (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_BABER(_x)            (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER1_BABER_of(_x)         (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER2 -
    Bits: 31:0  DQBER0(ro) - Data Bit Error: The error count for even DQS cycles. The first 16 bits indicate the error count for the first data beat (i.e. the data driven out on DQ[7:0], on the rising edge of DQS). The second 16 bits indicate the error on the second data beat (i.e. the error count of the data driven out on DQ[7:0], on the falling edge of DQS). For each of the 16-bit group, the first 2 bits are for DQ[0],, the second for DQ[1],, and so on.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTBER2                        0x00000138
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER2_DQBER0(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER2_DQBER0_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER3 -
    Bits: 31:0  DQBER1(ro) - Data Bit Error: The error count for odd DQS cycles. The first 16 bits indicate the error count for the first data beat (i.e. the data driven out on DQ[7:0], on the rising edge of DQS). The second 16 bits indicate the error on the second data beat (i.e. the error count of the data driven out on DQ[7:0], on the falling edge of DQS). For each of the 16-bit group, the first 2 bits are for DQ[0],, the second for DQ[1],, and so on.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTBER3                        0x0000013c
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER3_DQBER1(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTBER3_DQBER1_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTWCSR -
    Bits: 31:16 DXWCNT(ro) - Byte Word Count: Indicates the number of words received from the byte lane.
    Bits: 15:0  ACWCNT(ro) - Address/Command Word Count: Indicates the number of words received from the address/command lane.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTWCSR                        0x00000140
#define   NFP_EMUX_PHY_I_MUPUB_BISTWCSR_DXWCNT(_x)           (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWCSR_DXWCNT_of(_x)        (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWCSR_ACWCNT(_x)           (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTWCSR_ACWCNT_of(_x)        (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTFWR0 -
    Bits: 31:28 ODTWEBS(ro) - Bit status during a word error for each of the up to 4 ODT bits.
    Bits: 27:24 CSWEBS(ro) - Bit status during a word error for each of the up to 4 CS# bits.
    Bits: 23:20 CKEWEBS(ro) - Bit status during a word error for each of the up to 4 CKE bits.
    Bits: 19    WEWEBS(ro) - Bit status during a word error for the WE#.
    Bits: 18:16 BAWEBS(ro) - Bit status during a word error for each of the up to 3 bank address bits.
    Bits: 15:0  AWEBS(ro) - Bit status during a word error for each of the up to 16 address bits.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTFWR0                        0x00000144
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_ODTWEBS(_x)          (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_ODTWEBS_of(_x)       (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_CSWEBS(_x)           (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_CSWEBS_of(_x)        (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_CKEWEBS(_x)          (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_CKEWEBS_of(_x)       (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_WEWEBS               BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_BAWEBS(_x)           (((_x) & 0x7) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_BAWEBS_of(_x)        (((_x) >> 16) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_AWEBS(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR0_AWEBS_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTFWR1 -
    Bits: 31:28 DMWEBS(ro) - Bit status during a word error for the data mask (DM) bit. DMWEBS [0], is for the first DM beat, DMWEBS [1], is for the second DM beat, and so on.
    Bits:  1    CASWEBS(ro) - Bit status during a word error for the CAS.
    Bits:  0    RASWEBS(ro) - Bit status during a word error for the RAS.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTFWR1                        0x00000148
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR1_DMWEBS(_x)           (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR1_DMWEBS_of(_x)        (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR1_CASWEBS              BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR1_RASWEBS              BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTFWR2 -
    Bits: 31:0  DQWEBS(ro) - Bit status during a word error for each of the 8 data (DQ) bits. The first 8 bits indicate the status of the first data beat (i.e. the status of the data driven out on DQ[7:0], on the rising edge of DQS). The second 8 bits indicate the status of the second data beat (i.e. the status of the data driven out on DQ[7:0], on the falling edge of DQS), and so on. For each of the 8-bit group, the first bit is for DQ[0],, the second bit is for DQ[1],, and so on.
*/
#define NFP_EMUX_PHY_I_MUPUB_BISTFWR2                        0x0000014c
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR2_DQWEBS(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_BISTFWR2_DQWEBS_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_GPR0 -
    Bits: 31:0  GPR0(ro) - General Purpose Register 0: General purpose register bits.
*/
#define NFP_EMUX_PHY_I_MUPUB_GPR0                            0x00000178
#define   NFP_EMUX_PHY_I_MUPUB_GPR0_GPR0(_x)                 (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_GPR0_GPR0_of(_x)              (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_GPR1 -
    Bits: 31:0  GPR1(ro) - General Purpose Register 1: General purpose register bits.
*/
#define NFP_EMUX_PHY_I_MUPUB_GPR1                            0x0000017c
#define   NFP_EMUX_PHY_I_MUPUB_GPR1_GPR1(_x)                 (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_GPR1_GPR1_of(_x)              (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ0CR0                          0x00000180
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ0CR1                          0x00000184
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ0SR0                          0x00000188
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ0SR1                          0x0000018c
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ0SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ1CR0                          0x00000190
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ1CR1                          0x00000194
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ1SR0                          0x00000198
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ1SR1                          0x0000019c
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ1SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ2CR0                          0x000001a0
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ2CR1                          0x000001a4
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ2SR0                          0x000001a8
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ2SR1                          0x000001ac
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ2SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ3CR0                          0x000001b0
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ3CR1                          0x000001b4
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ3SR0                          0x000001b8
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_I_MUPUB_ZQ3SR1                          0x000001bc
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_ZQ3SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0GCR                          0x000001c0
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0GSR0                         0x000001c4
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0GSR1                         0x000001c8
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0BDLR0                        0x000001cc
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0BDLR1                        0x000001d0
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0BDLR2                        0x000001d4
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0BDLR3                        0x000001d8
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0BDLR4                        0x000001dc
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0                       0x000001e0
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1                       0x000001e4
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2                       0x000001e8
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0MDLR                         0x000001ec
#define   NFP_EMUX_PHY_I_MUPUB_DX0MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX0MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX0MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0GTR                          0x000001f0
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX0GSR2                         0x000001f4
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX0GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1GCR                          0x00000200
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1GSR0                         0x00000204
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1GSR1                         0x00000208
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1BDLR0                        0x0000020c
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1BDLR1                        0x00000210
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1BDLR2                        0x00000214
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1BDLR3                        0x00000218
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1BDLR4                        0x0000021c
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0                       0x00000220
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1                       0x00000224
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2                       0x00000228
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1MDLR                         0x0000022c
#define   NFP_EMUX_PHY_I_MUPUB_DX1MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX1MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX1MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1GTR                          0x00000230
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX1GSR2                         0x00000234
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX1GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2GCR                          0x00000240
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2GSR0                         0x00000244
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2GSR1                         0x00000248
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2BDLR0                        0x0000024c
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2BDLR1                        0x00000250
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2BDLR2                        0x00000254
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2BDLR3                        0x00000258
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2BDLR4                        0x0000025c
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0                       0x00000260
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1                       0x00000264
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2                       0x00000268
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2MDLR                         0x0000026c
#define   NFP_EMUX_PHY_I_MUPUB_DX2MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX2MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX2MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2GTR                          0x00000270
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX2GSR2                         0x00000274
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX2GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3GCR                          0x00000280
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3GSR0                         0x00000284
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3GSR1                         0x00000288
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3BDLR0                        0x0000028c
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3BDLR1                        0x00000290
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3BDLR2                        0x00000294
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3BDLR3                        0x00000298
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3BDLR4                        0x0000029c
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0                       0x000002a0
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1                       0x000002a4
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2                       0x000002a8
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3MDLR                         0x000002ac
#define   NFP_EMUX_PHY_I_MUPUB_DX3MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX3MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX3MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3GTR                          0x000002b0
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX3GSR2                         0x000002b4
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX3GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4GCR                          0x000002c0
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4GSR0                         0x000002c4
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4GSR1                         0x000002c8
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4BDLR0                        0x000002cc
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4BDLR1                        0x000002d0
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4BDLR2                        0x000002d4
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4BDLR3                        0x000002d8
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4BDLR4                        0x000002dc
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0                       0x000002e0
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1                       0x000002e4
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2                       0x000002e8
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4MDLR                         0x000002ec
#define   NFP_EMUX_PHY_I_MUPUB_DX4MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX4MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX4MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4GTR                          0x000002f0
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX4GSR2                         0x000002f4
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX4GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5GCR                          0x00000300
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5GSR0                         0x00000304
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5GSR1                         0x00000308
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5BDLR0                        0x0000030c
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5BDLR1                        0x00000310
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5BDLR2                        0x00000314
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5BDLR3                        0x00000318
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5BDLR4                        0x0000031c
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0                       0x00000320
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1                       0x00000324
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2                       0x00000328
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5MDLR                         0x0000032c
#define   NFP_EMUX_PHY_I_MUPUB_DX5MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX5MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX5MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5GTR                          0x00000330
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX5GSR2                         0x00000334
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX5GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6GCR                          0x00000340
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6GSR0                         0x00000344
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6GSR1                         0x00000348
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6BDLR0                        0x0000034c
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6BDLR1                        0x00000350
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6BDLR2                        0x00000354
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6BDLR3                        0x00000358
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6BDLR4                        0x0000035c
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0                       0x00000360
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1                       0x00000364
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2                       0x00000368
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6MDLR                         0x0000036c
#define   NFP_EMUX_PHY_I_MUPUB_DX6MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX6MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX6MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6GTR                          0x00000370
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX6GSR2                         0x00000374
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX6GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7GCR                          0x00000380
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7GSR0                         0x00000384
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7GSR1                         0x00000388
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7BDLR0                        0x0000038c
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7BDLR1                        0x00000390
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7BDLR2                        0x00000394
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7BDLR3                        0x00000398
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7BDLR4                        0x0000039c
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0                       0x000003a0
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1                       0x000003a4
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2                       0x000003a8
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7MDLR                         0x000003ac
#define   NFP_EMUX_PHY_I_MUPUB_DX7MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX7MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX7MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7GTR                          0x000003b0
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX7GSR2                         0x000003b4
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX7GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8GCR                          0x000003c0
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8GSR0                         0x000003c4
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8GSR1                         0x000003c8
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8BDLR0                        0x000003cc
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8BDLR1                        0x000003d0
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8BDLR2                        0x000003d4
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8BDLR3                        0x000003d8
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8BDLR4                        0x000003dc
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0                       0x000003e0
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1                       0x000003e4
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2                       0x000003e8
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8MDLR                         0x000003ec
#define   NFP_EMUX_PHY_I_MUPUB_DX8MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX8MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_I_MUPUB_DX8MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8GTR                          0x000003f0
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_I_MUPUB_DX8GSR2                         0x000003f4
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_I_MUPUB_DX8GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: PLLControlAndStatus - Primary Control and Status Register
    Bits: 31    PLLPdSynth(rw) - FSM Control: 1=Normal Power-Up 0=PowerDown. When transitioned to 1, the PLL State Machine will execute an automatic PLL bringup sequence and lockout rights to all but the Manual Override configuration register.
    Bits: 30    PLLCLK1OutputEn(rw) - FSM Control: Enable for PLLCLK1 Output
    Bits: 29    PLLCLK0OutputEn(rw) - FSM Control: Enable for PLLCLK0 Output
    Bits: 24    PLLAutoReLock(rw) - Mode bit to select behavior upon the occurence of a Lock Fault
    Bits: 23:8  PLLLockFaultCount(ro) - Once the PLL has been spun-up, counts how many times that lock is lost. This field will be cleared whenever PLLPdSynth transitions from 0 to 1.
    Bits:  7    PLLLockFault(ro) - Indicates that the PLL has lost lock during normal operation. This field will be cleared whenever PLLPdSynth transitions from 0 to 1.
    Bits:  6    PLLSynthLock(ro) - PLL Lock Indicator
    Bits:  5    PLLSynthOut1En(ro) - FSM Output: Enable for synthesizer clock output 1
    Bits:  4    PLLSynthOutByPass1(ro) - FSM Output: Bypass synthesizer clock output 1 with ICK_SYNTHREF with the PLL
    Bits:  3    PLLWrapOutByPass1(ro) - FSM Output: Bypass synthesizer clock output 1 with ICK_SYNTHREF outside the PLL
    Bits:  2    PLLSynthOut0En(ro) - FSM Output: Enable for synthesizer clock output 0
    Bits:  1    PLLSynthOutByPass0(ro) - FSM Output: Bypass synthesizer clock output 0 with ICK_SYNTHREF within the PLL
    Bits:  0    PLLWrapOutByPass0(ro) - FSM Output: Bypass synthesizer clock output 0 with ICK_SYNTHREF outside the PLL
*/
#define NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS              0x00000000
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_PD_SYNTH BIT(31)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLLCLK1_OUTPUT_ENABLE BIT(30)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLLCLK0_OUTPUT_ENABLE BIT(29)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_AUTO_RELOCK BIT(24)
#define     NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_AUTO_RELOCK_IDLE (0 << 24)
#define     NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_AUTO_RELOCK_RELOCK BIT(24)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_LOCK_FAULT_COUNT(_x) (((_x) & 0xffff) << 8)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_LOCK_FAULT_COUNT_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_LOCK_FAULT BIT(7)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_SYNTH_LOCK BIT(6)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_SYNTHOUT1_EN BIT(5)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_SYNTHOUT_BYPASS1 BIT(4)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_WRAPOUT_BYPASS1 BIT(3)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_SYNTHOUT0_EN BIT(2)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_SYNTHOUT_BYPASS0 BIT(1)
#define   NFP_EMUX_PLLCNTL_PLL_CONTROL_AND_STATUS_PLL_WRAPOUT_BYPASS0 BIT(0)
/*----------------------------------------------------------------
  Register: PLLConfig - Configuration Settings for the PLL
    Bits: 31    PLLLockMult(rw) - Write 1 to Set, cannot be cleared without hard_reset. Setting the lock bit captures the current values of the multipliers (integer and fraction) as limits for all future settings
    Bits: 30    PLLSynthMode(rw) - Synthesizer mode: 1=Fractional mode, 0=integer mode
    Bits: 29:24 PLLSynthRefDiv(rw) - Reference clock input divider ratio
    Bits: 23:16 PLLSynthMDiv(rw) - Synthesizer feedback divider value
    Bits: 15:0  PLLSynthSSCModGain(rw) - Signed 16-bit magnitude SSC modulation depth control word, as Fraction div ratio.
*/
#define NFP_EMUX_PLLCNTL_PLL_CONFIG                          0x00000004
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_LOCK_MULT          BIT(31)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_MODE         BIT(30)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_REF_DIV(_x)  (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_REF_DIV_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_MDIV(_x)     (((_x) & 0xff) << 16)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_MDIV_of(_x)  (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_SSC_MODE_GAIN(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PLLCNTL_PLL_CONFIG_PLL_SYNTH_SSC_MODE_GAIN_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PLLOutputDividers - Configuration Settings for the Output Dividers
    Bits: 14    PLLSynthOutPhRst(rw) - Reset phase rotator to initial startup value.
    Bits: 13:8  PLLSynthOut1Div(rw) - Synthesizer clock output 1 divider value
    Bits:  7    PLLSynthOutPhInc1(rw) - Increments phase of synthesizer clock outputs 1 by 1/8 of 1 period on rising edge
    Bits:  6:1  PLLSynthOut0Div(rw) - Synthesizer clock output 0 divider value
    Bits:  0    PLLSynthOutPhInc0(rw) - Increments phase of synthesizer clock outputs 0 by 1/8 of 1 period on rising edge
*/
#define NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS                 0x00000008
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT_PH_RST BIT(14)
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT1_DIV(_x) (((_x) & 0x3f) << 8)
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT1_DIV_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT_PH_INC1 BIT(7)
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT0_DIV(_x) (((_x) & 0x3f) << 1)
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT0_DIV_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP_EMUX_PLLCNTL_PLL_OUTPUT_DIVIDERS_PLL_SYNTHOUT_PH_INC0 BIT(0)
/*----------------------------------------------------------------
  Register: PLLMiscControls - Misc Tuning and Configuration Settings
    Bits: 24    PLLSynthFastLockEn(rw) - Fast lock enable.
    Bits: 23    PLLSynthOutPhIncSat(rw) - Control saturation behavior for phase increments.
    Bits: 22:16 PLLSynthPropGain(rw) - Synthesizer loop bandwidth control.
    Bits: 15:0  PLLSynthSSCGenCount(rw) - SSC Frequency Control
*/
#define NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS                   0x0000000c
#define   NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS_PLL_SYNTH_FAST_LOCK_EN BIT(24)
#define   NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS_PLL_SYNTHOUT_PH_INC_SAT BIT(23)
#define   NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS_PLL_SYNTH_PROP_GAIN(_x) (((_x) & 0x7f) << 16)
#define   NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS_PLL_SYNTH_PROP_GAIN_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS_PLL_SYNTH_SSC_GEN_COUNT(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PLLCNTL_PLL_MISC_CONTROLS_PLL_SYNTH_SSC_GEN_COUNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PLLManualOverride - Manual Override Register
    Bits: 31    PLLManualOverride(rw) - Setting this bit to 1 enables manual override control for the PLLs. This takes control away from the PLL State Machine. This will also enable writes to the other config regs that would normally be blocked by the PLL State Machine
    Bits: 30    OvdPdSynth(rw) - Manual Override: PLL Power Down Mode: 1=Normal 0=PowerDown
    Bits: 29    OvdResetSynth(rw) - Manual Override: Reset mode: 1=Normal, 0=Reset
    Bits:  5    OvdSynthOut1En(rw) - Manual Override: Enable for synthesizer clock output 1
    Bits:  4    OvdSynthOutByPass1(rw) - Manual Override: Bypass synthesizer clock output 1 with ICK_SYNTHREF with the PLL
    Bits:  3    OvdWrapOutByPass1(rw) - Manual Override: Bypass synthesizer clock output 1 with ICK_SYNTHREF outside the PLL
    Bits:  2    OvdSynthOut0En(rw) - Manual Override: Enable for synthesizer clock output 0
    Bits:  1    OvdSynthOutByPass0(rw) - Manual Override: Bypass synthesizer clock output 0 with ICK_SYNTHREF within the PLL
    Bits:  0    OvdWrapOutByPass0(rw) - Manual Override: Bypass synthesizer clock output 0 with ICK_SYNTHREF outside the PLL
*/
#define NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE                    0x00000014
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_PLL_MANUAL_OVERRIDE BIT(31)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_PD_SYNTH     BIT(30)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_RESET_SYNTH  BIT(29)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_SYNTHOUT1_EN BIT(5)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_SYNTHOUT_BYPASS1 BIT(4)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_WRAPOUT_BYPASS1 BIT(3)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_SYNTHOUT0_EN BIT(2)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_SYNTHOUT_BYPASS0 BIT(1)
#define   NFP_EMUX_PLLCNTL_PLL_MAN_OVERRIDE_OVD_WRAPOUT_BYPASS0 BIT(0)

#else /* NFP6000_LONGNAMES */

/*----------------------------------------------------------------
  Register: ConfigCPP - CPP MU Configuration Register
    Bits: 15:8  DirAccWays(rw) - When bit n in this field is set to 1, permit MU commands to direct access that way of the cache; when low, maps direct access to that way to High Locality of Reference accesses. If all 1s then all MU commands, with the exception of the Queue Engine commands highlighted in the Note below, are forced to be direct access. Note: This applies only the External Memory Units, all other Memory Units are direct access only
    Bits:  5    CPPErrorSuppress(rw) - If set, data errors generated for outbound CPP data buses will be suppressed internally and will not be sent out on the bus. CPP targets will suppress Push bus errors, CPP masters will suppress Pull bus errors.
    Bits:  4    CPPErrorIgnore(rw) - If set, data errors received on inbound CPP data buses will be ignored internally. CPP targets will ignore Pull bus errors, CPP masters will ignore Push bus errors.
    Bits:  3    DisableDualChRead(rw) - Controls the use of the CTM Bulk Engine performance feature to use both DCache channels for parallel non-dependent reads if the ordered commands are blocked/empty (CTM Only).
    Bits:  2:1  Addr32Bit(rw) - Select mode of addressing. Note that only Bulk, Atomic and Queue operations are supported in 32-bit modes.
    Bits:  0    IgnBulkAlign(rw) - If set, then CPP address[3;0] are ignored for bulk DRAM access, as with the IXP. If clear, then CPP address[3;0] are used, and unaligned accesses occur if they are not zero.
*/
#define NFP_EMUX_CFG_ConfigCPP                               0x00000000
#define   NFP_EMUX_CFG_ConfigCPP_DirAccWays(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_CFG_ConfigCPP_DirAccWays_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_CFG_ConfigCPP_CPPErrorSuppress            BIT(5)
#define   NFP_EMUX_CFG_ConfigCPP_CPPErrorIgnore              BIT(4)
#define   NFP_EMUX_CFG_ConfigCPP_DisableDualChRead           BIT(3)
#define     NFP_EMUX_CFG_ConfigCPP_DisableDualChRead_Enabled (0 << 3)
#define     NFP_EMUX_CFG_ConfigCPP_DisableDualChRead_Disabled BIT(3)
#define   NFP_EMUX_CFG_ConfigCPP_Addr32Bit(_x)               (((_x) & 0x3) << 1)
#define   NFP_EMUX_CFG_ConfigCPP_Addr32Bit_of(_x)            (((_x) >> 1) & 0x3)
#define     NFP_EMUX_CFG_ConfigCPP_Addr32Bit_40BIT           (0)
#define     NFP_EMUX_CFG_ConfigCPP_Addr32Bit_32BIT           (1)
#define     NFP_EMUX_CFG_ConfigCPP_Addr32Bit_32BITHLR        (2)
#define     NFP_EMUX_CFG_ConfigCPP_Addr32Bit_32BITLLR        (3)
#define   NFP_EMUX_CFG_ConfigCPP_IgnBulkAlign                BIT(0)
#define     NFP_EMUX_CFG_ConfigCPP_IgnBulkAlign_ENFORCE      (0 << 0)
#define     NFP_EMUX_CFG_ConfigCPP_IgnBulkAlign_IGNORE       BIT(0)
/*----------------------------------------------------------------
  Register: ConfigVQDR[4] - Virtual QDR X Configuration Register
    Bits: 21:20 QueueType(rw) - Type of queues in the channel, similar to IXP IgnoreEOP and IgnoreSegCnt
    Bits: 15:0  MemWinBase(rw) - Bits [16;24] of full 40-bit MU address space for the base of the virtual QDR channel
*/
#define NFP_EMUX_CFG_ConfigVQDR(_x)                          (0x00000004 + (0x4 * ((_x) & 0x3)))
#define   NFP_EMUX_CFG_ConfigVQDR_QueueType(_x)              (((_x) & 0x3) << 20)
#define   NFP_EMUX_CFG_ConfigVQDR_QueueType_of(_x)           (((_x) >> 20) & 0x3)
#define     NFP_EMUX_CFG_ConfigVQDR_QueueType_SEGMENTS       (0)
#define     NFP_EMUX_CFG_ConfigVQDR_QueueType_PACKETS        (1)
#define     NFP_EMUX_CFG_ConfigVQDR_QueueType_PACKETS32      (2)
#define     NFP_EMUX_CFG_ConfigVQDR_QueueType_BUFFERS        (3)
#define   NFP_EMUX_CFG_ConfigVQDR_MemWinBase(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_CFG_ConfigVQDR_MemWinBase_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: XpbTimeout - XPB Timeout
    Bits: 31:0  XpbTimeoutData(rw) - XPB timeout data.
*/
#define NFP_EMUX_CFG_XpbTimeout                              0x00000c00
#define   NFP_EMUX_CFG_XpbTimeout_XpbTimeoutData(_x)         (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_CFG_XpbTimeout_XpbTimeoutData_of(_x)      (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LookupEngineStatus - Lookup Engine Status Register. Contains read only status information for the Lookup Engine Instance.
    Bits:  3:0  ErrorCounter(ro) - It is a saturating counter and Holds the Error-count of Invalid opcode,pull-data-error,dcache-data-error
*/
#define NFP_EMUX_LE_LookupEngineStatus                       0x00000000
#define   NFP_EMUX_LE_LookupEngineStatus_ErrorCounter(_x)    (((_x) & 0xf) << 0)
#define   NFP_EMUX_LE_LookupEngineStatus_ErrorCounter_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LookupEngineConfig - Lookup Engine Configuration Register. Read/Write configuration information for the Lookup Engine.
    Bits:  8    Reset_Error_Counter(rw) - Reset Error-counter in LookupEngineStatus register when set.
    Bits:  7:6  MemoryLocalityConfig(rw) - What locality to use when accessing the External memory through Tcache
    Bits:  5:0  RecursionLimit(rw) - The recursion limit value is set to limit the maximum number of recursive lookups allowed
*/
#define NFP_EMUX_LE_LookupEngineConfig                       0x00000004
#define   NFP_EMUX_LE_LookupEngineConfig_Reset_Error_Counter BIT(8)
#define   NFP_EMUX_LE_LookupEngineConfig_MemoryLocalityConfig(_x) (((_x) & 0x3) << 6)
#define   NFP_EMUX_LE_LookupEngineConfig_MemoryLocalityConfig_of(_x) (((_x) >> 6) & 0x3)
#define   NFP_EMUX_LE_LookupEngineConfig_RecursionLimit(_x)  (((_x) & 0x3f) << 0)
#define   NFP_EMUX_LE_LookupEngineConfig_RecursionLimit_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: AlgorithmicTableLocation[8] - Lookup Engine Algorithmic Table Types. These Read/Write registers define the location for each of the eight algorithmic table types.
    Bits:  5:1  Address(rw) - Upper address bits 32:28 of the table
    Bits:  0    Location(rw) - The location of the table
*/
#define NFP_EMUX_LE_AlgorithmicTableLocation(_x)             (0x00000008 + (0x4 * ((_x) & 0x7)))
#define   NFP_EMUX_LE_AlgorithmicTableLocation_Address(_x)   (((_x) & 0x1f) << 1)
#define   NFP_EMUX_LE_AlgorithmicTableLocation_Address_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP_EMUX_LE_AlgorithmicTableLocation_Location      BIT(0)
#define     NFP_EMUX_LE_AlgorithmicTableLocation_Location_Internal (0 << 0)
#define     NFP_EMUX_LE_AlgorithmicTableLocation_Location_External BIT(0)
/*----------------------------------------------------------------
  Register: DirectTableLocation - Lookup Engine Direct Table Type. Read/Write registers define the bits[32:28] of the Small Direct lookup table DLUT32 and DLUT24
    Bits:  5:1  Address(rw) - Upper address bits 32:28 of Small Direct Lookup Table - DLUT24 and DLUT32
*/
#define NFP_EMUX_LE_DirectTableLocation                      0x00000028
#define   NFP_EMUX_LE_DirectTableLocation_Address(_x)        (((_x) & 0x1f) << 1)
#define   NFP_EMUX_LE_DirectTableLocation_Address_of(_x)     (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: ConfigDrams - Data Mover DRAM Config
    Bits: 29:28 PacemkrMode(rw) - Pacemaker Mode: The data mover pacemaker controls how fast read transactions may be submitted to the DDR DRAM Controller. This must be set to 0 (OFF) when the ME core clock is faster than the DDR data rate (i.e. 1.2 GHz NFP with DDR3-1066); and set to 1 (1 transaction every 4 cycles) when the ME core clock is slower than the DDR data rate (i.e. 1.2 GHz NFP with DDR3-1333). Settings of 0x2 and 0x3 are not recommended, as these settings add additional delay with no additional benefit.
    Bits: 26:24 DCacheReqFIFODepth(rw) - Dcache Request FIFO Depth: This limits the number of transactions put in flight. For most configurations the default value is correct. However, when the P_CLK is slowed running against fast memory, the number of transactions put in flight into the SDRAM latency must be limited to prevent overrunning the data FIFOs. Note that a setting 0x7 (2 transactions in flight) is always safe.
    Bits: 23    TfawDisable(rw) - Controls the TFAW Timer within the Data Mover scheduler
    Bits: 22:20 Channels(rw) - Sets the number and type of DRAM channels and ranks in use.
    Bits: 19    Cabits(rw) - Configures the number fo DRAM column address bits being used
    Bits: 18:16 Rabits(rw) - Configures the number of DRAM row address bits being used
    Bits: 15:14 ToDwell(rw) - When set to N, the Data Mover scheduler will perform N+1 snapshots processing DRAM writes before moving on to DRAM reads.
    Bits: 13:12 FromDwell(rw) - When set to N, the Data Mover scheduler will perform N+1 snapshots processing DRAM reads before moving on to DRAM writes.
    Bits: 11:5  TRCTimer(rw) - Programmed to N, this configures the DRAM access scheduler to guarantee N+1 core clock cycles between the issue of accesses to the same bank. The purpose of this is to mock the TRC parameter of the memories in the scheduling algorithm. N has a range of 0 to 127 and should be set to (TRC/CoreClockPeriod)-1. This parameter can be approximate, as the actual TRC is configured in the DRAM controller.
    Bits:  4:0  SnapshotTmr(rw) - If set to N, the DRAM access scheduler will wait a minimum of N*4 clock cycles between snapshots of transaction requests in order to gather reads and writes together.
*/
#define NFP_EMUX_EXTCFG_ConfigDrams                          0x00000000
#define   NFP_EMUX_EXTCFG_ConfigDrams_PacemkrMode(_x)        (((_x) & 0x3) << 28)
#define   NFP_EMUX_EXTCFG_ConfigDrams_PacemkrMode_of(_x)     (((_x) >> 28) & 0x3)
#define     NFP_EMUX_EXTCFG_ConfigDrams_PacemkrMode_OFF      (0)
#define     NFP_EMUX_EXTCFG_ConfigDrams_PacemkrMode_4        (1)
#define     NFP_EMUX_EXTCFG_ConfigDrams_PacemkrMode_5        (2)
#define     NFP_EMUX_EXTCFG_ConfigDrams_PacemkrMode_6        (3)
#define   NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth(_x) (((_x) & 0x7) << 24)
#define   NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_of(_x) (((_x) >> 24) & 0x7)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_16 (0)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_14 (1)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_12 (2)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_10 (3)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_8 (4)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_6 (5)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_4 (6)
#define     NFP_EMUX_EXTCFG_ConfigDrams_DCacheReqFIFODepth_2 (7)
#define   NFP_EMUX_EXTCFG_ConfigDrams_TfawDisable            BIT(23)
#define     NFP_EMUX_EXTCFG_ConfigDrams_TfawDisable_Enabled  (0 << 23)
#define     NFP_EMUX_EXTCFG_ConfigDrams_TfawDisable_Disabled BIT(23)
#define   NFP_EMUX_EXTCFG_ConfigDrams_Channels(_x)           (((_x) & 0x7) << 20)
#define   NFP_EMUX_EXTCFG_ConfigDrams_Channels_of(_x)        (((_x) >> 20) & 0x7)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Channels_Single_64_bit_ECC_1_rank (0)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Channels_Single_64_bit_ECC_2_rank (1)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Channels_Single_32_bit_ECC_1_rank (4)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Channels_Single_32_bit_ECC_2_rank (5)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Channels_Dual_32_bit_ECC_1_rank (6)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Channels_Dual_32_bit_ECC_2_rank (7)
#define   NFP_EMUX_EXTCFG_ConfigDrams_Cabits                 BIT(19)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Cabits_10            (0 << 19)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Cabits_11            BIT(19)
#define   NFP_EMUX_EXTCFG_ConfigDrams_Rabits(_x)             (((_x) & 0x7) << 16)
#define   NFP_EMUX_EXTCFG_ConfigDrams_Rabits_of(_x)          (((_x) >> 16) & 0x7)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Rabits_12            (0)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Rabits_13            (1)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Rabits_14            (2)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Rabits_15            (3)
#define     NFP_EMUX_EXTCFG_ConfigDrams_Rabits_16            (4)
#define   NFP_EMUX_EXTCFG_ConfigDrams_ToDwell(_x)            (((_x) & 0x3) << 14)
#define   NFP_EMUX_EXTCFG_ConfigDrams_ToDwell_of(_x)         (((_x) >> 14) & 0x3)
#define   NFP_EMUX_EXTCFG_ConfigDrams_FromDwell(_x)          (((_x) & 0x3) << 12)
#define   NFP_EMUX_EXTCFG_ConfigDrams_FromDwell_of(_x)       (((_x) >> 12) & 0x3)
#define   NFP_EMUX_EXTCFG_ConfigDrams_TRCTimer(_x)           (((_x) & 0x7f) << 5)
#define   NFP_EMUX_EXTCFG_ConfigDrams_TRCTimer_of(_x)        (((_x) >> 5) & 0x7f)
#define   NFP_EMUX_EXTCFG_ConfigDrams_SnapshotTmr(_x)        (((_x) & 0x1f) << 0)
#define   NFP_EMUX_EXTCFG_ConfigDrams_SnapshotTmr_of(_x)     (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: ConfigPerfTweaks - TCache Config - Performance Adjustments
    Bits:  2    LevelSets(rw) - Set to enable the one-way function mapping from MU address to cache/DRAM set addressing for memory load balancing
    Bits:  1    LvlChans(rw) - Set to enable the one-way function mapping from MU address to cache/DRAM channel addressing for memory load balancing
    Bits:  0    LevelBanks(rw) - Set to enable the one-way function mapping from MU address to cache/DRAM bank addressing for memory load balancing
*/
#define NFP_EMUX_EXTCFG_ConfigPerfTweaks                     0x00000004
#define   NFP_EMUX_EXTCFG_ConfigPerfTweaks_LevelSets         BIT(2)
#define     NFP_EMUX_EXTCFG_ConfigPerfTweaks_LevelSets_CLR   (0 << 2)
#define     NFP_EMUX_EXTCFG_ConfigPerfTweaks_LevelSets_SET   BIT(2)
#define   NFP_EMUX_EXTCFG_ConfigPerfTweaks_LvlChans          BIT(1)
#define     NFP_EMUX_EXTCFG_ConfigPerfTweaks_LvlChans_CLR    (0 << 1)
#define     NFP_EMUX_EXTCFG_ConfigPerfTweaks_LvlChans_SET    BIT(1)
#define   NFP_EMUX_EXTCFG_ConfigPerfTweaks_LevelBanks        BIT(0)
#define     NFP_EMUX_EXTCFG_ConfigPerfTweaks_LevelBanks_CLR  (0 << 0)
#define     NFP_EMUX_EXTCFG_ConfigPerfTweaks_LevelBanks_SET  BIT(0)
/*----------------------------------------------------------------
  Register: CommandStatus - Tag Bank N Command Status Register
    Bits:  2    Aborted(ro) - Indicates a command aborted; cleared by a read
    Bits:  1    Valid(ro) - Asserted when a tcache command has completed; cleared by a read
    Bits:  0    IntfErr(ro) - Asserted if an error occurred in a tcache command; cleared by a read
*/
#define NFP_EMUX_TCACHE_CommandStatus                        0x00000008
#define   NFP_EMUX_TCACHE_CommandStatus_Aborted              BIT(2)
#define   NFP_EMUX_TCACHE_CommandStatus_Valid                BIT(1)
#define   NFP_EMUX_TCACHE_CommandStatus_IntfErr              BIT(0)
/*----------------------------------------------------------------
  Register: CommandControl - Tag Bank N Command Control Register
    Bits: 24:16 Set(wo) - Set to access
    Bits: 15:8  Ways(wo) - For write: mask of ways to write (one bit per way); for read: which way to read (binary encoding:upper five bits not used for read)
    Bits:  2:0  Type(wo) - Command type
*/
#define NFP_EMUX_TCACHE_CommandControl                       0x0000000c
#define   NFP_EMUX_TCACHE_CommandControl_Set(_x)             (((_x) & 0x1ff) << 16)
#define   NFP_EMUX_TCACHE_CommandControl_Set_of(_x)          (((_x) >> 16) & 0x1ff)
#define   NFP_EMUX_TCACHE_CommandControl_Ways(_x)            (((_x) & 0xff) << 8)
#define   NFP_EMUX_TCACHE_CommandControl_Ways_of(_x)         (((_x) >> 8) & 0xff)
#define   NFP_EMUX_TCACHE_CommandControl_Type(_x)            (((_x) & 0x7) << 0)
#define   NFP_EMUX_TCACHE_CommandControl_Type_of(_x)         (((_x) >> 0) & 0x7)
#define     NFP_EMUX_TCACHE_CommandControl_Type_WRWAYS       (4)
#define     NFP_EMUX_TCACHE_CommandControl_Type_YES          (5)
/*----------------------------------------------------------------
  Register: WriteData - Tag Bank N Write Data Register
    Bits: 18:16 State(rw) - State value to write to ways of set for write command
    Bits: 14:0  Tag(rw) - Tag data to write to ways of set for write command
*/
#define NFP_EMUX_TCACHE_WriteData                            0x00000010
#define   NFP_EMUX_TCACHE_WriteData_State(_x)                (((_x) & 0x7) << 16)
#define   NFP_EMUX_TCACHE_WriteData_State_of(_x)             (((_x) >> 16) & 0x7)
#define     NFP_EMUX_TCACHE_WriteData_State_LOCKED           (0)
#define     NFP_EMUX_TCACHE_WriteData_State_INUSE            (1)
#define     NFP_EMUX_TCACHE_WriteData_State_DIRTYHLR         (2)
#define     NFP_EMUX_TCACHE_WriteData_State_DIRTYLLR         (3)
#define     NFP_EMUX_TCACHE_WriteData_State_CLEANHLR         (4)
#define     NFP_EMUX_TCACHE_WriteData_State_CLEANLLR         (5)
#define   NFP_EMUX_TCACHE_WriteData_Tag(_x)                  (((_x) & 0x7fff) << 0)
#define   NFP_EMUX_TCACHE_WriteData_Tag_of(_x)               (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: CommandResponse - Tag Bank N Command Response Register
    Bits: 31    Valid(ro) - Asserted if the command response is valid; cleared when a new command is set
    Bits: 30:28 Type(ro) - Type of command response
    Bits: 22:20 Way(ro) - Way in command response
    Bits: 18:16 State(ro) - State from command response
    Bits: 14:0  Tag(ro) - Tag from command response
*/
#define NFP_EMUX_TCACHE_CommandResponse                      0x00000014
#define   NFP_EMUX_TCACHE_CommandResponse_Valid              BIT(31)
#define   NFP_EMUX_TCACHE_CommandResponse_Type(_x)           (((_x) & 0x7) << 28)
#define   NFP_EMUX_TCACHE_CommandResponse_Type_of(_x)        (((_x) >> 28) & 0x7)
#define   NFP_EMUX_TCACHE_CommandResponse_Way(_x)            (((_x) & 0x7) << 20)
#define   NFP_EMUX_TCACHE_CommandResponse_Way_of(_x)         (((_x) >> 20) & 0x7)
#define   NFP_EMUX_TCACHE_CommandResponse_State(_x)          (((_x) & 0x7) << 16)
#define   NFP_EMUX_TCACHE_CommandResponse_State_of(_x)       (((_x) >> 16) & 0x7)
#define   NFP_EMUX_TCACHE_CommandResponse_Tag(_x)            (((_x) & 0x7fff) << 0)
#define   NFP_EMUX_TCACHE_CommandResponse_Tag_of(_x)         (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: ReadData - Tag Bank N Read Data Register
    Bits: 18:16 State(ro) - State of way read using read command; only set when a read command response is valid
    Bits: 14:0  Tag(ro) - Tag of way read using read command; only set when a read command response is valid
*/
#define NFP_EMUX_TCACHE_ReadData                             0x00000018
#define   NFP_EMUX_TCACHE_ReadData_State(_x)                 (((_x) & 0x7) << 16)
#define   NFP_EMUX_TCACHE_ReadData_State_of(_x)              (((_x) >> 16) & 0x7)
#define   NFP_EMUX_TCACHE_ReadData_Tag(_x)                   (((_x) & 0x7fff) << 0)
#define   NFP_EMUX_TCACHE_ReadData_Tag_of(_x)                (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: PerformanceCounterMode - Performance counter mode
    Bits:  3:0  Data(rw) - Tag cache bank performance counter mode
*/
#define NFP_EMUX_TCACHE_PerformanceCounterMode               0x00000034
#define   NFP_EMUX_TCACHE_PerformanceCounterMode_Data(_x)    (((_x) & 0xf) << 0)
#define   NFP_EMUX_TCACHE_PerformanceCounterMode_Data_of(_x) (((_x) >> 0) & 0xf)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_HOLD (0)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_RESET (1)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_STATS (2)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_REQ0MON (3)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_ALLOCCLEAN (4)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_ALLOCRDY (5)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_ALLOCEVICT (6)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_DIRTY (7)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_SETREQ (8)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_FULLALL (9)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_FULLHIGH (10)
#define     NFP_EMUX_TCACHE_PerformanceCounterMode_Data_FULLPAIRS (11)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_00 -
    Bits: 31:16 VERSION(ro) - Holds the controller version number. READ-ONLY
    Bits: 11:8  DRAM_CLASS(rw) - Defines the mode of operation of the controller.
    Bits:  0    START(rw) - Initiate command processing in the controller. Set to 1 to initiate.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_00                         0x00000000
#define   NFP_EMUX_DCT_i_DENALI_CTL_00_VERSION(_x)           (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_00_VERSION_of(_x)        (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_00_DRAM_CLASS(_x)        (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_00_DRAM_CLASS_of(_x)     (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_00_START                 BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_01 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 17:16 MAX_CS_REG(ro) - Holds the maximum number of chip selects available. READ-ONLY
    Bits: 11:8  MAX_COL_REG(ro) - Holds the maximum width of column address in DRAMs. READ-ONLY
    Bits:  4:0  MAX_ROW_REG(ro) - Holds the maximum width of memory address bus. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_01                         0x00000004
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_MAX_CS_REG(_x)        (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_MAX_CS_REG_of(_x)     (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_MAX_COL_REG(_x)       (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_MAX_COL_REG_of(_x)    (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_MAX_ROW_REG(_x)       (((_x) & 0x1f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_01_MAX_ROW_REG_of(_x)    (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_02 -
    Bits: 31:24 OBSOLETE1(ro) - PADDING_BITS
    Bits: 23:0  TINIT(rw) - DRAM TINIT value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_02                         0x00000008
#define   NFP_EMUX_DCT_i_DENALI_CTL_02_OBSOLETE1(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_02_OBSOLETE1_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_02_TINIT(_x)             (((_x) & 0xffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_02_TINIT_of(_x)          (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_03 -
    Bits: 31:0  TRST_PWRON(rw) - Duration of memory reset during power-on initialization.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_03                         0x0000000c
#define   NFP_EMUX_DCT_i_DENALI_CTL_03_TRST_PWRON(_x)        (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_03_TRST_PWRON_of(_x)     (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_04 -
    Bits: 31:0  CKE_INACTIVE(rw) - Number of cycles after reset before CKE will be active.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_04                         0x00000010
#define   NFP_EMUX_DCT_i_DENALI_CTL_04_CKE_INACTIVE(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_04_CKE_INACTIVE_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_05 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  TCPD(rw) - DRAM TCPD value in cycles.
    Bits:  3:0  INITAREF(rw) - Number of auto-refresh commands to execute during DRAM initialization.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_05                         0x00000014
#define   NFP_EMUX_DCT_i_DENALI_CTL_05_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_05_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_05_TCPD(_x)              (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_05_TCPD_of(_x)           (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_05_INITAREF(_x)          (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_05_INITAREF_of(_x)       (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_06 -
    Bits: 29:24 CASLAT_LIN(rw) - Sets latency from read command send to data receive from/to controller. Bit (0) is half-cycle increment and the upper bits define memory CAS latency for the controller.
    Bits: 16    NO_CMD_INIT(rw) - Disable DRAM commands until the TDLL parameter has expired during initialization. Set to 1 to disable.
    Bits: 15:0  TDLL(rw) - DRAM TDLL value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_06                         0x00000018
#define   NFP_EMUX_DCT_i_DENALI_CTL_06_CASLAT_LIN(_x)        (((_x) & 0x3f) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_06_CASLAT_LIN_of(_x)     (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_06_NO_CMD_INIT           BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_06_TDLL(_x)              (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_06_TDLL_of(_x)           (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_07 -
    Bits: 28:24 TCCD(rw) - DRAM CAS-to-CAS value in cycles.
    Bits: 18:16 TBST_INT_INTERVAL(rw) - DRAM burst interrupt interval value in cycles.
    Bits: 12:8  ADDITIVE_LAT(rw) - DRAM additive latency value in cycles.
    Bits:  4:0  WRLAT(rw) - DRAM WRLAT value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_07                         0x0000001c
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_TCCD(_x)              (((_x) & 0x1f) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_TCCD_of(_x)           (((_x) >> 24) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_TBST_INT_INTERVAL(_x) (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_TBST_INT_INTERVAL_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_ADDITIVE_LAT(_x)      (((_x) & 0x1f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_ADDITIVE_LAT_of(_x)   (((_x) >> 8) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_WRLAT(_x)             (((_x) & 0x1f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_07_WRLAT_of(_x)          (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_08 -
    Bits: 27:24 TWTR(rw) - DRAM TWTR value in cycles.
    Bits: 23:16 TRAS_MIN(rw) - DRAM TRAS_MIN value in cycles.
    Bits: 15:8  TRC(rw) - DRAM TRC value in cycles.
    Bits:  7:0  TRRD(rw) - DRAM TRRD value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_08                         0x00000020
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TWTR(_x)              (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TWTR_of(_x)           (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TRAS_MIN(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TRAS_MIN_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TRC(_x)               (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TRC_of(_x)            (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TRRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_08_TRRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_09 -
    Bits: 28:24 TMRD(rw) - DRAM TMRD value in cycles.
    Bits: 19:16 TRTP(rw) - DRAM TRTP value in cycles.
    Bits: 13:8  TFAW(rw) - DRAM TFAW value in cycles.
    Bits:  4:0  TRP(rw) - DRAM TRP value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_09                         0x00000024
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TMRD(_x)              (((_x) & 0x1f) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TMRD_of(_x)           (((_x) >> 24) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TRTP(_x)              (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TRTP_of(_x)           (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TFAW(_x)              (((_x) & 0x3f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TFAW_of(_x)           (((_x) >> 8) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TRP(_x)               (((_x) & 0x1f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_09_TRP_of(_x)            (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_10 -
    Bits: 24:8  TRAS_MAX(rw) - DRAM TRAS_MAX value in cycles.
    Bits:  7:0  TMOD(rw) - Number of cycles after MRS command and before any other command.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_10                         0x00000028
#define   NFP_EMUX_DCT_i_DENALI_CTL_10_TRAS_MAX(_x)          (((_x) & 0x1ffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_10_TRAS_MAX_of(_x)       (((_x) >> 8) & 0x1ffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_10_TMOD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_10_TMOD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_11 -
    Bits: 31:24 TRCD(rw) - DRAM TRCD value in cycles.
    Bits: 16    WRITEINTERP(rw) - Allow controller to interrupt a write burst to the DRAMs with a read command. Set to 1 to allow interruption.
    Bits: 15:8  TCKESR(rw) - Minimum CKE low pulse width during a self-refresh.
    Bits:  2:0  TCKE(rw) - Minimum CKE pulse width.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_11                         0x0000002c
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_TRCD(_x)              (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_TRCD_of(_x)           (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_WRITEINTERP           BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_TCKESR(_x)            (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_TCKESR_of(_x)         (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_TCKE(_x)              (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_11_TCKE_of(_x)           (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_12 -
    Bits: 24    TRAS_LOCKOUT(rw) - Allow the controller to execute auto pre-charge commands before the TRAS_MIN parameter expires. Set to 1 to enable.
    Bits: 16    CONCURRENTAP(rw) - Allow controller to issue commands to other banks while a bank is in auto pre-charge. Set to 1 to enable.
    Bits:  8    AP(rw) - Enable auto pre-charge mode of controller. Set to 1 to enable.
    Bits:  5:0  TWR(rw) - DRAM TWR value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_12                         0x00000030
#define   NFP_EMUX_DCT_i_DENALI_CTL_12_TRAS_LOCKOUT          BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_12_CONCURRENTAP          BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_12_AP                    BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_12_TWR(_x)               (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_12_TWR_of(_x)            (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_13 -
    Bits: 24    REG_DIMM_ENABLE(rw) - Enable registered DIMM operation of the controller. Set to 1 to enable.
    Bits: 20:16 TRP_AB(rw) - DRAM TRP all bank value in cycles.
    Bits: 10:8  BSTLEN(rw) - Encoded burst length sent to DRAMs during initialization. Set to 1 for BL2, set to 2 for BL4, or set to 3 for BL8.
    Bits:  5:0  TDAL(rw) - DRAM TDAL value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_13                         0x00000034
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_REG_DIMM_ENABLE       BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_TRP_AB(_x)            (((_x) & 0x1f) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_TRP_AB_of(_x)         (((_x) >> 16) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_BSTLEN(_x)            (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_BSTLEN_of(_x)         (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_TDAL(_x)              (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_13_TDAL_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_14 -
    Bits: 24    TREF_ENABLE(rw) - Issue auto-refresh commands to the DRAMs at the interval defined in the TREF parameter. Set to 1 to enable.
    Bits: 16    RESERVED2(rw) - Reserved for future use. Must be cleared to 0x0.
    Bits:  8    AREFRESH(wo) - Initiate auto-refresh at the end of the current burst boundary. Set to 1 to trigger. WRITE-ONLY
    Bits:  1:0  ADDRESS_MIRRORING(rw) - Indicates which chip selects support address mirroring. Bit (0) controls cs0, bit (1) controls cs1, etc. Set each bit to 1 to enable.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_14                         0x00000038
#define   NFP_EMUX_DCT_i_DENALI_CTL_14_TREF_ENABLE           BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_14_RESERVED2             BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_14_AREFRESH              BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_14_ADDRESS_MIRRORING(_x) (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_14_ADDRESS_MIRRORING_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_15 -
    Bits: 29:16 TREF(rw) - DRAM TREF value in cycles.
    Bits:  9:0  TRFC(rw) - DRAM TRFC value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_15                         0x0000003c
#define   NFP_EMUX_DCT_i_DENALI_CTL_15_TREF(_x)              (((_x) & 0x3fff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_15_TREF_of(_x)           (((_x) >> 16) & 0x3fff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_15_TRFC(_x)              (((_x) & 0x3ff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_15_TRFC_of(_x)           (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_16 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  TPDEX(rw) - DRAM TPDEX value in cycles.
    Bits:  7:0  OBSOLETE0(ro) - PADDING_BITS
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_16                         0x00000040
#define   NFP_EMUX_DCT_i_DENALI_CTL_16_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_16_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_16_TPDEX(_x)             (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_16_TPDEX_of(_x)          (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_16_OBSOLETE0(_x)         (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_16_OBSOLETE0_of(_x)      (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_17 -
    Bits: 31:16 TXARD(rw) - DRAM TXARD value in cycles.
    Bits: 15:0  TXPDLL(rw) - DRAM TXPDLL value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_17                         0x00000044
#define   NFP_EMUX_DCT_i_DENALI_CTL_17_TXARD(_x)             (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_17_TXARD_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_17_TXPDLL(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_17_TXPDLL_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_18 -
    Bits: 31:16 TXSR(rw) - DRAM TXSR value in cycles.
    Bits: 15:0  TXARDS(rw) - DRAM TXARDS value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_18                         0x00000048
#define   NFP_EMUX_DCT_i_DENALI_CTL_18_TXSR(_x)              (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_18_TXSR_of(_x)           (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_18_TXARDS(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_18_TXARDS_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_19 -
    Bits: 24    SREFRESH_EXIT_NO_REFRESH(rw) - Disables the automatic refresh request associated with self-refresh exit. Set to 1 to disable.
    Bits: 16    PWRUP_SREFRESH_EXIT(rw) - Allow powerup via self-refresh instead of full memory initialization. Set to 1 to enable.
    Bits: 15:0  TXSNR(rw) - DRAM TXSNR value in cycles.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_19                         0x0000004c
#define   NFP_EMUX_DCT_i_DENALI_CTL_19_SREFRESH_EXIT_NO_REFRESH BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_19_PWRUP_SREFRESH_EXIT   BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_19_TXSNR(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_19_TXSNR_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_20 -
    Bits: 31:24 CKSRE(rw) - Clock hold delay on self-refresh entry.
    Bits: 17:16 LOWPOWER_REFRESH_ENABLE(rw) - Enable refreshes while in low power mode. Bit (0) controls cs0, bit (1) controls cs1, etc. Set each bit to 1 to disable.
    Bits: 10:8  CKE_DELAY(rw) - Additional cycles to delay CKE for status reporting.
    Bits:  0    ENABLE_QUICK_SREFRESH(rw) - Allow user to interrupt memory initialization to enter self-refresh mode. Set to 1 to allow interruption.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_20                         0x00000050
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_CKSRE(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_CKSRE_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_LOWPOWER_REFRESH_ENABLE(_x) (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_LOWPOWER_REFRESH_ENABLE_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_CKE_DELAY(_x)         (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_CKE_DELAY_of(_x)      (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_20_ENABLE_QUICK_SREFRESH BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_21 -
    Bits: 27:24 LP_ARB_STATE(ro) - Reports on the state of the arbiter. Bits (2:0) indicate which interface has control of the low power control module and bit (3) indicates if the software programmable interface has an active lock on the arbiter. For bits (2:0), value of 0 indicates module is idle, value of 1 indicates software programmable interface is in control, value of 2 indicates external pin interface is in control, value of 3 indicates automatic interface is in control, value of 4 indicates dynamic power control per chip select interface is in control, and value of 5 indicates that the controller is in control. READ-ONLY
    Bits: 21:16 LP_STATE(ro) - Low power state status parameter. Bits (4:0) indicate the current low power state and bit (5) set indicates that status bits are valid. READ-ONLY
    Bits: 15:8  LP_CMD(wo) - Low power software command request interface. Bit (0) controls exit, bit (1) controls entry, bits (4:2) define the low power state, bit (5) controls memory clock gating, bit (6) controls controller clock gating, and bit (7) controls lock. WRITE-ONLY
    Bits:  7:0  CKSRX(rw) - Clock stable delay on self-refresh exit.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_21                         0x00000054
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_LP_ARB_STATE(_x)      (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_LP_ARB_STATE_of(_x)   (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_LP_STATE(_x)          (((_x) & 0x3f) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_LP_STATE_of(_x)       (((_x) >> 16) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_LP_CMD(_x)            (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_LP_CMD_of(_x)         (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_CKSRX(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_21_CKSRX_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_22 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 17:16 LP_AUTO_MEM_GATE_EN(rw) - Enable memory clock gating when entering a low power state via the auto low power counters. Bit (0) controls power-down, and bit (1) controls self-refresh. Set each bit to 1 to enable.
    Bits: 10:8  LP_AUTO_EXIT_EN(rw) - Enable auto exit from each of the low power states when a read or write command enters the command queue. Bit (0) controls power-down, bit (1) controls self-refresh, and bit (2) controls self-refresh with memory and controller clock gating. Set each bit to 1 to enable.
    Bits:  2:0  LP_AUTO_ENTRY_EN(rw) - Enable auto entry into each of the low power states when the associated idle timer expires. Bit (0) controls power-down, bit (1) controls self-refresh, and bit (2) controls self-refresh with memory and controller clock gating. Set each bit to 1 to enable.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_22                         0x00000058
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_LP_AUTO_MEM_GATE_EN(_x) (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_LP_AUTO_MEM_GATE_EN_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_LP_AUTO_EXIT_EN(_x)   (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_LP_AUTO_EXIT_EN_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_LP_AUTO_ENTRY_EN(_x)  (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_22_LP_AUTO_ENTRY_EN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_23 -
    Bits: 31:24 LP_AUTO_SR_MC_GATE_IDLE(rw) - Number of long count sequences until the controller will place memory in self-refresh with controller and memory clock gating.
    Bits: 23:16 LP_AUTO_SR_IDLE(rw) - Number of long count sequences until the controller will place memory in self-refresh.
    Bits: 11:0  LP_AUTO_PD_IDLE(rw) - Defines the idle time until the controller will place memory in active power-down.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_23                         0x0000005c
#define   NFP_EMUX_DCT_i_DENALI_CTL_23_LP_AUTO_SR_MC_GATE_IDLE(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_23_LP_AUTO_SR_MC_GATE_IDLE_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_23_LP_AUTO_SR_IDLE(_x)   (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_23_LP_AUTO_SR_IDLE_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_23_LP_AUTO_PD_IDLE(_x)   (((_x) & 0xfff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_23_LP_AUTO_PD_IDLE_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_24 -
    Bits: 31:8  OBSOLETE1(ro) - PADDING_BITS
    Bits:  7:0  RESERVED0(rw) - Reserved for future use. Must be cleared to 0x0.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_24                         0x00000060
#define   NFP_EMUX_DCT_i_DENALI_CTL_24_OBSOLETE1(_x)         (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_24_OBSOLETE1_of(_x)      (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_24_RESERVED0(_x)         (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_24_RESERVED0_of(_x)      (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_25 -
    Bits: 25:0  WRITE_MODEREG(rw) - Write memory mode register data to the DRAMs. Bits (7:0) define the memory mode register number if bit (23) is set, bits (15:8) define the chip select if bit (24) is clear, bits (23:16) define which memory mode register/s to write, bit (24) defines whether all chip selects will be written, and bit (25) triggers the write.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_25                         0x00000064
#define   NFP_EMUX_DCT_i_DENALI_CTL_25_WRITE_MODEREG(_x)     (((_x) & 0x3ffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_25_WRITE_MODEREG_of(_x)  (((_x) >> 0) & 0x3ffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_26 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  MR0_DATA_0(rw) - Data to program into memory mode register 0 for chip select 0.
    Bits:  7:0  MRW_STATUS(ro) - Write memory mode register status. Bit (0) set indicates a WRITE_MODEREG parameter programming error. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_26                         0x00000068
#define   NFP_EMUX_DCT_i_DENALI_CTL_26_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_26_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_26_MR0_DATA_0(_x)        (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_26_MR0_DATA_0_of(_x)     (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_26_MRW_STATUS(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_26_MRW_STATUS_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_27 -
    Bits: 31:16 MR2_DATA_0(rw) - Data to program into memory mode register 2 for chip select 0.
    Bits: 15:0  MR1_DATA_0(rw) - Data to program into memory mode register 1 for chip select 0.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_27                         0x0000006c
#define   NFP_EMUX_DCT_i_DENALI_CTL_27_MR2_DATA_0(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_27_MR2_DATA_0_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_27_MR1_DATA_0(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_27_MR1_DATA_0_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_28 -
    Bits: 31:16 MR3_DATA_0(rw) - Data to program into memory mode register 3 for chip select 0.
    Bits: 15:0  MRSINGLE_DATA_0(rw) - Data to program into memory mode register single write to chip select 0.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_28                         0x00000070
#define   NFP_EMUX_DCT_i_DENALI_CTL_28_MR3_DATA_0(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_28_MR3_DATA_0_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_28_MRSINGLE_DATA_0(_x)   (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_28_MRSINGLE_DATA_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_29 -
    Bits: 31:16 MR1_DATA_1(rw) - Data to program into memory mode register 1 for chip select 1.
    Bits: 15:0  MR0_DATA_1(rw) - Data to program into memory mode register 0 for chip select 1.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_29                         0x00000074
#define   NFP_EMUX_DCT_i_DENALI_CTL_29_MR1_DATA_1(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_29_MR1_DATA_1_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_29_MR0_DATA_1(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_29_MR0_DATA_1_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_30 -
    Bits: 31:16 MRSINGLE_DATA_1(rw) - Data to program into memory mode register single write to chip select 1.
    Bits: 15:0  MR2_DATA_1(rw) - Data to program into memory mode register 2 for chip select 1.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_30                         0x00000078
#define   NFP_EMUX_DCT_i_DENALI_CTL_30_MRSINGLE_DATA_1(_x)   (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_30_MRSINGLE_DATA_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_30_MR2_DATA_1(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_30_MR2_DATA_1_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_31 -
    Bits: 25:24 BIST_RESULT(ro) - BIST operation status (pass/fail). Bit (0) indicates data check status and bit (1) indicates address check status. Value of 1 is a passing result. READ-ONLY
    Bits: 16    BIST_GO(wo) - Initiate a BIST operation. Set to 1 to trigger. WRITE-ONLY
    Bits: 15:0  MR3_DATA_1(rw) - Data to program into memory mode register 3 for chip select 1.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_31                         0x0000007c
#define   NFP_EMUX_DCT_i_DENALI_CTL_31_BIST_RESULT(_x)       (((_x) & 0x3) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_31_BIST_RESULT_of(_x)    (((_x) >> 24) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_31_BIST_GO               BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_31_MR3_DATA_1(_x)        (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_31_MR3_DATA_1_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_32 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 16    BIST_ADDR_CHECK(rw) - Enable address checking with BIST operation. Set to 1 to enable.
    Bits:  8    BIST_DATA_CHECK(rw) - Enable data checking with BIST operation. Set to 1 to enable.
    Bits:  5:0  ADDR_SPACE(rw) - Sets the number of address bits to check during BIST operation.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_32                         0x00000080
#define   NFP_EMUX_DCT_i_DENALI_CTL_32_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_32_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_32_BIST_ADDR_CHECK       BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_32_BIST_DATA_CHECK       BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_32_ADDR_SPACE(_x)        (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_32_ADDR_SPACE_of(_x)     (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_33 -
    Bits: 31:0  BIST_START_ADDRESS(rw) - Start BIST checking at this address.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_33                         0x00000084
#define   NFP_EMUX_DCT_i_DENALI_CTL_33_BIST_START_ADDRESS(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_33_BIST_START_ADDRESS_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_34 -
    Bits: 31:8  OBSOLETE1(ro) - PADDING_BITS
    Bits:  2:0  BIST_START_ADDRESS(rw) - Start BIST checking at this address. This register is a continuation of DENALI_CTL_34, and contains bits [34:32] of BIST_START_ADDRESS.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_34                         0x00000088
#define   NFP_EMUX_DCT_i_DENALI_CTL_34_OBSOLETE1(_x)         (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_34_OBSOLETE1_of(_x)      (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_34_BIST_START_ADDRESS(_x) (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_34_BIST_START_ADDRESS_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_35 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_35                         0x0000008c
#define   NFP_EMUX_DCT_i_DENALI_CTL_35_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_35_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_36 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This register is a continuation of DENALI_CTL_35, and contains bits [63:32] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_36                         0x00000090
#define   NFP_EMUX_DCT_i_DENALI_CTL_36_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_36_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_37 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This register is a continuation of DENALI_CTL_35, and contains bits [95:64] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_37                         0x00000094
#define   NFP_EMUX_DCT_i_DENALI_CTL_37_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_37_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_38 -
    Bits: 31:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This register is a continuation of DENALI_CTL_35, and contains bits [127:96] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_38                         0x00000098
#define   NFP_EMUX_DCT_i_DENALI_CTL_38_BIST_DATA_MASK(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_38_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_39 -
    Bits: 27:16 ZQINIT(rw) - Number of cycles needed for a ZQINIT command.
    Bits: 15:0  BIST_DATA_MASK(rw) - Mask applied to data for BIST error checking. Bit (0) controls memory data path bit (0), bit (1) controls memory data path bit (1), etc. Set each bit to 1 to mask. This bit field is a continuation of DENALI_CTL_35, and contains bits [143:128] of BIST_DATA_MASK
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_39                         0x0000009c
#define   NFP_EMUX_DCT_i_DENALI_CTL_39_ZQINIT(_x)            (((_x) & 0xfff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_39_ZQINIT_of(_x)         (((_x) >> 16) & 0xfff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_39_BIST_DATA_MASK(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_39_BIST_DATA_MASK_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_40 -
    Bits: 27:16 ZQCS(rw) - Number of cycles needed for a ZQCS command.
    Bits: 11:0  ZQCL(rw) - Number of cycles needed for a ZQCL command.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_40                         0x000000a0
#define   NFP_EMUX_DCT_i_DENALI_CTL_40_ZQCS(_x)              (((_x) & 0xfff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_40_ZQCS_of(_x)           (((_x) >> 16) & 0xfff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_40_ZQCL(_x)              (((_x) & 0xfff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_40_ZQCL_of(_x)           (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_41 -
    Bits: 31:16 OBSOLETE2(ro) - PADDING_BITS
    Bits:  9:8  ZQ_ON_SREF_EXIT(rw) - Defines the type of ZQ calibration performed at self-refresh exit. Bit (0) selects ZQCS and bit (1) selects ZQCL. Set either bit to 1 to enable.
    Bits:  1:0  ZQ_REQ(wo) - User request to initiate a ZQ calibration. Bit (0) controls ZQCS and bit (1) controls ZQCL. Set either bit to 1 to trigger. WRITE-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_41                         0x000000a4
#define   NFP_EMUX_DCT_i_DENALI_CTL_41_OBSOLETE2(_x)         (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_41_OBSOLETE2_of(_x)      (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_41_ZQ_ON_SREF_EXIT(_x)   (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_41_ZQ_ON_SREF_EXIT_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_41_ZQ_REQ(_x)            (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_41_ZQ_REQ_of(_x)         (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_42 -
    Bits: 31:0  OBSOLETE0(ro) - PADDING_BITS
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_42                         0x000000a8
#define   NFP_EMUX_DCT_i_DENALI_CTL_42_OBSOLETE0(_x)         (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_42_OBSOLETE0_of(_x)      (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_43 -
    Bits: 26:24 ROW_DIFF(rw) - Difference between number of address pins available and number being used.
    Bits: 17:16 BANK_DIFF(rw) - Encoded number of banks on the DRAM(s).
    Bits:  8    ZQCS_ROTATE(rw) - Selects whether a ZQCS command will calibrate just one chip select or all chip selects. Set to 1 for rotating CS.
    Bits:  0    ZQ_IN_PROGRESS(ro) - Indicates that a ZQ command is currently in progress. Value of 1 indicates command in progress. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_43                         0x000000ac
#define   NFP_EMUX_DCT_i_DENALI_CTL_43_ROW_DIFF(_x)          (((_x) & 0x7) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_43_ROW_DIFF_of(_x)       (((_x) >> 24) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_43_BANK_DIFF(_x)         (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_43_BANK_DIFF_of(_x)      (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_43_ZQCS_ROTATE           BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_43_ZQ_IN_PROGRESS        BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_44 -
    Bits: 31:24 COMMAND_AGE_COUNT(rw) - Initial value of individual command aging counters for command aging.
    Bits: 23:16 AGE_COUNT(rw) - Initial value of master aging-rate counter for command aging.
    Bits: 11:8  APREBIT(rw) - Location of the auto pre-charge bit in the DRAM address.
    Bits:  2:0  COL_DIFF(rw) - Difference between number of column pins available and number being used.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_44                         0x000000b0
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_COMMAND_AGE_COUNT(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_COMMAND_AGE_COUNT_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_AGE_COUNT(_x)         (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_AGE_COUNT_of(_x)      (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_APREBIT(_x)           (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_APREBIT_of(_x)        (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_COL_DIFF(_x)          (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_44_COL_DIFF_of(_x)       (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_45 -
    Bits: 24    BIG_ENDIAN_EN(rw) - Set byte ordering as little endian or big endian. Set to 1 for big endian.
    Bits: 19:16 BURST_ON_FLY_BIT(rw) - Identifies the burst-on-fly bit in the memory mode registers.
    Bits:  9:8  CS_MAP(rw) - Defines which chip selects are active.
    Bits:  0    INHIBIT_DRAM_CMD(rw) - Inhibit read/write command traffic and associated bank commands. Set to 1 to inhibit.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_45                         0x000000b4
#define   NFP_EMUX_DCT_i_DENALI_CTL_45_BIG_ENDIAN_EN         BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_45_BURST_ON_FLY_BIT(_x)  (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_45_BURST_ON_FLY_BIT_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_45_CS_MAP(_x)            (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_45_CS_MAP_of(_x)         (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_45_INHIBIT_DRAM_CMD      BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_46 -
    Bits: 24    CTRLUPD_REQ_PER_AREF_EN(rw) - Enable an automatic controller-initiated update (dfi_ctrlupd_req) after every refresh. Set to 1 to enable.
    Bits: 16    CTRLUPD_REQ(wo) - Assert the DFI controller-initiated update request signal dfi_ctrlupd_req. Set to 1 to trigger. WRITE-ONLY
    Bits:  8    CONTROLLER_BUSY(ro) - Indicator that the controller is processing a command. Evaluates all ports for outstanding transactions. Value of 1 indicates controller busy. READ-ONLY
    Bits:  2:0  Q_FULLNESS(rw) - Quantity that determines command queue full.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_46                         0x000000b8
#define   NFP_EMUX_DCT_i_DENALI_CTL_46_CTRLUPD_REQ_PER_AREF_EN BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_46_CTRLUPD_REQ           BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_46_CONTROLLER_BUSY       BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_46_Q_FULLNESS(_x)        (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_46_Q_FULLNESS_of(_x)     (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_47 -
    Bits: 31:24 OBSOLETE1(ro) - PADDING_BITS
    Bits: 18:0  INT_STATUS(ro) - Status of interrupt features in the controller. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_47                         0x000000bc
#define   NFP_EMUX_DCT_i_DENALI_CTL_47_OBSOLETE1(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_47_OBSOLETE1_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_47_INT_STATUS(_x)        (((_x) & 0x7ffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_47_INT_STATUS_of(_x)     (((_x) >> 0) & 0x7ffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_48 -
    Bits: 31:0  OBSOLETE1(ro) - PADDING_BITS
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_48                         0x000000c0
#define   NFP_EMUX_DCT_i_DENALI_CTL_48_OBSOLETE1(_x)         (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_48_OBSOLETE1_of(_x)      (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_49 -
    Bits: 31:24 OBSOLETE1(ro) - PADDING_BITS
    Bits: 18:0  INT_MASK(rw) - Mask for controller_int signals from the INT_STATUS parameter.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_49                         0x000000c4
#define   NFP_EMUX_DCT_i_DENALI_CTL_49_OBSOLETE1(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_49_OBSOLETE1_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_49_INT_MASK(_x)          (((_x) & 0x7ffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_49_INT_MASK_of(_x)       (((_x) >> 0) & 0x7ffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_50 -
    Bits: 31:0  OUT_OF_RANGE_ADDR(ro) - Address of command that caused an out-of-range interrupt. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_50                         0x000000c8
#define   NFP_EMUX_DCT_i_DENALI_CTL_50_OUT_OF_RANGE_ADDR(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_50_OUT_OF_RANGE_ADDR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_51 -
    Bits: 27:24 OUT_OF_RANGE_SOURCE_ID(ro) - Source ID of command that caused an out-of-range interrupt. READ-ONLY
    Bits: 21:16 OUT_OF_RANGE_TYPE(ro) - Type of command that caused an out-of-range interrupt. READ-ONLY
    Bits: 15:8  OUT_OF_RANGE_LENGTH(ro) - Length of command that caused an out-of-range interrupt. READ-ONLY
    Bits:  2:0  OUT_OF_RANGE_ADDR(ro) - Address of command that caused an out-of-range interrupt. This bit field is a continuation of DENALI_CTL_50, and contains bits [34:32] of OUT_OF_RANGE_ADDR. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_51                         0x000000cc
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_SOURCE_ID(_x) (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_SOURCE_ID_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_TYPE(_x) (((_x) & 0x3f) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_TYPE_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_LENGTH(_x) (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_LENGTH_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_ADDR(_x) (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_51_OUT_OF_RANGE_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_52 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_52                         0x000000d0
#define   NFP_EMUX_DCT_i_DENALI_CTL_52_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_52_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_53 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [63:32] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_53                         0x000000d4
#define   NFP_EMUX_DCT_i_DENALI_CTL_53_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_53_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_54 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [95:64] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_54                         0x000000d8
#define   NFP_EMUX_DCT_i_DENALI_CTL_54_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_54_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_55 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [127:96] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_55                         0x000000dc
#define   NFP_EMUX_DCT_i_DENALI_CTL_55_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_55_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_56 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [159:128] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_56                         0x000000e0
#define   NFP_EMUX_DCT_i_DENALI_CTL_56_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_56_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_57 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [191:160] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_57                         0x000000e4
#define   NFP_EMUX_DCT_i_DENALI_CTL_57_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_57_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_58 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [223:192] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_58                         0x000000e8
#define   NFP_EMUX_DCT_i_DENALI_CTL_58_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_58_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_59 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [255:224] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_59                         0x000000ec
#define   NFP_EMUX_DCT_i_DENALI_CTL_59_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_59_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_60 -
    Bits: 31:0  BIST_EXP_DATA(ro) - Expected data on BIST error. This register is a continuation of DENALI_CTL_52, and contains bits [287:256] of BIST_EXP_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_60                         0x000000f0
#define   NFP_EMUX_DCT_i_DENALI_CTL_60_BIST_EXP_DATA(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_60_BIST_EXP_DATA_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_61 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_61                         0x000000f4
#define   NFP_EMUX_DCT_i_DENALI_CTL_61_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_61_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_62 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [63:32] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_62                         0x000000f8
#define   NFP_EMUX_DCT_i_DENALI_CTL_62_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_62_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_63 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [95:64] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_63                         0x000000fc
#define   NFP_EMUX_DCT_i_DENALI_CTL_63_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_63_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_64 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [127:96] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_64                         0x00000100
#define   NFP_EMUX_DCT_i_DENALI_CTL_64_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_64_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_65 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [159:128] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_65                         0x00000104
#define   NFP_EMUX_DCT_i_DENALI_CTL_65_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_65_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_66 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [191:160] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_66                         0x00000108
#define   NFP_EMUX_DCT_i_DENALI_CTL_66_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_66_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_67 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [223:192] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_67                         0x0000010c
#define   NFP_EMUX_DCT_i_DENALI_CTL_67_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_67_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_68 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [255:224] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_68                         0x00000110
#define   NFP_EMUX_DCT_i_DENALI_CTL_68_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_68_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_69 -
    Bits: 31:0  BIST_FAIL_DATA(ro) - Actual data on BIST error. This register is a continuation of DENALI_CTL_61, and contains bits [287:256] of BIST_FAIL_DATA. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_69                         0x00000114
#define   NFP_EMUX_DCT_i_DENALI_CTL_69_BIST_FAIL_DATA(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_69_BIST_FAIL_DATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_70 -
    Bits: 31:0  BIST_FAIL_ADDR(ro) - Address of BIST error. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_70                         0x00000118
#define   NFP_EMUX_DCT_i_DENALI_CTL_70_BIST_FAIL_ADDR(_x)    (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_70_BIST_FAIL_ADDR_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_71 -
    Bits: 25:24 ODT_RD_MAP_CS1(rw) - Determines which chip(s) will have termination when a read occurs on chip select 1. Set bit X to enable termination on csX when cs1 is performing a read.
    Bits: 17:16 ODT_WR_MAP_CS0(rw) - Determines which chip(s) will have termination when a write occurs on chip select 0. Set bit X to enable termination on csX when cs0 is performing a write.
    Bits:  9:8  ODT_RD_MAP_CS0(rw) - Determines which chip(s) will have termination when a read occurs on chip select 0. Set bit X to enable termination on csX when cs0 is performing a read.
    Bits:  2:0  BIST_FAIL_ADDR(ro) - Address of BIST error. This register is a continuation of DENALI_CTL_70, and contains bits [34:32] of BIST_FAIL_ADDR. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_71                         0x0000011c
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_ODT_RD_MAP_CS1(_x)    (((_x) & 0x3) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_ODT_RD_MAP_CS1_of(_x) (((_x) >> 24) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_ODT_WR_MAP_CS0(_x)    (((_x) & 0x3) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_ODT_WR_MAP_CS0_of(_x) (((_x) >> 16) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_ODT_RD_MAP_CS0(_x)    (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_ODT_RD_MAP_CS0_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_BIST_FAIL_ADDR(_x)    (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_71_BIST_FAIL_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_72 -
    Bits: 27:24 TODTH_RD(rw) - Defines the DRAM minimum ODT high time after an ODT assertion for a read command.
    Bits: 19:16 TODTH_WR(rw) - Defines the DRAM minimum ODT high time after an ODT assertion for a write command.
    Bits: 12:8  TODTL_2CMD(rw) - Defines the DRAM delay from an ODT de-assertion to the next non-write, non-read command.
    Bits:  1:0  ODT_WR_MAP_CS1(rw) - Determines which chip(s) will have termination when a write occurs on chip select 1. Set bit X to enable termination on csX when cs1 is performing a write.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_72                         0x00000120
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_TODTH_RD(_x)          (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_TODTH_RD_of(_x)       (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_TODTH_WR(_x)          (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_TODTH_WR_of(_x)       (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_TODTL_2CMD(_x)        (((_x) & 0x1f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_TODTL_2CMD_of(_x)     (((_x) >> 8) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_ODT_WR_MAP_CS1(_x)    (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_72_ODT_WR_MAP_CS1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_73 -
    Bits: 29:24 ADD_ODT_CLK_DIFFTYPE_DIFFCS(rw) - Additional delay to insert between different transaction types to different chip selects to meet ODT timing requirements.
    Bits: 19:16 ADD_ODT_CLK_W2R_SAMECS(rw) - Additional delay to insert between write and read transaction types to the same chip select to meet ODT timing requirements. Any value including 0x0 supported.
    Bits: 11:8  ADD_ODT_CLK_R2W_SAMECS(rw) - Additional delay to insert between read and write transaction types to the same chip select to meet ODT timing requirements.
    Bits:  0    ODT_EN(rw) - Enable support of DRAM ODT. When enabled, controller will assert and de-assert ODT output to DRAM as needed.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_73                         0x00000124
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ADD_ODT_CLK_DIFFTYPE_DIFFCS(_x) (((_x) & 0x3f) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ADD_ODT_CLK_DIFFTYPE_DIFFCS_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ADD_ODT_CLK_W2R_SAMECS(_x) (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ADD_ODT_CLK_W2R_SAMECS_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ADD_ODT_CLK_R2W_SAMECS(_x) (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ADD_ODT_CLK_R2W_SAMECS_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_73_ODT_EN                BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_74 -
    Bits: 26:24 W2R_DIFFCS_DLY(rw) - Additional delay to insert between writes and reads to different chip selects. Allowed programming dependent on memory system.
    Bits: 18:16 R2W_DIFFCS_DLY(rw) - Additional delay to insert between reads and writes to different chip selects. Program to a non-zero value.
    Bits: 10:8  R2R_DIFFCS_DLY(rw) - Additional delay to insert between reads to different chip selects. Program to a non-zero value.
    Bits:  3:0  ADD_ODT_CLK_SAMETYPE_DIFFCS(rw) - Additional delay to insert between same transaction types to different chip selects to meet ODT timing requirements.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_74                         0x00000128
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_W2R_DIFFCS_DLY(_x)    (((_x) & 0x7) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_W2R_DIFFCS_DLY_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_R2W_DIFFCS_DLY(_x)    (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_R2W_DIFFCS_DLY_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_R2R_DIFFCS_DLY(_x)    (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_R2R_DIFFCS_DLY_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_ADD_ODT_CLK_SAMETYPE_DIFFCS(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_74_ADD_ODT_CLK_SAMETYPE_DIFFCS_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_75 -
    Bits: 26:24 W2R_SAMECS_DLY(rw) - Additional delay to insert between writes and reads to the same chip select.
    Bits: 18:16 R2W_SAMECS_DLY(rw) - Additional delay to insert between reads and writes to the same chip select. Program to a non-zero value.
    Bits: 10:8  R2R_SAMECS_DLY(rw) - Additional delay to insert between two reads to the same chip select. Any value including 0x0 supported.
    Bits:  2:0  W2W_DIFFCS_DLY(rw) - Additional delay to insert between writes and writes to different chip selects. Program to a non-zero value.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_75                         0x0000012c
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_W2R_SAMECS_DLY(_x)    (((_x) & 0x7) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_W2R_SAMECS_DLY_of(_x) (((_x) >> 24) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_R2W_SAMECS_DLY(_x)    (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_R2W_SAMECS_DLY_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_R2R_SAMECS_DLY(_x)    (((_x) & 0x7) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_R2R_SAMECS_DLY_of(_x) (((_x) >> 8) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_W2W_DIFFCS_DLY(_x)    (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_75_W2W_DIFFCS_DLY_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_76 -
    Bits: 25:24 SW_LEVELING_MODE(rw) - Defines the leveling operation for software leveling. Set to 0 for none, set to 1 for write leveling, set to 2 for data eye training, or set to 3 for gate training.
    Bits: 20:16 OCD_ADJUST_PUP_CS_0(rw) - OCD pull-up adjust setting for DRAMs for chip select 0.
    Bits: 12:8  OCD_ADJUST_PDN_CS_0(rw) - OCD pull-down adjust setting for DRAMs for chip select 0.
    Bits:  2:0  W2W_SAMECS_DLY(rw) - Additional delay to insert between two writes to the same chip select. Any value including 0x0 supported.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_76                         0x00000130
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_SW_LEVELING_MODE(_x)  (((_x) & 0x3) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_SW_LEVELING_MODE_of(_x) (((_x) >> 24) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_OCD_ADJUST_PUP_CS_0(_x) (((_x) & 0x1f) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_OCD_ADJUST_PUP_CS_0_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_OCD_ADJUST_PDN_CS_0(_x) (((_x) & 0x1f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_OCD_ADJUST_PDN_CS_0_of(_x) (((_x) >> 8) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_W2W_SAMECS_DLY(_x)    (((_x) & 0x7) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_76_W2W_SAMECS_DLY_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_77 -
    Bits: 24    SWLVL_OP_DONE(ro) - Signals that software leveling is currently in progress. Value of 1 indicates operation complete. READ-ONLY
    Bits: 16    SWLVL_EXIT(wo) - User request to exit software leveling. Set to 1 to exit. WRITE-ONLY
    Bits:  8    SWLVL_START(wo) - User request to initiate software leveling of type in the SW_LEVELING_MODE parameter. Set to 1 to trigger. WRITE-ONLY
    Bits:  0    SWLVL_LOAD(wo) - User request to load delays and execute software leveling. Set to 1 to trigger. WRITE-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_77                         0x00000134
#define   NFP_EMUX_DCT_i_DENALI_CTL_77_SWLVL_OP_DONE         BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_77_SWLVL_EXIT            BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_77_SWLVL_START           BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_77_SWLVL_LOAD            BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_78 -
    Bits: 31:24 SWLVL_RESP_2(ro) - Leveling response for data slice 2. READ-ONLY
    Bits: 23:16 SWLVL_RESP_1(ro) - Leveling response for data slice 1. READ-ONLY
    Bits: 15:8  SWLVL_RESP_0(ro) - Leveling response for data slice 0. READ-ONLY
    Bits:  3:0  LVL_STATUS(ro) - Status of write level, data eye training, and gate training requests. This is used with the LVL_REQ interrupt. Bit (0) correlates to a write leveling request, bit (1) correlates to a data eye training request, bit (2) correlates to a gate training request, and bit (3) is reserved. Value of 1 indicates request received. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_78                         0x00000138
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_SWLVL_RESP_2(_x)      (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_SWLVL_RESP_2_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_SWLVL_RESP_1(_x)      (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_SWLVL_RESP_1_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_SWLVL_RESP_0(_x)      (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_SWLVL_RESP_0_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_LVL_STATUS(_x)        (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_78_LVL_STATUS_of(_x)     (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_79 -
    Bits: 31:24 SWLVL_RESP_6(ro) - Leveling response for data slice 6. READ-ONLY
    Bits: 23:16 SWLVL_RESP_5(ro) - Leveling response for data slice 5. READ-ONLY
    Bits: 15:8  SWLVL_RESP_4(ro) - Leveling response for data slice 4. READ-ONLY
    Bits:  7:0  SWLVL_RESP_3(ro) - Leveling response for data slice 3. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_79                         0x0000013c
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_6(_x)      (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_6_of(_x)   (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_5(_x)      (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_5_of(_x)   (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_4(_x)      (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_4_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_3(_x)      (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_79_SWLVL_RESP_3_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_80 -
    Bits: 24    WRLVL_CS(rw) - Specifies the target chip select for the write leveling operation initiated through the WRLVL_REQ parameter.
    Bits: 16    WRLVL_REQ(wo) - User request to initiate write leveling. Set to 1 to trigger. WRITE-ONLY
    Bits: 15:8  SWLVL_RESP_8(ro) - Leveling response for data slice 8. READ-ONLY
    Bits:  7:0  SWLVL_RESP_7(ro) - Leveling response for data slice 7. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_80                         0x00000140
#define   NFP_EMUX_DCT_i_DENALI_CTL_80_WRLVL_CS              BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_80_WRLVL_REQ             BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_80_SWLVL_RESP_8(_x)      (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_80_SWLVL_RESP_8_of(_x)   (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_80_SWLVL_RESP_7(_x)      (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_80_SWLVL_RESP_7_of(_x)   (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_81 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 16    WRLVL_EN(rw) - Enable the MC write leveling module. Set to 1 to enable.
    Bits: 13:8  WLMRD(rw) - Delay from issuing MRS to first write leveling strobe.
    Bits:  5:0  WLDQSEN(rw) - Delay from issuing MRS to first DQS strobe for write leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_81                         0x00000144
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_OBSOLETE3(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_OBSOLETE3_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_WRLVL_EN              BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_WLMRD(_x)             (((_x) & 0x3f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_WLMRD_of(_x)          (((_x) >> 8) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_WLDQSEN(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_81_WLDQSEN_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_82 -
    Bits: 31:16 OBSOLETE1(ro) - PADDING_BITS
    Bits: 15:0  WRLVL_INTERVAL(rw) - Number of long count sequences counted between automatic write leveling commands.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_82                         0x00000148
#define   NFP_EMUX_DCT_i_DENALI_CTL_82_OBSOLETE1(_x)         (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_82_OBSOLETE1_of(_x)      (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_82_WRLVL_INTERVAL(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_82_WRLVL_INTERVAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_83 -
    Bits: 24    WRLVL_REG_EN(rw) - Enable the dfi_wrlvl_delay_X signals to be programmed when hardware and software leveling are disabled. Set to 1 to enable.
    Bits: 19:0  WRLVL_ERROR_STATUS(ro) - Holds the error associated with the write level error interrupt. Uppermost bit set indicates a TDFI_WRLVL_RESP parameter violation. Next uppermost bit set indicates a TDFI_WRLVL_MAX parameter violation. Lower bits are reserved. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_83                         0x0000014c
#define   NFP_EMUX_DCT_i_DENALI_CTL_83_WRLVL_REG_EN          BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_83_WRLVL_ERROR_STATUS(_x) (((_x) & 0xfffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_83_WRLVL_ERROR_STATUS_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_84 -
    Bits: 31:16 WRLVL_DELAY_1(rw) - Number of delay elements for write data slice 1. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_0(rw) - Number of delay elements for write data slice 0. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_84                         0x00000150
#define   NFP_EMUX_DCT_i_DENALI_CTL_84_WRLVL_DELAY_1(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_84_WRLVL_DELAY_1_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_84_WRLVL_DELAY_0(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_84_WRLVL_DELAY_0_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_85 -
    Bits: 31:16 WRLVL_DELAY_3(rw) - Number of delay elements for write data slice 3. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_2(rw) - Number of delay elements for write data slice 2. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_85                         0x00000154
#define   NFP_EMUX_DCT_i_DENALI_CTL_85_WRLVL_DELAY_3(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_85_WRLVL_DELAY_3_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_85_WRLVL_DELAY_2(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_85_WRLVL_DELAY_2_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_86 -
    Bits: 31:16 WRLVL_DELAY_5(rw) - Number of delay elements for write data slice 5. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_4(rw) - Number of delay elements for write data slice 4. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_86                         0x00000158
#define   NFP_EMUX_DCT_i_DENALI_CTL_86_WRLVL_DELAY_5(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_86_WRLVL_DELAY_5_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_86_WRLVL_DELAY_4(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_86_WRLVL_DELAY_4_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_87 -
    Bits: 31:16 WRLVL_DELAY_7(rw) - Number of delay elements for write data slice 7. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
    Bits: 15:0  WRLVL_DELAY_6(rw) - Number of delay elements for write data slice 6. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_87                         0x0000015c
#define   NFP_EMUX_DCT_i_DENALI_CTL_87_WRLVL_DELAY_7(_x)     (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_87_WRLVL_DELAY_7_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_87_WRLVL_DELAY_6(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_87_WRLVL_DELAY_6_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_88 -
    Bits: 24    RDLVL_GATE_REQ(wo) - User request to initiate gate training. Set to 1 to trigger. WRITE-ONLY
    Bits: 16    RDLVL_REQ(wo) - User request to initiate data eye training. Set to 1 to trigger. WRITE-ONLY
    Bits: 15:0  WRLVL_DELAY_8(rw) - Number of delay elements for write data slice 8. This is read-only if the WRLVL_EN parameter is 1. If both the WRLVL_EN and the WRLVL_REG_EN parameters are 0, this can only be programmed during initialization or through software leveling. If the WRLVL_EN parameter is 0 and the WRLVL_REG_EN parameter is 1, this can be programmed at any time.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_88                         0x00000160
#define   NFP_EMUX_DCT_i_DENALI_CTL_88_RDLVL_GATE_REQ        BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_88_RDLVL_REQ             BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_88_WRLVL_DELAY_8(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_88_WRLVL_DELAY_8_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_89 -
    Bits: 24    RDLVL_REG_EN(rw) - Enable the dfi_rdlvl_delay_X signals to be programmed when hardware and software leveling are disabled. Set to 1 to enable.
    Bits: 16    RDLVL_BEGIN_DELAY_EN(rw) - Enable the data eye training logic to find the DQ data eye. Set to 1 to enable.
    Bits:  8    RDLVL_EDGE(rw) - Specifies the read DQS edge positive or negative to be used for the data eye training operation. Set to 1 for negative edge.
    Bits:  0    RDLVL_CS(rw) - Specifies the target chip select for the data eye training operation initiated through the RDLVL_REQ parameter or the gate training operation initiated through the RDLVL_GATE_REQ parameter.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_89                         0x00000164
#define   NFP_EMUX_DCT_i_DENALI_CTL_89_RDLVL_REG_EN          BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_89_RDLVL_BEGIN_DELAY_EN  BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_89_RDLVL_EDGE            BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_89_RDLVL_CS              BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_90 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_BEGIN_DELAY_0(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 0. READ-ONLY
    Bits:  0    RDLVL_GATE_REG_EN(rw) - Enable the dfi_rdlvl_gate_delay_X signals to be programmed when hardware and software leveling are disabled. Set to 1 to enable.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_90                         0x00000168
#define   NFP_EMUX_DCT_i_DENALI_CTL_90_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_90_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_90_RDLVL_BEGIN_DELAY_0(_x) (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_90_RDLVL_BEGIN_DELAY_0_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_90_RDLVL_GATE_REG_EN     BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_91 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_0(ro) - Calculated midpoint of DQ delay for data slice 0. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_0(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 0. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_91                         0x0000016c
#define   NFP_EMUX_DCT_i_DENALI_CTL_91_RDLVL_MIDPOINT_DELAY_0(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_91_RDLVL_MIDPOINT_DELAY_0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_91_RDLVL_END_DELAY_0(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_91_RDLVL_END_DELAY_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_92 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_0(rw) - Direction of the data eye midpoint delay offset for data slice 0. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_0(rw) - Offset the data eye midpoint delay for data slice 0.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_92                         0x00000170
#define   NFP_EMUX_DCT_i_DENALI_CTL_92_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_92_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_92_RDLVL_OFFSET_DIR_0    BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_92_RDLVL_OFFSET_DELAY_0(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_92_RDLVL_OFFSET_DELAY_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_93 -
    Bits: 31:16 RDLVL_GATE_DELAY_0(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 0. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_0(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 0. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_93                         0x00000174
#define   NFP_EMUX_DCT_i_DENALI_CTL_93_RDLVL_GATE_DELAY_0(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_93_RDLVL_GATE_DELAY_0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_93_RDLVL_DELAY_0(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_93_RDLVL_DELAY_0_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_94 -
    Bits: 31:16 RDLVL_END_DELAY_1(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 1. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_1(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 1. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_94                         0x00000178
#define   NFP_EMUX_DCT_i_DENALI_CTL_94_RDLVL_END_DELAY_1(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_94_RDLVL_END_DELAY_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_94_RDLVL_BEGIN_DELAY_1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_94_RDLVL_BEGIN_DELAY_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_95 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_1(rw) - Offset the data eye midpoint delay for data slice 1.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_1(ro) - Calculated midpoint of DQ delay for data slice 1. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_95                         0x0000017c
#define   NFP_EMUX_DCT_i_DENALI_CTL_95_RDLVL_OFFSET_DELAY_1(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_95_RDLVL_OFFSET_DELAY_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_95_RDLVL_MIDPOINT_DELAY_1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_95_RDLVL_MIDPOINT_DELAY_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_96 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_1(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 1. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_1(rw) - Direction of the data eye midpoint delay offset for data slice 1. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_96                         0x00000180
#define   NFP_EMUX_DCT_i_DENALI_CTL_96_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_96_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_96_RDLVL_DELAY_1(_x)     (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_96_RDLVL_DELAY_1_of(_x)  (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_96_RDLVL_OFFSET_DIR_1    BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_97 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_2(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 2. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_1(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 1. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_97                         0x00000184
#define   NFP_EMUX_DCT_i_DENALI_CTL_97_RDLVL_BEGIN_DELAY_2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_97_RDLVL_BEGIN_DELAY_2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_97_RDLVL_GATE_DELAY_1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_97_RDLVL_GATE_DELAY_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_98 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_2(ro) - Calculated midpoint of DQ delay for data slice 2. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_2(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 2. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_98                         0x00000188
#define   NFP_EMUX_DCT_i_DENALI_CTL_98_RDLVL_MIDPOINT_DELAY_2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_98_RDLVL_MIDPOINT_DELAY_2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_98_RDLVL_END_DELAY_2(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_98_RDLVL_END_DELAY_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_99 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_2(rw) - Direction of the data eye midpoint delay offset for data slice 2. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_2(rw) - Offset the data eye midpoint delay for data slice 2.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_99                         0x0000018c
#define   NFP_EMUX_DCT_i_DENALI_CTL_99_OBSOLETE2(_x)         (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_99_OBSOLETE2_of(_x)      (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_99_RDLVL_OFFSET_DIR_2    BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_99_RDLVL_OFFSET_DELAY_2(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_99_RDLVL_OFFSET_DELAY_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_100 -
    Bits: 31:16 RDLVL_GATE_DELAY_2(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 2. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_2(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 2. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_100                        0x00000190
#define   NFP_EMUX_DCT_i_DENALI_CTL_100_RDLVL_GATE_DELAY_2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_100_RDLVL_GATE_DELAY_2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_100_RDLVL_DELAY_2(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_100_RDLVL_DELAY_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_101 -
    Bits: 31:16 RDLVL_END_DELAY_3(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 3. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_3(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 3. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_101                        0x00000194
#define   NFP_EMUX_DCT_i_DENALI_CTL_101_RDLVL_END_DELAY_3(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_101_RDLVL_END_DELAY_3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_101_RDLVL_BEGIN_DELAY_3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_101_RDLVL_BEGIN_DELAY_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_102 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_3(rw) - Offset the data eye midpoint delay for data slice 3.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_3(ro) - Calculated midpoint of DQ delay for data slice 3. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_102                        0x00000198
#define   NFP_EMUX_DCT_i_DENALI_CTL_102_RDLVL_OFFSET_DELAY_3(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_102_RDLVL_OFFSET_DELAY_3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_102_RDLVL_MIDPOINT_DELAY_3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_102_RDLVL_MIDPOINT_DELAY_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_103 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_3(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 3. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_3(rw) - Direction of the data eye midpoint delay offset for data slice 3. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_103                        0x0000019c
#define   NFP_EMUX_DCT_i_DENALI_CTL_103_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_103_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_103_RDLVL_DELAY_3(_x)    (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_103_RDLVL_DELAY_3_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_103_RDLVL_OFFSET_DIR_3   BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_104 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_4(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 4. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_3(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 3. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_104                        0x000001a0
#define   NFP_EMUX_DCT_i_DENALI_CTL_104_RDLVL_BEGIN_DELAY_4(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_104_RDLVL_BEGIN_DELAY_4_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_104_RDLVL_GATE_DELAY_3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_104_RDLVL_GATE_DELAY_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_105 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_4(ro) - Calculated midpoint of DQ delay for data slice 4. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_4(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 4. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_105                        0x000001a4
#define   NFP_EMUX_DCT_i_DENALI_CTL_105_RDLVL_MIDPOINT_DELAY_4(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_105_RDLVL_MIDPOINT_DELAY_4_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_105_RDLVL_END_DELAY_4(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_105_RDLVL_END_DELAY_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_106 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_4(rw) - Direction of the data eye midpoint delay offset for data slice 4. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_4(rw) - Offset the data eye midpoint delay for data slice 4.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_106                        0x000001a8
#define   NFP_EMUX_DCT_i_DENALI_CTL_106_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_106_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_106_RDLVL_OFFSET_DIR_4   BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_106_RDLVL_OFFSET_DELAY_4(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_106_RDLVL_OFFSET_DELAY_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_107 -
    Bits: 31:16 RDLVL_GATE_DELAY_4(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 4. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_4(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 4. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_107                        0x000001ac
#define   NFP_EMUX_DCT_i_DENALI_CTL_107_RDLVL_GATE_DELAY_4(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_107_RDLVL_GATE_DELAY_4_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_107_RDLVL_DELAY_4(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_107_RDLVL_DELAY_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_108 -
    Bits: 31:16 RDLVL_END_DELAY_5(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 5. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_5(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 5. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_108                        0x000001b0
#define   NFP_EMUX_DCT_i_DENALI_CTL_108_RDLVL_END_DELAY_5(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_108_RDLVL_END_DELAY_5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_108_RDLVL_BEGIN_DELAY_5(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_108_RDLVL_BEGIN_DELAY_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_109 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_5(rw) - Offset the data eye midpoint delay for data slice 5.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_5(ro) - Calculated midpoint of DQ delay for data slice 5. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_109                        0x000001b4
#define   NFP_EMUX_DCT_i_DENALI_CTL_109_RDLVL_OFFSET_DELAY_5(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_109_RDLVL_OFFSET_DELAY_5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_109_RDLVL_MIDPOINT_DELAY_5(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_109_RDLVL_MIDPOINT_DELAY_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_110 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_5(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 5. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_5(rw) - Direction of the data eye midpoint delay offset for data slice 5. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_110                        0x000001b8
#define   NFP_EMUX_DCT_i_DENALI_CTL_110_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_110_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_110_RDLVL_DELAY_5(_x)    (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_110_RDLVL_DELAY_5_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_110_RDLVL_OFFSET_DIR_5   BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_111 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_6(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 6. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_5(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 5. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_111                        0x000001bc
#define   NFP_EMUX_DCT_i_DENALI_CTL_111_RDLVL_BEGIN_DELAY_6(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_111_RDLVL_BEGIN_DELAY_6_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_111_RDLVL_GATE_DELAY_5(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_111_RDLVL_GATE_DELAY_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_112 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_6(ro) - Calculated midpoint of DQ delay for data slice 6. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_6(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 6. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_112                        0x000001c0
#define   NFP_EMUX_DCT_i_DENALI_CTL_112_RDLVL_MIDPOINT_DELAY_6(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_112_RDLVL_MIDPOINT_DELAY_6_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_112_RDLVL_END_DELAY_6(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_112_RDLVL_END_DELAY_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_113 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_6(rw) - Direction of the data eye midpoint delay offset for data slice 6. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_6(rw) - Offset the data eye midpoint delay for data slice 6.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_113                        0x000001c4
#define   NFP_EMUX_DCT_i_DENALI_CTL_113_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_113_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_113_RDLVL_OFFSET_DIR_6   BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_113_RDLVL_OFFSET_DELAY_6(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_113_RDLVL_OFFSET_DELAY_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_114 -
    Bits: 31:16 RDLVL_GATE_DELAY_6(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 6. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_6(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 6. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_114                        0x000001c8
#define   NFP_EMUX_DCT_i_DENALI_CTL_114_RDLVL_GATE_DELAY_6(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_114_RDLVL_GATE_DELAY_6_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_114_RDLVL_DELAY_6(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_114_RDLVL_DELAY_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_115 -
    Bits: 31:16 RDLVL_END_DELAY_7(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 7. READ-ONLY
    Bits: 15:0  RDLVL_BEGIN_DELAY_7(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 7. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_115                        0x000001cc
#define   NFP_EMUX_DCT_i_DENALI_CTL_115_RDLVL_END_DELAY_7(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_115_RDLVL_END_DELAY_7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_115_RDLVL_BEGIN_DELAY_7(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_115_RDLVL_BEGIN_DELAY_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_116 -
    Bits: 31:16 RDLVL_OFFSET_DELAY_7(rw) - Offset the data eye midpoint delay for data slice 7.
    Bits: 15:0  RDLVL_MIDPOINT_DELAY_7(ro) - Calculated midpoint of DQ delay for data slice 7. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_116                        0x000001d0
#define   NFP_EMUX_DCT_i_DENALI_CTL_116_RDLVL_OFFSET_DELAY_7(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_116_RDLVL_OFFSET_DELAY_7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_116_RDLVL_MIDPOINT_DELAY_7(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_116_RDLVL_MIDPOINT_DELAY_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_117 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_DELAY_7(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 7. This can only be programmed during initialization or through software leveling.
    Bits:  0    RDLVL_OFFSET_DIR_7(rw) - Direction of the data eye midpoint delay offset for data slice 7. Set to 1 to add delay.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_117                        0x000001d4
#define   NFP_EMUX_DCT_i_DENALI_CTL_117_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_117_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_117_RDLVL_DELAY_7(_x)    (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_117_RDLVL_DELAY_7_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_117_RDLVL_OFFSET_DIR_7   BIT(0)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_118 -
    Bits: 31:16 RDLVL_BEGIN_DELAY_8(ro) - Number of delay elements for first 1 to 0 DQ transition for data slice 8. READ-ONLY
    Bits: 15:0  RDLVL_GATE_DELAY_7(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 7. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_118                        0x000001d8
#define   NFP_EMUX_DCT_i_DENALI_CTL_118_RDLVL_BEGIN_DELAY_8(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_118_RDLVL_BEGIN_DELAY_8_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_118_RDLVL_GATE_DELAY_7(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_118_RDLVL_GATE_DELAY_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_119 -
    Bits: 31:16 RDLVL_MIDPOINT_DELAY_8(ro) - Calculated midpoint of DQ delay for data slice 8. READ-ONLY
    Bits: 15:0  RDLVL_END_DELAY_8(ro) - Number of delay elements for first 0 to 1 DQ transition for data slice 8. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_119                        0x000001dc
#define   NFP_EMUX_DCT_i_DENALI_CTL_119_RDLVL_MIDPOINT_DELAY_8(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_119_RDLVL_MIDPOINT_DELAY_8_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_119_RDLVL_END_DELAY_8(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_119_RDLVL_END_DELAY_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_120 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 16    RDLVL_OFFSET_DIR_8(rw) - Direction of the data eye midpoint delay offset for data slice 8. Set to 1 to add delay.
    Bits: 15:0  RDLVL_OFFSET_DELAY_8(rw) - Offset the data eye midpoint delay for data slice 8.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_120                        0x000001e0
#define   NFP_EMUX_DCT_i_DENALI_CTL_120_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_120_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_120_RDLVL_OFFSET_DIR_8   BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_120_RDLVL_OFFSET_DELAY_8(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_120_RDLVL_OFFSET_DELAY_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_121 -
    Bits: 31:16 RDLVL_GATE_DELAY_8(rw) - Number of delay elements where gate is aligned to rising edge of DQS for data slice 8. This can only be programmed during initialization or through software leveling.
    Bits: 15:0  RDLVL_DELAY_8(rw) - Number of delay elements where read DQS is placed within the DQ data eye for data slice 8. This can only be programmed during initialization or through software leveling.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_121                        0x000001e4
#define   NFP_EMUX_DCT_i_DENALI_CTL_121_RDLVL_GATE_DELAY_8(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_121_RDLVL_GATE_DELAY_8_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_121_RDLVL_DELAY_8(_x)    (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_121_RDLVL_DELAY_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_122 -
    Bits: 31:16 DLL_RST_DELAY(rw) - Minimum cycles required for DLL reset signal dll_rst_n to be held. If this signal is not being used by the PHY, this parameter may be ignored.
    Bits:  8    MEM_RST_VALID(ro) - Register access to mem_rst_valid signal. READ-ONLY
    Bits:  1:0  CKE_STATUS(ro) - Register access to cke_status signal. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_122                        0x000001e8
#define   NFP_EMUX_DCT_i_DENALI_CTL_122_DLL_RST_DELAY(_x)    (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_122_DLL_RST_DELAY_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_122_MEM_RST_VALID        BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_122_CKE_STATUS(_x)       (((_x) & 0x3) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_122_CKE_STATUS_of(_x)    (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_123 -
    Bits: 30:24 TDFI_PHY_RDLAT(rw) - Defines the DFI tPHY_RDLAT timing parameter (in DFI PHY clocks), the maximum cycles between a dfi_rddata_en assertion and a dfi_rddata_valid assertion.
    Bits: 22:16 UPDATE_ERROR_STATUS(ro) - Identifies the source of any DFI MC-initiated or PHY-initiated update errors. Value of 1 indicates a timing violation of the associated timing parameter. READ-ONLY
    Bits: 14:8  TDFI_PHY_WRLAT(ro) - Holds the calculated DFI tPHY_WRLAT timing parameter (in DFI PHY clocks), the maximum cycles between a write command and a dfi_wrdata_en assertion. READ-ONLY
    Bits:  7:0  DLL_RST_ADJ_DLY(rw) - Minimum cycles after setting master delay in DLL until the DLL reset signal dll_rst_n may be asserted. If this signal is not being used by the PHY, this parameter may be ignored.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_123                        0x000001ec
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_TDFI_PHY_RDLAT(_x)   (((_x) & 0x7f) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_TDFI_PHY_RDLAT_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_UPDATE_ERROR_STATUS(_x) (((_x) & 0x7f) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_UPDATE_ERROR_STATUS_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_TDFI_PHY_WRLAT(_x)   (((_x) & 0x7f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_TDFI_PHY_WRLAT_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_DLL_RST_ADJ_DLY(_x)  (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_123_DLL_RST_ADJ_DLY_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_124 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 19:16 TDFI_CTRLUPD_MIN(ro) - Reports the DFI tCTRLUPD_MIN timing parameter (in DFI clocks), the minimum cycles that dfi_ctrlupd_req must be asserted. READ-ONLY
    Bits:  9:8  DRAM_CLK_DISABLE(rw) - Set value for the dfi_dram_clk_disable signal. Bit (0) controls cs0, bit (1) controls cs1, etc. Set each bit to 1 to disable.
    Bits:  6:0  TDFI_RDDATA_EN(ro) - Holds the calculated DFI tRDDATA_EN timing parameter (in DFI PHY clocks), the maximum cycles between a read command and a dfi_rddata_en assertion. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_124                        0x000001f0
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_OBSOLETE3(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_OBSOLETE3_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_TDFI_CTRLUPD_MIN(_x) (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_TDFI_CTRLUPD_MIN_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_DRAM_CLK_DISABLE(_x) (((_x) & 0x3) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_DRAM_CLK_DISABLE_of(_x) (((_x) >> 8) & 0x3)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_TDFI_RDDATA_EN(_x)   (((_x) & 0x7f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_124_TDFI_RDDATA_EN_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_125 -
    Bits: 31:16 TDFI_PHYUPD_TYPE0(rw) - Defines the DFI tPHYUPD_TYPE0 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 0. If programmed to a non-zero, a timing violation will cause an interrupt and bit (2) set in the UPDATE_ERROR_STATUS parameter.
    Bits: 13:0  TDFI_CTRLUPD_MAX(rw) - Defines the DFI tCTRLUPD_MAX timing parameter (in DFI clocks), the maximum cycles that dfi_ctrlupd_req can be asserted. If programmed to a non-zero, a timing violation will cause an interrupt and bit (1) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_125                        0x000001f4
#define   NFP_EMUX_DCT_i_DENALI_CTL_125_TDFI_PHYUPD_TYPE0(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_125_TDFI_PHYUPD_TYPE0_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_125_TDFI_CTRLUPD_MAX(_x) (((_x) & 0x3fff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_125_TDFI_CTRLUPD_MAX_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_126 -
    Bits: 31:16 TDFI_PHYUPD_TYPE2(rw) - Defines the DFI tPHYUPD_TYPE2 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 2. If programmed to a non-zero, a timing violation will cause an interrupt and bit (4) set in the UPDATE_ERROR_STATUS parameter.
    Bits: 15:0  TDFI_PHYUPD_TYPE1(rw) - Defines the DFI tPHYUPD_TYPE1 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 1. If programmed to a non-zero, a timing violation will cause an interrupt and bit (3) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_126                        0x000001f8
#define   NFP_EMUX_DCT_i_DENALI_CTL_126_TDFI_PHYUPD_TYPE2(_x) (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_126_TDFI_PHYUPD_TYPE2_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_126_TDFI_PHYUPD_TYPE1(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_126_TDFI_PHYUPD_TYPE1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_127 -
    Bits: 29:16 TDFI_PHYUPD_RESP(rw) - Defines the DFI tPHYUPD_RESP timing parameter (in DFI clocks), the maximum cycles between a dfi_phyupd_req assertion and a dfi_phyupd_ack assertion. If programmed to a non-zero, a timing violation will cause an interrupt and bit (6) set in the UPDATE_ERROR_STATUS parameter.
    Bits: 15:0  TDFI_PHYUPD_TYPE3(rw) - Defines the DFI tPHYUPD_TYPE3 timing parameter (in DFI clocks), the maximum cycles that dfi_phyupd_req can assert after dfi_phyupd_ack for dfi_phyupd_type 3. If programmed to a non-zero, a timing violation will cause an interrupt and bit (5) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_127                        0x000001fc
#define   NFP_EMUX_DCT_i_DENALI_CTL_127_TDFI_PHYUPD_RESP(_x) (((_x) & 0x3fff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_127_TDFI_PHYUPD_RESP_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_127_TDFI_PHYUPD_TYPE3(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_127_TDFI_PHYUPD_TYPE3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_128 -
    Bits: 31:0  TDFI_CTRLUPD_INTERVAL(rw) - Defines the DFI tCTRLUPD_INTERVAL timing parameter (in DFI clocks), the maximum cycles between dfi_ctrlupd_req assertions. If programmed to a non-zero, a timing violation will cause an interrupt and bit (0) set in the UPDATE_ERROR_STATUS parameter.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_128                        0x00000200
#define   NFP_EMUX_DCT_i_DENALI_CTL_128_TDFI_CTRLUPD_INTERVAL(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_128_TDFI_CTRLUPD_INTERVAL_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_129 -
    Bits: 27:24 TDFI_DRAM_CLK_DISABLE(rw) - Defines the DFI tDRAM_CLK_DISABLE timing parameter (in DFI clocks), the delay between a dfi_dram_clock_disable assertion and the memory clock disable.
    Bits: 19:16 TDFI_CTRL_DELAY(rw) - Defines the DFI tCTRL_DELAY timing parameter (in DFI clocks), the delay between a DFI command change and a memory command.
    Bits: 14:8  WRLAT_ADJ(rw) - Adjustment value for PHY write timing.
    Bits:  6:0  RDLAT_ADJ(rw) - Adjustment value for PHY read timing.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_129                        0x00000204
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_TDFI_DRAM_CLK_DISABLE(_x) (((_x) & 0xf) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_TDFI_DRAM_CLK_DISABLE_of(_x) (((_x) >> 24) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_TDFI_CTRL_DELAY(_x)  (((_x) & 0xf) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_TDFI_CTRL_DELAY_of(_x) (((_x) >> 16) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_WRLAT_ADJ(_x)        (((_x) & 0x7f) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_WRLAT_ADJ_of(_x)     (((_x) >> 8) & 0x7f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_RDLAT_ADJ(_x)        (((_x) & 0x7f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_129_RDLAT_ADJ_of(_x)     (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_130 -
    Bits: 25:16 TDFI_WRLVL_WW(rw) - Defines the DFI tWRLVL_WW timing parameter (in DFI clocks), the minimum cycles between dfi_wrlvl_strobe assertions.
    Bits: 15:8  TDFI_WRLVL_EN(rw) - Defines the DFI tWRLVL_EN timing parameter (in DFI clocks), the minimum cycles from a dfi_wrlvl_en assertion to the first dfi_wrlvl_strobe assertion.
    Bits:  3:0  TDFI_DRAM_CLK_ENABLE(rw) - Defines the DFI tDRAM_CLK_ENABLE timing parameter (in DFI clocks), the delay between a dfi_dram_clk_disable de-assertion and the memory clock enable.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_130                        0x00000208
#define   NFP_EMUX_DCT_i_DENALI_CTL_130_TDFI_WRLVL_WW(_x)    (((_x) & 0x3ff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_130_TDFI_WRLVL_WW_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_130_TDFI_WRLVL_EN(_x)    (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_130_TDFI_WRLVL_EN_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_130_TDFI_DRAM_CLK_ENABLE(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_130_TDFI_DRAM_CLK_ENABLE_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_131 -
    Bits: 31:0  TDFI_WRLVL_RESP(rw) - Defines the DFI tWRLVL_RESP timing parameter (in DFI clocks), the maximum cycles between a dfi_wrlvl_req assertion and a dfi_wrlvl_en assertion.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_131                        0x0000020c
#define   NFP_EMUX_DCT_i_DENALI_CTL_131_TDFI_WRLVL_RESP(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_131_TDFI_WRLVL_RESP_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_132 -
    Bits: 31:0  TDFI_WRLVL_MAX(rw) - Defines the DFI tWRLVL_MAX timing parameter (in DFI clocks), the maximum cycles between a dfi_wrlvl_en assertion and a valid dfi_wrlvl_resp.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_132                        0x00000210
#define   NFP_EMUX_DCT_i_DENALI_CTL_132_TDFI_WRLVL_MAX(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_132_TDFI_WRLVL_MAX_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_133 -
    Bits: 31:24 TDFI_WRLVL_RESPLAT(rw) - Defines the DFI tWRLVL_RESPLAT timing parameter (in DFI clocks), the number of cycles between a dfi_wrlvl_strobe assertion and a valid dfi_wrlvl_resp.
    Bits: 23:16 TDFI_WRLVL_DLL(rw) - Defines the DFI tWRLVL_DLL timing parameter (in DFI clocks), the minimum cycles between a dfi_wrlvl_load assertion and a dfi_wrlvl_strobe assertion.
    Bits: 15:0  DFI_WRLVL_MAX_DELAY(rw) - Maximum number of elements for the write level delay line.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_133                        0x00000214
#define   NFP_EMUX_DCT_i_DENALI_CTL_133_TDFI_WRLVL_RESPLAT(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_133_TDFI_WRLVL_RESPLAT_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_133_TDFI_WRLVL_DLL(_x)   (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_133_TDFI_WRLVL_DLL_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_133_DFI_WRLVL_MAX_DELAY(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_133_DFI_WRLVL_MAX_DELAY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_134 -
    Bits: 31:24 TDFI_RDLVL_LOAD(rw) - Defines the DFI tRDLVL_LOAD timing parameter (in DFI clocks), the minimum cycles between dfi_rdlvl_delay_X or dfi_rdlvl_gate_delay_X programming and a dfi_rdlvl_load assertion.
    Bits: 23:16 TDFI_RDLVL_DLL(rw) - Defines the DFI tRDLVL_DLL timing parameter (in DFI clocks), the minimum cycles between a dfi_rdlvl_load assertion and a read or mode register read.
    Bits: 15:8  TDFI_RDLVL_EN(rw) - Defines the DFI tRDLVL_EN timing parameter (in DFI clocks), the minimum cycles from a dfi_rdlvl_en or dfi_rdlvl_gate_en assertion to the first read or MRR.
    Bits:  7:0  TDFI_WRLVL_LOAD(rw) - Defines the DFI tWRLVL_LOAD timing parameter (in DFI clocks), the minimum cycles between dfi_wrlvl_delay_X programming and a dfi_wrlvl_load assertion.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_134                        0x00000218
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_RDLVL_LOAD(_x)  (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_RDLVL_LOAD_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_RDLVL_DLL(_x)   (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_RDLVL_DLL_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_RDLVL_EN(_x)    (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_RDLVL_EN_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_WRLVL_LOAD(_x)  (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_134_TDFI_WRLVL_LOAD_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_135 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_MAX_DELAY(rw) - Maximum number of elements for the data eye training delay line.
    Bits:  7:0  TDFI_RDLVL_RESPLAT(rw) - Defines the DFI tRDLVL_RESPLAT timing parameter (in DFI clocks), the maximum cycles between a read or mode register read and a valid dfi_rdlvl_resp.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_135                        0x0000021c
#define   NFP_EMUX_DCT_i_DENALI_CTL_135_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_135_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_135_RDLVL_MAX_DELAY(_x)  (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_135_RDLVL_MAX_DELAY_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_135_TDFI_RDLVL_RESPLAT(_x) (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_135_TDFI_RDLVL_RESPLAT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_136 -
    Bits: 25:16 TDFI_RDLVL_RR(rw) - Defines the DFI tRDLVL_RR timing parameter (in DFI clocks), the minimum cycles between read commands.
    Bits: 15:0  RDLVL_GATE_MAX_DELAY(rw) - Maximum number of elements for the gate delay.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_136                        0x00000220
#define   NFP_EMUX_DCT_i_DENALI_CTL_136_TDFI_RDLVL_RR(_x)    (((_x) & 0x3ff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_136_TDFI_RDLVL_RR_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_136_RDLVL_GATE_MAX_DELAY(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_136_RDLVL_GATE_MAX_DELAY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_137 -
    Bits: 31:0  TDFI_RDLVL_RESP(rw) - Defines the DFI tRDLVL_RESP timing parameter (in DFI clocks), the maximum cycles between a dfi_rdlvl_req or dfi_rdlvl_gate_req assertion and a dfi_rdlvl_en or dfi_rdlvl_gate_en assertion.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_137                        0x00000224
#define   NFP_EMUX_DCT_i_DENALI_CTL_137_TDFI_RDLVL_RESP(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_137_TDFI_RDLVL_RESP_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_138 -
    Bits: 31:0  RDLVL_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during data eye training.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_138                        0x00000228
#define   NFP_EMUX_DCT_i_DENALI_CTL_138_RDLVL_RESP_MASK(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_138_RDLVL_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_139 -
    Bits: 31:0  RDLVL_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during data eye training. This bit field is a continuation of the DENALI_CTL_138 register, and contains bits [63:32] of RDLVL_RESP_MASK.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_139                        0x0000022c
#define   NFP_EMUX_DCT_i_DENALI_CTL_139_RDLVL_RESP_MASK(_x)  (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_139_RDLVL_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_140 -
    Bits: 31:8  OBSOLETE1(ro) - PADDING_BITS
    Bits:  7:0  RDLVL_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during data eye training. This bit field is a continuation of the DENALI_CTL_138 register, and contains bits [71:64] of RDLVL_RESP_MASK.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_140                        0x00000230
#define   NFP_EMUX_DCT_i_DENALI_CTL_140_OBSOLETE1(_x)        (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_140_OBSOLETE1_of(_x)     (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_140_RDLVL_RESP_MASK(_x)  (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_140_RDLVL_RESP_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_141 -
    Bits: 31:0  RDLVL_GATE_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during gate training.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_141                        0x00000234
#define   NFP_EMUX_DCT_i_DENALI_CTL_141_RDLVL_GATE_RESP_MASK(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_141_RDLVL_GATE_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_142 -
    Bits: 31:0  RDLVL_GATE_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during gate training. This bit field is a continuation of the DENALI_CTL_141 register, and contains bits [63:32] of RDLVL_GATE_RESP_MASK.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_142                        0x00000238
#define   NFP_EMUX_DCT_i_DENALI_CTL_142_RDLVL_GATE_RESP_MASK(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_142_RDLVL_GATE_RESP_MASK_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_143 -
    Bits: 24    RDLVL_GATE_PREAMBLE_CHECK_EN(rw) - Enable the preamble check sequence during initial gate training. Set to 1 to enable.
    Bits: 16    RDLVL_GATE_EN(rw) - Enable the MC gate training module. Set to 1 to enable.
    Bits:  8    RDLVL_EN(rw) - Enable the MC data eye training module. Set to 1 to enable.
    Bits:  7:0  RDLVL_GATE_RESP_MASK(rw) - Mask for the dfi_rdlvl_resp signal during gate training. This bit field is a continuation of the DENALI_CTL_141 register, and contains bits [71:64] of RDLVL_GATE_RESP_MASK.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_143                        0x0000023c
#define   NFP_EMUX_DCT_i_DENALI_CTL_143_RDLVL_GATE_PREAMBLE_CHECK_EN BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_143_RDLVL_GATE_EN        BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_143_RDLVL_EN             BIT(8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_143_RDLVL_GATE_RESP_MASK(_x) (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_143_RDLVL_GATE_RESP_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_144 -
    Bits: 31:0  TDFI_RDLVL_MAX(rw) - Defines the DFI tRDLVL_MAX timing parameter (in DFI clocks), the maximum cycles between a dfi_rdlvl_en or dfi_rdlvl_gate_en assertion and a valid dfi_rdlvl_resp.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_144                        0x00000240
#define   NFP_EMUX_DCT_i_DENALI_CTL_144_TDFI_RDLVL_MAX(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_144_TDFI_RDLVL_MAX_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_145 -
    Bits: 31:16 OBSOLETE2(ro) - PADDING_BITS
    Bits: 11:8  RDLVL_GATE_DQ_0_COUNT(rw) - Number of consecutive 0s that defines a 1 to 0 transition for gate training.
    Bits:  3:0  RDLVL_DQ_0_COUNT(rw) - Number of consecutive 0s that defines a 1 to 0 transition for data eye training.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_145                        0x00000244
#define   NFP_EMUX_DCT_i_DENALI_CTL_145_OBSOLETE2(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_145_OBSOLETE2_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_145_RDLVL_GATE_DQ_0_COUNT(_x) (((_x) & 0xf) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_145_RDLVL_GATE_DQ_0_COUNT_of(_x) (((_x) >> 8) & 0xf)
#define   NFP_EMUX_DCT_i_DENALI_CTL_145_RDLVL_DQ_0_COUNT(_x) (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_145_RDLVL_DQ_0_COUNT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_146 -
    Bits: 31:0  RDLVL_ERROR_STATUS(ro) - Holds the error associated with the data eye training error or gate training error interrupt. Uppermost bit set indicates a TDFI_RDLVL_RESP parameter violation. Next uppermost bit set indicates a TDFI_RDLVL_MAX parameter violation. Lower bits are reserved. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_146                        0x00000248
#define   NFP_EMUX_DCT_i_DENALI_CTL_146_RDLVL_ERROR_STATUS(_x) (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_146_RDLVL_ERROR_STATUS_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_147 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 23:8  RDLVL_INTERVAL(rw) - Number of long count sequences counted between automatic data eye training commands.
    Bits:  5:0  RDLVL_ERROR_STATUS(ro) - Holds the error associated with the data eye training error or gate training error interrupt. Uppermost bit set indicates a TDFI_RDLVL_RESP parameter violation. Next uppermost bit set indicates a TDFI_RDLVL_MAX parameter violation. Lower bits are reserved. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_147                        0x0000024c
#define   NFP_EMUX_DCT_i_DENALI_CTL_147_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_147_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_147_RDLVL_INTERVAL(_x)   (((_x) & 0xffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_147_RDLVL_INTERVAL_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_147_RDLVL_ERROR_STATUS(_x) (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_147_RDLVL_ERROR_STATUS_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_148 -
    Bits: 31:24 READ_DATA_FIFO_DEPTH(ro) - Reports the depth of the controller core read data queue. READ-ONLY
    Bits: 18:16 TDFI_PHY_WRDATA(rw) - Defines the DFI tPHY_WRDATA timing parameter (in DFI PHY clocks), the maximum cycles between a dfi_wrdata_en assertion and a dfi_wrdata signal.
    Bits: 15:0  RDLVL_GATE_INTERVAL(rw) - Number of long count sequences counted between automatic gate training commands.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_148                        0x00000250
#define   NFP_EMUX_DCT_i_DENALI_CTL_148_READ_DATA_FIFO_DEPTH(_x) (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_148_READ_DATA_FIFO_DEPTH_of(_x) (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_148_TDFI_PHY_WRDATA(_x)  (((_x) & 0x7) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_148_TDFI_PHY_WRDATA_of(_x) (((_x) >> 16) & 0x7)
#define   NFP_EMUX_DCT_i_DENALI_CTL_148_RDLVL_GATE_INTERVAL(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_148_RDLVL_GATE_INTERVAL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_149 -
    Bits: 31:24 OBSOLETE3(ro) - PADDING_BITS
    Bits: 23:16 WRITE_DATA_FIFO_PTR_WIDTH(ro) - Reports the width of the controller core write data latency queue pointer. READ-ONLY
    Bits: 15:8  WRITE_DATA_FIFO_DEPTH(ro) - Reports the depth of the controller core write data latency queue. READ-ONLY
    Bits:  7:0  READ_DATA_FIFO_PTR_WIDTH(ro) - Reports the width of the controller core read data queue pointer. READ-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_149                        0x00000254
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_OBSOLETE3(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_OBSOLETE3_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_WRITE_DATA_FIFO_PTR_WIDTH(_x) (((_x) & 0xff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_WRITE_DATA_FIFO_PTR_WIDTH_of(_x) (((_x) >> 16) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_WRITE_DATA_FIFO_DEPTH(_x) (((_x) & 0xff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_WRITE_DATA_FIFO_DEPTH_of(_x) (((_x) >> 8) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_READ_DATA_FIFO_PTR_WIDTH(_x) (((_x) & 0xff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_149_READ_DATA_FIFO_PTR_WIDTH_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_150 -
    Bits: 31:0  ZQ_INTERVAL(rw) - Number of long count sequences allowed between automatic ZQCS commands.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_150                        0x00000258
#define   NFP_EMUX_DCT_i_DENALI_CTL_150_ZQ_INTERVAL(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_150_ZQ_INTERVAL_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_151 -
    Bits: 31:16 OBSOLETE1(ro) - PADDING_BITS
    Bits:  8:0  RESERVED0(rw) - Reserved for future use. Must be cleared to 0x0.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_151                        0x0000025c
#define   NFP_EMUX_DCT_i_DENALI_CTL_151_OBSOLETE1(_x)        (((_x) & 0xffff) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_151_OBSOLETE1_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_151_RESERVED0(_x)        (((_x) & 0x1ff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_151_RESERVED0_of(_x)     (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_152 -
    Bits: 31:0  RDIMM_CTL_0(rw) - RDIMM control word values for DIMM 0. Bits (3:0) correlate to control word 0, bits (7:4) correlate to control word 1, etc.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_152                        0x00000260
#define   NFP_EMUX_DCT_i_DENALI_CTL_152_RDIMM_CTL_0(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_152_RDIMM_CTL_0_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_153 -
    Bits: 31:0  RDIMM_CTL_0(rw) - RDIMM control word values for DIMM 0. Bits (3:0) correlate to control word 0, bits (7:4) correlate to control word 1, etc. This register is a continuation of DENALI_CTL_152, and contains bits [63:32] of RDIMM_CTL_0.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_153                        0x00000264
#define   NFP_EMUX_DCT_i_DENALI_CTL_153_RDIMM_CTL_0(_x)      (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_153_RDIMM_CTL_0_of(_x)   (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_154 -
    Bits: 24    RDIMM_CW_HOLD_CKE_EN(rw) - Defines if the CKE value will be held or asserted for all DDR3 RDIMM control word accesses. Set to 1 to hold current value.
    Bits: 16    RDIMM_CWW_REQ(wo) - Triggers a control word write to all DIMMs specified in the RDIMM_CW_MAP parameter with the values in the RDIMM_CTL_X parameter(s). Ignored during initialization because an automatic control word write happens during initialization. WRITE-ONLY
    Bits: 15:0  RDIMM_CW_MAP(rw) - Defines which RDIMM control words will be updated during initialization. Bit (0) correlates to control word 0, bit (1) correlates to control word 1, etc. Set each bit to 1 to write.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_154                        0x00000268
#define   NFP_EMUX_DCT_i_DENALI_CTL_154_RDIMM_CW_HOLD_CKE_EN BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_154_RDIMM_CWW_REQ        BIT(16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_154_RDIMM_CW_MAP(_x)     (((_x) & 0xffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_154_RDIMM_CW_MAP_of(_x)  (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_155 -
    Bits: 31:8  RDIMM_TSTAB(rw) - Defines the TSTAB value in cycles for the registered DIMM. This is the delay required from a control word write to CW2 or CW10 to another control word write or to a DRAM access.
    Bits:  3:0  RDIMM_TMRD(rw) - Defines the TMRD value in cycles for the registered DIMM. This is the delay required from a control word write to another control word write or to a DRAM access.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_155                        0x0000026c
#define   NFP_EMUX_DCT_i_DENALI_CTL_155_RDIMM_TSTAB(_x)      (((_x) & 0xffffff) << 8)
#define   NFP_EMUX_DCT_i_DENALI_CTL_155_RDIMM_TSTAB_of(_x)   (((_x) >> 8) & 0xffffff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_155_RDIMM_TMRD(_x)       (((_x) & 0xf) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_155_RDIMM_TMRD_of(_x)    (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_156 -
    Bits: 24    CA_PARITY_ERROR(ro) - Contains one hot indication of registered DIMM parity errors. Bit (0) correlates to DIMM0, bit (1) correlates to DIMM1, etc. Value of 1 indicates an error on that DIMM. READ-ONLY
    Bits: 22:0  CA_PARITY_ERROR_INJECT(rw) - Selects bit to corrupt on the CA bus for CA parity error injection.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_156                        0x00000270
#define   NFP_EMUX_DCT_i_DENALI_CTL_156_CA_PARITY_ERROR      BIT(24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_156_CA_PARITY_ERROR_INJECT(_x) (((_x) & 0x7fffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_156_CA_PARITY_ERROR_INJECT_of(_x) (((_x) >> 0) & 0x7fffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_157 -
    Bits: 31:24 OBSOLETE2(ro) - PADDING_BITS
    Bits: 20:16 LONG_COUNT_MASK(rw) - Reduces the length of the long counter from 1024 cycles. The only supported values are 0x00 (1024 cycles), 0x10 (512 clocks), 0x18 (256 clocks), 0x1C (128 clocks), 0x1E (64 clocks) and 0x1F (32 clocks).
    Bits: 13:0  TREF_INTERVAL(rw) - Defines the cycles between refreshes to different chip selects.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_157                        0x00000274
#define   NFP_EMUX_DCT_i_DENALI_CTL_157_OBSOLETE2(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_157_OBSOLETE2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_DCT_i_DENALI_CTL_157_LONG_COUNT_MASK(_x)  (((_x) & 0x1f) << 16)
#define   NFP_EMUX_DCT_i_DENALI_CTL_157_LONG_COUNT_MASK_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_157_TREF_INTERVAL(_x)    (((_x) & 0x3fff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_157_TREF_INTERVAL_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_158 -
    Bits: 29:24 WR_TO_ODTH(rw) - Defines the delay from a write command to ODT assertion.
    Bits: 17:0  INT_ACK(wo) - Clear mask of the INT_STATUS parameter. WRITE-ONLY
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_158                        0x00000278
#define   NFP_EMUX_DCT_i_DENALI_CTL_158_WR_TO_ODTH(_x)       (((_x) & 0x3f) << 24)
#define   NFP_EMUX_DCT_i_DENALI_CTL_158_WR_TO_ODTH_of(_x)    (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_DCT_i_DENALI_CTL_158_INT_ACK(_x)          (((_x) & 0x3ffff) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_158_INT_ACK_of(_x)       (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: i_DENALI_CTL_159 -
    Bits:  5:0  RD_TO_ODTH(rw) - Defines the delay from a read to ODT assertion.
*/
#define NFP_EMUX_DCT_i_DENALI_CTL_159                        0x0000027c
#define   NFP_EMUX_DCT_i_DENALI_CTL_159_RD_TO_ODTH(_x)       (((_x) & 0x3f) << 0)
#define   NFP_EMUX_DCT_i_DENALI_CTL_159_RD_TO_ODTH_of(_x)    (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_RIDR -
    Bits: 31:24 UDRID(ro) - User-Defined Revision ID: General purpose revision identification set by the user.
    Bits: 23:20 PHYMJR(ro) - PHY Major Revision: Indicates major revision of the PHY such addition of the features that make the new version not compatible with previous versions.
    Bits: 19:16 PHYMDR(ro) - PHY Moderate Revision: Indicates moderate revision of the PHY such as addition of new features. Normally the new version is still compatible with previous versions.
    Bits: 15:12 PHYMNR(ro) - PHY Minor Revision: Indicates minor update of the PHY such as bug fixes. Normally no new features are included.
    Bits: 11:8  PUBMJR(ro) - PUB Major Revision: Indicates major revision of the PUB such addition of the features that make the new version not compatible with previous versions.
    Bits:  7:4  PUBMDR(ro) - PUB Moderate Revision: Indicates moderate revision of the PUB such as addition of new features. Normally the new version is still compatible with previous versions.
    Bits:  3:0  PUBMNR(ro) - PUB Minor Revision: Indicates minor update of the PUB such as bug fixes. Normally no new features are included.
*/
#define NFP_EMUX_PHY_i_MUPUB_RIDR                            0x00000000
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_UDRID(_x)                (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_UDRID_of(_x)             (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PHYMJR(_x)               (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PHYMJR_of(_x)            (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PHYMDR(_x)               (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PHYMDR_of(_x)            (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PHYMNR(_x)               (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PHYMNR_of(_x)            (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PUBMJR(_x)               (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PUBMJR_of(_x)            (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PUBMDR(_x)               (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PUBMDR_of(_x)            (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PUBMNR(_x)               (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_RIDR_PUBMNR_of(_x)            (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_PIR -
    Bits: 31    INITBYP(w1c) - Initialization Bypass: Bypasses or stops, if set, all initialization routines currently running, including PHY initialization, DRAM initialization, and PHY training. Initialization may be triggered manually using INIT and the other relevant bits of the PIR register. This bit is self-clearing.
    Bits: 30    ZCALBYP(rw) - Impedance Calibration Bypass: Bypasses or stops, if set, impedance calibration of all ZQ control blocks that automatically triggers after reset. Impedance calibration may be triggered manually using INIT and ZCAL bits of the PIR register. This bit is self-clearing.
    Bits: 29    DCALBYP(rw) - Digital Delay Line (DDL) Calibration Bypass: Bypasses or stops, if set, DDL calibration that automatically triggers after reset. DDL calibration may be triggered manually using INIT and DCAL bits of the PIR register. This bit is self- clearing.
    Bits: 28    LOCKBYP(rw) - PLL Lock Bypass: Bypasses or stops, if set, the waiting of PLLs to lock. PLL lock wait is automatically triggered after reset. PLL lock wait may be triggered manually using INIT and PLLLOCK bits of the PIR register. This bit is self- clearing.
    Bits: 27    CLRSR(rw) - Clear Status Registers: A write of '1' to this bit will clear (reset to '0') all status registers, including PGSR and DXnGSR. The clear status register bit is self- clearing. Note, this bit does not clear the PGSR.IDONE bit. If the IDONE bit is set it remains at 1'b1 to indicate the PUB has competed its task. This bit is primarily for debug purposes and is typically not needed during normal functional operation. It can be used when PGSR.IDONE=1, to manually clear the PGSR status bits, although starting a new init process will automatically clear the PGSR status bits. Or it can be used to manually clear the DXnGSR status bits, although starting a new data training process will automatically clear the DXnGSR status bits.
    Bits: 19    RDIMMINIT(rw) - RDIMM Initialization: Executes the RDIMM buffer chip initialization before executing DRAM initialization. The RDIMM buffer chip initialization is run after the DRAM is reset and CKE have been driven high by the DRAM initialization sequence.
    Bits: 18    CTLDINIT(rw) - Controller DRAM Initialization: Indicates if set that DRAM initialization will be performed by the controller. Otherwise if not set it indicates that DRAM initialization will be performed using the built-in initialization sequence or using software through the configuration port.
    Bits: 17    PLLBYP(rw) - PLL Bypass: A setting of 1 on this bit will put all PHY PLLs in bypass mode.
    Bits: 16    ICPC(rw) - Initialization Complete Pin Configuration: Specifies how the DFI initialization complete output pin (dfi_init_complete) should be used to indicate the status of initialization. Valid value are:
    Bits: 15    WREYE(rw) - Write Data Eye Training: Executes a PUB training routine to maximize the write data eye.
    Bits: 14    RDEYE(rw) - Read Data Eye Training: Executes a PUB training routine to maximize the read data eye.
    Bits: 13    WRDSKW(rw) - Write Data Bit Deskew: Executes a PUB training routine to deskew the DQ bits during write.
    Bits: 12    RDDSKW(rw) - Read Data Bit Deskew: Executes a PUB training routine to deskew the DQ bits during read.
    Bits: 11    WLADJ(rw) - Write Leveling Adjust (DDR3 Only): Executes a PUB training routine that re- adjusts the write latency used during write in case the write leveling routine changed the expected latency.
    Bits: 10    QSGATE(rw) - Read DQS Gate Training: Executes a PUB training routine to determine the optimum position of the read data DQS strobe for maximum system timing margins.
    Bits:  9    WL(rw) - Write Leveling (DDR3 Only): Executes a PUB write leveling routine.
    Bits:  8    DRAMINIT(rw) - DRAM Initialization: Executes the DRAM initialization sequence.
    Bits:  7    DRAMRST(rw) - DRAM Reset (DDR3 Only): Issues a reset to the DRAM (by driving the DRAM reset pin low) and wait 200us. This can be triggered in isolation or with the full DRAM initialization (DRAMINIT). For the later case, the reset is issued and 200us is waited before starting the full initialization sequence.
    Bits:  6    PHYRST(rw) - PHY Reset: Resets the AC and DATX8 modules by asserting the AC/DATX8 reset pin.
    Bits:  5    DCAL(rw) - Digital Delay Line (DDL) Calibration: Performs PHY delay line calibration.
    Bits:  4    PLLINIT(rw) - PLL Initialization: Executes the PLL initialization sequence which includes correct driving of PLL power-down, reset and gear shift pins, and then waiting for the PHY PLLs to lock.
    Bits:  1    ZCAL(rw) - Impedance Calibration: Performs PHY impedance calibration. When set the impedance calibration will be performed in parallel with PHY initialization (PLL initialization + DDL calibration + PHY reset).
    Bits:  0    INIT(rw) - Initialization Trigger: A write of '1' to this bit triggers the DDR system initialization, including PHY initialization, DRAM initialization, and PHY training. The exact initialization steps to be executed are specified in bits 1 to 15 of this register. A bit setting of 1 means the step will be executed as part of the initialization sequence, while a setting of '0' means the step will be bypassed. The initialization trigger bit is self-clearing.
*/
#define NFP_EMUX_PHY_i_MUPUB_PIR                             0x00000004
#define   NFP_EMUX_PHY_i_MUPUB_PIR_INITBYP                   BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_ZCALBYP                   BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_DCALBYP                   BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_LOCKBYP                   BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_CLRSR                     BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_RDIMMINIT                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_CTLDINIT                  BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_PLLBYP                    BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_ICPC                      BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_WREYE                     BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_RDEYE                     BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_WRDSKW                    BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_RDDSKW                    BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_WLADJ                     BIT(11)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_QSGATE                    BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_WL                        BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_DRAMINIT                  BIT(8)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_DRAMRST                   BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_PHYRST                    BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_DCAL                      BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_PLLINIT                   BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_ZCAL                      BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_PIR_INIT                      BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGCR0 -
    Bits: 31:26 CKEN(rw) - CK Enable: Controls whether the CK going to the SDRAM is enabled (toggling) or disabled (static value) and whether the CK is inverted. Two bits for each of the up to three CK pairs. Valid values for the two bits are:
    Bits: 25    PUBMODE(rw) - Delay Line Test Start: A write of 1 to this bit will trigger delay line oscillator mode period measurement. This bit is not self clearing and needs to be reset to 0 before the measurement can be re-triggered.
    Bits: 18:14 DTOSEL(rw) - Digital Test Output Select: Selects the PHY digital test output that should be driven onto PHY digital test output (phy_dto) pin: Valid values are:
    Bits: 13:12 OSCWDL(rw) - Oscillator Mode Write-Leveling Delay Line Select: Selects which of the two write leveling LCDLs is active. The delay select value of the inactive LCDL is set to zero while the delay select value of the active LCDL can be varied by the input write leveling delay select pin. Valid values are:
    Bits: 11:9  OSCDIV(rw) - Oscillator Mode Division: Specifies the factor by which the delay line oscillator mode output is divided down before it is output on the delay line digital test output pin dl_dto. Valid values are:
    Bits:  8    OSCEN(rw) - Oscillator Enable: Enables, if set, the delay line oscillation.
    Bits:  7    DLTST(rw) - Delay Line Test Start: A write of '1' to this bit will trigger delay line oscillator mode period measurement. This bit is not self clearing and needs to be reset to '0' before the measurement can be re-triggered.
    Bits:  6    DLTMODE(rw) - Delay Line Test Mode: Selects, if set, the delay line oscillator test mode.
    Bits:  5    RDBVT(rw) - Read Data BDL VT Compensation: Enables, if set the VT drift compensation of the read data bit delay lines.
    Bits:  4    WDBVT(rw) - Write Data BDL VT Compensation: Enables, if set the VT drift compensation of the write data bit delay lines.
    Bits:  3    RGLVT(rw) - Read DQS Gating LCDL Delay VT Compensation: Enables, if set the VT drift compensation of the read DQS gating LCDL.
    Bits:  2    RDLVT(rw) - Read DQS LCDL Delay VT Compensation: Enables, if set the VT drift compensation of the read DQS LCDL.
    Bits:  1    WDLVT(rw) - Write DQ LCDL Delay VT Compensation: Enables, if set the VT drift compensation of the write DQ LCDL.
    Bits:  0    WLLVT(rw) - Write Leveling LCDL Delay VT Compensation: Enables, if set, the VT drift compensation of the write leveling LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_PGCR0                           0x00000008
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_CKEN(_x)                (((_x) & 0x3f) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_CKEN_of(_x)             (((_x) >> 26) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_PUBMODE                 BIT(25)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_DTOSEL(_x)              (((_x) & 0x1f) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_DTOSEL_of(_x)           (((_x) >> 14) & 0x1f)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_OSCWDL(_x)              (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_OSCWDL_of(_x)           (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_OSCDIV(_x)              (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_OSCDIV_of(_x)           (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_OSCEN                   BIT(8)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_DLTST                   BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_DLTMODE                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_RDBVT                   BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_WDBVT                   BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_RGLVT                   BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_RDLVT                   BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_WDLVT                   BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR0_WLLVT                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGCR1 -
    Bits: 31    LBMODE(rw) - Loopback Mode: Indicates, if set, that the PHY/PUB is in loopback mode.
    Bits: 30:29 LBGDQS(rw) - Loopback DQS Gating: Selects the DQS gating mode that should be used when the PHY is in loopback mode, including BIST loopback mode. Valid values are:
    Bits: 28    LBDQSS(rw) - Loopback DQS Shift: Selects how the read DQS is shifted during loopback to ensure that the read DQS is centered into the read data eye. Valid values are:
    Bits: 27    IOLB(rw) - I/O Loop-Back Select: Selects where inside the I/O the loop-back of signals happens. Valid values are:
    Bits: 26    INHVT(rw) - VT Calculation Inhibit: Inhibits calculation of the next VT compensated delay line values. A value of 1 will inhibit the VT calculation. This bit should be set to 1_During writes to the delay line registers.
    Bits: 25    DXHRST(rw) - DX PHY High-Speed Reset: a Write of '0' to this bit resets the DX macro without resetting the PUB RTL logic. This bit is not self-clearing and a '1' must be written to de-assert the reset.
    Bits: 24:23 ZCKSEL(rw) - Impedance Clock Divider Select: Selects the divide ratio for the clock used by the impedance control logic relative to the clock used by the memory controller and SDRAM. Valid values are:
    Bits: 22:15 DLDLMT(rw) - Delay Line VT Drift Limit: Specifies the minimum change in the delay line VT drift in one direction which should result in the assertion of the delay line VT drift status signal (vt_drift). The limit is specified in terms of delay select values. A value of 0 disables the assertion of delay line VT drift status signal.
    Bits: 14:13 FDEPTH(rw) - Filter Depth: Specifies the number of measurements over which all AC and DATX8 initial period measurements, that happen after reset or when calibration is manually triggered, are averaged. Valid values are:
    Bits: 12:11 LPFDEPTH(rw) - Low-Pass Filter Depth: Specifies the number of measurements over which MDL period measurements are filtered. This determines the time constant of the low pass filter. Valid values are:
    Bits: 10    LPFEN(rw) - Low-Pass Filter Enable: Enables, if set, the low pass filtering of MDL period measurements.
    Bits:  9    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the AC master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or on when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high.
    Bits:  8:7  IODDRM(rw) - I/O DDR Mode (D3F I/O Only): Selects the DDR mode for the I/Os. These bits connect to bits [2:1], of the IOM pin of the SSTL I/O. For more information, refer to the SSTL I/O chapter in the DWC DDR PHY Databook.
    Bits:  6    WLSELT(rw) - Write Leveling Select Type: Selects the encoding type for the write leveling select signal depending on the desired setup/hold margins for the internal pipelines. Refer to the DDR PHY Databook for details of how the select type is used. Valid values are:
    Bits:  5    ACHRST(rw) - AC PHY High-Speed Reset: a Write of '0' to this bit resets the AC macro without resetting the PUB RTL logic. This bit is not self-clearing and a '1' must be written to de-assert the reset.
    Bits:  4    WSLOPT(rw) - Write System Latency Optimization: controls the insertion of a pipeline stage on the AC signals from the DFI interface to the PHY to cater for a negative write system latency (WSL) value (only -1 possible). Valid values are:
    Bits:  2    WLSTEP(rw) - Write Leveling Step: Specifies the number of delay step-size increments during each step of write leveling. Valid values are:
    Bits:  1    WLMODE(rw) - Write Leveling (Software) Mode: Indicates if set that the PUB is in software write leveling mode in which software executes single steps of DQS pulsing by writing '1' to PIR.WL. The write leveling DQ status from the DRAM is captured in DXnGSR0.WLDQ.
    Bits:  0    PDDISDX(rw) - Power Down Disabled Byte: Indicates if set that the PLL and I/Os of a disabled byte should be powered down.
*/
#define NFP_EMUX_PHY_i_MUPUB_PGCR1                           0x0000000c
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LBMODE                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LBGDQS(_x)              (((_x) & 0x3) << 29)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LBGDQS_of(_x)           (((_x) >> 29) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LBDQSS                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_IOLB                    BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_INHVT                   BIT(26)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_DXHRST                  BIT(25)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_ZCKSEL(_x)              (((_x) & 0x3) << 23)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_ZCKSEL_of(_x)           (((_x) >> 23) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_DLDLMT(_x)              (((_x) & 0xff) << 15)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_DLDLMT_of(_x)           (((_x) >> 15) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_FDEPTH(_x)              (((_x) & 0x3) << 13)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_FDEPTH_of(_x)           (((_x) >> 13) & 0x3)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_FDEPTH_2              (0)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_FDEPTH_4              (1)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_FDEPTH_8              (2)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_FDEPTH_16             (3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFDEPTH(_x)            (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFDEPTH_of(_x)         (((_x) >> 11) & 0x3)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFDEPTH_2            (0)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFDEPTH_4            (1)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFDEPTH_8            (2)
#define     NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFDEPTH_16           (3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_LPFEN                   BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_MDLEN                   BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_IODDRM(_x)              (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_IODDRM_of(_x)           (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_WLSELT                  BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_ACHRST                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_WSLOPT                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_WLSTEP                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_WLMODE                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR1_PDDISDX                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGSR0 -
    Bits: 31    APLOCK(ro) - AC PLL Lock: Indicates, if set, that AC PLL has locked. This is a direct status of the AC PLL lock pin.
    Bits: 29:28 PLDONE_CHN(ro) - PLL Lock Done per Channel: Indicates PLL locking has completed for each underlying channel. Bit 28 represents channel 0 while bit 29 represents channel 1.
    Bits: 27    WEERR(ro) - Write Eye Training Error: Indicates if set that there is an error in write eye training.
    Bits: 26    REERR(ro) - Read Eye Training Error: Indicates if set that there is an error in read eye training.
    Bits: 25    WDERR(ro) - Write Bit Deskew Error: Indicates if set that there is an error in write bit deskew.
    Bits: 24    RDERR(ro) - Read Bit Deskew Error: Indicates if set that there is an error in read bit deskew.
    Bits: 23    WLAERR(ro) - Write Leveling Adjustment Error: Indicates if set that there is an error in write leveling adjustment.
    Bits: 22    QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training.
    Bits: 21    WLERR(ro) - Write Leveling Error: Indicates if set that there is an error in write leveling.
    Bits: 20    ZCERR(ro) - Impedance Calibration Error: Indicates if set that there is an error in impedance calibration.
    Bits: 11    WEDONE(ro) - Write Eye Training Done: Indicates if set that write eye training has completed.
    Bits: 10    REDONE(ro) - Read Eye Training Done: Indicates if set that read eye training has completed.
    Bits:  9    WDDONE(ro) - Write Bit Deskew Done: Indicates if set that write bit deskew has completed.
    Bits:  8    RDDONE(ro) - Read Bit Deskew Done: Indicates if set that read bit deskew has completed.
    Bits:  7    WLADONE(ro) - Write Leveling Adjustment Done: Indicates if set that write leveling adjustment has completed.
    Bits:  6    QSGDONE(ro) - DQS Gate Training Done: Indicates if set that DQS gate training has completed.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates if set that write leveling has completed.
    Bits:  4    DIDONE(ro) - DRAM Initialization Done: Indicates if set that DRAM initialization has completed.
    Bits:  3    ZCDONE(ro) - Impedance Calibration Done: Indicates if set that impedance calibration has completed.
    Bits:  2    DCDONE(ro) - Digital Delay Line (DDL) Calibration Done: Indicates if set that DDL calibration has completed.
    Bits:  1    PLDONE(ro) - PLL Lock Done: Indicates if set that PLL locking has completed.
    Bits:  0    IDONE(ro) - Initialization Done: Indicates if set that the DDR system initialization has completed. This bit is set after all the selected initialization routines in PIR register have completed.
*/
#define NFP_EMUX_PHY_i_MUPUB_PGSR0                           0x00000010
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_APLOCK                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_PLDONE_CHN(_x)          (((_x) & 0x3) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_PLDONE_CHN_of(_x)       (((_x) >> 28) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WEERR                   BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_REERR                   BIT(26)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WDERR                   BIT(25)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_RDERR                   BIT(24)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WLAERR                  BIT(23)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_QSGERR                  BIT(22)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WLERR                   BIT(21)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_ZCERR                   BIT(20)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WEDONE                  BIT(11)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_REDONE                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WDDONE                  BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_RDDONE                  BIT(8)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WLADONE                 BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_QSGDONE                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_WLDONE                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_DIDONE                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_ZCDONE                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_DCDONE                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_PLDONE                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR0_IDONE                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGSR1 -
    Bits: 31    PARERR(ro) - RDIMM Parity Error: Indicates, if set, that there was a parity error (i.e. err_out_n was sampled low) during one of the transactions to the RDIMM buffer chip. This bit remains asserted until cleared by the PIR.CLRSR.
    Bits: 30    VTSTOP(ro) - VT Stop: Indicates if set that the VT calculation logic has stopped computing the next values for the VT compensated delay line values. After assertion of the PGCR.INHVT, the VTSTOP bit should be read to ensure all VT compensation logic has stopped computations before writing to the delay line registers.
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the AC delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the AC delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_PGSR1                           0x00000014
#define   NFP_EMUX_PHY_i_MUPUB_PGSR1_PARERR                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR1_VTSTOP                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR1_DLTCODE(_x)             (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR1_DLTCODE_of(_x)          (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_PGSR1_DLTDONE                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_PLLCR -
    Bits: 31    BYP(rw) - PLL Bypass: Bypasses the PLL if set to 1.
    Bits: 30    PLLRST(rw) - PLL Rest: Resets the PLLs by driving the PLL reset pin. This bit is not self-clearing and a '0' must be written to de-assert the reset.
    Bits: 29    PLLPD(rw) - PLL Power Down: Puts the PLLs in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down.
    Bits: 19:18 FRQSEL(rw) - PLL Frequency Select: Selects the operating range of the PLL. Valid values for PHYs that go up to 2133 Mbps are: 00 = PLL reference clock (ctl_clk/REF_CLK) ranges from 335MHz to 533MHz 01 = PLL reference clock (ctl_clk/REF_CLK) ranges from 225MHz to 385MHz 10 = Reserved 11 = PLL reference clock (ctl_clk/REF_CLK) ranges from 166MHz to 275MHz Valid values for PHYs that don't go up to 2133 Mbps are:00 = PLL reference clock (ctl_clk/REF_CLK) ranges from 250MHz to 400MHz 01 = PLL reference clock (ctl_clk/REF_CLK) ranges from 166MHz to 300MHz 10 = Reserved 11 = Reserved
    Bits: 17    QPMODE(rw) - PLL Quadrature Phase Mode: Enables, if set, the quadrature phase clock outputs. This mode is not used in this version of the PHY.
    Bits: 16:13 CPPC(rw) - Charge Pump Proportional Current Control
    Bits: 12:11 CPIC(rw) - Charge Pump Integrating Current Control
    Bits: 10    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode.
    Bits:  9:6  ATOEN(rw) - Analog Test Enable (ATOEN): Selects the analog test signal that should be driven on the analog test output pin. Otherwise the analog test output is tri-stated. This allows analog test output pins from multiple PLLs to be connected together. Valid values are:
    Bits:  5:2  ATC(rw) - Analog Test Control: Selects various PLL analog test signals to be brought out via PLL analog test output pin (pll_ato). Valid values are:
    Bits:  1:0  DTC(rw) - Digital Test Control: Selects various PLL digital test signals and other test mode signals to be brought out via bit [1], of the PLL digital test output (pll_dto[1],). Valid values are:
*/
#define NFP_EMUX_PHY_i_MUPUB_PLLCR                           0x00000018
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_BYP                     BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_PLLRST                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_PLLPD                   BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_FRQSEL(_x)              (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_FRQSEL_of(_x)           (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_QPMODE                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_CPPC(_x)                (((_x) & 0xf) << 13)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_CPPC_of(_x)             (((_x) >> 13) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_CPIC(_x)                (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_CPIC_of(_x)             (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_GSHIFT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_ATOEN(_x)               (((_x) & 0xf) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_ATOEN_of(_x)            (((_x) >> 6) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC(_x)                 (((_x) & 0xf) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_of(_x)              (((_x) >> 2) & 0xf)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vdd_ckin          (1)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vrfbf             (2)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vdd_cko           (3)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vp_cp             (4)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vpfil(vp)         (5)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_gd                (7)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vcntrl_atb        (8)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vref_atb          (9)
#define     NFP_EMUX_PHY_i_MUPUB_PLLCR_ATC_vpsf_atb          (10)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_DTC(_x)                 (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PLLCR_DTC_of(_x)              (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR0 -
    Bits: 31:21 tPLLPD(rw) - PLL Power-Down Time: Number of configuration or APB clock cycles that the PLL must remain in power-down mode, i.e. number of clock cycles from when PLL power-down pin is asserted to when PLL power-down pin is de-asserted. This must correspond to a value that is equal to or more than 1us. Default value corresponds to 1us.
    Bits: 20:6  tPLLGS(rw) - PLL Gear Shift Time: Number of configuration or APB clock cycles from when the PLL reset pin is de-asserted to when the PLL gear shift pin is de-asserted. This must correspond to a value that is equal to or more than 4us. Default value corresponds to 4us.
    Bits:  5:0  tPHYRST(rw) - PHY Reset Time: Number of configuration or APB clock cycles that the PHY reset must remain asserted after PHY calibration is done before the reset to the PHY is de-asserted. This is used to extend the reset to the PHY so that the reset is asserted for some clock cycles after the clocks are stable.
*/
#define NFP_EMUX_PHY_i_MUPUB_PTR0                            0x0000001c
#define   NFP_EMUX_PHY_i_MUPUB_PTR0_tPLLPD(_x)               (((_x) & 0x7ff) << 21)
#define   NFP_EMUX_PHY_i_MUPUB_PTR0_tPLLPD_of(_x)            (((_x) >> 21) & 0x7ff)
#define   NFP_EMUX_PHY_i_MUPUB_PTR0_tPLLGS(_x)               (((_x) & 0x7fff) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_PTR0_tPLLGS_of(_x)            (((_x) >> 6) & 0x7fff)
#define   NFP_EMUX_PHY_i_MUPUB_PTR0_tPHYRST(_x)              (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PTR0_tPHYRST_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR1 -
    Bits: 31:16 tPLLLOCK(rw) - PLL Lock Time: Number of configuration or APB clock cycles for the PLL to stabilize and lock, i.e. number of clock cycles from when the PLL reset pin is de-asserted to when the PLL has lock and is ready for use. This must correspond to a value that is equal to or more than 100us. Default value corresponds to 100us.
    Bits: 12:0  tPLLRST(rw) - PLL Reset Time: Number of configuration or APB clock cycles that the PLL must remain in reset mode, i.e. number of clock cycles from when PLL power-down pin is de-asserted and PLL reset pin is asserted to when PLL reset pin is de-asserted. This must correspond to a value that is equal to or more than 9us. Default value corresponds to 9us.
*/
#define NFP_EMUX_PHY_i_MUPUB_PTR1                            0x00000020
#define   NFP_EMUX_PHY_i_MUPUB_PTR1_tPLLLOCK(_x)             (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_PTR1_tPLLLOCK_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_PTR1_tPLLRST(_x)              (((_x) & 0x1fff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PTR1_tPLLRST_of(_x)           (((_x) >> 0) & 0x1fff)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR2 -
    Bits: 19:15 tWLDLYS(rw) - Write Leveling Delay Settling Time: Number of controller clock cycles from when a new value of the write leveling delay is applies to the LCDL to when to DQS high is driven high. This allows the delay to settle.
    Bits: 14:10 tCALH(rw) - Calibration Hold Time: Number of controller clock cycles from when the clock was disabled (cal_clk_en deasserted) to when calibration is enable (cal_en asserted).
    Bits:  9:5  tCALS(rw) - Calibration Setup Time: Number of controller clock cycles from when calibration is enabled (cal_en asserted) to when the calibration clock is asserted again (cal_clk_en asserted).
    Bits:  4:0  tCALON(rw) - Calibration On Time: Number of clock cycles that the calibration clock is enabled (cal_clk_en asserted).
*/
#define NFP_EMUX_PHY_i_MUPUB_PTR2                            0x00000024
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tWLDLYS(_x)              (((_x) & 0x1f) << 15)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tWLDLYS_of(_x)           (((_x) >> 15) & 0x1f)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tCALH(_x)                (((_x) & 0x1f) << 10)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tCALH_of(_x)             (((_x) >> 10) & 0x1f)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tCALS(_x)                (((_x) & 0x1f) << 5)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tCALS_of(_x)             (((_x) >> 5) & 0x1f)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tCALON(_x)               (((_x) & 0x1f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PTR2_tCALON_of(_x)            (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR3 -
    Bits: 28:20 tDINIT1(rw) - DRAM Initialization Time 1: DRAM initialization timein DRAM clock cycles corresponding to the following:
    Bits: 19:0  tDINIT0(rw) - DRAM Initialization Time 0: DRAM initialization time in DRAM clock cycles corresponding to the following:
*/
#define NFP_EMUX_PHY_i_MUPUB_PTR3                            0x00000028
#define   NFP_EMUX_PHY_i_MUPUB_PTR3_tDINIT1(_x)              (((_x) & 0x1ff) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_PTR3_tDINIT1_of(_x)           (((_x) >> 20) & 0x1ff)
#define   NFP_EMUX_PHY_i_MUPUB_PTR3_tDINIT0(_x)              (((_x) & 0xfffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PTR3_tDINIT0_of(_x)           (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_PTR4 -
    Bits: 27:18 tDINIT3(rw) - DRAM Initialization Time 3: DRAM initialization time in DRAM clock cycles corresponding to the following:
    Bits: 17:0  tDINIT2(rw) - DRAM Initialization Time 2: DRAM initialization time in DRAM clock cycles corresponding to the following:
*/
#define NFP_EMUX_PHY_i_MUPUB_PTR4                            0x0000002c
#define   NFP_EMUX_PHY_i_MUPUB_PTR4_tDINIT3(_x)              (((_x) & 0x3ff) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_PTR4_tDINIT3_of(_x)           (((_x) >> 18) & 0x3ff)
#define   NFP_EMUX_PHY_i_MUPUB_PTR4_tDINIT2(_x)              (((_x) & 0x3ffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PTR4_tDINIT2_of(_x)           (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ACMDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_ACMDLR                          0x00000030
#define   NFP_EMUX_PHY_i_MUPUB_ACMDLR_MDLD(_x)               (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_ACMDLR_MDLD_of(_x)            (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_ACMDLR_TPRD(_x)               (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_ACMDLR_TPRD_of(_x)            (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_ACMDLR_IPRD(_x)               (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ACMDLR_IPRD_of(_x)            (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ACBDLR -
    Bits: 23:18 ACBD(rw) - Address/Command Bit Delay: Delay select for the BDLs on address and command signals.
    Bits: 17:12 CK2BD(rw) - CK2 Bit Delay: Delay select for the BDL on CK2.
    Bits: 11:6  CK1BD(rw) - CK1 Bit Delay: Delay select for the BDL on CK1.
    Bits:  5:0  CK0BD(rw) - CK0 Bit Delay: Delay select for the BDL on CK0.
*/
#define NFP_EMUX_PHY_i_MUPUB_ACBDLR                          0x00000034
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_ACBD(_x)               (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_ACBD_of(_x)            (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_CK2BD(_x)              (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_CK2BD_of(_x)           (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_CK1BD(_x)              (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_CK1BD_of(_x)           (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_CK0BD(_x)              (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ACBDLR_CK0BD_of(_x)           (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_ACIOCR -
    Bits: 31:30 ACSR(rw) - Address/Command Slew Rate (D3F I/O Only): Selects slew rate of the I/O for all address and command pins.
    Bits: 29    RSTIOM(rw) - SDRAM Reset I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for SDRAM Reset.
    Bits: 28    RSTPDR(rw) - SDRAM Reset Power Down Receiver: Powers down, when set, the input receiver on the I/O for SDRAM RST# pin.
    Bits: 27    RSTPDD(rw) - SDRAM Reset Power Down Driver: Powers down, when set, the output driver on the I/O for SDRAM RST# pin.
    Bits: 26    RSTODT(rw) - SDRAM Reset On-Die Termination: Enables, when set, the on-die termination on the I/O for SDRAM RST# pin.
    Bits: 23:22 RANKPDR(rw) - Rank Power Down Receiver: Powers down, when set, the input receiver on the I/O CKE[3:0],, ODT[3:0],, and CS#[3:0], pins. RANKPDR[0], controls the power down for CKE[0],, ODT[0],, and CS#[0],, RANKPDR[1], controls the power down for CKE[1],, ODT[1],, and CS#[1],, and so on.
    Bits: 19:18 CSPDD(rw) - CS# Power Down Driver: Powers down, when set, the output driver on the I/O for CS#[3:0], pins. CSPDD[0], controls the power down for CS#[0],, CSPDD[1], controls the power down for CS#[1],, and so on. CKE and ODT driver power down is controlled by DSGCR register.
    Bits: 15:14 RANKODT(rw) - Rank On-Die Termination: Enables, when set, the on-die termination on the I/O for CKE[3:0],, ODT[3:0],, and CS#[3:0], pins. RANKODT[0], controls the on-die termination for CKE[0],, ODT[0],, and CS#[0],, RANKODT[1], controls the on-die termination for CKE[1],, ODT[1],, and CS#[1],, and so on.
    Bits: 12:11 CKPDR(rw) - CK Power Down Receiver: Powers down, when set, the input receiver on the I/O for CK[0],, CK[1],, and CK[2], pins, respectively.
    Bits:  9:8  CKPDD(rw) - CK Power Down Driver: Powers down, when set, the output driver on the I/O for CK[0],, CK[1],, and CK[2], pins, respectively.
    Bits:  6:5  CKODT(rw) - CK On-Die Termination: Enables, when set, the on-die termination on the I/O for CK[0],, CK[1],, and CK[2], pins, respectively.
    Bits:  4    ACPDR(rw) - AC Power Down Receiver: Powers down, when set, the input receiver on the I/O for RAS#, CAS#, WE#, BA[2:0],, and A[15:0], pins.
    Bits:  3    ACPDD(rw) - AC Power Down Driver: Powers down, when set, the output driver on the I/O for RAS#, CAS#, WE#, BA[2:0],, and A[15:0], pins.
    Bits:  2    ACODT(rw) - Address/Command On-Die Termination: Enables, when set, the on-die termination on the I/O for RAS#, CAS#, WE#, BA[2:0],, and A[15:0], pins.
    Bits:  1    ACOE(rw) - Address/Command Output Enable: Enables, when set, the output driver on the I/O for all address and command pins.
    Bits:  0    ACIOM(rw) - Address/Command I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for all address and command pins. This bit connects to bit [0], of the IOM pin on the D3F I/Os, and for other I/O libraries, it connects to the IOM pin of the I/O.
*/
#define NFP_EMUX_PHY_i_MUPUB_ACIOCR                          0x00000038
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACSR(_x)               (((_x) & 0x3) << 30)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACSR_of(_x)            (((_x) >> 30) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RSTIOM                 BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RSTPDR                 BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RSTPDD                 BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RSTODT                 BIT(26)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RANKPDR(_x)            (((_x) & 0x3) << 22)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RANKPDR_of(_x)         (((_x) >> 22) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CSPDD(_x)              (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CSPDD_of(_x)           (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RANKODT(_x)            (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_RANKODT_of(_x)         (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CKPDR(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CKPDR_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CKPDD(_x)              (((_x) & 0x3) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CKPDD_of(_x)           (((_x) >> 8) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CKODT(_x)              (((_x) & 0x3) << 5)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_CKODT_of(_x)           (((_x) >> 5) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACPDR                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACPDD                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACOE                   BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_ACIOCR_ACIOM                  BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DXCCR -
    Bits: 31:28 DDPDRCDO(rw) - Dynamic Data Power Down Receiver Count Down Offset: Offset applied in calculating window of time where receiver is powered up.
    Bits: 27:24 DDPDDCDO(rw) - Dynamic Data Power Down Driver Count Down Offset: Offset applied in calculating window of time where driver is powered up.
    Bits: 23    DYNDXPDR(rw) - Data Power Down Receiver: Dynamically powers down, when set, the input receiver on I/O for the DQ pins of the active DATX8 macros. Applies only when DXPDR and DXnGCR.DXPDR are not set to 1. Receiver is powered-up on a DFI READ command and powered-down (trddata_en + fixed_read_latency + n) HDR cycles after the last DFI READ command. Note that n is defined by the register bit field DXCCR[31:28] (DDPDRCDO).
    Bits: 22    DYNDXPDD(rw) - Dynamic Data Power Down Driver: Dynamically powers down, when set, the output driver on I/O for the DQ pins of the active DATX8 macros. Applies only when DXPDD and DXnGCR.DXPDD are not set to 1. Driver is powered-up on a DFI WRITE command and powered-down (twrlat + WL/2 + n) HDR cycles after the last DFI WRITE command. Note that n is defined by the register bit field DXCCR[27:24] (DDPDDCDO).
    Bits: 21    UDQIOM(rw) - Unused DQ I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for unused DQ pins.
    Bits: 20    UDQPDR(rw) - Unused DQ Power Down Receiver: Powers down, when set, the input receiver on the I/O for unused DQ pins.
    Bits: 19    UDQPDD(rw) - Unused DQ Power Down Driver: Powers down, when set, the output driver on the I/O for unused DQ pins.
    Bits: 18    UDQODT(rw) - Unused DQ On-Die Termination: Enables, when set, the on-die termination on the I/O for unused DQ pins.
    Bits: 17:15 MSBUDQ(rw) - Most Significant Byte Unused DQs: Specifies the number of DQ bits that are not used in the most significant byte. The used (valid) bits for this byte are [8-MSBDQ- 1:0],. To disable the whole byte, use the DXnGCR.DXEN register.
    Bits: 14:13 DXSR(rw) - Data Slew Rate (D3F I/O Only): Selects slew rate of the I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros.
    Bits: 12:9  DQSNRES(rw) - DQS# Resistor: Selects the on-die pull-up/pull-down resistor for DQS# pins. Same encoding as DQSRES.
    Bits:  8:5  DQSRES(rw) - DQS Resistor: Selects the on-die pull-down/pull-up resistor for DQS pins. DQSRES[3], selects pull-down (when set to 0) or pull-up (when set to 1). DQSRES[2:0], selects the resistor value as follows:
    Bits:  4    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the PDR configuration bit of the individual DATX8.
    Bits:  3    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the PDD configuration bit of the individual DATX8.
    Bits:  2    MDLEN(rw) - Master Delay Line Enable: Enables, if set, all DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or on when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the MDLEN bit in the individual DATX8.
    Bits:  1    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the IOM configuration bit of the individual DATX8.
    Bits:  0    DXODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ, DM, and DQS/DQS# pins of all DATX8 macros. This bit is ORed with the ODT configuration bit of the individual DATX8 ('DATX8 Common Configuration Register (DXCCR)' on page 68)
*/
#define NFP_EMUX_PHY_i_MUPUB_DXCCR                           0x0000003c
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DDPDRCDO(_x)            (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DDPDRCDO_of(_x)         (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DDPDDCDO(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DDPDDCDO_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DYNDXPDR                BIT(23)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DYNDXPDD                BIT(22)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_UDQIOM                  BIT(21)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_UDQPDR                  BIT(20)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_UDQPDD                  BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_UDQODT                  BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_MSBUDQ(_x)              (((_x) & 0x7) << 15)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_MSBUDQ_of(_x)           (((_x) >> 15) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DXSR(_x)                (((_x) & 0x3) << 13)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DXSR_of(_x)             (((_x) >> 13) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DQSNRES(_x)             (((_x) & 0xf) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DQSNRES_of(_x)          (((_x) >> 9) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DQSRES(_x)              (((_x) & 0xf) << 5)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DQSRES_of(_x)           (((_x) >> 5) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DXPDR                   BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DXPDD                   BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_MDLEN                   BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DXIOM                   BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DXCCR_DXODT                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DSGCR -
    Bits: 31    CKEOE(rw) - SDRAM CKE Output Enable: Enables, when set, the output driver on the I/O for SDRAM CKE pins.
    Bits: 30    RSTOE(rw) - SDRAM Reset Output Enable: Enables, when set, the output driver on the I/O for SDRAM RST# pin.
    Bits: 29    ODTOE(rw) - SDRAM ODT Output Enable: Enables, when set, the output driver on the I/O for SDRAM ODT pins.
    Bits: 28    CKOE(rw) - SDRAM CK Output Enable: Enables, when set, the output driver on the I/O for SDRAM CK/CK# pins.
    Bits: 25:24 ODTPDD(rw) - ODT Power Down Driver: Powers down, when set, the output driver on the I/O for ODT[3:0], pins. ODTPDD[0], controls the power down for ODT[0],, ODTPDD[1], controls the power down for ODT[1],, and so on.
    Bits: 21:20 CKEPDD(rw) - CKE Power Down Driver: Powers down, when set, the output driver on the I/O for CKE[3:0], pins. CKEPDD[0], controls the power down for CKE[0],, CKEPDD[1], controls the power down for CKE[1],, and so on.
    Bits: 19    SDRMODE(rw) - Single Data Rate Mode: Indicates if set that the external controller is configured to run in single data rate (SDR) mode. Otherwise if not set the controller is running in half data rate (HDR) mode. This bit not supported in the current version of the PUB.
    Bits: 18    RRMODE(rw) - Rise-to-Rise Mode: Indicates if set that the PHY mission mode is configured to run in rise-to-rise mode. Otherwise if not set the PHY mission modeis running in rise-to- fall mode.
    Bits: 17    ATOAE(rw) - ATO Analog Test Enable: Enables, if set, the analog test output (ATO) I/O.
    Bits: 16    DTOOE(rw) - DTO Output Enable: Enables, when set, the output driver on the I/O for DTO pins.
    Bits: 15    DTOIOM(rw) - DTO I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DTO pins.
    Bits: 14    DTOPDR(rw) - DTO Power Down Receiver: Powers down, when set, the input receiver on the I/O for DTO pins.
    Bits: 13    DTOPDD(rw) - DTO Power Down Driver: Powers down, when set, the output driver on the I/O for DTO pins.
    Bits: 12    DTOODT(rw) - DTO On-Die Termination: Enables, when set, the on-die termination on the I/O for DTO pins.
    Bits: 11:8  PUAD(rw) - PHY Update Acknowledge Delay: Specifies the number of clock cycles that the indication for the completion of PHY update from the PHY to the controller should be delayed. This essentially delays, by this many clock cycles, the de-assertion of dfi_ctrlup_ack and dfi_phyupd_req signals relative to the time when the delay lines or I/Os are updated.
    Bits:  7    BRRMODE(rw) - Bypass Rise-to-Rise Mode: Indicates if set that the PHY bypass mode is configured to run in rise-to-rise mode. Otherwise if not set the PHY bypass mode is running in rise-to-fall mode.
    Bits:  6    DQSGX(rw) - DQS Gate Extension: Specifies if set that the DQS gating must be extended by two DRAM clock cycles and then re-centered, i.e. one clock cycle extension on either side.
    Bits:  5    CUAEN(rw) - Controller Update Acknowledge Enable: Specifies, if set, that the PHY should issue controller update acknowledge when the DFI controller update request is asserted. By default the PHY does not acknowledge controller initiated update requests but simply does an update whenever there is a controller update request. This speeds up the update.
    Bits:  4    LPPLLPD(rw) - Low Power PLL Power Down: Specifies if set that the PHY should respond to the DFI low power opportunity request and power down the PLL of the byte if the wakeup time request satisfies the PLL lock time.
    Bits:  3    LPIOPD(rw) - Low Power I/O Power Down: Specifies if set that the PHY should respond to the DFI low power opportunity request and power down the I/Os of the byte.
    Bits:  2    ZUEN(rw) - Impedance Update Enable: Specifies, if set, that in addition to DDL VT update, the PHY could also perform impedance calibration (update). Refer to the 'Impedance Control Register 0-1 (ZQnCR0-1)' on page 104 bit fields DFICU0, DFICU1 and DFICCU bits to control if an impedance calibration is performed (update) with a DFI controller update request. Refer to the 'Impedance Control Register 0-1 (ZQnCR0-1)' on page 104 bit fields DFIPU0 and DFIPU1 bits to control if an impedance calibration is performed (update) with a DFI PHY update request.
    Bits:  1    BDISEN(rw) - Byte Disable Enable: Specifies if set that the PHY should respond to DFI byte disable request. Otherwise the byte disable from the DFI is ignored in which case bytes can only be disabled using the DXnGCR register.
    Bits:  0    PUREN(rw) - PHY Update Request Enable: Specifies if set, that the PHY should issue PHY- initiated update request when there is DDL VT drift.
*/
#define NFP_EMUX_PHY_i_MUPUB_DSGCR                           0x00000040
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_CKEOE                   BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_RSTOE                   BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_ODTOE                   BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_CKOE                    BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_ODTPDD(_x)              (((_x) & 0x3) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_ODTPDD_of(_x)           (((_x) >> 24) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_CKEPDD(_x)              (((_x) & 0x3) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_CKEPDD_of(_x)           (((_x) >> 20) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_SDRMODE                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_RRMODE                  BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_ATOAE                   BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_DTOOE                   BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_DTOIOM                  BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_DTOPDR                  BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_DTOPDD                  BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_DTOODT                  BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_PUAD(_x)                (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_PUAD_of(_x)             (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_BRRMODE                 BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_DQSGX                   BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_CUAEN                   BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_LPPLLPD                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_LPIOPD                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_ZUEN                    BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_BDISEN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DSGCR_PUREN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCR -
    Bits: 29    UDIMM(rw) - Un-buffered DIMM Address Mirroring: Indicates if set that there is address mirroring on the second rank of an un-buffered DIMM (the rank connected to CS#[1],). In this case, the PUB re-scrambles the bank and address when sending mode register commands to the second rank. This only applies to PUB internal SDRAM transactions. Transactions generated by the controller must make its own adjustments when using an un-buffered DIMM. DCR[NOSRA], must be set if address mirroring is enabled.
    Bits: 28    DDR2T(rw) - DDR 2T Timing: Indicates if set that 2T timing should be used by PUB internally generated SDRAM transactions.
    Bits: 27    NOSRA(rw) - No Simultaneous Rank Access: Specifies if set that simultaneous rank access on the same clock cycle is not allowed. This means that multiple chip select signals should not be asserted at the same time. This may be required on some DIMM systems.
    Bits: 17:10 BYTEMASK(rw) - Byte Mask: Mask applied to all beats of read data on all bytes lanes during read DQS gate training. This allows training to be conducted based on selected bit(s) from the byte lanes. Note that this mask applies in DDR3 MPR operation mode as well and must be in keeping with the PDQ field setting.
    Bits:  7    MPRDQ(rw) - Multi-Purpose Register (MPR) DQ (DDR3 Only): Specifies the value that is driven on non-primary DQ pins during MPR reads. Valid values are:
    Bits:  6:4  PDQ(rw) - Primary DQ (DDR3 Only): Specifies the DQ pin in a byte that is designated as a primary pin for Multi-Purpose Register (MPR) reads. Valid values are 0 to 7 for DQ[0], to DQ[7],, respectively.
    Bits:  3    DDR8BNK(rw) - DDR 8-Bank: Indicates if set that the SDRAM used has 8 banks. tRPA = tRP+1 and tFAW are used for 8-bank DRAMs, other tRPA = tRP and no tFAW is used. Note that a setting of 1 for DRAMs that have fewer than 8 banks still results in correct functionality but less tighter DRAM command spacing for the parameters described here.
    Bits:  2:0  DDRMD(rw) - DDR Mode: SDRAM DDR mode. Valid values are:
*/
#define NFP_EMUX_PHY_i_MUPUB_DCR                             0x00000044
#define   NFP_EMUX_PHY_i_MUPUB_DCR_UDIMM                     BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_DDR2T                     BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_NOSRA                     BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_BYTEMASK(_x)              (((_x) & 0xff) << 10)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_BYTEMASK_of(_x)           (((_x) >> 10) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_MPRDQ                     BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_PDQ(_x)                   (((_x) & 0x7) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_PDQ_of(_x)                (((_x) >> 4) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_DDR8BNK                   BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_DDRMD(_x)                 (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCR_DDRMD_of(_x)              (((_x) >> 0) & 0x7)
#define     NFP_EMUX_PHY_i_MUPUB_DCR_DDRMD_DDR               (1)
#define     NFP_EMUX_PHY_i_MUPUB_DCR_DDRMD_DDR2              (2)
#define     NFP_EMUX_PHY_i_MUPUB_DCR_DDRMD_DDR3              (3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTPR0 -
    Bits: 31:26 tRC(rw) - Activate to activate command delay (same bank). Valid values are 2 to 63.
    Bits: 25:22 tRRD(rw) - Activate to activate command delay (different banks). Valid values are 1 to 15.
    Bits: 21:16 tRAS(rw) - Activate to precharge command delay. Valid values are 2 to 63.
    Bits: 15:12 tRCD(rw) - Activate to read or write delay. Minimum time from when an activate command is issued to when a read or write to the activated row can be issued. Valid values are 2 to 15.
    Bits: 11:8  tRP(rw) - Precharge command period: The minimum time between a precharge command and any other command. Note that the Controller automatically derives tRPA for 8- bank DDR2_Devices by adding 1 to tRP. Valid values are 2 to 15.
    Bits:  7:4  tWTR(rw) - Internal write to read command delay. Valid values are 1 to 15.
    Bits:  3:0  tRTP(rw) - Internal read to precharge command delay. Valid values are 2 to 15.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTPR0                           0x00000048
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRC(_x)                 (((_x) & 0x3f) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRC_of(_x)              (((_x) >> 26) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRRD(_x)                (((_x) & 0xf) << 22)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRRD_of(_x)             (((_x) >> 22) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRAS(_x)                (((_x) & 0x3f) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRAS_of(_x)             (((_x) >> 16) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRCD(_x)                (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRCD_of(_x)             (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRP(_x)                 (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRP_of(_x)              (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tWTR(_x)                (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tWTR_of(_x)             (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRTP(_x)                (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR0_tRTP_of(_x)             (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTPR1 -
    Bits: 31:30 tAOND_tAOFD(rw) - ODT turn-on/turn-off delays (DDR2 only). The delays are in clock cycles. Most DDR2_Devices utilize a fixed value of 2/2.5. For non-standard SDRAMs, the user must ensure that the operational Write Latency is always greater than or equal to the ODT turn-on delay. For example, a DDR2 SDRAM with CAS latency set to 3 and CAS additive latency set to 0 has a Write Latency of 2. Thus 2/2.5 can be used, but not 3/3.5 or higher. Valid values are:
    Bits: 29:26 tWLO(rw) - Write leveling output delay: Number of clock cycles from when write leveling DQS is driven high by the control block to when the results from the SDRAM on DQ is sampled by the control block. This must include the SDRAM tWLO timing parameter plus the round trip delay from control block to SDRAM back to control block.
    Bits: 25:20 tWLMRD(rw) - Minimum delay from when write leveling mode is programmed to the first DQS/DQS# rising edge.
    Bits: 19:11 tRFC(rw) - Refresh-to-Refresh: Indicates the minimum time, in clock cycles, between two refresh commands or between a refresh and an active command. This is derived from the minimum refresh interval from the datasheet, tRFC(min), divided by the clock cycle time. The default number of clock cycles is for the largest JEDEC tRFC(min parameter value supported.
    Bits: 10:5  tFAW(rw) - 4-bank activate period. No more than 4-bank activate commands may be issued in a given tFAW period. Only applies to 8-bank devices. Valid values are 2 to 63.
    Bits:  4:2  tMOD(rw) - Load mode update delay (DDR3 only). The minimum time between a load mode register command and a non-load mode register command. Valid values are:
    Bits:  1:0  tMRD(rw) - Load mode cycle time: The minimum time between a load mode register command and any other command. For DDR3 this is the minimum time between two load mode register commands. Valid values for DDR2 are 2 to 3. For DDR3, the value used for tMRD is 4 plus the value programmed in these bits, i.e. tMRD value for DDR3 ranges from 4 to 7.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTPR1                           0x0000004c
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tAOND_tAOFD(_x)         (((_x) & 0x3) << 30)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tAOND_tAOFD_of(_x)      (((_x) >> 30) & 0x3)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tAOND_tAOFD_2_2_5     (0)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tAOND_tAOFD_3_3_5     (1)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tAOND_tAOFD_4_4_5     (2)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tAOND_tAOFD_5_5_5     (3)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tWLO(_x)                (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tWLO_of(_x)             (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tWLMRD(_x)              (((_x) & 0x3f) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tWLMRD_of(_x)           (((_x) >> 20) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tRFC(_x)                (((_x) & 0x1ff) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tRFC_of(_x)             (((_x) >> 11) & 0x1ff)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tFAW(_x)                (((_x) & 0x3f) << 5)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tFAW_of(_x)             (((_x) >> 5) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD(_x)                (((_x) & 0x7) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_of(_x)             (((_x) >> 2) & 0x7)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_12               (0)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_13               (1)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_14               (2)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_15               (3)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_16               (4)
#define     NFP_EMUX_PHY_i_MUPUB_DTPR1_tMOD_17               (5)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tMRD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR1_tMRD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTPR2 -
    Bits: 31    tCCD(rw) - Read to read and write to write command delay. Valid values are:
    Bits: 30    tRTW(rw) - Read to Write command delay. This parameter allows the user to increase the delay between issuing Write commands to the SDRAM when preceded by Read commands. This provides an option to increase bus turn-around margin for high frequency systems. Valid values are:
    Bits: 29    tRTODT(rw) - Read to ODT delay (DDR3 only). Specifies whether ODT can be enabled immediately after the read post-amble or one clock delay has to be added. If tRTODT is set to 1, then the read-to-write latency is increased by 1 if ODT is enabled. Valid values are:
    Bits: 28:19 tDLLK(rw) - DLL locking time. Valid values are 2 to 1023.
    Bits: 18:15 tCKE(rw) - CKE minimum pulse width. Also specifies the minimum time that the SDRAM must remain in power down or self refresh mode. For DDR3 this parameter must be set to the value of tCKESR which is usually bigger than the value of tCKE. Valid values are 2 to 15.
    Bits: 14:10 tXP(rw) - Power down exit delay. The minimum time between a power down exit command and any other command. This parameter must be set to the maximum of the various minimum power down exit delay parameters specified in the SDRAM datasheet, i.e. max(tXP, tXARD, tXARDS) for DDR2 and max(tXP, tXPDLL) for DDR3. Valid values are 2 to 31.
    Bits:  9:0  tXS(rw) - Self refresh exit delay. The minimum time between a self refresh exit command and any other command. This parameter must be set to the maximum of the various minimum self refresh exit delay parameters specified in the SDRAM datasheet, i.e. max(tXSNR, tXSRD) for DDR2 and max(tXS, tXSDLL) for DDR3. Valid values are 2 to 1023.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTPR2                           0x00000050
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tCCD                    BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tRTW                    BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tRTODT                  BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tDLLK(_x)               (((_x) & 0x3ff) << 19)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tDLLK_of(_x)            (((_x) >> 19) & 0x3ff)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tCKE(_x)                (((_x) & 0xf) << 15)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tCKE_of(_x)             (((_x) >> 15) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tXP(_x)                 (((_x) & 0x1f) << 10)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tXP_of(_x)              (((_x) >> 10) & 0x1f)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tXS(_x)                 (((_x) & 0x3ff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTPR2_tXS_of(_x)              (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR0 -
    Bits: 15:13 RSVD(rw) - Reserved. These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'.
    Bits: 12    PD(rw) - Power-Down Control: Controls the exit time for power-down modes. Refer to the SDRAM datasheet for details on power-down modes. Valid values are:
    Bits: 11:9  WR(rw) - Write Recovery: This is the value of the write recovery in clock cycles. It is calculated by dividing the datasheet write recovery time, tWR (ns) by the datasheet clock cycle time, tCK (ns) and rounding up a non-integer value to the next integer. All other settings are reserved and should not be used. NOTE: tWR (ns) is the time from the first SDRAM positive clock edge after the last data-in pair of a write command, to when a precharge of the same bank can be issued. Valid values are:
    Bits:  8    DR(rw) - DLL Reset: Writing a '1' to this bit will reset the SDRAM DLL. This bit is self- clearing, i.e. it returns back to '0' after the DLL reset has been issued.
    Bits:  7    TM(rw) - Operating Mode: Selects either normal operating mode (0) or test mode (1). Test mode is reserved for the manufacturer and should not be used.
    Bits:  6:4  CL3_1(rw) - CAS Latency: The delay, in clock cycles, between when the SDRAM registers a read command to when data is available. Valid values are: 0010 = 5 0100 = 6 0110 = 7 1000 = 8 1010 = 9 1100 = 10 1110 = 11 0001 = 12 0011 = 13 0101 = 14 All other settings are reserved and should not be used.
    Bits:  3    BT(rw) - Burst Type: Indicates whether a burst is sequential (0) or interleaved (1).
    Bits:  2    CL0(rw) - CAS Latency: The delay, in clock cycles, between when the SDRAM registers a read command to when data is available. Valid values are: 0010 = 5 0100 = 6 0110 = 7 1000 = 8 1010 = 9 1100 = 10 1110 = 11 0001 = 12 0011 = 13 0101 = 14 All other settings are reserved and should not be used.
    Bits:  1:0  BL(rw) - Burst Length: Determines the maximum number of column locations that can be accessed during a given read or write command. Valid values are:
*/
#define NFP_EMUX_PHY_i_MUPUB_MR0                             0x00000054
#define   NFP_EMUX_PHY_i_MUPUB_MR0_RSVD(_x)                  (((_x) & 0x7) << 13)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_RSVD_of(_x)               (((_x) >> 13) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_PD                        BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_WR(_x)                    (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_WR_of(_x)                 (((_x) >> 9) & 0x7)
#define     NFP_EMUX_PHY_i_MUPUB_MR0_WR_5                    (1)
#define     NFP_EMUX_PHY_i_MUPUB_MR0_WR_6                    (2)
#define     NFP_EMUX_PHY_i_MUPUB_MR0_WR_7                    (3)
#define     NFP_EMUX_PHY_i_MUPUB_MR0_WR_8                    (4)
#define     NFP_EMUX_PHY_i_MUPUB_MR0_WR_10                   (5)
#define     NFP_EMUX_PHY_i_MUPUB_MR0_WR_12                   (6)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_DR                        BIT(8)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_TM                        BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_CL3_1(_x)                 (((_x) & 0x7) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_CL3_1_of(_x)              (((_x) >> 4) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_BT                        BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_CL0                       BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_BL(_x)                    (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_MR0_BL_of(_x)                 (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR1 -
    Bits: 15:13 RSVD3(rw) - Reserved. These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'.
    Bits: 12    QOFF(rw) - Output Enable/Disable: When '0', all outputs function normal; when '1' all SDRAM outputs are disabled removing output buffer current. This feature is intended to be used for IDD characterization of read current and should not be used in normal operation.
    Bits: 11    TDQS(rw) - Termination Data Strobe: When enabled ('1') TDQS provides additional termination resistance outputs that may be useful in some system configurations. Refer to the SDRAM datasheet for details.
    Bits: 10    RSVD2(rw) - Reserved. This is a JEDEC reserved bit for DDR3 and is recommended by JEDEC to be programmed to '0'.
    Bits:  9    RTT2(rw) - On Die Termination: Selects the effective resistance for SDRAM on die termination. Valid values are:
    Bits:  8    RSVD1(rw) - Reserved. This is a JEDEC reserved bit for DDR3 and is recommended by JEDEC to be programmed to '0'.
    Bits:  7    LEVEL(rw) - Write Leveling Enable: Enables write-leveling when set.
    Bits:  6    RTT1(rw) - On Die Termination: Selects the effective resistance for SDRAM on die termination. Valid values are:
    Bits:  5    DIC1(rw) - Output Driver Impedance Control: Controls the output drive strength. Valid values are:
    Bits:  4:3  AL(rw) - Posted CAS Additive Latency: Setting additive latency that allows read and write commands to be issued to the SDRAM earlier than normal (refer to the SDRAM datasheet for details). Valid values are:
    Bits:  2    RTT0(rw) - On Die Termination: Selects the effective resistance for SDRAM on die termination. Valid values are:
    Bits:  1    DIC0(rw) - Output Driver Impedance Control: Controls the output drive strength. Valid values are:
    Bits:  0    DE(rw) - DLL Enable/Disable: Enable (0) or disable (1) the DLL. DLL must be enabled for normal operation.
*/
#define NFP_EMUX_PHY_i_MUPUB_MR1                             0x00000058
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RSVD3(_x)                 (((_x) & 0x7) << 13)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RSVD3_of(_x)              (((_x) >> 13) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_QOFF                      BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_TDQS                      BIT(11)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RSVD2                     BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RTT2                      BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RSVD1                     BIT(8)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_LEVEL                     BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RTT1                      BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_DIC1                      BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_AL(_x)                    (((_x) & 0x3) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_AL_of(_x)                 (((_x) >> 3) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_RTT0                      BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_DIC0                      BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_MR1_DE                        BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR2 -
    Bits: 15:11 RSVD2(rw) - These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'
    Bits: 10:9  RTTWR(rw) - Dynamic ODT: Selects RTT for dynamic ODT. Valid values are:
    Bits:  8    RSVD1(rw) - Reserved. This bit is JEDEC reserved and is recommended by JEDEC to be programmed to '0'.
    Bits:  7    SRT(rw) - Self-Refresh Temperature Range: Selects either normal ('0') or extended ('1') operating temperature range during self-refresh.
    Bits:  6    ASR(rw) - Auto Self-Refresh: When enabled ('1'), SDRAM automatically provides self-refresh power management functions for all supported operating temperature values. Otherwise the SRT bit must be programmed to indicate the temperature range.
    Bits:  5:3  CWL(rw) - CAS Write Latency: The delay, in clock cycles, between when the SDRAM registers a write command to when write data is available.All other settings are reserved and should not be used. Valid values are:
    Bits:  2:0  PASR(rw) - Partial Array Self Refresh: Specifies that data located in areas of the array beyond the specified location will be lost if self refresh is entered. Valid settings for 4 banks are: 000 = Full Array 001 = Half Array (BA[1:0] = 00 & 01) 010 = Quarter Array (BA[1:0] = 00) 011 = Not defined 100 = 3/4 Array (BA[1:0] = 01, 10, & 11) 101 = Half Array (BA[1:0] = 10 & 11) 110 = Quarter Array (BA[1:0] = 11) 111 = Not defined Valid settings for 8 banks are: 000 = Full Array 001 = Half Array (BA[2:0] = 000, 001, 010 & 011) 010 = Quarter Array (BA[2:0] = 000, 001) 011 = 1/8 Array (BA[2:0] = 000) 100 = 3/4 Array (BA[2:0] = 010, 011, 100, 101, 110 & 111) 101 = Half Array (BA[2:0] = 100, 101, 110 & 111) 110 = Quarter Array (BA[2:0] = 110 & 111) 111 = 1/8 Array (BA[2:0] 111)
*/
#define NFP_EMUX_PHY_i_MUPUB_MR2                             0x0000005c
#define   NFP_EMUX_PHY_i_MUPUB_MR2_RSVD2(_x)                 (((_x) & 0x1f) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_RSVD2_of(_x)              (((_x) >> 11) & 0x1f)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_RTTWR(_x)                 (((_x) & 0x3) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_RTTWR_of(_x)              (((_x) >> 9) & 0x3)
#define     NFP_EMUX_PHY_i_MUPUB_MR2_RTTWR_RZQ_4             (1)
#define     NFP_EMUX_PHY_i_MUPUB_MR2_RTTWR_RZQ_2             (2)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_RSVD1                     BIT(8)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_SRT                       BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_ASR                       BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_CWL(_x)                   (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_CWL_of(_x)                (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_PASR(_x)                  (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_MR2_PASR_of(_x)               (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_MR3 -
    Bits: 15:3  RSVD(rw) - These are JEDEC reserved bits and are recommended by JEDEC to be programmed to '0'
    Bits:  2    MPR(rw) - Multi-Purpose Register Enable: Enables, if set, that read data should come from the Multi-Purpose Register. Otherwise read data come from the DRAM array.
    Bits:  1:0  MPRLOC(rw) - Multi-Purpose Register (MPR) Location: Selects MPR data location: Valid value are: 00 = Predefined pattern for system calibration All other settings are reserved and should not be used.
*/
#define NFP_EMUX_PHY_i_MUPUB_MR3                             0x00000060
#define   NFP_EMUX_PHY_i_MUPUB_MR3_RSVD(_x)                  (((_x) & 0x1fff) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_MR3_RSVD_of(_x)               (((_x) >> 3) & 0x1fff)
#define   NFP_EMUX_PHY_i_MUPUB_MR3_MPR                       BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_MR3_MPRLOC(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_MR3_MPRLOC_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ODTCR -
    Bits: 29:28 WRODT3(ro) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 25:24 WRODT2(ro) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 21:20 WRODT1(rw) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 17:16 WRODT0(rw) - Write ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a write command is sent to rank n. WRODT0, WRODT1, WRODT2, and WRODT3 specify ODT settings when a write is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to enable ODT only on rank being written to.
    Bits: 13:12 RDODT3(ro) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
    Bits:  9:8  RDODT2(ro) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
    Bits:  5:4  RDODT1(rw) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
    Bits:  1:0  RDODT0(rw) - Read ODT: Specifies whether ODT should be enabled ('1') or disabled ('0') on each of the up to four ranks when a read command is sent to rank n. RDODT0, RDODT1, RDODT2, and RDODT3 specify ODT settings when a read is to rank 0, rank 1, rank 2, and rank 3, respectively. The four bits of each field each represent a rank, the LSB being rank 0 and the MSB being rank 3. Default is to disable ODT during reads.
*/
#define NFP_EMUX_PHY_i_MUPUB_ODTCR                           0x00000064
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT3(_x)              (((_x) & 0x3) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT3_of(_x)           (((_x) >> 28) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT2(_x)              (((_x) & 0x3) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT2_of(_x)           (((_x) >> 24) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT1(_x)              (((_x) & 0x3) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT1_of(_x)           (((_x) >> 20) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT0(_x)              (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_WRODT0_of(_x)           (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT3(_x)              (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT3_of(_x)           (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT2(_x)              (((_x) & 0x3) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT2_of(_x)           (((_x) >> 8) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT1(_x)              (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT1_of(_x)           (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT0(_x)              (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ODTCR_RDODT0_of(_x)           (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTCR -
    Bits: 31:28 RFSHDT(rw) - Refresh During Training: A non-zero value specifies that a burst of refreshes equal to the number specified in this field should be sent to the SDRAM after training each rank except the last rank.
    Bits: 25:24 RANKEN(rw) - Rank Enable: Specifies the ranks that are enabled for data-training. Bit 0 controls rank 0, bit 1 controls rank 1, bit 2 controls rank 2, and bit 3 controls rank 3. Setting the bit to '1' enables the rank, and setting it to '0' disables the rank.
    Bits: 23    DTEXG(rw) - Data Training with Early/Extended Gate: Specifies if set that the DQS gate training should be performed with an early/extended gate as specified in DSGCR.DQSGX.
    Bits: 22    DTEXD(rw) - Data Training Extended Write DQS: Enables, if set, an extended write DQS whereby two additional pulses of DQS are added as post-amble to a burst of writes. Generally this should only be enabled when running read bit deskew with the intention of performing read eye deskew prior to running write leveling adjustment.
    Bits: 21    DTDSTP(w1c) - Data Training Debug Step: A write of 1 to this bit steps the data training algorithm through a single step. This bit is self-clearing.
    Bits: 20    DTDEN(rw) - Data Training Debug Enable: Enables, if set, the data training debug mode.
    Bits: 19:16 DTDBS(rw) - Data Training Debug Byte Select: Selects the byte during data training debug mode.
    Bits: 14    DTWDQMO(rw) - Data Training WDQ Margin Override: If set the Training WDQ Margin value specified in DTCR[11:8], (DTWDQM) is used during data training. Otherwise the value is computed as of the ddr_clk period measurement found durig calibration of the WDQ LCDL.
    Bits: 13    DTBDC(rw) - Data Training Bit Deskew Centering: Enables, if set, eye centering capability during write and read bit deskew training.
    Bits: 12    DTWBDDM(rw) - Data Training Write Bit Deskew Data Mask. If set it enables write bit deskew of the data mask
    Bits: 11:8  DTWDQM(rw) - Training WDQ Margin: Defines how close to 0 or how close to 2*(wdq calibration_value) the WDQ lcdl can be moved during training. Basically defines how much timing margin.
    Bits:  7    DTCMPD(rw) - Data Training Compare Data: Specifies, if set, that DQS gate training should also check if the returning read data is correct. Otherwise data-training only checks if the correct number of DQS edges were returned.
    Bits:  6    DTMPR(rw) - Data Training Using MPR (DDR3 Only): Specifies, if set, that DQS gate training should use the SDRAM Multi-Purpose Register (MPR) register. Otherwise data- training is performed by first writing to some locations in the SDRAM and then reading them back.
    Bits:  5:4  DTRANK(rw) - Data Training Rank: Selects the SDRAM rank to be used during data bit deskew and eye centering.
    Bits:  3:0  DTRPTN(rw) - Data Training Repeat Number: Repeat number used to confirm stability of DDR write or read
*/
#define NFP_EMUX_PHY_i_MUPUB_DTCR                            0x00000068
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_RFSHDT(_x)               (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_RFSHDT_of(_x)            (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_RANKEN(_x)               (((_x) & 0x3) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_RANKEN_of(_x)            (((_x) >> 24) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTEXG                    BIT(23)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTEXD                    BIT(22)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTDSTP                   BIT(21)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTDEN                    BIT(20)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTDBS(_x)                (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTDBS_of(_x)             (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTWDQMO                  BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTBDC                    BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTWBDDM                  BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTWDQM(_x)               (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTWDQM_of(_x)            (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTCMPD                   BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTMPR                    BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTRANK(_x)               (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTRANK_of(_x)            (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTRPTN(_x)               (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTCR_DTRPTN_of(_x)            (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR0 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTAR0                           0x0000006c
#define   NFP_EMUX_PHY_i_MUPUB_DTAR0_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR0_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR0_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR0_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR0_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR0_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR1 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTAR1                           0x00000070
#define   NFP_EMUX_PHY_i_MUPUB_DTAR1_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR1_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR1_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR1_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR1_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR1_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR2 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTAR2                           0x00000074
#define   NFP_EMUX_PHY_i_MUPUB_DTAR2_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR2_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR2_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR2_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR2_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR2_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTAR3 -
    Bits: 30:28 DTBANK(rw) - Data Training Bank Address: Selects the SDRAM bank address to be used during data training.
    Bits: 27:12 DTROW(rw) - Data Training Row Address: Selects the SDRAM row address to be used during data training.
    Bits: 11:0  DTCOL(rw) - Data Training Column Address: Selects the SDRAM column address to be used during data training. The lower four bits of this address must always be '000'.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTAR3                           0x00000078
#define   NFP_EMUX_PHY_i_MUPUB_DTAR3_DTBANK(_x)              (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR3_DTBANK_of(_x)           (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR3_DTROW(_x)               (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR3_DTROW_of(_x)            (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR3_DTCOL(_x)               (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTAR3_DTCOL_of(_x)            (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTDR0 -
    Bits: 31:24 DTBYTE3(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 23:16 DTBYTE2(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 15:8  DTBYTE1(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits:  7:0  DTBYTE0(rw) - Data Training Data: The second 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTDR0                           0x0000007c
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE3(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE3_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE2(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE2_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE1(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE1_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE0(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR0_DTBYTE0_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTDR1 -
    Bits: 31:24 DTBYTE7(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 23:16 DTBYTE6(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits: 15:8  DTBYTE5(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
    Bits:  7:0  DTBYTE4(rw) - Data Training Data: The first 4 bytes of data used during data training. This same data byte is used for each Byte Lane. Default sequence is a walking 1 while toggling data every data cycle.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTDR1                           0x00000080
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE7(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE7_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE6(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE6_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE5(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE5_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE4(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTDR1_DTBYTE4_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTEDR0 -
    Bits: 31:24 DTWBMX(ro) - Data Training Write BDL Shift Maximum.
    Bits: 23:16 DTWBMN(ro) - Data Training Write BDL Shift Minimum.
    Bits: 15:8  DTWLMX(ro) - Data Training WDQ LCDL Maximum.
    Bits:  7:0  DTWLMN(ro) - Data Training WDQ LCDL Minimum.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTEDR0                          0x00000084
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWBMX(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWBMX_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWBMN(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWBMN_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWLMX(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWLMX_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWLMN(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR0_DTWLMN_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DTEDR1 -
    Bits: 31:24 DTRBMX(ro) - Data Training Read BDL Shift Maximum.
    Bits: 23:16 DTRBMN(ro) - Data Training Read BDL Shift Minimum.
    Bits: 15:8  DTRLMX(ro) - Data Training RDQS LCDL Maximum.
    Bits:  7:0  DTRLMN(ro) - Data Training RDQS LCDL Minimum.
*/
#define NFP_EMUX_PHY_i_MUPUB_DTEDR1                          0x00000088
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRBMX(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRBMX_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRBMN(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRBMN_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRLMX(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRLMX_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRLMN(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DTEDR1_DTRLMN_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_PGCR2 -
    Bits: 31    DYNACPDD(rw) - Dynamic AC Power Down Driver: Powers down, when set, the output driver on I/O for ADDR and BA. This bit is ORed with bit ACIOCR[3] (ACPDD)
    Bits: 30    LPMSTRC0(rw) - Low-Power Master Channel 0: set to 1 to have channel 0 act as master to drive channel 1 low-power functions simultaneously. Only valid in shared-AC mode.
    Bits: 29    ACPDDC(rw) - AC Power-Down with Dual Channels : Set to 1 to power-down address/command lane when both data channels are powered-down. Only valid in shared-AC mode.
    Bits: 28    SHRAC(rw) - Shared-AC mode: set to 1 to enable shared address/command mode with two independent data channels - available only if shared address/command mode support is compiled in.
    Bits: 27:20 PUBMODE(rw) - PUB Mode Timer: Specifies the number of controller clocks to wait when entering and exiting pub mode data training. The default value ensures controller refreshes do not cause memory model errors when entering and exiting data training. The value should be increased if controller initiated SDRAM ZQ short or long operation may occur just before or just after the execution of data training.
    Bits: 19    FXDLAT(rw) - Fixed Latency: Specified whether all reads should be returned to the controller with a fixed read latency. Enabling fixed read latency increases the read latency. Valid values are:
    Bits: 18    NOBUB(rw) - No Bubbles: Specified whether reads should be returned to the controller with no bubbles. Enabling no-bubble reads increases the read latency. Valid values are:
    Bits: 17:0  tREFPRD(rw) - Refresh Period: Indicates the period in clock cycles after which the PUB has to issue a refresh command to the SDRAM. This is derived from the maximum refresh interval from the datasheet, tRFC(max) or REFI, divided by the clock cycle time. A further 400 clocks must be subtracted from the derived number to account for command flow and missed slots of refreshes in the internal PUB blocks. The default corresponds to DDR3 9*7.8us at 1066MHz when a burst of 9 refreshes are issued at every refresh interval.
*/
#define NFP_EMUX_PHY_i_MUPUB_PGCR2                           0x0000008c
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_DYNACPDD                BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_LPMSTRC0                BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_ACPDDC                  BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_SHRAC                   BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_PUBMODE(_x)             (((_x) & 0xff) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_PUBMODE_of(_x)          (((_x) >> 20) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_FXDLAT                  BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_NOBUB                   BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_tREFPRD(_x)             (((_x) & 0x3ffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_PGCR2_tREFPRD_of(_x)          (((_x) >> 0) & 0x3ffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMGCR0 -
    Bits: 31    MIRROR(rw) - RDIMM Mirror: Selects between two different ballouts of the RDIMM buffer chip for front or back operation. This register bit controls the buffer chip MIRROR signal.
    Bits: 30    QCSEN(rw) - RDMIMM Quad CS Enable: Enables, if set, the Quad CS mode for the RDIMM registering buffer chip. This register bit controls the buffer chip QCSEN# signal.
    Bits: 29    MIRROROE(rw) - MIRROR Output Enable: Enables, when set, the output driver on the I/O for MIRROR pin.
    Bits: 28    QCSENOE(rw) - QCSEN# Output Enable: Enables, when set, the output driver on the I/O for QCSEN# pin.
    Bits: 27    RDIMMIOM(rw) - RDIMM Outputs I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for QCSEN# and MIRROR pins.
    Bits: 26    RDIMMPDR(rw) - RDIMM Outputs Power Down Receiver: Powers down, when set, the input receiver on the I/O for QCSEN# and MIRROR pins.
    Bits: 25    RDIMMPDD(rw) - RDIMM Outputs Power Down Driver: Powers down, when set, the output driver on the I/O for QCSEN# and MIRROR pins.
    Bits: 24    RDIMMODT(rw) - RDIMM Outputs On-Die Termination: Enables, when set, the on-die termination on the I/O for QCSEN# and MIRROR pins.
    Bits: 23    ERROUTOE(rw) - ERROUT# Output Enable: Enables, when set, the output driver on the I/O for ERROUT# pin.
    Bits: 22    ERROUTIOM(rw) - ERROUT# I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for ERROUT# pin.
    Bits: 21    ERROUTPDR(rw) - ERROUT# Power Down Receiver: Powers down, when set, the input receiver on the I/O for ERROUT# pin.
    Bits: 20    ERROUTPDD(rw) - ERROUT# Power Down Driver: Powers down, when set, the output driver on the I/O for ERROUT# pin.
    Bits: 19    ERROUTODT(rw) - ERROUT# On-Die Termination: Enables, when set, the on-die termination on the I/O for ERROUT# pin.
    Bits: 18    PARINOE(rw) - PAR_IN Output Enable: Enables, when set, the output driver on the I/O for PAR_IN pin.
    Bits: 17    PARINIOM(rw) - PAR_IN I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for PAR_IN pin.
    Bits: 16    PARINPDR(rw) - PAR_IN Power Down Receiver: Powers down, when set, the input receiver on the I/O for PAR_IN pin.
    Bits: 15    PARINPDD(rw) - PAR_IN Power Down Driver: Powers down, when set, the output driver on the I/O for PAR_IN pin.
    Bits: 14    PARINODT(rw) - PAR_IN On-Die Termination: Enables, when set, the on-die termination on the I/O for PAR_IN pin.
    Bits:  2    SOPERR(rw) - Stop On Parity Error: Indicates, if set, that the PUB is to stop driving commands to the DRAM upon encountering a parity error. Transactions can resume only after status is cleared via PIR.CLRSR.
    Bits:  1    ERRNOREG(rw) - Parity Error No Registering: Indicates, if set, that parity error signal from the RDIMM should be passed to the DFI controller without any synchronization or registering. Otherwise, the error signal is synchronized as shown in Figure 4-28 on page 208.
    Bits:  0    RDIMM(rw) - Registered DIMM: Indicates if set that a registered DIMM is used. In this case, the PUB increases the SDRAM write and read latencies (WL/RL) by 1 and also enforces that accesses adhere to RDIMM buffer chip. This only applies to PUB internal SDRAM transactions. Transactions generated by the controller must make its own adjustments to WL/RL when using a registered DIMM. The DCR.NOSRA register bit must be set to '1' if using the standard RDIMM buffer chip so that normal DRAM accesses do not assert multiple chip select bits at the same time.
*/
#define NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0                       0x000000b0
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_MIRROR              BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_QCSEN               BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_MIRROROE            BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_QCSENOE             BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_RDIMMIOM            BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_RDIMMPDR            BIT(26)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_RDIMMPDD            BIT(25)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_RDIMMODT            BIT(24)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_ERROUTOE            BIT(23)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_ERROUTIOM           BIT(22)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_ERROUTPDR           BIT(21)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_ERROUTPDD           BIT(20)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_ERROUTODT           BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_PARINOE             BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_PARINIOM            BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_PARINPDR            BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_PARINPDD            BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_PARINODT            BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_SOPERR              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_ERRNOREG            BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR0_RDIMM               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMGCR1 -
    Bits: 31:16 CRINIT(rw) - Control Registers Initialization Enable: Indicates which RDIMM buffer chip control registers (RC0 to RC15) should be initialized (written) when the PUB is triggered to initialize the buffer chip. A setting of '1' on CRINIT[n], bit means that CRn should be written during initialization.
    Bits: 14:12 tBCMRD(rw) - Command word to command word programming delay: Number of DRAM clock cycles between two RDIMM buffer chip command programming accesses. The value used for tBCMRD is 8 plus the value programmed in these bits, i.e. tBCMRD value ranges from 8 to 15. This parameter corresponds to the buffer chip tMRD parameter.
    Bits: 11:0  tBCSTAB(rw) - Stabilization time: Number of DRAM clock cycles for the RDIMM buffer chip to stabilize. This parameter corresponds to the buffer chip tSTAB parameter. Default value is in decimal format and corresponds to 6us at 533MHz.
*/
#define NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1                       0x000000b4
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1_CRINIT(_x)          (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1_CRINIT_of(_x)       (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1_tBCMRD(_x)          (((_x) & 0x7) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1_tBCMRD_of(_x)       (((_x) >> 12) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1_tBCSTAB(_x)         (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMGCR1_tBCSTAB_of(_x)      (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMCR0 -
    Bits: 31:28 RC7(rw) - Control Word 7: Reserved, free to use by vendor.
    Bits: 27:24 RC6(rw) - Control Word 6: Reserved, free to use by vendor.
    Bits: 23:20 RC5(rw) - Control Word 5 (CK Driver Characteristics Control Word): RC5[1:0], is driver settings for clock Y1, Y1#, Y3, and Y3# outputs, and RC5[3:2], is driver settings for clock Y0, Y0#, Y2, and Y2# outputs. Bit definitions are:
    Bits: 19:16 RC4(rw) - Control Word 4 (Control Signals Driver Characteristics Control Word): RC4[1:0], is driver settings for control A outputs, and RC4[3:2], is driver settings for control B outputs. Bit definitions are:
    Bits: 15:12 RC3(rw) - Control Word 3 (Command/Address Signals Driver Characteristics Control Word): RC3[1:0], is driver settings for command/address A outputs, and RC3[3:2], is driver settings for command/address B outputs. Bit definitions are:
    Bits: 11:8  RC2(rw) - Control Word 2 (Timing Control Word): Bit definitions are:
    Bits:  7:4  RC1(rw) - Control Word 1 (Clock Driver Enable Control Word): Bit definitions are: RC1[0],: 0 = Y0/Y0# clock enabled, 1 = Y0/Y0# clock disabled. RC1[1],: 0 = Y1/Y1# clock enabled, 1 = Y1/Y1# clock disabled. RC1[2],: 0 = Y2/Y2# clock enabled, 1 = Y2/Y2# clock disabled. RC1[3],: 0 = Y3/Y3# clock enabled, 1 = Y3/Y3# clock disabled.
    Bits:  3:0  RC0(rw) - Control Word 0 (Global Features Control Word): Bit definitions are: RC0[0],: 0 = Output inversion enabled, 1 = Output inversion disabled. RC0[1],: 0 = Floating outputs disabled, 1 = Floating outputs enabled. RC0[2],: 0 = A outputs enabled, 1 = A outputs disabled. RC0[3],: 0 = B outputs enabled, 1 = B outputs disabled.
*/
#define NFP_EMUX_PHY_i_MUPUB_RDIMMCR0                        0x000000b8
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC7(_x)              (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC7_of(_x)           (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC6(_x)              (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC6_of(_x)           (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC5(_x)              (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC5_of(_x)           (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC4(_x)              (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC4_of(_x)           (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC3(_x)              (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC3_of(_x)           (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC2(_x)              (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC2_of(_x)           (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC1(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC1_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC0(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR0_RC0_of(_x)           (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_RDIMMCR1 -
    Bits: 31:28 RC15(rw) - Control Word 15: Reserved for future use.
    Bits: 27:24 RC14(rw) - Control Word 14: Reserved for future use.
    Bits: 23:20 RC13(rw) - Control Word 13: Reserved for future use.
    Bits: 19:16 RC12(rw) - Control Word 12: Reserved for future use.
    Bits: 15:12 RC11(rw) - Control Word 11 (Operating Voltage VDD Control Word):
    Bits: 11:8  RC10(rw) - Control Word 10 (RDIMM Operating Speed Control Word): RC10[2:0], is RDIMM operating speed setting as follows RC10[3],: Don't care.:
    Bits:  7:4  RC9(rw) - Control Word 9 (Power Saving Settings Control Word): Bit definitions are: RC9[0]: 0 = Floating outputs as defined in RC0, 1 = Weak drive enabled. RC9[1]: 0 = Reserved. RC9[2]: 0 = CKE power down with IBT ON, QxODT is a function of DxODT, 1 = CKE power down with IBT off, QxODT held LOW. RC9[2] is valid only when RC9[3] is 1. RC9[3]: 0 = CKE power down mode disabled, 1 = CKE power down mode enabled
    Bits:  3:0  RC8(rw) - Control Word 8 (Additional Input Bus Termination Setting Control Word):
*/
#define NFP_EMUX_PHY_i_MUPUB_RDIMMCR1                        0x000000bc
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC15(_x)             (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC15_of(_x)          (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC14(_x)             (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC14_of(_x)          (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC13(_x)             (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC13_of(_x)          (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC12(_x)             (((_x) & 0xf) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC12_of(_x)          (((_x) >> 16) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC11(_x)             (((_x) & 0xf) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC11_of(_x)          (((_x) >> 12) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC10(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC10_of(_x)          (((_x) >> 8) & 0xf)
#define     NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_800 (0)
#define     NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_1066 (1)
#define     NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_1333 (2)
#define     NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC10_DDR3_DDR3L_1600 (3)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC9(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC9_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC8(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC8_of(_x)           (((_x) >> 0) & 0xf)
#define     NFP_EMUX_PHY_i_MUPUB_RDIMMCR1_RC8_Off            (7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUAR -
    Bits: 11    ATYPE(rw) - Access Type: Specifies the type of access to be performed using this address. Valid values are:
    Bits: 10    INCA(rw) - Increment Address: Specifies, if set, that the cache address specified in WADDR and SADDR should be automatically incremented after each access of the cache. The increment happens in such a way that all the slices of a selected word are first accessed before going to the next word.
    Bits:  9:8  CSEL(rw) - Cache Select: Selects the cache to be accessed. Valid values are:
    Bits:  7:4  CSADDR(rw) - Cache Slice Address: Address of the cache slice to be accessed.
    Bits:  3:0  CWADDR(rw) - Cache Word Address: Address of the cache word to be accessed.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCUAR                           0x000000c0
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_ATYPE                   BIT(11)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_INCA                    BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_CSEL(_x)                (((_x) & 0x3) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_CSEL_of(_x)             (((_x) >> 8) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_CSADDR(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_CSADDR_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_CWADDR(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCUAR_CWADDR_of(_x)           (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUDR -
    Bits: 31:0  CDATA(rw) - Cache Data: Data to be written to or read from a cache. This data corresponds to the cache word slice specified by the DCU Address Register.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCUDR                           0x000000c4
#define   NFP_EMUX_PHY_i_MUPUB_DCUDR_CDATA(_x)               (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCUDR_CDATA_of(_x)            (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCURR -
    Bits: 23    XCEN(rw) - Expected Compare Enable: Indicates if set that read data coming back from the SDRAM should be should be compared with the expected data.
    Bits: 22    RCEN(rw) - Read Capture Enable: Indicates if set that read data coming back from the SDRAM should be captured into the read data cache.
    Bits: 21    SCOF(rw) - Stop Capture On Full: Specifies if set that the capture of read data should stop when the capture cache is full.
    Bits: 20    SONF(rw) - Stop On Nth Fail: Specifies if set that the execution of commands and the capture of read data should stop when there are N read data failures. The number of failures is specified by NFAIL. Otherwise commands execute until the end of the program or until manually stopped using a STOP command.
    Bits: 19:12 NFAIL(rw) - Number of Failures: Specifies the number of failures after which the execution of commands and the capture of read data should stop if SONF bit of this register is set. Execution of commands and the capture of read data will stop after (NFAIL+1) failures if SONF is set. Valid values are from 0 to 254.
    Bits: 11:8  EADDR(rw) - End Address: Cache word address where the execution of command should end.
    Bits:  7:4  SADDR(rw) - Start Address: Cache word address where the execution of commands should begin.
    Bits:  3:0  DINST(rw) - DCU Instruction: Selects the DCU command to be executed: Valid values are:
*/
#define NFP_EMUX_PHY_i_MUPUB_DCURR                           0x000000c8
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_XCEN                    BIT(23)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_RCEN                    BIT(22)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_SCOF                    BIT(21)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_SONF                    BIT(20)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_NFAIL(_x)               (((_x) & 0xff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_NFAIL_of(_x)            (((_x) >> 12) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_EADDR(_x)               (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_EADDR_of(_x)            (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_SADDR(_x)               (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_SADDR_of(_x)            (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_DINST(_x)               (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCURR_DINST_of(_x)            (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCULR -
    Bits: 31:28 XLEADDR(rw) - Expected Data Loop End Address: The last expected data cache word address that contains valid expected data. Expected data should looped between 0 and this address.
    Bits: 17    IDA(rw) - Increment DRAM Address: Indicates if set that DRAM addresses should be incremented every time a DRAM read/write command inside the loop is executed.
    Bits: 16    LINF(rw) - Loop Infinite: Indicates if set that the loop should be executed indefinitely until stopped by the STOP command. Otherwise the loop is execute LCNT times.
    Bits: 15:8  LCNT(rw) - Loop Count: The number of times that the loop should be executed if LINF is not set.
    Bits:  7:4  LEADDR(rw) - Loop End Address: Command cache word address where the loop should end.
    Bits:  3:0  LSADDR(rw) - Loop Start Address: Command cache word address where the loop should start.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCULR                           0x000000cc
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_XLEADDR(_x)             (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_XLEADDR_of(_x)          (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_IDA                     BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LINF                    BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LCNT(_x)                (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LCNT_of(_x)             (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LEADDR(_x)              (((_x) & 0xf) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LEADDR_of(_x)           (((_x) >> 4) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LSADDR(_x)              (((_x) & 0xf) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCULR_LSADDR_of(_x)           (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUGCR -
    Bits: 15:0  RCSW(rw) - Read Capture Start Word: The capture and compare of read data should start after Nth word. For example setting this value to 12 will skip the first 12 read data.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCUGCR                          0x000000d0
#define   NFP_EMUX_PHY_i_MUPUB_DCUGCR_RCSW(_x)               (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCUGCR_RCSW_of(_x)            (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUTPR -
    Bits: 31:24 tDCUT3(rw) - DCU Generic Timing Parameter 3.
    Bits: 23:16 tDCUT2(rw) - DCU Generic Timing Parameter 2.
    Bits: 15:8  tDCUT1(rw) - DCU Generic Timing Parameter 1.
    Bits:  7:0  tDCUT0(rw) - DCU Generic Timing Parameter 0.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCUTPR                          0x000000d4
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT3(_x)             (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT3_of(_x)          (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT2(_x)             (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT2_of(_x)          (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT1(_x)             (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT1_of(_x)          (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT0(_x)             (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCUTPR_tDCUT0_of(_x)          (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUSR0 -
    Bits:  2    CFULL(ro) - Capture Full: Indicates if set that the capture cache is full.
    Bits:  1    CFAIL(ro) - Capture Fail: Indicates if set that at least one read data word has failed.
    Bits:  0    RDONE(ro) - Run Done: Indicates if set that the DCU has finished executing the commands in the command cache. This bit is also set to indicate that a STOP command has successfully been executed and command execution has stopped.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCUSR0                          0x000000d8
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR0_CFULL                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR0_CFAIL                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR0_RDONE                  BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DCUSR1 -
    Bits: 31:24 LPCNT(ro) - Loop Count: Indicates the value of the loop count. This is useful when the program has stopped because of failures to assess how many reads were executed before first fail.
    Bits: 23:16 FLCNT(ro) - Fail Count: Number of read words that have failed.
    Bits: 15:0  RDCNT(ro) - Read Count: Number of read words returned from the SDRAM.
*/
#define NFP_EMUX_PHY_i_MUPUB_DCUSR1                          0x000000dc
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR1_LPCNT(_x)              (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR1_LPCNT_of(_x)           (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR1_FLCNT(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR1_FLCNT_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR1_RDCNT(_x)              (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DCUSR1_RDCNT_of(_x)           (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTRR -
    Bits: 26:25 BCCSEL(rw) - BIST Clock Cycle Select: Selects the clock numbers on which the AC loopback data is written into the FIFO. Data is written into the loopback FIFO once every four clock cycles. Valid values are:
    Bits: 24:23 BCKSEL(rw) - BIST CK Select: Selects the CK that should be used to register the AC loopback signals from the I/Os. Valid values are:
    Bits: 22:19 BDXSEL(rw) - BIST DATX8 Select: Select the byte lane for comparison of loopback/read data. Valid values are 0 to 8.
    Bits: 18:17 BDPAT(rw) - BIST Data Pattern Selects the data pattern used during BIST. Valid values are:
    Bits: 16    BDMEN(rw) - BIST Data Mask Enable: Enables if set that the data mask BIST should be included in the BIST run, i.e. data pattern generated and loopback data compared. This is valid only for loopback mode.
    Bits: 15    BACEN(rw) - BIST AC Enable: Enables the running of BIST on the address/command lane PHY. This bit is exclusive with BDXEN, i.e. both cannot be set to '1' at the same time.
    Bits: 14    BDXEN(rw) - BIST DATX8 Enable: Enables the running of BIST on the data byte lane PHYs. This bit is exclusive with BACEN, i.e. both cannot be set to '1' at the same time.
    Bits: 13    BSONF(rw) - BIST Stop On Nth Fail: Specifies if set that the BIST should stop when an nth data word or address/command comparison error has been encountered.
    Bits: 12:5  NFAIL(rw) - Number of Failures: Specifies the number of failures after which the execution of commands and the capture of read data should stop if BSONF bit of this register is set. Execution of commands and the capture of read data will stop after (NFAIL+1) failures if BSONF is set.
    Bits:  4    BINF(rw) - BIST Infinite Run: Specifies if set that the BIST should be run indefinitely until when it is either stopped or a failure has been encountered. Otherwise BIST is run until number of BIST words specified in the BISTWCR register has been generated.
    Bits:  3    BMODE(rw) - BIST Mode Selects the mode in which BIST is run. Valid values are:
    Bits:  2:0  BINST(rw) - BIST Instruction: Selects the BIST instruction to be executed: Valid values are:
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTRR                          0x00000100
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BCCSEL(_x)             (((_x) & 0x3) << 25)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BCCSEL_of(_x)          (((_x) >> 25) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BCKSEL(_x)             (((_x) & 0x3) << 23)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BCKSEL_of(_x)          (((_x) >> 23) & 0x3)
#define     NFP_EMUX_PHY_i_MUPUB_BISTRR_BCKSEL_CK0           (0)
#define     NFP_EMUX_PHY_i_MUPUB_BISTRR_BCKSEL_CK1           (1)
#define     NFP_EMUX_PHY_i_MUPUB_BISTRR_BCKSEL_CK2           (2)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BDXSEL(_x)             (((_x) & 0xf) << 19)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BDXSEL_of(_x)          (((_x) >> 19) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BDPAT(_x)              (((_x) & 0x3) << 17)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BDPAT_of(_x)           (((_x) >> 17) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BDMEN                  BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BACEN                  BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BDXEN                  BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BSONF                  BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_NFAIL(_x)              (((_x) & 0xff) << 5)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_NFAIL_of(_x)           (((_x) >> 5) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BINF                   BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BMODE                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BINST(_x)              (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTRR_BINST_of(_x)           (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTWCR -
    Bits: 15:0  BWCNT(rw) - BIST Word Count: Indicates the number of words to generate during BIST. This must be a multiple of DRAM burst length (BL) divided by 2, e.g. for BL=8, valid values are 4, 8, 12, 16, and so on.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTWCR                         0x00000104
#define   NFP_EMUX_PHY_i_MUPUB_BISTWCR_BWCNT(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWCR_BWCNT_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTMSKR0 -
    Bits: 31:28 ODTMSK(rw) - Mask bit for each of the up to 4 ODT bits.
    Bits: 27:24 CSMSK(rw) - Mask bit for each of the up to 4 CS# bits.
    Bits: 23:20 CKEMSK(rw) - Mask bit for each of the up to 4 CKE bits.
    Bits: 19    WEMSK(rw) - Mask bit for the WE#.
    Bits: 18:16 BAMSK(rw) - Mask bit for each of the up to 3 bank address bits.
    Bits: 15:0  AMSK(rw) - Mask bit for each of the up to 16 address bits.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTMSKR0                       0x00000108
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_ODTMSK(_x)          (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_ODTMSK_of(_x)       (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_CSMSK(_x)           (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_CSMSK_of(_x)        (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_CKEMSK(_x)          (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_CKEMSK_of(_x)       (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_WEMSK               BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_BAMSK(_x)           (((_x) & 0x7) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_BAMSK_of(_x)        (((_x) >> 16) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_AMSK(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR0_AMSK_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTMSKR1 -
    Bits: 31:28 DMMSK(rw) - Mask bit for the data mask (DM) bit.
    Bits: 27    PARMSK(rw) - Mask bit for the PAR_IN. Only for DIMM parity support and only if the design is compiled for less than 3 ranks.
    Bits:  1    CASMSK(rw) - Mask bit for the CAS.
    Bits:  0    RASMSK(rw) - Mask bit for the RAS.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTMSKR1                       0x0000010c
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR1_DMMSK(_x)           (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR1_DMMSK_of(_x)        (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR1_PARMSK              BIT(27)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR1_CASMSK              BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR1_RASMSK              BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTMSKR2 -
    Bits: 31:0  DQMSK(rw) - Mask bit for each of the 8 data (DQ) bits.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTMSKR2                       0x00000110
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR2_DQMSK(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTMSKR2_DQMSK_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTLSR -
    Bits: 31:0  SEED(rw) - LFSR seed for pseudo-random BIST patterns.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTLSR                         0x00000114
#define   NFP_EMUX_PHY_i_MUPUB_BISTLSR_SEED(_x)              (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTLSR_SEED_of(_x)           (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTAR0 -
    Bits: 30:28 BBANK(rw) - BIST Bank Address: Selects the SDRAM bank address to be used during BIST.
    Bits: 27:12 BROW(rw) - BIST Row Address: Selects the SDRAM row address to be used during BIST.
    Bits: 11:0  BCOL(rw) - BIST Column Address: Selects the SDRAM column address to be used during BIST. The lower bits of this address must be '0000' for BL16, '000' for BL8, '00' for BL4 and '0' for BL2.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTAR0                         0x00000118
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR0_BBANK(_x)             (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR0_BBANK_of(_x)          (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR0_BROW(_x)              (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR0_BROW_of(_x)           (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR0_BCOL(_x)              (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR0_BCOL_of(_x)           (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTAR1 -
    Bits: 15:4  BAINC(rw) - BIST Address Increment: Selects the value by which the SDRAM address is incremented for each write/read access. This value must be at the beginning of a burst boundary, i.e. the lower bits must be '0000' for BL16, '000' for BL8, '00' for BL4 and '0' for BL2.
    Bits:  3:2  BMRANK(rw) - BIST Maximum Rank: Specifies the maximum SDRAM rank to be used during BIST. The default value is set to maximum ranks minus 1. Example default shown here is for a 4-rank system
    Bits:  1:0  BRANK(rw) - BIST Rank: Selects the SDRAM rank to be used during BIST. Valid values range from 0 to maximum ranks minus 1.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTAR1                         0x0000011c
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR1_BAINC(_x)             (((_x) & 0xfff) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR1_BAINC_of(_x)          (((_x) >> 4) & 0xfff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR1_BMRANK(_x)            (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR1_BMRANK_of(_x)         (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR1_BRANK(_x)             (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR1_BRANK_of(_x)          (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTAR2 -
    Bits: 30:28 BMBANK(rw) - BIST Maximum Bank Address: Specifies the maximum SDRAM bank address to be used during BIST before the address increments to the next rank.
    Bits: 27:12 BMROW(rw) - BIST Maximum Row Address: Specifies the maximum SDRAM row address to be used during BIST before the address increments to the next bank.
    Bits: 11:0  BMCOL(rw) - BIST Maximum Column Address: Specifies the maximum SDRAM column address to be used during BIST before the address increments to the next row.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTAR2                         0x00000120
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR2_BMBANK(_x)            (((_x) & 0x7) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR2_BMBANK_of(_x)         (((_x) >> 28) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR2_BMROW(_x)             (((_x) & 0xffff) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR2_BMROW_of(_x)          (((_x) >> 12) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR2_BMCOL(_x)             (((_x) & 0xfff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTAR2_BMCOL_of(_x)          (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTUDPR -
    Bits: 31:16 BUDP1(rw) - BIST User Data Pattern 1: Data to be applied on odd DQ pins during BIST.
    Bits: 15:0  BUDP0(rw) - BIST User Data Pattern 0: Data to be applied on even DQ pins during BIST.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTUDPR                        0x00000124
#define   NFP_EMUX_PHY_i_MUPUB_BISTUDPR_BUDP1(_x)            (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTUDPR_BUDP1_of(_x)         (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTUDPR_BUDP0(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTUDPR_BUDP0_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTGSR -
    Bits: 31:30 CASBER(ro) - CAS Bit Error: Indicates the number of bit errors on CAS.
    Bits: 29:28 RASBER(ro) - RAS Bit Error: Indicates the number of bit errors on RAS.
    Bits: 27:20 DMBER(ro) - DM Bit Error: Indicates the number of bit errors on data mask (DM) bit. DMBER[1:0], are for even DQS cycles first DM beat, and DMBER[3:2], are for even DQS cycles second DM beat. Similarly, DMBER[5:4], are for odd DQS cycles first DM beat, and DMBER[7:6], are for odd DQS cycles second DM beat.
    Bits:  2    BDXERR(ro) - BIST Data Error: indicates if set that there is a data comparison error in the byte lane.
    Bits:  1    BACERR(ro) - BIST Address/Command Error: indicates if set that there is a data comparison error in the address/command lane.
    Bits:  0    BDONE(ro) - BIST Done: Indicates if set that the BIST has finished executing. This bit is reset to zero when BIST is triggered.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTGSR                         0x00000128
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_CASBER(_x)            (((_x) & 0x3) << 30)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_CASBER_of(_x)         (((_x) >> 30) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_RASBER(_x)            (((_x) & 0x3) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_RASBER_of(_x)         (((_x) >> 28) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_DMBER(_x)             (((_x) & 0xff) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_DMBER_of(_x)          (((_x) >> 20) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_BDXERR                BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_BACERR                BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_BISTGSR_BDONE                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTWER -
    Bits: 31:16 DXWER(ro) - Byte Word Error: Indicates the number of word errors on the byte lane. An error on any bit of the data bus including the data mask bit increments the error count.
    Bits: 15:0  ACWER(ro) - Address/Command Word Error: Indicates the number of word errors on the address/command lane. An error on any bit of the address/command bus increments the error count.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTWER                         0x0000012c
#define   NFP_EMUX_PHY_i_MUPUB_BISTWER_DXWER(_x)             (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWER_DXWER_of(_x)          (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWER_ACWER(_x)             (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWER_ACWER_of(_x)          (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER0 -
    Bits: 31:0  ABER(ro) - Address Bit Error: Each group of two bits indicate the bit error count on each of the up to 16 address bits. [1:0], is the error count for A[0],, [3:2], for A[1],, and so on.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTBER0                        0x00000130
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER0_ABER(_x)             (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER0_ABER_of(_x)          (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER1 -
    Bits: 31:24 ODTBER(ro) - ODT Bit Error: Each group of two bits indicates the bit error count on each of the up to 4 ODT bits. [1:0], is the error count for ODT[0],, [3:2], for ODT[1],, and so on.
    Bits: 23:16 CSBER(ro) - CS# Bit Error: Each group of two bits indicate the bit error count on each of the up to 4 CS# bits. [1:0], is the error count for CS#[0],, [3:2], for CS#[1],, and so on.
    Bits: 15:8  CKEBER(ro) - CKE Bit Error: Each group of two bits indicate the bit error count on each of the up to 4 CKE bits. [1:0], is the error count for CKE[0],, [3:2], for CKE[1],, and so on.
    Bits:  7:6  WEBER(ro) - WE# Bit Error: Indicates the number of bit errors on WE#.
    Bits:  5:0  BABER(ro) - Bank Address Bit Error: Each group of two bits indicate the bit error count on each of the up to 3 bank address bits. [1:0], is the error count for BA[0],, [3:2], for BA[1],, and so on.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTBER1                        0x00000134
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_ODTBER(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_ODTBER_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_CSBER(_x)            (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_CSBER_of(_x)         (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_CKEBER(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_CKEBER_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_WEBER(_x)            (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_WEBER_of(_x)         (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_BABER(_x)            (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER1_BABER_of(_x)         (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER2 -
    Bits: 31:0  DQBER0(ro) - Data Bit Error: The error count for even DQS cycles. The first 16 bits indicate the error count for the first data beat (i.e. the data driven out on DQ[7:0], on the rising edge of DQS). The second 16 bits indicate the error on the second data beat (i.e. the error count of the data driven out on DQ[7:0], on the falling edge of DQS). For each of the 16-bit group, the first 2 bits are for DQ[0],, the second for DQ[1],, and so on.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTBER2                        0x00000138
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER2_DQBER0(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER2_DQBER0_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTBER3 -
    Bits: 31:0  DQBER1(ro) - Data Bit Error: The error count for odd DQS cycles. The first 16 bits indicate the error count for the first data beat (i.e. the data driven out on DQ[7:0], on the rising edge of DQS). The second 16 bits indicate the error on the second data beat (i.e. the error count of the data driven out on DQ[7:0], on the falling edge of DQS). For each of the 16-bit group, the first 2 bits are for DQ[0],, the second for DQ[1],, and so on.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTBER3                        0x0000013c
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER3_DQBER1(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTBER3_DQBER1_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTWCSR -
    Bits: 31:16 DXWCNT(ro) - Byte Word Count: Indicates the number of words received from the byte lane.
    Bits: 15:0  ACWCNT(ro) - Address/Command Word Count: Indicates the number of words received from the address/command lane.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTWCSR                        0x00000140
#define   NFP_EMUX_PHY_i_MUPUB_BISTWCSR_DXWCNT(_x)           (((_x) & 0xffff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWCSR_DXWCNT_of(_x)        (((_x) >> 16) & 0xffff)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWCSR_ACWCNT(_x)           (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTWCSR_ACWCNT_of(_x)        (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTFWR0 -
    Bits: 31:28 ODTWEBS(ro) - Bit status during a word error for each of the up to 4 ODT bits.
    Bits: 27:24 CSWEBS(ro) - Bit status during a word error for each of the up to 4 CS# bits.
    Bits: 23:20 CKEWEBS(ro) - Bit status during a word error for each of the up to 4 CKE bits.
    Bits: 19    WEWEBS(ro) - Bit status during a word error for the WE#.
    Bits: 18:16 BAWEBS(ro) - Bit status during a word error for each of the up to 3 bank address bits.
    Bits: 15:0  AWEBS(ro) - Bit status during a word error for each of the up to 16 address bits.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTFWR0                        0x00000144
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_ODTWEBS(_x)          (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_ODTWEBS_of(_x)       (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_CSWEBS(_x)           (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_CSWEBS_of(_x)        (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_CKEWEBS(_x)          (((_x) & 0xf) << 20)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_CKEWEBS_of(_x)       (((_x) >> 20) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_WEWEBS               BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_BAWEBS(_x)           (((_x) & 0x7) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_BAWEBS_of(_x)        (((_x) >> 16) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_AWEBS(_x)            (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR0_AWEBS_of(_x)         (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTFWR1 -
    Bits: 31:28 DMWEBS(ro) - Bit status during a word error for the data mask (DM) bit. DMWEBS [0], is for the first DM beat, DMWEBS [1], is for the second DM beat, and so on.
    Bits:  1    CASWEBS(ro) - Bit status during a word error for the CAS.
    Bits:  0    RASWEBS(ro) - Bit status during a word error for the RAS.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTFWR1                        0x00000148
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR1_DMWEBS(_x)           (((_x) & 0xf) << 28)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR1_DMWEBS_of(_x)        (((_x) >> 28) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR1_CASWEBS              BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR1_RASWEBS              BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_BISTFWR2 -
    Bits: 31:0  DQWEBS(ro) - Bit status during a word error for each of the 8 data (DQ) bits. The first 8 bits indicate the status of the first data beat (i.e. the status of the data driven out on DQ[7:0], on the rising edge of DQS). The second 8 bits indicate the status of the second data beat (i.e. the status of the data driven out on DQ[7:0], on the falling edge of DQS), and so on. For each of the 8-bit group, the first bit is for DQ[0],, the second bit is for DQ[1],, and so on.
*/
#define NFP_EMUX_PHY_i_MUPUB_BISTFWR2                        0x0000014c
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR2_DQWEBS(_x)           (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_BISTFWR2_DQWEBS_of(_x)        (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_GPR0 -
    Bits: 31:0  GPR0(ro) - General Purpose Register 0: General purpose register bits.
*/
#define NFP_EMUX_PHY_i_MUPUB_GPR0                            0x00000178
#define   NFP_EMUX_PHY_i_MUPUB_GPR0_GPR0(_x)                 (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_GPR0_GPR0_of(_x)              (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_GPR1 -
    Bits: 31:0  GPR1(ro) - General Purpose Register 1: General purpose register bits.
*/
#define NFP_EMUX_PHY_i_MUPUB_GPR1                            0x0000017c
#define   NFP_EMUX_PHY_i_MUPUB_GPR1_GPR1(_x)                 (((_x) & 0xffffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_GPR1_GPR1_of(_x)              (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ0CR0                          0x00000180
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ0CR1                          0x00000184
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ0SR0                          0x00000188
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ0SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ0SR1                          0x0000018c
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ0SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ1CR0                          0x00000190
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ1CR1                          0x00000194
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ1SR0                          0x00000198
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ1SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ1SR1                          0x0000019c
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ1SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ2CR0                          0x000001a0
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ2CR1                          0x000001a4
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ2SR0                          0x000001a8
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ2SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ2SR1                          0x000001ac
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ2SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3CR0 -
    Bits: 31    ZQPD(rw) - ZQ Power Down: Powers down, if set, the PZQ cell.
    Bits: 30    ZCALEN(rw) - Impedance Calibration Enable: Enables if the set the impedance calibration of this ZQ control block when impedance calibration is triggered using either the ZCAL bit of PIR register or the DFI update interface.
    Bits: 29    ZCALBYP(w1c) - Impedance Calibration Bypass: Bypasses, if set, impedance calibration of this ZQ control block when impedance calibration is already in progress. Impedance calibration can be disabled prior to trigger by using the ZCALEN bit.
    Bits: 28    ZDEN(rw) - Impedance Over-ride Enable: When this bit is set, it allows users to directly drive the impedance control using the data programmed in the ZQDATA field. Otherwise, the control is generated automatically by the impedance control logic
    Bits: 27:0  ZDATA(rw) - Impedance Over-Ride Data: Data used to directly drive the impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ3CR0                          0x000001b0
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR0_ZQPD                   BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR0_ZCALEN                 BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR0_ZCALBYP                BIT(29)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR0_ZDEN                   BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR0_ZDATA(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR0_ZDATA_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3CR1 -
    Bits: 17    DFIPU1(rw) - DFI Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 16    DFIPU0(rw) - DFI Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI PHY update interface 0 (channel 0) requests an update.
    Bits: 14    DFICCU(rw) - DFI Concurrent Controller Update Interface: Sets this impedance controller to be enabled for calibration when both of the DFI controller update interfaces request an update on the same clock. This provides the ability to enable impedance calibration updates for the Address/Command lane. Only valid in shared-AC mode.
    Bits: 13    DFICU1(rw) - DFI Controller Update Interface 1: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 1 (channel 1) requests an update. Only valid in shared-AC mode.
    Bits: 12    DFICU0(rw) - DFI Controller Update Interface 0: Sets this impedance controller to be enabled for calibration when the DFI controller update interface 0 (channel 0) requests an update.
    Bits:  7:0  ZPROG(rw) - Impedance Divide Ratio: Selects the external resistor divide ratio to be used to set the output impedance and the on-die termination as follows: ZPROG[7:4] = On-die termination divide select. ZPROG[3:0] = Output impedance divide select. See Note below for further information.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ3CR1                          0x000001b4
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_DFIPU1                 BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_DFIPU0                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_DFICCU                 BIT(14)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_DFICU1                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_DFICU0                 BIT(12)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_ZPROG(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3CR1_ZPROG_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3SR0 -
    Bits: 31    ZDONE(ro) - Impedance Calibration Done: Indicates that impedance calibration has completed.
    Bits: 30    ZERR(ro) - Impedance Calibration Error: If set, indicates that there was an error during impedance calibration.
    Bits: 27:0  ZCTRL(ro) - Impedance Control: Current value of impedance control.
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ3SR0                          0x000001b8
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR0_ZDONE                  BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR0_ZERR                   BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR0_ZCTRL(_x)              (((_x) & 0xfffffff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR0_ZCTRL_of(_x)           (((_x) >> 0) & 0xfffffff)
/*----------------------------------------------------------------
  Register: i_MUPUB_ZQ3SR1 -
    Bits:  7:6  OPU(ro) - On-die termination (ODT) pull-up calibration status. Similar status encodings as ZPD.
    Bits:  5:4  OPD(ro) - On-die termination (ODT) pull-down calibration status. Similar status encodings as ZPD.
    Bits:  3:2  ZPU(ro) - Output impedance pull-up calibration status. Similar status encodings as ZPD.
    Bits:  1:0  ZPD(ro) - Output impedance pull-down calibration status. Valid status encodings are:
*/
#define NFP_EMUX_PHY_i_MUPUB_ZQ3SR1                          0x000001bc
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_OPU(_x)                (((_x) & 0x3) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_OPU_of(_x)             (((_x) >> 6) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_OPD(_x)                (((_x) & 0x3) << 4)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_OPD_of(_x)             (((_x) >> 4) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_ZPU(_x)                (((_x) & 0x3) << 2)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_ZPU_of(_x)             (((_x) >> 2) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_ZPD(_x)                (((_x) & 0x3) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_ZQ3SR1_ZPD_of(_x)             (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0GCR                          0x000001c0
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0GSR0                         0x000001c4
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0GSR1                         0x000001c8
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0BDLR0                        0x000001cc
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0BDLR1                        0x000001d0
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0BDLR2                        0x000001d4
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0BDLR3                        0x000001d8
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0BDLR4                        0x000001dc
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0                       0x000001e0
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1                       0x000001e4
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2                       0x000001e8
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0MDLR                         0x000001ec
#define   NFP_EMUX_PHY_i_MUPUB_DX0MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX0MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX0MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0GTR                          0x000001f0
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX0GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX0GSR2                         0x000001f4
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX0GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1GCR                          0x00000200
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1GSR0                         0x00000204
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1GSR1                         0x00000208
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1BDLR0                        0x0000020c
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1BDLR1                        0x00000210
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1BDLR2                        0x00000214
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1BDLR3                        0x00000218
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1BDLR4                        0x0000021c
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0                       0x00000220
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1                       0x00000224
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2                       0x00000228
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1MDLR                         0x0000022c
#define   NFP_EMUX_PHY_i_MUPUB_DX1MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX1MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX1MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1GTR                          0x00000230
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX1GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX1GSR2                         0x00000234
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX1GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2GCR                          0x00000240
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2GSR0                         0x00000244
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2GSR1                         0x00000248
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2BDLR0                        0x0000024c
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2BDLR1                        0x00000250
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2BDLR2                        0x00000254
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2BDLR3                        0x00000258
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2BDLR4                        0x0000025c
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0                       0x00000260
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1                       0x00000264
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2                       0x00000268
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2MDLR                         0x0000026c
#define   NFP_EMUX_PHY_i_MUPUB_DX2MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX2MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX2MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2GTR                          0x00000270
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX2GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX2GSR2                         0x00000274
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX2GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3GCR                          0x00000280
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3GSR0                         0x00000284
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3GSR1                         0x00000288
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3BDLR0                        0x0000028c
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3BDLR1                        0x00000290
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3BDLR2                        0x00000294
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3BDLR3                        0x00000298
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3BDLR4                        0x0000029c
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0                       0x000002a0
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1                       0x000002a4
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2                       0x000002a8
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3MDLR                         0x000002ac
#define   NFP_EMUX_PHY_i_MUPUB_DX3MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX3MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX3MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3GTR                          0x000002b0
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX3GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX3GSR2                         0x000002b4
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX3GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4GCR                          0x000002c0
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4GSR0                         0x000002c4
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4GSR1                         0x000002c8
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4BDLR0                        0x000002cc
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4BDLR1                        0x000002d0
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4BDLR2                        0x000002d4
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4BDLR3                        0x000002d8
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4BDLR4                        0x000002dc
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0                       0x000002e0
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1                       0x000002e4
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2                       0x000002e8
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4MDLR                         0x000002ec
#define   NFP_EMUX_PHY_i_MUPUB_DX4MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX4MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX4MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4GTR                          0x000002f0
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX4GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX4GSR2                         0x000002f4
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX4GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5GCR                          0x00000300
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5GSR0                         0x00000304
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5GSR1                         0x00000308
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5BDLR0                        0x0000030c
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5BDLR1                        0x00000310
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5BDLR2                        0x00000314
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5BDLR3                        0x00000318
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5BDLR4                        0x0000031c
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0                       0x00000320
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1                       0x00000324
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2                       0x00000328
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5MDLR                         0x0000032c
#define   NFP_EMUX_PHY_i_MUPUB_DX5MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX5MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX5MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5GTR                          0x00000330
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX5GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX5GSR2                         0x00000334
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX5GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6GCR                          0x00000340
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6GSR0                         0x00000344
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6GSR1                         0x00000348
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6BDLR0                        0x0000034c
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6BDLR1                        0x00000350
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6BDLR2                        0x00000354
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6BDLR3                        0x00000358
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6BDLR4                        0x0000035c
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0                       0x00000360
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1                       0x00000364
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2                       0x00000368
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6MDLR                         0x0000036c
#define   NFP_EMUX_PHY_i_MUPUB_DX6MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX6MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX6MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6GTR                          0x00000370
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX6GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX6GSR2                         0x00000374
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX6GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7GCR                          0x00000380
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7GSR0                         0x00000384
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7GSR1                         0x00000388
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7BDLR0                        0x0000038c
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7BDLR1                        0x00000390
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7BDLR2                        0x00000394
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7BDLR3                        0x00000398
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7BDLR4                        0x0000039c
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0                       0x000003a0
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1                       0x000003a4
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2                       0x000003a8
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7MDLR                         0x000003ac
#define   NFP_EMUX_PHY_i_MUPUB_DX7MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX7MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX7MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7GTR                          0x000003b0
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX7GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX7GSR2                         0x000003b4
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX7GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GCR -
    Bits: 31    CALBYP(rw) - Calibration Bypass: Prevents, if set, period measurement calibration from automatically triggering after PHY initialization.
    Bits: 30    MDLEN(rw) - Master Delay Line Enable: Enables, if set, the DATX8 master delay line calibration to perform subsequent period measurements following the initial period measurements that are performed after reset or when calibration is manually triggered. These additional measurements are accumulated and filtered as long as this bit remains high. This bit is ANDed with the common DATX8 MDL enable bit.
    Bits: 29:26 WLRKEN(rw) - Write Level Rank Enable: Specifies the ranks that should be write leveled for this byte. Write leveling responses from ranks that are not enabled for write leveling for a particular byte are ignored and write leveling is flagged as done for these ranks. WLRKEN[0], enables rank 0, [1], enables rank 1, [2], enables rank 2, and [3], enables rank 3.
    Bits: 19    PLLBYP(rw) - PLL Bypass: Puts the byte PLL in bypass mode by driving the PLL bypass pin. This bit is not self-clearing and a '0' must be written to de-assert the bypass. This bit is ORed with the global BYP configuration bit (see Table 3-10 on page 62).
    Bits: 18    GSHIFT(rw) - Gear Shift: Enables, if set, rapid locking mode on the byte PLL. This bit is ORed with the global GSHIFT configuration bit (see Table 3-10 on page 62).
    Bits: 17    PLLPD(rw) - PLL Power Down: Puts the byte PLL in power down mode by driving the PLL power down pin. This bit is not self-clearing and a '0' must be written to de-assert the power-down. This bit is ORed with the global PLLPD configuration bit (see Table 3-10 on page 62).
    Bits: 16    PLLRST(rw) - PLL Rest: Resets the byte PLL by driving the PLL reset pin. This bit is not self- clearing and a '0' must be written to de-assert the reset. This bit is ORed with the global PLLRST configuration bit (see Table 3-10 on page 62).
    Bits: 15:14 DXOEO(rw) - Data Byte Output Enable Override: Specifies whether the output I/O output enable for the byte lane should be set to a fixed value. Valid values are:
    Bits: 13    RTTOAL(rw) - RTT On Additive Latency: Indicates when the ODT control of DQ/DQS SSTL I/Os is set to the value in DQODT/DQSODT during read cycles. Valid values are:
    Bits: 12:11 RTTOH(rw) - RTT Output Hold: Indicates the number of clock cycles (from 0 to 3) after the read data postamble for which ODT control should remain set to DQSODT for DQS or DQODT for DQ/DM before disabling it (setting it to '0') when using dynamic ODT control. ODT is disabled almost RTTOH clock cycles after the read postamble.
    Bits: 10    DQRTT(rw) - DQ Dynamic RTT Control: Indicates, if set, that the ODT control of DQ/DM SSTL I/Os be dynamically controlled by setting it to the value in DQODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQ SSTL I/Os is always set to the value in DQODT.
    Bits:  9    DQSRTT(rw) - DQS Dynamic RTT Control: Indicates, if set, that the ODT control of DQS SSTL I/Os be dynamically controlled by setting it to the value in DQSODT during reads and disabling it (setting it to '0') during any other cycle. If this bit is not set, then the ODT control of DQS SSTL I/Os is always set to the value in DQSODT field.
    Bits:  8:7  DSEN(rw) - Write DQS Enable: Controls whether the write DQS going to the SDRAM is enabled (toggling) or disabled (static value) and whether the DQS is inverted. DQS# is always the inversion of DQS. These values are valid only when DQS/DQS# output enable is on, otherwise the DQS/DQS# is tristated. Valid settings are:
    Bits:  6    DQSRPD(rw) - DQSR Power Down: Powers down, if set, the PDQSR cell. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68)
    Bits:  5    DXPDR(rw) - Data Power Down Receiver: Powers down, when set, the input receiver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDR configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  4    DXPDD(rw) - Data Power Down Driver: Powers down, when set, the output driver on I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the common PDD configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  3    DXIOM(rw) - Data I/O Mode: Selects SSTL mode (when set to 0) or CMOS mode (when set to 1) of the I/O for DQ, DM, and DQS/DQS# pins of the byte. This bit is ORed with the IOM configuration bit of the individual DATX8(see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  2    DQODT(rw) - Data On-Die Termination: Enables, when set, the on-die termination on the I/O for DQ and DM pins of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  1    DQSODT(rw) - DQS On-Die Termination: Enables, when set, the on-die termination on the I/O for DQS/DQS# pin of the byte. This bit is ORed with the common DATX8 ODT configuration bit (see 'DATX8 Common Configuration Register (DXCCR)' on page 68).
    Bits:  0    DXEN(rw) - Data Byte Enable: Enables if set the data byte. Setting this bit to '0' disables the byte, i.e. the byte is not used in PHY initialization or training and is ignored during SDRAM read/write operations.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8GCR                          0x000003c0
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_CALBYP                 BIT(31)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_MDLEN                  BIT(30)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_WLRKEN(_x)             (((_x) & 0xf) << 26)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_WLRKEN_of(_x)          (((_x) >> 26) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_PLLBYP                 BIT(19)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_GSHIFT                 BIT(18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_PLLPD                  BIT(17)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_PLLRST                 BIT(16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DXOEO(_x)              (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DXOEO_of(_x)           (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_RTTOAL                 BIT(13)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_RTTOH(_x)              (((_x) & 0x3) << 11)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_RTTOH_of(_x)           (((_x) >> 11) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DQRTT                  BIT(10)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DQSRTT                 BIT(9)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DSEN(_x)               (((_x) & 0x3) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DSEN_of(_x)            (((_x) >> 7) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DQSRPD                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DXPDR                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DXPDD                  BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DXIOM                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DQODT                  BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DQSODT                 BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GCR_DXEN                   BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GSR0 -
    Bits: 28    WLDQ(ro) - Write Leveling DQ Status: Captures the write leveling DQ status from the DRAM during software write leveling.
    Bits: 27:24 QSGERR(ro) - DQS Gate Training Error: Indicates if set that there is an error in DQS gate training. One bit for each of the up to 4 ranks.
    Bits: 23:16 GDQSPRD(ro) - Read DQS gating Period: Returns the DDR clock period measured by the read DQS gating LCDL during calibration. This value is PVT compensated.
    Bits: 15    DPLOCK(ro) - DATX8 PLL Lock: Indicates, if set, that the DATX8 PLL has locked. This is a direct status of the DATX8 PLL lock pin.
    Bits: 14:7  WLPRD(ro) - Write Leveling Period: Returns the DDR clock period measured by the write leveling LCDL during calibration. The measured period is used to generate the control of the write leveling pipeline which is a function of the write-leveling delay and the clock period. This value is PVT compensated.
    Bits:  6    WLERR(ro) - Write Leveling Error: Indicates, if set, that there is a write leveling error in the DATX8.
    Bits:  5    WLDONE(ro) - Write Leveling Done: Indicates, if set, that the DATX8 has completed write leveling.
    Bits:  4    WLCAL(ro) - Write Leveling Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write leveling slave delay line.
    Bits:  3    GDQSCAL(ro) - Read DQS gating Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS gating LCDL.
    Bits:  2    RDQSNCAL(ro) - Read DQS# Calibration (Type B/B1 PHY Only): Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS# LCDL.
    Bits:  1    RDQSCAL(ro) - Read DQS Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the read DQS LCDL.
    Bits:  0    WDQCAL(ro) - Write DQ Calibration: Indicates, if set, that the DATX8 has finished doing period measurement calibration for the write DQ LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8GSR0                         0x000003c4
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WLDQ                  BIT(28)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_QSGERR(_x)            (((_x) & 0xf) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_QSGERR_of(_x)         (((_x) >> 24) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_GDQSPRD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_GDQSPRD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_DPLOCK                BIT(15)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WLPRD(_x)             (((_x) & 0xff) << 7)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WLPRD_of(_x)          (((_x) >> 7) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WLERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WLDONE                BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WLCAL                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_GDQSCAL               BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_RDQSNCAL              BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_RDQSCAL               BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR0_WDQCAL                BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GSR1 -
    Bits: 24:1  DLTCODE(ro) - Delay Line Test Code: Returns the code measured by the PHY control block that corresponds to the period of the DATX8 delay line digital test output.
    Bits:  0    DLTDONE(ro) - Delay Line Test Done: Indicates, if set, that the PHY control block has finished doing period measurement of the DATX8 delay line digital test output.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8GSR1                         0x000003c8
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR1_DLTCODE(_x)           (((_x) & 0xffffff) << 1)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR1_DLTCODE_of(_x)        (((_x) >> 1) & 0xffffff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR1_DLTDONE               BIT(0)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR0 -
    Bits: 29:24 DQ4WBD(rw) - DQ4 Write Bit Delay: Delay select for the BDL on DQ4 write path.
    Bits: 23:18 DQ3WBD(rw) - DQ3 Write Bit Delay: Delay select for the BDL on DQ3 write path.
    Bits: 17:12 DQ2WBD(rw) - DQ2 Write Bit Delay: Delay select for the BDL on DQ2 write path.
    Bits: 11:6  DQ1WBD(rw) - DQ1 Write Bit Delay: Delay select for the BDL on DQ1 write path.
    Bits:  5:0  DQ0WBD(rw) - DQ0 Write Bit Delay: Delay select for the BDL on DQ0 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8BDLR0                        0x000003cc
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ4WBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ4WBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ3WBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ3WBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ2WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ2WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ1WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ1WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ0WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR0_DQ0WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR1 -
    Bits: 29:24 DSWBD(rw) - DQS Write Bit Delay: Delay select for the BDL on DQS write path.
    Bits: 23:18 DMWBD(rw) - DM Write Bit Delay: Delay select for the BDL on DM write path.
    Bits: 17:12 DQ7WBD(rw) - DQ7 Write Bit Delay: Delay select for the BDL on DQ7 write path.
    Bits: 11:6  DQ6WBD(rw) - DQ6 Write Bit Delay: Delay select for the BDL on DQ6 write path.
    Bits:  5:0  DQ5WBD(rw) - DQ5 Write Bit Delay: Delay select for the BDL on DQ5 write path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8BDLR1                        0x000003d0
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DSWBD(_x)            (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DSWBD_of(_x)         (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DMWBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DMWBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DQ7WBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DQ7WBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DQ6WBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DQ6WBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DQ5WBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR1_DQ5WBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR2 -
    Bits: 23:18 DSNRBD(rw) - DQSN Read Bit Delay (Type B/B1 PHY Only): Delay select for the BDL on DQSN read path
    Bits: 17:12 DSRBD(rw) - DQS Read Bit Delay: Delay select for the BDL on DQS read path
    Bits: 11:6  DQOEBD(rw) - DQ Output Enable Bit Delay: Delay select for the BDL on DQ/DM output enable path.
    Bits:  5:0  DSOEBD(rw) - DQS Output Enable Bit Delay: Delay select for the BDL on DQS output enable path
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8BDLR2                        0x000003d4
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DSNRBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DSNRBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DSRBD(_x)            (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DSRBD_of(_x)         (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DQOEBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DQOEBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DSOEBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR2_DSOEBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR3 -
    Bits: 29:24 DQ4RBD(rw) - DQ4 Read Bit Delay: Delay select for the BDL on DQ4 read path.
    Bits: 23:18 DQ3RBD(rw) - DQ3 Read Bit Delay: Delay select for the BDL on DQ3 read path
    Bits: 17:12 DQ2RBD(rw) - DQ2 Read Bit Delay: Delay select for the BDL on DQ2 read path.
    Bits: 11:6  DQ1RBD(rw) - DQ1 Read Bit Delay: Delay select for the BDL on DQ1 read path.
    Bits:  5:0  DQ0RBD(rw) - DQ0 Read Bit Delay: Delay select for the BDL on DQ0 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8BDLR3                        0x000003d8
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ4RBD(_x)           (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ4RBD_of(_x)        (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ3RBD(_x)           (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ3RBD_of(_x)        (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ2RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ2RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ1RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ1RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ0RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR3_DQ0RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8BDLR4 -
    Bits: 23:18 DMRBD(rw) - DM Read Bit Delay: Delay select for the BDL on DM read path.
    Bits: 17:12 DQ7RBD(rw) - DQ7 Read Bit Delay: Delay select for the BDL on DQ7 read path.
    Bits: 11:6  DQ6RBD(rw) - DQ6 Read Bit Delay: Delay select for the BDL on DQ6 read path.
    Bits:  5:0  DQ5RBD(rw) - DQ5 Read Bit Delay: Delay select for the BDL on DQ5 read path.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8BDLR4                        0x000003dc
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DMRBD(_x)            (((_x) & 0x3f) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DMRBD_of(_x)         (((_x) >> 18) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DQ7RBD(_x)           (((_x) & 0x3f) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DQ7RBD_of(_x)        (((_x) >> 12) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DQ6RBD(_x)           (((_x) & 0x3f) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DQ6RBD_of(_x)        (((_x) >> 6) & 0x3f)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DQ5RBD(_x)           (((_x) & 0x3f) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8BDLR4_DQ5RBD_of(_x)        (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8LCDLR0 -
    Bits: 31:24 R3WLD(rw) - Rank 3 Write Leveling Delay: Rank 3 delay select for the write leveling (WL) LCDL.
    Bits: 23:16 R2WLD(rw) - Rank 2 Write Leveling Delay: Rank 2_Delay select for the write leveling (WL) LCDL.
    Bits: 15:8  R1WLD(rw) - Rank 1 Write Leveling Delay: Rank 1_Delay select for the write leveling (WL) LCDL.
    Bits:  7:0  R0WLD(rw) - Rank 0 Write Leveling Delay: Rank 0 delay select for the write leveling (WL) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0                       0x000003e0
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R3WLD(_x)           (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R3WLD_of(_x)        (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R2WLD(_x)           (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R2WLD_of(_x)        (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R1WLD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R1WLD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R0WLD(_x)           (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR0_R0WLD_of(_x)        (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8LCDLR1 -
    Bits: 23:16 RDQSND(rw) - Read DQSN Delay: Delay select for the read DQSN (RDQS) LCDL.
    Bits: 15:8  RDQSD(rw) - Read DQS Delay: Delay select for the read DQS (RDQS) LCDL.
    Bits:  7:0  WDQD(rw) - Write Data Delay: Delay select for the write data (WDQ) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1                       0x000003e4
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1_RDQSND(_x)          (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1_RDQSND_of(_x)       (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1_RDQSD(_x)           (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1_RDQSD_of(_x)        (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1_WDQD(_x)            (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR1_WDQD_of(_x)         (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8LCDLR2 -
    Bits: 31:24 R3_DQSGD(rw) - Rank 3 Read DQS Gating Delay: Rank 3 delay select for the read DQS gating (DQSG) LCDL.
    Bits: 23:16 R2_DQSGD(rw) - Rank 2 Read DQS Gating Delay: Rank 2_Delay select for the read DQS gating (DQSG) LCDL.
    Bits: 15:8  R1_DQSGD(rw) - Rank 1 Read DQS Gating Delay: Rank 1_Delay select for the read DQS gating (DQSG) LCDL.
    Bits:  7:0  R0_DQSGD(rw) - Rank 0 Read DQS Gating Delay: Rank 0 delay select for the read DQS gating (DQSG) LCDL.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2                       0x000003e8
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R3_DQSGD(_x)        (((_x) & 0xff) << 24)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R3_DQSGD_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R2_DQSGD(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R2_DQSGD_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R1_DQSGD(_x)        (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R1_DQSGD_of(_x)     (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R0_DQSGD(_x)        (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8LCDLR2_R0_DQSGD_of(_x)     (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8MDLR -
    Bits: 23:16 MDLD(rw) - MDL Delay: Delay select for the LCDL for the Master Delay Line.
    Bits: 15:8  TPRD(rw) - Target Period: Target period measured by the master delay line calibration for VT drift compensation. This is the current measured value of the period and is continuously updated if the MDL is enabled to do so.
    Bits:  7:0  IPRD(rw) - Initial Period: Initial period measured by the master delay line calibration for VT drift compensation. This value is used as the denominator when calculating the ratios of updates during VT compensation.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8MDLR                         0x000003ec
#define   NFP_EMUX_PHY_i_MUPUB_DX8MDLR_MDLD(_x)              (((_x) & 0xff) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8MDLR_MDLD_of(_x)           (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8MDLR_TPRD(_x)              (((_x) & 0xff) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX8MDLR_TPRD_of(_x)           (((_x) >> 8) & 0xff)
#define   NFP_EMUX_PHY_i_MUPUB_DX8MDLR_IPRD(_x)              (((_x) & 0xff) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8MDLR_IPRD_of(_x)           (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GTR -
    Bits: 19:18 R3WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 17:16 R2WLSL(ro) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 15:14 R1WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 13:12 R0WLSL(rw) - Rank n Write Leveling System Latency: This is used to adjust the write latency after write leveling. Power-up default is 01 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic write leveling but these values can be overwritten by a direct write to this register. Every two bits of this register control the latency of each of the (up to) four ranks. R0WLSL controls the latency of rank 0, R1WLSL controls rank 1, and so on. Valid values:
    Bits: 11:9  R3DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:'
    Bits:  8:6  R2DGSL(ro) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  5:3  R1DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
    Bits:  2:0  R0DGSL(rw) - Rank n DQS Gating System Latency: This is used to increase the number of clock cycles needed to expect valid DDR read data by up to seven extra clock cycles. This is used to compensate for board delays and other system delays. Power-up default is 000 (i.e. no extra clock cycles required). The SL fields are initially set by the PUB during automatic DQS data training but these values can be overwritten by a direct write to this register. Every three bits of this register control the latency of each of the (up to) four ranks. R0DGSL controls the latency of rank 0, R1DGSL controls rank 1, and so on. Valid values are 0 to 7:
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8GTR                          0x000003f0
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R3WLSL(_x)             (((_x) & 0x3) << 18)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R3WLSL_of(_x)          (((_x) >> 18) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R2WLSL(_x)             (((_x) & 0x3) << 16)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R2WLSL_of(_x)          (((_x) >> 16) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R1WLSL(_x)             (((_x) & 0x3) << 14)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R1WLSL_of(_x)          (((_x) >> 14) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R0WLSL(_x)             (((_x) & 0x3) << 12)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R0WLSL_of(_x)          (((_x) >> 12) & 0x3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R3DGSL(_x)             (((_x) & 0x7) << 9)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R3DGSL_of(_x)          (((_x) >> 9) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R2DGSL(_x)             (((_x) & 0x7) << 6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R2DGSL_of(_x)          (((_x) >> 6) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R1DGSL(_x)             (((_x) & 0x7) << 3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R1DGSL_of(_x)          (((_x) >> 3) & 0x7)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R0DGSL(_x)             (((_x) & 0x7) << 0)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GTR_R0DGSL_of(_x)          (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: i_MUPUB_DX8GSR2 -
    Bits: 11:8  ESTAT(ro) - Error Status: If an error occurred for this lane as indicated by RDERR, WDERR, REERR or WEERR the error status code can provide additional information regard when the error occurred during the algorithm execution.
    Bits:  7    WEWN(ro) - Write Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write eye centering training.
    Bits:  6    WEERR(ro) - Write Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write eye centering training.
    Bits:  5    REWN(ro) - Read Eye Centering Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read eye centering training.
    Bits:  4    REERR(ro) - Read Eye Centering Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read eye centering training.
    Bits:  3    WDWN(ro) - Write Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the write bit deskew training.
    Bits:  2    WDERR(ro) - Write Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the write bit deskew training.
    Bits:  1    RDWN(ro) - Read Bit Deskew Warning: Indicates, if set, that the DATX8 has encountered a warning during execution of the read bit deskew training.
    Bits:  0    RDERR(ro) - Read Bit Deskew Error: Indicates, if set, that the DATX8 has encountered an error during execution of the read bit deskew training.
*/
#define NFP_EMUX_PHY_i_MUPUB_DX8GSR2                         0x000003f4
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_ESTAT(_x)             (((_x) & 0xf) << 8)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_ESTAT_of(_x)          (((_x) >> 8) & 0xf)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_WEWN                  BIT(7)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_WEERR                 BIT(6)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_REWN                  BIT(5)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_REERR                 BIT(4)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_WDWN                  BIT(3)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_WDERR                 BIT(2)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_RDWN                  BIT(1)
#define   NFP_EMUX_PHY_i_MUPUB_DX8GSR2_RDERR                 BIT(0)
/*----------------------------------------------------------------
  Register: PLLControlAndStatus - Primary Control and Status Register
    Bits: 31    PLLPdSynth(rw) - FSM Control: 1=Normal Power-Up 0=PowerDown. When transitioned to 1, the PLL State Machine will execute an automatic PLL bringup sequence and lockout rights to all but the Manual Override configuration register.
    Bits: 30    PLLCLK1OutputEn(rw) - FSM Control: Enable for PLLCLK1 Output
    Bits: 29    PLLCLK0OutputEn(rw) - FSM Control: Enable for PLLCLK0 Output
    Bits: 24    PLLAutoReLock(rw) - Mode bit to select behavior upon the occurence of a Lock Fault
    Bits: 23:8  PLLLockFaultCount(ro) - Once the PLL has been spun-up, counts how many times that lock is lost. This field will be cleared whenever PLLPdSynth transitions from 0 to 1.
    Bits:  7    PLLLockFault(ro) - Indicates that the PLL has lost lock during normal operation. This field will be cleared whenever PLLPdSynth transitions from 0 to 1.
    Bits:  6    PLLSynthLock(ro) - PLL Lock Indicator
    Bits:  5    PLLSynthOut1En(ro) - FSM Output: Enable for synthesizer clock output 1
    Bits:  4    PLLSynthOutByPass1(ro) - FSM Output: Bypass synthesizer clock output 1 with ICK_SYNTHREF with the PLL
    Bits:  3    PLLWrapOutByPass1(ro) - FSM Output: Bypass synthesizer clock output 1 with ICK_SYNTHREF outside the PLL
    Bits:  2    PLLSynthOut0En(ro) - FSM Output: Enable for synthesizer clock output 0
    Bits:  1    PLLSynthOutByPass0(ro) - FSM Output: Bypass synthesizer clock output 0 with ICK_SYNTHREF within the PLL
    Bits:  0    PLLWrapOutByPass0(ro) - FSM Output: Bypass synthesizer clock output 0 with ICK_SYNTHREF outside the PLL
*/
#define NFP_EMUX_PLLCNTL_PLLControlAndStatus                 0x00000000
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLPdSynth    BIT(31)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLCLK1OutputEn BIT(30)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLCLK0OutputEn BIT(29)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLAutoReLock BIT(24)
#define     NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLAutoReLock_IDLE (0 << 24)
#define     NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLAutoReLock_RELOCK BIT(24)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLLockFaultCount(_x) (((_x) & 0xffff) << 8)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLLockFaultCount_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLLockFault  BIT(7)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLSynthLock  BIT(6)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLSynthOut1En BIT(5)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLSynthOutByPass1 BIT(4)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLWrapOutByPass1 BIT(3)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLSynthOut0En BIT(2)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLSynthOutByPass0 BIT(1)
#define   NFP_EMUX_PLLCNTL_PLLControlAndStatus_PLLWrapOutByPass0 BIT(0)
/*----------------------------------------------------------------
  Register: PLLConfig - Configuration Settings for the PLL
    Bits: 31    PLLLockMult(rw) - Write 1 to Set, cannot be cleared without hard_reset. Setting the lock bit captures the current values of the multipliers (integer and fraction) as limits for all future settings
    Bits: 30    PLLSynthMode(rw) - Synthesizer mode: 1=Fractional mode, 0=integer mode
    Bits: 29:24 PLLSynthRefDiv(rw) - Reference clock input divider ratio
    Bits: 23:16 PLLSynthMDiv(rw) - Synthesizer feedback divider value
    Bits: 15:0  PLLSynthSSCModGain(rw) - Signed 16-bit magnitude SSC modulation depth control word, as Fraction div ratio.
*/
#define NFP_EMUX_PLLCNTL_PLLConfig                           0x00000004
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLLockMult             BIT(31)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthMode            BIT(30)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthRefDiv(_x)      (((_x) & 0x3f) << 24)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthRefDiv_of(_x)   (((_x) >> 24) & 0x3f)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthMDiv(_x)        (((_x) & 0xff) << 16)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthMDiv_of(_x)     (((_x) >> 16) & 0xff)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthSSCModGain(_x)  (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PLLCNTL_PLLConfig_PLLSynthSSCModGain_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PLLOutputDividers - Configuration Settings for the Output Dividers
    Bits: 14    PLLSynthOutPhRst(rw) - Reset phase rotator to initial startup value.
    Bits: 13:8  PLLSynthOut1Div(rw) - Synthesizer clock output 1 divider value
    Bits:  7    PLLSynthOutPhInc1(rw) - Increments phase of synthesizer clock outputs 1 by 1/8 of 1 period on rising edge
    Bits:  6:1  PLLSynthOut0Div(rw) - Synthesizer clock output 0 divider value
    Bits:  0    PLLSynthOutPhInc0(rw) - Increments phase of synthesizer clock outputs 0 by 1/8 of 1 period on rising edge
*/
#define NFP_EMUX_PLLCNTL_PLLOutputDividers                   0x00000008
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOutPhRst BIT(14)
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOut1Div(_x) (((_x) & 0x3f) << 8)
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOut1Div_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOutPhInc1 BIT(7)
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOut0Div(_x) (((_x) & 0x3f) << 1)
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOut0Div_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP_EMUX_PLLCNTL_PLLOutputDividers_PLLSynthOutPhInc0 BIT(0)
/*----------------------------------------------------------------
  Register: PLLMiscControls - Misc Tuning and Configuration Settings
    Bits: 24    PLLSynthFastLockEn(rw) - Fast lock enable.
    Bits: 23    PLLSynthOutPhIncSat(rw) - Control saturation behavior for phase increments.
    Bits: 22:16 PLLSynthPropGain(rw) - Synthesizer loop bandwidth control.
    Bits: 15:0  PLLSynthSSCGenCount(rw) - SSC Frequency Control
*/
#define NFP_EMUX_PLLCNTL_PLLMiscControls                     0x0000000c
#define   NFP_EMUX_PLLCNTL_PLLMiscControls_PLLSynthFastLockEn BIT(24)
#define   NFP_EMUX_PLLCNTL_PLLMiscControls_PLLSynthOutPhIncSat BIT(23)
#define   NFP_EMUX_PLLCNTL_PLLMiscControls_PLLSynthPropGain(_x) (((_x) & 0x7f) << 16)
#define   NFP_EMUX_PLLCNTL_PLLMiscControls_PLLSynthPropGain_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP_EMUX_PLLCNTL_PLLMiscControls_PLLSynthSSCGenCount(_x) (((_x) & 0xffff) << 0)
#define   NFP_EMUX_PLLCNTL_PLLMiscControls_PLLSynthSSCGenCount_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: PLLManualOverride - Manual Override Register
    Bits: 31    PLLManualOverride(rw) - Setting this bit to 1 enables manual override control for the PLLs. This takes control away from the PLL State Machine. This will also enable writes to the other config regs that would normally be blocked by the PLL State Machine
    Bits: 30    OvdPdSynth(rw) - Manual Override: PLL Power Down Mode: 1=Normal 0=PowerDown
    Bits: 29    OvdResetSynth(rw) - Manual Override: Reset mode: 1=Normal, 0=Reset
    Bits:  5    OvdSynthOut1En(rw) - Manual Override: Enable for synthesizer clock output 1
    Bits:  4    OvdSynthOutByPass1(rw) - Manual Override: Bypass synthesizer clock output 1 with ICK_SYNTHREF with the PLL
    Bits:  3    OvdWrapOutByPass1(rw) - Manual Override: Bypass synthesizer clock output 1 with ICK_SYNTHREF outside the PLL
    Bits:  2    OvdSynthOut0En(rw) - Manual Override: Enable for synthesizer clock output 0
    Bits:  1    OvdSynthOutByPass0(rw) - Manual Override: Bypass synthesizer clock output 0 with ICK_SYNTHREF within the PLL
    Bits:  0    OvdWrapOutByPass0(rw) - Manual Override: Bypass synthesizer clock output 0 with ICK_SYNTHREF outside the PLL
*/
#define NFP_EMUX_PLLCNTL_PLLManualOverride                   0x00000014
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_PLLManualOverride BIT(31)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdPdSynth      BIT(30)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdResetSynth   BIT(29)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdSynthOut1En  BIT(5)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdSynthOutByPass1 BIT(4)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdWrapOutByPass1 BIT(3)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdSynthOut0En  BIT(2)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdSynthOutByPass0 BIT(1)
#define   NFP_EMUX_PLLCNTL_PLLManualOverride_OvdWrapOutByPass0 BIT(0)

#endif /* NFP6000_LONGNAMES */


#endif /* NFP6000_EMU_H */
