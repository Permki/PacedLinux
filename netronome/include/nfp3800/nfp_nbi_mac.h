/*
 * Copyright (C) 2013, Netronome Systems, Inc.  All rights reserved.
 *
 * Disclaimer: this file is provided without any warranty
 * as part of an early-access program, and the content is
 * bound to change before the final release.
 */

#ifndef NFP3800_NBI_MAC_H
#define NFP3800_NBI_MAC_H

/*================================================================*/
#include "nfp_nbi.h"

/*----------------------------------------------------------------*/
/* CPP Address Map (CPP_BASE = IMB translation: island + indexes) */

/* CPP_BASE + NFP3800_NBI_MAC + NFP3800_NBI_MAC_* */
#define NFP3800_NBI_MAC                                          (0x100000)

/*----------------------------------------------------------------*/
/* XPB Address Map (XPB_BASE = NFP3800_XPB_ISLAND(island))          */

#define NFP3800_NBI_MACX                                         (NBIX_BASE + 0x300000)

/* XPB_BASE + NFP3800_NBI_MACX_CSR + NFP3800_NBI_MACX_CSR_* */
#define NFP3800_NBI_MACX_CSR                                     (NFP3800_NBI_MACX + 0x00000)
/* XPB_BASE + NFP3800_NBI_MACX_IM + (nfp_im.h) */
#define NFP3800_NBI_MACX_IM                                      (NFP3800_NBI_MACX + 0x10000)
/* XPB_BASE + NFP3800_NBI_MACX_PLLCNTL */
#define NFP3800_NBI_MACX_PLLCNTL                                 (NFP3800_NBI_MACX + 0x20000)
/* XPB_BASE + NFP3800_NBI_MACX_SERDESCUSTCTL(_x) */
#define NFP3800_NBI_MACX_SERDESCUSTCTL(_x)                       (NFP3800_NBI_MACX + 0x30000 + ((_x) & 0x7) * 0x40)
/* XPB_BASE + NFP3800_NBI_MACX_ETH[2] + NFP3800_NBI_MACX_ETH_* */
#define NFP3800_NBI_MACX_ETH(_x)                                 (NFP3800_NBI_MACX + 0x40000 + ((_x) & 0x1) * 0x20000)
/* XPB_BASE + NFP3800_NBI_MACX_MEMCTL[2] + NFP3800_NBI_MACX_MEMCTL_* */
#define NFP3800_NBI_MACX_MEMCTL(_x)                              (NFP3800_NBI_MACX + 0x80000 + ((_x) & 0x1) * 0x10000)
/* XPB_BASE + NFP3800_NBI_MACX_CDS_ECC[6] + (nfp_ecc.h) */
#define NFP3800_NBI_MACX_CDS_ECC(_x)                             (NFP3800_NBI_MACX + 0xa0000 + ((_x) & 0x7) * 0x10000)

/*================================================================*/


/* HGID: c3e5162fe280 */

#ifndef NFP3800_LONGNAMES

/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsLo - Bits 31:0 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameTooLongErrors - Frame received exceeded the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxInRangeLengthErrors - A count of frames with a length/type field value between 46 (VLAN: 42) and less than 0x0600, that does not match the number of payload data octets received. Should count also if length/type field is less than 46 (VLAN: 42) and the frame is longer than 64 bytes.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxVlanReceivedOK - VLAN frame received without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) was received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsDropEvents - Counts the number of dropped packets due to internal errors of the MAC Client. Occurs when a Receive FIFO overflow condition persists.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxAlignmentErrors - Frame received with an alignment error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPauseMacCtlFramesReceived - Valid pause frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameCheckSequenceErrors - CRC-32 Error is detected but the frame is otherwise of correct length.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsUndersizePkts - Total number of packets that were less than 64 octets long with a good CRC. Note: Undersize packets are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsJabbers - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a bad Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsFragments - Total number of packets that were less than 64 octets long with a wrong CRC. Note: Fragments are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived2 - CBFC (Class Based Flow Control) pause frames received for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived3 - CBFC (Class Based Flow Control) pause frames received for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsOversizePkts - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a good Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived0 - CBFC (Class Based Flow Control) pause frames received for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived1 - CBFC (Class Based Flow Control) pause frames received for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived4 - CBFC (Class Based Flow Control) pause frames received for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived5 - CBFC (Class Based Flow Control) pause frames received for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived6 - CBFC (Class Based Flow Control) pause frames received for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived7 - CBFC (Class Based Flow Control) pause frames received for class 7.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxMacCtlFramesReceived - Valid control frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPauseMacCtlFramesTransmitted - Valid pause frame transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1519toMAXoctets - Frames (good and bad) with 1519 to MAX octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted0 - CBFC (Class Based Flow Control) pause frames transmitted for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted1 - CBFC (Class Based Flow Control) pause frames transmitted for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted4 - CBFC (Class Based Flow Control) pause frames transmitted for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted5 - CBFC (Class Based Flow Control) pause frames transmitted for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted2 - CBFC (Class Based Flow Control) pause frames transmitted for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted3 - CBFC (Class Based Flow Control) pause frames transmitted for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted6 - CBFC (Class Based Flow Control) pause frames transmitted for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted7 - CBFC (Class Based Flow Control) pause frames transmitted for class 7.
  Register: MacChannelStats[128]_RxCIfInOctetsLo - Bits 31:0 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsLo - Total number of octets for valid frames received. Goodput octets.
  Register: MacChannelStats[128]_RxCIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) that is signaled on the Rx FIFO interface.
  Register: MacChannelStats[128]_RxCIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacChannelStats[128]_RxCIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacChannelStats[128]_RxCIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacChannelStats[128]_RxCStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacChannelStats[128]_RxCStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacChannelStats[128]_RxCStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacChannelStats[128]_RxCStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacChannelStats[128]_RxCStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacChannelStats[128]_RxCStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacChannelStats[128]_RxChanFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacChannelStats[128]_RxChanVlanReceivedOK - VLAN frame received without error.
  Register: MacChannelStats[128]_TxCIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacChannelStats[128]_TxCIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacChannelStats[128]_TxCIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacChannelStats[128]_TxChanFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacChannelStats[128]_TxChanVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacChannelStats[128]_TxCIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacChannelStats[128]_TxCIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
    Bits: 31:0  StatCounter32(rc) - Clear on read 32 bit counter.
*/
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PIF_IN_OCTETS_LO(_x, _y) (0x00000000 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_TOO_LONG_ERRORS(_x, _y) (0x00000008 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_IN_RANGE_LENGTH_ERRORS(_x, _y) (0x0000000c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_VLAN_RECEIVED_OK(_x, _y) (0x00000010 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PIF_IN_ERRORS(_x, _y) (0x00000014 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PIF_IN_BROADCAST_PKTS(_x, _y) (0x00000018 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_DROP_EVENTS(_x, _y) (0x0000001c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_ALIGNMENT_ERRORS(_x, _y) (0x00000020 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PAUSE_MAC_CTL_FRAMES_RECEIVED(_x, _y) (0x00000024 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAMES_RECEIVED_OK(_x, _y) (0x00000028 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_FRAME_CHECK_SEQUENCE_ERRORS(_x, _y) (0x0000002c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PIF_IN_UNICAST_PKTS(_x, _y) (0x00000030 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PIF_IN_MULTICAST_PKTS(_x, _y) (0x00000034 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS(_x, _y) (0x00000038 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_UNDERSIZE_PKTS(_x, _y) (0x0000003c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_64_OCTETS(_x, _y) (0x00000040 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_65_127_OCTETS(_x, _y) (0x00000044 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_512_1023_OCTETS(_x, _y) (0x00000048 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_1024_1518_OCTETS(_x, _y) (0x0000004c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_JABBERS(_x, _y) (0x00000050 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_FRAGMENTS(_x, _y) (0x00000054 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_2(_x, _y) (0x00000058 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_3(_x, _y) (0x0000005c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_128_255_OCTETS(_x, _y) (0x00000060 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_256_511_OCTETS(_x, _y) (0x00000064 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_PKTS_1519_MAX_OCTETS(_x, _y) (0x00000068 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PSTATS_OVERSIZE_PKTS(_x, _y) (0x0000006c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_0(_x, _y) (0x00000070 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_1(_x, _y) (0x00000074 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_4(_x, _y) (0x00000078 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_5(_x, _y) (0x0000007c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_6(_x, _y) (0x00000080 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_CBFC_PAUSE_FRAMES_RECEIVED_7(_x, _y) (0x00000084 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_MAC_CTL_FRAMES_RECEIVED(_x, _y) (0x00000088 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PIF_OCTETS_LO(_x, _y) (0x000000a0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_VLAN_TRANSMITTED_OK(_x, _y) (0x000000a8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PIF_ERRORS(_x, _y) (0x000000ac + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PIF_BROADCAST_PKTS(_x, _y) (0x000000b0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_64_OCTETS(_x, _y) (0x000000b4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_256_511_OCTETS(_x, _y) (0x000000b8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_512_1023_OCTETS(_x, _y) (0x000000bc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PAUSE_MAC_CTL_FRAMES_TRANSMITTED(_x, _y) (0x000000c0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_FRAMED_TRANSMITTED_OK(_x, _y) (0x000000c4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PIF_UNICAST_PKTS(_x, _y) (0x000000c8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PIF_MULTICAST_PKTS(_x, _y) (0x000000cc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_65_127_OCTETS(_x, _y) (0x000000d0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_128_255_OCTETS(_x, _y) (0x000000d4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_1024_1518_OCTETS(_x, _y) (0x000000d8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PSTATS_PKTS_1519_MAX_OCTETS(_x, _y) (0x000000dc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_0(_x, _y) (0x000000e0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_1(_x, _y) (0x000000e4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_4(_x, _y) (0x000000e8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_5(_x, _y) (0x000000ec + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_2(_x, _y) (0x000000f0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_3(_x, _y) (0x000000f4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_6(_x, _y) (0x000000f8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_CBFC_PAUSE_FRAMES_TRANSMITTED_7(_x, _y) (0x000000fc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CIF_IN_OCTETS_LO(_x) (0x00010000 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_OCTETS_LO(_x) (0x00010008 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CIF_IN_ERRORS(_x) (0x00010010 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CIF_IN_UNICAST_PKTS(_x) (0x00010014 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CIF_IN_MULTICAST_PKTS(_x) (0x00010018 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CIF_IN_BROADCAST_PKTS(_x) (0x0001001c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS(_x)   (0x00010020 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_64_OCTETS(_x) (0x00010024 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_65_127_OCTETS(_x) (0x00010028 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_128_255_OCTETS(_x) (0x0001002c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_256_511_OCTETS(_x) (0x00010030 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_512_1023_OCTETS(_x) (0x00010034 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_1024_1518_OCTETS(_x) (0x00010038 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_PKTS_1519_MAX_OCTETS(_x) (0x0001003c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CHAN_FRAMES_RECEIVED_OK(_x) (0x00010040 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CHAN_VLAN_RECEIVED_OK(_x) (0x00010044 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CIF_OCTETS_LO(_x) (0x00010060 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CIF_ERRORS(_x)    (0x00010068 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CIF_UNICAST_PKTS(_x) (0x0001006c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CHAN_FRAMED_TRANSMITTED_OK(_x) (0x00010070 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CHAN_VLAN_TRANSMITTED_OK(_x) (0x00010074 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CIF_MULTICAST_PKTS(_x) (0x00010078 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CIF_BROADCAST_PKTS(_x) (0x0001007c + (0x100 * ((_x) & 0x7f)))
#define   NFP3800_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER32_STAT_COUNTER_32(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER32_STAT_COUNTER_32_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsHi - Bits 39:32 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted. Valid pause frame transmitted.for 24bit (TxCounter24)
  Register: MacChannelStats[128]_RxCIfInOctetsHi - Bits 39:32 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsHi - Total number of octets for valid frames received. Goodput octets.
  Register: MacChannelStats[128]_TxCIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
    Bits:  7:0  StatCounter8(rc) - Clear on read 8 bit counter.
*/
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RX_PIF_IN_OCTETS_HI(_x, _y) (0x00000004 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TX_PIF_OCTETS_HI(_x, _y) (0x000000a4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_CIF_IN_OCTETS_HI(_x) (0x00010004 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RX_PSTATS_OCTETS_HI(_x) (0x0001000c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TX_CIF_OCTETS_HI(_x) (0x00010064 + (0x100 * ((_x) & 0x7f)))
#define   NFP3800_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER8_STAT_COUNTER_8(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MAC_MACETHPORTSTATSHYD_MACETHPORTSTATSSEG_STATCOUNTER8_STAT_COUNTER_8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacBlkReset - Main Block Resets
    Bits: 31:24 Rfu2(rw) - Reserved for Use.
    Bits: 23    MacHy1StatRst(rw) - The Reset for Hydra1 Stats logic.
    Bits: 22    MacHy0StatRst(rw) - The Reset for Hydra0 stats logic.
    Bits: 21    MacTxRstMpb(rw) - The Reset for tx gasket MPB logic.
    Bits: 20    MacRxRstMpb(rw) - The Reset for rx gasket MPB logic.
    Bits: 19    MacTxRstCore(rw) - The Reset for tx gasket core logic.
    Bits: 18    MacRxRstCore(rw) - The Reset for rx gasket core logic.
    Bits: 17    MacFcX2RstLk1(rw) - N/A.
    Bits: 16    MacFcX2RstLk0(rw) - N/A.
    Bits: 15    MacRxRstLk1(rw) - N/A.
    Bits: 14    MacRxRstLk0(rw) - N/A.
    Bits: 13    MacTxRstLk1(rw) - N/A.
    Bits: 12    MacTxRstLk0(rw) - N/A.
    Bits: 11    MacRstLk1(rw) - N/A.
    Bits: 10    MacRstLk0(rw) - N/A.
    Bits:  9    MacX2ClkEnLk1(rw) - N/A.
    Bits:  8    MacX2ClkEnLk0(rw) - N/A.
    Bits:  7    MacCoreClkEnLk1(rw) - N/A.
    Bits:  6    MacCoreClkEnLk0(rw) - N/A.
    Bits:  5    MacCoreClkEnHy1(rw) - Core Clock enable for Hydra1
    Bits:  4    MacCoreClkEnHy0(rw) - Core Clock enable for Hydra0
    Bits:  3    Rfu(rw) - Reserved for Use.
    Bits:  2    MacSerDesRst(rw) - Reset to all MAC SerDes
    Bits:  1    MacSReset(rw) - SRESET - Not Used
    Bits:  0    MacHReset(rw) - HRESET - Not Used
*/
#define NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST                   0x00000000
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_RFU2(_x)        (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_RFU2_of(_x)     (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_HY1_STAT_RST BIT(23)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_HY0_STAT_RST BIT(22)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_TX_RST_MPB  BIT(21)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_RX_RST_MPB  BIT(20)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_TX_RST_CORE BIT(19)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_RX_RST_CORE BIT(18)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_FCX2RST_LK1 BIT(17)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_FCX2RST_LK0 BIT(16)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_RXRST_LK1   BIT(15)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_RXRST_LK0   BIT(14)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_TXRST_LK1   BIT(13)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_TXRST_LK0   BIT(12)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_RST_LK1     BIT(11)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_RST_LK0     BIT(10)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_X2CLKEN_LK1 BIT(9)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_X2CLKEN_LK0 BIT(8)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_CORECLKEN_LK1 BIT(7)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_CORECLKEN_LK0 BIT(6)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_CORECLKEN_HY1 BIT(5)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_CORECLKEN_HY0 BIT(4)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_RFU             BIT(3)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_SERDES_RST  BIT(2)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_S_RST       BIT(1)
#define   NFP3800_NBI_MACX_CSR_MAC_BLOCK_RST_MAC_H_RST       BIT(0)
/*----------------------------------------------------------------
  Register: MacHyd0BlkReset - Hydra-10:0 Resets Register
  Register: MacHyd1BlkReset - Hydra-10:1 Resets Register
    Bits: 31:20 MacHydRxSerDesIfRst(rw) - Hydra RX Serdes Interface Resets. Rx Serdes clks must be running.
    Bits: 19:16 Rfu(rw) - Reserved for Use.
    Bits: 15:4  MacHydTxSerDesIfRst(rw) - Hydra TX Serdes Interface Resets. Tx Serdes clks must be running.
    Bits:  3    MacHydRxFFRst(rw) - Hydra RX Fifo Interface Clock Domain Reset.
    Bits:  2    MacHydTxFFRst(rw) - Hydra TX Fifo Interface Clock Domain Reset.
    Bits:  1    MacHydRegRst(rw) - Hydra Reg Clock Domain Reset.
    Bits:  0    MacHydRefRst(rw) - Hydra Ref Clock Domain Reset.
*/
#define NFP3800_NBI_MACX_CSR_MAC_HYD0_BLOCK_RST              0x00000004
#define NFP3800_NBI_MACX_CSR_MAC_HYD1BLOCK_RST               0x00000008
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_RX_SERDES_RST(_x) (((_x) & 0xfff) << 20)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_RX_SERDES_RST_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_RFU(_x)        (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_RFU_of(_x)     (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_TX_SERDES_RST(_x) (((_x) & 0xfff) << 4)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_TX_SERDES_RST_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_RX_FF_RST BIT(3)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_TX_FF_RST BIT(2)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_REG_RST BIT(1)
#define   NFP3800_NBI_MACX_CSR_MACHYDBLKRESET_MAC_HYD_REF_RST BIT(0)
/*----------------------------------------------------------------
  Register: MacMuxCtrl - Mac Mux Control Register
    Bits: 31:10 RfuMuxCtrl(rw) - Reserved.
    Bits:  9:0  NbiPoolLive(ro) - Live value of the NBI IG buffer pool. Bit[9] set indicates count is negative, which can be expected at times.
*/
#define NFP3800_NBI_MACX_CSR_MAC_MUX_CTRL                    0x0000000c
#define   NFP3800_NBI_MACX_CSR_MAC_MUX_CTRL_RFU_MUX_CTRL(_x) (((_x) & 0x3fffff) << 10)
#define   NFP3800_NBI_MACX_CSR_MAC_MUX_CTRL_RFU_MUX_CTRL_of(_x) (((_x) >> 10) & 0x3fffff)
#define   NFP3800_NBI_MACX_CSR_MAC_MUX_CTRL_NBI_POOL_LIVE(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_MUX_CTRL_NBI_POOL_LIVE_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacSerDesEn - Mac SerDes Enable Register
    Bits: 31    DmeModeHwDisable(rw) - When set, prevents the AutoNeg IP from setting DME mode on all RX lanes.
    Bits: 30:24 Rfu(rw) - Reserved for Use.
    Bits: 23:0  SerDesEnable(rw) - Serdes Enables. (May be redefined when SerDes added).
*/
#define NFP3800_NBI_MACX_CSR_MAC_SERDES_EN                   0x00000010
#define   NFP3800_NBI_MACX_CSR_MAC_SERDES_EN_DME_MODE_HW_DISABLE BIT(31)
#define   NFP3800_NBI_MACX_CSR_MAC_SERDES_EN_RFU(_x)         (((_x) & 0x7f) << 24)
#define   NFP3800_NBI_MACX_CSR_MAC_SERDES_EN_RFU_of(_x)      (((_x) >> 24) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MAC_SERDES_EN_SERDES_ENABLE(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_SERDES_EN_SERDES_ENABLE_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacSysSupCtrl - Mac System Support Control Register
    Bits: 31    HistoGoodputOnly(rw) - When set, stats histograms only count goodput
    Bits: 30    NbiIgPortXoffEn(rw) - If set to 1, enables the NBI to inhibit IG dequeues on a port basis.
    Bits: 29    SplitMemEnhEg(rw) - Combined with SplitMemIG to configure the gasket memories for Egress. 2b00:Core0 all mem, 2b01:Core0 1/2 and Core1 1.2, 2b10:Core1 all memory, 2b11:Core0 3/4 Core1 1/4.
    Bits: 28    SplitMemEnh(rw) - Combined with SplitMemIG to configure the gasket memories for Ingress. 2b00:Core0 all mem, 2b01:Core0 1/2 and Core1 1.2, 2b10:Core1 all memory, 2b11:Core0 3/4 Core1 1/4.
    Bits: 27    IgParsePaylenEnable(rw) - When set, IG parser will use L3 paylength to limit checksum for L4(UDP/TCP) and L4 overall checksums.
    Bits: 26    MacSerDesLaneSwapL23L12(rw) - N/A.
    Bits: 25    MacSerDesLaneSwapL11L00(rw) - N/A.
    Bits: 24    MacIlkForcePadErr(rw) - N/A.
    Bits: 23:20 MacMpbFreeBufFifoLowWm(rw) - Low Water mark for Free Buffer FIFO to start backpressuring NBI MPB thru denial of data credits.
    Bits: 19    MacIgLnkLstFreezeOnErrN(rw) - When 0, Freeze IG Linklist on Multibit ECC error.
    Bits: 18    MacEgLnkLstFreezeOnErrN(rw) - When 0, Freeze EG Linklist on Multibit ECC error.
    Bits: 17    DwrrArbiterDisable(rw) - IG DQ DWRR arbiter disable bit. Setting this bit to 1 will disable Ingress DQ operation.
    Bits: 16    DwrrWeightWrEnable(rw) - IG DQ DWRR arbiter inits to fixed weights. To overwrite the fixed weights, this bit must be set and remain set to use the override values.
    Bits: 15    MacIlkLiveIntSel(rw) - .
    Bits: 14    Lk1IgDqSegmentedEn(rw) - .
    Bits: 13    Lk0IgDqSegmentedEn(rw) - .
    Bits: 12    Lk1LinklistEn(rw) - When set and SplitMemIG set, enables the IG freelist FIFO for Laken1 to pull from the free pool.
    Bits: 11    Lk0LinklistEn(rw) - When set, enables the IG freelist FIFO for Laken0 to pull from the free pool.
    Bits: 10    Hy1LinklistEn(rw) - When set and SplitMemIG also set, enables the IG freelist FIFO for Hydra1 to pull from the free pool.
    Bits:  9    Hy0LinklistEn(rw) - When set, enables the IG freelist FIFO for Hydra0 to pull from the free pool.
    Bits:  8    SplitMemIG(rw) - When set, splits the channels, packet and linklist memories in half to support 2 active hydras. Ingress and Egress.
    Bits:  7    ExtraEthHistMode(rw) - When set, swaps some channel stats counters for additional histogram size counters. Ethernet ports only
    Bits:  6    Limiter_Disable_Hy1(rw) - When set, disables the EG DQ limiter for ALL ports 0-19. Eq limiter only enabled for TDM modes 0, 1G, and 2.5G
    Bits:  5    MacSysSupCtrlA(rw) - Control Bit for system support block
    Bits:  4    MacPerfFast2Slow(rw) - Control Bit for perf_synchronizer. If CORE_CLK faster than P_CLK set to 1.
    Bits:  3    TimeStampFrc(rw) - When set, timestamp runs as a 64-bit Free Running Counter incrementing the assigned every Core_Clock cycle. When 0, the counters operate as 32 bits of seconds and 32 bits of nsec when the appropriate increment value is set with the lower 32 bits rolling over to 0 at 999,999,999 + 1 and incrementing the upper 32 bit seconds counter
    Bits:  2    TimeStampSet(rw) - When set, timestamp loads with the init values from the setSec and setNsec registers. TimeStamEn MUST BE 0 for set function to operate.
    Bits:  1    TimeStampRst(rw) - When set, timestamp resets to 0.
    Bits:  0    TimeStampEn(rw) - When set, timestamp increments at the set incr value each core_clock.
*/
#define NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL            0x00000014
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_HISTO_GOODPUT_ONLY BIT(31)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_NBI_IG_PORT_XOFF_EN BIT(30)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_SPLIT_MEM_ENH_EG BIT(29)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_SPLIT_MEM_ENH BIT(28)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_IG_PARSE_PAYLEN_ENABLE BIT(27)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_SERDES_LANE_SWAP_L23_L12 BIT(26)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_SERDES_LANE_SWAP_L11_L00 BIT(25)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_ILK_FORCE_PAD_ERR BIT(24)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_MPB_FREE_BUF_FIFO_LOW_WM(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_MPB_FREE_BUF_FIFO_LOW_WM_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_IG_LNK_LST_FREEZE_ON_ERR_N BIT(19)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_EG_LNK_LST_FREEZE_ON_ERR_N BIT(18)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_DWRR_ARBITER_DISABLE BIT(17)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_DWRR_WEIGHT_WR_ENABLE BIT(16)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_ILK_LIVE_INT_SEL BIT(15)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_LK1_IG_DQ_SEGEMENTED_EN BIT(14)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_LK0_IG_DQ_SEGEMENTED_EN BIT(13)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_LK1_LINKLIST_EN BIT(12)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_LK0_LINKLIST_EN BIT(11)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_HY1_LINKLIST_EN BIT(10)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_HY0_LINKLIST_EN BIT(9)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_SPLIT_MEM_IG BIT(8)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_EXTRA_ETH_HIST_MODE BIT(7)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_LIMITER_DISABLE_HY1 BIT(6)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_SYS_SUPPORT_CTRLA BIT(5)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_MAC_PERF_FAST_2_SLOW BIT(4)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_TIMESTAMP_FRC BIT(3)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_TIMESTAMP_SET BIT(2)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_TIMESTAMP_RST BIT(1)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_CTRL_TIMESTAMP_EN BIT(0)
/*----------------------------------------------------------------
  Register: MacSysSupStat - Mac System Support Status Register
    Bits: 31:25 MacNbiPoolLwm(rw) - Initial low water mark of the NBI IG buffer pool. Only change value at init time with MacNbiPoolDisable = 1. When pool count is less than or equal to the LWM, DQ requests and DWRR change DQ behavior to manage NBI buffer pool.
    Bits: 24:16 MacNbiPoolSize(rw) - Initial Size of the NBI IG buffer pool. Only change value at init time with MacNbiPoolDisable = 1.
    Bits: 15    MacNbiPoolDisable(rw) - If set to 1, mac does not monitor the available buffer memory in NBI. If 0, mac will manage NBI IG memory resources and schedule IG DQ traffic accordingly.
    Bits: 14    MacNbiPoolFairEn(rw) - When the NBI pool counters are enabled, setting this bit enables improved IG DQ fairness to MPB.
    Bits: 13    MacNbiPool2Sel(rw) - Must be 0. Not supported.
    Bits: 12    MacIgChkOverall(rw) - If set, IG parse checksum will always be the L2 overall checksum on all ports.
    Bits: 11    MacErrStatEn(rw) - Replace IG parse result with IP provided ErrStatus on all ports.
    Bits: 10    MacNoDropErrPktEn(rw) - Pass IG packets with IP flagged errors thru to NBI for all ports. Must have IG parse prepend enabled for all active ports and MacErrStatEn=1 to inhibit dropping.
    Bits:  9:5  MacEthTsMld2(rw) - Timestamp adjustment value for Multi-Lane TS when MLD=2(100G). 40G adjustment is val >> 1.
    Bits:  4:0  MacEthTsMld1(rw) - Timestamp adjustment value for Multi-Lane TS when MLD=1(100G). 40G adjustment is val >> 1.
*/
#define NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT            0x00000018
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL_LWM(_x) (((_x) & 0x7f) << 25)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL_LWM_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL_SIZE(_x) (((_x) & 0x1ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL_SIZE_of(_x) (((_x) >> 16) & 0x1ff)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL_DISABLE BIT(15)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL_FAIR_EN BIT(14)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NBI_POOL2_SEL BIT(13)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_IG_CHK_OVERALL BIT(12)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_ERR_STAT_EN BIT(11)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_NO_DROP_ERR_PKT_EN BIT(10)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_ETH_TS_MLD_2(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_ETH_TS_MLD_2_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_ETH_TS_MLD_1(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_SYS_SUPPORT_STAT_MAC_ETH_TS_MLD_1_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacTimeStampNsec - Mac TimeStamp Nanoseconds
    Bits: 31:0  MacTimeStampNsec(ro) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP3800_NBI_MACX_CSR_MAC_TS_NSEC                     0x0000001c
#define   NFP3800_NBI_MACX_CSR_MAC_TS_NSEC_MAC_TS_NSEC(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_NSEC_MAC_TS_NSEC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSec - Mac TimeStamp Seconds
    Bits: 31:0  MacTimeStampSec(ro) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP3800_NBI_MACX_CSR_MAC_TS_SEC                      0x00000020
#define   NFP3800_NBI_MACX_CSR_MAC_TS_SEC_MAC_TS_SEC(_x)     (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_SEC_MAC_TS_SEC_of(_x)  (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampIncr - Mac TimeStamp Increment in Nanoseconds and fraction of nanoseconds
    Bits: 19:16 IncrNsec(rw) - Increment in whole nsecs to TsNsec in nsec every Mac Core Clock(800Mhz nominal)
    Bits: 15:0  IncrFraction(rw) - Increment in fractional to TsNsec in nsec every Mac Core Clock to compensate for variations.
*/
#define NFP3800_NBI_MACX_CSR_MAC_TS_INCR                     0x00000024
#define   NFP3800_NBI_MACX_CSR_MAC_TS_INCR_MAC_TS_INCR_NSEC(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_INCR_MAC_TS_INCR_NSEC_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_INCR_MAC_TS_INCR_FRAC(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_INCR_MAC_TS_INCR_FRAC_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetNsec - Mac TimeStamp Set Nanoseconds
    Bits: 31:0  MacTimeStampSetNsec(rw) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP3800_NBI_MACX_CSR_MAC_TS_SET_NSEC                 0x00000028
#define   NFP3800_NBI_MACX_CSR_MAC_TS_SET_NSEC_MAC_TS_SET_NSEC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_SET_NSEC_MAC_TS_SET_NSEC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetSec - Mac TimeStamp Set Seconds
    Bits: 31:0  MacTimeStampSetSec(rw) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP3800_NBI_MACX_CSR_MAC_TS_SET_SEC                  0x0000002c
#define   NFP3800_NBI_MACX_CSR_MAC_TS_SET_SEC_MAC_TS_SEC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_TS_SET_SEC_MAC_TS_SEC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord3100 - Egress TDM cycle word 31:00 for Hydra0 and Interlaken(s).
  Register: MacTdm1CycleWord3100 - Egress TDM cycle word 31:00 for Hydra1.
    Bits: 31:28 MacTdmPortSlot7(rw) - TDM egress port for TDM slot 7
    Bits: 27:24 MacTdmPortSlot6(rw) - TDM egress port for TDM slot 6
    Bits: 23:20 MacTdmPortSlot5(rw) - TDM egress port for TDM slot 5
    Bits: 19:16 MacTdmPortSlot4(rw) - TDM egress port for TDM slot 4
    Bits: 15:12 MacTdmPortSlot3(rw) - TDM egress port for TDM slot 3
    Bits: 11:8  MacTdmPortSlot2(rw) - TDM egress port for TDM slot 2
    Bits:  7:4  MacTdmPortSlot1(rw) - TDM egress port for TDM slot 1
    Bits:  3:0  MacTdmPortSlot0(rw) - TDM egress port for TDM slot 0
*/
#define NFP3800_NBI_MACX_CSR_MAC_TDM0_CYCLE_WORD_3100        0x00000030
#define NFP3800_NBI_MACX_CSR_MAC_TDM1_CYCLE_WORD_3100        0x00000038
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT7(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT6(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT6_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT5(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT5_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT4(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT4_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT3(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT3_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT2(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT1(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD3100_MAC_TDM_PORT_SLOT0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord4732 - Egress TDM cycle word 47:32 for Hydra0.
  Register: MacTdm1CycleWord4732 - Egress TDM cycle word 47:32 for Hydra1.
    Bits:  7:4  MacTdmPortSlot9(rw) - TDM egress port for TDM slot 9
    Bits:  3:0  MacTdmPortSlot8(rw) - TDM egress port for TDM slot 8
*/
#define NFP3800_NBI_MACX_CSR_MAC_TDM0_CYCLE_WORD_4732        0x00000034
#define NFP3800_NBI_MACX_CSR_MAC_TDM1_CYCLE_WORD_4732        0x0000003c
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD4732_MAC_TDM_PORT_SLOT9(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD4732_MAC_TDM_PORT_SLOT9_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD4732_MAC_TDM_PORT_SLOT8(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MACTDMCYCLEWORD4732_MAC_TDM_PORT_SLOT8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0Mode0900 - Mac Hydra0 Ports Egress mode bits for ports 9-0.
  Register: MacTdm1Mode0900 - Mac Hydra1 Ports Egress mode bits for ports 9-0.
    Bits: 29:27 MacTdmModePort9(rw) - TDM egress port rate for Mac port 9
    Bits: 26:24 MacTdmModePort8(rw) - TDM egress port rate for Mac port 8
    Bits: 23:21 MacTdmModePort7(rw) - TDM egress port rate for Mac port 67
    Bits: 20:18 MacTdmModePort6(rw) - TDM egress port rate for Mac port 6
    Bits: 17:15 MacTdmModePort5(rw) - TDM egress port rate for Mac port 5
    Bits: 14:12 MacTdmModePort4(rw) - TDM egress port rate for Mac port 4
    Bits: 11:9  MacTdmModePort3(rw) - TDM egress port rate for Mac port 3
    Bits:  8:6  MacTdmModePort2(rw) - TDM egress port rate for Mac port 2
    Bits:  5:3  MacTdmModePort1(rw) - TDM egress port rate for Mac port 1
    Bits:  2:0  MacTdmModePort0(rw) - TDM egress port rate for Mac port 0
*/
#define NFP3800_NBI_MACX_CSR_MAC_TDM0_MODE_0900              0x00000040
#define NFP3800_NBI_MACX_CSR_MAC_TDM1_MODE_0900              0x00000048
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_9(_x) (((_x) & 0x7) << 27)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_9_of(_x) (((_x) >> 27) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_9_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_8(_x) (((_x) & 0x7) << 24)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_8_of(_x) (((_x) >> 24) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_8_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_7(_x) (((_x) & 0x7) << 21)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_7_of(_x) (((_x) >> 21) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_7_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_6(_x) (((_x) & 0x7) << 18)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_6_of(_x) (((_x) >> 18) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_6_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_5(_x) (((_x) & 0x7) << 15)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_5_of(_x) (((_x) >> 15) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_5_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_4(_x) (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_4_of(_x) (((_x) >> 12) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_4_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_3(_x) (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_3_of(_x) (((_x) >> 9) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_3_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_2(_x) (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_2_of(_x) (((_x) >> 6) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_2_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_1(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_1_of(_x) (((_x) >> 3) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_1_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_0_of(_x) (((_x) >> 0) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MACTDMMODE0900_MAC_TDM_MODE_PORT_0_OFF (0)
/*----------------------------------------------------------------
  Register: MacTdm0Mode1110CrcEn - Mac Hydra0 Ports Tx Crc enable for ports 9-0.
  Register: MacTdm1Mode1110CrcEn - Mac Hydra1 Ports Tx Crc enable for ports 9-0.
    Bits: 25:16 MacEgressPortCrcEn(rw) - If set, Enables MAC egress port (09-00) to append CRC.
*/
#define NFP3800_NBI_MACX_CSR_MAC_TDM0_MODE_1110_CRC_EN       0x00000044
#define NFP3800_NBI_MACX_CSR_MAC_TDM1_MODE_1110_CRC_EN       0x0000004c
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE1110CRC_MAC_EGRESS_PORT_CRC_EN(_x) (((_x) & 0x3ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACTDMMODE1110CRC_MAC_EGRESS_PORT_CRC_EN_of(_x) (((_x) >> 16) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacPort2to0ChanAssign - Mac Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacPort5to3ChanAssign - Mac Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacPort8to6ChanAssign - Mac Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacPort9ChanAssign - Mac Hydra0 Ports 9 Channel Assignment Register.
  Register: MacPort12to10ChanAssign - Mac Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacPort15to13ChanAssign - Mac Hydra1 Port 5-3 Channel Assignment Register.
  Register: MacPort18to16ChanAssign - Mac Hydra1 Port 8-6 Channel Assignment Register.
  Register: MacPort19ChanAssign - Mac Hydra1 Port 9 Channel Assignment Register.
  Register: MacEgPort2to0ChanAssign - Mac EG Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort5to3ChanAssign - Mac EG Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacEgPort8to6ChanAssign - Mac EG Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacEgPort9ChanAssign - Mac EG Hydra0 Ports 9 Channel Assignment Register.
  Register: MacEgPort12to10ChanAssign - Mac EG Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort15to13ChanAssign - Mac EG Hydra1 Port 5-3 Channel Assignment Register.
  Register: MacEgPort18to16ChanAssign - Mac EG Hydra1 Port 8-6 Channel Assignment Register.
  Register: MacEgPort19ChanAssign - Mac EG Hydra1 Port 9 Channel Assignment Register.
    Bits: 29:26 PortNumOfChannels2(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 25:20 PortBaseChan2(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits: 19:16 PortNumOfChannels1(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 15:10 PortBaseChan1(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits:  9:6  PortNumOfChannels0(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits:  5:0  PortBaseChan0(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PORT_2_TO_0_CHAN_ASSIGN     0x00000050
#define NFP3800_NBI_MACX_CSR_MAC_PORT_5_TO_3_CHAN_ASSIGN     0x00000054
#define NFP3800_NBI_MACX_CSR_MAC_PORT_8_TO_6_CHAN_ASSIGN     0x00000058
#define NFP3800_NBI_MACX_CSR_MAC_PORT_9_CHAN_ASSIGN          0x0000005c
#define NFP3800_NBI_MACX_CSR_MAC_PORT_12_TO_10_CHAN_ASSIGN   0x00000060
#define NFP3800_NBI_MACX_CSR_MAC_PORT_15_TO_13_CHAN_ASSIGN   0x00000064
#define NFP3800_NBI_MACX_CSR_MAC_PORT_18_TO_16_CHAN_ASSIGN   0x00000068
#define NFP3800_NBI_MACX_CSR_MAC_PORT_19_CHAN_ASSIGN         0x0000006c
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_2_TO_0_CHAN_ASSIGN  0x00000240
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_5_TO_3_CHAN_ASSIGN  0x00000244
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_8_TO_6_CHAN_ASSIGN  0x00000248
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_9_CHAN_ASSIGN       0x0000024c
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_12_TO_10_CHAN_ASSIGN 0x00000250
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_15_TO_13_CHAN_ASSIGN 0x00000254
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_18_16_CHAN_ASSIGN   0x00000258
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_19_CHAN_ASSIGN      0x0000025c
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_NUM_OF_CHANS2(_x) (((_x) & 0xf) << 26)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_NUM_OF_CHANS2_of(_x) (((_x) >> 26) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_BASE_CHAN2(_x) (((_x) & 0x3f) << 20)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_BASE_CHAN2_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_NUM_OF_CHANS1(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_NUM_OF_CHANS1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_BASE_CHAN1(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_BASE_CHAN1_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_NUM_OF_CHANS0(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_NUM_OF_CHANS0_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_BASE_CHAN0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPORTCHANASSIGN_PORT_BASE_CHAN0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacPrePendCtl03to00 - Ethernet Core 0: Mac ports 03-00 prepend skip bytes.
  Register: MacPrePendCtl13to10 - Ethernet Core 1: Mac ports 03-00 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only). Ports 0 Maps to Interlaken MAC 0 if enabled.
    Bits:  3:0  IGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only). Port 0 Maps to Interlaken MAC 0 if enabled.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PREPEND_CTL_03_TO_00        0x00000070
#define NFP3800_NBI_MACX_CSR_MAC_PREPEND_CTL_13_TO_10        0x0000007c
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_3(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_3_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_3(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_3_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_2(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_2_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_2(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_2_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_1(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_1_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_EG_SKIP_OCTETS_PORT_0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL1_IG_SKIP_OCTETS_PORT_0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl07to04 - Ethernet Core 0: Mac ports 07-04 prepend skip bytes.
  Register: MacPrePendCtl17to14 - Ethernet Core 1: Mac ports 07-04 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP3800_NBI_MACX_CSR_MAC_PREPEND_CTL_07_TO_04        0x00000074
#define NFP3800_NBI_MACX_CSR_MAC_PREPEND_CTL_17_TO_14        0x00000080
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_7(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_7(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_7_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_6(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_6_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_6(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_6_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_5(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_5_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_5(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_5_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_4(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_EG_SKIP_OCTETS_PORT_4_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_4(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL2_IG_SKIP_OCTETS_PORT_4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl09to08 - Ethernet Core 0: Mac ports 09-08 prepend skip bytes.
  Register: MacPrePendCtl19to18 - Ethernet Core 1: Mac ports 09-08 prepend skip bytes.
    Bits: 31:16 Rfu(rw) - Reserved.
    Bits: 15:12 EGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP3800_NBI_MACX_CSR_MAC_PREPEND_CTL_09_TO_08        0x00000078
#define NFP3800_NBI_MACX_CSR_MAC_PREPEND_CTL_19_TO_18        0x00000084
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_RFU(_x)        (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_RFU_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTETS_PORT_9(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTETS_PORT_9_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTETS_PORT_9(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTETS_PORT_9_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTETS_PORT_8(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_EG_SKIP_OCTETS_PORT_8_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTETS_PORT_8(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDCTL3_IG_SKIP_OCTETS_PORT_8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtl15to00 - Mac IG ports 15-00 DSA TAG control.
  Register: MacEgPrePendDsaCtl15to00 - Mac EG ports 15-00 DSA TAG control.
    Bits: 31:30 DsaTagModePort15(rw) - DSA tagging mode for port 15.
    Bits: 29:28 DsaTagModePort14(rw) - DSA tagging mode for port 14.
    Bits: 27:26 DsaTagModePort13(rw) - DSA tagging mode for port 13.
    Bits: 25:24 DsaTagModePort12(rw) - DSA tagging mode for port 12.
    Bits: 23:22 DsaTagModePort11(rw) - DSA tagging mode for port 11.
    Bits: 21:20 DsaTagModePort10(rw) - DSA tagging mode for port 10.
    Bits: 19:18 DsaTagModePort9(rw) - DSA tagging mode for port 9.
    Bits: 17:16 DsaTagModePort8(rw) - DSA tagging mode for port 8.
    Bits: 15:14 DsaTagModePort7(rw) - DSA tagging mode for port 7.
    Bits: 13:12 DsaTagModePort6(rw) - DSA tagging mode for port 6..
    Bits: 11:10 DsaTagModePort5(rw) - DSA tagging mode for port 5.
    Bits:  9:8  DsaTagModePort4(rw) - DSA tagging mode for port 4.
    Bits:  7:6  DsaTagModePort3(rw) - DSA tagging mode for port 3.
    Bits:  5:4  DsaTagModePort2(rw) - DSA tagging mode for port 2.
    Bits:  3:2  DsaTagModePort1(rw) - DSA tagging mode for port 1.
    Bits:  1:0  DsaTagModePort0(rw) - DSA tagging mode for port 0.
*/
#define NFP3800_NBI_MACX_CSR_MAC_DSA_CTL_15_TO_00            0x00000088
#define NFP3800_NBI_MACX_CSR_MAC_EG_DSA_CTL_15_TO_00         0x000001cc
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_15(_x) (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_15_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_14(_x) (((_x) & 0x3) << 28)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_14_of(_x) (((_x) >> 28) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_13(_x) (((_x) & 0x3) << 26)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_13_of(_x) (((_x) >> 26) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_12(_x) (((_x) & 0x3) << 24)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_12_of(_x) (((_x) >> 24) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_11(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_11_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_10(_x) (((_x) & 0x3) << 20)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_10_of(_x) (((_x) >> 20) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_9(_x) (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_9_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_8(_x) (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_8_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_7(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_7_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_6(_x) (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_6_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_5(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_5_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_4(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_4_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_3(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_3_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_2(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_1(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_0(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_0_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL1_DSA_TAG_MODE_PORT_0_DISABLED (0)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtlLkand23to16 - Mac IG ports 19-16 DSA TAG control.
  Register: MacEgPrePendDsaCtlLkand23to16 - "Mac EG ports 19-10 DSA TAG control.
    Bits:  7:6  DsaTagModePort19(rw) - DSA tagging mode for port 19.
    Bits:  5:4  DsaTagModePort18(rw) - DSA tagging mode for port 18.
    Bits:  3:2  DsaTagModePort17(rw) - DSA tagging mode for port 17.
    Bits:  1:0  DsaTagModePort16(rw) - DSA tagging mode for port 16.
*/
#define NFP3800_NBI_MACX_CSR_MAC_DSA_CTL_23_TO_16            0x0000008c
#define NFP3800_NBI_MACX_CSR_MAC_EG_DSA_CTL_23_TO_16         0x000001d0
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_19(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_19_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_18(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_18_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_17(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_17_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_16(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_16_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACX_CSR_MACPREPENDDSACTL2_DSA_TAG_MODE_PORT_16_DISABLED (0)
/*----------------------------------------------------------------
  Register: MacPcsIpCtrl0 - MAC-PCS external control register IP0.
  Register: MacPcsIpCtrl1 - MAC-PCS external control register IP1.
    Bits: 31:27 IpCtrlRsvdB(rw) - Reserved.
    Bits: 26:20 PcsFecErrEna(rw) - Per capable port enable (9,8,4-0) for optional error propagation in receive when FEC is active (IEEE 802.3 Clause 74.8.3). When enabled uncorrectable error blocks will cause injection of sync header errors to allow error detection by the PCS layer.
    Bits: 19:13 PcsFecEna(rw) - Enable control for FEC (Clause 74) datapath per capable port: 9,8,4-0. When set to 1, the Clause 74 FEC datapath is active for the port. If deasserted (0) the datapath uses normal 66b coding.
    Bits: 12    UsgmiiPcs40Bit(rw) - When USGMII mode is enabled, the serdes width can be set either to 20b (sgpcs_40b_0 = 0) or 40b (sgpcs_40b_0 = 1). The Sdn2 must be set to 0.
    Bits: 11    MacMode40GEna(rw) - If set, MAC Lanes 0-3 in 40G mode.
    Bits: 10    PcsMode40GEna(rw) - If set, PCS Lanes 0-3 in 40G mode.
    Bits:  9:0  Sdn2(rw) - Per Port SerDes Width. 0=full, 1=half.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PCS_IP_CTRL_0               0x00000090
#define NFP3800_NBI_MACX_CSR_MAC_PCS_IP_CTRL_1               0x00000094
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_IP_CTRL_RSVD_B(_x) (((_x) & 0x1f) << 27)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_IP_CTRL_RSVD_B_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_PCS_FEC_ERR_ENA(_x) (((_x) & 0x7f) << 20)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_PCS_FEC_ERR_ENA_of(_x) (((_x) >> 20) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_PCS_FEC_ENA(_x)  (((_x) & 0x7f) << 13)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_PCS_FEC_ENA_of(_x) (((_x) >> 13) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_USGMII_PCS_40_BIT BIT(12)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_MAC_MODE_40G_ENA BIT(11)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_PCS_MODE_40G_ENA BIT(10)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_SD_N2(_x)        (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPCSIPCTRL_SD_N2_of(_x)     (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: EgBufferCreditPoolCount - Running count of total free buffers for egress.
    Bits: 31    EgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 EgBufferCreditCount1(ro) - Live value of egress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  EgBufferCreditCount(ro) - Live value of egress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP3800_NBI_MACX_CSR_EG_BUFFER_CREDIT_POOL_COUNT     0x00000098
#define   NFP3800_NBI_MACX_CSR_EG_BUFFER_CREDIT_POOL_COUNT_EG_BUFFER_LINKLIST_READY BIT(31)
#define   NFP3800_NBI_MACX_CSR_EG_BUFFER_CREDIT_POOL_COUNT_EG_BUFFER_CREDIT_COUNT1(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_EG_BUFFER_CREDIT_POOL_COUNT_EG_BUFFER_CREDIT_COUNT1_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_EG_BUFFER_CREDIT_POOL_COUNT_EG_BUFFER_CREDIT_COUNT(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_CSR_EG_BUFFER_CREDIT_POOL_COUNT_EG_BUFFER_CREDIT_COUNT_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: TxMpbCreditInit - Initial values for Ingress-side minipacket bus credits.
    Bits: 31:20 Rfu(rw) - Reserved for Use.
    Bits: 19:16 TxMpbCreditDataInit(rw) - TX MPB Data credits initial value.
    Bits: 15:12 Rfu2(rw) - Reserved for Use.
    Bits: 11:6  TxMpbCreditMaxPktInit(rw) - TX MPB Pkt Max credits initial value.
    Bits:  5:0  TxMpbCreditPktInit(rw) - TX MPB Pkt credits initial value. The register MUST BE set to 7 or less.
*/
#define NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT              0x0000009c
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_RFU(_x)    (((_x) & 0xfff) << 20)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_RFU_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_TX_MPB_CREDIT_DATA_INIT(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_TX_MPB_CREDIT_DATA_INIT_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_RFU2(_x)   (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_RFU2_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_TX_MPB_CREDIT_MAX_PKT_INIT(_x) (((_x) & 0x3f) << 6)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_TX_MPB_CREDIT_MAX_PKT_INIT_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_TX_MPB_CREDIT_PKT_INIT(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_CSR_TX_MPB_CREDIT_INIT_TX_MPB_CREDIT_PKT_INIT_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: IgBufferCreditPoolCount - Running count of total free buffers for ingress.
    Bits: 31    IgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 IgBufferCreditCount1(ro) - Live value of ingress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  IgBufferCreditCount(ro) - Live value of ingress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP3800_NBI_MACX_CSR_IG_BUFFER_CREDIT_POOL_COUNT     0x000000a0
#define   NFP3800_NBI_MACX_CSR_IG_BUFFER_CREDIT_POOL_COUNT_IG_BUFFER_LINKLIST_READY BIT(31)
#define   NFP3800_NBI_MACX_CSR_IG_BUFFER_CREDIT_POOL_COUNT_IG_BUFFER_CREDIT_COUNT1(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_IG_BUFFER_CREDIT_POOL_COUNT_IG_BUFFER_CREDIT_COUNT1_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_IG_BUFFER_CREDIT_POOL_COUNT_IG_BUFFER_CREDIT_COUNT(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_CSR_IG_BUFFER_CREDIT_POOL_COUNT_IG_BUFFER_CREDIT_COUNT_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: RxMpbCreditInit - Initial values for Egress-side minipacket bus credits.
    Bits: 31:30 Rfu2(rw) - Reserved for Use.
    Bits: 29:16 RxMpbCreditDataInit(rw) - Egress-side MPB Data credits initial value(not used).
    Bits: 15:14 Rfu(rw) - Reserved for Use.
    Bits: 13:0  RxMpbCreditBufInit(rw) - Egress-side MPB Buffer credit init.(not used).
*/
#define NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT              0x000000a4
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RFU2(_x)   (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RFU2_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RX_MPB_CREDIT_DATA_INIT(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RX_MPB_CREDIT_DATA_INIT_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RFU(_x)    (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RFU_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RX_MPB_CREDIT_BUF_INIT(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_CSR_RX_MPB_CREDIT_INIT_RX_MPB_CREDIT_BUF_INIT_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacTdmRateCreditInit - Egress TDM Per-Rate Credit Init values.
    Bits: 31:24 TDM100GECreditInit(rw) - Initial value of hydra 100G TDM credits.
    Bits: 23:16 TDM40GECreditInit(rw) - Initial value of hydra 40G TDM credits.
    Bits: 15:8  TDM10GECreditInit(rw) - Initial value of hydra 10G TDM credits.
    Bits:  7:0  TDM1GECreditInit(rw) - Initial value of hydra 1G TDM credits.
*/
#define NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT            0x000000a8
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_100GE_CREDIT_INIT(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_100GE_CREDIT_INIT_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_40GE_CREDIT_INIT(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_40GE_CREDIT_INIT_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_10GE_CREDIT_INIT(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_10GE_CREDIT_INIT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_1GE_CREDIT_INIT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_TDM_RATE_CREDIT_INIT_TDM_1GE_CREDIT_INIT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus0 - Interrupts and errors status register 0.
    Bits: 31:0  MacInterruptErrStatus1(rw) - RFU.
*/
#define NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_0           0x000000ac
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_0_MAC_INTERRUPT_ERR_STATUS_1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_0_MAC_INTERRUPT_ERR_STATUS_1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus1 - Interrupts and errors status register 1.
    Bits: 31    MacRxPfcChangeInt(rc) - Mac Interrupt for RX PFC State change any port.
    Bits: 30    MacTxPfcChangeInt(rc) - Mac Interrupt for TX PFC State change any port.
    Bits: 29:24 Rfu(rc) - Reserved for Use.
    Bits: 23:12 MacLinTrainingInthy1(rc) - Mac Link training Interrupt Hy1. (only 0-3 valid)
    Bits: 11:0  MacLinTrainingInthy0(rc) - Mac Link training Interrupt Hy0.
*/
#define NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1           0x000000b0
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_MAC_RX_PFC_CHANGE_INT BIT(31)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_MAC_TX_PFC_CHANGE_INT BIT(30)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_RFU(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_RFU_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_MAC_LINKT_TRAINING_INT_HY1(_x) (((_x) & 0xfff) << 12)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_MAC_LINKT_TRAINING_INT_HY1_of(_x) (((_x) >> 12) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_MAC_LINKT_TRAINING_INT_HY0(_x) (((_x) & 0xfff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_INTR_ERR_STATUS_1_MAC_LINKT_TRAINING_INT_HY0_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacIgEqStatus - Ingress Enqueue Status and purge control.
    Bits: 31:26 IgEqStatusRfu(rw) - RFU.
    Bits: 25    Purge(w1c) - Set the purge bit to force a packet purge. Purge should only be used if the eq_inh has been set and the enq_inh_done does not set and WT4EOP is set for that port. This bit self-clears.
    Bits: 24:20 PurgePort(rw) - Port number where to force a packet purge when the purge bit gets set(0-19 valid).
    Bits: 19:0  IgEqWt4Eop(ro) - Waiting For EOP status bit for all 20 ports. If 1, then a packet is in progress for thast port. Live bits.
*/
#define NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS                0x000000b4
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_IG_EQ_STATUS_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_IG_EQ_STATUS_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_PURGE        BIT(25)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_PURGE_PORT(_x) (((_x) & 0x1f) << 20)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_PURGE_PORT_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_IG_EQ_WT4EOP(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_EQ_STATUS_IG_EQ_WT4EOP_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacHyd1Ctrl - N/A.
    Bits: 31:28 MacHydPcsSd_N2(rw) - MBZero.
    Bits: 27:24 MacHydFecErrEna(rw) - FEC module optional function to forward indication of uncorrectable errors to the PCS layer by corrupting sync headers. Per PCS enable bit.
    Bits: 23:20 MacHydRfu20(rw) - RFU.
    Bits: 19:16 MacHydFecEna(rw) - If set to 1, FEC encapsulation is enabled. Per PCS enable bit. Note: The signal acts on a per PCS basis. Depending on the configuration of the PCS it will automatically ensure to enable the FEC in the required lanes applicable for the mode of operation.
    Bits: 15    MacHydPcsRxlauiEna2(rw) - Define for Channel 2 to operate with 2:1 bitmuxing per lane to use 2-lanes for the 4 VLs instead of 4 lanes. Can be used when RS-FEC is disabled for the channel. Allows use of 50G over 2-lanes without FEC or with FEC74. When bit is '0' the Channel operates without lane bitmuxing (1:1). When bit is '1' the channel uses 2:1 bitmuxing allowing it to operate with 50G over 2 lanes. Note: Channel 3 has no such input as it operates at 1lane only. See table.
    Bits: 14    MacHydPcsRxlauiEna0(rw) - Define for Channel 0 to operate with 2:1 bitmuxing per lane to use 2-lanes for the 4 VLs instead of 4 lanes. Can be used when RS-FEC is disabled for the channel. Allows use of 50G over 2-lanes without FEC or with FEC74. When bit is '0' the Channel operates without lane bitmuxing (1:1). When bit is '1' the channel uses 2:1 bitmuxing allowing it to operate with 50G over 2 lanes. Note: Channels 1 has no such input as it operates at 1lane only. See table.
    Bits: 13    MacHydPcsFec91SingleLaneEna2(rw) - Enable RS-FEC single lane mode. When 1, uses lane 2 for implementing 25G Ethernet. When 0, uses lanes 2,3 implementing 50G Ethernet.
    Bits: 12    MacHydPcsFec91SingleLaneEna0(rw) - Enable RS-FEC single lane mode. When 1, uses lane 0 for implementing 25G Ethernet. When 0, uses lanes 0,1 implementing 50G Ethernet.
    Bits: 11    MacHydRFU11(rw) - RFU.
    Bits: 10    MacHydPcs0Mode40Ena(rw) - Define 40G mode of operation for Channel 0. When set '1' the Channel 0 PCS is used to operate over all 4 links. Channels 1..3 are disabled. Has an effect only when MacHydCGEna=0. When set '0' all Channels 0..3 are active and can be configured individually.
    Bits:  9:6  MacHydPcsFec91Ena(rw) - Enable control for RS-FEC (Clause 91) datapath per channel. When asserted (1) the Clause 91 RS-FEC datapath is active for the potr. If deasserted (0) the datapath uses normal 66b coding and can optionally use FEC74. Bit 0 is relevant also when the 100G PCS is active to enable RS-FEC.
    Bits:  5    MacHydRFU5(rw) - RFU.
    Bits:  4    MacHydCGEna(rw) - 100Geth MAC PCS Enable, When set to 1, the 100Geth MAC and PCS are enabled. When set to 0, the 1/10/25/40/50Geth PCSs (N=0) can be enabled or the 1/10Geth PCSs (N=1 or N=3) can be enabled.
    Bits:  3:0  MacHydSGEna(rw) - SGMII PCS Enable: When set to 1, the SGMII PCS is enabled, when set to 0, the 10/25/40/50Geth PCS (N=0) is enabled, the 10/25Geth PCS (N=1) is enabled or the 10Geth PCS (N=2 or N=3) is enabled.
*/
#define NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL                   0x000000b8
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_SD_N2(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_SD_N2_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_FEC_ERR_ENA(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_FEC_ERR_ENA_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_RFU_20(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_RFU_20_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_FEC_ENA(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_FEC_ENA_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_RXLAUI_ENA2 BIT(15)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_RXLAUI_ENA0 BIT(14)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_FEC91_SINGLE_LANE_ENA_2 BIT(13)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_FEC91_SINGLE_LANE_ENA_0 BIT(12)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_RFU11   BIT(11)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS0_MODE40_ENA BIT(10)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_FEC91_ENA(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_PCS_FEC91_ENA_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_RFU5    BIT(5)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_CG_ENA  BIT(4)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_SG_ENA(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_HYD1_CTRL_MAC_HYD_SG_ENA_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacLiveStatus0 - Live status register 0.
    Bits: 31:0  MacLiveStatus0(ro) - Egress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Egress Chan Rd Addr field bit [6:5].
*/
#define NFP3800_NBI_MACX_CSR_MAC_LIVE_STATUS_0               0x000000bc
#define   NFP3800_NBI_MACX_CSR_MAC_LIVE_STATUS_0_MAC_LIVE_STATUS_0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_LIVE_STATUS_0_MAC_LIVE_STATUS_0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacLiveStatus1 - Live status register 1.
    Bits: 31:0  MacLiveStatus1(ro) - Ingress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Ingress Chan Rd Addr field bit [6:5].
*/
#define NFP3800_NBI_MACX_CSR_MAC_LIVE_STATUS_1               0x000000c0
#define   NFP3800_NBI_MACX_CSR_MAC_LIVE_STATUS_1_MAC_LIVE_STATUS_1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_LIVE_STATUS_1_MAC_LIVE_STATUS_1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacChanRdAddr - Addresses for reading IG/EG buffer count state.
    Bits: 31:23 Rfu1(rw) - Reserved for Use.
    Bits: 22:16 IgChanRdAddr(rw) - Channel index for reading Ig channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status1.
    Bits: 15:7  Rfu0(rw) - Reserved for Use.
    Bits:  6:0  EgChanRdAddr(rw) - Channel index for reading Eg channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status0.
*/
#define NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR                0x000000c4
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_RFU1(_x)     (((_x) & 0x1ff) << 23)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_RFU1_of(_x)  (((_x) >> 23) & 0x1ff)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_IG_CHAN_RD_ADDR(_x) (((_x) & 0x7f) << 16)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_IG_CHAN_RD_ADDR_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_RFU0(_x)     (((_x) & 0x1ff) << 7)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_RFU0_of(_x)  (((_x) >> 7) & 0x1ff)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_EG_CHAN_RD_ADDR(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_RD_ADDR_EG_CHAN_RD_ADDR_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacChanBufCount - Read data for IG/EG buffercounts indexed by Chan Rd Addr.
    Bits: 31:27 Rfu1(ro) - Reserved for Use.
    Bits: 26:16 IgChanRdBufCnt(ro) - Live Ingress Chan buffer count indexed by Ig Chan Rd Addr.
    Bits: 15:11 Rfu0(ro) - Reserved for Use.
    Bits: 10:0  EgChanRdBufCnt(ro) - Live Egress Chan buffer count indexed by Eg Chan Rd Addr.
*/
#define NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT              0x000000c8
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_RFU1(_x)   (((_x) & 0x1f) << 27)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_RFU1_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_IG_CHAN_RD_BUF_CNT(_x) (((_x) & 0x7ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_IG_CHAN_RD_BUF_CNT_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_RFU0(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_RFU0_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_EG_CHAN_RD_BUF_CNT(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_CHAN_BUF_COUNT_EG_CHAN_RD_BUF_CNT_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: PauseWaterMark[64] - Per Class water marks (N*2) and (N*2)+1 for pause generation.
    Bits: 31:28 PWMResv1(rw) - Reserved
    Bits: 27:16 PauseWaterMark1(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
    Bits: 15:12 PWMResv0(rw) - Reserved
    Bits: 11:0  PauseWaterMark0(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
*/
#define NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK(_x)             (0x000000cc + (0x4 * ((_x) & 0x3f)))
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PWM_RESV1(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PWM_RESV1_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PAUSE_WATERMARK1(_x) (((_x) & 0xfff) << 16)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PAUSE_WATERMARK1_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PWM_RESV0(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PWM_RESV0_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PAUSE_WATERMARK0(_x) (((_x) & 0xfff) << 0)
#define   NFP3800_NBI_MACX_CSR_PAUSE_WATERMARK_PAUSE_WATERMARK0_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRw - Indirect Read Access to Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(rw) - Read/Write address to buffer-counter array
    Bits: 23:22 Rfu2(rw) - Reserved for Use2.
    Bits: 21    CounterRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register.
    Bits: 20:0  Rfu(rw) - Reserved for Use.
*/
#define NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW  0x000001d4
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_COUNTER_ADDR(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_COUNTER_ADDR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_RFU2(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_RFU2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_COUNTER_RD_BUSY BIT(21)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_RFU(_x) (((_x) & 0x1fffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RW_RFU_of(_x) (((_x) >> 0) & 0x1fffff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRdData - Indirect Read Return Data for per-Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(ro) - Read/Write address to buffer-counter array
    Bits: 21    BufferCounterRdDataValid(ro) - Set to '1' when read complete and counter rd data is valid. Cleared when next read register is initiated
    Bits: 15:0  CounterRdData(ro) - 16 bit counter read value
*/
#define NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RD_DATA 0x000001d8
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RD_DATA_COUNTER_ADDR(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RD_DATA_COUNTER_ADDR_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RD_DATA_BUFFER_COUNTER_RD_DATA_VALID BIT(21)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RD_DATA_COUNTER_RD_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IG_CHAN_USED_BUFFER_CREDITS_RD_DATA_COUNTER_RD_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgPortPrependEn0 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra0.
  Register: IgPortPrependEn1 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra1.
    Bits: 31:26 Rfu(rw) - Reserved for Use.
    Bits: 25:24 PrependLk(rw) - Ingress Interlaken prepend enable bits.
    Bits: 23:22 PrependEn11(rw) - Ingress port11 prepend enable bits.
    Bits: 21:20 PrependEn10(rw) - Ingress port10 prepend enable bits.
    Bits: 19:18 PrependEn9(rw) - Ingress port9 prepend enable bits.
    Bits: 17:16 PrependEn8(rw) - Ingress port8 prepend enable bits.
    Bits: 15:14 PrependEn7(rw) - Ingress port7 prepend enable bits.
    Bits: 13:12 PrependEn6(rw) - Ingress port6 prepend enable bits.
    Bits: 11:10 PrependEn5(rw) - Ingress port5 prepend enable bits.
    Bits:  9:8  PrependEn4(rw) - Ingress port4 prepend enable bits.
    Bits:  7:6  PrependEn3(rw) - Ingress port3 prepend enable bits.
    Bits:  5:4  PrependEn2(rw) - Ingress port2 prepend enable bits.
    Bits:  3:2  PrependEn1(rw) - Ingress port1 prepend enable bits.
    Bits:  1:0  PrependEn0(rw) - Ingress port0 prepend enable bits.
*/
#define NFP3800_NBI_MACX_CSR_IG_PORT_PREPEND_EN0             0x000001dc
#define NFP3800_NBI_MACX_CSR_IG_PORT_PREPEND_EN1             0x000001e0
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_RFU(_x)           (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_RFU_of(_x)        (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_LK(_x)    (((_x) & 0x3) << 24)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_LK_of(_x) (((_x) >> 24) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN11(_x)  (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN11_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN10(_x)  (((_x) & 0x3) << 20)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN10_of(_x) (((_x) >> 20) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN9(_x)   (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN9_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN8(_x)   (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN8_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN7(_x)   (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN7_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN6(_x)   (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN6_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN5(_x)   (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN5_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN4(_x)   (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN4_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN3(_x)   (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN3_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN2(_x)   (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN1(_x)   (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN0(_x)   (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN0_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN0_NO_PREPEND (0)
#define     NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN0_PREPEND_CHK (1)
#define     NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN0_PREPEND_TS (2)
#define     NFP3800_NBI_MACX_CSR_IGPREPENDEN_PREPEND_EN0_PREPEND_TS_CHK (3)
/*----------------------------------------------------------------
  Register: IgPortL4ChksumSel - Enables, per-port, the ingress prepend checksum field to always be the overall L4 checksum and not the calculated L4 UDP/TCP checksum.
    Bits: 19:0  L4OverallEn(rw) - Ingress prepend L4 overall checksum enable bits.
*/
#define NFP3800_NBI_MACX_CSR_IG_PORT_L4_CHKSUM_SEL           0x000001e4
#define   NFP3800_NBI_MACX_CSR_IG_PORT_L4_CHKSUM_SEL_L4_OVERALL_EN(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IG_PORT_L4_CHKSUM_SEL_L4_OVERALL_EN_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg0 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg0 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch(rw) - VLAN Match Field for parser matching.
*/
#define NFP3800_NBI_MACX_CSR_EG_VLAN_MATCH_REG0              0x000001e8
#define NFP3800_NBI_MACX_CSR_IG_VLAN_MATCH_REG0              0x000001f0
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG_VLAN_MASK(_x)    (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG_VLAN_MASK_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG_VLAN_MATCH(_x)   (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG_VLAN_MATCH_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg1 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg1 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask1(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch1(rw) - VLAN Match Field for parser matching.
*/
#define NFP3800_NBI_MACX_CSR_EG_VLAN_MATCH_REG1              0x000001ec
#define NFP3800_NBI_MACX_CSR_IG_VLAN_MATCH_REG1              0x000001f4
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG1_VLAN_MASK1(_x)  (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG1_VLAN_MASK1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG1_VLAN_MATCH1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_VLANMATCHREG1_VLAN_MATCH1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MiscStatusCtrl - Ingress Interlaken ctx limit and ig_eq_ctx multibit error lock and linklist frozen.
    Bits:  1    EgLLMemMbeLock(ro) - Read only status for Ingress linklist. When set, a multibit error on the linklist memory has occurred and reset is required.
    Bits:  0    IgLLMemMbeLock(ro) - Read only status for Egress linklist. When set, a multibit error on the linklist memory has occurred and reset is required.
*/
#define NFP3800_NBI_MACX_CSR_MISC_STATUS_CTRL                0x000001f8
#define   NFP3800_NBI_MACX_CSR_MISC_STATUS_CTRL_EG_LL_MEM_MBE_LOCK BIT(1)
#define   NFP3800_NBI_MACX_CSR_MISC_STATUS_CTRL_IG_LL_MEM_MBE_LOCK BIT(0)
/*----------------------------------------------------------------
  Register: EgCmdPrependEn0Lo - Enable bits for egress cmd prepend handling on channels 31-0. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn0Hi - Enable bits for egress cmd prepend handling on channels 63-32. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Lo - Enable bits for egress cmd prepend handling on channels 95-64. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Hi - Enable bits for egress cmd prepend handling on channels 127-96. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
    Bits: 31:0  EgCmdPrependEn(rw) - Egress Per-channel bit that enables the stripping of the 4-byte CMD PREPEND.
*/
#define NFP3800_NBI_MACX_CSR_EG_CMD_PREPEND_EN0_LO           0x00000200
#define NFP3800_NBI_MACX_CSR_EG_CMD_PREPEND_EN0_HI           0x00000204
#define NFP3800_NBI_MACX_CSR_EG_CMD_PREPEND_EN1_LO           0x00000208
#define NFP3800_NBI_MACX_CSR_EG_CMD_PREPEND_EN1_HI           0x0000020c
#define   NFP3800_NBI_MACX_CSR_EGCMDPREPENDEN_EG_CMD_PREPEND_EN(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EGCMDPREPENDEN_EG_CMD_PREPEND_EN_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PfcTxEn - Per-port enable bits for issuing Pause/Pfc frames.
    Bits: 19:0  PortPfcTxEn(rw) - Per-port enable for issuing a Pause/Pfc frame. No Pause/PFC issued without this bit set.
*/
#define NFP3800_NBI_MACX_CSR_PFC_TX_EN                       0x00000210
#define   NFP3800_NBI_MACX_CSR_PFC_TX_EN_PORT_PFC_TX_EN(_x)  (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_PFC_TX_EN_PORT_PFC_TX_EN_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgTxStopEn - Per-port enable bits for stopping Egress DQs.
    Bits: 19:0  PortEgTxStopEn(rw) - Per-port enable for Stopping all Egress dequeues on a packet boundary.
*/
#define NFP3800_NBI_MACX_CSR_EG_TX_STOP_EN                   0x00000214
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_EN_PORT_EG_TX_STOP_EN(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_EN_PORT_EG_TX_STOP_EN_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgTxStopGpioSel - GPIO enable bits for stopping Egress DQs.
    Bits: 24    EgTxStopGpioInv(rw) - Invert GPIO STOP bits for active low XOff.
    Bits: 23:20 EgTxStopGpioEn(rw) - Enable for each bit of GPIO (RX OOB) to stop dq on selected port.
    Bits: 19:15 EgTxStopGpioPortSel3(rw) - Port number to stop dqing when bit 3 of GpioEn is set. Stop dequeues on a packet boundary.
    Bits: 14:10 EgTxStopGpioPortSel2(rw) - Port number to stop dqing when bit 2 of GpioEn is set. Stop dequeues on a packet boundary.
    Bits:  9:5  EgTxStopGpioPortSel1(rw) - Port number to stop dqing when bit 1 of GpioEn is set. Stop dequeues on a packet boundary.
    Bits:  4:0  EgTxStopGpioPortSel0(rw) - Port number to stop dqing when bit 0 of GpioEn is set. Stop dequeues on a packet boundary.
*/
#define NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL             0x00000218
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_INV BIT(24)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_EN(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_EN_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_3(_x) (((_x) & 0x1f) << 15)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_3_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_2(_x) (((_x) & 0x1f) << 10)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_2_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_1(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_1_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_EG_TX_STOP_GPIO_SEL_EG_TX_STOP_GPIO_PORT_SEL_0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: IgNbiPortXoff - RO state of NBI Port XOff bits.
    Bits: 19:0  Xoff(ro) - Per-port state of NBI Ingress Port Xoff bits. If set, Port does not arbitrate to DWRR.
*/
#define NFP3800_NBI_MACX_CSR_IG_NBI_PORT_XOFF                0x00000220
#define   NFP3800_NBI_MACX_CSR_IG_NBI_PORT_XOFF_XOFF(_x)     (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IG_NBI_PORT_XOFF_XOFF_of(_x)  (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: FecStatus0 - Lock and Err status of FEC enabled ports 9,8,4-0.
  Register: FecStatus1 - Lock and Err status of FEC enabled ports 19,18,14-10.
    Bits: 20:14 FecUnCorErr(rc) - Ports 9,8,4-0 Fec UN-Correctable Error. Clear on Read.
    Bits: 13:7  FecCorErr(rc) - Ports 9,8,4-0 Fec Correctable Error. Clear on Read.
    Bits:  6:0  FecLocked(ro) - Ports 9,8,4-0 Fec Lock status.
*/
#define NFP3800_NBI_MACX_CSR_FEC_STATUS_0                    0x00000228
#define NFP3800_NBI_MACX_CSR_FEC_STATUS_1                    0x0000022c
#define   NFP3800_NBI_MACX_CSR_FECSTATUS_FEC_UN_COR_ERR(_x)  (((_x) & 0x7f) << 14)
#define   NFP3800_NBI_MACX_CSR_FECSTATUS_FEC_UN_COR_ERR_of(_x) (((_x) >> 14) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_FECSTATUS_FEC_COR_ERR(_x)     (((_x) & 0x7f) << 7)
#define   NFP3800_NBI_MACX_CSR_FECSTATUS_FEC_COR_ERR_of(_x)  (((_x) >> 7) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_FECSTATUS_FEC_LOCKED(_x)      (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_CSR_FECSTATUS_FEC_LOCKED_of(_x)   (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacEgPortRR - Mac EG Port Round Robin DQ direct-access Enable Register.
    Bits: 19:0  EgPortRR(rw) - If set, EG Ethernet Port uses a round-robin DQ versus strict priority for multi-channel ports that are not in PFC mode.
*/
#define NFP3800_NBI_MACX_CSR_MAC_EG_PORT_RR                  0x00000264
#define   NFP3800_NBI_MACX_CSR_MAC_EG_PORT_RR_EG_PORT_RR(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_EG_PORT_RR_EG_PORT_RR_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacEqInh - Mac Rx Enqueue inhibit control.
    Bits: 25    MacEqInhIlk1(ro) - Unused.
    Bits: 24    MacEqInhIlk0(ro) - Unused
    Bits: 23:20 MacEqInhEthPortRfu(ro) - Unused.
    Bits: 19:0  MacEqInhEthPort(rw) - When set, per-port inhibit of Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[19:0] bits when in effect.
*/
#define NFP3800_NBI_MACX_CSR_EQ_INH                          0x00000278
#define   NFP3800_NBI_MACX_CSR_EQ_INH_ILK1                   BIT(25)
#define   NFP3800_NBI_MACX_CSR_EQ_INH_ILK0                   BIT(24)
#define   NFP3800_NBI_MACX_CSR_EQ_INH_ETH_PORT_RFU(_x)       (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_EQ_INH_ETH_PORT_RFU_of(_x)    (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_EQ_INH_ETH_PORT(_x)           (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EQ_INH_ETH_PORT_of(_x)        (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacEqInhDone - Mac Rx Enqueue inhibit state.
    Bits: 19:0  MacEqInhDoneEthPort(ro) - When set, indicates that RX enqueue is stopped for the associated port. Clears when associated MacEqInhEthPort bit is cleared.
*/
#define NFP3800_NBI_MACX_CSR_EQ_INH_DONE                     0x0000027c
#define   NFP3800_NBI_MACX_CSR_EQ_INH_DONE_ETH_PORT(_x)      (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EQ_INH_DONE_ETH_PORT_of(_x)   (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacHy0EthIgPktHeadDropCntr[10] - Mac Hydra0 Ethernet Per-port head drop count due to overskid, exceed, or free buffer underrun.
  Register: MacHy1EthIgPktHeadDropCntr[10] - Mac Hydra1 Ethernet per-port head drop count due to overskid, exceed, or free buffer underrun.
    Bits: 31:0  MacHeadDropCounter(ro) - Per-port packet head drops due to overskid and free buffer underrun. Clear on read.
*/
#define NFP3800_NBI_MACX_CSR_MAC_HY0_ETH_IG_PKT_HEAD_DROP_CNTR(_x) (0x00000280 + (0x4 * ((_x) & 0xf)))
#define NFP3800_NBI_MACX_CSR_MAC_HY1_ETH_IG_PKT_HEAD_DROP_CNTR(_x) (0x000002a8 + (0x4 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_CSR_MACHEADDROPCOUNTER_MAC_HEAD_DROP_COUNTER(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACHEADDROPCOUNTER_MAC_HEAD_DROP_COUNTER_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthFifoIfErr0 - Mac Hydra0 Fifo Interface Errors.
  Register: MacEthFifoIfErr1 - Mac Hydra1 Fifo Interface Errors.
    Bits: 20    RemLocFaultSticky(ro) - Clear on read. A set bit indicates a change in the Hydra faults REM_FAULT or LOC_FAULT. Read the associated Hydra registers to identify faulted port.
    Bits: 19:10 EthTxIfOvr(ro) - Clear on read. A set bit indicates an overflow of the associated port transmit Fifo interface.
    Bits:  9:0  EthTxIfUnf(ro) - Clear on read. A set bit indicates an underflow of the associated port transmit Fifo interface.
*/
#define NFP3800_NBI_MACX_CSR_MAC_ETH_FIFO_IF_ERR_0           0x00000400
#define NFP3800_NBI_MACX_CSR_MAC_ETH_FIFO_IF_ERR_1           0x00000404
#define   NFP3800_NBI_MACX_CSR_MACETHFIFOIFERR_REM_LOC_FAULT_STICKY BIT(20)
#define   NFP3800_NBI_MACX_CSR_MACETHFIFOIFERR_ETH_TX_IF_OVR(_x) (((_x) & 0x3ff) << 10)
#define   NFP3800_NBI_MACX_CSR_MACETHFIFOIFERR_ETH_TX_IF_OVR_of(_x) (((_x) >> 10) & 0x3ff)
#define   NFP3800_NBI_MACX_CSR_MACETHFIFOIFERR_ETH_TX_IF_UNF(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACETHFIFOIFERR_ETH_TX_IF_UNF_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthAnStatus0 - Mac Hydra0 AutoNegotiate Status.
  Register: MacEthAnStatus1 - Mac Hydra1 AutoNegotiate Status.
    Bits: 19:10 EthAnInt(ro) - Clear on read. A set bit indicates a new page-received interrupt from the auto-neg logic of the associated port.)
    Bits:  9:0  EthAnDone(ro) - A set bit indicates auto-neg of the associated port has completed.
*/
#define NFP3800_NBI_MACX_CSR_MAC_ETH_AN_STATUS_0             0x00000408
#define NFP3800_NBI_MACX_CSR_MAC_ETH_AN_STATUS_1             0x0000040c
#define   NFP3800_NBI_MACX_CSR_MACETHANSTATUS_ETH_AN_INT(_x) (((_x) & 0x3ff) << 10)
#define   NFP3800_NBI_MACX_CSR_MACETHANSTATUS_ETH_AN_INT_of(_x) (((_x) >> 10) & 0x3ff)
#define   NFP3800_NBI_MACX_CSR_MACETHANSTATUS_ETH_AN_DONE(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACETHANSTATUS_ETH_AN_DONE_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacHiBerStatus - Mac Per_port High Bit Error rate indication.
    Bits: 19:0  HiBer(rc) - A set bit indicates a High Bit Error Rate of the associated port.
*/
#define NFP3800_NBI_MACX_CSR_MAC_HI_BER_STATUS               0x00000414
#define   NFP3800_NBI_MACX_CSR_MAC_HI_BER_STATUS_HI_BER(_x)  (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_HI_BER_STATUS_HI_BER_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacTxPauseStateChange - Mac Per_port indication of a change in TX Pause/Pfc state.
    Bits: 19:0  TxPauseStateChange(rc) - A set bit indicates a state change in the actual transmitted pause/pfc state for the associated port. Inhibited pfc levels will not trigger this.
*/
#define NFP3800_NBI_MACX_CSR_MAC_TX_PAUSE_STATE_CHANGE       0x00000418
#define   NFP3800_NBI_MACX_CSR_MAC_TX_PAUSE_STATE_CHANGE_TX_PAUSE_STATE_CHANGE(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_TX_PAUSE_STATE_CHANGE_TX_PAUSE_STATE_CHANGE_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacRxPauseStateChange - Mac Per_port indication of a change in RX Pause/Pfc state.
    Bits: 19:0  RxPauseStateChange(rc) - A set bit indicates a state change in the received pause/pfc state for the associated port regardless of any inhibits or ignores.
*/
#define NFP3800_NBI_MACX_CSR_MAC_RX_PAUSE_STATE_CHANGE       0x0000041c
#define   NFP3800_NBI_MACX_CSR_MAC_RX_PAUSE_STATE_CHANGE_RX_PAUSE_STATE_CHANGE(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_RX_PAUSE_STATE_CHANGE_RX_PAUSE_STATE_CHANGE_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacStatsHalfFullPort0011 - Mac Stats Half Full Alert Port0-11 RX/TX.
  Register: MacStatsHalfFullPort1223 - Mac Stats Half Full Alert Port12-23 RX/TX.
  Register: MacStatsHalfFullChan0063 - Mac Stats Half Full Alert Channel 00-63 RX/TX.
  Register: MacStatsHalfFullChan63127 - Mac Stats Half Full Alert Channel 63-127 RX/TX.
    Bits: 24    TxStatHalfFullVld(ro) - Clear on read. A set bit indicates a Tx stat @TX_STAT_ADDR went half full.)
    Bits: 23:16 TxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
    Bits:  8    RxStatHalfFullVld(ro) - Clear on read. A set bit indicates an Rx stat @RX_STAT_ADDR went half full.)
    Bits:  7:0  RxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_STATS_HALF_FULL_PORT_00_11  0x00000420
#define NFP3800_NBI_MACX_CSR_MAC_STATS_HALF_FULL_PORT_12_23  0x00000424
#define NFP3800_NBI_MACX_CSR_MAC_STATS_HALF_FULL_CHAN_00_63  0x00000428
#define NFP3800_NBI_MACX_CSR_MAC_STATS_HALF_FULL_CHAN_63_127 0x0000042c
#define   NFP3800_NBI_MACX_CSR_MACSTATSHALFFULL_TX_STAT_HALF_FULL_VLD BIT(24)
#define   NFP3800_NBI_MACX_CSR_MACSTATSHALFFULL_TX_STAT_ADDR(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACSTATSHALFFULL_TX_STAT_ADDR_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACSTATSHALFFULL_RX_STAT_HALF_FULL_VLD BIT(8)
#define   NFP3800_NBI_MACX_CSR_MACSTATSHALFFULL_RX_STAT_ADDR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACSTATSHALFFULL_RX_STAT_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacIgPortErrStatus[20] - Mac Ingress Port Error Status.
    Bits: 24    ErrValid(rc) - When set, indicated a captured err_status for the given port is present on bits [23:0])
    Bits: 23:8  PayloadLength(rc) - Payload length of the errored frame. This is a copy of the length/type field as it is found within the frame. For VLAN frames it is a copy of the length/type field following the 4-octet VLAN tag.)
    Bits:  7    VlanTag(rc) - Set to 1 to indicate that the current errored Frame implements a VLAN Tag.)
    Bits:  6    CtlCharErr(rc) - Set to 1 to indicate that the current frame was received with an Error control character on the XL/CGMII interface.)
    Bits:  5    StackedVlanTag(rc) - Set to 1 to indicate that the current errored Frame implements a Stacked VLAN Tag.)
    Bits:  4    SeqErr(rc) - Set to 1 to indicate that a Sequence Error (Local or Remote) was received from the PHY device during frame reception.)
    Bits:  3    FifoErr(rc) - Set to 1 to indicate that the current errored frame was truncated because of a FIFO exception (Overflow).)
    Bits:  2    BadCodeErr(rc) - .Set to 1 to indicate that the current errored frame was received with a wrong or unexpected code during frame reception reported by the reconciliation sub-layer function.)
    Bits:  1    Crc32Err(rc) - Set to 1 to indicate that the current errored frame was received with a CRC-32 error.)
    Bits:  0    LengthErr(rc) - Set to 1 when the current frame has an invalid length, i.e. less than 64 octets or more than the maximum value defined in register FRM_LENGTH, or a mismatch between the payload received and the payload length given within the frame was detected.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS(_x)      (0x00000500 + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_ERR_VALID BIT(24)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_PAYLOAD_LENGTH(_x) (((_x) & 0xffff) << 8)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_PAYLOAD_LENGTH_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_VLAN_TAG BIT(7)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_CTL_CHAR_ERR BIT(6)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_STACKED_VLAN_TAG BIT(5)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_SEQ_ERR BIT(4)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_FIFO_ERR BIT(3)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_BAD_CODE_ERR BIT(2)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_CRC32_ERR BIT(1)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_STATUS_LENGTH_ERR BIT(0)
/*----------------------------------------------------------------
  Register: MacEgTimeStampInserted[20] - Mac Egress Port Timestamp Inserted Value.
    Bits: 31:0  TimeStampValue(rc) - Timestamp Inserted value for last packet sent marked for TS insertion.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_EG_TIME_STAMP_INSERTED(_x)  (0x00000550 + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MAC_EG_TIME_STAMP_INSERTED_TIME_STAMP_VALUE(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_EG_TIME_STAMP_INSERTED_TIME_STAMP_VALUE_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacIgPortErr - Mac Ingress Port Error Captured.
    Bits: 15:0  PortErr(ro) - Per-port bits indicating Ingress port_status_err captured. Bit clears on read of the captured Port error status.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR                 0x000005a8
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_PORT_ERR(_x)  (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_PORT_ERR_PORT_ERR_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEgDropCtrlErr - Mac Egress Drop on Error control.
  Register: MacEgDropCtrlAll - Mac Egress Drop All control.
    Bits: 19:0  Drop(rw) - Egress packets will be cleanly dropped before the IP. Port stats will not see the packet.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_EG_DROP_CTRL_ERR            0x000005b4
#define NFP3800_NBI_MACX_CSR_MAC_EG_DROP_CTRL_ALL            0x000005b8
#define   NFP3800_NBI_MACX_CSR_MACEGDROPCTRL_DROP(_x)        (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACEGDROPCTRL_DROP_of(_x)     (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacSerialLedCount - Mac counter register for serial LED port state info.
    Bits: 31:26 SerialCountRFU(rw) - Reserved.
    Bits: 25:8  BaudCount(rw) - Reload count for core_clk decremented baud counter.)
    Bits:  7:0  FracCount(rw) - Fractional increment count for creating more accurate baud n/256.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT            0x000005bc
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT_SERIAL_COUNT_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT_SERIAL_COUNT_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT_BAUD_COUNT(_x) (((_x) & 0x3ffff) << 8)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT_BAUD_COUNT_of(_x) (((_x) >> 8) & 0x3ffff)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT_FRAC_COUNT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_COUNT_FRAC_COUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacSerialLedCtrl - Mac control register for serial LED port state info.
    Bits: 31    SerialEnable(rw) - Enable for Serial LED IO to emit state info.
    Bits: 30    SerialUnInvert(rw) - Serial data default inverted for 8N1. Setting this bit emits uninverted data.
    Bits: 29    SerialLsbFirst(rw) - When set, emitted data byte will be sent LSb first.
    Bits: 28    Serial8N1(rw) - Enable for 8N1 format. 10b : start(0), 8b data, stop(1). inverted. When 0, only 8b data will be transmitted, no framing, subject to uninvert and lsb_first.
    Bits: 27    SerialOe(rw) - Output Enable for Serial LED IO pin. IO pin must also be mux selected to the MAC LED function.
    Bits: 26:10 SerialCtrlRFU(rw) - Reserved.
    Bits:  9:5  LedClrBitNum(rw) - When the indexed bit in the FRC transitions from 0 to 1, deluminates any LEDs selected for activity. except if Clr and Set are equal, in which case it will be on the 1 to 0 transition for a 50/50 display.)
    Bits:  4:0  LedSetBitNum(rw) - When the indexed bit in the FRC transitions from 0 to 1, illuminates any LEDs selected for activity if activity on the port has occurred.)
*/
#define NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL             0x000005c0
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_ENABLE BIT(31)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_UN_INVERT BIT(30)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_LSB_FIRST BIT(29)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_8N1 BIT(28)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_OE BIT(27)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_CTRL_RFU(_x) (((_x) & 0x1ffff) << 10)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_SERIAL_CTRL_RFU_of(_x) (((_x) >> 10) & 0x1ffff)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_LED_CLR_BIT_NUM(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_LED_CLR_BIT_NUM_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_LED_SET_BIT_NUM(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_SERIAL_LED_CTRL_LED_SET_BIT_NUM_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacPfcGen1Shot0[3] - IP0: Per-port(4), per-PFC(8) Pause generate. When written to 1, a pause/pfc will be set to that port:level. When written to 0, the Pause will be released. 0:ports 3-0...2:ports 09-08.
  Register: MacPfcGen1Shot1[3] - IP1: Per-port(4), per-PFC(8) Pause generate. When written to 1, a pause/pfc will be set to that port:level. When written to 0, the Pause will be released. 0:ports 13-10...2:ports 19-18.
    Bits: 31:24 Pfc1Shot3(rw) - When any bit set, a PFC/Pause frame will be issued on port(3+4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
    Bits: 23:16 Pfc1Shot2(rw) - When any bit set, a PFC/Pause frame will be issued on port(2+4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
    Bits: 15:8  Pfc1Shot1(rw) - When any bit set, a PFC/Pause frame will be issued on port(1+4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
    Bits:  7:0  Pfc1Shot0(rw) - When any bit set, a PFC/Pause frame will be issued on port(4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PFC_GEN_1SHOT_0(_x)         (0x000005c4 + (0x4 * ((_x) & 0x3)))
#define NFP3800_NBI_MACX_CSR_MAC_PFC_GEN_1SHOT_1(_x)         (0x000005d0 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_3(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_2(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPFCGEN1SHOT_PFC_1SHOT_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacTxPfcInhEn0[3] - Per-port(4), per-PFC(8) Pause/PFC generate Inhibit. When set, the ingress enqueue logic will be inhibited from generating a Pause/PFC for that port:level under any condition except SW 1-shot. PFC_TX_EN must be set for a port for a port to issue any Pause PFC. This set of registers can allow mixed lossy and and lossless PFC levels on a single port. The drop_on_exceed registers must be used to limit the buffers consumed by the lossy PFC levels. 0:ports 3-0...3:ports 15-12.
  Register: MacTxPfcInhEn1[3] - Per-port(4), per-PFC(8) Pause/PFC generate Inhibit. When set, the ingress enqueue logic will be inhibited from generating a Pause/PFC for that port:level under any condition except SW 1-shot. PFC_TX_EN must be set for a port for a port to issue any Pause PFC. This set of registers can allow mixed lossy and and lossless PFC levels on a single port. The drop_on_exceed registers must be used to limit the buffers consumed by the lossy PFC levels. 0:ports 3-0...3:ports 15-12.
    Bits: 31:24 PfcInh3(rw) - When any bit set, PFC/Pause generate will be inhibited on port(3+4xd) at that PFC level.
    Bits: 23:16 PfcInh2(rw) - When any bit set, PFC/Pause generate will be inhibited on port(2+4xd) at that PFC level.
    Bits: 15:8  PfcInh1(rw) - When any bit set, PFC/Pause generate will be inhibited on port(1+4xd) at that PFC level.
    Bits:  7:0  PfcInh0(rw) - When any bit set, PFC/Pause generate will be inhibited on port(4xd) at that PFC level.
*/
#define NFP3800_NBI_MACX_CSR_MAC_TX_PFC_INH_EN_0(_x)         (0x000005dc + (0x4 * ((_x) & 0x3)))
#define NFP3800_NBI_MACX_CSR_MAC_TX_PFC_INH_EN_1(_x)         (0x000005e8 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_3(_x)   (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_2(_x)   (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_1(_x)   (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_0(_x)   (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACTXPFCINHEN_PFC_INH_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacIgChDropOnExcd[4] - Per-channel(32). When set, the ingress high-water mark becomes a drop_on_exceed level rather than a Pause/Pfc generation flag. Any packet SOP received to a channel where the HWM is exceeded and the drop_on_exceed bit is set will be head dropped and counted in the head-drop counter for that port. Any packet already in progress when the HWM is exceeded and the drop_on_exceed bit is set will be allowed to complete. 0:channels 31-0...3:channels 127-96.
    Bits: 31:0  DropOnExcd(rw) - When set, the associated Ingress Enqueue port will drop packets for a channel starting at SOP when that channel HWM is exceeded.
*/
#define NFP3800_NBI_MACX_CSR_MAC_IG_CH_DROP_ON_EXCD(_x)      (0x000005f4 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MAC_IG_CH_DROP_ON_EXCD_DROP_ON_EXCD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_IG_CH_DROP_ON_EXCD_DROP_ON_EXCD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacPfcIgnEn0[3] - Per-port(4), per-PFC(8) Pause/PFC ignore. When set, the egress dequeue logic will ignore the Pause/PFC for that port:level and transmits to that port:level will continue. 0:ports 3-0...3:ports 15-12.
  Register: MacPfcIgnEn1[3] - Per-port(4), per-PFC(8) Pause/PFC ignore. When set, the egress dequeue logic will ignore the Pause/PFC for that port:level and transmits to that port:level will continue. 0:ports 3-0...3:ports 15-12.
    Bits: 31:24 PfcIgn3(rw) - When any bit set, PFC/Pause will be ingnored on port(3+4xd) at that PFC level.
    Bits: 23:16 PfcIgn2(rw) - When any bit set, PFC/Pause will be ingnored on port(2+4xd) at that PFC level.
    Bits: 15:8  PfcIgn1(rw) - When any bit set, PFC/Pause will be ignored on port(1+4xd) at that PFC level.
    Bits:  7:0  PfcIgn0(rw) - When any bit set, PFC/Pause will be ignored on port(4xd) at that PFC level.
*/
#define NFP3800_NBI_MACX_CSR_MAC_EG_PFC_IGN_EN_0(_x)         (0x00000604 + (0x4 * ((_x) & 0x3)))
#define NFP3800_NBI_MACX_CSR_MAC_EG_PFC_IGN_EN_1(_x)         (0x00000610 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_3(_x)     (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_3_of(_x)  (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_2(_x)     (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_2_of(_x)  (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_1(_x)     (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_1_of(_x)  (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_0(_x)     (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACPFCIGNEN_PFC_IGN_0_of(_x)  (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacPfcReMap[20] - PFC support which Remaps PFC_xoff to Eg channel for channel compression support.
    Bits: 31    PortEgDqRrEn(rw) - When set, enables the associated port Egress DQ engine to use round-robin instead of strict priority between the port's channels.
    Bits: 30    PortEgDqLo2HiPri(rw) - When set, enables the associated port Egress DQ engine to use lowest channel number as High priority between the port's channels.
    Bits: 23:21 PfcReMap7(rw) - If in pfc_mode, maps PFC_xoff[7] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 20:18 PfcReMap6(rw) - If in pfc_mode, maps PFC_xoff[6] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 17:15 PfcReMap5(rw) - If in pfc_mode, maps PFC_xoff[5] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 14:12 PfcReMap4(rw) - If in pfc_mode, maps PFC_xoff[4] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 11:9  PfcReMap3(rw) - If in pfc_mode, maps PFC_xoff[3] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits:  8:6  PfcReMap2(rw) - If in pfc_mode, maps PFC_xoff[2] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits:  5:3  PfcReMap1(rw) - If in pfc_mode, maps PFC_xoff[1] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits:  2:0  PfcReMap0(rw) - If in pfc_mode, maps PFC_xoff[0] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP(_x)               (0x0000061c + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PORT_EG_DQ_RR_EN BIT(31)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PCP_EG_DQ_LO_2_HI_PRI BIT(30)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP7(_x)  (((_x) & 0x7) << 21)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP7_of(_x) (((_x) >> 21) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP6(_x)  (((_x) & 0x7) << 18)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP6_of(_x) (((_x) >> 18) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP5(_x)  (((_x) & 0x7) << 15)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP5_of(_x) (((_x) >> 15) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP4(_x)  (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP4_of(_x) (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP3(_x)  (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP3_of(_x) (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP2(_x)  (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP2_of(_x) (((_x) >> 6) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP1(_x)  (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP0(_x)  (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_PFC_REMAP_PFC_REMAP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacPcpReMap[20] - PFC support which Remaps VLan-PCP for channel compression and channel for untagged.
    Bits: 31    PortIgDqRrEn(rw) - When set, enables the associated port Ingress DQ engine to use round-robin instead of strict priority between the port's channels.
    Bits: 30    PortIgDqLo2HiPri(rw) - When set, enables the associated port Ingress DQ engine to use lowest channel number as High priority between the port's channels.
    Bits: 29:24 UntaggedChan(rw) - If PFC mode en, then an UNtagged packet will be directed to this absolute channel. For Hy0 the channels can be 0-63 and for Hy1 0-63 maps to 64-127
    Bits: 23:21 PcpReMap7(rw) - Maps tagged packet with PCP 7 to this value channel delta from the base channel.
    Bits: 20:18 PcpReMap6(rw) - Maps tagged packet with PCP 6 to this value channel delta from the base channel.
    Bits: 17:15 PcpReMap5(rw) - Maps tagged packet with PCP 5 to this value channel delta from the base channel.
    Bits: 14:12 PcpReMap4(rw) - Maps tagged packet with PCP 4 to this value channel delta from the base channel.
    Bits: 11:9  PcpReMap3(rw) - Maps tagged packet with PCP 3 to this value channel delta from the base channel.
    Bits:  8:6  PcpReMap2(rw) - Maps tagged packet with PCP 2 to this value channel delta from the base channel.
    Bits:  5:3  PcpReMap1(rw) - Maps tagged packet with PCP 1 to this value channel delta from the base channel.
    Bits:  2:0  PcpReMap0(rw) - Maps tagged packet with PCP 0 to this value channel delta from the base channel.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP(_x)               (0x00000680 + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PORT_IG_DQ_RR_EN BIT(31)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_IG_DQ_LO_2_HI_PRI BIT(30)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_MAC_UNTAGD_ABS(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_MAC_UNTAGD_ABS_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP7(_x)  (((_x) & 0x7) << 21)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP7_of(_x) (((_x) >> 21) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP6(_x)  (((_x) & 0x7) << 18)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP6_of(_x) (((_x) >> 18) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP5(_x)  (((_x) & 0x7) << 15)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP5_of(_x) (((_x) >> 15) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP4(_x)  (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP4_of(_x) (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP3(_x)  (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP3_of(_x) (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP2(_x)  (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP2_of(_x) (((_x) >> 6) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP1(_x)  (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP0(_x)  (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_PCP_REMAP_PCP_REMAP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacHy0EthEgPktFlushDropCntr[5] - Mac Hydra0 Ethernet Per-port egress flush drop count due to DropAll or DropErr being set.
  Register: MacHy1EthEgPktFlushDropCntr[5] - Mac Hydra1 Ethernet Per-port egress flush drop count due to DropAll or DropErr begin set.
    Bits: 31:16 MacFlushDropCounter1(ro) - Per-port packet flush drops due to DropAll or DropErr. Clear on read.
    Bits: 15:0  MacFlushDropCounter0(ro) - Per-port packet flush drops due to DropAll or DropErr. Clear on read.
*/
#define NFP3800_NBI_MACX_CSR_MAC_HY0_ETH_EG_PKT_FLUSH_DROP_CNTR(_x) (0x000006d0 + (0x4 * ((_x) & 0x7)))
#define NFP3800_NBI_MACX_CSR_MAC_HY1_ETH_EG_PKT_FLUSH_DROP_CNTR(_x) (0x000006e4 + (0x4 * ((_x) & 0x7)))
#define   NFP3800_NBI_MACX_CSR_MACFLUSHDROPCOUNTER_MAC_FLUSH_DROP_COUNTER_1(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_MACFLUSHDROPCOUNTER_MAC_FLUSH_DROP_COUNTER_1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_MACFLUSHDROPCOUNTER_MAC_FLUSH_DROP_COUNTER_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MACFLUSHDROPCOUNTER_MAC_FLUSH_DROP_COUNTER_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacPortHwm[10] - Port HWMs and Skid before dropping for ports 2n+1 and 2n.
    Bits: 31:27 PortDropDelta1(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 26:16 PortHwm1(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
    Bits: 15:11 PortDropDelta0(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 10:0  PortHwm0(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
*/
#define NFP3800_NBI_MACX_CSR_MAC_PORT_HWM(_x)                (0x00000700 + (0x4 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_POR_DROP_DELTA1(_x) (((_x) & 0x1f) << 27)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_POR_DROP_DELTA1_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_PORT_HWM1(_x)    (((_x) & 0x7ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_PORT_HWM1_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_POR_DROP_DELTA0(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_POR_DROP_DELTA0_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_PORT_HWM0(_x)    (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MAC_PORT_HWM_PORT_HWM0_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgSinglePortFifoEn - Per-port enable. Merges TX packets into a single port EG FIFO to preserve TM order.
    Bits: 19:0  Enable(rw) - Per-port single TX Fifo Enables.
*/
#define NFP3800_NBI_MACX_CSR_EG_SINGLE_PORT_FIFO_EN          0x00000730
#define   NFP3800_NBI_MACX_CSR_EG_SINGLE_PORT_FIFO_EN_ENABLE(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EG_SINGLE_PORT_FIFO_EN_ENABLE_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgPortOnlyIgnoreFc - Per-port enable to ignore Pause/PFC at the MAC TX DQ but still send XOff info to NBI/TM.
    Bits: 19:0  Ignore(rw) - Per-port TX Pause/PFC Ignore at the Egress DQ port only.
*/
#define NFP3800_NBI_MACX_CSR_EG_PORT_ONLY_IGNORE_FC          0x00000734
#define   NFP3800_NBI_MACX_CSR_EG_PORT_ONLY_IGNORE_FC_IGNORE(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EG_PORT_ONLY_IGNORE_FC_IGNORE_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdData - Mac read return data for Egress linklist memory.
  Register: IgLnkLstRdData - Mac read return data for Igress linklist memory.
    Bits: 29:18 LLRdOffsetAddr(ro) - Read offset Address to linklist membus
    Bits: 17    LLRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits: 15:0  LLRdData(ro) - 16 bit read data from linklist memory
*/
#define NFP3800_NBI_MACX_CSR_EG_LNKLST_RDDATA                0x000007b0
#define NFP3800_NBI_MACX_CSR_IG_LNKLST_RDDATA                0x000007b4
#define   NFP3800_NBI_MACX_CSR_LLMEMRDDATA_LL_RD_OFFSET_ADDR(_x) (((_x) & 0xfff) << 18)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDDATA_LL_RD_OFFSET_ADDR_of(_x) (((_x) >> 18) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDDATA_LL_RD_DATA_VALID  BIT(17)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDDATA_LL_RD_DATA(_x)    (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDDATA_LL_RD_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdWr - Mac Read/Write port to Egress link list memory
  Register: IgLnkLstRdWr - Mac Read/Write port to Ingress link list memory
    Bits: 31:30 Rfu(rw) - Reserved for Use.
    Bits: 29:18 LLOffsetAddr(rw) - Read/Write offset Address to linklist membus
    Bits: 17    LLRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 16    LLWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 15:0  LLWrData(rw) - 16 bit write data to LinkList. 10 bits for EG, 11 for IG.
*/
#define NFP3800_NBI_MACX_CSR_EG_LNKLST_RDWR                  0x000007b8
#define NFP3800_NBI_MACX_CSR_IG_LNKLST_RDWR                  0x000007bc
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_RFU(_x)             (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_RFU_of(_x)          (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_LL_OFFSET_ADDR(_x)  (((_x) & 0xfff) << 18)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_LL_OFFSET_ADDR_of(_x) (((_x) >> 18) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_LL_RD_BUSY          BIT(17)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_LL_WR_BUSY          BIT(16)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_LL_WR_DATA(_x)      (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_LLMEMRDWR_LL_WR_DATA_of(_x)   (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: SerDes4RdWr03To00 - Mac Write port to serdes lanes 3 to 0.
  Register: SerDes4RdWr07To04 - Mac Write port to serdes lanes 7 to 4.
  Register: SerDes4RdWr11To08 - Mac Write port to serdes lanes 11 to 8.
  Register: SerDes4RdWr15To12 - Mac Write port to serdes lanes 15 to 12.
  Register: SerDes4RdWr19To16 - Mac Write port to serdes lanes 19 to 16.
    Bits: 31    SerDesRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 30    SerDesWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 29:16 SerDesOffsetAddr(rw) - 2 byte Read/Write offset Address to serdes membus. Requires addresses from SerdesX4 map to be >>1.
    Bits: 15:0  SerDesWrData(rw) - 16 bit write data to SerDes. Dont care for a read op.
*/
#define NFP3800_NBI_MACX_CSR_SERDES4_RDWR_03_00              0x000007c0
#define NFP3800_NBI_MACX_CSR_SERDES4_RDWR_07_04              0x000007c4
#define NFP3800_NBI_MACX_CSR_SERDES4_RDWR_11_08              0x000007c8
#define NFP3800_NBI_MACX_CSR_SERDES4_RDWR_15_12              0x000007cc
#define NFP3800_NBI_MACX_CSR_SERDES4_RDWR_19_16              0x000007d0
#define   NFP3800_NBI_MACX_CSR_SERDES4RDWR_MAC_SERDES_RD_BUSY BIT(31)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDWR_MAC_SERDES_WR_BUSY BIT(30)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDWR_MAC_SERDES_OFFSET_ADDR(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDWR_MAC_SERDES_OFFSET_ADDR_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDWR_MAC_SERDES_WR_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDWR_MAC_SERDES_WR_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRW - Ingress DQ DWRR Weights RW Access port.
    Bits: 31:30 TdmMemRdWrRFU1(rw) - RFU1.
    Bits: 29:24 TdmMemRdWrAddr(rw) - Address of 15-bit IG DQ DWRR port credit value to be read or written.(0-25) Hydra0 = 0-11, Hydra1 = 12-23, LK0 = 24, LK1 = 25.
    Bits: 23:22 TdmMemRdWrRFU0(rw) - RFU0.
    Bits: 21    TdmMemRdBusy(rw) - Write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 20    TdmMemWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 19:16 TdmMemUnused(rw) - unused.
    Bits: 15    TdmPortArbEnable(rw) - Set bit to 1 to enable the port for arbitration indexed @ addr TdmMemRdAddr(0-25).
    Bits: 14:0  TdmPortWeightWrData(rw) - 15 bit DWRR credit weight value to be written @ addr TdmMemRdAddr(0-25)
*/
#define NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR                    0x000007d8
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_WR_RFU1(_x) (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_WR_RFU1_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_WR_ADDR(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_WR_ADDR_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_WR_RFU0(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_WR_RFU0_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_RD_BUSY  BIT(21)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_WR_BUSY  BIT(20)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_UNUSED(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_MEM_UNUSED_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_PORT_ARB_ENABLE BIT(15)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_PORT_WEIGHTWR_DATA(_x) (((_x) & 0x7fff) << 0)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDWR_TDM_PORT_WEIGHTWR_DATA_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDes4RdData03To00 - Mac read return data for serdes lanes 3 to 0.
  Register: SerDes4RdData07To04 - Mac read return data for serdes lanes 7 to 4.
  Register: SerDes4RdData11To08 - Mac read return data for serdes lanes 11 to 8.
  Register: SerDes4RdData15To12 - Mac read return data for serdes lanes 15 to 12.
  Register: SerDes4RdData19To16 - Mac read return data for serdes lanes 19 to 16.
    Bits: 31    SerDesRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits: 29:16 SerDesRdOffsetAddr(ro) - 2 byte read offset Address to serdes membus.
    Bits: 15:0  SerDesRdData(ro) - 16 bit read data from SerDes
*/
#define NFP3800_NBI_MACX_CSR_SERDES4_RDDATA_03_00            0x000007e0
#define NFP3800_NBI_MACX_CSR_SERDES4_RDDATA_07_04            0x000007e4
#define NFP3800_NBI_MACX_CSR_SERDES4_RDDATA_11_08            0x000007e8
#define NFP3800_NBI_MACX_CSR_SERDES4_RDDATA_15_12            0x000007ec
#define NFP3800_NBI_MACX_CSR_SERDES4_RDDATA_19_16            0x000007f0
#define   NFP3800_NBI_MACX_CSR_SERDES4RDDATA_MAC_SERDES_RD_DATA_VALID BIT(31)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDDATA_MAC_SERDES_RD_OFFSET_ADDR(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDDATA_MAC_SERDES_RD_OFFSET_ADDR_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDDATA_MAC_SERDES_RD_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDES4RDDATA_MAC_SERDES_RD_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRdData - IG DQ DWRR Weights read return data.
    Bits: 29:24 TdmMemRdAddr(ro) - Read address of last read to IG DQ TDM enry memory. Sets when read is initiated.
    Bits: 21    TdmMemRdDataValid(ro) - Sets to '1' when a read completes, cleared when the next read initiated.
    Bits: 19:16 TdmPortUnusedRdRet(ro) - 5 bit unused.
    Bits: 15    TdmPortArbEnable(ro) - If bit to 1, port enabled for arbitration indexed by @ addr TdmMemRdAddr.
    Bits: 14:0  TdmPortWeightRdData(ro) - 15 bit DWRR port credit init value @ addr TdmMemRdAddr
*/
#define NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA                  0x000007f8
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_MEM_RD_ADDR(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_MEM_RD_ADDR_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_MEM_RD_DATA_VALID BIT(21)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_PORT_UNUSED_RD_RET(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_PORT_UNUSED_RD_RET_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_PORT_ARB_ENABLE BIT(15)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_PORT_WEIGHTRD_DATA(_x) (((_x) & 0x7fff) << 0)
#define   NFP3800_NBI_MACX_CSR_TDM_MEM_RDDATA_TDM_PORT_WEIGHTRD_DATA_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDesCkMuxSelCdr - SerDes local TX clock mux select.
    Bits: 23    SerDesCkMuxSelCdrL23(rw) - N/A.
    Bits: 22    SerDesCkMuxSelCdrL22(rw) - N/A.
    Bits: 21    SerDesCkMuxSelCdrL21(rw) - N/A.
    Bits: 20    SerDesCkMuxSelCdrL20(rw) - N/A.
    Bits: 19    SerDesCkMuxSelCdrL19(rw) - N/A.
    Bits: 18    SerDesCkMuxSelCdrL18(rw) - N/A.
    Bits: 17    SerDesCkMuxSelCdrL17(rw) - N/A.
    Bits: 16    SerDesCkMuxSelCdrL16(rw) - N/A.
    Bits: 15    SerDesCkMuxSelCdrL15(rw) - N/A.
    Bits: 14    SerDesCkMuxSelCdrL14(rw) - N/A.
    Bits: 13    SerDesCkMuxSelCdrL13(rw) - N/A.
    Bits: 12    SerDesCkMuxSelCdrL12(rw) - N/A.
    Bits: 11    SerDesCkMuxSelCdrL11(rw) - N/A.
    Bits: 10    SerDesCkMuxSelCdrL10(rw) - N/A.
    Bits:  9    SerDesCkMuxSelCdrL09(rw) - N/A.
    Bits:  8    SerDesCkMuxSelCdrL08(rw) - N/A.
    Bits:  7    SerDesCkMuxSelCdrL07(rw) - N/A.
    Bits:  6    SerDesCkMuxSelCdrL06(rw) - N/A.
    Bits:  5    SerDesCkMuxSelCdrL05(rw) - N/A.
    Bits:  4    SerDesCkMuxSelCdrL04(rw) - N/A.
    Bits:  3    SerDesCkMuxSelCdrL03(rw) - N/A.
    Bits:  2    SerDesCkMuxSelCdrL02(rw) - N/A.
    Bits:  1    SerDesCkMuxSelCdrL01(rw) - N/A.
    Bits:  0    SerDesCkMuxSelCdrL00(rw) - N/A.
*/
#define NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR           0x000007fc
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_23 BIT(23)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_22 BIT(22)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_21 BIT(21)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CD_20 BIT(20)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_19 BIT(19)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_18 BIT(18)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_17 BIT(17)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_16 BIT(16)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_15 BIT(15)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_14 BIT(14)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_13 BIT(13)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_12 BIT(12)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_11 BIT(11)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_10 BIT(10)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_09 BIT(9)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_08 BIT(8)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_07 BIT(7)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_06 BIT(6)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_05 BIT(5)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_04 BIT(4)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_03 BIT(3)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_02 BIT(2)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_01 BIT(1)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_CDR_SERDES_CK_MUX_SEL_CDR_00 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPdRx - SerDes per-lane RX Power Down - active low.
  Register: SerDesPdTx - SerDes per-lane TX Power Down - active low.
    Bits: 23:0  SerDesLanePowerDown(rw) - Active Low. Per-Lane PowerDown of RX or TX logic.
*/
#define NFP3800_NBI_MACX_CSR_SERDES_PD_RX                    0x00000800
#define NFP3800_NBI_MACX_CSR_SERDES_PD_TX                    0x00000804
#define   NFP3800_NBI_MACX_CSR_SERDESPDLN_SERDES_LANE_POWER_DOWN(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDESPDLN_SERDES_LANE_POWER_DOWN_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesPdSy - SerDes per-macro Synth Power Down - active low.
    Bits:  9:5  SerDesMainResetB(rw) - Active Low. Per Macro. Main reset. Starts the reset sequence.
    Bits:  4:0  SerDesSynthPowerDown(rw) - Active Low. Per-macro PowerDown of the HS and LS and Usr PLLs.
*/
#define NFP3800_NBI_MACX_CSR_SERDES_PD_SY                    0x00000808
#define   NFP3800_NBI_MACX_CSR_SERDES_PD_SY_SERDES_MAIN_RESET_B(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_SERDES_PD_SY_SERDES_MAIN_RESET_B_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_SERDES_PD_SY_SERDES_SYNTH_POWER_DOWN(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDES_PD_SY_SERDES_SYNTH_POWER_DOWN_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCkMuxSel - SerDes clock mux select.
    Bits: 31:26 SerDesCkMuxSel_RFU(rw) - reserved.
    Bits: 25    SerDesCkMuxSelGang1918(rw) - N/A.
    Bits: 24    SerDesCkMuxSelGang1716(rw) - N/A.
    Bits: 23    SerDesCkMuxSelL19(rw) - N/A.
    Bits: 22    SerDesCkMuxSelL18(rw) - N/A.
    Bits: 21    SerDesCkMuxSelL17(rw) - N/A.
    Bits: 20    SerDesCkMuxSelL16(rw) - N/A.
    Bits: 19    SerDesCkMuxSelGang1512(rw) - N/A.
    Bits: 18    SerDesCkMuxSelL15(rw) - N/A.
    Bits: 17    SerDesCkMuxSelL14(rw) - N/A.
    Bits: 16    SerDesCkMuxSelL13(rw) - N/A
    Bits: 15    SerDesCkMuxSelL12(rw) - N/A.
    Bits: 14    SerDesCkMuxSelGang1108(rw) - N/A.
    Bits: 13    SerDesCkMuxSelL11(rw) - Mux selector for lane11 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 12    SerDesCkMuxSelL10(rw) - Mux selector for lane10 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 11    SerDesCkMuxSelL09(rw) - Mux selector for lane9 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 10    SerDesCkMuxSelL08(rw) - Mux selector for lane8 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  9    SerDesCkMuxSelGang0704(rw) - N/A.
    Bits:  8    SerDesCkMuxSelL07(rw) - N/A.
    Bits:  7    SerDesCkMuxSelL06(rw) - N/A.
    Bits:  6    SerDesCkMuxSelL05(rw) - N/A.
    Bits:  5    SerDesCkMuxSelL04(rw) - N/A.
    Bits:  4    SerDesCkMuxSelGang0300(rw) - N/A.
    Bits:  3    SerDesCkMuxSelL03(rw) - Mux selector for lane3 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  2    SerDesCkMuxSelL02(rw) - Mux selector for lane2 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  1    SerDesCkMuxSelL01(rw) - Mux selector for lane1 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  0    SerDesCkMuxSelL00(rw) - Mux selector for lane0 clocking. Asserted selects gang clock. Zero selects self-clock.
*/
#define NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL               0x0000080c
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_GANG_1918 BIT(25)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_GANG_1716 BIT(24)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_19 BIT(23)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_18 BIT(22)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_17 BIT(21)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_16 BIT(20)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_GANG_1512 BIT(19)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_15 BIT(18)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_14 BIT(17)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_13 BIT(16)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_12 BIT(15)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_GANG_1108 BIT(14)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_11 BIT(13)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_10 BIT(12)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_09 BIT(11)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_08 BIT(10)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_GANG_0704 BIT(9)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_07 BIT(8)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_06 BIT(7)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_05 BIT(6)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_04 BIT(5)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_GANG_0300 BIT(4)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_03 BIT(3)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_02 BIT(2)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_01 BIT(1)
#define   NFP3800_NBI_MACX_CSR_SERDES_CK_MUX_SEL_SERDES_CK_MUX_SEL_00 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesSigDetect - SerDes per-lane Signal Detect.
    Bits: 19:0  SerDesLaneSigDetect(ro) - Active Hi when Serdes detects a signal(per lane).
*/
#define NFP3800_NBI_MACX_CSR_SERDES_SIG_DETECT               0x00000810
#define   NFP3800_NBI_MACX_CSR_SERDES_SIG_DETECT_SERDES_LANE_SIGNAL_DETECT(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDES_SIG_DETECT_SERDES_LANE_SIGNAL_DETECT_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: SerDesSigDetectOvr - SerDes per-lane Signal Detect Override.
    Bits: 19:0  SerDesLaneSigDetectOvr(rw) - Override for SigDETECT from the serdes. Deasserts the PHY_LOS to the Ethernet MAC.
*/
#define NFP3800_NBI_MACX_CSR_SERDES_SIG_DETECT_OVR           0x00000814
#define   NFP3800_NBI_MACX_CSR_SERDES_SIG_DETECT_OVR_SERDES_LANE_SIGNAL_DETECT_OVR(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDES_SIG_DETECT_OVR_SERDES_LANE_SIGNAL_DETECT_OVR_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: SerDesEthRxActDetect - SerDes per-port Rx activity detect.
  Register: SerDesEthTxActDetect - SerDes per-port Tx activity detect.
    Bits: 19:0  SerDesPortActDetect(ro) - Active Hi when Activity on a port. Clear on Read
*/
#define NFP3800_NBI_MACX_CSR_SERDES_ETH_RX_ACT_DETECT        0x00000818
#define NFP3800_NBI_MACX_CSR_SERDES_ETH_TX_ACT_DETECT        0x0000081c
#define   NFP3800_NBI_MACX_CSR_SERDESACTDETECT_SERDES_PORT_ACTIVITY_DETECT(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDESACTDETECT_SERDES_PORT_ACTIVITY_DETECT_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: SerDesLinkUp - SerDes Link Up. A '1' indicates the Lane is Block-Locked or comma-sync'd, depending on mode. For a multi-lane port, all associated lanes must be block-locked AND aligned. These bits are just an indication of block_lock.
    Bits: 19:0  SerDesLinkUp(ro) - Active Hi Block Lock when Serdes link up state occurs(per lane) as indicated by the EthMAC.
*/
#define NFP3800_NBI_MACX_CSR_SERDES_LINK_UP                  0x00000820
#define   NFP3800_NBI_MACX_CSR_SERDES_LINK_UP_SERDES_LINK_UP(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SERDES_LINK_UP_SERDES_LINK_UP_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: ParityErrInject - Setting a bit in this register will force a 1-shot error to be written into the parity field of the corresponding memory on the next write. To re-set the 1-shot, write the register to 0.
    Bits:  5    InjectIgParErrDescMem(rw) - Write a 1 to inject an error to IG descriptor memory.
    Bits:  4    InjectIgParErrTsmpMem(rw) - Write a 1 to inject an error to IG timestamp memory.
    Bits:  3    InjectIgParErrRsltMem(rw) - Write a 1 to inject an error to IG parse result memory.
    Bits:  2    InjectEgParErrDescMem(rw) - Write a 1 to inject an error to EG descriptor memory.
    Bits:  1    InjectEgParErrRslt1Mem(rw) - Write a 1 to inject an error to EG parse result1 memory.
    Bits:  0    InjectEgParErrRslt0Mem(rw) - Write a 1 to inject an error to EG parse result0 memory.
*/
#define NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT               0x00000824
#define   NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT_INJECT_IG_PAR_ERR_DESC_MEM BIT(5)
#define   NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT_INJECT_IG_PAR_ERR_TSMP_MEM BIT(4)
#define   NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT_INJECT_IG_PAR_ERR_RSLT_MEM BIT(3)
#define   NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT_INJECT_EG_PAR_ERR_DESC_MEM BIT(2)
#define   NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT_INJECT_EG_PAR_ERR_RSLT1_MEM BIT(1)
#define   NFP3800_NBI_MACX_CSR_PARITY_ERR_INJECT_INJECT_EG_PAR_ERR_RSLT0_MEM BIT(0)
/*----------------------------------------------------------------
  Register: BlockLock - IP Core1 BlockLock. 20 bits of status encoded as per register detail.
    Bits: 19:0  BlockLock(ro) - Active Hi Block Lock when EMac lanes as indicated by the EthMACs in core1. Block synchronization indication for each (virtual) lane. When asserted (1) the block sync SM could successfully lock onto 66-bit block boundaries. The signals stay asserted as long as block lock is maintained. All 20 bits are relevant when the 100G PCS operates in normal mode indicating lock per Virtual Lane. They are not relevant in RS-FEC mode. When the 100G PCS is not used the following bits per serdes lane are valid: When the Serdes If 0 operates in 25/10G mode then Bit 0 is used. When the Serdes If 1 operates in 25/10G mode then Bit 5 is used. When the Serdes If 2 operates in 25/10G mode then Bit 10 is used. When the Serdes If 3 operates in 25/10G mode then Bit 15 is used. When the Serdes If 1 and 0 operates in 2-Lane 50G with no RS-FEC mode then Bits 6, 5, 1, 0 are used. When the Serdes If 3 and 2 operates in 2-Lane 50G with no RS-FEC mode then Bits 16, 15, 11, 10 are used. When the Serdes If 3, 2, 1 and 0 operates in 4-Lane 40G with no RS-FEC mode then Bits 6, 5, 1, 0 are used.
*/
#define NFP3800_NBI_MACX_CSR_BLOCK_LOCK                      0x0000082c
#define   NFP3800_NBI_MACX_CSR_BLOCK_LOCK_BLOCK_LOCK(_x)     (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_BLOCK_LOCK_BLOCK_LOCK_of(_x)  (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: IgParityErrStatus - Ingress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 14:12 IgParErrType(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt_mem. 010=timestamp_mem, 100=desc_mem.
    Bits: 10:0  IgParErrAddr(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP3800_NBI_MACX_CSR_IG_PARITY_ERR_STATUS            0x00000840
#define   NFP3800_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_IG_PAR_ERR_TYPE(_x) (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_IG_PAR_ERR_TYPE_of(_x) (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_IG_PAR_ERR_ADDR(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_CSR_IG_PARITY_ERR_STATUS_IG_PAR_ERR_ADDR_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgParityErrStatus - Egress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 30:28 EgParErrType1(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits: 25:16 EgParErrAddr1(ro) - Address of parity error in memory indicated by a non-zero type field.
    Bits: 14:12 EgParErrType0(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits:  9:0  EgParErrAddr0(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS            0x00000844
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_TYPE1(_x) (((_x) & 0x7) << 28)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_TYPE1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_ADDR1(_x) (((_x) & 0x3ff) << 16)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_ADDR1_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_TYPE0(_x) (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_TYPE0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_ADDR0(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_EG_PARITY_ERR_STATUS_EG_PAR_ERR_ADDR0_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MemErrDropCounts - Packet drop counts due to Mem read errors. Clear on read. Each counter saturates at 255.
    Bits: 31:24 IgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 23:16 IgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 15:8  EgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits:  7:0  EgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
*/
#define NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS             0x00000848
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_MEM_ERR_DROP_1(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_MEM_ERR_DROP_1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_MEM_ERR_DROP_0(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_IG_MEM_ERR_DROP_0_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_MEM_ERR_DROP_1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_MEM_ERR_DROP_1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_MEM_ERR_DROP_0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MEM_ERR_DROP_COUNTS_EG_MEM_ERR_DROP_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: AssertConfig0 - Assert config reg 0.
    Bits: 31:0  AssertConfigCsr0(rw) - Assertion Config Register0: disable assertion 31:0.
*/
#define NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR0              0x0000084c
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR0_ASSERT_CONFIG_CSR0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR0_ASSERT_CONFIG_CSR0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: AssertConfig1 - Assert config reg 1.
    Bits: 31:18 AssertConfigCsr1Disable(rw) - Assertion Config Register1: disable assertion 45:32.
    Bits: 17    AssertConfigCsr1EnaFsm1(rw) - Assertion Config Register1: enable FSM1.
    Bits: 16    AssertConfigCsr1EnaFsm0(rw) - Assertion Config Register1: enable FSM0.
    Bits: 15:8  AssertConfigCsr1FsmCfg1(rw) - Assertion Config Register1: FSM config1.
    Bits:  7:0  AssertConfigCsr1FsmCfg0(rw) - Assertion Config Register1: FSM config0.
*/
#define NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1              0x00000850
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_DISABLE(_x) (((_x) & 0x3fff) << 18)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_DISABLE_of(_x) (((_x) >> 18) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_ENA_FSM1 BIT(17)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_ENA_FSM0 BIT(16)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_FSM_CFG1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_FSM_CFG1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_FSM_CFG0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_ASSERT_CONFIG_CSR1_ASSERT_CONFIG_CSR1_FSM_CFG0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxInfo - Interlaken Mac TX Core Info
  Register: LkRxInfo - Interlaken Mac RX Core Info
    Bits: 31:24 LkMaxChan(ro) - The value of SLE_MAX_CHAN that is set in the rtl defines. This sets the number of per channel statistics counters that are kept.
    Bits: 23:14 LkMaxCal(ro) - The value of SLE_MAX_CAL that is set in the rtl defines.
    Bits: 13:8  LkMaxSerDes(ro) - The value of SLE_MAX_SERDES that is set in the rtl defines. This sets the maximum depth of programmable calculator that will be supported.
    Bits:  7:4  LkMajorRev(ro) - Indicates the major version of the SLE Interlaken RTL.
    Bits:  3:0  LkMinorRev(ro) - Indicates the minor version of the SLE Interlaken RTL.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_INFO                  0x00000000
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_INFO                  0x00000200
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CHANNEL(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CHANNEL_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CALENDAR(_x) (((_x) & 0x3ff) << 14)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAX_CALENDAR_of(_x) (((_x) >> 14) & 0x3ff)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAX_SERDES(_x)  (((_x) & 0x3f) << 8)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAX_SERDES_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAJOR_REV(_x)   (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MAJOR_REV_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MINOR_REV(_x)   (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_LKINFO_INTLKN_MINOR_REV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxInfo2 - Interlaken Mac TX Core Info2
    Bits:  7:0  LkTxFifoDepth(ro) - The value of SLE_TX_FIFO_DEPTH that is set in the rtl defines.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_INFO2                    0x00000004
#define   NFP3800_NBI_MACX_ILK_INTLKN_INFO2_INTLKN_TX_FIFO_DEPTH(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_INFO2_INTLKN_TX_FIFO_DEPTH_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxLaneDisable - Interlaken Mac TX Core Lane Disable
  Register: LkRxLaneDisable - Interlaken Mac RX Core Lane Disable
    Bits: 23:0  LkLaneDisable(rw) - When set to 1, the logic driving the corresponding serdes lane is disabled. When set to 0, the logic for the corresponding serdes lane is enabled, if it exists.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_LANE_DISABLE          0x00000008
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_LANE_DISABLE          0x00000208
#define   NFP3800_NBI_MACX_ILK_LKLANEDISABLE_INTLKN_LANE_DISABLE(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKLANEDISABLE_INTLKN_LANE_DISABLE_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxConfig - Interlaken Mac TX Core Config
  Register: LkRxConfig - Interlaken Mac RX Core Config
    Bits: 19    LkUser1(rw) - Unused, must be zero.
    Bits: 18    LkLookAside2Chan(rw) - Select number of channels for lookaside mode. A value of 1 selects 2 channels, a value of 0 selects 4 channels.
    Bits: 17    LkLookAsideMode(rw) - Select lookaside mode when set to 1, else standard mode.
    Bits: 16    LkUser0(rw) - Unused, must be zero.
    Bits: 15    LkFcRxToTxLb(rw) - Enable rx-to-tx loopback on the out-of-band flow control path (internal flow control loopback).
    Bits: 14    LkDataRxToTxLb(rw) - Enable rx-to-tx loopback data path (external data loopback).
    Bits: 13    LkFcTxToRxLb(rw) - Enable tx-to-rx loopback on the out-of-band flow control path (external flow control loopback).
    Bits: 12    LkDataTxToRxLb(rw) - Enable tx-to-rx loopback data path (internal data loopback).
    Bits:  9:8  LkMemWait(rw) - The number of wait states to assume when accessing the memory for the statistics counters. 0= Read data on the cycle following read enable/address 1= Read data two cycles after read eanble/address.
    Bits:  7    LkOutBandEn(rw) - When set to 1, out-of-band flow control is enabled.INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  6    LkInBandEn(rw) - When set to 1, the inband flow control is enabled. INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  5    LkMultExt(rw) - When set to 1, the multiple-use field is used for external use (given by the i_tx_multiple_use[7:0] input). The state of o_rx_chanext_use would be at an unknown state.
    Bits:  4    LkMultCh(rw) - When set to 1, the multiple-use field is used for channel number extention given by the i_tx_chanext input. The state of o_rx_multi_use would be at an unknown state.
    Bits:  3    LkMultFc(rw) - When set to 1, the multiple-use field is for flow control extention. If more than one of the MULT_EXT, MULT_CH, and MULT_FC, are enabled the multipe_use field and o_rx_chanext are undefined.
    Bits:  1    LkScramDis(rw) - When 1, the scrambler of the 64/67 code is disabled. See the Miscellaneous Notes section of the User's Guide.
    Bits:  0    LkSkipDis(rw) - In the TX, when set to 1, the generation of skip words in the metaframe is disabled. In the RX, this bit has no function.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_CONFIG                0x00000010
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_CONFIG                0x00000210
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_USER1         BIT(19)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_LA_2CHAN      BIT(18)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_LA_MODE       BIT(17)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_USER0         BIT(16)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_OOB_FC_RX2TX_LB BIT(15)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_DATA_RX2TX_LB BIT(14)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_OOB_FC_TX2RX_LB BIT(13)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_DATA_TX2RX_LB BIT(12)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_MEM_WAIT(_x)  (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_MEM_WAIT_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_OOB_EN        BIT(7)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_INBANDEN      BIT(6)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_MULTIUSE_EXT  BIT(5)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_MULTIUSE_CHAN_EXT BIT(4)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_MULTIUSE_FC_EXT BIT(3)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_SCRAM_DISABLE BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKCONFIG_INTLKN_SKIP_DISABLE  BIT(0)
/*----------------------------------------------------------------
  Register: LkTxControl - Interlaken Mac TX Core Control
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL               0x00000018
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_STATUS_MSG_ENABLE BIT(10)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_DATA_ALL_ZERO BIT(7)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_FC_OOB_ALL_ZERO BIT(6)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_DISPARITY_DISABLE BIT(4)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_CRC24_DISABLE BIT(3)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_CRC32_DISABLE BIT(2)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_CONTROL_INTLKN_UNALIGN_XOFF_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: LkTxFifoConfig - Interlaken Mac TX Core Fifo Config
    Bits: 17    LkTxFifoSingle(rw) - Interlaken TX FIFO Single Parity error inject
    Bits: 16    LkTxFifoInvPar(rw) - Interlaken TX FIFO Parity test function
    Bits: 11:8  LkTxFifoHwm(rw) - Interlaken TX FIFO HWM
    Bits:  3:0  LkTxFifoLwm(rw) - Interlaken TX FIFO LWM
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG            0x00000020
#define   NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_SINGLE BIT(17)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_INVPAR BIT(16)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_HWM(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_HWM_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_LWM(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TXFIFO_CONFIG_INTLKN_TXFIFO_LWM_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkSerDesTxFifoConfig - Interlaken Mac TX Core SerDes Fifo Config
    Bits: 11:8  LkSerDesTxFifoHwm(rw) - Interlaken SerDes TXFIFO HWM
    Bits:  3:0  LkSerDesTxFifoLwm(rw) - Interlaken SerDes TXFIFO LWM
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG     0x00000028
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_HWM(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_HWM_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_LWM(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_TXFIFO_CONFIG_INTLKN_SERDES_TXFIFO_LWM_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxBurstConfig - Interlaken Mac TX Core Burst Config
  Register: LkRxBurstConfig - Interlaken Mac RX Core Burst Config
    Bits: 26:24 LkBurstMax(rw) - Interlaken BurstMax
    Bits: 18:16 LkBurstMin(rw) - Interlaken BurstMin
    Bits: 10:8  LkBurstShort(rw) - Interlaken BurstShort
    Bits:  2    LkBurstMaxChkDisable(rw) - Interlaken Burstmax Check Disable
    Bits:  1    LkBurstMinChkDisable(rw) - Interlaken Burstmin Check Disable
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_BURST_CONFIG          0x00000030
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_BURST_CONFIG          0x00000230
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMAX(_x) (((_x) & 0x7) << 24)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMAX_of(_x) (((_x) >> 24) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMIN(_x) (((_x) & 0x7) << 16)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMIN_of(_x) (((_x) >> 16) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTSHORT(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTSHORT_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMAX_CHECK_DISABLE BIT(2)
#define   NFP3800_NBI_MACX_ILK_LKBURSTCONFIG_INTLKN_BURSTMIN_CHECK_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: LkTxMetaFrameSyncPeriod - Interlaken Mac TX MetaFrame Sync Period
  Register: LkRxMetaFrameSyncPeriod - Interlaken Mac RX MetaFrame Sync Period
    Bits: 15:0  LkMetaFrameSyncPeriod(rw) - Interlaken MetFrame Sync Period
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_METAFRAME_SYNC_PERIOD 0x00000034
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_METAFRAME_SYNC_PERIOD 0x00000234
#define   NFP3800_NBI_MACX_ILK_LKMETAFRAMESYNCPERIOD_INTLKN_METAFRAME_SYNC_PERIOD(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKMETAFRAMESYNCPERIOD_INTLKN_METAFRAME_SYNC_PERIOD_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxRateLimit0 - Interlaken TX Rate Limit0
    Bits: 31:16 LkMaxCredits(rw) - Interlaken Rate Limit Max Credits
    Bits: 10:8  LkGranularity(rw) - Interlaken Decrement Granularity
    Bits:  0    LkRateLimitEnable(rw) - Interlaken Rate Limit Enable
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0           0x00000038
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_MAX_CREDITS(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_MAX_CREDITS_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_GRANULARITY(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_GRANULARITY_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT0_INTLKN_RATE_LIMIT_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: LkTxRateLimit1 - Interlaken TX Rate Limit1
    Bits: 31:16 LkCreditInterval(rw) - Interlaken Rate Limit Credit Interval
    Bits: 15:0  LkCreditDelta(rw) - Interlaken Rate Limit Credit Delta
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1           0x0000003c
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_INTERVAL(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_INTERVAL_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_DELTA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_RATE_LIMIT1_INTLKN_CREDIT_DELTA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxErrInject0 - Interlaken TX Error Inject0
  Register: LkTxErrInject1 - Interlaken TX Error Inject1
  Register: LkTxErrInject2 - Interlaken TX Error Inject2
  Register: LkTxErrInject3 - Interlaken TX Error Inject3
    Bits: 30:24 LkErrLocation(rw) - Interlaken Bit Err Insertion Location 0-66
    Bits: 20:16 LkErrLane(rw) - Interlaken Lane to inject error
    Bits: 10:8  LkErrType(rw) - Interlaken Word type to inject error
    Bits:  1    LkErrSingle(rw) - Interlaken Error Inject Single
    Bits:  0    LkErrEnable(rw) - Interlaken Error Inject Enable
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_ERR_INJECT0              0x00000050
#define NFP3800_NBI_MACX_ILK_INTLKN_ERR_INJECT1              0x00000054
#define NFP3800_NBI_MACX_ILK_INTLKN_ERR_INJECT2              0x00000058
#define NFP3800_NBI_MACX_ILK_INTLKN_ERR_INJECT3              0x0000005c
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LOCATION(_x) (((_x) & 0x7f) << 24)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LOCATION_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LANE(_x) (((_x) & 0x1f) << 16)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_LANE_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_TYPE(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_TYPE_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_SINGLE BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKTXERRINJECT_INTLKN_ERR_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: LkTxStatsAcc - Interlaken TX Statistics Counter Access
  Register: LkRxStatsAcc - Interlaken RX Statistics Counter Access
    Bits: 19:16 LkStatsAccType(rw) - Most of the counter type names match exactly with the recommended statistics from the Interlaken Protocol Definition. For TX counter types: 0x0 = TX_Packets, TX_Bytes, and TX_Bad_Packets, ADDR field indicates which channel number; 0x1 = RX_FC_Error. The number of out of band Flow Control Errors, either framing or CRC4 errors. All others: unused. For Rx counter types:
    Bits:  7:0  LkStatsAccAddr(rw) - When LkStatsAccType field = 0000 then LkStatsAccAddr[7:0] represent channel number. All other combinations of LkStatsAccType does not represent anything and therefore should be set to zeros.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_ACC             0x00000074
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_ACC             0x00000274
#define   NFP3800_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_TYPE(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_TYPE_of(_x) (((_x) >> 16) & 0xf)
#define     NFP3800_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_TYPE_UNUSED (11)
#define   NFP3800_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_ADDR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSACC_LK_STATS_ACC_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsFill - Interlaken TX Statistics Counter Fill
  Register: LkRxStatsFill - Interlaken RX Statistics Counter Fill
    Bits: 31    LkStatsFillBOver(ro) - The Byte counter overflowed and started again from zero.
    Bits: 30    LkStatsFillPOver(ro) - The Packet counter overflowed and started again from zero.
    Bits: 29    LkStatsFillEOver(ro) - The Error counter overflowed and started again from zero.
    Bits: 28    LkStatsFillBHalf(ro) - The Byte counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 27    LkStatsFillPHalf(ro) - The Packet counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 26    LkStatsFillEHalf(ro) - The Err counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 19:16 LkStatsFillType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use this register, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsFillAddr(ro) - The address of a statistics counter that is half full or has overflowed. When in Single Channel Stats mode the return value if the LkStatsFillAddr field will always be zero. NOTE: LkStatsFillAddr is undefined when bits 31-26 are all zeros
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_FILL            0x00000078
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_FILL            0x00000278
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_BOVER BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_POVER BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_EOVER BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_BHALF BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_PHALF BIT(27)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_EHALF BIT(26)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_TYPE(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_TYPE_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_ADDR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSFILL_LK_STATS_FILL_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsParity - Interlaken TX Statistics Counter Parity
  Register: LkRxStatsParity - Interlaken RX Statistics Counter Parity
    Bits: 31    LkStatsParUncorr(ro) - Specifies whether any of the counters had a parity (or uncorrectable ECC) error.
    Bits: 30    LkStatsParCorr(ro) - Specifies whether any of the counters had a correctable ECC error.
    Bits: 19:16 LkStatsParType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use the parity protected memory, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsParAddr(ro) - The address of a statistics counter that had the error. When in Single Channel Stats mode the return value of the ADDR field will always be zero. NOTE: ADDR is undefined when bits 31-30 are all zeros
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_PARITY          0x0000007c
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_PARITY          0x0000027c
#define   NFP3800_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_UNCORR BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_CORR BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_TYPE(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_TYPE_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_ADDR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSPARITY_LK_STATS_PAR_ADDR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteHi - Interlaken TX Statistics Write Byte Counter High
  Register: LkRxStatsWrByteHi - Interlaken RX Statistics Write Byte Counter High
    Bits: 23:0  LkStatsWrByteHiWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_BYTE_HIGH 0x00000080
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_BYTE_HIGH 0x00000280
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRBYTEHI_LK_STATS_WR_BYTE_HI_WDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRBYTEHI_LK_STATS_WR_BYTE_HI_WDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteLo - Interlaken TX Statistics Write Byte Counter Low
  Register: LkRxStatsWrByteLo - Interlaken RX Statistics Write Byte Counter Low
    Bits: 31:0  LkStatsWrByteLoWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_BYTE_LOW  0x00000084
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_BYTE_LOW  0x00000284
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRBYTELO_LK_STATS_WR_BYTE_LO_WDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRBYTELO_LK_STATS_WR_BYTE_LO_WDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktHi - Interlaken TX Statistics Write Packet Counter High
  Register: LkRxStatsWrPktHi - Interlaken RX Statistics Write Packet Counter High
    Bits: 15:0  LkStatsWrPktHiWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_PKT_HIGH  0x00000088
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_PKT_HIGH  0x00000288
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRPKTHI_LK_STATS_WR_PKT_HI_WDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRPKTHI_LK_STATS_WR_PKT_HI_WDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktLo - Interlaken TX Statistics Write Packet Counter Low
  Register: LkRxStatsWrPktLo - Interlaken RX Statistics Write Packet Counter Low
    Bits: 31:0  LkStatsWrPktLoWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_PKT_LOW   0x0000008c
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_PKT_LOW   0x0000028c
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRPKTLO_LK_STATS_WR_PKT_LO_WDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRPKTLO_LK_STATS_WR_PKT_LO_WDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrHi - Interlaken TX Statistics Write Error Counter High
  Register: LkRxStatsWrErrHi - Interlaken RX Statistics Write Error Counter High
    Bits: 15:0  LkStatsWrErrHiWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_ERR_HIGH  0x00000090
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_ERR_HIGH  0x00000290
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRERRHI_LK_STATS_WR_ERR_HI_WDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRERRHI_LK_STATS_WR_ERR_HI_WDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrLo - Interlaken TX Statistics Write Error Counter Low
  Register: LkRxStatsWrErrLo - Interlaken RX Statistics Write Error Counter Low
    Bits: 31:0  LkStatsWrErrLoWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_ERR_LOW   0x00000094
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_ERR_LOW   0x00000294
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRERRLO_LK_STATS_WR_ERR_LO_WDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRERRLO_LK_STATS_WR_ERR_LO_WDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrParity - Interlaken TX Statistics Write Parity
  Register: LkRxStatsWrParity - Interlaken RX Statistics Write Parity
    Bits: 23:0  LkStatsWrParWData(rw) - The parity bits for the write data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_WRITE_PARITY    0x00000098
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_WRITE_PARITY    0x00000298
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRPARITY_LK_STATS_WR_PAR_WDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSWRPARITY_LK_STATS_WR_PAR_WDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteHi - Interlaken TX Statistics Read Byte Counter High
  Register: LkRxStatsRdByteHi - Interlaken RX Statistics Read Byte Counter High
    Bits: 31    LkStatsRdByteHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdByteHiHalf(ro) - The counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 29    LkStatsRdByteHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdByteHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 23:0  LkStatsRdByteHiRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_BYTE_HIGH  0x000000a0
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_BYTE_HIGH  0x000002a0
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_OVER BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_HALF BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_UNCORR BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_CORR BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_RDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTEHI_LK_STATS_RD_BYTE_HI_RDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteLo - Interlaken TX Statistics Read Byte Counter Low
  Register: LkRxStatsRdByteLo - Interlaken RX Statistics Read Byte Counter Low
    Bits: 31:0  LkStatsRdByteLoWData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_BYTE_LOW   0x000000a4
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_BYTE_LOW   0x000002a4
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTELO_LK_STATS_RD_BYTE_LO_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDBYTELO_LK_STATS_RD_BYTE_LO_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktHi - Interlaken TX Statistics Read Packet Counter High
  Register: LkRxStatsRdPktHi - Interlaken RX Statistics Read Packet Counter High
    Bits: 31    LkStatsRdPktHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdPktHiHalf(ro) - The counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdPktHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdPktHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdPktHiRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_PKT_HIGH   0x000000a8
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_PKT_HIGH   0x000002a8
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_OVER BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_HALF BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_UNCORR BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_CORR BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_RDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTHI_LK_STATS_RD_PKT_HI_RDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktLo - Interlaken TX Statistics Read Packet Counter Low
  Register: LkRxStatsRdPktLo - Interlaken RX Statistics Read Packet Counter Low
    Bits: 31:0  LkStatsRdPktLoWData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_PKT_LOW    0x000000ac
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_PKT_LOW    0x000002ac
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTLO_LK_STATS_RD_PKT_LO_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPKTLO_LK_STATS_RD_PKT_LO_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrHi - Interlaken TX Statistics Read Error Counter High
  Register: LkRxStatsRdErrHi - Interlaken RX Statistics Read Error Counter High
    Bits: 31    LkStatsRdErrHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdErrHiHalf(ro) - The counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdErrHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdErrHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdErrHiRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_ERR_HIGH   0x000000b0
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_ERR_HIGH   0x000002b0
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_OVER BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_HALF BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_UNCORR BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_CORR BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_RDATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRHI_LK_STATS_RD_ERR_HI_RDATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrLo - Interlaken TX Statistics Read Error Counter Low
  Register: LkRxStatsRdErrLo - Interlaken RX Statistics Read Error Counter Low
    Bits: 31:0  LkStatsRdErrLoWData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_ERR_LOW    0x000000b4
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_ERR_LOW    0x000002b4
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRLO_LK_STATS_RD_ERR_LO_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDERRLO_LK_STATS_RD_ERR_LO_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdParity - Interlaken TX Statistics Read Parity
  Register: LkRxStatsRdParity - Interlaken RX Statistics Read Parity
    Bits: 23:0  LkStatsRdParRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATS_READ_PARITY     0x000000b8
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATS_READ_PARITY     0x000002b8
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPARITY_LK_STATS_PAR_RDATA(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSTATSRDPARITY_LK_STATS_PAR_RDATA_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxCalEnable - Interlaken TX Calendar Enable
  Register: LkRxCalEnable - Interlaken RX Calendar Enable
    Bits: 18:8  LkCalLast(rw) - Interlaken Calendar Last Entry Number
    Bits:  0    LkCalProgEnable(rw) - Interlaken Programmable Calendar enable
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXCAL_ENABLE             0x000000c0
#define NFP3800_NBI_MACX_ILK_INTLKN_RXCAL_ENABLE             0x000002c0
#define   NFP3800_NBI_MACX_ILK_LKCALENABLE_INTLKN_CAL_LAST(_x) (((_x) & 0x7ff) << 8)
#define   NFP3800_NBI_MACX_ILK_LKCALENABLE_INTLKN_CAL_LAST_of(_x) (((_x) >> 8) & 0x7ff)
#define   NFP3800_NBI_MACX_ILK_LKCALENABLE_INTLKN_CAL_PROG_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: LkTxCalProgAccess - Interlaken TX Calendar Program Access
  Register: LkRxCalProgAccess - Interlaken RX Calendar Program Access
    Bits: 25:24 LkCalCmd(rw) - Interlaken Calendar Access command
    Bits: 10:0  LkCalAddr(rw) - Interlaken Prog Calendar Access address
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXCAL_PROG_ACCESS        0x000000c8
#define NFP3800_NBI_MACX_ILK_INTLKN_RXCAL_PROG_ACCESS        0x000002c8
#define   NFP3800_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_CMD(_x) (((_x) & 0x3) << 24)
#define   NFP3800_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_CMD_of(_x) (((_x) >> 24) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_ADDR(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKCALPROGACCESS_INTLKN_CAL_PROG_ADDR_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgWrData - Interlaken TX Calendar Program write data
  Register: LkRxCalProgWrData - Interlaken RX Calendar Program write data
    Bits:  8:0  LkCalProgWrData(rw) - Interlaken Prog Calendar Write data
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXCAL_PROG_WR_DATA       0x000000d0
#define NFP3800_NBI_MACX_ILK_INTLKN_RXCAL_PROG_WR_DATA       0x000002d0
#define   NFP3800_NBI_MACX_ILK_LKCALPROGWRDATA_INTLKN_CAL_PROG_WR_DATA(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKCALPROGWRDATA_INTLKN_CAL_PROG_WR_DATA_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgRdData - Interlaken TX Calendar Program read data
  Register: LkRxCalProgRdData - Interlaken RX Calendar Program read data
    Bits:  8:0  LkCalProgRdData(ro) - Interlaken Prog Calendar Read data
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXCAL_PROG_RD_DATA       0x000000d8
#define NFP3800_NBI_MACX_ILK_INTLKN_RXCAL_PROG_RD_DATA       0x000002d8
#define   NFP3800_NBI_MACX_ILK_LKCALPROGRDDATA_INTLKN_CAL_PROG_RD_DATA(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKCALPROGRDDATA_INTLKN_CAL_PROG_RD_DATA_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxDebugControl0 - Interlaken TX Debug bus control0
  Register: LkTxDebugControl1 - Interlaken TX Debug bus control1
  Register: LkRxDebugControl0 - Interlaken RX Debug bus control0
  Register: LkRxDebugControl1 - Interlaken RX Debug bus control1
    Bits: 31:30 LkDebugByte3(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[31:24] of the debug output.
    Bits: 29:24 LkDebugBus3(rw) - Interlaken Debug which internal debug busses to use bits[31:24] of the debug output.
    Bits: 23:22 LkDebugByte2(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[23:16] of the debug output.
    Bits: 21:16 LkDebugBus2(rw) - Interlaken Debug which internal debug busses to use bits[23:16] of the debug output.
    Bits: 15:14 LkDebugByte1(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[15:8] of the debug output.
    Bits: 13:8  LkDebugBus1(rw) - Interlaken Debug which internal debug busses to use bits[15:8] of the debug output.
    Bits:  7:6  LkDebugByte0(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[7:0] of the debug output.
    Bits:  5:0  LkDebugBus0(rw) - Interlaken Debug which internal debug busses to use bits[7:0] of the debug output.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_DEBUG_CTL0            0x00000100
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_DEBUG_CTL1            0x00000104
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_CTL0            0x00000300
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_CTL1            0x00000304
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE3(_x) (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE3_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS3(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS3_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE2(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS2(_x) (((_x) & 0x3f) << 16)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS2_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE1(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE1_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS1(_x) (((_x) & 0x3f) << 8)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS1_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE0(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BYTE0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGCONTROL_INTLKN_DEBUG_BUS0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: LkTxDebugHold0 - Interlaken TX Debug hold control0
  Register: LkTxDebugHold1 - Interlaken TX Debug hold control1
  Register: LkRxDebugHold0 - Interlaken RX Debug hold control0
  Register: LkRxDebugHold1 - Interlaken RX Debug hold control1
    Bits: 31:0  LkDebugHold(rw) - Debug: For each bit that is set to 1, the corresponding bit in the debug output will latch and hold when it sees a high value on the selected debug bit.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_DEBUG_HOLD0           0x00000108
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_DEBUG_HOLD1           0x0000010c
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_HOLD0           0x00000308
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_HOLD1           0x0000030c
#define   NFP3800_NBI_MACX_ILK_LKDEBUGHOLD_INTLKN_DEBUG_HOLD(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGHOLD_INTLKN_DEBUG_HOLD_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxDebugObserve0 - Interlaken TX Debug observe data0
  Register: LkTxDebugObserve1 - Interlaken TX Debug observe data1
  Register: LkRxDebugObserve1 - Interlaken RX Debug observe data1
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_DEBUG_OBSERVE0        0x00000110
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_DEBUG_OBSERVE1        0x00000114
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE1        0x00000314
#define   NFP3800_NBI_MACX_ILK_LKDEBUGOBSERVE_INTLKN_DEBUG_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKDEBUGOBSERVE_INTLKN_DEBUG_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestControl - Interlaken TX SerDes Test Control
  Register: LkRxSerDesTestControl - Interlaken RX SerDes Test Control
    Bits: 31:24 LkSerDesTestRepC(rw) - The number of times to repeat pattern C when doing programmable pattern. 0 = Disable pattern C.
    Bits: 23:16 LkSerDesTestRepB(rw) - The number of times to repeat pattern B when doing programmable pattern. 0 = Disable pattern B.
    Bits: 15:8  LkSerDesTestRepA(rw) - The number of times to repeat pattern A when doing programmable pattern. 0 = Disable pattern A.
    Bits:  1    LkSerDesTestProgEn(rw) - Enable programmable pattern.
    Bits:  0    LkSerDesTestPrbsEn(rw) - Enable PRBS (Pseudo Random Bit Stream) pattern.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_CONTROL   0x00000120
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_CONTROL   0x00000320
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPC(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPB(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPB_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_REPA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_PROG_EN BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTCONTROL_INTLKN_SERDES_TEST_PRBS_EN BIT(0)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternA - Interlaken TX SerDes Test Pattern A
  Register: LkRxSerDesTestPatternA - Interlaken RX SerDes Test Pattern A
    Bits: 31:0  LkSerDesTestPatternA(rw) - When doing programmable patterns, this bit pattern is sent REPA times. When doing PRBS, this value programs the desired polynomial. The recommended Interlaken polynomials are programmed as follows: PRBS31 : x^31 + x^28 + 1 : 32'h90000001 (bits 31, 28, and 0 are set) PRBS23 : x^23 + x^18 + 1 : 32'h00840001 (bits 23, 18, and 0 are set) PRBS7 : x^7 + x^6 + 1 : 32'h000000C1 (bits 7, 6, and 0 are set) Other commonly used PRBS polynomials are also supported: PRBS9 : x^9 + x^5 + 1 : 32'h00000221 (bits 9, 5, and 0 are set) PRBS11 : x^11 + x^9 + 1 : 32'h00000A01 (bits 11, 9, and 0 are set) PRBS15 : x^15 + x^14 + 1 : 32'h0000C001 (bits 15, 14, and 0 are set) PRBS29 : x^29 + x^27 + 1 : 32'h28000001 (bits 29, 27, and 0 are set) PRBS polynomials other than those listed above are not guaranteed to be functional as some logic optimizations may have been done to improve the area and performance of the design. When doing PRBS, bit[0] is ignored and assumed to be 1'b1..
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_PATTERN_A 0x00000124
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_PATTERN_A 0x00000324
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTPATTERNA_INTLKN_SERDES_TEST_PATTERN_A(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTPATTERNA_INTLKN_SERDES_TEST_PATTERN_A_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternB - Interlaken TX SerDes Test Pattern B
  Register: LkRxSerDesTestPatternB - Interlaken RX SerDes Test Pattern B
    Bits: 31:0  LkSerDesTestPatternB(rw) - When doing programmable patterns, this bit pattern is sent REPB times.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_PATTERN_B 0x00000128
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_PATTERN_B 0x00000328
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTPATTERNB_INTLKN_SERDES_TEST_PATTERN_B(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTPATTERNB_INTLKN_SERDES_TEST_PATTERN_B_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternC - Interlaken TX SerDes Test Pattern C
  Register: LkRxSerDesTestPatternC - Interlaken RX SerDes Test Pattern C
    Bits: 31:0  LkSerDesTestPatternC(rw) - When doing programmable patterns, this bit pattern is sent REPC times.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_SERDES_TEST_PATTERN_C 0x0000012c
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_SERDES_TEST_PATTERN_C 0x0000032c
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTPATTERNC_INTLKN_SERDES_TEST_PATTERN_C(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LKSERDESTESTPATTERNC_INTLKN_SERDES_TEST_PATTERN_C_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatusMessage - Interlaken TX Status Message Received from OOB
    Bits: 31    LkTxStatusMessageCurrent(ro) - The most recently received calendar included a status message.
    Bits: 30    LkTxStatusMessageValid(ro) - The most recently received status message was valid (no framing or CRC errors). When the most recently received status message was errored due to framing or CRC errors, the SIF and SL bits below are retained from the previous valid status message, if any.
    Bits: 26    LkTxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 24    LkTxStatusMessageSif(ro) - The status bit for the interface as a whole.
    Bits: 23:0  LkTxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG            0x00000140
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_CURRENT BIT(31)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_VALID BIT(30)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_SYNC BIT(26)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_SIF BIT(24)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_LANES(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_STATUS_MSG_INTLKN_TX_STATUS_MSG_LANES_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap5to0 - Interlaken TX Lane Remapping 5 to 0
  Register: LkRxLaneReMap5to0 - Interlaken RX Lane Remapping 5 to 0
    Bits: 29:25 LkLaneReMap5(rw) - Interlaken Physical Remap for lane 5
    Bits: 24:20 LkLaneReMap4(rw) - Interlaken Physical Remap for lane 4
    Bits: 19:15 LkLaneReMap3(rw) - Interlaken Physical Remap for lane 3
    Bits: 14:10 LkLaneReMap2(rw) - Interlaken Physical Remap for lane 2
    Bits:  9:5  LkLaneReMap1(rw) - Interlaken Physical Remap for lane 1
    Bits:  4:0  LkLaneReMap0(rw) - Interlaken Physical Remap for lane 0
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXLANE_REMAP_5_0         0x00000150
#define NFP3800_NBI_MACX_ILK_INTLKN_RXLANE_REMAP_5_0         0x00000350
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE5_REMAP(_x) (((_x) & 0x1f) << 25)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE5_REMAP_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE4_REMAP(_x) (((_x) & 0x1f) << 20)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE4_REMAP_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE3_REMAP(_x) (((_x) & 0x1f) << 15)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE3_REMAP_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE2_REMAP(_x) (((_x) & 0x1f) << 10)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE2_REMAP_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE1_REMAP(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE1_REMAP_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE0_REMAP(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING5TO0_INTLKN_LANE0_REMAP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap11to6 - Interlaken TX Lane Remapping 11 to 6
  Register: LkRxLaneReMap11to6 - Interlaken RX Lane Remapping 11 to 6
    Bits: 29:25 LkLaneReMap11(rw) - Interlaken Physical Remap for lane 11
    Bits: 24:20 LkLaneReMap10(rw) - Interlaken Physical Remap for lane 10
    Bits: 19:15 LkLaneReMap9(rw) - Interlaken Physical Remap for lane 9
    Bits: 14:10 LkLaneReMap8(rw) - Interlaken Physical Remap for lane 8
    Bits:  9:5  LkLaneReMap7(rw) - Interlaken Physical Remap for lane 7
    Bits:  4:0  LkLaneReMap6(rw) - Interlaken Physical Remap for lane 6
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TXLANE_REMAP_11_6        0x00000154
#define NFP3800_NBI_MACX_ILK_INTLKN_RXLANE_REMAP_11_6        0x00000354
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE11_REMAP(_x) (((_x) & 0x1f) << 25)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE11_REMAP_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE10_REMAP(_x) (((_x) & 0x1f) << 20)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE10_REMAP_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE9_REMAP(_x) (((_x) & 0x1f) << 15)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE9_REMAP_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE8_REMAP(_x) (((_x) & 0x1f) << 10)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE8_REMAP_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE7_REMAP(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE7_REMAP_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE6_REMAP(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ILK_LKLANEREMAPPING11TO6_INTLKN_LANE6_REMAP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxInterrupt - Interlaken TX Interrupt
  Register: LkTxInterrupt2 - Interlaken TX Interrupt Second
    Bits: 31    LkTxIntFifoUnCorr(rw1c) - The transmitter's input fifo had an uncorrectable parity or ECC error.
    Bits: 30    LkTxIntFifoCorr(rw1c) - The transmitter's input fifo had an correctable ECC error.
    Bits: 29    LkTxIntFifoOver(rw1c) - The transmitter's input fifo overflowed. This should not happen if the high watermark in register SLE_TX_FIFO_CFG is set properly given the latency required for the user to respond to stall.
    Bits: 28    LkTxIntFifoUnder(rw1c) - The transmitter's input fifo went empty not on a burst boundary. To try to prevent Interlaken protocol errors a burst boundary was forced. This condition should not happen if the user sends data in complete bursts and the low watermark in register FIXME is set properly given the latency required for the user to respond to stall.
    Bits: 17    LkTxIntFcErr(rw1c) - An error occurred on the out band flow control (mismatch between calendar length and reset calendar pulse or CRC4 error)..
    Bits: 16    LkTxIntStatusMessageChange(rw1c) - When this interrupt is set, it reports if there is a change in the status that is part of the out-of-band flow control. Then STATUS_MSG_CHANGE interrupt sets if there is a change in any bit of register 0x140 : TX Status Message Received.
    Bits: 15    LkTxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error. Each channel in the design has a flag that sets when an uncorrectable parity or ECC error has been seen. To clear the CNT_UNCORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits: 14    LkTxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error. Each channel in the design has a flag that sets when a correctable ECC error has been seen. To clear the CNT_CORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits:  1    LkTxIntFcCntFill(rw1c) - The out-of-band flow control error counter is half full or overflowed.
    Bits:  0    LkTxIntChanCntFill(rw1c) - One or more per channel statistics counters (TX_Bytes, TX_Packets, and/or TX_Bad_Packets) are half full or overflowed.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT             0x00000180
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT2            0x00000188
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_UNCORRECTABLE BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_CORRECTABLE BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_OVERFLOW BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FIFO_UNDERRUN BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FC_ERR BIT(17)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_STATUS_MESSAGE_CHANGE BIT(16)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_COUNT_UNCORRECTABLE BIT(15)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_COUNT_CORRECTABLE BIT(14)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_FC_CNT_FILL BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPT_INTLKN_TXINT_CHAN_CNT_FILL BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptMask - Interlaken TX Interrupt Mask
  Register: LkTxInterruptMask2 - Interlaken TX Interrupt Mask Second
    Bits: 31    LkTxIntFifoUnCorrMask(rw) - Mask Interrupt.
    Bits: 30    LkTxIntFifoCorrMask(rw) - Mask Interrupt.
    Bits: 29    LkTxIntFifoOverMask(rw) - Mask Interrupt.
    Bits: 28    LkTxIntFifoUnderMask(rw) - Mask Interrupt.
    Bits: 17    LkTxIntFcErrMask(rw) - Mask Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeMask(rw) - Mask Interrupt.
    Bits: 15    LkTxIntCntUnCorrMask(rw) - Mask Interrupt.
    Bits: 14    LkTxIntCntCorrMask(rw) - Mask Interrupt.
    Bits:  1    LkTxIntFcCntFillMask(rw) - Mask Interrupt.
    Bits:  0    LkTxIntChanCntFillMask(rw) - Mask Interrupt.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_MASK        0x00000184
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_MASK2       0x0000018c
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_UNCORRECTABLE_MASK BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_CORRECTABLE_MASK BIT(30)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_OVERFLOW_MASK BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FIFO_UNDERRUN_MASK BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FC_ERR_MASK BIT(17)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_STATUS_MESSAGE_CHANGE_MASK BIT(16)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_COUNT_UNCORRECTABLE_MASK BIT(15)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_COUNT_CORRECTABLE_MASK BIT(14)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_FC_CNT_FILL_MASK BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKTXINTERRUPTMASK_INTLKN_TXINT_CHAN_CNT_FILL_MASK BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptForce - Interlaken TX Interrupt Force
    Bits: 31    LkTxIntFifoUnCorrForce(rw) - Force Interrupt.
    Bits: 30    LkTxIntFifoCorrForce(rw) - Force Interrupt.
    Bits: 29    LkTxIntFifoOverForce(rw) - Force Interrupt.
    Bits: 28    LkTxIntFifoUnderForce(rw) - Force Interrupt.
    Bits: 17    LkTxIntFcErrForce(rw) - Force Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeForce(rw) - Force Interrupt.
    Bits: 15    LkTxIntCntUnCorrForce(rw) - Force Interrupt.
    Bits: 14    LkTxIntCntCorrForce(rw) - Force Interrupt.
    Bits:  1    LkTxIntFcCntFillForce(rw) - Force Interrupt.
    Bits:  0    LkTxIntChanCntFillForce(rw) - Force Interrupt.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE       0x00000190
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_UNCORRECTABLE_FORCE BIT(31)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_CORRECTABLE_FORCE BIT(30)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_OVERFLOW_FORCE BIT(29)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FIFO_UNDERRUN_FORCE BIT(28)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FC_ERR_FORCE BIT(17)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_STATUS_MESSAGE_CHANGE_FORCE BIT(16)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_COUNT_UNCORRECTABLE_FORCE BIT(15)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_COUNT_CORRECTABLE_FORCE BIT(14)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_FC_CNT_FILL_FORCE BIT(1)
#define   NFP3800_NBI_MACX_ILK_INTLKN_TX_INTERRUPT_FORCE_INTLKN_TXINT_CHAN_CNT_FILL_FORCE BIT(0)
/*----------------------------------------------------------------
  Register: LkRxControl - Interlaken Mac RX Core Control
    Bits: 11    LkStatusMsgCont(rw) - When set to 1, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control on every calendar. When set to 0, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control only when one of the enabled lanes identifies a problem. Note: STATUS_MSG_CONT is unused in the TX (0x018).
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL               0x00000218
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_STATUS_MSG_CONTINUOUS BIT(11)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_STATUS_MSG_ENABLE BIT(10)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_DATA_ALL_ZERO BIT(7)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_FC_OOB_ALL_ZERO BIT(6)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_DISPARITY_DISABLE BIT(4)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_CRC24_DISABLE BIT(3)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_CRC32_DISABLE BIT(2)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CONTROL_INTLKN_UNALIGN_XOFF_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: LkSerDesRxFifoConfig - Interlaken Mac RX Core SerDes/FC Fifo Config
    Bits: 27:24 LkFcRxFifoHwm(rw) - Interlaken FC RXFIFO HWM
    Bits: 19:16 LkFcRxFifoLwm(rw) - Interlaken FC RXFIFO LWM
    Bits: 11:8  LkSerDesRxFifoHwm(rw) - Interlaken SerDes RXFIFO HWM
    Bits:  3:0  LkSerDesRxFifoLwm(rw) - Interlaken SerDes RXFIFO LWM
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG     0x00000228
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_HWM(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_HWM_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_LWM(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_FC_RXFIFO_LWM_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_HWM(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_HWM_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_LWM(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_SERDES_RXFIFO_CONFIG_INTLKN_SERDES_RXFIFO_LWM_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkRxDebugObserve0 - Interlaken RX Debug observe data0
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE0        0x00000310
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE0_INTLKN_DEBUG_RDATA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_DEBUG_OBSERVE0_INTLKN_DEBUG_RDATA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkRxInterrupt - Interlaken RX Interrupt
  Register: LkRxInterrupt2 - Interlaken RX Interrupt Second
    Bits: 31    LkRxIntCtlBitErr(rw1c) - Control Word Bit Error. A control word looked like a valid synchronization or skip word, but bit [55:0] of the word did not match the expected value.
    Bits: 29    LkRxIntMfErr(rw1c) - For one or more of the enabled lanes, a valid synchronization word was not received at the metaframe period. SLE_RX_MF_ERR (0x3AC) must be cleared before MF_ERR will clear.
    Bits: 28    LkRxIntBadCtlErr(rw1c) - A control word was received that does not match one of the defined control word types. SLE_RX_BADCTL_ERR MMR (0x3B0) must be cleared before BADCTL_ERR bit[28] will clear.
    Bits: 27    LkRxIntScRamErr(rw1c) - For one or more enabled lanes, a scrambler state word did not match its expected value. SLE_RX_SCRAM_ERR (0x3B4) must be cleared before SCRAM_ERR will clear.
    Bits: 26    LkRxIntCrc32Err(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 25    LkRxIntCdrErr(rw1c) - For one or more enabled lanes, the i_rx_serdes_valid input is low. SLE_RX_CDR_ERR (0x3BC) must be cleared before CDR_ERR will clear.
    Bits: 24    LkRxIntWdSyncChange(rw1c) - For one or more enabled lanes, the 64b/67b synchronization has changed, either from out of sync to in sync or from in sync to out of sync. SLE_RX_WRD SYNC MMR (0x3C0) must be cleared before WRD_SYN_CHANGE bit[24] will clear. A flow diagram for achieving and maintaining 64B/67B word boundary lock is shown in figure 5-10 on page 25 of the Interlaken Protocol Definition. Once we get sync ( the middle64B/67B word lock state in the diagram) we need to get 16 out of 64 words with bad framing bits in order to go out of sync, the upper and lower values are set by 0x218 : Receive Control Register.
    Bits: 23    LkRxIntAlignChange(rw1c) - The alignment state has changed, either from out of alignment to aligned or from aligned to out of alignment.
    Bits: 22    LkRxIntAlignErr(rw1c) - An alignment error occurred (synchronization word not seen on all lanes at the same time).
    Bits: 21    LkRxIntBurstErr(rw1c) - A protocol error occurred in the datapath related to the burst delineation logic.
    Bits: 20    LkRxIntBminErr(rw1c) - A BurstMin violation was detected.
    Bits: 19    LkRxIntBmaxErr(rw1c) - A BurstMax violation was detected.
    Bits: 18    LkRxIntCrc24Err(rw1c) - A burst CRC24 error was detected.
    Bits: 17    LkRxIntFcErr(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 16    LkRxIntStatusMessageChange(rw1c) - When this interrupt is set, it indicates that the diagnostics word's status message has changed. The status message can be seen in register 0x3C8 : Status Message Received.
    Bits: 15    LkRxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error.
    Bits: 14    LkRxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error.
    Bits: 13    LkRxIntBadCtlCntFill(rw1c) - The RX_Bad_Control_Error counter is over half full.
    Bits: 10    LkRxIntCrc32CntFill(rw1c) - One or more of the per lane RX_Lane_CRC_Error counters is over half full.
    Bits:  9    LkRxIntCdrCntFill(rw1c) - One or more of the per lane RX_CDR_Error counters is over half full.
    Bits:  8    LkRxIntWrdSyncCntFill(rw1c) - One or more of the per lane RX_Word_Sync_Error counters is over half full.
    Bits:  7    LkRxIntAlignFailCntFill(rw1c) - The RX_Alignment_Failure counter is over half full.
    Bits:  6    LkRxIntAliCntFill(rw1c) - The RX_Alignment Error counter is over half full.
    Bits:  5    LkRxIntBurstCntFill(rw1c) - The RX_Burst_Error counter is over half full.
    Bits:  4    LkRxIntBminCntFill(rw1c) - The RX_Burst Min error counter is over half full.
    Bits:  3    LkRxIntBmaxCntFill(rw1c) - The RX_Burst_Max_Error counter is over half full.
    Bits:  2    LkRxIntCrc24CntFill(rw1c) - The RX_CRC24_Error counter is over half full.
    Bits:  1    LkRxIntFcCntFill(rw1c) - The in band flow control error counter is over half full. Note, this error does not occur in Look-Aside mode.
    Bits:  0    LkRxIntChanCntFill(rw1c) - One or more per channel statistics counters (RX_Bytes, RX_Packets, and/or RX_Bad_Packets) are over half full.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT             0x00000380
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT2            0x00000388
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CTLBIT_ERR BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_MF_ERR BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BAD_CTL_ERR BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_SCRAM_ERR BIT(27)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC32_ERR BIT(26)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CDR_ERR BIT(25)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_WRD_SYNC_CHANGE BIT(24)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_CHANGE BIT(23)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_ERR BIT(22)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BURST_ERR BIT(21)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMIN_ERR BIT(20)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMAX_ERR BIT(19)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC24_ERR BIT(18)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_FC_ERR BIT(17)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_STATUS_MESSAGE_CHANGE BIT(16)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CNT_UNCORRECTABLE BIT(15)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CNT_CORRECTABLE BIT(14)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BAD_CTL_CNT_FILL BIT(13)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC32_CNT_FILL BIT(10)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CDR_CNT_FILL BIT(9)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_WRD_SYNC_CNT_FILL BIT(8)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_FAIL_CNT_FILL BIT(7)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_ALIGN_CNT_FILL BIT(6)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BURST_CNT_FILL BIT(5)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMIN_CNT_FILL BIT(4)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_BMAX_CNT_FILL BIT(3)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CRC24_CNT_FILL BIT(2)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_FC_CNT_FILL BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPT_INTLKN_RXINT_CHAN_CNT_FILL BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptMask - Interlaken RX Interrupt Mask
  Register: LkRxInterruptMask2 - Interlaken RX Interrupt Mask Second
    Bits: 31    LkRxIntCtlBitErrMask(rw) - Interrupt Mask
    Bits: 29    LkRxIntMfErrMask(rw) - Interrupt Mask.
    Bits: 28    LkRxIntBadCtlErrMask(rw) - Interrupt Mask.
    Bits: 27    LkRxIntScRamErrMask(rw) - Interrupt Mask.
    Bits: 26    LkRxIntCrc32ErrMask(rw) - Interrupt Mask.
    Bits: 25    LkRxIntCdrErrMask(rw) - Interrupt Mask.
    Bits: 24    LkRxIntWdSyncChangeMask(rw) - Interrupt Mask.
    Bits: 23    LkRxIntAlignChangeMask(rw) - Interrupt Mask.
    Bits: 22    LkRxIntAlignErrMask(rw) - Interrupt Mask.
    Bits: 21    LkRxIntBurstErrMask(rw) - Interrupt Mask.
    Bits: 20    LkRxIntBminErrMask(rw) - Interrupt Mask.
    Bits: 19    LkRxIntBmaxErrMask(rw) - Interrupt Mask.
    Bits: 18    LkRxIntCrc24ErrMask(rw) - Interrupt Mask.
    Bits: 17    LkRxIntFcErrMask(rw) - Interrupt Mask.
    Bits: 16    LkRxIntStatusMessageChangeMask(rw) - Interrupt Mask.
    Bits: 15    LkRxIntCntUnCorrMask(rw) - Interrupt Mask.
    Bits: 14    LkRxIntCntCorrMask(rw) - Interrupt Mask.
    Bits: 13    LkRxIntBadCtlCntFillMask(rw) - Interrupt Mask.
    Bits: 10    LkRxIntCrc32CntFillMask(rw) - Interrupt Mask.
    Bits:  9    LkRxIntCdrCntFillMask(rw) - Interrupt Mask.
    Bits:  8    LkRxIntWrdSyncCntFillMask(rw) - Interrupt Mask.
    Bits:  7    LkRxIntAlignFailCntFillMask(rw) - Interrupt Mask.
    Bits:  6    LkRxIntAliCntFillMask(rw) - Interrupt Mask.
    Bits:  5    LkRxIntBurstCntFillMask(rw) - Interrupt Mask.
    Bits:  4    LkRxIntBminCntFillMask(rw) - Interrupt Mask.
    Bits:  3    LkRxIntBmaxCntFillMask(rw) - Interrupt Mask.
    Bits:  2    LkRxIntCrc24CntFillMask(rw) - Interrupt Mask.
    Bits:  1    LkRxIntFcCntFillMask(rw) - Interrupt Mask.
    Bits:  0    LkRxIntChanCntFillMask(rw) - Interrupt Mask.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_MASK        0x00000384
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_MASK2       0x0000038c
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CTLBIT_ERR_MASK BIT(31)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_MF_ERR_MASK BIT(29)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BAD_CTL_ERR_MASK BIT(28)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_SCRAM_ERR_MASK BIT(27)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC32_ERR_MASK BIT(26)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CDR_ERR_MASK BIT(25)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_WRD_SYNC_CHANGE_MASK BIT(24)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_CHANGE_MASK BIT(23)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_ERR_MASK BIT(22)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BURST_ERR_MASK BIT(21)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMIN_ERR_MASK BIT(20)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMAX_ERR_MASK BIT(19)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC24_ERR_MASK BIT(18)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_FC_ERR_MASK BIT(17)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_STATUS_MESSAGE_CHANGE_MASK BIT(16)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CNT_UNCORRECTABLE_MASK BIT(15)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CNT_CORRECTABLE_MASK BIT(14)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BAD_CTL_CNT_FILL_MASK BIT(13)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC32_CNT_FILL_MASK BIT(10)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CDR_CNT_FILL_MASK BIT(9)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_WRD_SYNC_CNT_FILL_MASK BIT(8)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_FAIL_CNT_FILL_MASK BIT(7)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_ALIGN_CNT_FILL_MASK BIT(6)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BURST_CNT_FILL_MASK BIT(5)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMIN_CNT_FILL_MASK BIT(4)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_BMAX_CNT_FILL_MASK BIT(3)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CRC24_CNT_FILL_MASK BIT(2)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_FC_CNT_FILL_MASK BIT(1)
#define   NFP3800_NBI_MACX_ILK_LKRXINTERRUPTMASK_INTLKN_RXINT_CHAN_CNT_FILL_MASK BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptForce - Interlaken RX Interrupt Force
    Bits: 31    LkRxIntCtlBitErrForce(rw) - Interrupt Force
    Bits: 29    LkRxIntMfErrForce(rw) - Interrupt Force.
    Bits: 28    LkRxIntBadCtlErrForce(rw) - Interrupt Force.
    Bits: 27    LkRxIntScRamErrForce(rw) - Interrupt Force.
    Bits: 26    LkRxIntCrc32ErrForce(rw) - Interrupt Force.
    Bits: 25    LkRxIntCdrErrForce(rw) - Interrupt Force.
    Bits: 24    LkRxIntWdSyncChangeForce(rw) - Interrupt Force.
    Bits: 23    LkRxIntAlignChangeForce(rw) - Interrupt Force.
    Bits: 22    LkRxIntAlignErrForce(rw) - Interrupt Force.
    Bits: 21    LkRxIntBurstErrForce(rw) - Interrupt Force.
    Bits: 20    LkRxIntBminErrForce(rw) - Interrupt Force.
    Bits: 19    LkRxIntBmaxErrForce(rw) - Interrupt Force.
    Bits: 18    LkRxIntCrc24ErrForce(rw) - Interrupt Force.
    Bits: 17    LkRxIntFcErrForce(rw) - Interrupt Force.
    Bits: 16    LkRxIntStatusMessageChangeForce(rw) - Interrupt Force.
    Bits: 15    LkRxIntCntUnCorrForce(rw) - Interrupt Force.
    Bits: 14    LkRxIntCntCorrForce(rw) - Interrupt Force.
    Bits: 13    LkRxIntBadCtlCntFillForce(rw) - Interrupt Force.
    Bits: 10    LkRxIntCrc32CntFillForce(rw) - Interrupt Force.
    Bits:  9    LkRxIntCdrCntFillForce(rw) - Interrupt Force.
    Bits:  8    LkRxIntWrdSyncCntFillForce(rw) - Interrupt Force.
    Bits:  7    LkRxIntAlignFailCntFillForce(rw) - Interrupt Force.
    Bits:  6    LkRxIntAliCntFillForce(rw) - Interrupt Force.
    Bits:  5    LkRxIntBurstCntFillForce(rw) - Interrupt Force.
    Bits:  4    LkRxIntBminCntFillForce(rw) - Interrupt Force.
    Bits:  3    LkRxIntBmaxCntFillForce(rw) - Interrupt Force.
    Bits:  2    LkRxIntCrc24CntFillForce(rw) - Interrupt Force.
    Bits:  1    LkRxIntFcCntFillForce(rw) - Interrupt Force.
    Bits:  0    LkRxIntChanCntFillForce(rw) - Interrupt Force.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE       0x00000390
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CTLBIT_ERR_FORCE BIT(31)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_MF_ERR_FORCE BIT(29)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BAD_CTL_ERR_FORCE BIT(28)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_SCRAM_ERR_FORCE BIT(27)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC32_ERR_FORCE BIT(26)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CDR_ERR_FORCE BIT(25)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_WRD_SYNC_CHANGE_FORCE BIT(24)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_CHANGE_FORCE BIT(23)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_ERR_FORCE BIT(22)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BURST_ERR_FORCE BIT(21)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMIN_ERR_FORCE BIT(20)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMAX_ERR_FORCE BIT(19)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC24_ERR_FORCE BIT(18)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_FC_ERR_FORCE BIT(17)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_STATUS_MESSAGE_CHANGE_FORCE BIT(16)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CNT_UNCORRECTABLE_FORCE BIT(15)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CNT_CORRECTABLE_FORCE BIT(14)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BAD_CTL_CNT_FILL_FORCE BIT(13)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC32_CNT_FILL_FORCE BIT(10)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CDR_CNT_FILL_FORCE BIT(9)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_WRD_SYNC_CNT_FILL_FORCE BIT(8)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_FAIL_CNT_FILL_FORCE BIT(7)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_ALIGN_CNT_FILL_FORCE BIT(6)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BURST_CNT_FILL_FORCE BIT(5)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMIN_CNT_FILL_FORCE BIT(4)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_BMAX_CNT_FILL_FORCE BIT(3)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CRC24_CNT_FILL_FORCE BIT(2)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_FC_CNT_FILL_FORCE BIT(1)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_INTERRUPT_FORCE_INTLKN_RXINT_CHAN_CNT_FILL_FORCE BIT(0)
/*----------------------------------------------------------------
  Register: LkRxMfError - Interlaken RX Metaframe Error
    Bits: 23:0  LkRxMfError(rw1c) - The MetaFrame Period Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_METAFRAME_ERROR       0x000003ac
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_METAFRAME_ERROR_INTLKN_RX_METAFRAME_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_METAFRAME_ERROR_INTLKN_RX_METAFRAME_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxBadCtlError - Interlaken RX Bad control word error
    Bits: 23:0  LkRxBadCtlError(rw1c) - The Bad Control Word Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_BAD_CTL_ERROR         0x000003b0
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_BAD_CTL_ERROR_INTLKN_RX_BAD_CTL_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_BAD_CTL_ERROR_INTLKN_RX_BAD_CTL_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxScramError - Interlaken RX Scrambler error
    Bits: 23:0  LkRxScramError(rw1c) - The Scrambler State Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_SCRAM_ERROR           0x000003b4
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_SCRAM_ERROR_INTLKN_RX_SCRAM_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_SCRAM_ERROR_INTLKN_RX_SCRAM_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32Error - Interlaken RX CRC32 error
    Bits: 23:0  LkRxCrc32Error(rw1c) - The CRC32 Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_CRC32_ERROR           0x000003b8
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CRC32_ERROR_INTLKN_RX_CRC32_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CRC32_ERROR_INTLKN_RX_CRC32_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrError - Interlaken RX CDR error
    Bits: 23:0  LkRxCdrError(rw1c) - The Assumed CDR lost status for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_CDR_ERROR             0x000003bc
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CDR_ERROR_INTLKN_RX_CDR_ERROR(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CDR_ERROR_INTLKN_RX_CDR_ERROR_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncChange - Interlaken RX Word sync change
    Bits: 23:0  LkRxWrdSyncChange(rw1c) - The Word boundary lock status changed. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CHANGE      0x000003c0
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CHANGE_INTLKN_RX_WORD_SYNC_CHANGE(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CHANGE_INTLKN_RX_WORD_SYNC_CHANGE_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxAlignStatus - Interlaken RX Alignment Status
    Bits: 23    LkRxAligned(ro) - Indicates that the interface is in alignment. This signal is also available as the o_rx_align output from both the sle_lake_rx_wrap and sle_interlaken_top modules. When this bit changes, the ALIGN_CHANGE bit gets set in the RX Interrupt Registers.
    Bits: 22    LkRxAlignErr(ro) - An invalid synchronization pattern has been found. The status bit is a one shot pulse so it will most likely not be seen on an MMR read.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_ALIGN_STATUS          0x000003c4
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_ALIGN_STATUS_INTLKN_RX_ALIGNED BIT(23)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_ALIGN_STATUS_INTLKN_RX_ALIGN_ERR BIT(22)
/*----------------------------------------------------------------
  Register: LkRxStatusMessage - Interlaken RX Status Message
    Bits: 31    LkRxStatusMessageValidAll(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ALL enabled serdes lanes.
    Bits: 30    LkRxStatusMessageValidAny(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ANY enabled serdes lanes.
    Bits: 26    LkRxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 25    LkRxStatusMessageSifAll(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ALL enabled lanes.
    Bits: 24    LkRxStatusMessageSifAny(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ANY enabled lanes.
    Bits: 23:0  LkRxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE        0x000003c8
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_VALID_ALL BIT(31)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_VALID_ANY BIT(30)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_SYNC BIT(26)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_SIF_ALL BIT(25)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_SIF_ANY BIT(24)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_LANES(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_STATUS_MESSAGE_INTLKN_RX_STATUS_MSG_LANES_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSync - Interlaken RX Word Sync
    Bits: 23:0  LkRxWrdSync(ro) - The Word boundary lock status. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC             0x000003cc
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_INTLKN_RX_WORD_SYNC(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_INTLKN_RX_WORD_SYNC_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32CntFill - Interlaken RX CRC32 err counters half full
    Bits: 23:0  LkRxCrc32CntFill(ro) - The half full status for the RX_Lane_CRC_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_CRC32_CNT_FILL        0x000003d8
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CRC32_CNT_FILL_INTLKN_RX_CRC32_CNT_FILL(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CRC32_CNT_FILL_INTLKN_RX_CRC32_CNT_FILL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrLostCntFill - Interlaken RX CDR lost err counters half full
    Bits: 23:0  LkRxCdrLostCntFill(ro) - The half full status for the RX_CDR_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_CDR_LOST_CNT_FILL     0x000003dc
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CDR_LOST_CNT_FILL_INTLKN_RX_CDR_LOST_CNT_FILL(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_CDR_LOST_CNT_FILL_INTLKN_RX_CDR_LOST_CNT_FILL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncCntFill - Interlaken RX word sync err counters half full
    Bits: 23:0  LkRxWrdSyncCntFill(ro) - The half full status of the RX_Word_Sync_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CNT_FILL    0x000003e0
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CNT_FILL_INTLKN_RX_WORD_SYNC_CNT_FILL(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_INTLKN_RX_WORD_SYNC_CNT_FILL_INTLKN_RX_WORD_SYNC_CNT_FILL_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsCtl1 - PCS Control.
    Bits: 15    EthPcsReset(rwc) - 1=PCS reset, 0=normal; Self clearing.
    Bits: 14    EthPcsLoopback(rw) - 1=Enable loopback, 0=disable loopback.
    Bits: 13    EthSpeedSelection13(ro) - Always 1.
    Bits: 11    EthLowPower(rw) - 0=normal operation (Always set to 0).
    Bits:  6    EthSpeedSelection6(ro) - Always 1.
    Bits:  5:2  EthSpeedSel(ro) - 0101=25G; 0011=40G; 0000=10G. Read value depends on currently active configuration (see PCS_MODE or pins).
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_CTL_1(_x) (0x00000000 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_PCS_RESET BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_PCS_LOOPBACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_SPEED_SELECTION_13 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_LOW_POWER BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_SPEED_SELECTION_6 BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_SPEED_SEL(_x) (((_x) & 0xf) << 2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_1_ETH_SPEED_SEL_of(_x) (((_x) >> 2) & 0xf)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsStatus1 - PCS Status.
    Bits: 11    EthTxLpi(ro) - 1: transmit is or was in LPI state; 0: normal operation; Latching high.
    Bits: 10    EthRxLpi(ro) - 1: receive is or was in LPI state; 0: normal operation; Latching high.
    Bits:  9    EthTxLpiActive(ro) - 1: transmit is currently in LPI state; 0: normal operation.
    Bits:  8    EthRxLpiActive(ro) - 1: receive is currently in LPI state; 0: normal operation.
    Bits:  7    EthFault(ro) - When 1, indicates a fault condition idetected; When '0', indicates that no fault condition is detected.
    Bits:  2    EthPcsReceiveLink(ro) - When 1, indicates PCS receive link up; When '0', indicates PCS receive link is or was down (latching low).
    Bits:  1    EthLowPowerAble(ro) - Set to 1 to indicate that the PCS implements a low power mode.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_STATUS_1(_x) (0x00000004 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_TX_LPI BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_RX_LPI BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_TX_LPI_ACTIVE BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_RX_LPI_ACTIVE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_FAULT BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_PCS_RECEIVE_LINK BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_1_ETH_LOW_POWER_ABLE BIT(1)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDevId0 - PHY Identifier constant from package parameter PHY_IDENTIFIER bits 15:4. Bits 3:0 always 0.
    Bits: 15:0  EthDevId(ro) - Bits 15:0 of Device Identifier defined by parameter PHY_IDENTIFIER in PCS package file.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_DEV_ID_0(_x) (0x00000008 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEV_ID_0_ETH_DEV_ID(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEV_ID_0_ETH_DEV_ID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDevId1 - PHY Identifier constant from package parameter PHY_IDENTIFIER bits 31:16.
    Bits: 15:0  EthDevId(ro) - Bits 31:16 of Device Identifier defined by parameter PHY_IDENTIFIER in PCS package file.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_DEV_ID_1(_x) (0x0000000c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEV_ID_1_ETH_DEV_ID(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEV_ID_1_ETH_DEV_ID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsSpeedAbility - PCS supported speeds (values as defined by standard only, no proprietary speeds).
    Bits:  5    EthSpeed50GCapable(ro) - When 1, this PCS is 50G capable. N/A
    Bits:  4    EthSpeed25GCapable(ro) - When 1, this PCS is 25G capable.
    Bits:  3    EthSpeed100GCapable(ro) - When 1, this PCS is 100G capable.
    Bits:  2    EthSpeed40GCapable(ro) - When 1, this PCS is 40G capable.
    Bits:  1    EthSpeed10PassTs2BaseTlCapable(ro) - When 1, this PCS is 10PASS-TS/2Base-TL capable.
    Bits:  0    EthSpeed10GCapable(ro) - When 1, this PCS is 10Geth capable.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_SPEED_ABILITY(_x) (0x00000010 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_SPEED_ABILITY_ETH_SPEED_50GCAPABLE BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_SPEED_ABILITY_ETH_SPEED_25GCAPABLE BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_SPEED_ABILITY_ETH_SPEED_100GCAPABLE BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_SPEED_ABILITY_ETH_SPEED_40GCAPABLE BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_SPEED_ABILITY_ETH_SPEED_10PASS_TS_2BASE_TL_CAPABLE BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_SPEED_ABILITY_ETH_SPEED_10GCAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDeviInPkg1 - Constant indicating PCS presence.
    Bits:  6    EthTcPresent(ro) - TC present when 1.
    Bits:  5    EthDteXsPresent(ro) - DTE XS present when 1.
    Bits:  4    EthPhyXsPresent(ro) - PHY XS present when 1.
    Bits:  3    EthPCSPresent(ro) - PCS present when 1.
    Bits:  2    EthWisPresent(ro) - WIS present when 1.
    Bits:  1    EthPmdPmaPresent(ro) - PMD/PMA present when 1.
    Bits:  0    EthClause22Present(ro) - Clause 22 registers present when 1.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_DEVI_IN_PKG_1(_x) (0x00000014 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_TC_PRESENT BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_DTE_XS_PRESENT BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_PHY_XS_PRESENT BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_PCSPRESENT BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_WIS_PRESENT BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_PMD_PMA_PRESENT BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_1_ETH_CLAUSE_22PRESENT BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDeviInPkg2 - Vendor specific presence.
    Bits: 15    EthVndrDev2Present(ro) - Vendor specific device 2 present
    Bits: 14    EthVndrDev1Present(ro) - Vendor specific device 1 present
    Bits: 13    EthClause22Present(ro) - Clause 22 extension present
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_DEVI_IN_PKG_2(_x) (0x00000018 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_2_ETH_VNDR_DEV_2PRESENT BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_2_ETH_VNDR_DEV_1PRESENT BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_DEVI_IN_PKG_2_ETH_CLAUSE_22PRESENT BIT(13)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsCtl2 - Operating speed indication/control.
    Bits:  2:0  EthPcsType(ro) - Not writeable; Reflects PCS mode from PCS_MODE or external pin configurations if possible.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_CTL_2(_x) (0x0000001c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_2_ETH_PCS_TYPE(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_CTL_2_ETH_PCS_TYPE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsStatus2 - Fault status; Device capabilities
    Bits: 15:14 EthDevPresent(ro) - Device present. When bits are 10 = device responding at this address.
    Bits: 11    EthTransmitFault(ro) - Transmit fault. 1=Fault condition on transmit path. Latched high
    Bits: 10    EthReceiveFault(ro) - Receive fault. 1=Fault condition on receive path. Latched high
    Bits:  8    Eth50GBaseRCapable(ro) - When 1, this PCS is 50GBase-R capable. N/A.
    Bits:  7    Eth25GBaseRCapable(ro) - When 1, this PCS is 25GBase-R capable. N/A.
    Bits:  5    Eth100GBaseRCapable(ro) - When 1, this PCS is 100GBase-R capable.
    Bits:  4    Eth40GBaseRCapable(ro) - When 1, this PCS is 40GBase-R capable.
    Bits:  3    Eth10GBaseTCapable(ro) - When 1, this PCS is 10GBase-T capable.
    Bits:  2    Eth10GBaseWCapable(ro) - When 1, this PCS is 10GBase-W capable.
    Bits:  1    Eth10GBaseXCapable(ro) - When 1, this PCS is 10GBase-X capable.
    Bits:  0    Eth10GBaseRCapable(ro) - When 1, this PCS is 10GBase-R capable.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_STATUS_2(_x) (0x00000020 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_DEV_PRESENT(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_DEV_PRESENT_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_TRANSMIT_FAULT BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_RECEIVE_FAULT BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_50GBASE_RCAPABLE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_25GBASE_RCAPABLE BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_100GBASE_RCAPABLE BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_40GBASE_RCAPABLE BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_10GBASE_TCAPABLE BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_10GBASE_WCAPABLE BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_10GBASE_XCAPABLE BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_STATUS_2_ETH_10GBASE_RCAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsPkgId0 - Constant from package parameter PACK_IDENTIFIER bits 15:0.
    Bits: 15:0  EthIdentifier(ro) - Constant from package parameter PACK_IDENTIFIER bits 15:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_PKG_ID_0(_x) (0x00000038 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_PKG_ID_0_ETH_IDENTIFIER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_PKG_ID_0_ETH_IDENTIFIER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsPkgId1 - Constant from package parameter PACK_IDENTIFIER bits 31:16.
    Bits: 15:0  EthIdentifier(ro) - Constant from package parameter PACK_IDENTIFIER bits 31:16.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_PKG_ID_1(_x) (0x0000003c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_PKG_ID_1_ETH_IDENTIFIER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_PKG_ID_1_ETH_IDENTIFIER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsEeeCtrlCapability - EEE Control and Capabilities (exists only if EEE is available).
    Bits: 11    EthEee25gbaseRsleep(ro) - When 1, EEE deep sleep is supported for 25GBASE-R.
    Bits: 10    EthEee25gbaseRawake(ro) - When 1, EEE fast wake is supported for 25GBASE-R.
    Bits:  9    EthEee40gbaseRsleep(ro) - When 1, EEE deep sleep is supported for 40GBASE-R.
    Bits:  8    EthEee40gbaseRawake(ro) - When 1, EEE fast wake is supported for 40GBASE-R.
    Bits:  6    EthEee10gbaseKr(ro) - When 1, EEE is supported for 10GBASE-KR.
    Bits:  0    EthLpiFw(ro) - Mode for selecting select 40G EEE mode; 1 = Fast wake mode; 0 = Deep sleep for LPI function.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_EEE_CTRL_CAPABILITY(_x) (0x00000050 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_EEE_CTRL_CAPABILITY_ETH_EEE_25GBASE_RSLEEP BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_EEE_CTRL_CAPABILITY_ETH_EEE_25GBASE_RAWAKE BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_EEE_CTRL_CAPABILITY_ETH_EEE_40GBASE_RSLEEP BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_EEE_CTRL_CAPABILITY_ETH_EEE_40GBASE_RAWAKE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_EEE_CTRL_CAPABILITY_ETH_EEE_10GBASE_KR BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_EEE_CTRL_CAPABILITY_ETH_LPI_FW BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsWakeErrCounter - EEE Wake error counter (exists only if EEE is available); Clears on read.
    Bits: 15:0  EthCounter(ro) - Increments each time the LPI enters the RX_WTF state indicating a wake time fault; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_WAKE_ERR_COUNTER(_x) (0x00000058 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_WAKE_ERR_COUNTER_ETH_COUNTER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_WAKE_ERR_COUNTER_ETH_COUNTER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRStatus1 - Link Status Information.
    Bits: 12    EthRcvLinkStatus(ro) - Receive link status. 1=Link up; 0=link down.
    Bits:  1    EthHighBer(ro) - 1=PCS reporting a high BER.
    Bits:  0    EthBlockLocked(ro) - 1=PCS locked to received blocks.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BASE_RSTATUS_1(_x) (0x00000080 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_1_ETH_RCV_LINK_STATUS BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_1_ETH_HIGH_BER BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_1_ETH_BLOCK_LOCKED BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRStatus2 - Link Status latches and error counters.
    Bits: 15    EthBlockLocked(ro) - Block Lock; Latched low.
    Bits: 14    EthHighBer(ro) - BER flag; Latched high.
    Bits: 13:8  EthBerCounter(ro) - BER counter; None roll-over.
    Bits:  7:0  EthErroredCnt(ro) - Errored blocks counter; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BASE_RSTATUS_2(_x) (0x00000084 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_2_ETH_BLOCK_LOCKED BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_2_ETH_HIGH_BER BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_2_ETH_BER_COUNTER(_x) (((_x) & 0x3f) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_2_ETH_BER_COUNTER_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_2_ETH_ERRORED_CNT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RSTATUS_2_ETH_ERRORED_CNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA0 - 10G Base-R Test Pattern TestPatSeedData A bits 15:0.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 15:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_A0(_x) (0x00000088 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A0_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A0_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA1 - 10G Base-R Test Pattern TestPatSeedData A bits 31:16.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 31:16.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_A1(_x) (0x0000008c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A1_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A1_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA2 - 10G Base-R Test Pattern TestPatSeedData A bits 47:32.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 47:32.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_A2(_x) (0x00000090 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A2_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A2_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA3 - 10G Base-R Test Pattern TestPatSeedData A bits 57:48.
    Bits:  9:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 57:48.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_A3(_x) (0x00000094 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A3_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_A3_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB0 - 10G Base-R Test Pattern TestPatSeedData B bits 15:0.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 15:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_B0(_x) (0x00000098 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B0_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B0_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB1 - 10G Base-R Test Pattern TestPatSeedData B bits 31:16.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 31:16.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_B1(_x) (0x0000009c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B1_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B1_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB2 - 10G Base-R Test Pattern TestPatSeedData B bits 47:32.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 47:32.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_B2(_x) (0x000000a0 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B2_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B2_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB3 - 10G Base-R Test Pattern TestPatSeedData B bits 57:48.
    Bits:  9:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 57:48.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_TEST_PAT_SEED_B3(_x) (0x000000a4 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B3_ETH_TEST_PAT_SEED_DATA(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_TEST_PAT_SEED_B3_ETH_TEST_PAT_SEED_DATA_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRTestCtl - Test Pattern Generator and Checker controls.
    Bits:  7    EthSelectRandom(rw) - Select Random Idle test pattern (40G); Overrides bits 1:0 when set.
    Bits:  3    EthTransmitTestPatEn(rw) - Transmit test-pattern enable.
    Bits:  2    EthReceiveTestPatEn(rw) - Receive test-pattern enable.
    Bits:  1    EthSelectSquare(rw) - Select Square Wave (1) or Pseudo Random (0) test pattern; 10G only.
    Bits:  0    EthDataPatSel(rw) - Data Pattern Select: 1=all Zero, 0=2x Local Fault; 10G only.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BASE_RTEST_CTL(_x) (0x000000a8 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_CTL_ETH_SELECT_RANDOM BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_CTL_ETH_TRANSMIT_TEST_PAT_EN BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_CTL_ETH_RECEIVE_TEST_PAT_EN BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_CTL_ETH_SELECT_SQUARE BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_CTL_ETH_DATA_PAT_SEL BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRTestErrCnt - Test Pattern Error Counter; Clears on read; None roll-over.
    Bits: 15:0  EthCounter(ro) - Test pattern error counter; Clears on read; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BASE_RTEST_ERR_CNT(_x) (0x000000ac + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_ERR_CNT_ETH_COUNTER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BASE_RTEST_ERR_CNT_ETH_COUNTER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBerHiOrderCnt - BER High Order Counter of BER bits 21:6; None roll-over.
    Bits: 15:0  EthBerCounter(ro) - Bits 21:6 of BER counter; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BER_HI_ORDER_CNT(_x) (0x000000b0 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BER_HI_ORDER_CNT_ETH_BER_COUNTER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BER_HI_ORDER_CNT_ETH_BER_COUNTER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsErrBlkHiOrderCnt - Error Blocks High Order Counter bits 21:8; None roll-over.
    Bits: 15    EthHiOrderCntPresent(ro) - High order counter present; Always 1.
    Bits: 13:0  EthErrBlkHiOrderCnt(ro) - Bits 21:8 of Error Blocks counter; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_ERR_BLK_HI_ORDER_CNT(_x) (0x000000b4 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_ERR_BLK_HI_ORDER_CNT_ETH_HI_ORDER_CNT_PRESENT BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_ERR_BLK_HI_ORDER_CNT_ETH_ERR_BLK_HI_ORDER_CNT(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_ERR_BLK_HI_ORDER_CNT_ETH_ERR_BLK_HI_ORDER_CNT_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsMultilaneAlignStat1 - Lane Alignment Status Bits and Block Lock.
    Bits: 12    EthLaneAlignmentStatus(ro) - Lane alignment status; 1=All Receive lanes locked and aligned.
    Bits:  3    EthLane3BlockLock(ro) - Lane 3 block lock.
    Bits:  2    EthLane2BlockLock(ro) - Lane 2 block lock.
    Bits:  1    EthLane1BlockLock(ro) - Lane 1 block lock.
    Bits:  0    EthLane0BlockLock(ro) - Lane 0 block lock.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_MULTILANE_ALIGN_STAT_1(_x) (0x000000c8 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_1_ETH_LANE_ALIGNMENT_STATUS BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_1_ETH_LANE_3BLOCK_LOCK BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_1_ETH_LANE_2BLOCK_LOCK BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_1_ETH_LANE_1BLOCK_LOCK BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_1_ETH_LANE_0BLOCK_LOCK BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsMultilaneAlignStat3 - Lane Alignment Marker Lock Status bits.
    Bits:  3    EthLane3MarkerLock(ro) - Lane 3 alignment marker lock
    Bits:  2    EthLane2MarkerLock(ro) - Lane 2 alignment marker lock
    Bits:  1    EthLane1MarkerLock(ro) - Lane 1 alignment marker lock
    Bits:  0    EthLane0MarkerLock(ro) - Lane 0 alignment marker lock
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_MULTILANE_ALIGN_STAT_3(_x) (0x000000d0 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_3_ETH_LANE_3MARKER_LOCK BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_3_ETH_LANE_2MARKER_LOCK BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_3_ETH_LANE_1MARKER_LOCK BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_MULTILANE_ALIGN_STAT_3_ETH_LANE_0MARKER_LOCK BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane0 - BIP Error Counter Lane 0; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 0; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BIP_ERR_CNT_LANE_0(_x) (0x00000320 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_0_ETH_BIP_ERR_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_0_ETH_BIP_ERR_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane1 - BIP Error Counter Lane 1; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 1; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BIP_ERR_CNT_LANE_1(_x) (0x00000324 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_1_ETH_BIP_ERR_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_1_ETH_BIP_ERR_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane2 - BIP Error Counter Lane 2; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 2; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BIP_ERR_CNT_LANE_2(_x) (0x00000328 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_2_ETH_BIP_ERR_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_2_ETH_BIP_ERR_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane3 - BIP Error Counter Lane 3; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 3; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_BIP_ERR_CNT_LANE_3(_x) (0x0000032c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_3_ETH_BIP_ERR_CNT(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_BIP_ERR_CNT_LANE_3_ETH_BIP_ERR_CNT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane0Mapping - Lane Channel 0 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 0 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_LANE_0MAPPING(_x) (0x00000640 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_0MAPPING_ETH_LANE_MAP(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_0MAPPING_ETH_LANE_MAP_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane1Mapping - Lane Channel 1 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 1 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_LANE_1MAPPING(_x) (0x00000644 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_1MAPPING_ETH_LANE_MAP(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_1MAPPING_ETH_LANE_MAP_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane2Mapping - Lane Channel 2 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 2 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_LANE_2MAPPING(_x) (0x00000648 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_2MAPPING_ETH_LANE_MAP(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_2MAPPING_ETH_LANE_MAP_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane3Mapping - Lane Channel 3 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 3 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_ETH_CH_PCS_LANE_3MAPPING(_x) (0x0000064c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_3MAPPING_ETH_LANE_MAP(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSSEG_ETH_CH_PCS_LANE_3MAPPING_ETH_LANE_MAP_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRevision - Package defined constants
    Bits: 31:16 EthCustRev(ro) - Programmable Customer Revision from package parameter CUST_REVISION
    Bits: 15:8  EthCoreVer(ro) - 8-bit value from package parameter CORE_VERSION
    Bits:  7:0  EthCoreRev(ro) - 8-bit value from package parameter CORE_REVISION
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_REVISION(_x)      (0x00005000 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_REVISION_ETH_CUST_REV(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_REVISION_ETH_CUST_REV_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_REVISION_ETH_CORE_VER(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_REVISION_ETH_CORE_VER_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_REVISION_ETH_CORE_REV(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_REVISION_ETH_CORE_REV_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthScratch - General Purpose
    Bits: 31:0  EthScratch(rw) - The Scratch Register provides a memory location to test the register access
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_SCRATCH(_x)       (0x00005004 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_SCRATCH_ETH_SCRATCH(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_SCRATCH_ETH_SCRATCH_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthCmdConfig - Control and Configuration
    Bits: 31    EthMacCcRsv31(ro) - reserved
    Bits: 30    EthShortPreamble(ro) - reserved; write 0 always
    Bits: 29    EthMacCcRsv29(ro) - reserved
    Bits: 28    EthMacCcRsv28(ro) - reserved
    Bits: 27    EthDisableFltHdl(rw) - Disable RS fault handling. When set to '0' (default), the MAC automatically inserts remote faults and idles in egress direction on detection of local faults and remote faults, respectively, on ingress direction. When set to '1', this feature is disabled.
    Bits: 26    EthTxFifoReset(rwc) - Self-Clearing TX FIFO reset command. May not be supported in all Core variants
    Bits: 25    EthMacCcRsv25(rw) - reserved
    Bits: 24    EthRegLowPRxEmpty(rw) - Mask toplevel pin reg_lowp with RX FIFO empty.
    Bits: 23    EthTxLowpEna(rw) - Instruct RS Layer to transmit LPI.
    Bits: 22    EthTxFlush(rw) - Egress flush enable.
    Bits: 21    EthRxSfdAny(rw) - Disable check for SFD (0xd5) and accept frame with any character.
    Bits: 20    EthPausePfcComp(rw) - Link Pause compatible with PFC mode. Pause is only indicated but does not stop TX.
    Bits: 19    EthPfcMode(rw) - Priority Flow Control Mode enable. If set to 1, the Core generates and processes PFC control frames according to the Priority Flow Control Interface signals. If set to 0 (Reset Value), the Core operates in legacy Pause Frame mode and generates and processes standard Pause Frames.
    Bits: 18    EthRsColCntExt(rw) - reserved
    Bits: 17    EthNoLgthCheck(rw) - Disable Payload Length Check. Not supported; write 0 always.
    Bits: 16    EthSendIdle(rw) - Force Idle Generation. If set to '1', the MAC permanently sends XLGMII Idle sequences even when faults are received.
    Bits: 15    EthPhyTxEna(rw) - Controls toplevel pin phy_txena. No internal function
    Bits: 14    EthRxErrDiscard(rw) - Enable Receive Errored Frame Discard. Use only with RX FIFO Store and Forward. May not be supported by all Core variants.
    Bits: 13    EthCmdFrameEna(rw) - Enable Reception of all Control Frames. If set to '1', all control frames are accepted. If set to '0', only Pause frames are accepted and all other command frames are rejected.
    Bits: 12    EthSwReset(rwc) - Self-Clearing Software Reset. When written with '1', all Statistics Counters are reset to 0.
    Bits: 11    EthTxPadEn(rw) - reserved, 0 always. The MAC never appends padding octets; the user application must provide frames of correct minimum size.
    Bits: 10    EthLoopBackEn(rw) - Enable PHY Interface loopback. If set to '1', the signal loop_ena is set to '1'. If set to '0' (Reset value), the signal loop_ena is set to '0'.
    Bits:  9    EthTxAddrIns(rw) - Set Source MAC Address on Transmit. If set to '1', the MAC overwrites the source MAC address received from the client interface with the MAC address programmed in registers MacAddr0 and MacAddr1 . If set to '0' (Reset value), the source MAC address from the client interface is transmitted unmodified to the line.
    Bits:  8    EthPauseIgnore(rw) - Ignore received Pause frame quanta. If set to '1', received pause frames are ignored by the MAC. If set to '0' (Reset value), the transmit process is stopped for the amount of time specified in the pause quanta received within a pause frame.
    Bits:  7    EthPauseFwd(rw) - Terminate / Forward Pause Frames. If set to '1', pause frames are forwarded to the user application. If set to '0' (Reset value), pause frames are terminated and discarded within the MAC.
    Bits:  6    EthCrcFwd(rw) - Terminate / Forward Received CRC. If set to '1', the CRC field of received frames is forwarded with the frame to the user application. If set to '0' (Reset value), the CRC field is stripped from the frame. Note - If padding (Bit PadEn set to '1') is enabled, CrcFwd is ignored.
    Bits:  5    EthPadEn(rw) - reserved, write 0 always. (MAC never removes padding)
    Bits:  4    EthPromisEn(rw) - Enable MAC Promiscuous Operation. If set to '1', all frames are received without any MAC address filtering. If set to '0' (Reset value), Unicast frames with a destination address not matching the Core MAC address (programmed in registers MacAddr0 and MacAddr1) are rejected.
    Bits:  3    EthMacCcRsv3(rw) - reserved
    Bits:  2    EthMacCcRsv2(ro) - reserved
    Bits:  1    EthRxEna(rw) - MAC Receive Path Enable. Should be set to '1' to enable the MAC receive path, should be set to '0' (Reset value) to disable the MAC receive path.
    Bits:  0    EthTxEna(rw) - MAC Transmit Path Enable. Should be set to '1' to enable the MAC transmit path, should be set to '0' (Reset value) to disable the MAC transmit path.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_CMD_CONFIG(_x)    (0x00005008 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_MAC_CC_RSV_31 BIT(31)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_SHORT_PREAMBLE BIT(30)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_MAC_CC_RSV_29 BIT(29)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_MAC_CC_RSV_28 BIT(28)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_DISABLE_FLT_HDL BIT(27)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_TX_FIFO_RESET BIT(26)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_MAC_CC_RSV_25 BIT(25)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_REG_LOW_PRX_EMPTY BIT(24)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_TX_LOWP_ENA BIT(23)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_TX_FLUSH BIT(22)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_RX_SFD_ANY BIT(21)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PAUSE_PFC_COMP BIT(20)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PFC_MODE BIT(19)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_RS_COL_CNT_EXT BIT(18)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_NO_LGTH_CHECK BIT(17)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_SEND_IDLE BIT(16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PHY_TX_ENA BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_RX_ERR_DISCARD BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_CMD_FRAME_ENA BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_SW_RESET BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_TX_PAD_EN BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_LOOP_BACK_EN BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_TX_ADDR_INS BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PAUSE_IGNORE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PAUSE_FWD BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_CRC_FWD BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PAD_EN BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_PROMIS_EN BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_MAC_CC_RSV_3 BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_MAC_CC_RSV_2 BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_RX_ENA BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CMD_CONFIG_ETH_TX_ENA BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMacAddr0 - First 4 bytes of MAC address
    Bits: 31:0  EthMacAddr0(rw) - First 4 bytes of the MAC Address. First byte is 7:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_MAC_ADDR_0(_x)    (0x0000500c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MAC_ADDR_0_ETH_MAC_ADDR_0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MAC_ADDR_0_ETH_MAC_ADDR_0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMacAddr1 - Last 2 bytes of MAC address
    Bits: 15:0  EthMacAddr1(rw) - Last 2 bytes: 5th is 7:0, 6th is 15:8
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_MAC_ADDR_1(_x)    (0x00005010 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MAC_ADDR_1_ETH_MAC_ADDR_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MAC_ADDR_1_ETH_MAC_ADDR_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthFrmLength - Maximum Frame Size
    Bits: 31:16 EthTxMtu(rw) - Optional maximum frame size setting for transmit statistics use if it should be different from receive statistics. When set to 0 the FrmLength value is used (i.e. statistics symmetric for TX and RX).
    Bits: 15:0  EthFrmLength(rw) - Maximum Frame Size
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_FRM_LENGTH(_x)    (0x00005014 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_FRM_LENGTH_ETH_TX_MTU(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_FRM_LENGTH_ETH_TX_MTU_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_FRM_LENGTH_ETH_FRM_LENGTH(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_FRM_LENGTH_ETH_FRM_LENGTH_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRxFifoSections - RX FIFO thresholds
    Bits: 31:16 EthRxSectionEmptyWm(rw) - RX section empty threshold
    Bits: 15:0  EthRxSectionAvailWm(rw) - RX section avail. threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_RX_FIFO_SECTIONS(_x) (0x0000501c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_SECTIONS_ETH_RX_SECTION_EMPTY_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_SECTIONS_ETH_RX_SECTION_EMPTY_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_SECTIONS_ETH_RX_SECTION_AVAIL_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_SECTIONS_ETH_RX_SECTION_AVAIL_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTxFifoSections - TX FIFO thresholds
    Bits: 31:16 EthTxSectionEmptyWm(rw) - TX section empty threshold
    Bits: 15:0  EthTxSectionAvailWm(rw) - TX section avail. threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_TX_FIFO_SECTIONS(_x) (0x00005020 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_SECTIONS_ETH_TX_SECTION_EMPTY_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_SECTIONS_ETH_TX_SECTION_EMPTY_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_SECTIONS_ETH_TX_SECTION_AVAIL_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_SECTIONS_ETH_TX_SECTION_AVAIL_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRxFifoAlmostFE - Not configurable
    Bits: 31:16 EthRxFifoAlmostFullWm(ro) - RX FIFO almost full threshold
    Bits: 15:0  EthRxFifoAlmostEmptyWm(ro) - RX FIFO almost empty threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_RX_FIFO_ALMOST_FE(_x) (0x00005024 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_ALMOST_FE_ETH_RX_FIFO_ALMOST_FULL_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_ALMOST_FE_ETH_RX_FIFO_ALMOST_FULL_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_ALMOST_FE_ETH_RX_FIFO_ALMOST_EMPTY_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_FIFO_ALMOST_FE_ETH_RX_FIFO_ALMOST_EMPTY_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTxFifoAlmostFE - Not configurable
    Bits: 31:16 EthTxFifoAlmostFullWm(ro) - TX FIFO almost full threshold
    Bits: 15:0  EthTxFifoAlmostEmptyWm(ro) - TX FIFO almost empty threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_TX_FIFO_ALMOST_FE(_x) (0x00005028 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_ALMOST_FE_ETH_TX_FIFO_ALMOST_FULL_WM(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_ALMOST_FE_ETH_TX_FIFO_ALMOST_FULL_WM_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_ALMOST_FE_ETH_TX_FIFO_ALMOST_EMPTY_WM(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_FIFO_ALMOST_FE_ETH_TX_FIFO_ALMOST_EMPTY_WM_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthHashTableLoad - optional: Hash Table programming
    Bits:  8    EthHashTableMcEn(wo) - enables (1) or disables (0) multicast frame reception for the entry.
    Bits:  4:0  EthHashTableAddr(wo) - 0 specify the hash table address (code)
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_HASH_TABLE_LOAD(_x) (0x0000502c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_HASH_TABLE_LOAD_ETH_HASH_TABLE_MC_EN BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_HASH_TABLE_LOAD_ETH_HASH_TABLE_ADDR(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_HASH_TABLE_LOAD_ETH_HASH_TABLE_ADDR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioCfgStatus - MDIO Configuration and Status
    Bits: 15:7  EthMdioClockDivisor(ro) - MDIO clock divisor; A value of 5 to 511. The frequency is reg_clk/(2*divisor+1). The reset default is defined by the synthesis package setting MDIO_CLK_DIV. Setting the divisor to 0 disables MDC.
    Bits:  6    EthMdioClause45(ro) - MDIO transaction use Clause 45 format (1) or Clause 22 format (0).
    Bits:  5    EthMdioDisablePreamble(ro) - MDIO transaction preamble disable. Shortens transaction but is non-standard.
    Bits:  4:2  EthMdioHoldTimeSetting(ro) - MDIO hold time setting (reg_clk cycles).
    Bits:  1    EthMdioReadError(ro) - MDIO read error. If set, the last read transaction had no response from a PHY and the data read could be invalid. This can happen, if the PHY address does not match any PHY that is available on the MDIO bus.
    Bits:  0    EthMdioBusy(ro) - MDIO busy. If set, a MDIO transaction is currently ongoing. If cleared, the application can access the other registers.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_MDIO_CFG_STATUS(_x) (0x00005030 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_CLOCK_DIVISOR(_x) (((_x) & 0x1ff) << 7)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_CLOCK_DIVISOR_of(_x) (((_x) >> 7) & 0x1ff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_CLAUSE_45 BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_DISABLE_PREAMBLE BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_HOLD_TIME_SETTING(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_HOLD_TIME_SETTING_of(_x) (((_x) >> 2) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_READ_ERROR BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_CFG_STATUS_ETH_MDIO_BUSY BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioCommand - MDIO Command (PHY and Port Address)
    Bits: 15    EthNormalReadTransaction(wo) - If written with 1, a normal read transaction is initiated.
    Bits: 14    EthReadAddressPostIncrement(wo) - If written with 1, a read with address post-increment will be performed. Post-increment will be performed in the PHY internal address register.
    Bits:  9:5  EthPortAddress(wo) - Port Address
    Bits:  4:0  EthDeviceAddress(wo) - Device Address
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_MDIO_COMMAND(_x)  (0x00005034 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_COMMAND_ETH_NORMAL_READ_TRANSACTION BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_COMMAND_ETH_READ_ADDRESS_POST_INCREMENT BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_COMMAND_ETH_PORT_ADDRESS(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_COMMAND_ETH_PORT_ADDRESS_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_COMMAND_ETH_DEVICE_ADDRESS(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_COMMAND_ETH_DEVICE_ADDRESS_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioData - MDIO Data to write and last Data read
    Bits: 15:0  EthMdioData(rw) - 16-bit data word. When written- Initiates a write transaction to the PHY. The MdioCommand register must have been initialized. The busy status bit will be set immediately and cleared when the write transaction has finished. When read - Returns the data read from the PHY register after a read transaction has been completed (initiated by writing a 1 to Bit 15 or Bit 14 of the MdioCommand register).
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_MDIO_DATA(_x)     (0x00005038 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_DATA_ETH_MDIO_DATA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_DATA_ETH_MDIO_DATA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioRegaddr - MDIO Register Address. Address of register within the PHY device to read from or write to. After writing this register, an address-write transaction will be initiated to set the PHY internal address register to the value given.
    Bits: 15:0  EthMdioRegaddr(wo) - The MdioCommand register must have been initialized before the first write to this register.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_MDIO_REGADDR(_x)  (0x0000503c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_REGADDR_ETH_MDIO_REGADDR(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_MDIO_REGADDR_ETH_MDIO_REGADDR_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthStatus - General Purpose Status
    Bits:  8    EthTxIsIdle(ro) - TX MAC datapath (statemachine) is idle
    Bits:  7    EthRxLinkIntFault(ro) - Special Link Interruption Fault Sequence detected in receive
    Bits:  6    EthRxEmpty(ro) - RX FIFO is empty
    Bits:  5    EthTxEmpty(ro) - TX FIFO is empty
    Bits:  4    EthRxLowP(ro) - Receiving Low Power Idle (LPI)
    Bits:  3    EthTsAvail(w1c) - Transmit Timestamp Available. Indicates that the timestamp of the last transmitted 1588 event frame is available in the register Timestamp. To clear TsAvail, the bit must be written with a '1'.
    Bits:  2    EthPhyLos(ro) - PHY indicates loss-of-signal. Represents value of pin 'phy_los'.
    Bits:  1    EthRxRemFault(ro) - Remote Fault Status. Set to '1' when the MAC detects Rx Remote Fault Sequences on the CGMII receive interface
    Bits:  0    EthRxLocFault(ro) - Local Fault Status. Set to '1' when the MAC detects Rx Local Fault Sequences on the CGMII receive interface.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_STATUS(_x)        (0x00005040 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_TX_IS_IDLE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_RX_LINK_INT_FAULT BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_RX_EMPTY BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_TX_EMPTY BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_RX_LOW_P BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_TS_AVAIL BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_PHY_LOS BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_RX_REM_FAULT BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_STATUS_ETH_RX_LOC_FAULT BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTxIpgLength - TX InterPacketGap configuration
    Bits: 31:16 EthCompensation(rw) - Compensation for PCS inserted markers. Depending on PCS type a value of 16383 (40G) or 20479 (25/50G) must be set.
    Bits:  6:0  EthTxIpgLength(rw) - Number of octets in steps of 4 (XGMII) or 8 (XLGMII). Minimum 8. Value 12 should be set for compliant operation.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_TX_IPG_LENGTH(_x) (0x00005044 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_IPG_LENGTH_ETH_COMPENSATION(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_IPG_LENGTH_ETH_COMPENSATION_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_IPG_LENGTH_ETH_TX_IPG_LENGTH(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TX_IPG_LENGTH_ETH_TX_IPG_LENGTH_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthCreditTrigger - reserved
    Bits:  0    EthCreditTrigger(rw) - Credit-based FIFO only: When written with a 1, RX FIFO reset occurs and credit counter loaded from the InitCredit value.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_CREDIT_TRIGGER(_x) (0x00005048 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CREDIT_TRIGGER_ETH_CREDIT_TRIGGER BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthInitCredit - reserved
    Bits:  7:0  EthInitCredit(rw) - Credit-based FIFO only: Specifies the initial credit value to be loaded.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_INIT_CREDIT(_x)   (0x0000504c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_INIT_CREDIT_ETH_INIT_CREDIT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_INIT_CREDIT_ETH_INIT_CREDIT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthCreditReg - reserved
    Bits:  7:0  EthCredits(ro) - Current credit register value (for debug purpose only).
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_CREDIT_REG(_x)    (0x00005050 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CREDIT_REG_ETH_CREDITS(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_CREDIT_REG_ETH_CREDITS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL01 - Class 0 and 1 pause quanta. When link pause mode is enabled, PauseQuantaCL0 is used.
    Bits: 31:16 EthPauseQuantaCL1(rw) - Value to be sent for the PFC quanta value for that class when a class XOFF is triggered. Each Quanta specifies a 512 bit-time.
    Bits: 15:0  EthPauseQuantaCL0(rw) - PauseQuantaCL0
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_PAUSE_QUANTA_CL01(_x) (0x00005054 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL01_ETH_PAUSE_QUANTA_CL1(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL01_ETH_PAUSE_QUANTA_CL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL01_ETH_PAUSE_QUANTA_CL0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL01_ETH_PAUSE_QUANTA_CL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL23 - Class 2 and 3 pause quanta
    Bits: 31:16 EthPauseQuantaCL3(rw) - PauseQuantaCL3; Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL2(rw) - PauseQuantaCL2
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_PAUSE_QUANTA_CL23(_x) (0x00005058 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL23_ETH_PAUSE_QUANTA_CL3(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL23_ETH_PAUSE_QUANTA_CL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL23_ETH_PAUSE_QUANTA_CL2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL23_ETH_PAUSE_QUANTA_CL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL45 - Class 4 and 5 pause quanta
    Bits: 31:16 EthPauseQuantaCL5(rw) - PauseQuantaCL5; Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL4(rw) - PauseQuantaCL4
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_PAUSE_QUANTA_CL45(_x) (0x0000505c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL45_ETH_PAUSE_QUANTA_CL5(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL45_ETH_PAUSE_QUANTA_CL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL45_ETH_PAUSE_QUANTA_CL4(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL45_ETH_PAUSE_QUANTA_CL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL67 - Class 6 and 7 pause quanta
    Bits: 31:16 EthPauseQuantaCL7(rw) - PauseQuantaCL7; Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL6(rw) - PauseQuantaCL6
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_PAUSE_QUANTA_CL67(_x) (0x00005060 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL67_ETH_PAUSE_QUANTA_CL7(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL67_ETH_PAUSE_QUANTA_CL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL67_ETH_PAUSE_QUANTA_CL6(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_PAUSE_QUANTA_CL67_ETH_PAUSE_QUANTA_CL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL01 - Class 0 and 1 refresh threshold. When link pause mode is enabled, QuantaThreshCL0 is used for refreshing pause frames.
    Bits: 31:16 EthQuantaThreshCL1(rw) - QuantaThreshCL1;When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL0(rw) - QuantaThreshCL0
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_QUANTA_THRESH_CL01(_x) (0x00005064 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL01_ETH_QUANTA_THRESH_CL1(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL01_ETH_QUANTA_THRESH_CL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL01_ETH_QUANTA_THRESH_CL0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL01_ETH_QUANTA_THRESH_CL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL23 - Class 2 and 3 refresh threshold
    Bits: 31:16 EthQuantaThreshCL3(rw) - QuantaThreshCL3; When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL2(rw) - QuantaThreshCL2
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_QUANTA_THRESH_CL23(_x) (0x00005068 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL23_ETH_QUANTA_THRESH_CL3(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL23_ETH_QUANTA_THRESH_CL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL23_ETH_QUANTA_THRESH_CL2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL23_ETH_QUANTA_THRESH_CL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL45 - Class 2 and 3 refresh threshold
    Bits: 31:16 EthQuantaThreshCL5(rw) - QuantaThreshCL5
    Bits: 15:0  EthQuantaThreshCL4(rw) - QuantaThreshCL4
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_QUANTA_THRESH_CL45(_x) (0x0000506c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL45_ETH_QUANTA_THRESH_CL5(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL45_ETH_QUANTA_THRESH_CL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL45_ETH_QUANTA_THRESH_CL4(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL45_ETH_QUANTA_THRESH_CL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL67 - Class 6 and 7 refresh threshold
    Bits: 31:16 EthQuantaThreshCL7(rw) - QuantaThreshCL7
    Bits: 15:0  EthQuantaThreshCL6(rw) - QuantaThreshCL6
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_QUANTA_THRESH_CL_67(_x) (0x00005070 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL_67_ETH_QUANTA_THRESH_CL7(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL_67_ETH_QUANTA_THRESH_CL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL_67_ETH_QUANTA_THRESH_CL6(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_QUANTA_THRESH_CL_67_ETH_QUANTA_THRESH_CL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRxPauseStatus - Current per class received pause status. 0 is used for link pause also.
    Bits:  7:0  EthRxPauseStatus(ro) - Status bit for software to read the current received pause status. One bit for each of the 8 classes.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_RX_PAUSE_STATUS(_x) (0x00005074 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_PAUSE_STATUS_ETH_RX_PAUSE_STATUS(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_RX_PAUSE_STATUS_ETH_RX_PAUSE_STATUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTimestamp - Transmit Timestamp
    Bits: 31:0  EthTimestamp(ro) - Timestamp of the last frame transmitted by the Core that had the ff_tx_ts_frm signal asserted from the user application. Valid when the status bit TsAvail is set to '1'.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_TIMESTAMP(_x)     (0x0000507c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TIMESTAMP_ETH_TIMESTAMP(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_TIMESTAMP_ETH_TIMESTAMP_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthXifMode - Interface Mode Configuration
    Bits:  5    EthOneStepEna(ro) - Enable 1-step capable datapath (if available)
    Bits:  4    EthPauseTimerX8(rw) - Enable Pause Timer Compensation when using external XLGMII/GMII Converter
    Bits:  0    EthXgmii(rw) - Enable XGMII-64 (4byte alignment)
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_ETH_XIF_MODE(_x)      (0x00005080 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_XIF_MODE_ETH_ONE_STEP_ENA BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_XIF_MODE_ETH_PAUSE_TIMER_X8 BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHSEG_ETH_XIF_MODE_ETH_XGMII BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorScratch - Vendor Specific Reg; Scratch Register.
    Bits: 15:0  EthScratch(rw) - Scratch Register; Register address to test read and write operation.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_SCRATCH(_x) (0x00008000 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_SCRATCH_ETH_SCRATCH(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_SCRATCH_ETH_SCRATCH_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorCoreRev - Vendor Specific Reg; Core Revision derived from DEV_VERSION package parameter.
    Bits: 15:0  EthRevision(ro) - Core Design version as defined by DEV_VERSION parameter in PCS package file.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_CORE_REV(_x) (0x00008004 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_CORE_REV_ETH_REVISION(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_CORE_REV_ETH_REVISION_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVlIntvl - Vendor Specific Reg; Set the amount of data between markers. (I.e. distance of markers-1).
    Bits: 15:0  EthMarkerCounter(rw) - A 16-bit value defining the amount of data between markers; (distance of markers-1).
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_INTVL(_x) (0x00008008 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_INTVL_ETH_MARKER_COUNTER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_INTVL_ETH_MARKER_COUNTER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorTxlaneThresh - Vendor Specific Reg; Defines the transmit line decoupling FIFOs almost full threshold.
    Bits: 15:4  EthThresholdUnused(rw) - A 12-bit value unused.
    Bits:  3:0  EthThreshold(rw) - A 4-bit value to define the transmit line decoupling FIFOs almost full threshold; Valid values are 4..9.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_TXLANE_THRESH(_x) (0x0000800c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_TXLANE_THRESH_ETH_THRESHOLD_UNUSED(_x) (((_x) & 0xfff) << 4)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_TXLANE_THRESH_ETH_THRESHOLD_UNUSED_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_TXLANE_THRESH_ETH_THRESHOLD(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_TXLANE_THRESH_ETH_THRESHOLD_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorRxlauiConfig - Vendor Specific Reg; Define Reduced-XLAUI PMA mode using 2 lanes.
    Bits: 15    EthEnaStatus(ro) - N/A.
    Bits: 11:8  EthTxMapLane1(rw) - N/A.
    Bits:  7:4  EthTxMapLane0(rw) - N/A.
    Bits:  3:1  EthReservedWriteableBits(rw) - N/A.
    Bits:  0    EthRxlauiEna(rw) - N/A.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG(_x) (0x00008010 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_ENA_STATUS BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_TX_MAP_LANE_1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_TX_MAP_LANE_1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_TX_MAP_LANE_0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_TX_MAP_LANE_0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_RESERVED_WRITEABLE_BITS(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_RESERVED_WRITEABLE_BITS_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_RXLAUI_CONFIG_ETH_RXLAUI_ENA BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl00 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 0.
    Bits: 15:8  EthM1(rw) - Lane 0 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 0 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_00(_x) (0x00008020 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_00_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_00_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_00_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_00_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl01 - Vendor Specific Reg; Last byte of PCS Virtual Lane 0 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 0 Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_01(_x) (0x00008024 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_01_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_01_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl10 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 1.
    Bits: 15:8  EthM1(rw) - Lane 1 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 1 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_10(_x) (0x00008028 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_10_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_10_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_10_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_10_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl11 - Vendor Specific Reg; Last byte of PCS Virtual Lane 1 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 1 last btye of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_11(_x) (0x0000802c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_11_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_11_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl20 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 2.
    Bits: 15:8  EthM1(rw) - Lane 2 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 2 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_20(_x) (0x00008030 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_20_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_20_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_20_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_20_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl21 - Vendor Specific Reg; Last byte of PCS Virtual Lane 2 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 2 last btye of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_21(_x) (0x00008034 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_21_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_21_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl30 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 3.
    Bits: 15:8  EthM1(rw) - Lane 3 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 3 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_30(_x) (0x00008038 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_30_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_30_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_30_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_30_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl31 - Vendor Specific Reg; Last byte of PCS Virtual Lane 3 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 3 last btye of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_VL_31(_x) (0x0000803c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_31_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_VL_31_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorPcsMode - Vendor Specific Reg; Configure PCS supporting Clause 49 or 82 Encoder/Decoder, MLD.
    Bits:  9    EthStDisableMld(ro) - Current status of MLD setting.
    Bits:  8    EthStEnaClause49(ro) - Current status of Clause 49 setting.
    Bits:  2    EthHiBer25(rw) - When 1 PCS implements 25G Hi-Ber (2ms, 97 errors). When 0 Hi-Ber implements according to EnaClause49
    Bits:  1    EthDisableMld(rw) - When 0 PCS 4-lane MLD function is active; When 1 the MLD function is disabled.
    Bits:  0    EthEnaClause49(rw) - When 0 PCS uses Clause 82 encoder/decoder functions; When 1 PCS uses Clause 49 encoder/decoder functions.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_ETH_CH_PCS_VENDOR_PCS_MODE(_x) (0x00008040 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_PCS_MODE_ETH_ST_DISABLE_MLD BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_PCS_MODE_ETH_ST_ENA_CLAUSE_49 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_PCS_MODE_ETH_HI_BER_25 BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_PCS_MODE_ETH_DISABLE_MLD BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHCHPCSVSSEG_ETH_CH_PCS_VENDOR_PCS_MODE_ETH_ENA_CLAUSE_49 BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanControl - Control Operation
    Bits: 15    EthReset(rwc) - (SC) Soft Reset. If AN is enabled causes restart. Self-Clearing
    Bits: 13    EthNextpageen(rw) - When 1 externded NextPage support is enabled. Must be set to allow exchange of next pages.
    Bits: 12    EthAnenable(rw) - Autonegotiation Enable. When set autonegotiation will begin. All registers must be initialized before.
    Bits:  9    EthAnrestart(rwc) - (SC) Restart Autonegotiation. Self-Clearning.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_CONTROL(_x) (0x0000d000 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_CONTROL_ETH_RESET BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_CONTROL_ETH_NEXTPAGEEN BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_CONTROL_ETH_ANENABLE BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_CONTROL_ETH_ANRESTART BIT(9)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanStatus - Status Information
    Bits:  9    EthParallelDetectFault(ro) - (LH) Parallel detection fault occured, autoneg restarted.
    Bits:  7    EthExtdnextpage(ro) - Indicates next page exchanges are enabled. It asserts as a result of setting KxanControl.13
    Bits:  6    EthPagereceived(ro) - (LH) A DME page has been received.
    Bits:  5    EthAutonegcomplete(ro) - Autonegotiation has completed.
    Bits:  4    EthRemotefault(ro) - not applicable as no fault situation is available. If the remote device indicates a fault situation the base page must be inspected. The bit is 0 always.
    Bits:  3    EthAutonegability(ro) - Always 1 indicating this core is autonegotiation capable.
    Bits:  2    EthLinkstatus(ro) - (LL): Status of signal detect pin.
    Bits:  0    EthLpancapable(ro) - Link Partner is Autonegotiation Capable. Asserts when DME pages seem to be received.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_STATUS(_x) (0x0000d004 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_PARALLEL_DETECT_FAULT BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_EXTDNEXTPAGE BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_PAGERECEIVED BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_AUTONEGCOMPLETE BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_REMOTEFAULT BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_AUTONEGABILITY BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_LINKSTATUS BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_STATUS_ETH_LPANCAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanAbility0 - Ability Word first 16 bits
    Bits: 15    EthNextpage(rw) - Indicates next pages will follow.
    Bits: 14    EthAck(rw) - Acknowledge. The bit is controlled automatically. Should be written with 0 always.
    Bits: 13    EthRemotefault(rw) - Indicate a fault situation to the remote.
    Bits: 12:10 EthPauseability(rw) - Pause ability negotiation
    Bits:  9:5  EthEchoednonce(rw) - Nonce field returned to remote. The field is automatically updated and should be initialized with a random value.
    Bits:  4:0  EthSelector(rw) - constant value 1
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_ABILITY_0(_x) (0x0000d008 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_NEXTPAGE BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_ACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_REMOTEFAULT BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_PAUSEABILITY(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_PAUSEABILITY_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_ECHOEDNONCE(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_ECHOEDNONCE_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_SELECTOR(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_0_ETH_SELECTOR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanAbility1 - Ability Word 2nd 16 bits (31:16)
    Bits: 15:5  EthTechnology(rw) - Ability bits A10 to A0
    Bits:  4:0  EthTxnonce(rw) - Transmitted Nonce. Must be initialized with a random value except 0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_ABILITY_1(_x) (0x0000d00c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_1_ETH_TECHNOLOGY(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_1_ETH_TECHNOLOGY_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_1_ETH_TXNONCE(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_1_ETH_TXNONCE_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanAbility2 - Ability Word last 16 bits (47:32)
    Bits: 15:14 EthFecability(rw) - Indicate FEC(Clause74) availability and request its use.
    Bits: 13:0  EthTechnology(rw) - Ability bits A24 to A11
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_ABILITY_2(_x) (0x0000d010 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_2_ETH_FECABILITY(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_2_ETH_FECABILITY_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_2_ETH_TECHNOLOGY(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_ABILITY_2_ETH_TECHNOLOGY_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanRemAbility0 - Received Ability base page first 16 bits 15:0
    Bits: 15:0  EthRemability(ro) - Bits 15:0 of received base page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_REM_ABILITY_0(_x) (0x0000d014 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_REM_ABILITY_0_ETH_REMABILITY(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_REM_ABILITY_0_ETH_REMABILITY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanRemAbility1 - Received Ability bits 32:16
    Bits: 15:0  EthRemability(ro) - Bits 31:16 of received base page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_REM_ABILITY_1(_x) (0x0000d018 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_REM_ABILITY_1_ETH_REMABILITY(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_REM_ABILITY_1_ETH_REMABILITY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanRemAbility2 - Received Ability bits 47:16
    Bits: 15:0  EthRemability(ro) - Bits 47:32 of received base page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_REM_ABILITY_2(_x) (0x0000d01c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_REM_ABILITY_2_ETH_REMABILITY(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_REM_ABILITY_2_ETH_REMABILITY_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanMsCount - Timebase for millisecond timer.
    Bits: 15:0  EthNumclocks(rw) - Number of register clock periods required to count 1ms time. Higher 16bit of 21bit wide counter. Lower 5 bits are fixed to 0x10.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_KXAN_MS_COUNT(_x) (0x0000d020 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_MS_COUNT_ETH_NUMCLOCKS(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_KXAN_MS_COUNT_ETH_NUMCLOCKS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthAnXnp0 - Next Page Ability Register bits 15:0. Must be written first. Can be written only if the KxanControl next page ability is enabled.
    Bits: 15:0  EthNextpage(rw) - Bits 15:0 of Next Page to transmit.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_AN_XNP_0(_x) (0x0000d024 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_NEXTPAGE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_AN_XNP_0_ETH_NEXTPAGE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthAnXnp1 - Next Page Abilities bits 31:16. Can be written only if the KxanControl next page ability is enabled.
    Bits: 15:0  EthNextpage(rw) - Bits 31:16 of Next Page to transmit.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_AN_XNP_1(_x) (0x0000d028 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_AN_XNP_1_ETH_NEXTPAGE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_AN_XNP_1_ETH_NEXTPAGE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthAnXnp2 - Next Page Abilities bits 47:32. This register must be written last and transfer the data into the transmit register triggering DME page transmission. Can be written only if the KxanControl next page ability is enabled.
    Bits: 15:0  EthNextpage(rw) - Bits 47:32 of Next Page to transmit.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_AN_XNP_2(_x) (0x0000d02c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_AN_XNP_2_ETH_NEXTPAGE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_AN_XNP_2_ETH_NEXTPAGE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthLpAnXnp0 - Received Next Page from Link Partner bits 15:0.
    Bits: 15:0  EthRemnextpage(ro) - Bits 15:0 of received Next Page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_LP_AN_XNP_0(_x) (0x0000d030 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_LP_AN_XNP_0_ETH_REMNEXTPAGE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_LP_AN_XNP_0_ETH_REMNEXTPAGE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthLpAnXnp1 - Received Next Page from Link Partner bits 31:16.
    Bits: 15:0  EthRemnextpage(ro) - Bits 32:16 of received Next Page
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_LP_AN_XNP_1(_x) (0x0000d034 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_LP_AN_XNP_1_ETH_REMNEXTPAGE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_LP_AN_XNP_1_ETH_REMNEXTPAGE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthLpAnXnp2 - Received Next Page from Link Partner bits 47:32.
    Bits: 15:0  EthRemnextpage(ro) - Bits 47:32 of received Next Page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_LP_AN_XNP_2(_x) (0x0000d038 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_LP_AN_XNP_2_ETH_REMNEXTPAGE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_LP_AN_XNP_2_ETH_REMNEXTPAGE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthBpEthStatus - Resolved Ability from Base-Page
    Bits: 15    EthTechnologyA12(ro) - Resolved Technology A12
    Bits: 14    EthTechnologyA11(ro) - Resolved Technology A11
    Bits: 13    EthTechnologyA10(ro) - Resolved Technology A10
    Bits: 12    EthTechnologyA9(ro) - Resolved Technology A9
    Bits: 11    EthTechnologyA8(ro) - Resolved Technology A8 (100G CR4)
    Bits: 10    EthTechnologyA7(ro) - Resolved Technology A7 (100G KR4)
    Bits:  9    EthTechnologyA6(ro) - Resolved Technology A6 (100G KP4)
    Bits:  8    EthTechnologyA5(ro) - Resolved Technology A5 (100G CR10)
    Bits:  7    EthBpethstatusrsv(ro) - reserved
    Bits:  6    EthTechnologyA4(ro) - Resolved Technology A4 (40G CR4)
    Bits:  5    EthTechnologyA3(ro) - Resolved technology A3 (40G KR4)
    Bits:  4    EthFec(ro) - Resolved FEC(74) should be enabled.
    Bits:  3    EthTechnologyA2(ro) - Resolved Technology A2 (10G KR)
    Bits:  2    EthTechnologyA1(ro) - Resolved Technology A1 (KX4)
    Bits:  1    EthTechnologyA0(ro) - Resolved Technology A0 (1G KX)
    Bits:  0    EthPresent(ro) - Always 1 indicating existence of the register.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_ETH_BP_ETH_STATUS(_x) (0x0000d03c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A12 BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A11 BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A10 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A9 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A8 BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A7 BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A6 BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A5 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_BPETHSTATUSRSV BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A4 BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A3 BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_FEC BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A2 BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A1 BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_TECHNOLOGY_A0 BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHAUTONEGSEG_ETH_BP_ETH_STATUS_ETH_PRESENT BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrControl - Control Operation
    Bits:  1    EthTrainingenable(rw) - Set to 1 to enable the Base-R startup protocol. Should be set to 0 to disable the Base-R startup protocol.
    Bits:  0    EthRestarttraining(rw) - Self-Clearing bit, should be set to 1 to restart the Base-R startup protocol. This register should always be written with Restarttraining bit set to 1.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_CONTROL(_x) (0x0000d040 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_CONTROL_ETH_TRAININGENABLE BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_CONTROL_ETH_RESTARTTRAINING BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrStatus - Status Information
    Bits: 15    EthSignaldetection(ro) - When 1 indicates training process is complete (signal detect is now propagating to the PCS allowig it to establish a link).
    Bits:  3    EthTrainingfailure(ro) - When 1 indicates that Training failure has been detected.
    Bits:  2    EthStatus(ro) - When 0 indicates that the startup protocol is completed. When 1 indicates that the startup protocol is in progress.
    Bits:  1    EthFramelock(ro) - When 1 indicates that Training Frame delineation is detected.
    Bits:  0    EthReceiverstatus(rw) - When set 0, indicates that the receiver training is proceeding. When written with 1 by the application, indicates that the receiver is trained and is ready to receive data.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_STATUS(_x) (0x0000d044 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_STATUS_ETH_SIGNALDETECTION BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_STATUS_ETH_TRAININGFAILURE BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_STATUS_ETH_STATUS BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_STATUS_ETH_FRAMELOCK BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_STATUS_ETH_RECEIVERSTATUS BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLpCoef - Link Partner Coefficient Update request received.
    Bits: 15:0  EthCoeffupdate(ro) - 16bit coefficient update information received from link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_LP_COEF(_x) (0x0000d048 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LP_COEF_ETH_COEFFUPDATE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LP_COEF_ETH_COEFFUPDATE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLpStat - Link Partner Status Report received.
    Bits: 15:0  EthStatusreport(ro) - 16bit Status report received from link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_LP_STAT(_x) (0x0000d04c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LP_STAT_ETH_STATUSREPORT(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LP_STAT_ETH_STATUSREPORT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLdCoef - Local Device Coefficient Update request to send.
    Bits: 15:0  EthCoeffupdate(rw) - 16bit Coefficient Update Request to send to link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_LD_COEF(_x) (0x0000d050 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LD_COEF_ETH_COEFFUPDATE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LD_COEF_ETH_COEFFUPDATE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLdStat - Local Device Status Report to send.
    Bits: 15:0  EthStatusreport(rw) - 16bit Status report field to send to the link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_LD_STAT(_x) (0x0000d054 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LD_STAT_ETH_STATUSREPORT(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_LD_STAT_ETH_STATUSREPORT_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrTrainingPattern - Select PRBS11 polynomial and define seed to use for transmitted training pattern.
    Bits: 13:11 EthPrbsselect(rw) - Select which PRBS11 polynomial should be used for the training pattern within transmitted training frames.
    Bits: 10:0  EthSeed(rw) - Seed value to load into PRBS11 at begin of training pattern.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_TRAINING_PATTERN(_x) (0x0000d060 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_TRAINING_PATTERN_ETH_PRBSSELECT(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_TRAINING_PATTERN_ETH_PRBSSELECT_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_TRAINING_PATTERN_ETH_SEED(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_TRAINING_PATTERN_ETH_SEED_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrRxPattern - Configure receive training pattern checker function.
    Bits: 14    EthIgnorefirstdata(rw) - If set 1 the checker ignores the first data of the training pattern to allow loading the prbs register from the incoming data. If set 0 the seed value is used and check begins at the first bit.
    Bits: 13:11 EthPrbsselect(rw) - Select which PRBS11 polynomial should be used.
    Bits: 10:0  EthSeed(rw) - Seed value to load into PRBS11 checker register at begin of every training frame.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_RX_PATTERN(_x) (0x0000d064 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ETH_IGNOREFIRSTDATA BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ETH_PRBSSELECT(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ETH_PRBSSELECT_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ETH_SEED(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ETH_SEED_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrRxPatternErr - Counter for PRBS11 errors detected by receive pattern checker function.
    Bits: 15:0  EthErrors(ro) - Counter for PRBS11 errors found in received training frames by the receive pattern checker. Counter saturates at 0xffff and clears on read.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_RX_PATTERN_ERR(_x) (0x0000d068 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ERR_ETH_ERRORS(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_ERR_ETH_ERRORS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrRxPatternBegin - Holds first 16 bits from the training pattern of received training frames.
    Bits: 15:0  EthPatternbegin(ro) - Holds the first 16 bits from the training pattern of received training frames. Bit 15 holds the first bit received.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_ETH_LT_KR_RX_PATTERN_BEGIN(_x) (0x0000d06c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_BEGIN_ETH_PATTERNBEGIN(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHANLT_MACETHFECLTSEG_ETH_LT_KR_RX_PATTERN_BEGIN_ETH_PATTERNBEGIN_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiControl - Control Register.
    Bits: 15    EthReset(rwc) - Reset the datapath
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_CONTROL(_x) (0x0000e800 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_CONTROL_ETH_RESET BIT(15)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiStatus - Status information.
    Bits:  2    EthLinkStatus(ro) - When 1, indicates receive link up; When 1 indicates PCS receive link is or was down (latching low).
    Bits:  0    EthLinkStatusRealtime(ro) - Current link status
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_STATUS(_x) (0x0000e804 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_STATUS_ETH_LINK_STATUS BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_STATUS_ETH_LINK_STATUS_REALTIME BIT(0)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiPortsEna - Number of active ports to use.
    Bits:  4:0  EthNumports(rw) - Define number of ports to multiplex - up to 8
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_PORTS_ENA(_x) (0x0000e808 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_PORTS_ENA_ETH_NUMPORTS(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_PORTS_ENA_ETH_NUMPORTS_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVlIntvl - Set the amount of data between markers.
    Bits: 15:0  EthMarkerCounter(rw) - A 16-bit value defining the amount of port cycles between markers.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_INTVL(_x) (0x0000e80c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_INTVL_ETH_MARKER_COUNTER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_INTVL_ETH_MARKER_COUNTER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiAlignMatchErr - Alignment Marker mismatch error counter.
    Bits: 15:0  EthAlignmatcherr(ro) - Number of mismatches. Saturating counter
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_ALIGN_MATCH_ERR(_x) (0x0000e810 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_ALIGN_MATCH_ERR_ETH_ALIGNMATCHERR(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_ALIGN_MATCH_ERR_ETH_ALIGNMATCHERR_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl0Byte3 - Informal extracted 3rd byte from marker word.
    Bits:  7:0  EthVl0byte3(ro) - The 3rd byte of the marker word received at link startup.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_0BYTE_3(_x) (0x0000e814 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_0BYTE_3_ETH_VL_0BYTE_3(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_0BYTE_3_ETH_VL_0BYTE_3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl00 - Marker pattern for Block 0.
    Bits: 15:8  EthM1(rw) - Block 0 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 0 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_00(_x) (0x0000e840 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_00_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_00_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_00_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_00_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl01 - Last byte of Block 0 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 0 Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_01(_x) (0x0000e844 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_01_ETH_M2_EXTRA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_01_ETH_M2_EXTRA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_01_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_01_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl10 - Marker pattern for Block 1.
    Bits: 15:8  EthM1(rw) - Block 1 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 1 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_10(_x) (0x0000e848 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_10_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_10_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_10_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_10_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl11 - Last byte of Block 1 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 1 last byte of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_11(_x) (0x0000e84c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_11_ETH_M2_EXTRA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_11_ETH_M2_EXTRA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_11_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_11_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl20 - Marker pattern for Block 2.
    Bits: 15:8  EthM1(rw) - Block 2 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 2 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_20(_x) (0x0000e850 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_20_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_20_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_20_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_20_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl21 - Last byte of Block 2 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 2 last byte of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_21(_x) (0x0000e854 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_21_ETH_M2_EXTRA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_21_ETH_M2_EXTRA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_21_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_21_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl30 - Marker pattern for Block 3.
    Bits: 15:8  EthM1(rw) - Block 3 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 3 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_30(_x) (0x0000e858 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_30_ETH_M1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_30_ETH_M1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_30_ETH_M0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_30_ETH_M0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl31 - Last byte of Block 3 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 3 last byte of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_ETH_USXGMII_VL_31(_x) (0x0000e85c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_31_ETH_M2_EXTRA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_31_ETH_M2_EXTRA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_31_ETH_M2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETHUSXGMII_ETH_USXGMII_VL_31_ETH_M2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPcsCtl - Control register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPcsCtl - Control register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPcsCtl - Control register
    Bits: 15    EthPcsReset(wo) - PCS soft-reset command; self-clearing
    Bits: 14    EthPhyLoopback(rw) - Enable loopback
    Bits: 13    EthSgmiiSpeedSel0(ro) - Speed Selection Indication; always 0
    Bits: 12    EthAutoNegEnable(rw) - Autonegotiation enable
    Bits: 11    EthPowerDown(rw) - Enable powerdown state, if supported.
    Bits: 10    EthIsolate(rw) - Set PCS isolate mode; Controls toplevel pin only, no internal function.
    Bits:  9    EthRestartAutoNeg(rw) - Restart Autonegotiation
    Bits:  8    EthDuplexMode(ro) - Indicate full-duplex operation; always 1
    Bits:  6    EthSgmiiSpeedSel1(ro) - Speed Selection Indication; always 1
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_PCS_CTL 0x0000f000
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_PCS_CTL 0x0000f080
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_PCS_CTL 0x0000f100
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_PCS_CTL 0x0000f180
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_PCS_CTL 0x0000f200
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_PCS_CTL 0x0000f280
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_PCS_CTL 0x0000f300
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_PCS_CTL 0x0000f380
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_PCS_CTL 0x0000f800
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_PCS_CTL 0x0000f880
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_PCS_RESET BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_PHY_LOOPBACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_SGMII_SPEED_SEL_0 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_AUTO_NEG_ENABLE BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_POWER_DOWN BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_ISOLATE BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_RESTART_AUTO_NEG BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_DUPLEX_MODE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSCTL_ETH_SGMII_SPEED_SEL_1 BIT(6)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPcsStatus - Status indications
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPcsStatus - Status indications
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPcsStatus - Status indications
    Bits:  5    EthAutoNegComplete(ro) - Autonegotiation completed indication
    Bits:  3    EthAutoNegAbility(ro) - Autonegotiation ability; always 1
    Bits:  2    EthLinkStatus(ro) - Indicate link status; latch-low
    Bits:  0    EthExtCapable(ro) - Indicate extended register support; always 1
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_PCS_STATUS 0x0000f004
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_PCS_STATUS 0x0000f084
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_PCS_STATUS 0x0000f104
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_PCS_STATUS 0x0000f184
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_PCS_STATUS 0x0000f204
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_PCS_STATUS 0x0000f284
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_PCS_STATUS 0x0000f304
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_PCS_STATUS 0x0000f384
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_PCS_STATUS 0x0000f804
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_PCS_STATUS 0x0000f884
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSSTATUS_ETH_AUTO_NEG_COMPLETE BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSSTATUS_ETH_AUTO_NEG_ABILITY BIT(3)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSSTATUS_ETH_LINK_STATUS BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPCSSTATUS_ETH_EXT_CAPABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
    Bits: 15:0  EthPhyId(ro) - PHY Identifier from package file parameter PHY_IDENTIFIER lower 16 bits.
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_PHY_IDENT_0 0x0000f008
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_PHY_IDENT_0 0x0000f088
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_PHY_IDENT_0 0x0000f108
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_PHY_IDENT_0 0x0000f188
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_PHY_IDENT_0 0x0000f208
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_PHY_IDENT_0 0x0000f288
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_PHY_IDENT_0 0x0000f308
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_PHY_IDENT_0 0x0000f388
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_PHY_IDENT_0 0x0000f808
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_PHY_IDENT_0 0x0000f888
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPHYIDENT0_ETH_PHY_ID(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPHYIDENT0_ETH_PHY_ID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
    Bits: 15:0  EthPhyId(ro) - PHY Identifier from package file parameter PHY_IDENTIFIER upper 16 bits.
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_PHY_IDENT_1 0x0000f00c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_PHY_IDENT_1 0x0000f08c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_PHY_IDENT_1 0x0000f10c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_PHY_IDENT_1 0x0000f18c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_PHY_IDENT_1 0x0000f20c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_PHY_IDENT_1 0x0000f28c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_PHY_IDENT_1 0x0000f30c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_PHY_IDENT_1 0x0000f38c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_PHY_IDENT_1 0x0000f80c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_PHY_IDENT_1 0x0000f88c
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPHYIDENT1_ETH_PHY_ID(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPHYIDENT1_ETH_PHY_ID_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
    Bits: 15    EthNextPageCapable(rw) - Next Page support; SGMII:=reserved
    Bits: 14    EthAck(ro) - Acknowledge during autonegotiation
    Bits: 13    EthRF2(rw) - Remote fault 2; SGMII:=reserved
    Bits: 12    EthRF1(rw) - Remote fault 1; SGMII:=reserved
    Bits: 11:9  EthAbilityRsv9(rw) - reserved; SGMII:=reserved
    Bits:  8    EthPS2(rw) - Pause Support 2; SGMII:=EEE clock stop enable to PHY
    Bits:  7    EthPS1(rw) - Pause Support 1; SGMII:=reserved
    Bits:  6    EthHalfDuplex(rw) - Indicate half-duplex support; SGMII:=reserved
    Bits:  5    EthFullDuplex(rw) - Indicate full-duplex support; SGMII:=reserved
    Bits:  4:0  EthAbilityRsv05(rw) - reserved; SGMII:=set to 1 to indicate SGMII to PHY
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_DEV_ABILITY 0x0000f010
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_DEV_ABILITY 0x0000f090
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_DEV_ABILITY 0x0000f110
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_DEV_ABILITY 0x0000f190
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_DEV_ABILITY 0x0000f210
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_DEV_ABILITY 0x0000f290
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_DEV_ABILITY 0x0000f310
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_DEV_ABILITY 0x0000f390
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_DEV_ABILITY 0x0000f810
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_DEV_ABILITY 0x0000f890
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_NEXT_PAGE_CAPABLE BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_ACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_RF2 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_RF1 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_ABILITY_RSV_9(_x) (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_ABILITY_RSV_9_of(_x) (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_PS2 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_PS1 BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_HALF_DUPLEX BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_FULL_DUPLEX BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_ABILITY_RSV_05(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDEVABILITY_ETH_ABILITY_RSV_05_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
    Bits: 15    EthNextPageCapable(ro) - Next Page support; SGMII:=Copper Link Status from PHY
    Bits: 14    EthAck(ro) - Acknowledge during autonegotiation
    Bits: 13    EthRF2(ro) - Remote fault 2; SGMII:=reserved
    Bits: 12    EthRF1(ro) - Remote fault 1; SGMII:=Copper DuplexMode status from PHY
    Bits: 11:10 EthPAbilityRsv10(ro) - reserved; SGMII:=Copper Speed indication from PHY
    Bits:  9    EthPAbilityRsv9(ro) - reserved; SGMII:=EEE capability from PHY
    Bits:  8    EthPS2(ro) - Pause Support 2; SGMII:=EEE clock stop capability from PHY
    Bits:  7    EthPS1(ro) - Pause Support 1; SGMII:=reserved
    Bits:  6    EthHalfDuplex(ro) - Indicate half-duplex support; SGMII:=reserved
    Bits:  5    EthFullDuplex(ro) - Indicate full-duplex support; SGMII:=reserved
    Bits:  4:0  EthPAbilityRsv05(ro) - reserved; SGMII:=1
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_PARTNER_ABILITY 0x0000f014
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_PARTNER_ABILITY 0x0000f094
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_PARTNER_ABILITY 0x0000f114
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_PARTNER_ABILITY 0x0000f194
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_PARTNER_ABILITY 0x0000f214
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_PARTNER_ABILITY 0x0000f294
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_PARTNER_ABILITY 0x0000f314
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_PARTNER_ABILITY 0x0000f394
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_PARTNER_ABILITY 0x0000f814
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_PARTNER_ABILITY 0x0000f894
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_NEXT_PAGE_CAPABLE BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_ACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_RF2 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_RF1 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PABILITY_RSV_10(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PABILITY_RSV_10_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PABILITY_RSV_9 BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PS2 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PS1 BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_HALF_DUPLEX BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_FULL_DUPLEX BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PABILITY_RSV_05(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIPARTNERABILITY_ETH_PABILITY_RSV_05_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiAnExpansion - Autonegotiation Expansion Register
    Bits:  2    EthNextPageAble(ro) - Indicate PCS supports next page exchange for autonegotiation
    Bits:  1    EthLatchedHiPageRcvd(ro) - Autoneg page received indication; latch-high
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_AN_EXPANSION 0x0000f018
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_AN_EXPANSION 0x0000f098
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_AN_EXPANSION 0x0000f118
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_AN_EXPANSION 0x0000f198
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_AN_EXPANSION 0x0000f218
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_AN_EXPANSION 0x0000f298
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_AN_EXPANSION 0x0000f318
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_AN_EXPANSION 0x0000f398
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_AN_EXPANSION 0x0000f818
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_AN_EXPANSION 0x0000f898
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIANEXPANSION_ETH_NEXT_PAGE_ABLE BIT(2)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIANEXPANSION_ETH_LATCHED_HI_PAGE_RCVD BIT(1)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiNpTx - Next Page data to transmit
    Bits: 15    EthNextPageCapable(rw) - Next Pages to follow indication
    Bits: 14    EthAck(rw) - Acknowledge during page exchange
    Bits: 13    EthMp(rw) - Message Next Page type identification
    Bits: 12    EthAck2(rw) - Next Page data acknowledge indication
    Bits: 11    EthToggle(rw) - Next Page toggle handshaking bit
    Bits: 10:0  EthData(rw) - Next Page data
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_NP_TX 0x0000f01c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_NP_TX 0x0000f09c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_NP_TX 0x0000f11c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_NP_TX 0x0000f19c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_NP_TX 0x0000f21c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_NP_TX 0x0000f29c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_NP_TX 0x0000f31c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_NP_TX 0x0000f39c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_NP_TX 0x0000f81c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_NP_TX 0x0000f89c
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_NEXT_PAGE_CAPABLE BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_ACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_MP BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_ACK_2 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_TOGGLE BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_DATA(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIINPTX_ETH_DATA_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLpNpRx - Received Next Page data from link partner
    Bits: 15    EthNextPageCapable(ro) - Next Pages to follow indication
    Bits: 14    EthAck(ro) - Acknowledge during page exchange
    Bits: 13    EthMp(ro) - Message Next Page type identification
    Bits: 12    EthAck2(ro) - Next Page data acknowledge indication
    Bits: 11    EthToggle(ro) - Next Page toggle handshaking bit
    Bits: 10:0  EthData(ro) - Next Page data
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_LP_NP_RX 0x0000f020
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_LP_NP_RX 0x0000f0a0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_LP_NP_RX 0x0000f120
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_LP_NP_RX 0x0000f1a0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_LP_NP_RX 0x0000f220
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_LP_NP_RX 0x0000f2a0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_LP_NP_RX 0x0000f320
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_LP_NP_RX 0x0000f3a0
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_LP_NP_RX 0x0000f820
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_LP_NP_RX 0x0000f8a0
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_NEXT_PAGE_CAPABLE BIT(15)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_ACK BIT(14)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_MP BIT(13)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_ACK_2 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_TOGGLE BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_DATA(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILPNPRX_ETH_DATA_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiScratch - General Purpose Test register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiScratch - General Purpose Test register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiScratch - General Purpose Test register
    Bits: 15:0  EthScratch(rw) - Arbitrary value for read/write test
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_SCRATCH 0x0000f040
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_SCRATCH 0x0000f0c0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_SCRATCH 0x0000f140
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_SCRATCH 0x0000f1c0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_SCRATCH 0x0000f240
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_SCRATCH 0x0000f2c0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_SCRATCH 0x0000f340
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_SCRATCH 0x0000f3c0
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_SCRATCH 0x0000f840
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_SCRATCH 0x0000f8c0
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIISCRATCH_ETH_SCRATCH(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIISCRATCH_ETH_SCRATCH_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiRev - Core Revision
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiRev - Core Revision
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiRev - Core Revision
    Bits: 15:0  EthRevision(ro) - from package parameter DEV_VERSION
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_REV 0x0000f044
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_REV 0x0000f0c4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_REV 0x0000f144
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_REV 0x0000f1c4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_REV 0x0000f244
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_REV 0x0000f2c4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_REV 0x0000f344
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_REV 0x0000f3c4
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_REV 0x0000f844
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_REV 0x0000f8c4
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIREV_ETH_REVISION(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIREV_ETH_REVISION_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
    Bits: 15:1  EthLinkTimer15to1(rw) - Bits 15:1 of link timer value
    Bits:  0    EthLinkTimer0(ro) - Bit 0 of link timer value; not writeable and always 0
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_LINK_TIMER_LO 0x0000f048
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_LINK_TIMER_LO 0x0000f0c8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_LINK_TIMER_LO 0x0000f148
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_LINK_TIMER_LO 0x0000f1c8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_LINK_TIMER_LO 0x0000f248
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_LINK_TIMER_LO 0x0000f2c8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_LINK_TIMER_LO 0x0000f348
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_LINK_TIMER_LO 0x0000f3c8
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_LINK_TIMER_LO 0x0000f848
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_LINK_TIMER_LO 0x0000f8c8
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILINKTIMERLO_ETH_LINK_TIMER_15TO_1(_x) (((_x) & 0x7fff) << 1)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILINKTIMERLO_ETH_LINK_TIMER_15TO_1_of(_x) (((_x) >> 1) & 0x7fff)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILINKTIMERLO_ETH_LINK_TIMER_0 BIT(0)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
    Bits:  4:0  EthLinkTimer20to16(rw) - Link timer uppest 5 bits of 21bit timer
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_LINK_TIMER_HI 0x0000f04c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_LINK_TIMER_HI 0x0000f0cc
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_LINK_TIMER_HI 0x0000f14c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_LINK_TIMER_HI 0x0000f1cc
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_LINK_TIMER_HI 0x0000f24c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_LINK_TIMER_HI 0x0000f2cc
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_LINK_TIMER_HI 0x0000f34c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_LINK_TIMER_HI 0x0000f3cc
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_LINK_TIMER_HI 0x0000f84c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_LINK_TIMER_HI 0x0000f8cc
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILINKTIMERHI_ETH_LINK_TIMER_20TO_16(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIILINKTIMERHI_ETH_LINK_TIMER_20TO_16_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiIfMode - SGMII Mode Control
    Bits:  9    EthIfSeqEna(rw) - Enables encoding of Sequence ordered_set symbols over 2.5GBase-X as specified in Clause 127.
    Bits:  8    EthIfModeXgmiiBasex(rw) - MAC interface must operate in XGMII and conversion to the Base-X Encoding/Decoding is following 802.3cb Clause 127 rules.
    Bits:  7    EthIfRxPreambleSync(rw) - Receive GMII stream from the 1000Base-X decoder is assumed to be synchronized to 10B idle code (disable SFD search)
    Bits:  6    EthIfTxPreambleSync(rw) - Transmit GMII stream entering the 1000Base-X encoder is synchronized to 10B idle code group
    Bits:  5    EthIfRsv5(rw) - reserved; writeable for backward compatibility; write 0 always
    Bits:  4    EthSgmiiHDuplex(rw) - Set SGMII half-duplex mode when not using autonegotiation
    Bits:  3:2  EthSgmiiSpeed(rw) - Set SGMII speed when not using autonegotiation
    Bits:  1    EthUseSgmiiAn(rw) - Use the SGMII autonegotiation results to set SGMII speed
    Bits:  0    EthSgmiiEnable(rw) - Enable SGMII mode
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_IF_MODE 0x0000f050
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_IF_MODE 0x0000f0d0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_IF_MODE 0x0000f150
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_IF_MODE 0x0000f1d0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_IF_MODE 0x0000f250
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_IF_MODE 0x0000f2d0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_IF_MODE 0x0000f350
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_IF_MODE 0x0000f3d0
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_IF_MODE 0x0000f850
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_IF_MODE 0x0000f8d0
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_IF_SEQ_ENA BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_IF_MODE_XGMII_BASEX BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_IF_RX_PREAMBLE_SYNC BIT(7)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_IF_TX_PREAMBLE_SYNC BIT(6)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_IF_RSV_5 BIT(5)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_SGMII_HDUPLEX BIT(4)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_SGMII_SPEED(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_SGMII_SPEED_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_USE_SGMII_AN BIT(1)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIIFMODE_ETH_SGMII_ENABLE BIT(0)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
    Bits: 15:0  EthDecodeErrors(ro) - RX 10B/8B code errors; May not be supported in all Core variants; Counter is not accurate and intended only to be of help during test/debug; Clears when writing PcsCtl.15 or PcsCtl.10 with 1.
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_DECODE_ERRORS 0x0000f054
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_DECODE_ERRORS 0x0000f0d4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_DECODE_ERRORS 0x0000f154
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_DECODE_ERRORS 0x0000f1d4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_DECODE_ERRORS 0x0000f254
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_DECODE_ERRORS 0x0000f2d4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_DECODE_ERRORS 0x0000f354
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_DECODE_ERRORS 0x0000f3d4
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_DECODE_ERRORS 0x0000f854
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_DECODE_ERRORS 0x0000f8d4
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDECODEERRORS_ETH_DECODE_ERRORS(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIDECODEERRORS_ETH_DECODE_ERRORS_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
    Bits: 12    EthUsxgmii25(rw) - Set replication factor of 2.5
    Bits:  9:0  EthUsxgmiirep(rw) - Set replication factor for integer replication
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_ETH_SGMII_USXGMII_REP 0x0000f058
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_ETH_SGMII_USXGMII_REP 0x0000f0d8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_ETH_SGMII_USXGMII_REP 0x0000f158
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_ETH_SGMII_USXGMII_REP 0x0000f1d8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_ETH_SGMII_USXGMII_REP 0x0000f258
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_ETH_SGMII_USXGMII_REP 0x0000f2d8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_ETH_SGMII_USXGMII_REP 0x0000f358
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_ETH_SGMII_USXGMII_REP 0x0000f3d8
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_ETH_SGMII_USXGMII_REP 0x0000f858
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_ETH_SGMII_USXGMII_REP 0x0000f8d8
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIUSXGMIIREP_ETH_USXGMII_25 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIUSXGMIIREP_ETH_USXGMIIREP(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETHLPCS8CHSGMIIPCS0_ETHSGMIIUSXGMIIREP_ETH_USXGMIIREP_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiGMODE - Global Mode Configuration.
    Bits: 11    EthUsgmii_scramble_enable(rw) - Enable x58 scrambler/descrambler for USXGMII
    Bits: 10    EthUsgmii8_enable(rw) - Enable USXGMII of all 8 channels over serdes lane 0
    Bits:  9    EthQsgmii_1_enable(rw) - Enable QSGMII for Channels 4..7 over serdes lane 4
    Bits:  8    EthQsgmii_0_enable(rw) - Enable QSGMII for Channels 0..3 over serdes lane 0
    Bits:  7:0  EthLpcs_enable(rw) - per channel 1G PCS enable
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_ETH_LPCS_8CH_SGMII_GMODE 0x0000f3e0
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GMODE_ETH_USGMII_SCRAMBLE_ENABLE BIT(11)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GMODE_ETH_USGMII_8_ENABLE BIT(10)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GMODE_ETH_QSGMII_1_ENABLE BIT(9)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GMODE_ETH_QSGMII_0_ENABLE BIT(8)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GMODE_ETH_LPCS_ENABLE(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GMODE_ETH_LPCS_ENABLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS - Global Mode Configuration.
    Bits: 15:8  EthGan_done_status(ro) - Per channel autonegotiation done status
    Bits:  7:0  EthGsync_status(ro) - Per channel 1G PCS link status
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_ETH_LPCS_8CH_SGMII_GSTATUS 0x0000f3e4
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GSTATUS_ETH_GAN_DONE_STATUS(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GSTATUS_ETH_GAN_DONE_STATUS_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GSTATUS_ETH_GSYNC_STATUS(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_GSTATUS_ETH_GSYNC_STATUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiCFG_CLOCK_RATE - Global LPCS clock rate setting.
    Bits:  3:0  EthCfgclockrate(rw) - Define Clock rate divider
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_ETH_LPCS_8CH_SGMII_CFG_CLOCK_RATE 0x0000f3f0
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_CFG_CLOCK_RATE_ETH_CFGCLOCKRATE(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_CFG_CLOCK_RATE_ETH_CFGCLOCKRATE_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiUSXGMII_ENABLE_INDICATION - Informal indication of USXGMII channel replicator being enabled.
    Bits:  7:0  EthUsxgmii_enable_ind(ro) - Per channel indication of USXGMII being enabled
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_ETH_LPCS_8CH_SGMII_USXGMII_ENABLE_INDICATION 0x0000f3f4
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_USXGMII_ENABLE_INDICATION_ETH_USXGMII_ENABLE_IND(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH8CHSGMII_ETH_LPCS_8CH_SGMII_USXGMII_ENABLE_INDICATION_ETH_USXGMII_ENABLE_IND_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiGMODE - Global Mode Configuration.
    Bits:  1:0  EthLpcs_enable(rw) - per channel 1G PCS enable
*/
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_ETH_LPCS_2CH_SGMII_GMODE 0x0000f8e0
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_GMODE_ETH_LPCS_ENABLE(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_GMODE_ETH_LPCS_ENABLE_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS - Global Mode Configuration.
    Bits:  9:8  EthGan_done_status(ro) - Per channel autonegotiation done status
    Bits:  1:0  EthGsync_status(ro) - Per channel 1G PCS link status
*/
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_ETH_LPCS_2CH_SGMII_GSTATUS 0x0000f8e4
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_GSTATUS_ETH_GAN_DONE_STATUS(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_GSTATUS_ETH_GAN_DONE_STATUS_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_GSTATUS_ETH_GSYNC_STATUS(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_GSTATUS_ETH_GSYNC_STATUS_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiCFG_CLOCK_RATE - Global LPCS clock rate setting.
    Bits:  3:0  EthCfgclockrate(rw) - Define Clock rate divider
*/
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_ETH_LPCS_2CH_SGMII_CFG_CLOCK_RATE 0x0000f8f0
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_CFG_CLOCK_RATE_ETH_CFGCLOCKRATE(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ETH_MACETH2CHSGMII_ETH_LPCS_2CH_SGMII_CFG_CLOCK_RATE_ETH_CFGCLOCKRATE_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacCoreGasketReg[10] - Mac Gasket Memory Control Register
    Bits: 14    MacMemCtrlBC2(rw) - Mac Cores Memory Control BC2.
    Bits: 13    MacMemCtrlBC1(rw) - Mac Cores Memory Control BC1.
    Bits: 12    MacMemCtrlTest1B(rw) - Mac Cores Memory Control TEST1B.
    Bits: 11    MacMemCtrlTest1A(rw) - Mac Cores Memory Control TEST1A/TEST1.
    Bits: 10    MacMemCtrlRMEB(rw) - Mac Cores Memory Control RMEB/RME.
    Bits:  9:8  MacMemCtrlRA(rw) - Mac Cores Memory Control RA.
    Bits:  7:4  MacMemCtrlRMB(rw) - Mac Cores Memory Control RMB.
    Bits:  3:0  MacMemCtrlRMA(rw) - Mac Cores Memory Control RMA/RM.
*/
#define NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG(_x)      (0x00000000 + (0x4 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_BC2 BIT(14)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_BC1 BIT(13)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_TEST1B BIT(12)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_TEST1A BIT(11)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMEB BIT(10)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RA(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RA_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMB(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMB_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMA(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_GASKET_REG_MAC_MEM_CTRL_RMA_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacCoresPowerCsrs[4] - Mac Memory control Power ShutDown CSRs
    Bits: 31:0  MacPowerCsrs(rw) - 32 bit Memory Control Power CSRs. Setting bit to 1 Shuts down the memory.
*/
#define NFP3800_NBI_MACX_MEMCTL_MAC_CORE_POWER_CSRS(_x)      (0x00000200 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_POWER_CSRS_MAC_POWER_CSRS(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_MEMCTL_MAC_CORE_POWER_CSRS_MAC_POWER_CSRS_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: CustModeResetCtl - Customer Mode overrides and Reset Control CSR.
    Bits: 31:16 CustomerMode(rw) - The customer mode bus to override CSR settings on all CMUs and Lanes in a single PHY at the same time.
    Bits: 15    Cmu1SelIntRefClk(rw) - When set, PLL1/CMU1 selects internal PLL ref_clk. 0 selects the bump ref_clk.
    Bits: 14    Cmu0SelIntRefClk(rw) - When set, PLL0/CMU0 selects internal PLL ref_clk. 0 selcts the bump ref_clk.
    Bits: 13    LsPllReset(rw) - LS PLL Reset. Reset=1.
    Bits: 12    HsPllReset(rw) - HS PLL Reset. Reset=1.
    Bits: 11:8  TxSyncReset(rw) - Used to sync TX on multiple lanes. (Only Lanes 0-3 and 8-11 are multi-capable)
    Bits:  7:4  TxReset(rw) - TX reset pin.
    Bits:  3:0  RxReset(rw) - RX reset pin.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL   0x00000000
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_CUSTOMER_MODE(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_CUSTOMER_MODE_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_CMU1_SEL_INT_REF_CLK BIT(15)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_CMU0_SEL_INT_REF_CLK BIT(14)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_LS_PLL_RESET BIT(13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_HS_PLL_RESET BIT(12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_TX_SYNC_RESET(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_TX_SYNC_RESET_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_TX_RESET(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_TX_RESET_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_RX_RESET(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_MODE_RESET_CTL_RX_RESET_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: CustWordModeDataRate10 - Customer Mode per-lane data-rate, word-mode and loopback macro lanes 1 and 0
    Bits: 31:26 RFU(rw) - Reserved.
    Bits: 25    RxTxParLpbkL1(rw) - Lane 1 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 24    TxRxLpbkL1(rw) - Lane 1 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 23    RxTxRevLpbkL1(rw) - Lane 1 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 22    RxTxParLpbkL0(rw) - Lane 0 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 21    TxRxLpbkL0(rw) - Lane 0 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 20    RxTxRevLpbkL0(rw) - Lane 0 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 19:18 RxDataRateL1(rw) - RX data rate L1 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 17:16 TxDataRateL1(rw) - TX data rate L1 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 15:13 RxWordModeL1(rw) - RX word mode L1 001=10b, 011=20b, 100=32b, 101=40b.
    Bits: 12:10 TxWordModeL1(rw) - TX word mode L1 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  9:8  RxDataRateL0(rw) - RX data rate L0 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  7:6  TxDataRateL0(rw) - TX data rate L0 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  5:3  RxWordModeL0(rw) - RX word mode L0 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  2:0  TxWordModeL0(rw) - TX word mode L0 001=10b, 011=20b, 100=32b, 101=40b.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10 0x00000004
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_TX_PAR_LPBK_L1 BIT(25)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_RX_LPBK_L1 BIT(24)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_TX_REV_LPBK_L1 BIT(23)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_TX_PAR_LPBK_L0 BIT(22)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_RX_LPBK_L0 BIT(21)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_TX_REV_LPBK_L0 BIT(20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_DATA_RATE_L1(_x) (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_DATA_RATE_L1_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_DATA_RATE_L1(_x) (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_DATA_RATE_L1_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_WORD_MODE_L1(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_WORD_MODE_L1_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_WORD_MODE_L1(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_WORD_MODE_L1_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_DATA_RATE_L0(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_DATA_RATE_L0_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_DATA_RATE_L0(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_DATA_RATE_L0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_WORD_MODE_L0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_RX_WORD_MODE_L0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_WORD_MODE_L0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_10_TX_WORD_MODE_L0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: CustWordModeDataRate32 - Customer Mode per-lane data-rate, word-mode and loopback macro lanes 3 and 2
    Bits: 31:26 RFU(rw) - Reserved.
    Bits: 25    RxTxParLpbkL3(rw) - Lane 3 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 24    TxRxLpbkL3(rw) - Lane 3 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 23    RxTxRevLpbkL3(rw) - Lane 3 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 22    RxTxParLpbkL2(rw) - Lane 2 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 21    TxRxLpbkL2(rw) - Lane 2 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 20    RxTxRevLpbkL2(rw) - Lane 2 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 19:18 RxDataRateL3(rw) - RX data rate L3 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 17:16 TxDataRateL3(rw) - TX data rate L3 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 15:13 RxWordModeL3(rw) - RX word mode L3 001=10b, 011=20b, 100=32b, 101=40b.
    Bits: 12:10 TxWordModeL3(rw) - TX word mode L3 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  9:8  RxDataRateL2(rw) - RX data rate L2 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  7:6  TxDataRateL2(rw) - TX data rate L2 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  5:3  RxWordModeL2(rw) - RX word mode L2 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  2:0  TxWordModeL2(rw) - TX word mode L2 001=10b, 011=20b, 100=32b, 101=40b.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32 0x00000008
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_TX_PAR_LPBK_L3 BIT(25)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_RX_LPBK_L3 BIT(24)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_TX_REV_LPBK_L3 BIT(23)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_TX_PAR_LPBK_L2 BIT(22)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_RX_LPBK_L2 BIT(21)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_TX_REV_LPBK_L2 BIT(20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_DATA_RATE_L3(_x) (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_DATA_RATE_L3_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_DATA_RATE_L3(_x) (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_DATA_RATE_L3_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_WORD_MODE_L3(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_WORD_MODE_L3_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_WORD_MODE_L3(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_WORD_MODE_L3_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_DATA_RATE_L2(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_DATA_RATE_L2_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_DATA_RATE_L2(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_DATA_RATE_L2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_WORD_MODE_L2(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_RX_WORD_MODE_L2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_WORD_MODE_L2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_WORD_MODE_DATA_RATE_32_TX_WORD_MODE_L2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: CustPllSelRateChange - Customer Mode rate change, usrclk div and PLL select.
    Bits: 31:22 RFU(rw) - Reserved.
    Bits: 21:19 LsUsrClkDiv(rw) - LsUsrClk divider is value + 1.
    Bits: 18:16 HsUsrClkDiv(rw) - HsUsrClk divider is value + 1.
    Bits: 15:12 TxPllSel(rw) - TX PLL select per lane. 1=LS 0=HS.
    Bits: 11:8  RxPllSel(rw) - RX PLL select per lane. 1=LS 0=HS.
    Bits:  7:4  TxRateChange(rw) - Per Lane Start TX rate changes sequence. Toggle this bit from low to high to start the rate change. Minimum pulse width should be 4 refclk cycles.
    Bits:  3:0  RxRateChange(rw) - Per Lane Start RX rate changes sequence. Toggle this bit from low to high to start the rate change. Minimum pulse width should be 4 refclk cycles.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE 0x0000000c
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_RFU(_x) (((_x) & 0x3ff) << 22)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_RFU_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_LS_USR_CLK_DIV(_x) (((_x) & 0x7) << 19)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_LS_USR_CLK_DIV_of(_x) (((_x) >> 19) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_HS_USR_CLK_DIV(_x) (((_x) & 0x7) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_HS_USR_CLK_DIV_of(_x) (((_x) >> 16) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_TX_PLL_SEL(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_TX_PLL_SEL_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_RX_PLL_SEL(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_RX_PLL_SEL_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_TX_RATE_CHANGE(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_TX_RATE_CHANGE_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_RX_RATE_CHANGE(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_SEL_RATE_CHANGE_RX_RATE_CHANGE_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: ExtClkDivCtl - Per lane ext. TX clock divider control.
    Bits: 31:28 RxPreReady(ro) - Per Lane RX pre ready after RX calibration is completed:.
    Bits: 27:20 RFU(rw) - Reserved.
    Bits: 19:16 TxClkDivPllSel(rw) - Per Lane PLL Select for TX clock divider. HS=0, LS=1;
    Bits: 15:12 TxClkDivReset(rw) - Per Lane Reset for TX clock divider. Reset=1;
    Bits: 11:9  TxClkDivisorL3(rw) - Lane 3 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
    Bits:  8:6  TxClkDivisorL2(rw) - Lane 2 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
    Bits:  5:3  TxClkDivisorL1(rw) - Lane 1 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
    Bits:  2:0  TxClkDivisorL0(rw) - Lane 0 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL       0x00000010
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_RX_PRE_READY(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_RX_PRE_READY_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_RFU(_x) (((_x) & 0xff) << 20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_RFU_of(_x) (((_x) >> 20) & 0xff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIV_PLL_SEL(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIV_PLL_SEL_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIV_RESET(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIV_RESET_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L3(_x) (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L3_of(_x) (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L2(_x) (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L2_of(_x) (((_x) >> 6) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L1(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_EXT_CLK_DIV_CTL_TX_CLK_DIVISOR_L0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: CustPllDivCtl - Customer mode PLL FB and PostDiv settings.
    Bits: 31    LsPllRefClkDivReset(rw) - LS PLL (CmuLs) RefClk divider reset.
    Bits: 30:29 RFULs(rw) - Reserved.
    Bits: 28    LsPllForceCal(rw) - LS PLL (CmuLs) Forcce VCO Calibration. Set hi and then set low to start.
    Bits: 27    LsPllPostDiv(rw) - LS PLL (CmuLs) Serial clock post divider. 0=div1, 1=div2.
    Bits: 26:25 LsPllRefClkDiv(rw) - LS PLL (CmuLs) RefClk divider. 00=div1, 01=div2, 10=div4, 11=div8.
    Bits: 24:16 LsPllFbDiv(rw) - LS PLL (CmuLs) Feedback divider. default 33 for 10.3125G.
    Bits: 15    HsPllRefClkDivReset(rw) - HS PLL (CmuHs) RefClk divider reset.
    Bits: 14:13 RFUHs(rw) - Reserved.
    Bits: 12    HsPllForceCal(rw) - HS PLL (CmuHs) Forcce VCO Calibration. Set hi and then set low to start.
    Bits: 11    HsPllPostDiv(rw) - HS PLL (CmuHs) Serial clock post divider. 0=div1, 1=div2.
    Bits: 10:9  HsPllRefClkDiv(rw) - HS PLL (CmuHs) RefClk divider. 00=div1, 01=div2, 10=div4, 11=div8.
    Bits:  8:0  HsPllFbDiv(rw) - HS PLL (CmuHs) Feedback divider. default 40 for 12.5G.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT     0x00000014
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_REF_CLK_DIV_RESET BIT(31)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_RFU_LS(_x) (((_x) & 0x3) << 29)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_RFU_LS_of(_x) (((_x) >> 29) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_FORCE_CAL BIT(28)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_POST_DIV BIT(27)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_REF_CLK_DIV(_x) (((_x) & 0x3) << 25)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_REF_CLK_DIV_of(_x) (((_x) >> 25) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_FB_DIV(_x) (((_x) & 0x1ff) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_LS_PLL_FB_DIV_of(_x) (((_x) >> 16) & 0x1ff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_REF_CLK_DIV_RESET BIT(15)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_RFU_HS(_x) (((_x) & 0x3) << 13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_RFU_HS_of(_x) (((_x) >> 13) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_FORCE_CAL BIT(12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_POST_DIV BIT(11)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_REF_CLK_DIV(_x) (((_x) & 0x3) << 9)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_REF_CLK_DIV_of(_x) (((_x) >> 9) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_FB_DIV(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PLL_DIV_CTLT_HS_PLL_FB_DIV_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: CustPiSpdSel - Per lane speed select for CDR linearity.
    Bits: 31:28 BitSkip(rw) - Macro per-lane bits to bit skip capture logic. Write a 1 to send skip pulse. Self clearing.
    Bits: 27:24 DmeModeForce(rw) - Macro per-lane bits to force DME mode.
    Bits: 23:20 RFUSpd(rw) - Reserved.
    Bits: 19:16 RxTermDisable(rw) - Macro per-lane bits to disable rx termination.
    Bits: 15:12 PiSpdSelLn3(rw) - Select current for CDR linearity at lower data rates.
    Bits: 11:8  PiSpdSelLn2(rw) - Select current for CDR linearity at lower data rates.
    Bits:  7:4  PiSpdSelLn1(rw) - Select current for CDR linearity at lower data rates.
    Bits:  3:0  PiSpdSelLn0(rw) - Select current for CDR linearity at lower data rates.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL       0x00000018
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_BIT_SKIP(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_BIT_SKIP_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_DME_MODE_FORCE(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_DME_MODE_FORCE_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_RFU_SPD(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_RFU_SPD_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_RX_TERM_DISABLE(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_RX_TERM_DISABLE_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN3(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN3_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN2(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN1(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CUST_PI_SPD_SEL_PI_SPD_SEL_LN0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
    Bits:  3:0  AprobeTxAddr(rw) - Address for TX lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_APROBE_TX_ADDR(_x) (0x00000000 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_APROBE_TX_ADDR 0x0000e000
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBETXADDR_APROBE_TX_ADDR(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBETXADDR_APROBE_TX_ADDR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
    Bits:  7:3  AprobeRxAddr(rw) - Address for RX lane aprobe data.
    Bits:  2:0  AprobeRegRxTxAddr(rw) - Address for RX and TX regulator lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_APROBE_RX_ADDR(_x) (0x00000001 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_APROBE_RX_ADDR 0x0000e001
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_RX_ADDR(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_RX_ADDR_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_REG_RXTX_ADDR(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAAPROBERXADDR_APROBE_REG_RXTX_ADDR_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
    Bits:  3    RstLanePcsSoftTx(rw) - TX lane soft reset. Active Low
    Bits:  2    RstLanePcsSoftRx(rw) - RX lane soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstBypassEn(rw) - RX and TX lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    Cmnctlporhardrstbypass(rw) - RX and TX lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TXRX_LANE_CONTROL(_x) (0x00000002 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TXRX_LANE_CONTROL 0x0000e002
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_RSTLANEPCSSOFT_TX BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_RSTLANEPCSSOFT_RX BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_CMNCTLPOR_HARDRSTBYPASSEN BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXLANECONTROL_CMNCTLPOR_HARDRSTBYPASS BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
    Bits:  4:0  LanePcsPstateRx(rw) - Rx Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_PSTATE_RX(_x) (0x00000003 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_PSTATE_RX 0x0000e003
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATERX_LANEPCSPSTATE_RX(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATERX_LANEPCSPSTATE_RX_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
    Bits:  4:0  LanePcsPstateTx(rw) - TX Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_PSTATE_TX(_x) (0x00000004 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_PSTATE_TX 0x0000e004
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATETX_LANEPCSPSTATE_TX(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEPSTATETX_LANEPCSPSTATE_TX_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
    Bits:  6:4  PcsTxDataWidth(rw) - Defines TX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
    Bits:  2:0  PcsRxDataWidth(rw) - Defines RX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PCS_DATAWIDTH(_x) (0x00000005 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PCS_DATAWIDTH 0x0000e005
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSTX_DATAWIDTH(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSTX_DATAWIDTH_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSRX_DATAWIDTH(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMADATAWIDTH_PCSRX_DATAWIDTH_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
    Bits:  6:4  PcsTxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
    Bits:  2:0  PcsRxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_CONTROL(_x) (0x00000006 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_CONTROL 0x0000e006
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSTX_DIVRATE(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSTX_DIVRATE_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSRX_DIVRATE(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL3_PCSRX_DIVRATE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
    Bits:  7    LBParRx2TxTimedEn(rw) - PMA Parallel RX-to-TX loop-back enable. Parallel loopback from the PMA receive lane 20-bit data ports, to the transmit lane 20-bit data ports. 0 = Disables loopback. 1 = Loops back the 20-bit receive data port to the transmitter.
    Bits:  6    LBTx2RxIoTimedEn(rw) - PMA TX-to-RX I/O serial loop-back enable (loop back done directly from TX to RX pads). Serial IO loopback from the transmit lane IO pins to the receive lane IO pins: 0 = Disables loopback. 1 = Loops back the driver IO signal to the RX IO pins.
    Bits:  5    LBTx2RxBufTimedEn(rw) - PMA TX-to-RX buffered serial loop-back enable (bypasses IO Driver). Serial transmit to receive buffered loopback: 0 = Disables loopback. 1 = Loops back the TX serializer output into the CDR.
    Bits:  4    LBRx2TxUntimedEn(rw) - PMA serial RX-to-TX loop-back enable (from AGC to IO Driver). Serial receive to transmit loopback: 0 = Disables loopback. 1 = Transmits the untimed, partial equalized RX signal out the transmit IO pins.
    Bits:  3    LBPllFbClk2CdrRefClkEn(rw) - PMA PLL feedback clock-to-CDR reference clock loopback enable.
    Bits:  2    LbCdrDivClk2TxEn(rw) - PMA CDR divided-recovered-clock loopback enable for internal GPON mode..
    Bits:  1    LBCdrDivClk2ExtEn(rw) - PMA CDR divided-recovered-clock loopback enable for external clean up GPON mode.
    Bits:  0    LBCdrClk2TxEn(rw) - PMA CDR recovered-clock loopback enable; asserted when PARRX2TXTIMEDEN is 1. Transmit bit clock select: 0 = Selects synthesizer bit clock for transmit. 1 = Selects CDR clock for transmit
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BISTREGISTER(_x) (0x00000007 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BISTREGISTER 0x0000e007
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_PARRX2TXTIMEDEN BIT(7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_TX2RXIOTIMEDEN BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_TX2RXBUFTIMEDEN BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_RX2TXUNTIMEDEN BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_PLLFBCLK2CDRREFCLKEN BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRDIVCLK2TXEN BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRDIVCLK2EXTEN BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST_LB_CDRCLK2TXEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
    Bits:  4    RxBistRxLocked(rw) - RX BIST locked indicator. '0' Indicates BIST is not word locked and error comparisons have not begun yet. '1' Indicates BIST is word locked and error comparisons have begun.
    Bits:  3    RxBistErrCntOvf(rw) - RX BIST error count overflow indicator. Indicates an overflow in the number of byte errors identified during the course of the test. This word is stable to sample when *_DONE_* signal has asserted.
    Bits:  2    RxBistDone(rw) - RX BIST completion: '0' Indicates test is not completed. '1' Indicates the test has completed, and will remain high until a new test is initiated.
    Bits:  1    PcsTxBistEn(rw) - Transmit lane BIST enable.
    Bits:  0    PcsRxBistEn(rw) - Recieve lane BIST enable.Active High
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST2REGISTER(_x) (0x00000008 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST2REGISTER 0x0000e008
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_RXLOCKED BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_ERRCOUNT_OVERFLOW BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_RXBIST_DONE BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_PCSTXBIST_EN BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST2_PCSRXBIST_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
    Bits:  7:0  RxBistErrCount(rw) - RX BIST error count word. Indicates the number of byte errors identified during the course of the test.This word is stable to sample when *_DONE_* signal has asserted.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST3REGISTER(_x) (0x00000009 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LOOPBACK_BIST3(_x) (0x0000000a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST3REGISTER 0x0000e009
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LOOPBACK_BIST3 0x0000e00a
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST3_RXBIST_ERRCOUNT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALOOPBACKBIST3_RXBIST_ERRCOUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
    Bits:  5    RXSigdetCdrLock2Data(rw) - RX CDR Lock to Data status indicator 0 - CDR is locked to reference clock 1 - CDR is locked to data.
    Bits:  4    RxPpmLockStatus(rw) - RX lane PLL lock status. 1 = CDR VCO is locked to reference clock.
    Bits:  3    PcsOutTxStatus(rw) - TX lane state transition status. Indicates the TX has completed a requested state transition. 0 = TX Lane has not completed its state change. 1 = TX Lane has completed its state change.
    Bits:  2    PcsOutTxReady(rw) - TX lane ready status signal: 0 = TX Lane is not ready for data transmission. 1 = TX Lane is ready for data transmission.
    Bits:  1    PcsOutRxStatus(rw) - RX lane state transition status. Indicates the RX has completed a requested state transition. 0 = RX Lane has not completed its state change. 1 = RX Lane has completed its state change.
    Bits:  0    PcsOutRxReady(rw) - RX lane ready status signal. 0 = RX Lane is not ready for data transmission. 1 = RX Lane is ready for data transmission.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_STATUS(_x) (0x0000000b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_STATUS 0x0000e00b
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_RXSIGDET_CDRLOCK2DATA BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_RXPPM_LOCKSTATUS BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTTX_STATUS BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTTX_READY BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTRX_STATUS BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANESTATUS_PCSOUTRX_READY BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyIclk(rw) - RX lane ICLK duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_CALIBRATION(_x) (0x0000000c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_CALIBRATION 0x0000e00c
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCAL_RXCALDUTY_ICLK(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCAL_RXCALDUTY_ICLK_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyQclk(rw) - RX lane QCLK duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_CALIBRATION2(_x) (0x0000000d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_CALIBRATION2 0x0000e00d
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCALQ_RXCALDUTY_QCLK(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNCALQ_RXCALDUTY_QCLK_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData0(rw) - RX lane DATA0 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION3(_x) (0x0000000e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION3 0x0000e00e
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL3_RXCALOFFSET_DATA0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL3_RXCALOFFSET_DATA0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData1(rw) - RX lane DATA1 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION4(_x) (0x0000000f + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION4 0x0000e00f
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL31_RXCALOFFSET_DATA1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL31_RXCALOFFSET_DATA1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge0(rw) - RX lane EDGE0 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION5(_x) (0x00000010 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION5 0x0000e010
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE0_RXCALOFFSET_EDGE0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE0_RXCALOFFSET_EDGE0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge1(rw) - RX lane EDGE1 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION6(_x) (0x00000011 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION6 0x0000e011
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE1_RXCALOFFSET_EDGE1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALE1_RXCALOFFSET_EDGE1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetRoam(rw) - RX lane roam comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION7(_x) (0x00000012 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CALIBRATION7 0x0000e012
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALR_RXCALOFFSET_ROAM(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECALR_RXCALOFFSET_ROAM_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
    Bits:  3:0  RxCdrCalfoscCenterFreq(rw) - RX CDR VCO center frequency calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CAL_CDR_FREQ(_x) (0x00000013 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CAL_CDR_FREQ 0x0000e013
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL1_RXCDRCALFOSC_CENTERFREQ(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL1_RXCDRCALFOSC_CENTERFREQ_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
    Bits:  4:0  TxCalTclkDuty(rw) - TX lane clock duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CAL_TX_CLK(_x) (0x00000014 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CAL_TX_CLK 0x0000e014
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL2_TXCALTCLKDUTY(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECAL2_TXCALTCLKDUTY_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
    Bits:  7:3  TxDrvLevN(rw) - Defines the total number of driver units allocated to sum of the taps. The maximum value is 5'd23.
    Bits:  2:0  TxDrvHLev(rw) - Transmit Amplitude control signal. Used to define the full-scale maximum swing of the driver. 000=Not Supported, 001=1070mVdiff-pkpk (Default), 010=1140mVdiff-pkpk, 011=1200mVdiff-pkpk, 100=1260mVdiff-pkpk, 101=1310mVdiff-pkpk, 110=1350mVdiff-pkpk, 111=1400mVdiff-pkpk6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL(_x) (0x00000015 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL 0x0000e015
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_LEVN(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_LEVN_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_HLEV(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL1_TXDRV_HLEV_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
    Bits:  5:4  TxDrvLevNm2(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 2'h3.
    Bits:  3:0  TxDrvLevNm1(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 4'h9.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL2(_x) (0x00000016 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL2 0x0000e016
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM2(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM1(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL2_TXDRV_LEVNM1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
    Bits:  4:3  TxDrvSlew(rw) - TX driver Slew Rate control:00 - 31ps ,01 - 33ps,10 - 68ps,11 - 170ps
    Bits:  2:0  TxDrvLevNP1(rw) - Defines the total number of driver units allocated to the first pre-cursor (C-1) tap. The maximum value for C-1 is 3'h6.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL3(_x) (0x00000017 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_DRV_CONTROL3 0x0000e017
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_SLEW(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_SLEW_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_LEVNP1(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXDRVCONTROL3_TXDRV_LEVNP1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
    Bits:  5:3  RxCalEqDfepstapf3DB(rw) - DFE post-shaping tap 3dB frequency -3'b000: 684MHz -3'b001: 576MHz -3'b010: 514MHz -3'b011: 435MHz -3'b100: 354MHz -3'b101: 281MHz -3'b110: 199MHz -3'b111: 125MHz
    Bits:  2:0  RxCalEqDcGain(rw) - RX agc high frequency dc gain: -3'b000: -3dB -3'b001: -2.5dB -3'b010: -2dB -3'b011: -1.5dB -3'b100: -1dB -3'b101: -0.5dB -3'b110: -0dB -3'b111: 0.5dB
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE(_x) (0x00000018 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_GEN2 0x00008026
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE 0x0000e018
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DFEPSTAPF3DB(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DFEPSTAPF3DB_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DCGAIN(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE_RXCALEQ_DCGAIN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:3  RxCalEqDfeTap1Gain(rw) - DFE first tap gain control -4'b0000: +1mVpeak -4'b0001: +10mVpeak . . . -4'b0110: +55mVpeak -4'b0111: +64mVpeak -4'b1000: -1mVpeak -4'b1001: -10mVpeak . . -4'b1110: -55mVpeak -4'b1111: -64mVpeak
    Bits:  2:0  RxCalEqDfepStapGain(rw) - DFE post-shaping tap gain 0: no pulse shaping tap 1: -24mVpeak 2: -45mVpeak 3: -64mVpeak 4: -80mVpeak 5: -93mVpeak 6: -101mVpeak 7: -105mVpeak
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE2(_x) (0x00000019 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE2 0x0000e019
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFETAP1GAIN(_x) (((_x) & 0xf) << 3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFETAP1GAIN_of(_x) (((_x) >> 3) & 0xf)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFEPSTAPGAIN(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE2_RXCALEQ_DFEPSTAPGAIN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  7:4  RxCalEqDfeTap3Gain(rw) - DFE third tap gain control -4'b0000: +0mVpeak -4'b0001: +7mVpeak . . . -4'b0110: +38mVpeak -4'b0111: +44mVpeak -4'b1000: -0mVpeak -4'b1001: -7mVpeak . . -4'b1110: -38mVpeak -4'b1111: -44mVpeak
    Bits:  3:0  RxCalEqDfetap2Gain(rw) - DFE second tap gain control -4'b0000: +0mVpeak -4'b0001: +9mVpeak . . . -4'b0110: +46mVpeak -4'b0111: +53mVpeak -4'b1000: -0mVpeak -4'b1001: -9mVpeak . . -4'b1110: -46mVpeak -4'b1111: -53mVpeak
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE3(_x) (0x0000001a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFE_TAP2_GAIN_LUP 0x0000802d
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE3 0x0000e01a
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP3GAIN(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP3GAIN_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP2GAIN(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE3_RXCALEQ_DFETAP2GAIN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:4  RxCalEqLoFreqAgcGain(rw) - Low frequency agc gain (att) select -3'b000: Disconnected -3'b001: -18.5dB -3'b010: -12.5dB -3'b011: -9dB -3'b100: -6.5dB -3'b101: -4.5dB -3'b110: -2.9dB -3'b111: -1.6dB
    Bits:  3:0  RxCalEqDfetap4Gain(rw) - DFE fourth tap gain control -4'b0000: +0mVpeak -4'b0001: +6mVpeak . . . -4'b0110: +29mVpeak -4'b0111: +33mVpeak -4'b1000: -0mVpeak -4'b1001: -6mVpeak . . -4'b1110: -29mVpeak -4'b1111: -33mVpeak
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE4(_x) (0x0000001b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFE_TAP4_GAIN_LUP 0x0000802e
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_RECIEVE4 0x0000e01b
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_LOFREQAGCGAIN(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_LOFREQAGCGAIN_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_DFETAP4GAIN(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALNRECEIVE4_RXCALEQ_DFETAP4GAIN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
    Bits:  7:3  RxCalEqHiFreqAgcCap(rw) - High frequency agc boost control Min d0: Boost ~4dB Max d31: Boost ~20dB
    Bits:  2:0  PcsRxEqPreCalCodeSel(rw) - Provides a RX Equalizer Pre-Hint, prior to beginning adaptive equalization Please refer to Datasheet for a description of what backplane ranges the RX-Hint values are intended to support.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZE(_x) (0x0000001c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZE 0x0000e01c
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_RXCALEQ_HIFREQAGCCAP(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_RXCALEQ_HIFREQAGCCAP_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_PCSRXEQ_PRECAL_CODE_SEL(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ_PCSRXEQ_PRECAL_CODE_SEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  7:0  RxeqBestEyeVal(rw) - RX lane best eye point measurement result.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX(_x) (0x0000001d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX 0x0000e01d
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ2_RXEQ_BEST_EYE_VAL(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ2_RXEQ_BEST_EYE_VAL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  5:0  RxeqBestEyeVal2(rw) - RX lane best eye point measurement result.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX2(_x) (0x0000001e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_ADAPTIVE_EQUALIZER_RX2 0x0000e01e
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ3_RXEQ_BEST_EYE_VAL2(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEQ3_RXEQ_BEST_EYE_VAL2_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
    Bits:  2    RxCalRoamEyeMeasInCycleEn(rw) - RX lane single roam eye point measurement start signal. If asserted, single measurement at fix XADJUST and YADJUST is started.
    Bits:  1    RxCalEyeDiagFsminStart(rw) - Enables an eye diagram measurement within the PHY. 0 - Disables eye diagram measurement 1 - Enables eye diagram measurement
    Bits:  0    PcsRxeqStart(rw) - Adaptive RX Equalization enable 0 - Disables adaptive RX equalization 1 - Enables adaptive RX equalization
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_EYE_DIAGRAM(_x) (0x0000001f + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_EYE_DIAGRAM 0x0000e01f
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_RXCALROAMEYEMEASIN_CYCLEEN BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_RXCALEYEDIAGFSMIN_START BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAG_PCSRXEQ_START BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
    Bits:  3    RxeqDone(rw) - PHY Adaptive Equalization stauts Signal 0-Indicatest adaptive equalization results are not valid for sampling 1-Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  2    RxCalRoamEyeMeasDone(rw) - PMA Adaptive Equalization Status Signal 0 - Indicates adaptive equalization results are not valid for sampling. 1 - Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  1    RxCalEyeDiagFsmErr(rw) - Eye diagram error signal. Indicates if the measurement was invalid because the eye diagram was interrupted by the link entering electrical idle. 0 - Indicates eye diagram is valid. 1- Indicates an error occurred, and the eye diagram measurement should be re-run.
    Bits:  0    RxCalEyeDiagFsmDone(rw) - PHY Eye diagram measurement status signal: 0 - Indicates eye diagram results are not valid for sampling, 1 - Indicates eye diagram is complete and results are valid for sampling.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_CTL(_x) (0x00000020 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_CTL 0x0000e020
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXEQ_DONE BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALROAMEYEMEASDONE BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALEYEDIAGFSM_ERR BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGCTL_RXCALEYEDIAGFSM_DONE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjust(rw) - 7-bit eye diagram time adjust control - 6-bits per UI - spans 2 UI
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_RX_CAL_ROAM_X_ADJUST_INIT(_x) (0x00000021 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_RX_CAL_ROAM_X_ADJUST_INIT 0x0000e021
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMXADJUST_RXCALROAMXADJUST(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMXADJUST_RXCALROAMXADJUST_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
    Bits:  5:0  RxCalRoamYAdjustInit(rw) - 6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT(_x) (0x00000022 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT 0x00008022
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_RX_CAL_ROAM_Y_ADJUST_INIT 0x0000e022
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMYADJUSTINIT_RXCALROAMYADJUST(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCALROAMYADJUSTINIT_RXCALROAMYADJUST_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
    Bits:  7:0  RxCalEyeDiagFsmEyeSumLo(rw) - Eye diagram status low bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_LO(_x) (0x00000023 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_LO 0x0000e023
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMLO_RXCALEYEDIAGFSM_EYESUM_LO(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMLO_RXCALEYEDIAGFSM_EYESUM_LO_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
    Bits:  5:0  RxCalEyeDiagFsmEyeSumHi(rw) - Eye diagram status hi bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_HI(_x) (0x00000024 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_SUM_HI 0x0000e024
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMHI_RXCALEYEDIAGFSM_EYESUM_HI(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEEYEDIAGSUMHI_RXCALEYEDIAGFSM_EYESUM_HI_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
    Bits:  7:0  RxCalRoamEyeMeasAcc(rw) - RX lane single roam eye point measurement result. If 0, eye is open at current XADJUST and YADJUST settings
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX(_x) (0x00000025 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX2(_x) (0x00000026 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX 0x0000e025
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_LANE_EYE_DIAG_RX2 0x0000e026
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAEYEDIAG2_RXCALROAMEYEMEAS_ACC(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAEYEDIAG2_RXCALROAMEYEMEAS_ACC_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
    Bits:  3    RxScopeEn(rw) - Enable PHY to go into 'Scope' mode. Allows for outputting entire eye diagram data. Active High.
    Bits:  2    RxRoamXorBitSel(rw) - Eye diagram type select bit. 0=Select oscilloscope mode, 1=Select Bit Error Contour mode.
    Bits:  0    RxCdrFbDivSlipCycle(rw) - Rising edge detection enable to activate a feedback divider slip (ie, M+1) for one feedback cycle.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_ROAM_SCOPE(_x) (0x00000027 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_ROAM_SCOPE 0x0000e027
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXSCOPE_EN BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXROAM_XORBITSEL BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAROAMSCOPE_RXCDRFBDIVSLIP_CYCLE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
    Bits:  6    RxSigDetOvrEnCdrLock2Data(rw) - Enable for RXSIGDET_OVRCDRLOCK2DATA: 0 = CDR uses its internal locked to data signal, 1 = CDR uses RXSIGDET_OVRCDRLOCK2DATA.
    Bits:  5    RxSigDetOvrCdrLock2Data(rw) - Controls when the CDR should switch to lock to data, or lock to reference: 0 = CDR is locked to reference, 1 = CDR is locked to data.
    Bits:  4    PcsTxDetectRxEn(rw) - TX lane TX detect RX enable. Active High.
    Bits:  3    PcsTxBeaConEn(rw) - TX lane beacon enable. Active High.
    Bits:  2    PcsRxDmeEn(rw) - Receiver DME mode enable. Active High
    Bits:  1    CmnClkGenMuxselDpmatxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1]
    Bits:  0    CmnClkGenMuxselDpmarxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1].
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_CONTROL(_x) (0x00000028 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_CONTROL 0x0000e028
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_RXSIGDET_OVRENCDRLOCK2DATA BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_RXSIGDET_OVRCDRLOCK2DATA BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSTX_DETECTRXEN BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSTX_BEACONEN BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_PCSRX_DME_EN BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_CMNCLKGENMUXSEL_DPMATXREF BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANECONTROL2_CMNCLKGENMUXSEL_DPMARXREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
    Bits:  0    PcsTxTxclkDiv2En(rw) - Enables divide by two on main Transmit clock in the PCS. Used in 32-bit mode.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TX_CLK_DIV2(_x) (0x00000029 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TX_CLK_DIV2 0x0000e029
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXCLKDIV_PCSTX_TXCLK_DIV2_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
    Bits:  1    CmnClkGenMuxSelDpmaTxRef(rw) - Selects reference clock to be used in TX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaRxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_CMN_CLK_GENMUX_SEL(_x) (0x0000002a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_CMN_CLK_GENMUX_SEL 0x0000e02a
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACMNCLKGENMUXSEL_CMNCLKGENMUXSEL_DPMATXREF BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACMNCLKGENMUXSEL_CMNCLKGENMUXSEL_DPMARXREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
    Bits:  4:2  RxSigdetRxtramdetDebounceCount(rw) - Controls signal detection max run-length 000 - 1* Rate/Reference Clock frequency 001 - 2* Rate/Reference Clock frequency 010 - 4* Rate/Reference Clock frequency 011 - 6* Rate/ Reference Clock frequency 100 - 8* Rate/ Reference Clock frequency 101 - 12* Rate/ Reference Clock frequency 110 - 16* Rate/ Reference Clock frequency 111 and above - 32* Rate/ Reference Clock frequency
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_TRAN_DET_COUNT(_x) (0x00000030 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_TRAN_DET_COUNT 0x0000e030
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTRANDET_RXSIGDET_RXTRAMDET_DEBOUNCE_COUNT(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTRANDET_RXSIGDET_RXTRAMDET_DEBOUNCE_COUNT_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    PCSRxEqLocWrEn(rw) - PCSRXEQ* override enable. Active Low.
    Bits:  6    PcsRXBistLocWrEn(rw) - PCSRXBIST* override enable. Active Low.
    Bits:  5    PcsRxLocWrEn(rw) - PCSRX* override enable. Active Low.
    Bits:  4    PcsOutTxLocWrEn(rw) - PCSOUTTX* override enable. Active Low.
    Bits:  3    PcsoutRxLocWrEn(rw) - PCSOUTRX* override enable. Active Low.
    Bits:  2    LbLocWrEn(rw) - LB* override enable. Active Low.
    Bits:  1    LanePcsStateLocWREn(rw) - LANEPCSPSTATE* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_LANE_OVERRIDE_EN(_x) (0x00000055 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_LANE_OVERRIDE_EN 0x0000e055
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRXEQ_LOCWREN BIT(7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRXBIST_LOCWREN BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSRX_LOCWREN BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSOUTTX_LOCWREN BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_PCSOUTRX_LOCWREN BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_LB_LOCWREN BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEEN_LANEPCSPSTATE_LOCWREN BIT(1)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    RxCalRoamEyeAsInLocWrEn(rw) - RXCALROAMEYEMEASIN* override enable. Active Low.
    Bits:  6    RxCalOffSetLocWrEn(rw) - RXCALOFFSET* override enable. Active Low.
    Bits:  5    RxCalEyeDiaframSminLocWrEn(rw) - RXCALEYEDIAGFSMIN* override enable. Active Low.
    Bits:  4    RXcaleqLocRen(rw) - RXCALEQ* override enable. Active Low.
    Bits:  3    RxcalDutyLocwRen(rw) - RXCALDUTY* override enable. Active Low.
    Bits:  2    RstLanePcsSoftLowRen(rw) - RSTLANEPCSSOFT* override enable. Active Low.
    Bits:  1    PcsTxBistLocWrEn(rw) - PCSTXBIST* override enable. Active Low.
    Bits:  0    PcsTxLocWrEn(rw) - PCSTX* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_LANE_OVERRIDE_EN(_x) (0x00000056 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_LANE_OVERRIDE_EN 0x0000e056
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALROAMEYEMEASIN_LOCWREN BIT(7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALOFFSET_LOCWREN BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALEYEDIAGFSMIN_LOCWREN BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALEQ_LOCWREN BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RXCALDUTY_LOCWREN BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_RSTLANEPCSSOFT_LOCWREN BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_PCSTXBIST_LOCWREN BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMALANEOVERRIDEENRX_PCSTX_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
    Bits:  6    TxDrvLocWrEn(rw) - TXDRV* override enable. Active Low.
    Bits:  5    TxCalTclkDutyLocWrEn(rw) - TXCALTCLKDUTY* override enable. Active Low.
    Bits:  2    RxCdrCalFoscLocWrEn(rw) - RXCDRCALFOSC* override enable. Active Low.
    Bits:  1    RxCalRoamyAdjustLocWrEn(rw) - RXCALROAMYADJUST* override enable. Active Low
    Bits:  0    RxCalRoamXadjustLocWrEn(rw) - RXCALROAMXADJUST* override enable. Active Low
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_TX_LANE_CAL(_x) (0x00000057 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_TX_LANE_CAL 0x0000e057
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_TXDRV_LOCWREN BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_TXCALTCLKDUTY_LOCWREN BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCDRCALFOSC_LOCWREN BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCALROAMYADJUST_LOCWREN BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXTXCAL_RXCALROAMXADJUST_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscHscountMuxd0(rw) - CDR VCO calibration register.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL(_x) (0x00000065 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1(_x) (0x00000066 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL 0x0000e065
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1 0x0000e066
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACDRCAL_RXCDRCALFOSC_HSCOUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMACDRCAL_RXCDRCALFOSC_HSCOUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD0(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD0(_x) (0x00000067 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD0 0x0000e067
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD0_RXCDRCALFOSCMEAS_COUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD0_RXCDRCALFOSCMEAS_COUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD1(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD1(_x) (0x00000068 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MUXD1 0x0000e068
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD1_RXCDRCALFOSCMEAS_COUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMUXD1_RXCDRCALFOSCMEAS_COUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD0(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 0. Used in 'Scope' mode.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD0(_x) (0x00000069 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD0 0x0000e069
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD0_RXCDRFBDIVSLIP_MDIV_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD0_RXCDRFBDIVSLIP_MDIV_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD1(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD1(_x) (0x0000006a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_COUNT_MDIV_MUXD1 0x0000e06a
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD1_RXCDRFBDIVSLIP_MDIV_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCDRMDIVMUXD1_RXCDRFBDIVSLIP_MDIV_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD0(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD0(_x) (0x0000006b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD0 0x0000e06b
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUX_RXCDRREFCK_REFDIV_MUXD0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUX_RXCDRREFCK_REFDIV_MUXD0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD1(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD1(_x) (0x0000006c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_REFCK_REFDIV_MUXD1 0x0000e06c
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUXD1_RXCDRREFCK_REFDIV_MUXD1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMAREFDIVMUXD1_RXCDRREFCK_REFDIV_MUXD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  7:4  RxCDRCalFoscCenterFreqPhintMuxD1(rw) -
    Bits:  3:0  RxCDRCalFoscCenterFreqPhintMuxD0(rw) -
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_RX_CDR_CENTER_FREQ_MUXD1(_x) (0x0000006d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_RX_CDR_CENTER_FREQ_MUXD1 0x0000e06d
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD1(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMARXCRDCENTERFREQ_RXCDRCALFOSC_CENTERFREQPHINT_MUXD0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
    Bits:  3    TxCalClkDutyPreDivEnMuxD1(rw) -
    Bits:  2    TxCalClkDutyPreDivEnMuxD0(rw) -
    Bits:  1    RxCalDutyPreDivEnmuxd1(rw) -
    Bits:  0    RxCalDutyPreDivEnmuxd0(rw) -
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SERDES_PMA_TXRX_CAL_DUTY_PRE_DIVEN(_x) (0x0000006e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SERDES_PMA_TXRX_CAL_DUTY_PRE_DIVEN 0x0000e06e
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_TXCALTCLKDUTYPREDIVEN_MUXD1 BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_TXCALTCLKDUTYPREDIVEN_MUXD0 BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_RXCALDUTY_PREDIVEN_MUXD1 BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPMACSR_SERDESPMATXRXCALDUTY_RXCALDUTY_PREDIVEN_MUXD0 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
    Bits:  5    VpcsifEiosDetEn(rw) - EIOS detector enable.0 - Disabled.1 - Enabled. PCS continually monitors for EIOS ordered sets, and if detected, will de-assert ICTL_PIPE_RXVALID shortly after.No EIOS detected:CDR should remains in current state EOIS detected:CDR should lock to reference
    Bits:  4    VpcseqDebugstepEn(rw) - RX Equalization calibration debug control.
    Bits:  3    VpcSeqDebugEn(rw) - RX Equalization calibration debug enable.0 - Normal operation 1 - Debug mode. FSM will not change states until a positive edge of VPCSEQ_DEBUGSTEPEN is detected
    Bits:  2    VpcBistChkHold(rw) - PCS BIST check output error hold enable.0 - Do not hold error counter.1 - Hold error counter
    Bits:  1    vpcbistChkEn(rw) - PCS BIST check enable.0 - Normal operation 1 - Enable BIST check
    Bits:  0    VpcBistChkClr(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG(_x) (0x00001007 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG 0x0000f007
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSIF_EIOS_DET_EN BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSEQ_DEBUGSTEPEN BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSEQ_DEBUGEN BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_HOLD BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_EN BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG_VPCSBIST_CHK_CLR BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
    Bits:  7:6  VpcsencTxForceErr(rw) - 8b10b encoder error insertion control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Error transmitted
    Bits:  5:4  VpcsencForcePosDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Disparity forced to positive
    Bits:  3:2  VpcsencForceNegDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte. 0 - Normal operation 1 - Disparity forced to negative.
    Bits:  1:0  VpcsBistDatamode(rw) - PCS BIST data mode selection. 0 - UDP 1 - prbs7 2 - prbs23 3 - prbs31
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG2(_x) (0x00001008 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG2 0x0000f008
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_TX_FORCE_ERR(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_TX_FORCE_ERR_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_POS_DISP(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_POS_DISP_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_NEG_DISP(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSENC_FORCE_NEG_DISP_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSBIST_DATA_MODE(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG2_VPCSBIST_DATA_MODE_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
    Bits:  6    VPcsBistGenInsertErr(rw) - PCS BIST generator insert error control. The LSB of the transmitted pattern is inverted on each positive edge of this signal
    Bits:  5:2  VPcsBistGenInitDelay(rw) - PCS BIST generator data pattern initial delay. Controls length of time for training pattern. If set to 0, training pattern is controlled by VPCSBIST_GEN_INIT_CTRL. Length of time is 2^ VPCSBIST_GEN_INIT_CTRL clock cycles, maximum 2^12
    Bits:  1    VPcsBistGenInitCtrl(rw) - PCS BIST generator initial pattern manual control. 0 - send training sequence 1 - send prbs / UDP Used only if VPCSBIST_GEN_INIT_DELAY = 0
    Bits:  0    VPcsBistGenEn(rw) - PCS BIST generator enable. 0 - Normal operation 1 - Enable BIST data send
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG3(_x) (0x00001009 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LOOP_BACK_REG3 0x0000f009
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INSERT_ERR BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_DELAY(_x) (((_x) & 0xf) << 2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_DELAY_of(_x) (((_x) >> 2) & 0xf)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_INIT_CTRL BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLOOPBACKREG3_VPCSBIST_GEN_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxPolarity(rw) - Override for ICTL_PIPE_RXPOLARITY_ pins
    Bits:  6    VpcsifOvrRxeqEval(rw) - Override for ICTL_PIPE_RXEQEVAL_ pins
    Bits:  5:4  VpcsifOvrrate(rw) - Override for ICTL_PIPE_RATE_ pins
    Bits:  3:2  VpcsifOvrPowerDown(rw) - Override for ICTL_PIPE_POWERDOWN_ pins
    Bits:  1:0  VpcsifOvrDataBusWidth(rw) - Override for ICTL_PIPE_DATABUSWIDTH_ pins
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG(_x) (0x0000100a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG 0x0000f00a
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RXPOLARITY BIT(7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RXEQEVAL BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RATE(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_RATE_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_POWERDOWN(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_POWERDOWN_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_DATABUSWIDTH(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG_VPCSIF_OVR_DATABUSWIDTH_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
    Bits:  7:6  VpcsifOvrTxEleCidle(rw) - Override for ICTL_PIPE_TXELECIDLE_ pins
    Bits:  5    VpcsifOvrTxDtCtRxLb(rw) - Override for ICTL_PIPE_TXDTCTRX_LB_ pins
    Bits:  4    VpcsifOvrTxCompliance(rw) - Override for ICTL_PIPE_TXCOMPLIANCE_ pins
    Bits:  3    VpcsifOvrRxStandBy(rw) - Override for ICTL_PIPE_RXSTANDBY_ pins
    Bits:  2:0  VpcsifOvrRxPresentHint(rw) - Override for ICTL_PIPE_RXPRESETHINT_ pins
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG1(_x) (0x0000100b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG1 0x0000f00b
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXELECIDLE(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXELECIDLE_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXDTCTRX_LB BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_TXCOMPLIANCE BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXSTANDBY BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXPRESETHINT(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG2_VPCSIF_OVR_RXPRESETHINT_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
    Bits:  4    VPcsLbNe(rw) - PIPE Near End loopback enable.0 - Normal operation 1 - TX to RX loopback enabled.
    Bits:  3    VpcsLbFe(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter.
    Bits:  2    VpcsifOvrRxEqClr(rw) - Override for RXEQCLR pins
    Bits:  1    VpcsifOvrRst(rw) - Override for IRST_PIPE_RST_Lx_B_A pins
    Bits:  0    VpcsifOvrBlockAlignControl(rw) - Override for VPCSIF_OVR_BLOCKALIGNCONTROL_ pins
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG2(_x) (0x0000100c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG2 0x0000f00c
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSLB_NE BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSLB_FE BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_RXEQCLR BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_RST BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG3_VPCSIF_OVR_BLOCKALIGNCONTROL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxstandByEna(rw) - Enables VPCSIF_OVR_RXSTANDBY to override external pin
    Bits:  6    VpcsifOvrRxPresentHintena(rw) - Enables VPCSIF_OVR_RXPRESETHINT to override external pin
    Bits:  5    VpcsifOvrRxPolarityEna(rw) - Enables VPCSIF_OVR_RXPOLARITY to override external pin
    Bits:  4    VpcsifOvrRxEqEvalEna(rw) - Enables VPCSIF_OVR_RXEQEVAL to override external pin
    Bits:  3    VpcsifOvrRstEna(rw) - Enables VPCSIF_OVR_RST to override external pin
    Bits:  2    VpcsifOvrRateEna(rw) - Enables VPCSIF_OVR_RATE to override external pin
    Bits:  1    VpcsifOvrpowerDowmEna(rw) - Enables VPCSIF_OVR_POWERDOWN to override external pin
    Bits:  0    VpcsifOvrDataBusWidthEna(rw) - Enables VPCSIF_OVR_DATABUSWIDTH to override external pin
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG3(_x) (0x0000100d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG3 0x0000f00d
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXSTANDBY_ENA BIT(7)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXPRESETHINT_ENA BIT(6)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXPOLARITY_ENA BIT(5)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RXEQEVAL_ENA BIT(4)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RST_ENA BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_RATE_ENA BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_POWERDOWN_ENA BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG4_VPCSIF_OVR_DATABUSWIDTH_ENA BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
    Bits:  3    VpcsifOvrtxEleCidleEna(rw) - Enables VPCSIF_OVR_TXELECIDLE to override external pin
    Bits:  2    VpcsifovrTxDtcTrxLbEna(rw) - Enables VPCSIF_OVR_TXDTCTRX_LB to override external pin
    Bits:  1    VpcsifOvrTxComplianceEna(rw) - Enables VPCSIF_OVR_TXCOMPLIANCE to override external pin
    Bits:  0    VpcsifOvrBlockAlignControlEna(rw) - Enables VPCSIF_OVR_BLOCKALIGNCONTROL to override external pin
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG4(_x) (0x0000100e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SERDES_PCS_LANE_CONTROL_REG4 0x0000f00e
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXELECIDLE_ENA BIT(3)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXDTCTRX_LB_ENA BIT(2)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_TXCOMPLIANCE_ENA BIT(1)
#define   NFP3800_NBI_MACS_SERDESPMAPCSLANE_SERDESPCSCSR_SERDESPCSLANECONTROLREG5_VPCSIF_OVR_BLOCKALIGNCONTROL_ENA BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr - Address for aprobe common lane.
    Bits:  6:4  SerDesAprobeSynAddr(rw) - Address for Synth lane aprobe data.
    Bits:  3:0  SerDesAprobeCmnAddr(rw) - Address for common and Synth regulator lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_APROBE_CMN_ADDR 0x00008000
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_SYN_ADDR(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_SYN_ADDR_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_CMN_ADDR(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_CMN_ADDR_SERDES_APROBE_CMN_ADDR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr - Address for Synth lane aprobe data.
    Bits:  4:0  AprobeSynthAddr(rw) - Address for synth lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_APROBE_SYNTH_ADDR 0x00008001
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_SYNTH_ADDR_APROBE_SYNTH_ADDR(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_APROBE_SYNTH_ADDR_APROBE_SYNTH_ADDR_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl - PMA Common/Synth lane control register
    Bits:  2    RstCmnPcsSoftSynth(rw) - Synth soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstByPassSynth(rw) - Common lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
    Bits:  0    CmnCtlPorHardRstByPassEnSynth(rw) - Common lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_CONTROL 0x00008002
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_RSTCMNPCSSOFT_SYNTH BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_CMNCTLPOR_HARDRSTBYPASS_SYNTH BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CONTROL_CMNCTLPOR_HARDRSTBYPASSEN_SYNTH BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth - Common PCS pstate synth.
    Bits:  4:0  CmnPcsStateSynth(rw) - Synth power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_PCS_PSTATE_SYNTH 0x00008003
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_PCS_PSTATE_SYNTH_CMNPCSPSTATE_SYNTH(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_PCS_PSTATE_SYNTH_CMNPCSPSTATE_SYNTH_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl - Common Test Bus status reg 1.
    Bits:  2    SynthPpmLockStatus(rw) - Synth lane PLL lock status. 1 - Synth VCO is locked to reference clock.
    Bits:  1    PcsOutSynthStatus(rw) - Synth lane state transition status. Indicates when the Synth has completed a requested state transition. 0 - Synth has not completed its state change. 1 - Synth has completed its state change.
    Bits:  0    PcsOutSynthReady(rw) - Synth lane ready status signal. 0 - Synth is not ready for data transmission. 1 - Synth is ready for data transmission.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_TST_BUS1 0x00008004
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_SYNTHPPM_LOCKSTATUS BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_PCSOUTSYNTH_STATUS BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_TST_BUS1_PCSOUTSYNTH_READY BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl - Common and Synth refclock control.
    Bits:  4    CmnRefCkBufSynthRefEn(rw) - Synth reference clock enable. Active High.
    Bits:  3    CmnRefCkBufRxRefEn(rw) - RX lane reference clock enable. Active High.
    Bits:  2    CmnClkGenMuxSelPcsRef(rw) - Selects reference clock to be used in PCS. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  1    CmnClkGenMuxSelDpmaSynthRef(rw) - Selects reference clock to be used in Synth lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaCmnRef(rw) - Selects reference clock to be used in Common lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_SYNTH_REFCLK_CONTROL 0x00008005
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNREFCKBUF_SYNTHREFEN BIT(4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNREFCKBUF_RXREFEN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_PCSREF BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_DPMASYNTHREF BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_SYNTH_REFCLK_CONTROL_CMNCLKGENMUXSEL_DPMACMNREF BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl - Common/synth reference clock control.
    Bits:  7:6  CmnrefCkDrvRefinpMacntl0(rw) - Reference clock output select for OCK_PMACNTLREF_0 DPMA clock. 00 - From bumps, ICK_CMNREF 01 - From SOC reference clock input, ICK_CMNREFSOC 10 - From right-side clock repeater network, ICK_REFBUSRIGHT 11 - From left-side clock repeater network, ICK_REFBUSLEFT
    Bits:  5:3  CmnRefCkdrvRefBusright2leftoutCtl(rw) -
    Bits:  2:0  CmnRefCkdrvRefBusleft2rightoutCtl(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_REFCLK_CTL 0x00008006
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFINPMACNTL0(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFINPMACNTL0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSRIGHT2LEFTOUTCTL(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSRIGHT2LEFTOUTCTL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSLEFT2RIGHTOUTCTL(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_REFCLK_CTL_CMNREFCKDRV_REFBUSLEFT2RIGHTOUTCTL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl - PMA Common/Synth Lane Reference Clock Control Register.
    Bits:  7:6  SynthRefCkRefInCtl(rw) - Synth lane reference clock select.
    Bits:  5:4  RxCdrRefCkRefClkSel(rw) - RX lane reference clock select..
    Bits:  3:2  CmnRefCkDrvRefSocEn(rw) - RX lane reference clock select..
    Bits:  1:0  CmnRefCkdrvRefInPmACntl1(rw) - Enable for OCK_REFSOC 0 - OCK_REFSOC disabled and output at logic 0 1 - OCK_REFSOC enabled and outputs a copy of ICK_PMA_REFSOC
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_REF_CLK_CTL 0x00008007
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_of(_x) (((_x) >> 6) & 0x3)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REF (0)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFSOC (1)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFBUSRIGHT (2)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_SYNTHREFCK_REFINCTL_ICK_REFBUSLEFT (3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_of(_x) (((_x) >> 4) & 0x3)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REF (0)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFSOC (1)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFBUSRIGHT (2)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_RXCDRREFCK_REFCLKSEL_ICK_REFBUSLEFT (3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_of(_x) (((_x) >> 2) & 0x3)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REF (0)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFSOC (1)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFBUSRIGHT (2)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFSOCEN_ICK_REFBUSLEFT (3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFINPM_ACNTL1(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_REF_CLK_CTL_CMNREFCKDRV_REFINPM_ACNTL1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 - PMA Common/Synth Lane Control Register
    Bits:  6    RxEqCalEn(rw) - RX Equalization FSM enable. Active High.
    Bits:  5    CmnPcsSynthCkBypassEn(rw) - PCS Synth lane clock bypass enable. Active High.
    Bits:  4:3  CmnPcsRdyStatModeSel(rw) - Controls how Synth, TX and RX lane ready and status signals are controlled.
    Bits:  2    CmnPcsTxEnable(rw) - Transmit datapath FIFO enable. Active High.
    Bits:  1    CmnPcsPcieGen3En(rw) - PCIe Gen3 rate change. 1 - Gen3 rate change is requested.
    Bits:  0    CmnPcieGen3LutSel(rw) - PCIe Gen3 rate change LUT select. Active High.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL3 0x00008008
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_RXEQ_CALEN BIT(6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSSYNTH_CKBYPASSEN BIT(5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSRDYSTATMODE_SEL(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCSRDYSTATMODE_SEL_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCS_TXENABLE BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCS_PCIEGEN3_EN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL3_CMNPCIEGEN3_LUTSEL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  CmnRefCkBufTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnCalTcTerm(rw) - Common lane termination calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_COMMON_SYNTH_CALIBRATION 0x00008009
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNREFCKBUF_TERMCAL(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNREFCKBUF_TERMCAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNCALTC_TERM(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION_CMNCALTC_TERM_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  TxTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnBgBiasTermCal(rw) - Common lane termination calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_COMMON_SYNTH_CALIBRATION2 0x0000800a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_TXTERM_CAL(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_TXTERM_CAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_CMNBGBIAS_TERMCAL(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_COMMON_SYNTH_CALIBRATION2_CMNBGBIAS_TERMCAL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal - PMA Common/Synth Lane Register.
    Bits:  5:3  RxTermCal(rw) - RX lane termination calibration value.
    Bits:  2:0  RxDfeTermCal(rw) - RX lane DFE Termination calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_TERM_CAL 0x0000800b
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXTERM_CAL(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXTERM_CAL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXDFE_TERMCAL(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_TERM_CAL_RXDFE_TERMCAL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal - PMA Common/Synth Lane Calibration Register.
    Bits:  3:0  SynthCalFoscCenterFreq(rw) - RX lane ICLK duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_COMMON_LANE_CAL 0x0000800c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CAL_SYNTHCALFOSC_CENTER_FREQ(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_COMMON_LANE_CAL_SYNTHCALFOSC_CENTER_FREQ_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 - PMA Common/Synth Lane Control Register.
    Bits:  5    RxPowerSave(rw) - Power saving mode enable. Active High.Disables RX roam comparator.
    Bits:  3    PcsEn(rw) - Override for ICTL_PCS_EN_NT control pin.0 Multi Mode.1- PCIe Mode.
    Bits:  2    LbSynthPllFbclk2CdrRefclkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock..
    Bits:  1    LbSynthCdrDivclk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
    Bits:  0    CmnCalSynthLoopTimingEn(rw) - Looptiming mode enable. Active High. CDR recovered clock used as the reference clock for Synth VCO..
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL_4 0x0000800d
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_RXPOWERSAVE BIT(5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_PCS_EN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_LB_SYNTHPLLFBCLK2CDRREFCLKEN BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_LB_SYNTHCDRDIVCLK2TXEN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_4_CMNCALSYNTH_LOOPTIMING_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 - PMA Common/Synth Lane Status Registers.
    Bits:  3    MemTstEn(rw) - Memory test enable. Active High.
    Bits:  2:0  MemTstBitSel(rw) - Memory select signal test. The memory bit select will be passed to aprobe, if proper aprobe address is set.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS2 0x0000800e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_EN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_BITSEL(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS2_MEMTST_BITSEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl - PMA Common/Synth Lane Control Register.
    Bits:  4:3  RxLosDetThresh(rw) - LOS Detect Threshold Level.
    Bits:  2:0  RxElecidleSigDetThresh(rw) - Signal Detect Threshold Level.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_CONTROL 0x0000800f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXLOSDET_THRESH(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXLOSDET_THRESH_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXELECIDLE_SIGDETTHRESH(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_CONTROL_RXELECIDLE_SIGDETTHRESH_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 - PMA Common/Synth Lane Status Register.
    Bits:  3    CmnTstBusSampleEn(rw) - TX lane soft reset. Active Low
    Bits:  2    CmnTstBusLmonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  1    CmnTstBusHmonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  0    CmnTstBusAsyncEn(rw) - Testbus read or write enable. Active High
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS3 0x00008010
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_SAMPLE_EN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_LMONITOR BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_HMONITOR BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUS3_CMNTSTBUS_ASYNC_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 - PMA Common/Synth Lane Status Register.
    Bits:  7:0  CmnTstBus(rw) - PHY Testbus status registers. Section 3.2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_0 0x00008011
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_1 0x00008012
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_2 0x00008013
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_3 0x00008014
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUS4_4 0x00008015
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALANESTATUS4_CMNTSTBUS(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALANESTATUS4_CMNTSTBUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel - Testbus Select. Section 3.2.
    Bits:  7:0  CmnTstBusSel(rw) - Testbus select. Section 3.2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_STATUSBUS_SEL 0x00008016
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUSBUS_SEL_CMNTSTBUS_SEL(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_STATUSBUS_SEL_CMNTSTBUS_SEL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit - PMA Lane Transmit Control Register.
    Bits:  7:6  CmnTxPipeHlevLup2(rw) - TX IO driver HLEV look-up table entry
    Bits:  5:3  CmnTxPipeHlevlup1(rw) - TX IO driver HLEV look-up table entry.
    Bits:  2:0  CmnTxPipeHlevlup0(rw) - TX IO driver HLEV look-up table entry.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT 0x00008017
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP2(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP1(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT_CMNTXPIPE_HLEV_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 - PMA Lane Transmit Control Register.
    Bits:  4:0  CmnTxPipelevnLup0(rw) - TX IO driver LEVN look-up table entry 0
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT2 0x00008018
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT2_CMNTXPIPE_LEVN_LUP0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT2_CMNTXPIPE_LEVN_LUP0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 - PMA Lane Transmit Control Register.
    Bits:  3:0  CmnTxPipelevnmLup0(rw) - TX IO driver LEVNM1 look-up table entry 0
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT3 0x00008019
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT3_CMNTXPIPE_LEVNM1_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT3_CMNTXPIPE_LEVNM1_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 - PMA Lane Transmit Control Register.
    Bits:  5:4  CmnTxPipeTxdrvSlewGen3(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen3. If PCIEMODE_SEL=1. This value is used if PCIEMODE_SEL=0.
    Bits:  3:2  CmnTxPipeTxdrvSlewGen2(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen2 If PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
    Bits:  1:0  CmnTxPipeTxdrvSlewGen1(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen1 if PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LANE_TRANSMIT4 0x0000801a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN3(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN3_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN2(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN2_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN1(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_LANE_TRANSMIT4_CMNTXPIPE_TXDRVSLEW_GEN1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr - PMA Common Synth Lane Loop Back and BIST Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 - PMA Common Synth Lane Loop Back and BIST Register
    Bits:  7:0  RxBistCdrLock2DataPostAmble(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LOOP_BACK_BIST_RX_CDR 0x0000801b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_LOOP_BACK_BIST_RX_CDR2 0x0000801c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALOOPBACKBIST4_RXBIST_CDRLOCK2DATA_POSTAMBLE(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMALOOPBACKBIST4_RXBIST_CDRLOCK2DATA_POSTAMBLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR - Delay in CDR switching from "locked to reference" mode to "locked to the data" mode.
    Bits:  7:0  RxLock2DataTmr(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXLOCK2DATATMR 0x0000801d
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXLOCK2DATATMR_RXLOCK2DATATMR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXLOCK2DATATMR_RXLOCK2DATATMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqCoarseIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_LANE_RX_EQ_ITER 0x0000801e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_ITER_RXEQ_COARSE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_ITER_RXEQ_COARSE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqFineIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_LANE_RX_EQ_FINE 0x0000801f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_FINE_RXEQ_FINE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_LANE_RX_EQ_FINE_RXEQ_FINE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 - RX CDR VCO fine frequency cal value.
    Bits:  7:0  SynthCalFoscInt(rw) - Synth lane VCO fine frequency calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_LANE_CDR_CAL_FOSC_INT_LN1 0x00008020
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_LANE_CDR_CAL_FOSC_INT_LN1_SYNTHCALFOSC_INT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_LANE_CDR_CAL_FOSC_INT_LN1_SYNTHCALFOSC_INT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjustInit(rw) - RX Roam eye X ADJUST initial value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_RX_CAL_ROAM_X_ADJUST_INIT 0x00008021
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_RX_CAL_ROAM_X_ADJUST_INIT_RXCALROAMXADJUST_INIT(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_RX_CAL_ROAM_X_ADJUST_INIT_RXCALROAMXADJUST_INIT_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 - Common block control 2.
    Bits:  7    TxWPtrInitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  6:4  TxWPtrInit(rw) - TX parallel data path initial read pointer.
    Bits:  3:2  TxDvrReplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver.
    Bits:  1    LbSynthPllFbClk2CdrRefClkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock.
    Bits:  0    LbSynthCdrDivClk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_CMN_BLOCK_CONTROL2 0x00008023
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT_DIV BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXWPTR_INIT_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXDRV_REPLICAMODE(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_TXDRV_REPLICAMODE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_LB_SYNTHPLLFBCLK2CDRREFCLKEN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_CMN_BLOCK_CONTROL2_LB_SYNTHCDRDIVCLK2TXEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup - PMA Common/Synth Lane Adaptive Equalizer Registers
    Bits:  7:0  RxEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0_NT_ inputs.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_LOOKUP 0x00008024
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_LOOKUP_RXEQ_LOOKUP_CODE_EN(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_LOOKUP_RXEQ_LOOKUP_CODE_EN_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode - PMA Lane Adaptive Equalizer Register.
    Bits:  2:0  RxEqLooklastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_LOOKUP_LASTCODE 0x00008025
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_LOOKUP_LASTCODE_RXEQ_LOOKUP_LASTCODE(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_LOOKUP_LASTCODE_RXEQ_LOOKUP_LASTCODE_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
    Bits:  6:3  RxEqDfeTap1GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_DCGAIN_GEN2 0x00008027
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFETAP1GAIN_GEN2(_x) (((_x) & 0xf) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFETAP1GAIN_GEN2_of(_x) (((_x) >> 3) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFEPSTAPGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_DCGAIN_GEN2_RXEQ_DFEPSTAPGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 - PCIe Gen2 Equalization control.
    Bits:  7:4  RxEqDfeTap3GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-3 tap gain.
    Bits:  3:0  RxEqDfeTap2GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RXEQ_GAIN_GEN2 0x00008028
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP3GAIN_GEN2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP3GAIN_GEN2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP2GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RXEQ_GAIN_GEN2_RXEQ_DFETAP2GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 - PCIe Gen2 Equalization control.
    Bits:  6:4  RxEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  3:0  RxEqDftAp4GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-4 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DFETAP_GEN2 0x00008029
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_LOFREQAGCGAIN_GEN2(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_LOFREQAGCGAIN_GEN2_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_DFETAP4GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DFETAP_GEN2_RXEQ_DFETAP4GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq - PCIe Gen2 Equalization control.
    Bits:  4:0  RxEqHiFreqAgcCapGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_HI_FREQ_GEN2 0x0000802a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_HI_FREQ_GEN2_RXEQ_HIFREQAGCCAP_GEN2(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_HI_FREQ_GEN2_RXEQ_HIFREQAGCCAP_GEN2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain - Equalization calibration lookup table
    Bits:  5:3  RxEqDfepstapf3DBLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency
    Bits:  2:0  RxEqDcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_DC_GAIN 0x0000802b
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DFEPSTAPF3DB_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DFEPSTAPF3DB_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DCGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_DC_GAIN_RXEQ_DCGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 - Equalization calibration lookup table
    Bits:  6:3  RxEqDfeTap1GainLup(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_GAIN_LUP0 0x0000802c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFETAP1GAIN_LUP(_x) (((_x) & 0xf) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFETAP1GAIN_LUP_of(_x) (((_x) >> 3) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFEPSTAPGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_EQ_GAIN_LUP0_RXEQ_DFEPSTAPGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_EQ_HI_FREQ_LUP0 0x00008030
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_FDIV 0x00008031
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCMAXCODE1 0x00008032
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIV_SYNTHFDIV_FDIV(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIV_SYNTHFDIV_FDIV_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 - Synth Lane Control Register
    Bits:  2:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2 0x00008033
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2_SYNTHFDIV_FDIV(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCMAXCODE2_SYNTHFDIV_FDIV_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscUpdateCycle(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE 0x00008035
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE_SYNTHFDIV_SSCUPDATECYCLE(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCUPDATECYCLE_SYNTHFDIV_SSCUPDATECYCLE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod - Synth Lane Control Register
    Bits:  3    SynthfDivStrFdiv(rw) -
    Bits:  2    SynthfDivSscIntfilterFreezeen(rw) -
    Bits:  1    SynthfDivSscGenEn(rw) -
    Bits:  0    SynthfDivmodulatorEn(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_MOD 0x00008036
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_STR_FDIV BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_SSCINTFILTERFREEZEEN BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_SSCGENEN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_MOD_SYNTHFDIV_MODULATOREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk - Synth PCS Div Clock0
    Bits:  7    SynthPcsPostDivClk0En(rw) - Synth PCS Post Div Clock Enable
    Bits:  6:0  SynthPcsPostDivClk0(rw) - Synth PCS Post Div Clock.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PCS_DIVCLK 0x00008037
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0EN BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PCS_DIVCLK_SYNTHPCS_POSTDIVCLK0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat310(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_31_0 0x00008038
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_31_0 0x00008039
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_3_31_0 0x0000803a
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_4_31_0 0x0000803b
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT_TXBIST_PAT_31_0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT_TXBIST_PAT_31_0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat6332(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_63_32 0x0000803c
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_63_32 0x0000803d
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_3_63_32 0x0000803e
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_4_63_32 0x0000803f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT63_TXBIST_PAT_63_32(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT63_TXBIST_PAT_63_32_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat7964(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_1_79_64 0x00008040
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_2_79_64 0x00008041
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT79_TXBIST_PAT_79_64(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMATXBISTPAT79_TXBIST_PAT_79_64_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst - OOB Burst Time
    Bits:  7:0  TxBistOoBtBurst(rw) - OOB Burst Time (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTBURST 0x00008042
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTBURST_TXBIST_OOBTBURST(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTBURST_TXBIST_OOBTBURST_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComRstInit(rw) - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT 0x00008043
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT_TXBIST_OOBTCOMRSTINIT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMRSTINIT_TXBIST_OOBTCOMRSTINIT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas - OOB ComSas Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComSas(rw) - OOB ComSas Idle Time - 1 (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_OOBTCOMSAS 0x00008044
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMSAS_TXBIST_OOBTCOMSAS(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_OOBTCOMSAS_TXBIST_OOBTCOMSAS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake - OOB ComWake Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComWake(rw) - OOB ComWake Idle Time - 1 (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_BIST_COMWAKE 0x00008045
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_COMWAKE_TXBIST_OOBTCOMWAKE(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_BIST_COMWAKE_TXBIST_OOBTCOMWAKE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode - PMA PCS common BIST mode Select.
    Bits:  5    TxBISTBitErrorEn(rw) - Single-Bit error detection enable (on posedge).
    Bits:  4:3  CmnPCSBISToobmode(rw) - OOB Mode (for 80-bit memory pattern mode only, ignored otherwise). 0 - Disabled 1 - OOB ComReset/ComInit 2 - OOB ComWake 3 - OOB ComSas.
    Bits:  2:0  CmnPCSBISTModeSel(rw) - Selects the transmit BIST mode: 0 - Uses the 80-bit internal memory pattern (w/ OOB) 1 - Uses a 27 PRBS pattern 2 - Uses a 223 PRBS pattern 3 - Uses a 231 PRBS pattern 4 - Uses a D10.2 clock pattern 5 - Uses a half rate 1100 clock pattern.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_PCS_BIST_MODE 0x00008050
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_TXBIST_BITERROR_EN BIT(5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_OOBMODE(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_OOBMODE_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_MODESEL(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PCS_BIST_MODE_CMNPCSBIST_MODESEL_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS - PMA TX BIST PRBS mode.
    Bits:  3:2  TxDrvreplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver. 00 - No replica path enabled 01 - Replica path is 25% scaled version of the main driver 10 - Replica path is 50% scaled version of the main driver 11 - Replica path is 75% scaled version of the main driver
    Bits:  1    TxBistRxBistErrEn(rw) - Enable error generation from RXBIST to TXBIST. Once this is set to 1, TXBIST will generate an error bit, if RXBIST detects bit error.
    Bits:  0    TxBISTPrbsRst(rw) - PRBS Reset. Active low
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_BIST_PRBS 0x00008051
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXDRV_REPLICAMODE(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXDRV_REPLICAMODE_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXBIST_RXBIST_ERR_EN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_BIST_PRBS_TXBIST_PRBSRST BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl - PMA TX/RX termination control register.
    Bits:  5:4  TxTermCoarse(rw) - TX lane calibration impedance setting.
    Bits:  3:2  RxTermModeSelect(rw) - RX termination modes setting.
    Bits:  1:0  RxTermCoarse(rw) - RX lane calibration impedance setting.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RX_TX_TERM_CONTROL 0x00008052
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_of(_x) (((_x) >> 4) & 0x3)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_85OHMS (0)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_100OHMS (1)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_TXTERM_COARSE_120OHMS (2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_MODESELECT(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_MODESELECT_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_85OHMS (0)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_100OHMS (1)
#define     NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RX_TX_TERM_CONTROL_RXTERM_COARSE_120OHMS (2)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR - PMA TX/RX Write Pointer.
    Bits:  7:6  TxWptrinitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  5:4  TxWptrInit(rw) - TX parallel data path initial read pointer.
    Bits:  0    RxAgcDccCoupleEn(rw) - RX AGC DC Couple Enable.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_TX_PTR 0x00008053
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_DIV(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_DIV_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_TXWPTR_INIT_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_TX_PTR_RXAGC_DCCOUPLEEN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn - PMA PCS Common Overide Enable.
    Bits:  7    CmnPcsSynthLocWrEn(rw) - CMNPCSSYNTH* override enable. Active Low
    Bits:  6    CmnPcsRdyStatModeLocWrEn(rw) - CMNPCSRDYSTATMODE_* override enable. Active Low
    Bits:  5    CmnPcsPStateLocWrEn(rw) - CMNPCSPSTATE* override enable. Active Low.
    Bits:  4    CmnPcsBistLocWrEn(rw) - CMNPCSBIST* override enable. Active Low.
    Bits:  3    CmnPcsLocWrEn(rw) - CMNPCS* override enable. Active Low
    Bits:  2    CmnPcieGen3LocWrEn(rw) - CMNPCIEGEN3* override enable. Active Low.
    Bits:  1    CmncalTcLocWrEn(rw) - CMNCALTC* override enable. Active Low.
    Bits:  0    CmnBgBiasLocWrEn(rw) - CMNBGBIAS* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_LANE_OVERRIDE_EN 0x0000805f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSSYNTH_LOCWREN BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSRDYSTATMODE_LOCWREN BIT(6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSPSTATE_LOCWREN BIT(5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCSBIST_LOCWREN BIT(4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCS_LOCWREN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNPCIEGEN3_LOCWREN BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNCALTC_LOCWREN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN_CMNBGBIAS_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 - PMA PCS Common Overide Enable.
    Bits:  7    RxDfeLocWrEn(rw) - RXDFE* override enable. Active Low
    Bits:  6    RxCdrRefCkLocWrEn(rw) - RXCDRREFCK* override enable. Active Low
    Bits:  5    RstCmnPcsSoftLocWrEn(rw) - RSTCMNPCSSOFT* override enable. Active Low.
    Bits:  4    PcsOutSynthLocWrEn(rw) - PCSOUTSYNTH* override enable. Active Low.
    Bits:  3    PcslocWrEn(rw) - PCS_EN * override enable. Active Low
    Bits:  2    CmnTstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low.
    Bits:  1    CmnRefCkDrvLocwRen(rw) - CMNREFCKDRV* override enable. Active Low.
    Bits:  0    CmnRefCkBufLocWrEn(rw) - CMNREFCKBUF* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_LANE_OVERRIDE_EN2 0x00008060
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RXDFE_LOCWREN BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RXCDRREFCK_LOCWREN BIT(6)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_RSTCMNPCSSOFT_LOCWREN BIT(5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_PCSOUTSYNTH_LOCWREN BIT(4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_PCS_LOCWREN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNTSTBUS_LOCWREN BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNREFCKDRV_LOCWREN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_LANE_OVERRIDE_EN2_CMNREFCKBUF_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm - PMA TX/RX Terminal Overide Enable.
    Bits:  4    TxTermLocWrEn(rw) - TXTERM* override enable. Active Low.
    Bits:  3    SynthRefClkLocWrEn(rw) - SYNTHREFCK * override enable. Active Low.
    Bits:  2    SynthFDivLocWrEn(rw) - SYNTHFDIV* override enable. Active Low.
    Bits:  1    SynthCalFoscLocWrEn(rw) - SYNTHCALFOSC* override enable. Active Low.
    Bits:  0    RxTermLocWrEn(rw) - RXTERM* override enable. Active Low
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_TX_RX_TERM 0x00008061
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_TXTERM_LOCWREN BIT(4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHREFCK_LOCWREN BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHFDIV_LOCWREN BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_SYNTHCALFOSC_LOCWREN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_TX_RX_TERM_RXTERM_LOCWREN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter - PMA Integral loop filter timer.
    Bits:  7:4  SynthDpifGainDelayCountPow2(rw) - Synth integral loop filter gear-shifting timer
    Bits:  3:0  RxDpifgainDelayCountPow2(rw) - RX integral loop filter gear-shifting timer
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_INTEGRAL_LOOP_FILTER 0x00008065
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_SYNTHDPIF_GAINDELAYCOUNT_POW2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_SYNTHDPIF_GAINDELAYCOUNT_POW2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_RXDPIF_GAINDELAYCOUNT_POW2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_INTEGRAL_LOOP_FILTER_RXDPIF_GAINDELAYCOUNT_POW2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 - PMA timer used for termination resistance.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 - PMA timer used for termination resistance.
    Bits:  7:0  CmnCaltcMeasCount(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CALTCMEAS_COUNT1 0x00008066
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CALTCMEAS_COUNT2 0x00008067
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNCAL_CMNCALTCMEAS_COUNT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNCAL_CMNCALTCMEAS_COUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0.
    Bits:  7:0  SynthCalFoscmeasCountMuxD0(rw) - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0 0x0000806a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0_SYNTHCALFOSCMEAS_COUNT_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD0_SYNTHCALFOSCMEAS_COUNT_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 1.
    Bits:  7:0  SynthCalFoscmeasCountMuxD1(rw) - SYNTH VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1 0x0000806b
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1_SYNTHCALFOSCMEAS_COUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_CAL_FOSCMEAS_COUNT_MUXD1_SYNTHCALFOSCMEAS_COUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 0.
    Bits:  7:0  SynthFDivMdivMuxD0(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 0.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0 0x0000806c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0_SYNTHFDIV_MDIV_MUXD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD0_SYNTHFDIV_MDIV_MUXD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 1.
    Bits:  7:0  SynthFDivMdivMuxD1(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1 0x0000806d
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1_SYNTHFDIV_MDIV_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_FDIV_MDIV_MUXD1_SYNTHFDIV_MDIV_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle - PMA lane Calibration Register
    Bits:  7:1  CmnCalTcMeasPow2dlyCount1(rw) - Timer used in the termination resistance calibration configuration
    Bits:  0    CmnCalTcmeashalFCycleEn(rw) - Enables one of the termination resistance calibration configuration register.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_CAL_CYCLE 0x0000806e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_POW2DLYCOUNT1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_POW2DLYCOUNT1_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_CAL_CYCLE_CMNCALTCMEAS_HALFCYCLE_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY - PMA lane Calibration Register
    Bits:  4:0  CmnCalTcMeasPow2dlyCount2(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_PWR2DLY 0x0000806f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PWR2DLY_CMNCALTCMEAS_POW2DLYCOUNT2(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_PWR2DLY_CMNCALTCMEAS_POW2DLYCOUNT2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr - PMA Rx Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr1(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_WATCHDOG_TMR 0x00008070
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_WATCHDOG_TMR_RXPPM_WATCHDOGTMR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_WATCHDOG_TMR_RXPPM_WATCHDOGTMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 - PMA Rx Watchdog Timer
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 - PMA Synth Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_WATCHDOG_TMR2 0x00008071
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_WATCHDOG_TMR2 0x00008073
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMAWATCHDOGTMR2_RXPPM_WATCHDOGTMR(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMAWATCHDOGTMR2_RXPPM_WATCHDOGTMR_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register.
    Bits:  7:0  RxCDRCalFoscHscountMuxd1(rw) - CDR VCO calibration register.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1 0x00008072
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1_RXCDRCALFOSC_HSCOUNT_MUXD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CDR_VCO_CAL_MUXD1_RXCDRCALFOSC_HSCOUNT_MUXD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q0 0x00008074
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q0_CMNRPU_OFFSETUI_S0Q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q0_CMNRPU_OFFSETUI_S0Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q1 0x00008075
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q1_CMNRPU_OFFSETUI_S0Q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q1_CMNRPU_OFFSETUI_S0Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q2(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q2 0x00008076
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q2_CMNRPU_OFFSETUI_S0Q2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q2_CMNRPU_OFFSETUI_S0Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q3(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q3 0x00008077
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q3_CMNRPU_OFFSETUI_S0Q3(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q3_CMNRPU_OFFSETUI_S0Q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q4(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q4 0x00008078
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q4_CMNRPU_OFFSETUI_S0Q4(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q4_CMNRPU_OFFSETUI_S0Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q5(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q5 0x00008079
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q5B 0x0000807a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET5_CMNRPU_OFFSETUI_S0Q5(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET5_CMNRPU_OFFSETUI_S0Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q6(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S0Q6 0x0000807b
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q6_CMNRPU_OFFSETUI_S0Q6(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S0Q6_CMNRPU_OFFSETUI_S0Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q7(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSETS0Q7 0x0000807c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS0Q7_CMNRPU_OFFSETUI_S0Q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS0Q7_CMNRPU_OFFSETUI_S0Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q0 0x0000807d
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q0_CMNRPU_OFFSETUI_S1Q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q0_CMNRPU_OFFSETUI_S1Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q1 0x0000807e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q1_CMNRPU_OFFSETUI_S1Q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q1_CMNRPU_OFFSETUI_S1Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q2(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q2 0x0000807f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q2_CMNRPU_OFFSETUI_S1Q2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q2_CMNRPU_OFFSETUI_S1Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q3 0x00008080
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q3_2 0x00008081
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S3Q1 0x00008093
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET31_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET31_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q4(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q4 0x00008082
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q4_CMNRPU_OFFSETUI_S1Q4(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q4_CMNRPU_OFFSETUI_S1Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q5(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q5 0x00008083
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q5_CMNRPU_OFFSETUI_S1Q5(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S1Q5_CMNRPU_OFFSETUI_S1Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q6(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q6 0x00008084
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S1Q6_2 0x00008085
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET61_CMNRPU_OFFSETUI_S1Q6(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET61_CMNRPU_OFFSETUI_S1Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSETS1Q7 0x00008086
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS1Q7_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSETS1Q7_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q0 0x00008087
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q0_CMNRPU_OFFSETUI_S2Q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q0_CMNRPU_OFFSETUI_S2Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q1 0x00008088
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q1_CMNRPU_OFFSETUI_S2Q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q1_CMNRPU_OFFSETUI_S2Q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q2(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q2 0x00008089
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q2_CMNRPU_OFFSETUI_S2Q2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q2_CMNRPU_OFFSETUI_S2Q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q3(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q3 0x0000808a
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q3_2 0x0000808b
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET32_CMNRPU_OFFSETUI_S2Q3(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET32_CMNRPU_OFFSETUI_S2Q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q4(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q4 0x0000808c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q4_CMNRPU_OFFSETUI_S2Q4(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q4_CMNRPU_OFFSETUI_S2Q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q5(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q5 0x0000808d
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q5_2 0x0000808e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET52_CMNRPU_OFFSETUI_S2Q5(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET52_CMNRPU_OFFSETUI_S2Q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q6(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q6 0x0000808f
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q6_2 0x00008090
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET62_CMNRPU_OFFSETUI_S2Q6(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET62_CMNRPU_OFFSETUI_S2Q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S2Q7 0x00008091
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q7_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S2Q7_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S3Q0 0x00008092
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S3Q0_CMNRPU_OFFSETUI_S1Q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_CMN_RPU_OFFSET_S3Q0_CMNRPU_OFFSETUI_S1Q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS4q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S4Q0 0x00008094
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_CMN_RPU_OFFSET_S4Q0_2 0x00008095
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET40_CMNRPU_OFFSETUI_S4Q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMACMNRPUOFFSET40_CMNRPU_OFFSETUI_S4Q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount2(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CAL_ROAM_COUNT2 0x00008096
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT2_RXCALROAMEYEMEAS_COUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT2_RXCALROAMEYEMEAS_COUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount1(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_CAL_ROAM_COUNT1 0x00008097
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT1_RXCALROAMEYEMEAS_COUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_CAL_ROAM_COUNT1_RXCALROAMEYEMEAS_COUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAModDiv - PMA lane Control Register.
    Bits:  7:4  SynthfbDivModdiv(rw) -
    Bits:  3:0  RxCdrFbDivModDiv(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_MOD_DIV 0x00008098
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_SYNTHFBDIV_MODDIV(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_SYNTHFBDIV_MODDIV_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_RXCDRFBDIV_MODDIV(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_MOD_DIV_RXCDRFBDIV_MODDIV_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode - PMA lane Reference Control Register.
    Bits:  6:1  SynthrefCkRefDivMuxD0(rw) - Synth VCO Reference clock divider.
    Bits:  0    PcieModeSel(rw) - PCI Express Mode or Multi Standard Select.0 - PMA enters multi-standard mode (including PCIe Gen3). Direct pin interface controls for TXEQ. RXEQ performed through memory registers.1 - PMA enters PCIe mode only. Direct pin interface controls for PCIe Gen 3. Look up tables for PCIe Gen1 / Gen2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_PCIE_MODE 0x00008099
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_SYNTHREFCK_REFDIV_MUXD0(_x) (((_x) & 0x3f) << 1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_SYNTHREFCK_REFDIV_MUXD0_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_PCIE_MODE_PCIEMODE_SEL BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 - PMA lane Reference Control Register.
    Bits:  5:0  SynthrefCkRefDivMuxD1(rw) - Synth VCO Reference clock divider.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_REF_DIV_MUXD1 0x0000809a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_REF_DIV_MUXD1_SYNTHREFCK_REFDIV_MUXD1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_REF_DIV_MUXD1_SYNTHREFCK_REFDIV_MUXD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust - PMA Common/Synth lane Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust - PMA Common/Synth lane Control Register.
    Bits:  3:2  RxDfebiasAdjustMuxd1(rw) -
    Bits:  1:0  RxDfebiasAdjustMuxd0(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_DFE_BIASADJUST 0x0000809b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_HI_FREQ_BIASADJUST 0x0000809c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD1(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD0(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMARXDFE_RXDFE_BIASADJUST_MUXD0_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_COUNT 0x0000809d
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT_RXPPM_PPMDRIFTCOUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT_RXPPM_PPMDRIFTCOUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_COUNT2 0x0000809e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT2_RXPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_COUNT2_RXPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_MAX 0x0000809f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX_RXPPM_PPMDRIFTCOUNT1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX_RXPPM_PPMDRIFTCOUNT1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_RX_PPM_DRIFT_MAX2 0x000080a0
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX2_RXPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_RX_PPM_DRIFT_MAX2_RXPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX 0x000080a1
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX_SYNTHPPM_PPMDRIFTCOUNT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX_SYNTHPPM_PPMDRIFTCOUNT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2 0x000080a2
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2_SYNTHPPM_PPMDRIFTCOUNT2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX2_SYNTHPPM_PPMDRIFTCOUNT2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12 0x000080a3
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12_SYNTHPPM_PPMDRIFTMAX(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX12_SYNTHPPM_PPMDRIFTMAX_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22 0x000080a4
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22_SYNTHPPM_PPMDRIFTMAX2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTH_PPM_DRIFT_MAX22_SYNTHPPM_PPMDRIFTMAX2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE 0x000080aa
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE1 0x000080ab
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIVSSC_SYNTHFDIV_SSCSTEPSIZE(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDESPMASYNTHFDIVSSC_SYNTHFDIV_SSCSTEPSIZE_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 - Synth Lane Control Register
    Bits:  0    SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE2 0x000080ac
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPMACOMMMAP_SERDES_PMA_SYNTHFDIV_SSCSTEPSIZE2_SYNTHFDIV_SSCSTEPSIZE BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg - PCS Lane Status Register.
    Bits:  5    TstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low
    Bits:  3    TstBusLMonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  2    TstBusHMonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  1    TstBusAsyncEn(rw) - Testbus read or write enable. Active high
    Bits:  0    MemTstEn(rw) - Memory test enable. Active High
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG 0x00009000
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_LOCWREN BIT(5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_LMONITOR BIT(3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_HMONITOR BIT(2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_TSTBUS_ASYNC_EN BIT(1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_STATUS_REG_MEMTST_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b - PCS Lane Status Register .
    Bits:  7:0  TstBus(rw) - PHY Testbus status registers. Section 3.2
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG2 0x00009001
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS 0x00009002
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS2 0x00009003
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS3 0x00009004
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS4 0x00009005
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_STATUS_REG_TSTBUS4B 0x00009006
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2_TSTBUS(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2_TSTBUS_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 - PCS Common/Synth Lane Loopback and BIST Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
    Bits:  7:0  VpcBistGenSkpDelay(rw) - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSBIST_GEN_SKP_DELAY1 0x00009007
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSBIST_GEN_SKP_DELAY2 0x00009008
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2VPC_VPCSBIST_GEN_SKP_DELAY(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2VPC_VPCSBIST_GEN_SKP_DELAY_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 - PCS BIST generator UDP pattern. LSB is transmitted first.
    Bits:  7:0  VpcsBistUdp(rw) - PCS BIST generator UDP pattern. LSB is transmitted first..
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP1 0x00009009
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP2 0x0000900a
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP3 0x0000900b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP4 0x0000900c
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP5 0x0000900d
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP6 0x0000900e
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP7 0x0000900f
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_VPCSVPCSBIST_UDP8 0x00009010
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2UDP_VPCSBIST_UDP(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSLANESTATUSREG2UDP_VPCSBIST_UDP_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:3  VPcsEBufEmpty(rw) - Elastic buffer empty threshold
    Bits:  2:0  VPcsBistGenSkpCnt(rw) - PCS BIST generator SKP insertion count control. Number of SKP ordered sets to insert per delay cycle.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG 0x00009011
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSEBUF_EMPTY(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSEBUF_EMPTY_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSBIST_GEN_SKP_CNT(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG_VPCSBIST_GEN_SKP_CNT_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:5  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
    Bits:  4:0  VPcsEbufFullM0(rw) - Elastic buffer full threshold, PCIe Gen1 and PCIe Gen2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG1 0x00009012
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M1(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M1_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG1_VPCSEBUF_FULL_M0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7    VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:2  VPcsEBufRdThresholdM0(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen1 and PCIe Gen2.
    Bits:  1:0  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG2 0x00009013
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M1 BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M0(_x) (((_x) & 0x1f) << 2)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_RD_THRESHOLD_M0_of(_x) (((_x) >> 2) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_FULL_M1(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG2_VPCSEBUF_FULL_M1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  3:0  VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_CLOCK_COMPENSATION_REG3 0x00009014
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG3_VPCSEBUF_RD_THRESHOLD_M1(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_CLOCK_COMPENSATION_REG3_VPCSEBUF_RD_THRESHOLD_M1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:0  VPcsEqCoarseiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG 0x00009016
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_RUN_MASK BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG_VPCSEQ_COARSE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG1 0x00009017
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG13 0x00009023
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ2_VPCSEQ_COARSE_RUN_MASK(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ2_VPCSEQ_COARSE_RUN_MASK_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:1  VPcsEqCoarseStep(rw) - RX Equalization calibration coarse mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
    Bits:  0    VpcsEqClrValsEn(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2 0x00009018
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_COARSE_STEP(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_COARSE_STEP_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG2_VPCSEQ_CLR_VALS_EN BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  2:0  VPcsEqDcGainGen2(rw) - PCIe Gen2 Equalization control - AGC high frequency gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3 0x00009019
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_LOFREQAGCGAIN_GEN2(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_LOFREQAGCGAIN_GEN2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_DCGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG3_VPCSEQ_DCGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHoFreqAgcGainGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGaingen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4 0x0000901a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_HIFREQAGCCAP_GEN2(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_HIFREQAGCCAP_GEN2_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_DFEPSTAPGAIN_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG4_VPCSEQ_DFEPSTAPGAIN_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG5 0x0000901b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG6 0x0000901c
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP2GAIN_GEN2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP2GAIN_GEN2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP1GAIN_GEN2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ6_VPCSEQ_DFETAP1GAIN_GEN2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqDefpstapf3DbLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency.
    Bits:  2:0  VPcsEqDefpstapf3DbGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE 3dB cut-off frequency.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7 0x0000901d
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_GEN2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG7_VPCSEQ_DFEPSTAPF3DB_GEN2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC low frequency gain.
    Bits:  2:0  VpcseqDcgainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8 0x0000901e
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_LOFREQAGCGAIN_LUP0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_LOFREQAGCGAIN_LUP0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_DCGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG8_VPCSEQ_DCGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHiFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9 0x0000901f
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_HIFREQAGCCAP_LUP0(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_HIFREQAGCCAP_LUP0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_DFEPSTAPGAIN_LUP0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG9_VPCSEQ_DFEPSTAPGAIN_LUP0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10 0x00009020
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP2GAIN_LUP0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP2GAIN_LUP0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP1GAIN_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG10_VPCSEQ_DFETAP1GAIN_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap4GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-4 tap gain.
    Bits:  3:0  VPcsEqDfetap3GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-3 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11 0x00009021
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP4GAIN_LUP0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP4GAIN_LUP0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP3GAIN_LUP0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG11_VPCSEQ_DFETAP3GAIN_LUP0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqFineRunMask(rw) - Equalization calibration fine mode variable control mask. Each bit controls whether or not an equalization variable will be swept during fine mode.0 - Do not sweep variable 1 - Sweep variable Bit 0 - AGC low frequency gain Bit 1 - AGC high frequency gain Bit 2 - AGC AC Boost Bit 3 - Pulse-shaping DFE 3dB cut-off frequency Bit 4 - Pulse-shaping DFE gain Bit 5 - Discontinuity DFE N-1 tap gain.
    Bits:  6:0  VPcsEqFineiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12 0x00009022
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_RUN_MASK BIT(7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_ITER_NUM(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG12_VPCSEQ_FINE_ITER_NUM_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:5  VPcsEqLookupLastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
    Bits:  4:0  VpcsEqFineStep(rw) - RX Equalization calibration fine mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14 0x00009024
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_LOOKUP_LASTCODE(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_LOOKUP_LASTCODE_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_FINE_STEP(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG14_VPCSEQ_FINE_STEP_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0 inputs.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG15 0x00009025
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG16 0x00009026
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG17 0x00009027
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ14_VPCSEQ_LOOKUP_CODE_EN(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDESPCSSYNTHLNEQ14_VPCSEQ_LOOKUP_CODE_EN_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:0  VPcsEqTimeOut(rw) - .
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18 0x00009028
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18_VPCSEQ_TIMEOUT(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG18_VPCSEQ_TIMEOUT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  Vpcsg2SymaAlignUnLockCnt(rw) - PCIe Gen2 symbol alignment unlock control. Symbol aligner will not move to unlocked mode until this number of incorrectly aligned ALIGN symbols. Setting this value to 0 will result in the symbol aligner not being able to move out of the locked mode until either electrical idle or reset.
    Bits:  3:0  Vpcsg2SymaAlignLockCnt(rw) - PCIe Gen2 symbol alignment lock control. Symbol aligner will not move to locked mode until this number of correctly aligned ALIGN symbols are seen. Setting this value to 0 will result in the symbol aligner not attempting to align.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19 0x00009029
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_UNLOCK_CNT(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_UNLOCK_CNT_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_LOCK_CNT(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG19_VPCSG2SYMA_ALIGN_LOCK_CNT_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:1  VpcsEqLoFreqacGainSwpmin(rw) - .
    Bits:  0    PcsClkCtrl(rw) - .
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20 0x0000902a
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_VPCSEQ_LOFREQAGCGAIN_SWPMIN(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_VPCSEQ_LOFREQAGCGAIN_SWPMIN_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACS_SERDESCOMMLANE_SERDESPCSCOMMMAP_SERDES_PCS_LANE_ADAPTIVE_EQUALIZER_REG20_PCSCLK_CTRL BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg0[2] - -
    Bits: 15    Resetb(rw) - CMU reset
    Bits: 14    Pdown(rw) - CMU power down
    Bits: 13    PllRefSel(rw) - Reference clock select, 0= refclk_p/n[0], 1= refclk_p/n[1]
    Bits: 12    RefClkbufPdown1(rw) - Power down input reference clock buffer 1
    Bits: 11    RefClkbufPdown0(rw) - Power down input reference clock buffer 0
    Bits: 10:8  RefClkbufStren(rw) - Drive strength control for input reference clock buffers
    Bits:  7:5  CalCountResol(rw) - Counter tap selection for VCO calibration coutner.
    Bits:  4    PdownVco(rw) - Power down both the VCO
    Bits:  3    PdownDiv(rw) - Powerdown feedback divider
    Bits:  2:1  RefclkRptPdown(rw) - Reference clock Repeater buffer power down
    Bits:  0    Pciegen3(rw) - gen3 mode sleection - Used only PCIE
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_0(_x)           (0x00000000 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_RESETB      BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_PDOWN       BIT(14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_PLL_REF_SEL BIT(13)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_REF_CLKBUF_PDOWN_1 BIT(12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_REF_CLKBUF_PDOWN_0 BIT(11)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_REF_CLKBUF_STREN(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_REF_CLKBUF_STREN_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_CAL_COUNT_RESOL(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_CAL_COUNT_RESOL_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_PDOWN_VCO   BIT(4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_PDOWN_DIV   BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_REFCLK_RPT_PDOWN(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_REFCLK_RPT_PDOWN_of(_x) (((_x) >> 1) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_0_PCIEGEN_3   BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg1[2] - -
    Bits: 15    PllPdown(rw) - Power down pll and reference clock directly drives the output
    Bits: 14    PllBypass(rw) - Pll is bypassed and reference clock directly drives the output
    Bits: 13:10 PllCp(rw) - Charge pump current control bits.
    Bits:  9:5  PllCpSel(rw) - Sub Charge pump selection
    Bits:  4    IddtnOverride(rw) - Select between reg or pin
    Bits:  3    PllManualcal(rw) - Manual VCO calibration enable
    Bits:  2    PllEnaVco(rw) - Enables VCO ( for test purpose)
    Bits:  1    PllEnaVcoAAC(rw) - Enable VCO automatic amplitude control(For internal use only)
    Bits:  0    RefclkCmosSel(rw) - Select cmose refclk or cml refclk
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_1(_x)           (0x00000004 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_PDOWN   BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_BYPASS  BIT(14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_CP(_x)  (((_x) & 0xf) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_CP_of(_x) (((_x) >> 10) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_CP_SEL(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_CP_SEL_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_IDDTN_OVERRIDE BIT(4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_MANUALCAL BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_ENA_VCO BIT(2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_PLL_ENA_VCO_AAC BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_1_REFCLK_CMOS_SEL BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg2[2] - -
    Bits: 15:14 PllRefdiv(rw) - Reference clock divider selection 00 = 1, 01 = 2, 10 = 4, 11 = 8
    Bits: 13:5  PllFbdiv(rw) - PLL feedback divider selection (2 through 63)
    Bits:  4:1  PllLfres(rw) - Loop filter resistor control
    Bits:  0    FbclkSelRegOvr(rw) - PLL Low or High band select
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_2(_x)           (0x00000008 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_PLL_REFDIV(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_PLL_REFDIV_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_PLL_FBDIV(_x) (((_x) & 0x1ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_PLL_FBDIV_of(_x) (((_x) >> 5) & 0x1ff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_PLL_LFRES(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_PLL_LFRES_of(_x) (((_x) >> 1) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_2_FBCLK_SEL_REG_OVR BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg3[2] - -
    Bits: 15:10 VcoManmomsel(rw) - Manual MOMCaP selection for manual VCO calibration
    Bits:  9:4  VcoMomselInit(rw) - Manual MOMCaP selection for initial value for VCO calibration
    Bits:  3:0  Vcovarsel(rw) - VCO varactor bank selection bits
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_3(_x)           (0x0000000c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_3_VCO_MANMOMSEL(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_3_VCO_MANMOMSEL_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_3_VCO_MOMSEL_INIT(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_3_VCO_MOMSEL_INIT_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_3_VCOVARSEL(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_3_VCOVARSEL_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg4[2] - -
    Bits: 15:10 VcoManmomselPcie(rw) - Manual MOMCaP selection for manual VCO calibration, Used for PCIE Gen3 Only
    Bits:  9:4  VcoMomselInitPcie(rw) - Manual MOMCaP selection for initial value for VCO calibration- Used for PCIE Gen3 only
    Bits:  3:0  VcovarselPcie(rw) - VCO varactor bank selection bits
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_4(_x)           (0x00000010 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_4_VCO_MANMOMSEL_PCIE(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_4_VCO_MANMOMSEL_PCIE_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_4_VCO_MOMSEL_INIT_PCIE(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_4_VCO_MOMSEL_INIT_PCIE_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_4_VCOVARSEL_PCIE(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_4_VCOVARSEL_PCIE_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg5[2] - -
    Bits: 15:14 PllLfsmcap(rw) - Loop filter smoothing capacitor control
    Bits: 13:12 PllLfcap(rw) - Loop filter capacitor control
    Bits: 11:8  TermCalOs(rw) - PVT calibration term code offset value, MSB is sign bit, lsb are magnitude
    Bits:  3:1  PllLockResolution(rw) - Maximum allowed difference in the counters to determine PLL lock. Unipolar binary value.
    Bits:  0    PllResetb(rw) - PLL reset to reset VCOCAL, PVT cal and PLL
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_5(_x)           (0x00000014 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_LFSMCAP(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_LFSMCAP_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_LFCAP(_x) (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_LFCAP_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_TERM_CAL_OS(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_TERM_CAL_OS_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_LOCK_RESOLUTION(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_LOCK_RESOLUTION_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_5_PLL_RESETB  BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg6[2] - -
    Bits: 15    VcoCalibEna(rw) - Enable VCO calibration mode
    Bits: 14:11 PllVcocalsel(rw) - VCO calibration control voltage setting control bits
    Bits: 10:9  PllVregtrim(rw) - Voltage regulator Output voltage trim setting
    Bits:  8:4  PllVcobiasTrim(rw) - VCO bias Current trim setting
    Bits:  3    UsrClkBufEna(rw) - User clock output enable
    Bits:  2    ManPvtCal(rw) - Select between manual PVT cal or State machine driven pvt code. 0 = State machien drives the code and enable. 1 = Manual programming the pvt codes.
    Bits:  1    SerClkbufPdown(rw) - Power down for pll clock buffers
    Bits:  0    UsrClkby2Bypass(rw) - User clock output by2 divider bypass
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_6(_x)           (0x00000018 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_VCO_CALIB_ENA BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_PLL_VCOCALSEL(_x) (((_x) & 0xf) << 11)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_PLL_VCOCALSEL_of(_x) (((_x) >> 11) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_PLL_VREGTRIM(_x) (((_x) & 0x3) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_PLL_VREGTRIM_of(_x) (((_x) >> 9) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_PLL_VCOBIAS_TRIM(_x) (((_x) & 0x1f) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_PLL_VCOBIAS_TRIM_of(_x) (((_x) >> 4) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_USR_CLK_BUF_ENA BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_MAN_PVT_CAL BIT(2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_SER_CLKBUF_PDOWN BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_6_USR_CLKBY_2BYPASS BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg7[2] - -
    Bits: 15    PllLock(ro) - PLL Lock status bit
    Bits: 14    PllCalibDone(ro) - VCO calibration complete status bit
    Bits: 13:12 PllDet(ro) - PLL VCO calibration comparator output
    Bits: 11:10 VcoCalFail(ro) - VCO calibration state machine status bits
    Bits:  9:5  PvtCalUpOs(rw) - PVT calibration UP code Offset. MSB is sign bit, lsbs are magnitude
    Bits:  4:0  PvtCalDnOs(rw) - PVT calibration DN code Offset. MSB is sign bit, lsbs are magnitude
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_7(_x)           (0x0000001c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PLL_LOCK    BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PLL_CALIB_DONE BIT(14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PLL_DET(_x) (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PLL_DET_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_VCO_CAL_FAIL(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_VCO_CAL_FAIL_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PVT_CAL_UP_OS(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PVT_CAL_UP_OS_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PVT_CAL_DN_OS(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_7_PVT_CAL_DN_OS_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg8[2] - -
    Bits: 15:14 TxDataRateCh3(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits: 13:12 TxDataRateCh2(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits: 11:10 TxDataRateCh1(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits:  9:8  TxDataRateCh0(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits:  7:5  PllUcdiv(rw) - User clock divider, Supprots 1 to 7
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_8(_x)           (0x00000020 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_3(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_3_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_2(_x) (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_2_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_1(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_1_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_0(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_TX_DATA_RATE_CH_0_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_PLL_UCDIV(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_8_PLL_UCDIV_of(_x) (((_x) >> 5) & 0x7)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg9[2] - -
    Bits: 15:13 TxWordModeCh3(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits: 12:10 TxWordModeCh2(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits:  9:7  TxWordModeCh1(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits:  6:4  TxWordModeCh0(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits:  3    PllPostDivby2(rw) - PLL post divider used for PCIE
    Bits:  2    VbgBypassb(rw) - Bypass VBG reference and use 1.5Supply, active low
    Bits:  1    IgenBypass(rw) - Bypass VBG reference current, active high
    Bits:  0    IHsclkbufPd(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_9(_x)           (0x00000024 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_3(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_3_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_2(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_2_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_1(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_1_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_0(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_TX_WORD_MODE_CH_0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_PLL_POST_DIVBY_2 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_VBG_BYPASSB BIT(2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_IGEN_BYPASS BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_9_IHSCLKBUF_PD BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg10[2] - -
    Bits: 15:12 TxParClkbufPdown(rw) - Power down for parallel tx clock buffers
    Bits: 11    AtoEna(rw) - ATO logic enable
    Bits: 10:5  AtoSel(rw) - Selecting test signal for probe.
    Bits:  4:2  PllAmuxSel(rw) - Amux(ato) select for PLL ato signals
    Bits:  1    PllAmuxEn(rw) - Amux enable for pll signal
    Bits:  0    VregRefsel(rw) - Voltage regulator current select
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_10(_x)          (0x00000028 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_TX_PAR_CLKBUF_PDOWN(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_TX_PAR_CLKBUF_PDOWN_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_ATO_ENA    BIT(11)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_ATO_SEL(_x) (((_x) & 0x3f) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_ATO_SEL_of(_x) (((_x) >> 5) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_PLL_AMUX_SEL(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_PLL_AMUX_SEL_of(_x) (((_x) >> 2) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_PLL_AMUX_EN BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_10_VREG_REFSEL BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg11[2] - -
    Bits: 15:8  PllSpareOut(ro) - Spare out for future enhancement
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_11(_x)          (0x0000002c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_11_PLL_SPARE_OUT(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_11_PLL_SPARE_OUT_of(_x) (((_x) >> 8) & 0xff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg12[2] - -
    Bits: 15:8  PllSpareIn(rw) - Spare in for future enhancement
    Bits:  7:4  StateDelay9(rw) - Reset sequence delay for TX ready assertion
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_12(_x)          (0x00000030 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_12_PLL_SPARE_IN(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_12_PLL_SPARE_IN_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_12_STATE_DELAY_9(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_12_STATE_DELAY_9_of(_x) (((_x) >> 4) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg13[2] - -
    Bits: 15:12 StateDelay1(rw) - Reset sequence different programmable stage delays between enables.
    Bits: 11:8  StateDelay2(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  7:4  StateDelay3(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  3:0  StateDelay4(rw) - Reset sequence different programmable stage delays between enables.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_13(_x)          (0x00000034 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_1(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_1_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_2(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_3(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_4(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_13_STATE_DELAY_4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg14[2] - -
    Bits: 15:12 StateDelay5(rw) - Reset sequence different programmable stage delays between enables.
    Bits: 11:8  StateDelay6(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  7:4  StateDelay7(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  3:0  StateDelay8(rw) - Reset sequence different programmable stage delays between enables.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_14(_x)          (0x00000038 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_5(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_5_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_6(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_6_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_7(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_7_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_8(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_14_STATE_DELAY_8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg15[2] - -
    Bits: 15:8  TXReady(ro) - TX calibration completed and ready for Transmit
    Bits:  7:0  RXReady(ro) - RX calibration done and ready for data receive.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_15(_x)          (0x0000003c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_15_TXREADY(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_15_TXREADY_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_15_RXREADY(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_15_RXREADY_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg16[2] - -
    Bits: 15    TXRateChangeEnaCh0(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits: 14    RXRateChangeEnaCh0(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits: 13    TXRateChangeEnaCh1(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits: 12    RXRateChangeEnaCh1(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits: 11    TXRateChangeEnaCh2(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits: 10    RXRateChangeEnaCh2(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits:  9    TXRateChangeEnaCh3(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits:  8    RXRateChangeEnaCh3(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits:  7    StateMcBypass(rw) - State machine bypass, reset sequence to be controlled by customer pins.
    Bits:  6    CalibrationDoneOverride(rw) - Calibration output bypass for reset sequence state machine.
    Bits:  5    BypassPllLock(rw) - Bypass pll lock for faster simulation
    Bits:  4:2  VcocalWaitBtwCode(rw) - wait between freq band/momsel code changes during VCO calibrations.
    Bits:  1    PvtUpManEna(rw) - Enable pull up calibration manual mode
    Bits:  0    PvtDnManEna(rw) - Enable pull dn calibration manual mode
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_16(_x)          (0x00000040 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_TXRATE_CHANGE_ENA_CH_0 BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_RXRATE_CHANGE_ENA_CH_0 BIT(14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_TXRATE_CHANGE_ENA_CH_1 BIT(13)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_RXRATE_CHANGE_ENA_CH_1 BIT(12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_TXRATE_CHANGE_ENA_CH_2 BIT(11)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_RXRATE_CHANGE_ENA_CH_2 BIT(10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_TXRATE_CHANGE_ENA_CH_3 BIT(9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_RXRATE_CHANGE_ENA_CH_3 BIT(8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_STATE_MC_BYPASS BIT(7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_CALIBRATION_DONE_OVERRIDE BIT(6)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_BYPASS_PLL_LOCK BIT(5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_VCOCAL_WAIT_BTW_CODE(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_VCOCAL_WAIT_BTW_CODE_of(_x) (((_x) >> 2) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_PVT_UP_MAN_ENA BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_16_PVT_DN_MAN_ENA BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg17[2] - -
    Bits: 15    PvtTermManEna(rw) - Enable term calibration manual mode
    Bits: 14:8  PvtCodeR2a(rw) - Binary coded pull up/dn and term compensation bus for manual code entry
    Bits:  7:5  ChannelSel(rw) - Will be used to manual program term/pvt code manually. Term_r2a values goes to different channel based on the channel select 000 = Ch0, 001 = Ch1, 010 = Ch2, 011 = Ch3, 100 - 111 = Reserved.
    Bits:  4:0  TermInit(rw) - Termination compensation initial code
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_17(_x)          (0x00000044 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_PVT_TERM_MAN_ENA BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_PVT_CODE_R2A(_x) (((_x) & 0x7f) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_PVT_CODE_R2A_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_CHANNEL_SEL(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_CHANNEL_SEL_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_TERM_INIT(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_17_TERM_INIT_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg18[2] - -
    Bits: 15:12 RSTSEQCurrentState(ro) - Reset seq State machine current state for debug.
    Bits: 11:8  VCOCALCurrentState(ro) - VCO calibration state machine current state
    Bits:  7:4  CMUTERMCurrentState(ro) - Termination and pull up/dn calibration state machine current state.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_18(_x)          (0x00000048 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_18_RSTSEQCURRENT_STATE(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_18_RSTSEQCURRENT_STATE_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_18_VCOCALCURRENT_STATE(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_18_VCOCALCURRENT_STATE_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_18_CMUTERMCURRENT_STATE(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_18_CMUTERMCURRENT_STATE_of(_x) (((_x) >> 4) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg19[2] - -
    Bits: 15:10 PllVcomomsel(ro) - VCO calibrated mom code for readout
    Bits:  9:4  PllVcomomselPcie3(ro) - VCO calibrated mom code for readout
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_19(_x)          (0x0000004c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_19_PLL_VCOMOMSEL(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_19_PLL_VCOMOMSEL_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_19_PLL_VCOMOMSEL_PCIE_3(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_19_PLL_VCOMOMSEL_PCIE_3_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg20[2] - -
    Bits: 15:8  DrvupErrorFail(ro) - Error Status for drv pull up calibration
    Bits:  7:0  DrvdnErrorFail(ro) - Error Status for drv pull dn calibration
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_20(_x)          (0x00000050 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_20_DRVUP_ERROR_FAIL(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_20_DRVUP_ERROR_FAIL_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_20_DRVDN_ERROR_FAIL(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_20_DRVDN_ERROR_FAIL_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg21[2] - -
    Bits: 15:8  TermErrorFail(ro) - Error status for term calibration
    Bits:  7:3  TermCh0(ro) - Termination compensation code
    Bits:  2    PvtCalDone(ro) - Reserved
    Bits:  1    PvtCalibDoneOvr(rw) - Reserved
    Bits:  0    PllLockDone(ro) - PLL lock count completion status. After this bit is asserted, pll_lock value is valid. 0 = Not done 1 = Done
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_21(_x)          (0x00000054 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_TERM_ERROR_FAIL(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_TERM_ERROR_FAIL_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_TERM_CH_0(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_TERM_CH_0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_PVT_CAL_DONE BIT(2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_PVT_CALIB_DONE_OVR BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_21_PLL_LOCK_DONE BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg22[2] - -
    Bits: 15:9  PvtPCh0(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh0(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_22(_x)          (0x00000058 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_22_PVT_PCH_0(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_22_PVT_PCH_0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_22_PVT_NCH_0(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_22_PVT_NCH_0_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg23[2] - -
    Bits: 15:9  PvtPCh1(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh1(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_23(_x)          (0x0000005c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_23_PVT_PCH_1(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_23_PVT_PCH_1_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_23_PVT_NCH_1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_23_PVT_NCH_1_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg24[2] - -
    Bits: 15:9  PvtPCh2(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh2(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_24(_x)          (0x00000060 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_24_PVT_PCH_2(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_24_PVT_PCH_2_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_24_PVT_NCH_2(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_24_PVT_NCH_2_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg25[2] - -
    Bits: 15:9  PvtPCh3(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh3(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_25(_x)          (0x00000064 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_25_PVT_PCH_3(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_25_PVT_PCH_3_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_25_PVT_NCH_3(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_25_PVT_NCH_3_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg26[2] - -
    Bits: 15:9  PvtPInit(rw) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNInit(rw) - Binary coded pull down compensation bus
    Bits:  0    ForcePllLock(rw) - Force pll lock
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_26(_x)          (0x00000068 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_26_PVT_PINIT(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_26_PVT_PINIT_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_26_PVT_NINIT(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_26_PVT_NINIT_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_26_FORCE_PLL_LOCK BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg27[2] - -
    Bits: 15:13 RefVoltSelCh0(rw) - Reference voltage selection for ch0 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused ,110 = Unused, 111 = Unused.
    Bits: 12:10 RefVoltSelCh1(rw) - Reference voltage selection for Ch1 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused, 110 = Unused, 111 = Unused.
    Bits:  9:7  RefVoltSelCh2(rw) - Reference voltage selection for Ch2 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused, 110 = Unused, 111 = Unused.
    Bits:  6:4  RefVoltSelCh3(rw) - Reference voltage selection for Ch3 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused, 110 = Unused, 111 = Unused.
    Bits:  3:1  ClkbufStren(rw) - Drive strength control for RX and TX clock buffers
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_27(_x)          (0x0000006c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_0(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_0_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_1(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_1_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_2(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_2_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_3(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_REF_VOLT_SEL_CH_3_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_CLKBUF_STREN(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_27_CLKBUF_STREN_of(_x) (((_x) >> 1) & 0x7)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg28[2] - -
    Bits: 15:0  StateMcOverrideCtrl(rw) - We use this bits for state machine override fucntions
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_28(_x)          (0x00000070 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_28_STATE_MC_OVERRIDE_CTRL(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_28_STATE_MC_OVERRIDE_CTRL_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg29[2] - -
    Bits: 15:11 TermCh1(ro) - Termination compensation code
    Bits: 10:6  TermCh2(ro) - Termination compensation code
    Bits:  5:1  TermCh3(ro) - Termination compensation code
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_29(_x)          (0x00000074 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_29_TERM_CH_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_29_TERM_CH_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_29_TERM_CH_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_29_TERM_CH_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_29_TERM_CH_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_29_TERM_CH_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg30[2] - -
    Bits: 15:14 PllRefdivGen3(rw) - Reference clock divider selection 00 = 1, 01 = 2, 10 = 4, 11 = 8
    Bits: 13:5  PllFbdivGen3(rw) - PLL feedback divider selection
    Bits:  4    PllPostDivby2Gen3(rw) - PLL post divider used for PCIE
    Bits:  3    PcieMode(rw) - Set to 1 for PCIE operation
    Bits:  2:1  LockCount(rw) - Number of times to compare reference and feedback clocks to count down for pll lock qualification.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_30(_x)          (0x00000078 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_PLL_REFDIV_GEN_3(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_PLL_REFDIV_GEN_3_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_PLL_FBDIV_GEN_3(_x) (((_x) & 0x1ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_PLL_FBDIV_GEN_3_of(_x) (((_x) >> 5) & 0x1ff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_PLL_POST_DIVBY_2GEN_3 BIT(4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_PCIE_MODE  BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_LOCK_COUNT(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_30_LOCK_COUNT_of(_x) (((_x) >> 1) & 0x3)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg31[2] - -
    Bits: 15:13 TxpclkbufStrenL0(rw) - Reserved
    Bits: 12:10 TxpclkbufStrenL1(rw) - Reserved
    Bits:  9:7  TxpclkbufStrenL2(rw) - Reserved
    Bits:  6:4  TxpclkbufStrenL3(rw) - Reserved
    Bits:  3    LosOverrideCh0(rw) - Force los to 0 for state machine to bypass
    Bits:  2    LosOverrideCh1(rw) - Force los to 0 for state machine to bypass
    Bits:  1    LosOverrideCh2(rw) - Force los to 0 for state machine to bypass
    Bits:  0    LosOverrideCh3(rw) - Force los to 0 for state machine to bypass
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_31(_x)          (0x0000007c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L0(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L0_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L1(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L1_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L2(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L2_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L3(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_TXPCLKBUF_STREN_L3_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_LOS_OVERRIDE_CH_0 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_LOS_OVERRIDE_CH_1 BIT(2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_LOS_OVERRIDE_CH_2 BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_31_LOS_OVERRIDE_CH_3 BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg32[2] - -
    Bits: 15    PinOverride(rw) - Override register for pin not controlled by cmode.
    Bits: 14    ForceVcocalStart(rw) - Force VCO calibr re-start
    Bits: 13    ClkDis(rw) - Unused
    Bits: 12    Iddtn(rw) - Active low
    Bits: 11    ForcePvtCalStart(rw) - Reserved
    Bits: 10    RefclkdivResetb(rw) - Refclk divider reset (active low) 0 = Reset 1 = Normal operation
    Bits:  9    PostDivby2Resetb(rw) - Reserved
    Bits:  8:7  IrefAdj(rw) - Adjusts the reference bias currents generated by the common-bias block of CMU.
    Bits:  6    ForceRateChangeRxCh0(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  5    ForceRateChangeTxCh0(rw) - Force ratechange from Regsiter or pin for TX
    Bits:  4    ForceRateChangeRxCh1(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  3    ForceRateChangeTxCh1(rw) - Force ratechange from Regsiter or pin for TX
    Bits:  2:1  PvtCalWaitSel(rw) - PVT calibration wait between code increment
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_32(_x)          (0x00000080 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_PIN_OVERRIDE BIT(15)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_FORCE_VCOCAL_START BIT(14)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_CLK_DIS    BIT(13)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_IDDTN      BIT(12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_FORCE_PVT_CAL_START BIT(11)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_REFCLKDIV_RESETB BIT(10)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_POST_DIVBY_2RESETB BIT(9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_IREF_ADJ(_x) (((_x) & 0x3) << 7)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_IREF_ADJ_of(_x) (((_x) >> 7) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_FORCE_RATE_CHANGE_RX_CH_0 BIT(6)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_FORCE_RATE_CHANGE_TX_CH_0 BIT(5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_FORCE_RATE_CHANGE_RX_CH_1 BIT(4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_FORCE_RATE_CHANGE_TX_CH_1 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_PVT_CAL_WAIT_SEL(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_32_PVT_CAL_WAIT_SEL_of(_x) (((_x) >> 1) & 0x3)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg33[2] - -
    Bits: 15:0  CustomerModeInv(rw) - Takes back control from customer mode pins, use table in customer_mode 0 = customer mode 1 = non-customer mode
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_33(_x)          (0x00000084 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_33_CUSTOMER_MODE_INV(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_33_CUSTOMER_MODE_INV_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg34[2] - -
    Bits: 15:12 VcoCalVthHiMin(rw) - VCO control voltage threshold setting for fine calibration
    Bits: 11:8  VcoCalVthHiMax(rw) - VCO control voltage threshold setting for coarse calibration.
    Bits:  7:4  VcoCalVthLoMin(rw) - VCO control voltage threshold setting for coarse calibration. Digital code represents low voltage value, 16 steps between 0 to Vcc/2 (Vcc=1.5V). 0=0 15 = Vcc/2
    Bits:  3:0  VcoCalVthLoMax(rw) - VCO control voltage threshold setting for fine calibration. Digital code represents low voltage value, 16 steps between 0 to Vcc/2 (Vcc=1.5V). 0=0 15 = Vcc/2
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_34(_x)          (0x00000088 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_HI_MIN(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_HI_MIN_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_HI_MAX(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_HI_MAX_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_LO_MIN(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_LO_MIN_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_LO_MAX(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_34_VCO_CAL_VTH_LO_MAX_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg35[2] - -
    Bits: 15:9  PllSscMod(rw) - SSC modulation value
    Bits:  8:0  CoreRevision(ro) - SSC pll count value
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_35(_x)          (0x0000008c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_35_PLL_SSC_MOD(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_35_PLL_SSC_MOD_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_35_CORE_REVISION(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_35_CORE_REVISION_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg36[2] - -
    Bits: 15:6  PllSscVstep(rw) - ssc veritical step selection
    Bits:  5    PllSscDsmsel(rw) - ssc dsm sel
    Bits:  4    PllSscEn(rw) - SSC PLL enable signal
    Bits:  3    ForceRateChangeRxCh2(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  2    ForceRateChangeTxCh2(rw) - Force ratechange from Regsiter or pin for TX
    Bits:  1    ForceRateChangeRxCh3(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  0    ForceRateChangeTxCh3(rw) - Force ratechange from Regsiter or pin for TX
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_36(_x)          (0x00000090 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_PLL_SSC_VSTEP(_x) (((_x) & 0x3ff) << 6)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_PLL_SSC_VSTEP_of(_x) (((_x) >> 6) & 0x3ff)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_PLL_SSC_DSMSEL BIT(5)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_PLL_SSC_EN BIT(4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_FORCE_RATE_CHANGE_RX_CH_2 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_FORCE_RATE_CHANGE_TX_CH_2 BIT(2)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_FORCE_RATE_CHANGE_RX_CH_3 BIT(1)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_36_FORCE_RATE_CHANGE_TX_CH_3 BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg37[2] - -
    Bits: 15:12 CTLECalDoneOvr(rw) - CTLE Override waiting for Done from state machine
    Bits: 11:8  LatchCalDoneOvr(rw) - Latch Override waiting for Done from state machine
    Bits:  7:4  SumOffCalDoneOvr(rw) - Summer Offset Override waiting for Done from state machine
    Bits:  3:0  FTSearchDoneOvr(rw) - Override waiting for Done from state machine
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_37(_x)          (0x00000094 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_CTLECAL_DONE_OVR(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_CTLECAL_DONE_OVR_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_LATCH_CAL_DONE_OVR(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_LATCH_CAL_DONE_OVR_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_SUM_OFF_CAL_DONE_OVR(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_SUM_OFF_CAL_DONE_OVR_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_FTSEARCH_DONE_OVR(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_37_FTSEARCH_DONE_OVR_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg38[2] - -
    Bits: 15:12 RXSeqStateCh0(ro) - RX Rate Change state machine current state read out - Ch0, for debug only.
    Bits: 11:8  RXSeqStateCh1(ro) - RX Rate Change state machine current state read out - Ch1, for debug only.
    Bits:  7:4  RXSeqStateCh2(ro) - RX Rate Change state machine current state read out - Ch2, for debug only.
    Bits:  3:0  RXSeqStateCh3(ro) - RX Rate Change state machine current state read out - Ch3, for debug only.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_38(_x)          (0x00000098 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_0(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_0_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_3(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_38_RXSEQ_STATE_CH_3_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg39[2] - -
    Bits: 15:12 TXSeqStateCh0(ro) - TX Rate Change state machine current state read out - Ch0, for debug only.
    Bits: 11:8  TXSeqStateCh1(ro) - TX Rate Change state machine current state read out - Ch1, for debug only.
    Bits:  7:4  TXSeqStateCh2(ro) - TX Rate Change state machine current state read out - Ch2, for debug only.
    Bits:  3:0  TXSeqStateCh3(ro) - TX Rate Change state machine current state read out - Ch3, for debug only.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUHSREG_39(_x)          (0x0000009c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_0(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_0_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_3(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_CMU_CMUHSREG_39_TXSEQ_STATE_CH_3_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg0[4] - -
    Bits: 15:11 CtleEqHr(rw) - CTLE Boost control , register programming Half Rate
    Bits: 10:6  CtleEqQr(rw) - CTLE Boost control , register programming - Half Rate
    Bits:  5:1  CtleEqFr(rw) - CTLE Boost control , register programming - Half Rate
    Bits:  0    Reserved(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_0(_x)          (0x00000800 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_CTLE_EQ_HR(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_CTLE_EQ_HR_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_CTLE_EQ_QR(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_CTLE_EQ_QR_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_CTLE_EQ_FR(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_CTLE_EQ_FR_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_0_RESERVED   BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg1[4] - -
    Bits: 15:12 Rxacvcm(rw) - CTLE common mode voltage 0000 = 911mV 0001 = 865mV 0011 = 816mV 0111 = 766mV 1111 = 714mV
    Bits: 11:7  CtleEq(rw) - CTLE Boost control , register programming
    Bits:  6:5  Rxvreg1(rw) - Bias current control for the 1.0V voltage regulator
    Bits:  4:3  Rxvreg1p2(rw) - Bias current control for the 1.2V voltage regulator
    Bits:  2:1  RxirefAdj(rw) - Bias current control for the Rx circuit blocks except the voltage regulators
    Bits:  0    PWRBypass(rw) - Bypass analog regulator when power supply is 1.35v
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_1(_x)          (0x00000804 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXACVCM(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXACVCM_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_CTLE_EQ(_x) (((_x) & 0x1f) << 7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_CTLE_EQ_of(_x) (((_x) >> 7) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXVREG_1(_x) (((_x) & 0x3) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXVREG_1_of(_x) (((_x) >> 5) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXVREG_1P_2(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXVREG_1P_2_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXIREF_ADJ(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_RXIREF_ADJ_of(_x) (((_x) >> 1) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_1_PWRBYPASS  BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg2[4] - -
    Bits: 15    Resetb(rw) - Soft main reset
    Bits: 14    ResetTerm(rw) - Soft reset for Termination logic.
    Bits: 13    ResetbTXA(rw) - Connects to analog TX_reset_b
    Bits: 12    ResetbTXD(rw) - Digital Reset TX
    Bits: 11    BistEnaTx(rw) - Bist Enable for TX
    Bits: 10    TxInv(rw) - Swap TXP/TXN, Done in TX digital logic.
    Bits:  9    TxPvtBypass(rw) - Bypass pvt up/dn with input data.
    Bits:  8    VttEna(rw) - Term code update strobe 0 = disable ( hold previous vtt_sel value) , 1= Enable(latch VTT value based on the vtt_sel[1:0] )
    Bits:  7:6  VttSel(rw) - VTT selection. 00 - Floating termination , 01 - Termination to Ground ,10 - Termiantion to VDDIO, 11 - Termination to VDDIO/2
    Bits:  5    TxFifoEna(rw) - TX fifo Enable ,1 - Fifo enable
    Bits:  4    TxPdown(rw) - TX power down
    Bits:  3:2  TxRcvdetSel(rw) - Receiver detect select
    Bits:  1    Iddtn(rw) - active low
    Bits:  0    Rxpdbias(rw) - Rx power Down for Bias generator
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_2(_x)          (0x00000808 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_RESETB     BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_RESET_TERM BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_RESETB_TXA BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_RESETB_TXD BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_BIST_ENA_TX BIT(11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_TX_INV     BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_TX_PVT_BYPASS BIT(9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_VTT_ENA    BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_VTT_SEL(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_VTT_SEL_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_TX_FIFO_ENA BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_TX_PDOWN   BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_TX_RCVDET_SEL(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_TX_RCVDET_SEL_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_IDDTN      BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_2_RXPDBIAS   BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg3[4] - -
    Bits: 15:14 TXDatarate(rw) - TX Rate divider select, 00 = Fullrate, 01 = Halfrate, 10 = Quarter rate, 11 = Fifth rate
    Bits: 13:11 TXWordmode(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit,010 = 16bit, 011 = 20bit, 100 = 32bit,101 = 40bit,110 = 64bit,111 = 66bit
    Bits: 10:8  TXPRBSSel(rw) - TX prbs select , 000 = PRBS7, 001 = PRBS9, 010 = PRB11, 011 = PRBS23, 100 = PRBS31
    Bits:  7    TxrxLpbk(rw) - Forward loopback from TX to RX
    Bits:  5:3  CounterTimeSelCp(rw) - Programmable wait time for sending out ack to upper layer
    Bits:  2:0  CounterTimeSelCn(rw) - Programmable wait time for sending out ack to upper layer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_3(_x)          (0x0000080c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXDATARATE(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXDATARATE_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXWORDMODE(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXWORDMODE_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXPRBSSEL(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXPRBSSEL_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_TXRX_LPBK  BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_COUNTER_TIME_SEL_CP(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_COUNTER_TIME_SEL_CP_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_COUNTER_TIME_SEL_CN(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_3_COUNTER_TIME_SEL_CN_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg4[4] - -
    Bits: 15:11 TxCn1(rw) - Register programmable pre_emph1, selected using customer mode pin.
    Bits: 10:5  TxCp1(rw) - Register programmable post_emph, selected using customer mode pin.
    Bits:  4:0  TxCn2(rw) - Register programmable pre_emph2, selected using customer mode pin.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_4(_x)          (0x00000810 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_4_TX_CN_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_4_TX_CN_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_4_TX_CP_1(_x) (((_x) & 0x3f) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_4_TX_CP_1_of(_x) (((_x) >> 5) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_4_TX_CN_2(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_4_TX_CN_2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg5[4] - -
    Bits: 15    TxCn1Inv(rw) - Invert CN1 Co-efficient value 0 - Default and negative , 1 - Positive
    Bits: 14    TxCn2Inv(rw) - Invert CN2 Co-efficient value 0 - Default and positive, 1 - Reduced the amplitude of the signal by i_tx_cn2[4:0] value.
    Bits: 13    TxCp1Inv(rw) - Invert CP1 Co-efficient value 0 - Default and negetive , 1 - Positive
    Bits: 12    IdleRaw(rw) - TX uses the Raw Idle or delayed
    Bits: 11    TxDataRev(rw) - Bit order within a word is reversed. Big to little endian swap. 0 = Little endian 1 = Big endian
    Bits: 10:7  TxampCntl(rw) - TX amplitude, binary weighted boost control
    Bits:  6    TxampEna(rw) - TX_amplitude enable
    Bits:  5    RxdetEna(rw) - When asserted, drives rising edge on to the pad and sends signal to controller when pad voltage crosses 500mv
    Bits:  4    RxdetClr(rw) - When asserted, forces 0 on to pad and sends signal to controller when pad voltage goes below 100mv
    Bits:  3    TxIdle(rw) - TX idle. Output goes to Vcm when asserted 1= Enter TX idle
    Bits:  2    TxsyncResetb(rw) - Unused
    Bits:  1    RxBistResync(rw) - Re-sync the RX bert logic, without reset.
    Bits:  0    RxBistErrcntRd(rw) - Read internal Bist error counter calue
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_5(_x)          (0x00000814 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TX_CN_1INV BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TX_CN_2INV BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TX_CP_1INV BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_IDLE_RAW   BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TX_DATA_REV BIT(11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TXAMP_CNTL(_x) (((_x) & 0xf) << 7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TXAMP_CNTL_of(_x) (((_x) >> 7) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TXAMP_ENA  BIT(6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_RXDET_ENA  BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_RXDET_CLR  BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TX_IDLE    BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_TXSYNC_RESETB BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_RX_BIST_RESYNC BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_5_RX_BIST_ERRCNT_RD BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg6[4] - -
    Bits: 15    RxtxRevlpbk(rw) - Rx to TX analog reverse loopback
    Bits: 13:11 RXWordmode(rw) - RX Word modes select, 000 = 8bit, 001 = 10bit, 010=16bit, 011=20bit, 100=32bit, 101=40bit, 110=64bit, 111=66bit
    Bits: 10:9  RXDatarate(rw) - RX Rate divider select, 00=Fullrate, 01=Halfrate, 10=Quarter rate, 11 = Fifth rate
    Bits:  8    ResetbRxd(rw) - Digital RX reset
    Bits:  7    ResetbRxa(rw) - Analog RX reset
    Bits:  6    BistEnaRx(rw) - Bist enable for RX
    Bits:  5:3  RXPRBSSel(rw) - RX prbs select , 000 = PRBS7, 001=PRBS9, 010=PRB11, 011=PRBS23, 100=PRBS31
    Bits:  2:0  BistWaitDelay(rw) - Wait delay in wordclk before declaring PRBS Sync to incoming data
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_6(_x)          (0x00000818 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXTX_REVLPBK BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXWORDMODE(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXWORDMODE_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXDATARATE(_x) (((_x) & 0x3) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXDATARATE_of(_x) (((_x) >> 9) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RESETB_RXD BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RESETB_RXA BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_BIST_ENA_RX BIT(6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXPRBSSEL(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_RXPRBSSEL_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_BIST_WAIT_DELAY(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_6_BIST_WAIT_DELAY_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg7[4] - -
    Bits: 15    RxtxParlpbk(rw) - Rx to TX parallel reverse loopback enable - Active high
    Bits: 14    CDRLoopEna(rw) - CDR loop enable
    Bits: 13    CDRLoopEnaForce(rw) - CDR loop enable force bit.
    Bits: 12    RevUpdnPhase(rw) - Reverse UP Down control for Phase loop
    Bits: 11    CdrBypassRxlos(rw) - Reverse UP Down control for Freq loop
    Bits: 10    CdrLoopSnapshotEna(rw) - Snap CDR Loop Value for register reading
    Bits:  9    SSCEnable(rw) - Used for SSC 5000PPM support
    Bits:  8    RxlosDisable(rw) - Power down for RXLOS circuit
    Bits:  7:4  RxlosVref(rw) - LOS vref voltage
    Bits:  3    TxBistInjectErr(rw) - Inject 1 bit error on tx bist path -PRBS
    Bits:  1    CdrBwTimerReset(rw) - CDR gearshifting timer reset
    Bits:  0    SwapLmsdata(rw) - Swap lms data - for debug use only.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_7(_x)          (0x0000081c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_RXTX_PARLPBK BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_CDRLOOP_ENA BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_CDRLOOP_ENA_FORCE BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_REV_UPDN_PHASE BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_CDR_BYPASS_RXLOS BIT(11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_CDR_LOOP_SNAPSHOT_ENA BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_SSCENABLE  BIT(9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_RXLOS_DISABLE BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_RXLOS_VREF(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_RXLOS_VREF_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_TX_BIST_INJECT_ERR BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_CDR_BW_TIMER_RESET BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_7_SWAP_LMSDATA BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg8[4] - -
    Bits: 15:10 FTPos7Reg(ro) - Floating tap adopted position value for tap7; Should be between 7 and 42, based on position
    Bits:  9:4  FTPos8Reg(ro) - Floating tap adopted position value for tap8; Should be between 7 and 42, based on position
    Bits:  3    TxRxPresMid(ro) - Receiver detect comparator output, asserts 1 when pad voltage is above voltage threshold specified in tx_rcvdet_sel (rxtx_reg2)
    Bits:  2    TxRxPresZero(ro) - Receiver detect comparator output, asserts 1 when pad voltage is below 100mV
    Bits:  1    RxtxParlpbkClk(rw) - Rx to TX parallel reverse loopback clk sel - Active high
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_8(_x)          (0x00000820 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_FTPOS_7REG(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_FTPOS_7REG_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_FTPOS_8REG(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_FTPOS_8REG_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_TX_RX_PRES_MID BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_TX_RX_PRES_ZERO BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_8_RXTX_PARLPBK_CLK BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg9[4] - -
    Bits: 15:10 FTPos9Reg(ro) - Floating tap adopted position value for tap9; Should be between 7 and 42, based on position
    Bits:  9:4  FTPosaReg(ro) - Floating tap adopted position value for tap10; Should be between 7 and 42, based on position
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_9(_x)          (0x00000824 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_9_FTPOS_9REG(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_9_FTPOS_9REG_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_9_FTPOSA_REG(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_9_FTPOSA_REG_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg10[4] - -
    Bits: 15:11 PhaseAdjustLimit(rw) - Phase adjsut upper/lower limit
    Bits: 10    CaptureFtpos(rw) - Read floating tap positions, on rising edge loads accumulator value into register
    Bits:  9:4  FTPos4(ro) - Unused. 5th floating tap.
    Bits:  3:1  CDRAccumulatorSel(rw) - CDR_accumulator select for read and load
    Bits:  0    RXIGENPdown(rw) - Power down RX current gen Block.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_10(_x)         (0x00000828 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_PHASE_ADJUST_LIMIT(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_PHASE_ADJUST_LIMIT_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_CAPTURE_FTPOS BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_FTPOS_4(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_FTPOS_4_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_CDRACCUMULATOR_SEL(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_CDRACCUMULATOR_SEL_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_10_RXIGENPDOWN BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg11[4] - -
    Bits: 15    RxWordclkInv(rw) - Enable Eye Scan Logic.
    Bits: 14    ErrorLatchSwap(rw) - Erro Latch odd postion swap.
    Bits: 13    LatchOffEna(rw) - RX latch offset enable for calibration.
    Bits: 12    RxPdown(rw) - RX powerdown
    Bits: 11    RxInv(rw) - Swap RXP/RXN, Done in RX digital logic.
    Bits: 10    RxDataRev(rw) - Reverse rx_data ( swap)
    Bits:  9    Enable3pole(rw) - Enabel 3rd pole for ssc support
    Bits:  8    TXP0Pd(rw) - PCIE L0 power down control for TX
    Bits:  5    RXP0Pd(rw) - PCIE L0 power down control for RX
    Bits:  4    RXP1Pd(rw) - PCIE L1 power down control for RX
    Bits:  3    RXP2Pd(rw) - PCIE L2 power down control for RX
    Bits:  2    SumosEnable(rw) - Summer offset enable to power up summer calibration comparator 0 = Disabled 1 = Enabled
    Bits:  1    RxTermDisable(rw) - Tristate TX termination
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_11(_x)         (0x0000082c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RX_WORDCLK_INV BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_ERROR_LATCH_SWAP BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_LATCH_OFF_ENA BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RX_PDOWN  BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RX_INV    BIT(11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RX_DATA_REV BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_ENABLE_3POLE BIT(9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_TXP0PD    BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RXP0PD    BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RXP1PD    BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RXP2PD    BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_SUMOS_ENABLE BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_11_RX_TERM_DISABLE BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg12[4] - -
    Bits: 15:0  RXSpare(rw) - Spare input pin for RX, future enhancement.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_12(_x)         (0x00000830 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_12_RXSPARE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_12_RXSPARE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg13[4] - -
    Bits: 14    LatClkSel(rw) - Swap Xlat position from Rigth Crossign to Left crossing for CDR.
    Bits: 13    ErrLatOddPolInv(rw) - Changes only the polarity on the odd error latch.
    Bits: 12    ErrLatEvenPolInv(rw) - Changes only the polarity on the even error latch.
    Bits: 11:7  RxAtoSel(rw) - RX ATO select for test purpose.
    Bits:  6    CtleLatcalManEna(rw) - Manual calibration enable for CTLE latch.
    Bits:  5:0  ClteLatcalManProg(rw) - Manual programming LATCH offset
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_13(_x)         (0x00000834 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_LAT_CLK_SEL BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_ERR_LAT_ODD_POL_INV BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_ERR_LAT_EVEN_POL_INV BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_RX_ATO_SEL(_x) (((_x) & 0x1f) << 7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_RX_ATO_SEL_of(_x) (((_x) >> 7) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_CTLE_LATCAL_MAN_ENA BIT(6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_CLTE_LATCAL_MAN_PROG(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_13_CLTE_LATCAL_MAN_PROG_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg14[4] - -
    Bits: 15:9  CdrPiTap(ro) - CDR PI tap value, Snaped and transfer to AHB domain for Debug
    Bits:  8    CdrLock(ro) - CDR lock status bit
    Bits:  7:1  CdrPqTap(ro) - CDR PQ tap value, Snapped and transfer to AHB domain for debug
    Bits:  0    ForceCdrLock(rw) - Sets cdr_lock register to 1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_14(_x)         (0x00000838 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_14_CDR_PI_TAP(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_14_CDR_PI_TAP_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_14_CDR_LOCK  BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_14_CDR_PQ_TAP(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_14_CDR_PQ_TAP_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_14_FORCE_CDR_LOCK BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg15[4] - -
    Bits: 15:9  EscanTap(ro) - CDR Eye SCAN horizontal tap value, Snapped and transfer to AHB domain for debug+
    Bits:  7:1  EscanVmargin(rw) - Vertical margin/step control for Eye scan latch.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_15(_x)         (0x0000083c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_15_ESCAN_TAP(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_15_ESCAN_TAP_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_15_ESCAN_VMARGIN(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_15_ESCAN_VMARGIN_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg16[4] - -
    Bits: 15:10 DOLatchCalout(ro) - Data Latch code read out - Odd
    Bits:  9:4  XOLatchCalout(ro) - Crossing Latch code read out - Odd
    Bits:  3:0  LatchCalFailOdd(ro) - Latch Calibration Odd latch status bit
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_16(_x)         (0x00000840 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_16_DOLATCH_CALOUT(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_16_DOLATCH_CALOUT_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_16_XOLATCH_CALOUT(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_16_XOLATCH_CALOUT_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_16_LATCH_CAL_FAIL_ODD(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_16_LATCH_CAL_FAIL_ODD_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg17[4] - -
    Bits: 15:10 EOLatchCalout(ro) - Error Latch code read out - Odd
    Bits:  9:4  SOLatchCalout(ro) - Eye Scan Latch code read out - Odd
    Bits:  3:0  LatchCalFailEven(ro) - Latch calibration Even latch status bit
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_17(_x)         (0x00000844 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_17_EOLATCH_CALOUT(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_17_EOLATCH_CALOUT_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_17_SOLATCH_CALOUT(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_17_SOLATCH_CALOUT_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_17_LATCH_CAL_FAIL_EVEN(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_17_LATCH_CAL_FAIL_EVEN_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg18[4] - -
    Bits: 15:10 DELatchCalout(ro) - Data Latch code read out - Even
    Bits:  9:4  XELatchCalout(ro) - Crossing Latch code read out - Even
    Bits:  3    RxlosOut(ro) - Loss of signal detector output - RAW
    Bits:  2    RxlosFilteredOut(ro) - Filtered LOS output
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_18(_x)         (0x00000848 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_18_DELATCH_CALOUT(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_18_DELATCH_CALOUT_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_18_XELATCH_CALOUT(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_18_XELATCH_CALOUT_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_18_RXLOS_OUT BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_18_RXLOS_FILTERED_OUT BIT(2)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg19[4] - -
    Bits: 15:10 EELatchCalout(ro) - Error Latch code read out - Even
    Bits:  9:4  SELatchCalout(ro) - Eye Scan Latch code read out - Even
    Bits:  3    TxBcCp1Up(ro) - back channel Post cursor UP signal
    Bits:  2    TxBcCn1Up(ro) - back channel Pre cursor UP signal
    Bits:  1    TxBcCp1Dn(ro) - back channel Post cursor UP signal
    Bits:  0    TxBcCn1Dn(ro) - back channel Pre cursor UP signal
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_19(_x)         (0x0000084c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_EELATCH_CALOUT(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_EELATCH_CALOUT_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_SELATCH_CALOUT(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_SELATCH_CALOUT_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_TX_BC_CP_1UP BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_TX_BC_CN_1UP BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_TX_BC_CP_1DN BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_19_TX_BC_CN_1DN BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg20[4] - -
    Bits: 15:14 SwitchErrorLatch(rw) - Error latch multiplexing selection 00 = +-, 01 = -+ , 10 = --, 11 = ++.
    Bits: 13:11 PeriodErrorLatch(rw) - period at which the Error latch switch 000 = 512T, 001 = 1024T, 010 = 2048T, 011=4096T, 100 = 8192T, 101=16384T
    Bits: 10:7  DFETapSelect(rw) - DFE tap value read out select 0 = H0, 1 = H1, 2 = H2, 3 = H3, 4 = H4, 5 = H5, 6 = H6, 7 = H7, 8 = H8, 9 = H9, 10 = H10, 11 = Hs
    Bits:  2    BlwcEna(rw) - BLWC analog logic enable
    Bits:  1    H0SignRev(rw) - H0 Sign going to analog is reversed.
    Bits:  0    DFETapWriteEna(rw) - Enable Write to DFE tap selected by the DFE tap select value.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_20(_x)         (0x00000850 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_SWITCH_ERROR_LATCH(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_SWITCH_ERROR_LATCH_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_PERIOD_ERROR_LATCH(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_PERIOD_ERROR_LATCH_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_DFETAP_SELECT(_x) (((_x) & 0xf) << 7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_DFETAP_SELECT_of(_x) (((_x) >> 7) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_BLWC_ENA  BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_H0SIGN_REV BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_20_DFETAP_WRITE_ENA BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg21[4] - -
    Bits: 15:14 RxpdConfig(rw) - Reserved.
    Bits: 13:11 RxpdBlock(rw) - Power-down control for top-level blocks in the RX analog core.
    Bits: 10    FloatingSrcStart(rw) - Floating tap search manual restart Floating start search.
    Bits:  9:5  CtleCalHsLevel(ro) - Manually program FT tap position.
    Bits:  4:1  AlphaBlwc(rw) - BLWC loop accumulator loop alpha
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_21(_x)         (0x00000854 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_RXPD_CONFIG(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_RXPD_CONFIG_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_RXPD_BLOCK(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_RXPD_BLOCK_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_FLOATING_SRC_START BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_CTLE_CAL_HS_LEVEL(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_CTLE_CAL_HS_LEVEL_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_ALPHA_BLWC(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_21_ALPHA_BLWC_of(_x) (((_x) >> 1) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg22[4] - -
    Bits: 15:0  DFETapEna(rw) - Enable for Each DFE loops and Back channel loops. h0, h1-h10, hs. 0000_0000_0000_0001 = H0, 0000_0000_0000_0010 = H1,0000_0000_0000_0100 = H2, 0000_0000_0000_1000 = H3, 0000_0000_0001_0000 = H4, 0000_0000_0010_0000 = H5,0000_0000_0100_0000 = H6, 0000_0000_1000_0000 = H7, 0000_0001_0000_0000 = H8, 0000_0010_0000_0000 = H9,0000_0100_0000_0000 = H10, 0000_1000_0000_0000 = Hs, 0001_0000_0000_0000 = Blwc loop,0010_0000_0000_0000 = Phase Adj loop
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_22(_x)         (0x00000858 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_22_DFETAP_ENA(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_22_DFETAP_ENA_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg23[4] - -
    Bits: 15:9  DFEPresetValueH0(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH1(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_23(_x)         (0x0000085c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_23_DFEPRESET_VALUE_H0(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_23_DFEPRESET_VALUE_H0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_23_DFEPRESET_VALUE_H1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_23_DFEPRESET_VALUE_H1_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg24[4] - -
    Bits: 15:9  DFEPresetValueH2(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH3(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_24(_x)         (0x00000860 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_24_DFEPRESET_VALUE_H2(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_24_DFEPRESET_VALUE_H2_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_24_DFEPRESET_VALUE_H3(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_24_DFEPRESET_VALUE_H3_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg25[4] - -
    Bits: 15:9  DFEPresetValueH4(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH5(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_25(_x)         (0x00000864 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_25_DFEPRESET_VALUE_H4(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_25_DFEPRESET_VALUE_H4_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_25_DFEPRESET_VALUE_H5(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_25_DFEPRESET_VALUE_H5_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg26[4] - -
    Bits: 15:9  DFEPresetValueH6(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH7(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_26(_x)         (0x00000868 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_26_DFEPRESET_VALUE_H6(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_26_DFEPRESET_VALUE_H6_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_26_DFEPRESET_VALUE_H7(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_26_DFEPRESET_VALUE_H7_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg27[4] - -
    Bits: 15:9  DFEPresetValueH8(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH9(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_27(_x)         (0x0000086c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_27_DFEPRESET_VALUE_H8(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_27_DFEPRESET_VALUE_H8_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_27_DFEPRESET_VALUE_H9(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_27_DFEPRESET_VALUE_H9_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg28[4] - -
    Bits: 15:9  DFEPresetValueH10(rw) - DFE loop preset value
    Bits:  8    RXClkSlewCntl(rw) - RX clock skew control?
    Bits:  7    EkbcRev(rw) - ek bit to BC tap loop is revered
    Bits:  6    RxlosFlPdown(rw) - LOS filter power down.
    Bits:  5    LfpsOverride(rw) - USB3 LFPS 0 = User pattern mode, clock is internal clock 1 = Clock to drive pattern is coming from PIPE
    Bits:  4:2  CdrLockCount(rw) - Number of cycles over which to assess CDR lock condition 000 = count 64 cycle, 001 = count 128 cycle, 010 = count 256 cycle, 011 = count 512 cycle, 100 = count 1024 cycle, 101 = count 2048 cycle, 110 = count 4k cycle ,111 = count 8k cycle
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_28(_x)         (0x00000870 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_DFEPRESET_VALUE_H10(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_DFEPRESET_VALUE_H10_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_RXCLK_SLEW_CNTL BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_EKBC_REV  BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_RXLOS_FL_PDOWN BIT(6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_LFPS_OVERRIDE BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_CDR_LOCK_COUNT(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_28_CDR_LOCK_COUNT_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg29[4] - -
    Bits: 15:8  TXSpareOut(ro) - Spare output for future observability
    Bits:  7:0  RXSpareOut(ro) - Spare output for future observability
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_29(_x)         (0x00000874 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_29_TXSPARE_OUT(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_29_TXSPARE_OUT_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_29_RXSPARE_OUT(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_29_RXSPARE_OUT_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg30[4] - -
    Bits: 15:0  CustomerPinmodeInv(rw) - Customer pin override.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_30(_x)         (0x00000878 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_30_CUSTOMER_PINMODE_INV(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_30_CUSTOMER_PINMODE_INV_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg31[4] - -
    Bits: 15:8  TXUserPatt16(rw) - Bits [263:256] of 264 bits of user patterns
    Bits:  7    TXUserPattSel(rw) - User pattern enable LFPS support 0 = Normal mode, 1 = Select user pattern and LFPS for Trasmit.
    Bits:  6:0  Dcofst(ro) - BLWC lms loop output for read only
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_31(_x)         (0x0000087c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_31_TXUSER_PATT_16(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_31_TXUSER_PATT_16_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_31_TXUSER_PATT_SEL BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_31_DCOFST(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_31_DCOFST_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg32[4] - -
    Bits: 15:0  TXUserPatt15(rw) - Bits [255:240] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_32(_x)         (0x00000880 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_32_TXUSER_PATT_15(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_32_TXUSER_PATT_15_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg33[4] - -
    Bits: 15:0  TXUserPatt14(rw) - Bits [239:224] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_33(_x)         (0x00000884 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_33_TXUSER_PATT_14(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_33_TXUSER_PATT_14_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg34[4] - -
    Bits: 15:0  TXUserPatt13(rw) - Bits [223:208] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_34(_x)         (0x00000888 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_34_TXUSER_PATT_13(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_34_TXUSER_PATT_13_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg35[4] - -
    Bits: 15:0  TXUserPatt12(rw) - Bits [207:192] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_35(_x)         (0x0000088c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_35_TXUSER_PATT_12(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_35_TXUSER_PATT_12_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg36[4] - -
    Bits: 15:0  TXUserPatt11(rw) - Bits [191:176] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_36(_x)         (0x00000890 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_36_TXUSER_PATT_11(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_36_TXUSER_PATT_11_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg37[4] - -
    Bits: 15:0  TXUserPatt10(rw) - Bits [175:160] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_37(_x)         (0x00000894 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_37_TXUSER_PATT_10(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_37_TXUSER_PATT_10_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg38[4] - -
    Bits: 15:0  TXUserPatt9(rw) - Bits [159:144] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_38(_x)         (0x00000898 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_38_TXUSER_PATT_9(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_38_TXUSER_PATT_9_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg39[4] - -
    Bits: 15:0  TXUserPatt8(rw) - Bits [143:1128] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_39(_x)         (0x0000089c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_39_TXUSER_PATT_8(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_39_TXUSER_PATT_8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg40[4] - -
    Bits: 15:0  TXUserPatt7(rw) - Bits [127:112] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_40(_x)         (0x000008a0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_40_TXUSER_PATT_7(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_40_TXUSER_PATT_7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg41[4] - -
    Bits: 15:0  TXUserPatt6(rw) - Bits [111:96] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_41(_x)         (0x000008a4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_41_TXUSER_PATT_6(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_41_TXUSER_PATT_6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg42[4] - -
    Bits: 15:0  TXUserPatt5(rw) - Bits [95:80] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_42(_x)         (0x000008a8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_42_TXUSER_PATT_5(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_42_TXUSER_PATT_5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg43[4] - -
    Bits: 15:0  TXUserPatt4(rw) - Bits [79:64] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_43(_x)         (0x000008ac + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_43_TXUSER_PATT_4(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_43_TXUSER_PATT_4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg44[4] - -
    Bits: 15:0  TXUserPatt3(rw) - Bits [63:48] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_44(_x)         (0x000008b0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_44_TXUSER_PATT_3(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_44_TXUSER_PATT_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg45[4] - -
    Bits: 15:0  TXUserPatt2(rw) - Bits [47:32] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_45(_x)         (0x000008b4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_45_TXUSER_PATT_2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_45_TXUSER_PATT_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg46[4] - -
    Bits: 15:0  TXUserPatt1(rw) - Bits [31:16] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_46(_x)         (0x000008b8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_46_TXUSER_PATT_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_46_TXUSER_PATT_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg47[4] - -
    Bits: 15:0  TXUserPatt0(rw) - Bits [15:0] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_47(_x)         (0x000008bc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_47_TXUSER_PATT_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_47_TXUSER_PATT_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg48[4] - -
    Bits: 15:14 RXUserPatt4(ro) - Bits [5:64] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_48(_x)         (0x000008c0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_48_RXUSER_PATT_4(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_48_RXUSER_PATT_4_of(_x) (((_x) >> 14) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg49[4] - -
    Bits: 15:0  RXUserPatt3(ro) - Bits [63:48] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_49(_x)         (0x000008c4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_49_RXUSER_PATT_3(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_49_RXUSER_PATT_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg50[4] - -
    Bits: 15:0  RXUserPatt2(ro) - Bits [47:32] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_50(_x)         (0x000008c8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_50_RXUSER_PATT_2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_50_RXUSER_PATT_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg51[4] - -
    Bits: 15:0  RXUserPatt1(ro) - Bits [31:16] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_51(_x)         (0x000008cc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_51_RXUSER_PATT_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_51_RXUSER_PATT_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg52[4] - -
    Bits: 15:0  RXUserPatt0(ro) - Bits [15:0] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_52(_x)         (0x000008d0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_52_RXUSER_PATT_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_52_RXUSER_PATT_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg53[4] - -
    Bits: 15    RxPllSELECT(rw) - Pll Select for RX 0 = Select High speed PLL, 1 = Select Low speed PLL
    Bits: 14    TxPllSELECT(rw) - Pll select for TX 0 = Select High speed PLL, 1 = Select Low speed PLL
    Bits: 13:10 PiSpdSelCdr(rw) - Speed Select for Different Data Standards.
    Bits:  9    EyeMonitorCapture(rw) - Capture the Eye monitor coutner and accumulator values
    Bits:  8    EyeAccResetb(rw) - Soft reset for Eye monitor counter and accumulator reset
    Bits:  7:6  EyeCountWidthSel(rw) - Eye Monitor coutner width select 00 = 12bit coutner, 01 = 16bit coutner, 10 = 24bit coutner, 11 = 32bit coutner
    Bits:  5    BertResetb(rw) - Reset bert logic
    Bits:  3    LoadFreqShift(rw) - Load Freq loop with initial value enable
    Bits:  2    MuTimerReset(rw) - Gearshifting timer reset. 0 = Normal operation 1 = Reset
    Bits:  1    BlwcManEna(rw) - Base line wander manual program enable
    Bits:  0    DFETabAccb(rw) - Select to write either DFE tap coefficient or accumulator value 0 = Write to accumulator 1 = Write to tap coefficient
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_53(_x)         (0x000008d4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_RX_PLL_SELECT BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_TX_PLL_SELECT BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_PI_SPD_SEL_CDR(_x) (((_x) & 0xf) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_PI_SPD_SEL_CDR_of(_x) (((_x) >> 10) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_EYE_MONITOR_CAPTURE BIT(9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_EYE_ACC_RESETB BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_EYE_COUNT_WIDTH_SEL(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_EYE_COUNT_WIDTH_SEL_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_BERT_RESETB BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_LOAD_FREQ_SHIFT BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_MU_TIMER_RESET BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_BLWC_MAN_ENA BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_53_DFETAB_ACCB BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg54[4] - -
    Bits: 15    CdrLockReset(rw) - Resets cdr_lock and lock timer to zero
    Bits: 14    H1QlatchSignInv(rw) - H1 Sign for Q latch
    Bits: 13:11 PeriodH1Qlatch(rw) - Period at which to switch the H1 latch control for qlatch 0 = No switching 1 = ((2^1)-1)*128UI 2 = ((2^2)-1)*128UI 7 = ((2^7)-1)*128UI
    Bits: 10    SwitchH1Qlatch(rw) - Switch the polarity of the h1 speculation for eye scan according to the period set in period_h1_qlatch 0: Don't switch 1: Switch according to period set in period_h1_qlatch
    Bits:  9:0  EyeCountThres(rw) - Eye monitor threshold for CTLE calibration.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_54(_x)         (0x000008d8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_CDR_LOCK_RESET BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_H1QLATCH_SIGN_INV BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_PERIOD_H1QLATCH(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_PERIOD_H1QLATCH_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_SWITCH_H1QLATCH BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_EYE_COUNT_THRES(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_54_EYE_COUNT_THRES_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg55[4] - -
    Bits: 15:5  InitFreqShiftMsb(rw) - Initial freq shift value for Freq loop
    Bits:  4:2  SlipRate(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_55(_x)         (0x000008dc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_55_INIT_FREQ_SHIFT_MSB(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_55_INIT_FREQ_SHIFT_MSB_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_55_SLIP_RATE(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_55_SLIP_RATE_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg56[4] - -
    Bits: 15:0  InitFreqShiftLsb(rw) - Initial frequency shift value for frequency accumulator LSB, to be loaded by LoadFreq_shift (rxtx_reg53)
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_56(_x)         (0x000008e0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_56_INIT_FREQ_SHIFT_LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_56_INIT_FREQ_SHIFT_LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg57[4] - -
    Bits: 15:0  LoopbwTap1Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_57(_x)         (0x000008e4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_57_LOOPBW_TAP_1MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_57_LOOPBW_TAP_1MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg58[4] - -
    Bits: 15:0  LoopbwTap1Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_58(_x)         (0x000008e8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_58_LOOPBW_TAP_1LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_58_LOOPBW_TAP_1LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg59[4] - -
    Bits: 15:0  LoopbwTap2Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_59(_x)         (0x000008ec + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_59_LOOPBW_TAP_2MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_59_LOOPBW_TAP_2MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg60[4] - -
    Bits: 15:0  LoopbwTap2Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_60(_x)         (0x000008f0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_60_LOOPBW_TAP_2LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_60_LOOPBW_TAP_2LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg61[4] - -
    Bits: 15:0  LoopbwTap3Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_61(_x)         (0x000008f4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_61_LOOPBW_TAP_3MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_61_LOOPBW_TAP_3MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg62[4] - -
    Bits: 15:0  LoopbwTap3Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_62(_x)         (0x000008f8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_62_LOOPBW_TAP_3LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_62_LOOPBW_TAP_3LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg63[4] - -
    Bits: 15:0  LoopbwTap4Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_63(_x)         (0x000008fc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_63_LOOPBW_TAP_4MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_63_LOOPBW_TAP_4MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg64[4] - -
    Bits: 15:0  LoopbwTap4Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_64(_x)         (0x00000900 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_64_LOOPBW_TAP_4LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_64_LOOPBW_TAP_4LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg65[4] - -
    Bits: 15:0  LoopbwTap5Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_65(_x)         (0x00000904 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_65_LOOPBW_TAP_5MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_65_LOOPBW_TAP_5MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg66[4] - -
    Bits: 15:0  LoopbwTap5Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_66(_x)         (0x00000908 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_66_LOOPBW_TAP_5LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_66_LOOPBW_TAP_5LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg67[4] - -
    Bits: 15:0  LoopbwTap6Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_67(_x)         (0x0000090c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_67_LOOPBW_TAP_6MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_67_LOOPBW_TAP_6MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg68[4] - -
    Bits: 15:0  LoopbwTap6Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_68(_x)         (0x00000910 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_68_LOOPBW_TAP_6LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_68_LOOPBW_TAP_6LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg69[4] - -
    Bits: 15:0  LoopbwTap7Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_69(_x)         (0x00000914 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_69_LOOPBW_TAP_7MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_69_LOOPBW_TAP_7MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg70[4] - -
    Bits: 15:0  LoopbwTap7Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_70(_x)         (0x00000918 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_70_LOOPBW_TAP_7LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_70_LOOPBW_TAP_7LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg71[4] - -
    Bits: 15:0  LoopbwTap8Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_71(_x)         (0x0000091c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_71_LOOPBW_TAP_8MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_71_LOOPBW_TAP_8MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg72[4] - -
    Bits: 15:0  LoopbwTap8Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_72(_x)         (0x00000920 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_72_LOOPBW_TAP_8LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_72_LOOPBW_TAP_8LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg73[4] - -
    Bits: 15:11 MuDfe1(rw) - BW select tap 1 for dfe loop.
    Bits: 10:6  MuDfe2(rw) - BW select tap 2 for dfe loop.
    Bits:  5:1  MuDfe3(rw) - BW select tap 3 for dfe loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_73(_x)         (0x00000924 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_73_MU_DFE_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_73_MU_DFE_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_73_MU_DFE_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_73_MU_DFE_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_73_MU_DFE_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_73_MU_DFE_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg74[4] - -
    Bits: 15:11 MuDfe4(rw) - BW select tap 4 for dfe loop.
    Bits: 10:6  MuDfe5(rw) - BW select tap 5 for dfe loop.
    Bits:  5:1  MuDfe6(rw) - BW select tap 6 for dfe loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_74(_x)         (0x00000928 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_74_MU_DFE_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_74_MU_DFE_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_74_MU_DFE_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_74_MU_DFE_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_74_MU_DFE_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_74_MU_DFE_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg75[4] - -
    Bits: 15:11 MuDfe7(rw) - BW select tap 7 for dfe loop.
    Bits: 10:6  MuDfe8(rw) - BW select tap 8 for dfe loop.
    Bits:  5:1  MuDfe9(rw) - BW select tap 9 for dfe loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_75(_x)         (0x0000092c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_75_MU_DFE_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_75_MU_DFE_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_75_MU_DFE_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_75_MU_DFE_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_75_MU_DFE_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_75_MU_DFE_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg76[4] - -
    Bits: 15:11 MuPh1(rw) - BW select tap 1 for phase adjust loop.
    Bits: 10:6  MuPh2(rw) - BW select tap 2 for phase adjust loop.
    Bits:  5:1  MuPh3(rw) - BW select tap 3 for phase adjust drop
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_76(_x)         (0x00000930 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_76_MU_PH_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_76_MU_PH_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_76_MU_PH_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_76_MU_PH_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_76_MU_PH_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_76_MU_PH_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg77[4] - -
    Bits: 15:11 MuPh4(rw) - BW select tap 4 for phase adjust loop.
    Bits: 10:6  MuPh5(rw) - BW select tap 5 for phase adjust loop.
    Bits:  5:1  MuPh6(rw) - BW select tap 6 for phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_77(_x)         (0x00000934 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_77_MU_PH_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_77_MU_PH_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_77_MU_PH_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_77_MU_PH_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_77_MU_PH_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_77_MU_PH_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg78[4] - -
    Bits: 15:11 MuPh7(rw) - BW select tap 7 for phase adjust loop.
    Bits: 10:6  MuPh8(rw) - BW select tap 8 for phase adjust loop.
    Bits:  5:1  MuPh9(rw) - BW select tap 9 for phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_78(_x)         (0x00000938 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_78_MU_PH_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_78_MU_PH_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_78_MU_PH_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_78_MU_PH_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_78_MU_PH_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_78_MU_PH_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg79[4] - -
    Bits: 15:11 MuTh1(rw) - BW select tap 1 for threshold adjust loop.
    Bits: 10:6  MuTh2(rw) - BW select tap 2 for threshold adjust loop.
    Bits:  5:1  MuTh3(rw) - BW select tap 3 for threshold adjust drop
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_79(_x)         (0x0000093c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_79_MU_TH_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_79_MU_TH_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_79_MU_TH_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_79_MU_TH_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_79_MU_TH_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_79_MU_TH_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg80[4] - -
    Bits: 15:11 MuTh4(rw) - BW select tap 4 for threshold adjust loop.
    Bits: 10:6  MuTh5(rw) - BW select tap 5 for threshold adjust loop.
    Bits:  5:1  MuTh6(rw) - BW select tap 6 for threshold adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_80(_x)         (0x00000940 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_80_MU_TH_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_80_MU_TH_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_80_MU_TH_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_80_MU_TH_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_80_MU_TH_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_80_MU_TH_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg81[4] - -
    Bits: 15:11 MuTh7(rw) - BW select tap 7 for threshold adjust loop.
    Bits: 10:6  MuTh8(rw) - BW select tap 8 for threshold adjust loop.
    Bits:  5:1  MuTh9(rw) - BW select tap 9 for threshold adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_81(_x)         (0x00000944 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_81_MU_TH_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_81_MU_TH_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_81_MU_TH_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_81_MU_TH_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_81_MU_TH_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_81_MU_TH_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg82[4] - -
    Bits: 15:11 MuBca1(rw) - BW select tap 1 for bca adjust loop.
    Bits: 10:6  MuBca2(rw) - BW select tap 2 for bca adjust loop.
    Bits:  5:1  MuBca3(rw) - BW select tap 3 for bca adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_82(_x)         (0x00000948 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_82_MU_BCA_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_82_MU_BCA_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_82_MU_BCA_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_82_MU_BCA_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_82_MU_BCA_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_82_MU_BCA_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg83[4] - -
    Bits: 15:11 MuBca4(rw) - BW select tap 4 for bca adjust loop.
    Bits: 10:6  MuBca5(rw) - BW select tap 5 for bca adjust loop.
    Bits:  5:1  MuBca6(rw) - BW select tap 6 for bca adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_83(_x)         (0x0000094c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_83_MU_BCA_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_83_MU_BCA_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_83_MU_BCA_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_83_MU_BCA_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_83_MU_BCA_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_83_MU_BCA_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg84[4] - -
    Bits: 15:11 MuBca7(rw) - BW select tap 7 for bca adjust loop.
    Bits: 10:6  MuBca8(rw) - BW select tap 8 for bca adjust loop.
    Bits:  5:1  MuBca9(rw) - BW select tap 9 for bca adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_84(_x)         (0x00000950 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_84_MU_BCA_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_84_MU_BCA_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_84_MU_BCA_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_84_MU_BCA_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_84_MU_BCA_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_84_MU_BCA_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg85[4] - -
    Bits: 15:11 MuBlwc1(rw) - BW select tap 1 for blwc adjust loop.
    Bits: 10:6  MuBlwc2(rw) - BW select tap 2 for blwc adjust loop.
    Bits:  5:1  MuBlwc3(rw) - BW select tap 3 for blwc adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_85(_x)         (0x00000954 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_85_MU_BLWC_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_85_MU_BLWC_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_85_MU_BLWC_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_85_MU_BLWC_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_85_MU_BLWC_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_85_MU_BLWC_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg86[4] - -
    Bits: 15:11 MuBlwc4(rw) - BW select tap 4 for blwc adjust loop.
    Bits: 10:6  MuBlwc5(rw) - BW select tap 5 for blwc adjust loop.
    Bits:  5:1  MuBlwc6(rw) - BW select tap 6 for blwc adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_86(_x)         (0x00000958 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_86_MU_BLWC_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_86_MU_BLWC_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_86_MU_BLWC_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_86_MU_BLWC_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_86_MU_BLWC_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_86_MU_BLWC_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg87[4] - -
    Bits: 15:11 MuBlwc7(rw) - BW select tap 7 for blwc adjust loop.
    Bits: 10:6  MuBlwc8(rw) - BW select tap 8 for blwc adjust loop.
    Bits:  5:1  MuBlwc9(rw) - BW select tap 9 for blwc adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_87(_x)         (0x0000095c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_87_MU_BLWC_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_87_MU_BLWC_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_87_MU_BLWC_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_87_MU_BLWC_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_87_MU_BLWC_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_87_MU_BLWC_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg88[4] - -
    Bits: 15:11 MuFreq1(rw) - BW select tap 1 for Freq adjust loop.
    Bits: 10:6  MuFreq2(rw) - BW select tap 2 for Freq adjust loop.
    Bits:  5:1  MuFreq3(rw) - BW select tap 3 for Freq adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_88(_x)         (0x00000960 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_88_MU_FREQ_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_88_MU_FREQ_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_88_MU_FREQ_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_88_MU_FREQ_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_88_MU_FREQ_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_88_MU_FREQ_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg89[4] - -
    Bits: 15:11 MuFreq4(rw) - BW select tap 4 for Freq adjust loop.
    Bits: 10:6  MuFreq5(rw) - BW select tap 5 for Freq adjust loop.
    Bits:  5:1  MuFreq6(rw) - BW select tap 6 for Freq adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_89(_x)         (0x00000964 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_89_MU_FREQ_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_89_MU_FREQ_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_89_MU_FREQ_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_89_MU_FREQ_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_89_MU_FREQ_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_89_MU_FREQ_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg90[4] - -
    Bits: 15:11 MuFreq7(rw) - BW select tap 7 for Freq adjust loop.
    Bits: 10:6  MuFreq8(rw) - BW select tap 8 for Freq adjust loop.
    Bits:  5:1  MuFreq9(rw) - BW select tap 9 for Freq adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_90(_x)         (0x00000968 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_90_MU_FREQ_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_90_MU_FREQ_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_90_MU_FREQ_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_90_MU_FREQ_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_90_MU_FREQ_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_90_MU_FREQ_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg91[4] - -
    Bits: 15:11 MuPhase1(rw) - BW select tap 1 for Phase adjust loop.
    Bits: 10:6  MuPhase2(rw) - BW select tap 2 for Phase adjust loop.
    Bits:  5:1  MuPhase3(rw) - BW select tap 3 for Phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_91(_x)         (0x0000096c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_91_MU_PHASE_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_91_MU_PHASE_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_91_MU_PHASE_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_91_MU_PHASE_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_91_MU_PHASE_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_91_MU_PHASE_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg92[4] - -
    Bits: 15:11 MuPhase4(rw) - BW select tap 4 for Phase adjust loop.
    Bits: 10:6  MuPhase5(rw) - BW select tap 5 for Phase adjust loop.
    Bits:  5:1  MuPhase6(rw) - BW select tap 6 for Phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_92(_x)         (0x00000970 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_92_MU_PHASE_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_92_MU_PHASE_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_92_MU_PHASE_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_92_MU_PHASE_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_92_MU_PHASE_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_92_MU_PHASE_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg93[4] - -
    Bits: 15:11 MuPhase7(rw) - BW select tap 7 for Phase adjust loop.
    Bits: 10:6  MuPhase8(rw) - BW select tap 8 for Phase adjust loop.
    Bits:  5:1  MuPhase9(rw) - BW select tap 9 for Phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_93(_x)         (0x00000974 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_93_MU_PHASE_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_93_MU_PHASE_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_93_MU_PHASE_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_93_MU_PHASE_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_93_MU_PHASE_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_93_MU_PHASE_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg94[4] - -
    Bits: 15    PinOverride(rw) - 32 Bit counter used for MU tap for the DFE loops
    Bits: 14:8  PushPiaccVal(rw) - Manul Code load for PI accumulator
    Bits:  7    PushPiacc(rw) - Manul load enable for PI accumulator
    Bits:  6:5  FreqloopLimit(rw) - Freq Loop accumulator limit.
    Bits:  4:3  H1Skew(rw) - H1 Skew for Eye Scan block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_94(_x)         (0x00000978 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_PIN_OVERRIDE BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_PUSH_PIACC_VAL(_x) (((_x) & 0x7f) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_PUSH_PIACC_VAL_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_PUSH_PIACC BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_FREQLOOP_LIMIT(_x) (((_x) & 0x3) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_FREQLOOP_LIMIT_of(_x) (((_x) >> 5) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_H1SKEW(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_94_H1SKEW_of(_x) (((_x) >> 3) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg95[4] - -
    Bits: 15:0  MuMaxTimerMsb(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_95(_x)         (0x0000097c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_95_MU_MAX_TIMER_MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_95_MU_MAX_TIMER_MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg96[4] - -
    Bits: 15:0  MuMaxTimerLsb(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_96(_x)         (0x00000980 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_96_MU_MAX_TIMER_LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_96_MU_MAX_TIMER_LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg97[4] - -
    Bits: 15:0  DFETapSnapReadoutMsb(ro) - Read DFE tap value one at a time selectable using DFE_TAP_select.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_97(_x)         (0x00000984 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_97_DFETAP_SNAP_READOUT_MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_97_DFETAP_SNAP_READOUT_MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg98[4] - -
    Bits: 15:0  DFETapSnapReadoutLsb(ro) - Read DFE tap value one at a time selectable using DFE_TAP_select.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_98(_x)         (0x00000988 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_98_DFETAP_SNAP_READOUT_LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_98_DFETAP_SNAP_READOUT_LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg99[4] - -
    Bits: 15:0  DFETapWriteMsb(rw) - Write DFE tap value one at a time selectable using DFE_TAP_select for manual tap programming.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_99(_x)         (0x0000098c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_99_DFETAP_WRITE_MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_99_DFETAP_WRITE_MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg100[4] - -
    Bits: 15:0  DFETapWriteLsb(rw) - Write DFE tap value one at a time selectable using DFE_TAP_select for manual tap programming.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_100(_x)        (0x00000990 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_100_DFETAP_WRITE_LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_100_DFETAP_WRITE_LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg101[4] - -
    Bits: 15:0  CDRBwMaxTimer1(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_101(_x)        (0x00000994 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_101_CDRBW_MAX_TIMER_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_101_CDRBW_MAX_TIMER_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg102[4] - -
    Bits: 15:0  CDRBwMaxTimer0(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_102(_x)        (0x00000998 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_102_CDRBW_MAX_TIMER_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_102_CDRBW_MAX_TIMER_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg103[4] - -
    Bits: 15:0  FtSearchTimer(rw) - Programmable timer between FT search tap/postion update
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_103(_x)        (0x0000099c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_103_FT_SEARCH_TIMER(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_103_FT_SEARCH_TIMER_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg104[4] - -
    Bits: 15    FloatSelect(rw) - Select Floating tap positions. 0 = 6 Fixed, 1 = 5 fixed
    Bits: 14    ForceFtPos0(rw) - Enable for forcing Floating tap postion from register for First FT tap
    Bits: 13    ForceFtPos1(rw) - Enable for forcing Floating tap postion from register for second FT tap
    Bits: 12    ForceFtPos2(rw) - Enable for forcing Floating tap postion from register for Third FT tap
    Bits: 11    ForceFtPos3(rw) - Enable for forcing Floating tap postion from register for fourth FT tap
    Bits: 10    ForceFtPos4(rw) - Enable for forcing Floating tap postion from register for Fifth FT tap
    Bits:  9    ForceFtWgt0(rw) - Enable for forcing Floating tap weight from register for first FT tap
    Bits:  8    ForceFtWgt1(rw) - Enable for forcing Floating tap weight from register for second FT tap
    Bits:  7    ForceFtWgt2(rw) - Enable for forcing Floating tap weight from register for third FT tap
    Bits:  6    ForceFtWgt3(rw) - Enable for forcing Floating tap weight from register for Fourth FT tap
    Bits:  5    ForceFtWgt4(rw) - Enable for forcing Floating tap weight from register for Fifth FT tap
    Bits:  4:1  ManWeightFt0(rw) - Manually load the flaoting tap weights for FT Tap0
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_104(_x)        (0x000009a0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FLOAT_SELECT BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_POS_0 BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_POS_1 BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_POS_2 BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_POS_3 BIT(11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_POS_4 BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_WGT_0 BIT(9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_WGT_1 BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_WGT_2 BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_WGT_3 BIT(6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_FORCE_FT_WGT_4 BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_MAN_WEIGHT_FT_0(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_104_MAN_WEIGHT_FT_0_of(_x) (((_x) >> 1) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg105[4] - -
    Bits: 15:10 ManPositionFt0(rw) - Manually load the floating tap position for FT Tap 0
    Bits:  9:6  ManWeightFt1(rw) - Manually load the flaoting tap weights for FT Tap1
    Bits:  5:0  ManPositionFt1(rw) - Manually load the floating tap position for FT Tap 1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_105(_x)        (0x000009a4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_105_MAN_POSITION_FT_0(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_105_MAN_POSITION_FT_0_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_105_MAN_WEIGHT_FT_1(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_105_MAN_WEIGHT_FT_1_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_105_MAN_POSITION_FT_1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_105_MAN_POSITION_FT_1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg106[4] - -
    Bits: 15:12 ManWeightFt2(rw) - Manually load the flaoting tap weights for FT Tap2
    Bits: 11:6  ManPositionFt2(rw) - Manually load the floating tap position for FT Tap 2
    Bits:  5:2  ManWeightFt3(rw) - Manually load the flaoting tap weights for FT Tap3
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_106(_x)        (0x000009a8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_106_MAN_WEIGHT_FT_2(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_106_MAN_WEIGHT_FT_2_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_106_MAN_POSITION_FT_2(_x) (((_x) & 0x3f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_106_MAN_POSITION_FT_2_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_106_MAN_WEIGHT_FT_3(_x) (((_x) & 0xf) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_106_MAN_WEIGHT_FT_3_of(_x) (((_x) >> 2) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg107[4] - -
    Bits: 15:10 ManPositionFt3(rw) - Manually load the floating tap position for FT Tap 4
    Bits:  9:6  ManWeightFt4(rw) - Manually load the flaoting tap weights for FT Tap4
    Bits:  5:0  ManPositionFt4(rw) - Manually load the floating tap position for FT Tap 5
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_107(_x)        (0x000009ac + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_107_MAN_POSITION_FT_3(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_107_MAN_POSITION_FT_3_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_107_MAN_WEIGHT_FT_4(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_107_MAN_WEIGHT_FT_4_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_107_MAN_POSITION_FT_4(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_107_MAN_POSITION_FT_4_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg108[4] - -
    Bits: 15:5  EyeCount1(ro) - Eye monitor count output MSB first 16 bits
    Bits:  4    AccFullFlag(ro) - Eye monitor counter is full status
    Bits:  3    RxBistContDone(ro) - RX bist sample count done flag
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_108(_x)        (0x000009b0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_108_EYE_COUNT_1(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_108_EYE_COUNT_1_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_108_ACC_FULL_FLAG BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_108_RX_BIST_CONT_DONE BIT(3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg109[4] - -
    Bits: 15:0  EyeCount0(ro) - Eye monitor count output LSB first 16bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_109(_x)        (0x000009b4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_109_EYE_COUNT_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_109_EYE_COUNT_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg110[4] - -
    Bits: 15:0  CDRAccumRdLsb(ro) - Read outFreq accumulator value, LSB 16 bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_110(_x)        (0x000009b8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_110_CDRACCUM_RD_LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_110_CDRACCUM_RD_LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg111[4] - -
    Bits: 15:6  CDRAccumRdMsb(ro) - Read out Freq accumulator value. MSB 10bits
    Bits:  5:1  SumosCalCode(ro) - Summer offset Cal Code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_111(_x)        (0x000009bc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_111_CDRACCUM_RD_MSB(_x) (((_x) & 0x3ff) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_111_CDRACCUM_RD_MSB_of(_x) (((_x) >> 6) & 0x3ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_111_SUMOS_CAL_CODE(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_111_SUMOS_CAL_CODE_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg112[4] - -
    Bits: 15:0  EyeAccumulator1(ro) - Eye Monitor Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_112(_x)        (0x000009c0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_112_EYE_ACCUMULATOR_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_112_EYE_ACCUMULATOR_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg113[4] - -
    Bits: 15:0  EyeAccumulator0(ro) - Eye Monitor Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_113(_x)        (0x000009c4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_113_EYE_ACCUMULATOR_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_113_EYE_ACCUMULATOR_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg114[4] - -
    Bits: 15:9  PqReg(rw) - Programmable PQ skew
    Bits:  8:2  QiReg(rw) - Programmable EyeScan horizontal skew
    Bits:  1    SignQiReg(rw) - Sign bit to select add or sub for PI with QI
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_114(_x)        (0x000009c8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_114_PQ_REG(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_114_PQ_REG_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_114_QI_REG(_x) (((_x) & 0x7f) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_114_QI_REG_of(_x) (((_x) >> 2) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_114_SIGN_QI_REG BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg115[4] - -
    Bits: 15:10 DOLatchMancal(rw) - Manul programming of cal latch code
    Bits:  9:4  XOLatchMancal(rw) - Manul programming of cal latch code
    Bits:  3    LatchManCalEna(rw) - Manual Latch calibration enable.
    Bits:  2    ForceLatCalStart(rw) - Manual start the calibration
    Bits:  1    ForceSumCalStart(rw) - Manual start the calibration
    Bits:  0    ForceCtleCalStart(rw) - Manual start the calibration
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_115(_x)        (0x000009cc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_DOLATCH_MANCAL(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_DOLATCH_MANCAL_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_XOLATCH_MANCAL(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_XOLATCH_MANCAL_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_LATCH_MAN_CAL_ENA BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_FORCE_LAT_CAL_START BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_FORCE_SUM_CAL_START BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_115_FORCE_CTLE_CAL_START BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg116[4] - -
    Bits: 15:10 EOLatchMancal(rw) - Manual programming of cal latch code
    Bits:  9:4  SOLatchMancal(rw) - Manual programming of cal latch code
    Bits:  3:2  LatchCalWaitSel(rw) - Controls wait time between codes during latch calibration, in refclk cycles 0 = 15 cycles 1 = 63 cycles 2 = 255 cycles 3 = 1023 cycles
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_116(_x)        (0x000009d0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_116_EOLATCH_MANCAL(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_116_EOLATCH_MANCAL_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_116_SOLATCH_MANCAL(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_116_SOLATCH_MANCAL_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_116_LATCH_CAL_WAIT_SEL(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_116_LATCH_CAL_WAIT_SEL_of(_x) (((_x) >> 2) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg117[4] - -
    Bits: 15:10 DELatchMancal(rw) - Manul programming of cal latch code
    Bits:  9:4  XELatchMancal(rw) - Manul programming of cal latch code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_117(_x)        (0x000009d4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_117_DELATCH_MANCAL(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_117_DELATCH_MANCAL_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_117_XELATCH_MANCAL(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_117_XELATCH_MANCAL_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg118[4] - -
    Bits: 15:10 EELatchMancal(rw) - Manual programming of cal latch code
    Bits:  9:4  SELatchMancal(rw) - Manual programming of cal latch code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_118(_x)        (0x000009d8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_118_EELATCH_MANCAL(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_118_EELATCH_MANCAL_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_118_SELATCH_MANCAL(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_118_SELATCH_MANCAL_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg119[4] - -
    Bits: 15:5  InitFreqRampNMsb(rw) - Initial negative frequency ramp loop accumulator value, MSB
    Bits:  4    Loadfreqramp(rw) - Loads values in initFreqRamp[P/N]_[msb/lsb] to internal accumulators
    Bits:  3    PhzManual(rw) - Manual phase adjust select 0 = Normal mode : Adaptation, 1=Manual program mode
    Bits:  2    SignPq(rw) - Sign bit to select add or sub for PI with PQ
    Bits:  1    SignPq2c(rw) - Sign bit for 2's complement
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_119(_x)        (0x000009dc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_119_INIT_FREQ_RAMP_NMSB(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_119_INIT_FREQ_RAMP_NMSB_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_119_LOADFREQRAMP BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_119_PHZ_MANUAL BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_119_SIGN_PQ  BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_119_SIGN_PQ_2C BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg120[4] - -
    Bits: 15:0  InitFreqRampNLsb(rw) - Initial negative frequency ramp loop accumulator value, LSB
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_120(_x)        (0x000009e0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_120_INIT_FREQ_RAMP_NLSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_120_INIT_FREQ_RAMP_NLSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg121[4] - -
    Bits: 15:5  InitFreqRampPMsb(rw) - Initial positive frequency ramp loop accumulator value, MSB
    Bits:  4:0  PhzManualcode(rw) - manual phase adjust for PQ.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_121(_x)        (0x000009e4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_121_INIT_FREQ_RAMP_PMSB(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_121_INIT_FREQ_RAMP_PMSB_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_121_PHZ_MANUALCODE(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_121_PHZ_MANUALCODE_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg122[4] - -
    Bits: 15:0  InitFreqRampPLsb(rw) - Initial positive frequency ramp loop accumulator value, LSB
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_122(_x)        (0x000009e8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_122_INIT_FREQ_RAMP_PLSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_122_INIT_FREQ_RAMP_PLSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg123[4] - -
    Bits: 15:5  RampregNMsb(rw) - Unused
    Bits:  4:1  TxFifoDepth(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_123(_x)        (0x000009ec + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_123_RAMPREG_NMSB(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_123_RAMPREG_NMSB_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_123_TX_FIFO_DEPTH(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_123_TX_FIFO_DEPTH_of(_x) (((_x) >> 1) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg124[4] - -
    Bits: 15:0  RampregNLsb(rw) - Unused
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_124(_x)        (0x000009f0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_124_RAMPREG_NLSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_124_RAMPREG_NLSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg125[4] - -
    Bits: 15:5  RampregPMsb(rw) - Unused
    Bits:  4:0  RxFifoDepth(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_125(_x)        (0x000009f4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_125_RAMPREG_PMSB(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_125_RAMPREG_PMSB_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_125_RX_FIFO_DEPTH(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_125_RX_FIFO_DEPTH_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg126[4] - -
    Bits: 15:0  RampregPLsb(rw) - Unused
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_126(_x)        (0x000009f8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_126_RAMPREG_PLSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_126_RAMPREG_PLSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg127[4] - -
    Bits: 15:2  MeanFreqShift(rw) - Ramp control mean freq shift code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_127(_x)        (0x000009fc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_127_MEAN_FREQ_SHIFT(_x) (((_x) & 0x3fff) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_127_MEAN_FREQ_SHIFT_of(_x) (((_x) >> 2) & 0x3fff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg128[4] - -
    Bits: 15:8  TXSpare(rw) - Spare input pin for TX, future enhancement.
    Bits:  7    ForceRxlos(rw) - Force RXLOS to 0
    Bits:  6    SkipRxlosOn(rw) - Skip RXLOS on status for RXLOS filter
    Bits:  5    UseRawrxlos(rw) - Use raw rxlos for loop freezing
    Bits:  4    BypassRxlos(rw) - Bypass using rxlos to freeze loops for high data rates
    Bits:  3:2  Rxjtagos(rw) - Jtag receiver offset voltage programming
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_128(_x)        (0x00000a00 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_TXSPARE(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_TXSPARE_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_FORCE_RXLOS BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_SKIP_RXLOS_ON BIT(6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_USE_RAWRXLOS BIT(5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_BYPASS_RXLOS BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_RXJTAGOS(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_128_RXJTAGOS_of(_x) (((_x) >> 2) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg129[4] - -
    Bits: 15:14 RxdfeConfig(rw) - Dfe 10tap configuration, 0 -All, 1 - fixed taps, 3 - 2 taps.
    Bits: 13:10 RxdfeFltConfig(rw) - Dfe flaoting tap configuration
    Bits:  9:7  RxdfetapAdj(rw) - Adjustment of DFE tap value ranges 0 = 100% 1 = 109% 2 = 114% 3 = 124% 4 = 100% 5 = 93% 6 = 88% 7 = 82%
    Bits:  6:5  RxdfebufVcm(rw) - Common-mode voltage at DFE pre-buffer output: 00 = 800mV 01 = 832mV 10 = 752 mV 11 = 785mV
    Bits:  4:3  RxlatcalibAdj(rw) - Sets the range for DFE latch offset correction: 00 = 100% 01 = 115% 10 = 85% 11 = 95%
    Bits:  2    RxvwesLatena(rw) - Eye Scan Lat enable
    Bits:  1    RxesEna(rw) - Eye Scan enable
    Bits:  0    TxIdleSata(rw) - idle signal for sata mode comwake and comreset function
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_129(_x)        (0x00000a04 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFE_CONFIG(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFE_CONFIG_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFE_FLT_CONFIG(_x) (((_x) & 0xf) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFE_FLT_CONFIG_of(_x) (((_x) >> 10) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFETAP_ADJ(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFETAP_ADJ_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFEBUF_VCM(_x) (((_x) & 0x3) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXDFEBUF_VCM_of(_x) (((_x) >> 5) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXLATCALIB_ADJ(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXLATCALIB_ADJ_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXVWES_LATENA BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_RXES_ENA BIT(1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_129_TX_IDLE_SATA BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg130[4] - -
    Bits: 15:12 ClkRateRxlosft(rw) - Rxlos filter clock rate selection
    Bits: 11:8  SamplerateRxlosft(rw) - Rxlos filter sampel rate selection
    Bits:  7:4  ThresholdcountOff(rw) - rxlos filter threshold window off selection
    Bits:  3:0  ThresholdcountOn(rw) - rxlos filter threshold window on selection
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_130(_x)        (0x00000a08 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_CLK_RATE_RXLOSFT(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_CLK_RATE_RXLOSFT_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_SAMPLERATE_RXLOSFT(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_SAMPLERATE_RXLOSFT_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_THRESHOLDCOUNT_OFF(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_THRESHOLDCOUNT_OFF_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_THRESHOLDCOUNT_ON(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_130_THRESHOLDCOUNT_ON_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg131[4] - -
    Bits: 15:0  StmcOverride(rw) - State machine control over ride for Channel enables.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_131(_x)        (0x00000a0c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_131_STMC_OVERRIDE(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_131_STMC_OVERRIDE_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg132[4] - -
    Bits: 15:0  RxBistWordCnt0(rw) - Trip counter0 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_132(_x)        (0x00000a10 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_132_RX_BIST_WORD_CNT_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_132_RX_BIST_WORD_CNT_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg133[4] - -
    Bits: 15:0  RxBistWordCnt1(rw) - Trip counter1 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_133(_x)        (0x00000a14 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_133_RX_BIST_WORD_CNT_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_133_RX_BIST_WORD_CNT_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg134[4] - -
    Bits: 15:0  RxBistWordCnt2(rw) - Trip counter2 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_134(_x)        (0x00000a18 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_134_RX_BIST_WORD_CNT_2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_134_RX_BIST_WORD_CNT_2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg135[4] - -
    Bits: 15:0  RxBistWordCnt3(rw) - Trip counter3 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_135(_x)        (0x00000a1c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_135_RX_BIST_WORD_CNT_3(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_135_RX_BIST_WORD_CNT_3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg136[4] - -
    Bits: 15:0  RxBistErrCntMsb(ro) - Bist error count Upper 16bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_136(_x)        (0x00000a20 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_136_RX_BIST_ERR_CNT_MSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_136_RX_BIST_ERR_CNT_MSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg137[4] - -
    Bits: 15:0  RxBistErrCntLsb(ro) - Bist Error counter Lower 16bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_137(_x)        (0x00000a24 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_137_RX_BIST_ERR_CNT_LSB(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_137_RX_BIST_ERR_CNT_LSB_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg138[4] - -
    Bits: 15    RxFifoDbgPd(rw) - Power down rx fifo debug logic
    Bits: 14:8  BlwcGainManProg(rw) - Manual BLWC prog value
    Bits:  7:4  BCTapEna(rw) - Back channel loops TX BC3. 0001 = TXBC CN2, 0010 = TXBC CN1, 0100 = TXBC C0, 1000 = TXBC CP1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_138(_x)        (0x00000a28 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_138_RX_FIFO_DBG_PD BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_138_BLWC_GAIN_MAN_PROG(_x) (((_x) & 0x7f) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_138_BLWC_GAIN_MAN_PROG_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_138_BCTAP_ENA(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_138_BCTAP_ENA_of(_x) (((_x) >> 4) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg139[4] - -
    Bits: 15:11 MuFramp1(rw) - BW select tap 1 for freq ramp adjust loop.
    Bits: 10:6  MuFramp2(rw) - BW select tap 2 for freq ramp adjust loop.
    Bits:  5:1  MuFramp3(rw) - BW select tap 3for freq ramp adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_139(_x)        (0x00000a2c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_139_MU_FRAMP_1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_139_MU_FRAMP_1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_139_MU_FRAMP_2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_139_MU_FRAMP_2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_139_MU_FRAMP_3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_139_MU_FRAMP_3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg140[4] - -
    Bits: 15:11 MuFramp4(rw) - BW select tap 4 for freq ramp adjust loop.
    Bits: 10:6  MuFramp5(rw) - BW select tap 5 for freq ramp adjust loop.
    Bits:  5:1  MuFramp6(rw) - BW select tap 6 for freq ramp adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_140(_x)        (0x00000a30 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_140_MU_FRAMP_4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_140_MU_FRAMP_4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_140_MU_FRAMP_5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_140_MU_FRAMP_5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_140_MU_FRAMP_6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_140_MU_FRAMP_6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg141[4] - -
    Bits: 15:11 MuFramp7(rw) - BW select tap 7 for freq ramp adjust loop.
    Bits: 10:6  MuFramp8(rw) - BW select tap 8 for freq ramp adjust loop.
    Bits:  5:1  MuFramp9(rw) - BW select tap 9 for freq ramp adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_141(_x)        (0x00000a34 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_141_MU_FRAMP_7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_141_MU_FRAMP_7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_141_MU_FRAMP_8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_141_MU_FRAMP_8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_141_MU_FRAMP_9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_141_MU_FRAMP_9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg142[4] - -
    Bits: 15    SumCalibDone(ro) - Summer calirbation Done Status
    Bits: 14    SumCalibErr(ro) - Summer calibation Error Status
    Bits: 13    CtleCalibDone(ro) - CTLE calibration Done status
    Bits: 12    CtleCalibError(ro) - Ctle Calibration Error status
    Bits: 11    LatCalibDone(ro) - Latch calibration completed
    Bits: 10    FtSrcDone(ro) - Ft search done status
    Bits:  9    BckAckCn(ro) - Read CN ack send to upper layer for BC adaptaion
    Bits:  8    BckAckCp(ro) - Read CP ack send to upper layer for BC adaptaion
    Bits:  7    RxBistPass(ro) - Bert Test sync pass, This bit is asserted when bert compare passes.
    Bits:  6    RxBistFail(ro) - Bert status bits get asserted with one failure
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_142(_x)        (0x00000a38 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_SUM_CALIB_DONE BIT(15)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_SUM_CALIB_ERR BIT(14)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_CTLE_CALIB_DONE BIT(13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_CTLE_CALIB_ERROR BIT(12)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_LAT_CALIB_DONE BIT(11)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_FT_SRC_DONE BIT(10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_BCK_ACK_CN BIT(9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_BCK_ACK_CP BIT(8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_RX_BIST_PASS BIT(7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_142_RX_BIST_FAIL BIT(6)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg143[4] - -
    Bits: 15:9  DFEPresetValueBctap0(rw) - Preset value for BCtap0
    Bits:  7:1  DFEPresetValueBctap1(rw) - Preset Value for BCtap1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_143(_x)        (0x00000a3c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_143_DFEPRESET_VALUE_BCTAP_0(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_143_DFEPRESET_VALUE_BCTAP_0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_143_DFEPRESET_VALUE_BCTAP_1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_143_DFEPRESET_VALUE_BCTAP_1_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg144[4] - -
    Bits: 15:9  DFEPresetValueBlw(rw) - Preset value for BLW
    Bits:  7:1  DFEPresetValuePhtap(rw) - Preset Value for phtap
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_144(_x)        (0x00000a40 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_144_DFEPRESET_VALUE_BLW(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_144_DFEPRESET_VALUE_BLW_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_144_DFEPRESET_VALUE_PHTAP(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_144_DFEPRESET_VALUE_PHTAP_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg145[4] - -
    Bits: 15:0  EyeTAccumulator1(ro) - Eye Monitor total Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_145(_x)        (0x00000a44 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_145_EYE_TACCUMULATOR_1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_145_EYE_TACCUMULATOR_1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg146[4] - -
    Bits: 15:0  EyeTAccumulator0(ro) - Eye Monitor total Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_146(_x)        (0x00000a48 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_146_EYE_TACCUMULATOR_0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_146_EYE_TACCUMULATOR_0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg147[4] - -
    Bits: 15:13 TxSupregdTrim(rw) - Supreg voltage reference trim
    Bits: 12:10 TxSupregTrim(rw) - Supreg voltage reference trim
    Bits:  9:5  TxSd0(rw) - Tap TX C0 code
    Bits:  4    TxPvtmapEnb(rw) - PVT compensation disable, 0 enable, 1 disable.
    Bits:  3    TxHpd(rw) - 100ohms mode enable
    Bits:  2    TxHizslum(rw) - 100ohms slum mode enable
    Bits:  1    TxDirDatasel(rw) - Bypass internal mux for Txdata .
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_147(_x)        (0x00000a4c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_SUPREGD_TRIM(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_SUPREGD_TRIM_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_SUPREG_TRIM(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_SUPREG_TRIM_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_SD_0(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_SD_0_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_PVTMAP_ENB BIT(4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_HPD   BIT(3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_HIZSLUM BIT(2)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_147_TX_DIR_DATASEL BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg148[4] - -
    Bits: 15:8  LatchCalData(ro) - Latch data bits for manual calibration. Order Dke, Dko, Xke,Xko,Eke,Eko,Ske,Sko
    Bits:  7:6  SummCountPrdSel(rw) - Summer calibration wait between sample in refclk cycles. 00 = ox7f, 01 = ox3f, 10 = oxaf,11=oxff
    Bits:  5:4  PqStepPrd(rw) - PQ decrement or increment update rate, 0 - every cycle, 1 - every 2 cycels, 2 = every 4 cycles,3 = every 8 cycels
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RXTX_REG_148(_x)        (0x00000a50 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_148_LATCH_CAL_DATA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_148_LATCH_CAL_DATA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_148_SUMM_COUNT_PRD_SEL(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_148_SUMM_COUNT_PRD_SEL_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_148_PQ_STEP_PRD(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_SERDES_RXTX_RXTX_REG_148_PQ_STEP_PRD_of(_x) (((_x) >> 4) & 0x3)

#else /* NFP3800_LONGNAMES */

/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsLo - Bits 31:0 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameTooLongErrors - Frame received exceeded the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxInRangeLengthErrors - A count of frames with a length/type field value between 46 (VLAN: 42) and less than 0x0600, that does not match the number of payload data octets received. Should count also if length/type field is less than 46 (VLAN: 42) and the frame is longer than 64 bytes.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxVlanReceivedOK - VLAN frame received without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) was received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsDropEvents - Counts the number of dropped packets due to internal errors of the MAC Client. Occurs when a Receive FIFO overflow condition persists.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxAlignmentErrors - Frame received with an alignment error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPauseMacCtlFramesReceived - Valid pause frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxFrameCheckSequenceErrors - CRC-32 Error is detected but the frame is otherwise of correct length.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsUndersizePkts - Total number of packets that were less than 64 octets long with a good CRC. Note: Undersize packets are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsJabbers - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a bad Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsFragments - Total number of packets that were less than 64 octets long with a wrong CRC. Note: Fragments are not delivered to the FIFO interface.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived2 - CBFC (Class Based Flow Control) pause frames received for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived3 - CBFC (Class Based Flow Control) pause frames received for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPStatsOversizePkts - Total number of packets longer than the valid maximum length programmed in register FRM_LENGTH (excluding framing bits, but including FCS octets), and with a good Frame Check Sequence.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived0 - CBFC (Class Based Flow Control) pause frames received for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived1 - CBFC (Class Based Flow Control) pause frames received for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived4 - CBFC (Class Based Flow Control) pause frames received for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived5 - CBFC (Class Based Flow Control) pause frames received for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived6 - CBFC (Class Based Flow Control) pause frames received for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxCBFCPauseFramesReceived7 - CBFC (Class Based Flow Control) pause frames received for class 7.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxMacCtlFramesReceived - Valid control frame received.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPauseMacCtlFramesTransmitted - Valid pause frame transmitted.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPStatsPkts1519toMAXoctets - Frames (good and bad) with 1519 to MAX octets.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted0 - CBFC (Class Based Flow Control) pause frames transmitted for class 0
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted1 - CBFC (Class Based Flow Control) pause frames transmitted for class 1.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted4 - CBFC (Class Based Flow Control) pause frames transmitted for class 4.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted5 - CBFC (Class Based Flow Control) pause frames transmitted for class 5.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted2 - CBFC (Class Based Flow Control) pause frames transmitted for class 2.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted3 - CBFC (Class Based Flow Control) pause frames transmitted for class 3.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted6 - CBFC (Class Based Flow Control) pause frames transmitted for class 6.
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxCBFCPauseFramesTransmitted7 - CBFC (Class Based Flow Control) pause frames transmitted for class 7.
  Register: MacChannelStats[128]_RxCIfInOctetsLo - Bits 31:0 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsLo - Total number of octets for valid frames received. Goodput octets.
  Register: MacChannelStats[128]_RxCIfInErrors - Number of frames received with error: FIFO Overflow Error, CRC Error, Frame Too Long Error, Alignment Error, The dedicated Error Code (0xfe, not a code error) that is signaled on the Rx FIFO interface.
  Register: MacChannelStats[128]_RxCIfInUniCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '0'.
  Register: MacChannelStats[128]_RxCIfInMultiCastPkts - Incremented with each valid frame received on the Receive FIFO interface and bit 0 of the destination address was '1' but not the broadcast address (all bits set to '1'). Pause frames are not counted.
  Register: MacChannelStats[128]_RxCIfInBroadCastPkts - Incremented with each valid frame received on the Receive FIFO interface and all bits of the destination address were set to '1'.
  Register: MacChannelStats[128]_RxCStatsPkts - Total number of packets received. Good and bad packets.
  Register: MacChannelStats[128]_RxCStatsPkts64octets - Incremented when a packet of 64 octets length is received (good and bad frames are counted).
  Register: MacChannelStats[128]_RxCStatsPkts65to127octets - Frames (good and bad) with 65 to 127 octets.
  Register: MacChannelStats[128]_RxCStatsPkts128to255octets - Frames (good and bad) with 128 to 255 octets.
  Register: MacChannelStats[128]_RxCStatsPkts256to511octets - Frames (good and bad) with 256 to 511 octets.
  Register: MacChannelStats[128]_RxCStatsPkts512to1023octets - Frames (good and bad) with 512 to 1023 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1024to1518octets - Frames (good and bad) with 1024 to 1518 octets.
  Register: MacChannelStats[128]_RxCStatsPkts1519toMaxoctets - Proprietary RMON extension counter that counts the number of frames with 1519 bytes to the maximum length programmed in register FRM_LENGTH.
  Register: MacChannelStats[128]_RxChanFramesReceivedOK - Frame received without error (including pause frames).
  Register: MacChannelStats[128]_RxChanVlanReceivedOK - VLAN frame received without error.
  Register: MacChannelStats[128]_TxCIfOutOctetsLo - Bits 31:0 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
  Register: MacChannelStats[128]_TxCIfOutErrors - Number of frames transmitted with error: FIFO Overflow Error, FIFO Underflow Error, or User application defined error (ff_tx_err asserted together with ff_tx_eop).
  Register: MacChannelStats[128]_TxCIfOutUniCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '0'.
  Register: MacChannelStats[128]_TxChanFramesTransmittedOK - Frame transmitted without error (including pause frames).
  Register: MacChannelStats[128]_TxChanVlanTransmittedOK - VLAN frame transmitted without error.
  Register: MacChannelStats[128]_TxCIfOutMultiCastPkts - Incremented with each frame written to the FIFO interface and bit 0 of the destination address set to '1' but not the broadcast address (all bits set to '1').
  Register: MacChannelStats[128]_TxCIfOutBroadCastPkts - Incremented with each frame written to the FIFO interface and all bits of the destination address set to '1'.
    Bits: 31:0  StatCounter32(rc) - Clear on read 32 bit counter.
*/
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInOctetsLo(_x, _y) (0x00000000 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxFrameTooLongErrors(_x, _y) (0x00000008 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxInRangeLengthErrors(_x, _y) (0x0000000c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxVlanReceivedOK(_x, _y) (0x00000010 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInErrors(_x, _y) (0x00000014 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInBroadCastPkts(_x, _y) (0x00000018 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsDropEvents(_x, _y) (0x0000001c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxAlignmentErrors(_x, _y) (0x00000020 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPauseMacCtlFramesReceived(_x, _y) (0x00000024 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxFramesReceivedOK(_x, _y) (0x00000028 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxFrameCheckSequenceErrors(_x, _y) (0x0000002c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInUniCastPkts(_x, _y) (0x00000030 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInMultiCastPkts(_x, _y) (0x00000034 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts(_x, _y) (0x00000038 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsUndersizePkts(_x, _y) (0x0000003c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts64octets(_x, _y) (0x00000040 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts65to127octets(_x, _y) (0x00000044 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts512to1023octets(_x, _y) (0x00000048 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts1024to1518octets(_x, _y) (0x0000004c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsJabbers(_x, _y) (0x00000050 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsFragments(_x, _y) (0x00000054 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived2(_x, _y) (0x00000058 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived3(_x, _y) (0x0000005c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts128to255octets(_x, _y) (0x00000060 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts256to511octets(_x, _y) (0x00000064 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsPkts1519toMaxoctets(_x, _y) (0x00000068 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPStatsOversizePkts(_x, _y) (0x0000006c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived0(_x, _y) (0x00000070 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived1(_x, _y) (0x00000074 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived4(_x, _y) (0x00000078 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived5(_x, _y) (0x0000007c + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived6(_x, _y) (0x00000080 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxCBFCPauseFramesReceived7(_x, _y) (0x00000084 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxMacCtlFramesReceived(_x, _y) (0x00000088 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutOctetsLo(_x, _y) (0x000000a0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxVlanTransmittedOK(_x, _y) (0x000000a8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutErrors(_x, _y) (0x000000ac + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutBroadCastPkts(_x, _y) (0x000000b0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts64octets(_x, _y) (0x000000b4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts256to511octets(_x, _y) (0x000000b8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts512to1023octets(_x, _y) (0x000000bc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPauseMacCtlFramesTransmitted(_x, _y) (0x000000c0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxFramesTransmittedOK(_x, _y) (0x000000c4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutUniCastPkts(_x, _y) (0x000000c8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutMultiCastPkts(_x, _y) (0x000000cc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts65to127octets(_x, _y) (0x000000d0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts128to255octets(_x, _y) (0x000000d4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts1024to1518octets(_x, _y) (0x000000d8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPStatsPkts1519toMAXoctets(_x, _y) (0x000000dc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted0(_x, _y) (0x000000e0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted1(_x, _y) (0x000000e4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted4(_x, _y) (0x000000e8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted5(_x, _y) (0x000000ec + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted2(_x, _y) (0x000000f0 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted3(_x, _y) (0x000000f4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted6(_x, _y) (0x000000f8 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxCBFCPauseFramesTransmitted7(_x, _y) (0x000000fc + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCIfInOctetsLo(_x)  (0x00010000 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsOctetsLo(_x) (0x00010008 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCIfInErrors(_x)    (0x00010010 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCIfInUniCastPkts(_x) (0x00010014 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCIfInMultiCastPkts(_x) (0x00010018 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCIfInBroadCastPkts(_x) (0x0001001c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts(_x)     (0x00010020 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts64octets(_x) (0x00010024 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts65to127octets(_x) (0x00010028 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts128to255octets(_x) (0x0001002c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts256to511octets(_x) (0x00010030 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts512to1023octets(_x) (0x00010034 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts1024to1518octets(_x) (0x00010038 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsPkts1519toMaxoctets(_x) (0x0001003c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxChanFramesReceivedOK(_x) (0x00010040 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxChanVlanReceivedOK(_x) (0x00010044 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxCIfOutOctetsLo(_x) (0x00010060 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxCIfOutErrors(_x)   (0x00010068 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxCIfOutUniCastPkts(_x) (0x0001006c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxChanFramesTransmittedOK(_x) (0x00010070 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxChanVlanTransmittedOK(_x) (0x00010074 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxCIfOutMultiCastPkts(_x) (0x00010078 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxCIfOutBroadCastPkts(_x) (0x0001007c + (0x100 * ((_x) & 0x7f)))
#define   NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter32_StatCounter32(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter32_StatCounter32_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_RxPIfInOctetsHi - Bits 39:32 of count. All octets received except preamble (i.e. Header, Payload, Padding and FCS) for all frames and pause frames received
  Register: MacEthPortStatsHyd[2]_MacEthPortStatsSeg[12]_TxPIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted. Valid pause frame transmitted.for 24bit (TxCounter24)
  Register: MacChannelStats[128]_RxCIfInOctetsHi - Bits 39:32 of count. All octets received for all frames, good or bad, that are passed to the ingress packet memory. Bytes/Frames that are consumed by the MACs are not counted( eg FCS will not be counted if stripped or Pause frames if not passed to the Rx FIFO interface).
  Register: MacChannelStats[128]_RxCStatsOctetsHi - Total number of octets for valid frames received. Goodput octets.
  Register: MacChannelStats[128]_TxCIfOutOctetsHi - Bits 39:32 of count. All octets transmitted except preamble (i.e. Header, Payload, Padding and FCS) for all valid frames and valid pause frames transmitted.
    Bits:  7:0  StatCounter8(rc) - Clear on read 8 bit counter.
*/
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_RxPIfInOctetsHi(_x, _y) (0x00000004 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_TxPIfOutOctetsHi(_x, _y) (0x000000a4 + (0x1000 * ((_x) & 0x1)) + (0x100 * ((_y) & 0xf)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCIfInOctetsHi(_x)  (0x00010004 + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_RxCStatsOctetsHi(_x) (0x0001000c + (0x100 * ((_x) & 0x7f)))
#define NFP3800_NBI_MAC_MacChannelStats_TxCIfOutOctetsHi(_x) (0x00010064 + (0x100 * ((_x) & 0x7f)))
#define   NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter8_StatCounter8(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MAC_MacEthPortStatsHyd_MacEthPortStatsSeg_StatCounter8_StatCounter8_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacBlkReset - Main Block Resets
    Bits: 31:24 Rfu2(rw) - Reserved for Use.
    Bits: 23    MacHy1StatRst(rw) - The Reset for Hydra1 Stats logic.
    Bits: 22    MacHy0StatRst(rw) - The Reset for Hydra0 stats logic.
    Bits: 21    MacTxRstMpb(rw) - The Reset for tx gasket MPB logic.
    Bits: 20    MacRxRstMpb(rw) - The Reset for rx gasket MPB logic.
    Bits: 19    MacTxRstCore(rw) - The Reset for tx gasket core logic.
    Bits: 18    MacRxRstCore(rw) - The Reset for rx gasket core logic.
    Bits: 17    MacFcX2RstLk1(rw) - N/A.
    Bits: 16    MacFcX2RstLk0(rw) - N/A.
    Bits: 15    MacRxRstLk1(rw) - N/A.
    Bits: 14    MacRxRstLk0(rw) - N/A.
    Bits: 13    MacTxRstLk1(rw) - N/A.
    Bits: 12    MacTxRstLk0(rw) - N/A.
    Bits: 11    MacRstLk1(rw) - N/A.
    Bits: 10    MacRstLk0(rw) - N/A.
    Bits:  9    MacX2ClkEnLk1(rw) - N/A.
    Bits:  8    MacX2ClkEnLk0(rw) - N/A.
    Bits:  7    MacCoreClkEnLk1(rw) - N/A.
    Bits:  6    MacCoreClkEnLk0(rw) - N/A.
    Bits:  5    MacCoreClkEnHy1(rw) - Core Clock enable for Hydra1
    Bits:  4    MacCoreClkEnHy0(rw) - Core Clock enable for Hydra0
    Bits:  3    Rfu(rw) - Reserved for Use.
    Bits:  2    MacSerDesRst(rw) - Reset to all MAC SerDes
    Bits:  1    MacSReset(rw) - SRESET - Not Used
    Bits:  0    MacHReset(rw) - HRESET - Not Used
*/
#define NFP3800_NBI_MACX_CSR_MacBlkReset                     0x00000000
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_Rfu2(_x)          (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_Rfu2_of(_x)       (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacHy1StatRst     BIT(23)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacHy0StatRst     BIT(22)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacTxRstMpb       BIT(21)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacRxRstMpb       BIT(20)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacTxRstCore      BIT(19)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacRxRstCore      BIT(18)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacFcX2RstLk1     BIT(17)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacFcX2RstLk0     BIT(16)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacRxRstLk1       BIT(15)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacRxRstLk0       BIT(14)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacTxRstLk1       BIT(13)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacTxRstLk0       BIT(12)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacRstLk1         BIT(11)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacRstLk0         BIT(10)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacX2ClkEnLk1     BIT(9)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacX2ClkEnLk0     BIT(8)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnLk1   BIT(7)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnLk0   BIT(6)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnHy1   BIT(5)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacCoreClkEnHy0   BIT(4)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_Rfu               BIT(3)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacSerDesRst      BIT(2)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacSReset         BIT(1)
#define   NFP3800_NBI_MACX_CSR_MacBlkReset_MacHReset         BIT(0)
/*----------------------------------------------------------------
  Register: MacHyd0BlkReset - Hydra-10:0 Resets Register
  Register: MacHyd1BlkReset - Hydra-10:1 Resets Register
    Bits: 31:20 MacHydRxSerDesIfRst(rw) - Hydra RX Serdes Interface Resets. Rx Serdes clks must be running.
    Bits: 19:16 Rfu(rw) - Reserved for Use.
    Bits: 15:4  MacHydTxSerDesIfRst(rw) - Hydra TX Serdes Interface Resets. Tx Serdes clks must be running.
    Bits:  3    MacHydRxFFRst(rw) - Hydra RX Fifo Interface Clock Domain Reset.
    Bits:  2    MacHydTxFFRst(rw) - Hydra TX Fifo Interface Clock Domain Reset.
    Bits:  1    MacHydRegRst(rw) - Hydra Reg Clock Domain Reset.
    Bits:  0    MacHydRefRst(rw) - Hydra Ref Clock Domain Reset.
*/
#define NFP3800_NBI_MACX_CSR_MacHyd0BlkReset                 0x00000004
#define NFP3800_NBI_MACX_CSR_MacHyd1BlkReset                 0x00000008
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydRxSerDesIfRst(_x) (((_x) & 0xfff) << 20)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydRxSerDesIfRst_of(_x) (((_x) >> 20) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_Rfu(_x)        (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_Rfu_of(_x)     (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydTxSerDesIfRst(_x) (((_x) & 0xfff) << 4)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydTxSerDesIfRst_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydRxFFRst  BIT(3)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydTxFFRst  BIT(2)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydRegRst   BIT(1)
#define   NFP3800_NBI_MACX_CSR_MacHydBlkReset_MacHydRefRst   BIT(0)
/*----------------------------------------------------------------
  Register: MacMuxCtrl - Mac Mux Control Register
    Bits: 31:10 RfuMuxCtrl(rw) - Reserved.
    Bits:  9:0  NbiPoolLive(ro) - Live value of the NBI IG buffer pool. Bit[9] set indicates count is negative, which can be expected at times.
*/
#define NFP3800_NBI_MACX_CSR_MacMuxCtrl                      0x0000000c
#define   NFP3800_NBI_MACX_CSR_MacMuxCtrl_RfuMuxCtrl(_x)     (((_x) & 0x3fffff) << 10)
#define   NFP3800_NBI_MACX_CSR_MacMuxCtrl_RfuMuxCtrl_of(_x)  (((_x) >> 10) & 0x3fffff)
#define   NFP3800_NBI_MACX_CSR_MacMuxCtrl_NbiPoolLive(_x)    (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacMuxCtrl_NbiPoolLive_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacSerDesEn - Mac SerDes Enable Register
    Bits: 31    DmeModeHwDisable(rw) - When set, prevents the AutoNeg IP from setting DME mode on all RX lanes.
    Bits: 30:24 Rfu(rw) - Reserved for Use.
    Bits: 23:0  SerDesEnable(rw) - Serdes Enables. (May be redefined when SerDes added).
*/
#define NFP3800_NBI_MACX_CSR_MacSerDesEn                     0x00000010
#define   NFP3800_NBI_MACX_CSR_MacSerDesEn_DmeModeHwDisable  BIT(31)
#define   NFP3800_NBI_MACX_CSR_MacSerDesEn_Rfu(_x)           (((_x) & 0x7f) << 24)
#define   NFP3800_NBI_MACX_CSR_MacSerDesEn_Rfu_of(_x)        (((_x) >> 24) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MacSerDesEn_SerDesEnable(_x)  (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacSerDesEn_SerDesEnable_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacSysSupCtrl - Mac System Support Control Register
    Bits: 31    HistoGoodputOnly(rw) - When set, stats histograms only count goodput
    Bits: 30    NbiIgPortXoffEn(rw) - If set to 1, enables the NBI to inhibit IG dequeues on a port basis.
    Bits: 29    SplitMemEnhEg(rw) - Combined with SplitMemIG to configure the gasket memories for Egress. 2b00:Core0 all mem, 2b01:Core0 1/2 and Core1 1.2, 2b10:Core1 all memory, 2b11:Core0 3/4 Core1 1/4.
    Bits: 28    SplitMemEnh(rw) - Combined with SplitMemIG to configure the gasket memories for Ingress. 2b00:Core0 all mem, 2b01:Core0 1/2 and Core1 1.2, 2b10:Core1 all memory, 2b11:Core0 3/4 Core1 1/4.
    Bits: 27    IgParsePaylenEnable(rw) - When set, IG parser will use L3 paylength to limit checksum for L4(UDP/TCP) and L4 overall checksums.
    Bits: 26    MacSerDesLaneSwapL23L12(rw) - N/A.
    Bits: 25    MacSerDesLaneSwapL11L00(rw) - N/A.
    Bits: 24    MacIlkForcePadErr(rw) - N/A.
    Bits: 23:20 MacMpbFreeBufFifoLowWm(rw) - Low Water mark for Free Buffer FIFO to start backpressuring NBI MPB thru denial of data credits.
    Bits: 19    MacIgLnkLstFreezeOnErrN(rw) - When 0, Freeze IG Linklist on Multibit ECC error.
    Bits: 18    MacEgLnkLstFreezeOnErrN(rw) - When 0, Freeze EG Linklist on Multibit ECC error.
    Bits: 17    DwrrArbiterDisable(rw) - IG DQ DWRR arbiter disable bit. Setting this bit to 1 will disable Ingress DQ operation.
    Bits: 16    DwrrWeightWrEnable(rw) - IG DQ DWRR arbiter inits to fixed weights. To overwrite the fixed weights, this bit must be set and remain set to use the override values.
    Bits: 15    MacIlkLiveIntSel(rw) - .
    Bits: 14    Lk1IgDqSegmentedEn(rw) - .
    Bits: 13    Lk0IgDqSegmentedEn(rw) - .
    Bits: 12    Lk1LinklistEn(rw) - When set and SplitMemIG set, enables the IG freelist FIFO for Laken1 to pull from the free pool.
    Bits: 11    Lk0LinklistEn(rw) - When set, enables the IG freelist FIFO for Laken0 to pull from the free pool.
    Bits: 10    Hy1LinklistEn(rw) - When set and SplitMemIG also set, enables the IG freelist FIFO for Hydra1 to pull from the free pool.
    Bits:  9    Hy0LinklistEn(rw) - When set, enables the IG freelist FIFO for Hydra0 to pull from the free pool.
    Bits:  8    SplitMemIG(rw) - When set, splits the channels, packet and linklist memories in half to support 2 active hydras. Ingress and Egress.
    Bits:  7    ExtraEthHistMode(rw) - When set, swaps some channel stats counters for additional histogram size counters. Ethernet ports only
    Bits:  6    Limiter_Disable_Hy1(rw) - When set, disables the EG DQ limiter for ALL ports 0-19. Eq limiter only enabled for TDM modes 0, 1G, and 2.5G
    Bits:  5    MacSysSupCtrlA(rw) - Control Bit for system support block
    Bits:  4    MacPerfFast2Slow(rw) - Control Bit for perf_synchronizer. If CORE_CLK faster than P_CLK set to 1.
    Bits:  3    TimeStampFrc(rw) - When set, timestamp runs as a 64-bit Free Running Counter incrementing the assigned every Core_Clock cycle. When 0, the counters operate as 32 bits of seconds and 32 bits of nsec when the appropriate increment value is set with the lower 32 bits rolling over to 0 at 999,999,999 + 1 and incrementing the upper 32 bit seconds counter
    Bits:  2    TimeStampSet(rw) - When set, timestamp loads with the init values from the setSec and setNsec registers. TimeStamEn MUST BE 0 for set function to operate.
    Bits:  1    TimeStampRst(rw) - When set, timestamp resets to 0.
    Bits:  0    TimeStampEn(rw) - When set, timestamp increments at the set incr value each core_clock.
*/
#define NFP3800_NBI_MACX_CSR_MacSysSupCtrl                   0x00000014
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_HistoGoodputOnly BIT(31)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_NbiIgPortXoffEn BIT(30)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_SplitMemEnhEg   BIT(29)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_SplitMemEnh     BIT(28)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_IgParsePaylenEnable BIT(27)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacSerDesLaneSwapL23L12 BIT(26)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacSerDesLaneSwapL11L00 BIT(25)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacIlkForcePadErr BIT(24)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacMpbFreeBufFifoLowWm(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacMpbFreeBufFifoLowWm_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacIgLnkLstFreezeOnErrN BIT(19)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacEgLnkLstFreezeOnErrN BIT(18)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_DwrrArbiterDisable BIT(17)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_DwrrWeightWrEnable BIT(16)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacIlkLiveIntSel BIT(15)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Lk1IgDqSegmentedEn BIT(14)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Lk0IgDqSegmentedEn BIT(13)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Lk1LinklistEn   BIT(12)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Lk0LinklistEn   BIT(11)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Hy1LinklistEn   BIT(10)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Hy0LinklistEn   BIT(9)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_SplitMemIG      BIT(8)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_ExtraEthHistMode BIT(7)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_Limiter_Disable_Hy1 BIT(6)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacSysSupCtrlA  BIT(5)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_MacPerfFast2Slow BIT(4)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_TimeStampFrc    BIT(3)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_TimeStampSet    BIT(2)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_TimeStampRst    BIT(1)
#define   NFP3800_NBI_MACX_CSR_MacSysSupCtrl_TimeStampEn     BIT(0)
/*----------------------------------------------------------------
  Register: MacSysSupStat - Mac System Support Status Register
    Bits: 31:25 MacNbiPoolLwm(rw) - Initial low water mark of the NBI IG buffer pool. Only change value at init time with MacNbiPoolDisable = 1. When pool count is less than or equal to the LWM, DQ requests and DWRR change DQ behavior to manage NBI buffer pool.
    Bits: 24:16 MacNbiPoolSize(rw) - Initial Size of the NBI IG buffer pool. Only change value at init time with MacNbiPoolDisable = 1.
    Bits: 15    MacNbiPoolDisable(rw) - If set to 1, mac does not monitor the available buffer memory in NBI. If 0, mac will manage NBI IG memory resources and schedule IG DQ traffic accordingly.
    Bits: 14    MacNbiPoolFairEn(rw) - When the NBI pool counters are enabled, setting this bit enables improved IG DQ fairness to MPB.
    Bits: 13    MacNbiPool2Sel(rw) - Must be 0. Not supported.
    Bits: 12    MacIgChkOverall(rw) - If set, IG parse checksum will always be the L2 overall checksum on all ports.
    Bits: 11    MacErrStatEn(rw) - Replace IG parse result with IP provided ErrStatus on all ports.
    Bits: 10    MacNoDropErrPktEn(rw) - Pass IG packets with IP flagged errors thru to NBI for all ports. Must have IG parse prepend enabled for all active ports and MacErrStatEn=1 to inhibit dropping.
    Bits:  9:5  MacEthTsMld2(rw) - Timestamp adjustment value for Multi-Lane TS when MLD=2(100G). 40G adjustment is val >> 1.
    Bits:  4:0  MacEthTsMld1(rw) - Timestamp adjustment value for Multi-Lane TS when MLD=1(100G). 40G adjustment is val >> 1.
*/
#define NFP3800_NBI_MACX_CSR_MacSysSupStat                   0x00000018
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPoolLwm(_x) (((_x) & 0x7f) << 25)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPoolLwm_of(_x) (((_x) >> 25) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPoolSize(_x) (((_x) & 0x1ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPoolSize_of(_x) (((_x) >> 16) & 0x1ff)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPoolDisable BIT(15)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPoolFairEn BIT(14)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNbiPool2Sel  BIT(13)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacIgChkOverall BIT(12)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacErrStatEn    BIT(11)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacNoDropErrPktEn BIT(10)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacEthTsMld2(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacEthTsMld2_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacEthTsMld1(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_MacSysSupStat_MacEthTsMld1_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacTimeStampNsec - Mac TimeStamp Nanoseconds
    Bits: 31:0  MacTimeStampNsec(ro) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP3800_NBI_MACX_CSR_MacTimeStampNsec                0x0000001c
#define   NFP3800_NBI_MACX_CSR_MacTimeStampNsec_MacTimeStampNsec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampNsec_MacTimeStampNsec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSec - Mac TimeStamp Seconds
    Bits: 31:0  MacTimeStampSec(ro) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP3800_NBI_MACX_CSR_MacTimeStampSec                 0x00000020
#define   NFP3800_NBI_MACX_CSR_MacTimeStampSec_MacTimeStampSec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampSec_MacTimeStampSec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampIncr - Mac TimeStamp Increment in Nanoseconds and fraction of nanoseconds
    Bits: 19:16 IncrNsec(rw) - Increment in whole nsecs to TsNsec in nsec every Mac Core Clock(800Mhz nominal)
    Bits: 15:0  IncrFraction(rw) - Increment in fractional to TsNsec in nsec every Mac Core Clock to compensate for variations.
*/
#define NFP3800_NBI_MACX_CSR_MacTimeStampIncr                0x00000024
#define   NFP3800_NBI_MACX_CSR_MacTimeStampIncr_IncrNsec(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampIncr_IncrNsec_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampIncr_IncrFraction(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampIncr_IncrFraction_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetNsec - Mac TimeStamp Set Nanoseconds
    Bits: 31:0  MacTimeStampSetNsec(rw) - Timestamp in Nsec in system support block: count 0-999,999,999, increments the TsSec counter on roll to 0
*/
#define NFP3800_NBI_MACX_CSR_MacTimeStampSetNsec             0x00000028
#define   NFP3800_NBI_MACX_CSR_MacTimeStampSetNsec_MacTimeStampSetNsec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampSetNsec_MacTimeStampSetNsec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTimeStampSetSec - Mac TimeStamp Set Seconds
    Bits: 31:0  MacTimeStampSetSec(rw) - Timestamp in Seconds in system support block: increments when the TsSec counter rolls to 0
*/
#define NFP3800_NBI_MACX_CSR_MacTimeStampSetSec              0x0000002c
#define   NFP3800_NBI_MACX_CSR_MacTimeStampSetSec_MacTimeStampSetSec(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTimeStampSetSec_MacTimeStampSetSec_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord3100 - Egress TDM cycle word 31:00 for Hydra0 and Interlaken(s).
  Register: MacTdm1CycleWord3100 - Egress TDM cycle word 31:00 for Hydra1.
    Bits: 31:28 MacTdmPortSlot7(rw) - TDM egress port for TDM slot 7
    Bits: 27:24 MacTdmPortSlot6(rw) - TDM egress port for TDM slot 6
    Bits: 23:20 MacTdmPortSlot5(rw) - TDM egress port for TDM slot 5
    Bits: 19:16 MacTdmPortSlot4(rw) - TDM egress port for TDM slot 4
    Bits: 15:12 MacTdmPortSlot3(rw) - TDM egress port for TDM slot 3
    Bits: 11:8  MacTdmPortSlot2(rw) - TDM egress port for TDM slot 2
    Bits:  7:4  MacTdmPortSlot1(rw) - TDM egress port for TDM slot 1
    Bits:  3:0  MacTdmPortSlot0(rw) - TDM egress port for TDM slot 0
*/
#define NFP3800_NBI_MACX_CSR_MacTdm0CycleWord3100            0x00000030
#define NFP3800_NBI_MACX_CSR_MacTdm1CycleWord3100            0x00000038
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot7(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot6(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot6_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot5(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot5_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot4(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot4_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot3(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot3_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot2(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot1(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord3100_MacTdmPortSlot0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0CycleWord4732 - Egress TDM cycle word 47:32 for Hydra0.
  Register: MacTdm1CycleWord4732 - Egress TDM cycle word 47:32 for Hydra1.
    Bits:  7:4  MacTdmPortSlot9(rw) - TDM egress port for TDM slot 9
    Bits:  3:0  MacTdmPortSlot8(rw) - TDM egress port for TDM slot 8
*/
#define NFP3800_NBI_MACX_CSR_MacTdm0CycleWord4732            0x00000034
#define NFP3800_NBI_MACX_CSR_MacTdm1CycleWord4732            0x0000003c
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot9(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot9_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot8(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTdmCycleWord4732_MacTdmPortSlot8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacTdm0Mode0900 - Mac Hydra0 Ports Egress mode bits for ports 9-0.
  Register: MacTdm1Mode0900 - Mac Hydra1 Ports Egress mode bits for ports 9-0.
    Bits: 29:27 MacTdmModePort9(rw) - TDM egress port rate for Mac port 9
    Bits: 26:24 MacTdmModePort8(rw) - TDM egress port rate for Mac port 8
    Bits: 23:21 MacTdmModePort7(rw) - TDM egress port rate for Mac port 67
    Bits: 20:18 MacTdmModePort6(rw) - TDM egress port rate for Mac port 6
    Bits: 17:15 MacTdmModePort5(rw) - TDM egress port rate for Mac port 5
    Bits: 14:12 MacTdmModePort4(rw) - TDM egress port rate for Mac port 4
    Bits: 11:9  MacTdmModePort3(rw) - TDM egress port rate for Mac port 3
    Bits:  8:6  MacTdmModePort2(rw) - TDM egress port rate for Mac port 2
    Bits:  5:3  MacTdmModePort1(rw) - TDM egress port rate for Mac port 1
    Bits:  2:0  MacTdmModePort0(rw) - TDM egress port rate for Mac port 0
*/
#define NFP3800_NBI_MACX_CSR_MacTdm0Mode0900                 0x00000040
#define NFP3800_NBI_MACX_CSR_MacTdm1Mode0900                 0x00000048
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9(_x) (((_x) & 0x7) << 27)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_of(_x) (((_x) >> 27) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort9_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8(_x) (((_x) & 0x7) << 24)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_of(_x) (((_x) >> 24) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort8_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7(_x) (((_x) & 0x7) << 21)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_of(_x) (((_x) >> 21) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort7_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6(_x) (((_x) & 0x7) << 18)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_of(_x) (((_x) >> 18) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort6_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5(_x) (((_x) & 0x7) << 15)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_of(_x) (((_x) >> 15) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort5_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4(_x) (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_of(_x) (((_x) >> 12) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort4_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3(_x) (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_of(_x) (((_x) >> 9) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort3_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2(_x) (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_of(_x) (((_x) >> 6) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort2_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_of(_x) (((_x) >> 3) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort1_OFF (0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_of(_x) (((_x) >> 0) & 0x7)
#define     NFP3800_NBI_MACX_CSR_MacTdmMode0900_MacTdmModePort0_OFF (0)
/*----------------------------------------------------------------
  Register: MacTdm0Mode1110CrcEn - Mac Hydra0 Ports Tx Crc enable for ports 9-0.
  Register: MacTdm1Mode1110CrcEn - Mac Hydra1 Ports Tx Crc enable for ports 9-0.
    Bits: 25:16 MacEgressPortCrcEn(rw) - If set, Enables MAC egress port (09-00) to append CRC.
*/
#define NFP3800_NBI_MACX_CSR_MacTdm0Mode1110CrcEn            0x00000044
#define NFP3800_NBI_MACX_CSR_MacTdm1Mode1110CrcEn            0x0000004c
#define   NFP3800_NBI_MACX_CSR_MacTdmMode1110Crc_MacEgressPortCrcEn(_x) (((_x) & 0x3ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacTdmMode1110Crc_MacEgressPortCrcEn_of(_x) (((_x) >> 16) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacPort2to0ChanAssign - Mac Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacPort5to3ChanAssign - Mac Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacPort8to6ChanAssign - Mac Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacPort9ChanAssign - Mac Hydra0 Ports 9 Channel Assignment Register.
  Register: MacPort12to10ChanAssign - Mac Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacPort15to13ChanAssign - Mac Hydra1 Port 5-3 Channel Assignment Register.
  Register: MacPort18to16ChanAssign - Mac Hydra1 Port 8-6 Channel Assignment Register.
  Register: MacPort19ChanAssign - Mac Hydra1 Port 9 Channel Assignment Register.
  Register: MacEgPort2to0ChanAssign - Mac EG Hydra0 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort5to3ChanAssign - Mac EG Hydra0 Ports 5-3 Channel Assignment Register.
  Register: MacEgPort8to6ChanAssign - Mac EG Hydra0 Ports 8-6 Channel Assignment Register.
  Register: MacEgPort9ChanAssign - Mac EG Hydra0 Ports 9 Channel Assignment Register.
  Register: MacEgPort12to10ChanAssign - Mac EG Hydra1 Ports 2-0 Channel Assignment Register.
  Register: MacEgPort15to13ChanAssign - Mac EG Hydra1 Port 5-3 Channel Assignment Register.
  Register: MacEgPort18to16ChanAssign - Mac EG Hydra1 Port 8-6 Channel Assignment Register.
  Register: MacEgPort19ChanAssign - Mac EG Hydra1 Port 9 Channel Assignment Register.
    Bits: 29:26 PortNumOfChannels2(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 25:20 PortBaseChan2(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits: 19:16 PortNumOfChannels1(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits: 15:10 PortBaseChan1(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
    Bits:  9:6  PortNumOfChannels0(rw) - Number of active channels 0 - 8 for a port. Channel mapping range = base + 0:num where base+0 is the lowest priority channel and base+(num-1) is the highest.
    Bits:  5:0  PortBaseChan0(rw) - Base channel number for port. For Hydra0 0-63. For Hydra1 0-63 + 64.
*/
#define NFP3800_NBI_MACX_CSR_MacPort2to0ChanAssign           0x00000050
#define NFP3800_NBI_MACX_CSR_MacPort5to3ChanAssign           0x00000054
#define NFP3800_NBI_MACX_CSR_MacPort8to6ChanAssign           0x00000058
#define NFP3800_NBI_MACX_CSR_MacPort9ChanAssign              0x0000005c
#define NFP3800_NBI_MACX_CSR_MacPort12to10ChanAssign         0x00000060
#define NFP3800_NBI_MACX_CSR_MacPort15to13ChanAssign         0x00000064
#define NFP3800_NBI_MACX_CSR_MacPort18to16ChanAssign         0x00000068
#define NFP3800_NBI_MACX_CSR_MacPort19ChanAssign             0x0000006c
#define NFP3800_NBI_MACX_CSR_MacEgPort2to0ChanAssign         0x00000240
#define NFP3800_NBI_MACX_CSR_MacEgPort5to3ChanAssign         0x00000244
#define NFP3800_NBI_MACX_CSR_MacEgPort8to6ChanAssign         0x00000248
#define NFP3800_NBI_MACX_CSR_MacEgPort9ChanAssign            0x0000024c
#define NFP3800_NBI_MACX_CSR_MacEgPort12to10ChanAssign       0x00000250
#define NFP3800_NBI_MACX_CSR_MacEgPort15to13ChanAssign       0x00000254
#define NFP3800_NBI_MACX_CSR_MacEgPort18to16ChanAssign       0x00000258
#define NFP3800_NBI_MACX_CSR_MacEgPort19ChanAssign           0x0000025c
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels2(_x) (((_x) & 0xf) << 26)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels2_of(_x) (((_x) >> 26) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan2(_x) (((_x) & 0x3f) << 20)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan2_of(_x) (((_x) >> 20) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels1(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels1_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan1(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan1_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels0(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortNumOfChannels0_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPortChanAssign_PortBaseChan0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: MacPrePendCtl03to00 - Ethernet Core 0: Mac ports 03-00 prepend skip bytes.
  Register: MacPrePendCtl13to10 - Ethernet Core 1: Mac ports 03-00 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort3(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort2(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort1(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only). Ports 0 Maps to Interlaken MAC 0 if enabled.
    Bits:  3:0  IGSkipOctetsPort0(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only). Port 0 Maps to Interlaken MAC 0 if enabled.
*/
#define NFP3800_NBI_MACX_CSR_MacPrePendCtl03to00             0x00000070
#define NFP3800_NBI_MACX_CSR_MacPrePendCtl13to10             0x0000007c
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort3(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort3_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort3(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort3_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort2(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort2_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort2(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort2_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort1(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort1_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_EGSkipOctetsPort0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl1_IGSkipOctetsPort0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl07to04 - Ethernet Core 0: Mac ports 07-04 prepend skip bytes.
  Register: MacPrePendCtl17to14 - Ethernet Core 1: Mac ports 07-04 prepend skip bytes.
    Bits: 31:28 EGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 27:24 IGSkipOctetsPort7(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 23:20 EGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 19:16 IGSkipOctetsPort6(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits: 15:12 EGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort5(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort4(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP3800_NBI_MACX_CSR_MacPrePendCtl07to04             0x00000074
#define NFP3800_NBI_MACX_CSR_MacPrePendCtl17to14             0x00000080
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort7(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort7_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort7(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort7_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort6(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort6_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort6(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort6_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort5(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort5_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort5(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort5_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort4(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_EGSkipOctetsPort4_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort4(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl2_IGSkipOctetsPort4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendCtl09to08 - Ethernet Core 0: Mac ports 09-08 prepend skip bytes.
  Register: MacPrePendCtl19to18 - Ethernet Core 1: Mac ports 09-08 prepend skip bytes.
    Bits: 31:16 Rfu(rw) - Reserved.
    Bits: 15:12 EGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits: 11:8  IGSkipOctetsPort9(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
    Bits:  7:4  EGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Egress packet before parsing for MAC Header(0-8 only).
    Bits:  3:0  IGSkipOctetsPort8(rw) - Number of bytes to skip at beginning of Ingress packet before parsing for MAC Header(0-8 only).
*/
#define NFP3800_NBI_MACX_CSR_MacPrePendCtl09to08             0x00000078
#define NFP3800_NBI_MACX_CSR_MacPrePendCtl19to18             0x00000084
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_Rfu(_x)        (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_Rfu_of(_x)     (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort9(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort9_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort9(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort9_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort8(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_EGSkipOctetsPort8_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort8(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPrePendCtl3_IGSkipOctetsPort8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtl15to00 - Mac IG ports 15-00 DSA TAG control.
  Register: MacEgPrePendDsaCtl15to00 - Mac EG ports 15-00 DSA TAG control.
    Bits: 31:30 DsaTagModePort15(rw) - DSA tagging mode for port 15.
    Bits: 29:28 DsaTagModePort14(rw) - DSA tagging mode for port 14.
    Bits: 27:26 DsaTagModePort13(rw) - DSA tagging mode for port 13.
    Bits: 25:24 DsaTagModePort12(rw) - DSA tagging mode for port 12.
    Bits: 23:22 DsaTagModePort11(rw) - DSA tagging mode for port 11.
    Bits: 21:20 DsaTagModePort10(rw) - DSA tagging mode for port 10.
    Bits: 19:18 DsaTagModePort9(rw) - DSA tagging mode for port 9.
    Bits: 17:16 DsaTagModePort8(rw) - DSA tagging mode for port 8.
    Bits: 15:14 DsaTagModePort7(rw) - DSA tagging mode for port 7.
    Bits: 13:12 DsaTagModePort6(rw) - DSA tagging mode for port 6..
    Bits: 11:10 DsaTagModePort5(rw) - DSA tagging mode for port 5.
    Bits:  9:8  DsaTagModePort4(rw) - DSA tagging mode for port 4.
    Bits:  7:6  DsaTagModePort3(rw) - DSA tagging mode for port 3.
    Bits:  5:4  DsaTagModePort2(rw) - DSA tagging mode for port 2.
    Bits:  3:2  DsaTagModePort1(rw) - DSA tagging mode for port 1.
    Bits:  1:0  DsaTagModePort0(rw) - DSA tagging mode for port 0.
*/
#define NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl15to00          0x00000088
#define NFP3800_NBI_MACX_CSR_MacEgPrePendDsaCtl15to00        0x000001cc
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort15(_x) (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort15_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort14(_x) (((_x) & 0x3) << 28)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort14_of(_x) (((_x) >> 28) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort13(_x) (((_x) & 0x3) << 26)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort13_of(_x) (((_x) >> 26) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort12(_x) (((_x) & 0x3) << 24)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort12_of(_x) (((_x) >> 24) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort11(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort11_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort10(_x) (((_x) & 0x3) << 20)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort10_of(_x) (((_x) >> 20) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort9(_x) (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort9_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort8(_x) (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort8_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort7(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort7_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort6(_x) (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort6_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort5(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort5_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort4(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort4_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort3(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort3_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort2(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort1(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl1_DsaTagModePort0_Disabled (0)
/*----------------------------------------------------------------
  Register: MacPrePendDsaCtlLkand23to16 - Mac IG ports 19-16 DSA TAG control.
  Register: MacEgPrePendDsaCtlLkand23to16 - "Mac EG ports 19-10 DSA TAG control.
    Bits:  7:6  DsaTagModePort19(rw) - DSA tagging mode for port 19.
    Bits:  5:4  DsaTagModePort18(rw) - DSA tagging mode for port 18.
    Bits:  3:2  DsaTagModePort17(rw) - DSA tagging mode for port 17.
    Bits:  1:0  DsaTagModePort16(rw) - DSA tagging mode for port 16.
*/
#define NFP3800_NBI_MACX_CSR_MacPrePendDsaCtlLkand23to16     0x0000008c
#define NFP3800_NBI_MACX_CSR_MacEgPrePendDsaCtlLkand23to16   0x000001d0
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort19(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort19_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort18(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort18_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort17(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort17_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACX_CSR_MacPrePendDsaCtl2_DsaTagModePort16_Disabled (0)
/*----------------------------------------------------------------
  Register: MacPcsIpCtrl0 - MAC-PCS external control register IP0.
  Register: MacPcsIpCtrl1 - MAC-PCS external control register IP1.
    Bits: 31:27 IpCtrlRsvdB(rw) - Reserved.
    Bits: 26:20 PcsFecErrEna(rw) - Per capable port enable (9,8,4-0) for optional error propagation in receive when FEC is active (IEEE 802.3 Clause 74.8.3). When enabled uncorrectable error blocks will cause injection of sync header errors to allow error detection by the PCS layer.
    Bits: 19:13 PcsFecEna(rw) - Enable control for FEC (Clause 74) datapath per capable port: 9,8,4-0. When set to 1, the Clause 74 FEC datapath is active for the port. If deasserted (0) the datapath uses normal 66b coding.
    Bits: 12    UsgmiiPcs40Bit(rw) - When USGMII mode is enabled, the serdes width can be set either to 20b (sgpcs_40b_0 = 0) or 40b (sgpcs_40b_0 = 1). The Sdn2 must be set to 0.
    Bits: 11    MacMode40GEna(rw) - If set, MAC Lanes 0-3 in 40G mode.
    Bits: 10    PcsMode40GEna(rw) - If set, PCS Lanes 0-3 in 40G mode.
    Bits:  9:0  Sdn2(rw) - Per Port SerDes Width. 0=full, 1=half.
*/
#define NFP3800_NBI_MACX_CSR_MacPcsIpCtrl0                   0x00000090
#define NFP3800_NBI_MACX_CSR_MacPcsIpCtrl1                   0x00000094
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_IpCtrlRsvdB(_x)  (((_x) & 0x1f) << 27)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_IpCtrlRsvdB_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_PcsFecErrEna(_x) (((_x) & 0x7f) << 20)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_PcsFecErrEna_of(_x) (((_x) >> 20) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_PcsFecEna(_x)    (((_x) & 0x7f) << 13)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_PcsFecEna_of(_x) (((_x) >> 13) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_UsgmiiPcs40Bit   BIT(12)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_MacMode40GEna    BIT(11)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_PcsMode40GEna    BIT(10)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_Sdn2(_x)         (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPcsIpCtrl_Sdn2_of(_x)      (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: EgBufferCreditPoolCount - Running count of total free buffers for egress.
    Bits: 31    EgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 EgBufferCreditCount1(ro) - Live value of egress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  EgBufferCreditCount(ro) - Live value of egress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP3800_NBI_MACX_CSR_EgBufferCreditPoolCount         0x00000098
#define   NFP3800_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferLinklistReady BIT(31)
#define   NFP3800_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount1(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount1_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_CSR_EgBufferCreditPoolCount_EgBufferCreditCount_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: TxMpbCreditInit - Initial values for Ingress-side minipacket bus credits.
    Bits: 31:20 Rfu(rw) - Reserved for Use.
    Bits: 19:16 TxMpbCreditDataInit(rw) - TX MPB Data credits initial value.
    Bits: 15:12 Rfu2(rw) - Reserved for Use.
    Bits: 11:6  TxMpbCreditMaxPktInit(rw) - TX MPB Pkt Max credits initial value.
    Bits:  5:0  TxMpbCreditPktInit(rw) - TX MPB Pkt credits initial value. The register MUST BE set to 7 or less.
*/
#define NFP3800_NBI_MACX_CSR_TxMpbCreditInit                 0x0000009c
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_Rfu(_x)       (((_x) & 0xfff) << 20)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_Rfu_of(_x)    (((_x) >> 20) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditDataInit(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditDataInit_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_Rfu2(_x)      (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_Rfu2_of(_x)   (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditMaxPktInit(_x) (((_x) & 0x3f) << 6)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditMaxPktInit_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditPktInit(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_CSR_TxMpbCreditInit_TxMpbCreditPktInit_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: IgBufferCreditPoolCount - Running count of total free buffers for ingress.
    Bits: 31    IgBufferLinklistReady(ro) - Indicates the IG Linklist has completed initalization.
    Bits: 29:16 IgBufferCreditCount1(ro) - Live value of ingress buffer free pool for core-pair 1 in split-mode only.
    Bits: 13:0  IgBufferCreditCount(ro) - Live value of ingress buffer free pool for core-pair 0 in non-split or split-mem modes.
*/
#define NFP3800_NBI_MACX_CSR_IgBufferCreditPoolCount         0x000000a0
#define   NFP3800_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferLinklistReady BIT(31)
#define   NFP3800_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount1(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount1_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgBufferCreditPoolCount_IgBufferCreditCount_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: RxMpbCreditInit - Initial values for Egress-side minipacket bus credits.
    Bits: 31:30 Rfu2(rw) - Reserved for Use.
    Bits: 29:16 RxMpbCreditDataInit(rw) - Egress-side MPB Data credits initial value(not used).
    Bits: 15:14 Rfu(rw) - Reserved for Use.
    Bits: 13:0  RxMpbCreditBufInit(rw) - Egress-side MPB Buffer credit init.(not used).
*/
#define NFP3800_NBI_MACX_CSR_RxMpbCreditInit                 0x000000a4
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_Rfu2(_x)      (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_Rfu2_of(_x)   (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditDataInit(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditDataInit_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_Rfu(_x)       (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_Rfu_of(_x)    (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditBufInit(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_CSR_RxMpbCreditInit_RxMpbCreditBufInit_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacTdmRateCreditInit - Egress TDM Per-Rate Credit Init values.
    Bits: 31:24 TDM100GECreditInit(rw) - Initial value of hydra 100G TDM credits.
    Bits: 23:16 TDM40GECreditInit(rw) - Initial value of hydra 40G TDM credits.
    Bits: 15:8  TDM10GECreditInit(rw) - Initial value of hydra 10G TDM credits.
    Bits:  7:0  TDM1GECreditInit(rw) - Initial value of hydra 1G TDM credits.
*/
#define NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit            0x000000a8
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM100GECreditInit(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM100GECreditInit_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM40GECreditInit(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM40GECreditInit_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM10GECreditInit(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM10GECreditInit_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM1GECreditInit(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTdmRateCreditInit_TDM1GECreditInit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus0 - Interrupts and errors status register 0.
    Bits: 31:0  MacInterruptErrStatus1(rw) - RFU.
*/
#define NFP3800_NBI_MACX_CSR_MacInterruptErrStatus0          0x000000ac
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus0_MacInterruptErrStatus1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus0_MacInterruptErrStatus1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacInterruptErrStatus1 - Interrupts and errors status register 1.
    Bits: 31    MacRxPfcChangeInt(rc) - Mac Interrupt for RX PFC State change any port.
    Bits: 30    MacTxPfcChangeInt(rc) - Mac Interrupt for TX PFC State change any port.
    Bits: 29:24 Rfu(rc) - Reserved for Use.
    Bits: 23:12 MacLinTrainingInthy1(rc) - Mac Link training Interrupt Hy1. (only 0-3 valid)
    Bits: 11:0  MacLinTrainingInthy0(rc) - Mac Link training Interrupt Hy0.
*/
#define NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1          0x000000b0
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_MacRxPfcChangeInt BIT(31)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_MacTxPfcChangeInt BIT(30)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_Rfu(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_Rfu_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy1(_x) (((_x) & 0xfff) << 12)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy1_of(_x) (((_x) >> 12) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy0(_x) (((_x) & 0xfff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacInterruptErrStatus1_MacLinTrainingInthy0_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: MacIgEqStatus - Ingress Enqueue Status and purge control.
    Bits: 31:26 IgEqStatusRfu(rw) - RFU.
    Bits: 25    Purge(w1c) - Set the purge bit to force a packet purge. Purge should only be used if the eq_inh has been set and the enq_inh_done does not set and WT4EOP is set for that port. This bit self-clears.
    Bits: 24:20 PurgePort(rw) - Port number where to force a packet purge when the purge bit gets set(0-19 valid).
    Bits: 19:0  IgEqWt4Eop(ro) - Waiting For EOP status bit for all 20 ports. If 1, then a packet is in progress for thast port. Live bits.
*/
#define NFP3800_NBI_MACX_CSR_MacIgEqStatus                   0x000000b4
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_IgEqStatusRfu(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_IgEqStatusRfu_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_Purge           BIT(25)
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_PurgePort(_x)   (((_x) & 0x1f) << 20)
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_PurgePort_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_IgEqWt4Eop(_x)  (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacIgEqStatus_IgEqWt4Eop_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacHyd1Ctrl - N/A.
    Bits: 31:28 MacHydPcsSd_N2(rw) - MBZero.
    Bits: 27:24 MacHydFecErrEna(rw) - FEC module optional function to forward indication of uncorrectable errors to the PCS layer by corrupting sync headers. Per PCS enable bit.
    Bits: 23:20 MacHydRfu20(rw) - RFU.
    Bits: 19:16 MacHydFecEna(rw) - If set to 1, FEC encapsulation is enabled. Per PCS enable bit. Note: The signal acts on a per PCS basis. Depending on the configuration of the PCS it will automatically ensure to enable the FEC in the required lanes applicable for the mode of operation.
    Bits: 15    MacHydPcsRxlauiEna2(rw) - Define for Channel 2 to operate with 2:1 bitmuxing per lane to use 2-lanes for the 4 VLs instead of 4 lanes. Can be used when RS-FEC is disabled for the channel. Allows use of 50G over 2-lanes without FEC or with FEC74. When bit is '0' the Channel operates without lane bitmuxing (1:1). When bit is '1' the channel uses 2:1 bitmuxing allowing it to operate with 50G over 2 lanes. Note: Channel 3 has no such input as it operates at 1lane only. See table.
    Bits: 14    MacHydPcsRxlauiEna0(rw) - Define for Channel 0 to operate with 2:1 bitmuxing per lane to use 2-lanes for the 4 VLs instead of 4 lanes. Can be used when RS-FEC is disabled for the channel. Allows use of 50G over 2-lanes without FEC or with FEC74. When bit is '0' the Channel operates without lane bitmuxing (1:1). When bit is '1' the channel uses 2:1 bitmuxing allowing it to operate with 50G over 2 lanes. Note: Channels 1 has no such input as it operates at 1lane only. See table.
    Bits: 13    MacHydPcsFec91SingleLaneEna2(rw) - Enable RS-FEC single lane mode. When 1, uses lane 2 for implementing 25G Ethernet. When 0, uses lanes 2,3 implementing 50G Ethernet.
    Bits: 12    MacHydPcsFec91SingleLaneEna0(rw) - Enable RS-FEC single lane mode. When 1, uses lane 0 for implementing 25G Ethernet. When 0, uses lanes 0,1 implementing 50G Ethernet.
    Bits: 11    MacHydRFU11(rw) - RFU.
    Bits: 10    MacHydPcs0Mode40Ena(rw) - Define 40G mode of operation for Channel 0. When set '1' the Channel 0 PCS is used to operate over all 4 links. Channels 1..3 are disabled. Has an effect only when MacHydCGEna=0. When set '0' all Channels 0..3 are active and can be configured individually.
    Bits:  9:6  MacHydPcsFec91Ena(rw) - Enable control for RS-FEC (Clause 91) datapath per channel. When asserted (1) the Clause 91 RS-FEC datapath is active for the potr. If deasserted (0) the datapath uses normal 66b coding and can optionally use FEC74. Bit 0 is relevant also when the 100G PCS is active to enable RS-FEC.
    Bits:  5    MacHydRFU5(rw) - RFU.
    Bits:  4    MacHydCGEna(rw) - 100Geth MAC PCS Enable, When set to 1, the 100Geth MAC and PCS are enabled. When set to 0, the 1/10/25/40/50Geth PCSs (N=0) can be enabled or the 1/10Geth PCSs (N=1 or N=3) can be enabled.
    Bits:  3:0  MacHydSGEna(rw) - SGMII PCS Enable: When set to 1, the SGMII PCS is enabled, when set to 0, the 10/25/40/50Geth PCS (N=0) is enabled, the 10/25Geth PCS (N=1) is enabled or the 10Geth PCS (N=2 or N=3) is enabled.
*/
#define NFP3800_NBI_MACX_CSR_MacHyd1Ctrl                     0x000000b8
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsSd_N2(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsSd_N2_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydFecErrEna(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydFecErrEna_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydRfu20(_x)   (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydRfu20_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydFecEna(_x)  (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydFecEna_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsRxlauiEna2 BIT(15)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsRxlauiEna0 BIT(14)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsFec91SingleLaneEna2 BIT(13)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsFec91SingleLaneEna0 BIT(12)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydRFU11       BIT(11)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcs0Mode40Ena BIT(10)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsFec91Ena(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydPcsFec91Ena_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydRFU5        BIT(5)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydCGEna       BIT(4)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydSGEna(_x)   (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_CSR_MacHyd1Ctrl_MacHydSGEna_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacLiveStatus0 - Live status register 0.
    Bits: 31:0  MacLiveStatus0(ro) - Egress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Egress Chan Rd Addr field bit [6:5].
*/
#define NFP3800_NBI_MACX_CSR_MacLiveStatus0                  0x000000bc
#define   NFP3800_NBI_MACX_CSR_MacLiveStatus0_MacLiveStatus0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacLiveStatus0_MacLiveStatus0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacLiveStatus1 - Live status register 1.
    Bits: 31:0  MacLiveStatus1(ro) - Ingress Queue Empty live status. 1 = empty. A 32-bit quadrant of the 128 channels indexed by the Ingress Chan Rd Addr field bit [6:5].
*/
#define NFP3800_NBI_MACX_CSR_MacLiveStatus1                  0x000000c0
#define   NFP3800_NBI_MACX_CSR_MacLiveStatus1_MacLiveStatus1(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacLiveStatus1_MacLiveStatus1_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacChanRdAddr - Addresses for reading IG/EG buffer count state.
    Bits: 31:23 Rfu1(rw) - Reserved for Use.
    Bits: 22:16 IgChanRdAddr(rw) - Channel index for reading Ig channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status1.
    Bits: 15:7  Rfu0(rw) - Reserved for Use.
    Bits:  6:0  EgChanRdAddr(rw) - Channel index for reading Eg channel buffer count. Upper 2 bits index the qmt quadrant for Live_Status0.
*/
#define NFP3800_NBI_MACX_CSR_MacChanRdAddr                   0x000000c4
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_Rfu1(_x)        (((_x) & 0x1ff) << 23)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_Rfu1_of(_x)     (((_x) >> 23) & 0x1ff)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_IgChanRdAddr(_x) (((_x) & 0x7f) << 16)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_IgChanRdAddr_of(_x) (((_x) >> 16) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_Rfu0(_x)        (((_x) & 0x1ff) << 7)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_Rfu0_of(_x)     (((_x) >> 7) & 0x1ff)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_EgChanRdAddr(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_CSR_MacChanRdAddr_EgChanRdAddr_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacChanBufCount - Read data for IG/EG buffercounts indexed by Chan Rd Addr.
    Bits: 31:27 Rfu1(ro) - Reserved for Use.
    Bits: 26:16 IgChanRdBufCnt(ro) - Live Ingress Chan buffer count indexed by Ig Chan Rd Addr.
    Bits: 15:11 Rfu0(ro) - Reserved for Use.
    Bits: 10:0  EgChanRdBufCnt(ro) - Live Egress Chan buffer count indexed by Eg Chan Rd Addr.
*/
#define NFP3800_NBI_MACX_CSR_MacChanBufCount                 0x000000c8
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_Rfu1(_x)      (((_x) & 0x1f) << 27)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_Rfu1_of(_x)   (((_x) >> 27) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_IgChanRdBufCnt(_x) (((_x) & 0x7ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_IgChanRdBufCnt_of(_x) (((_x) >> 16) & 0x7ff)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_Rfu0(_x)      (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_Rfu0_of(_x)   (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_EgChanRdBufCnt(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacChanBufCount_EgChanRdBufCnt_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: PauseWaterMark[64] - Per Class water marks (N*2) and (N*2)+1 for pause generation.
    Bits: 31:28 PWMResv1(rw) - Reserved
    Bits: 27:16 PauseWaterMark1(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
    Bits: 15:12 PWMResv0(rw) - Reserved
    Bits: 11:0  PauseWaterMark0(rw) - Pause gen hi water mark. When crossed, pause for this class is generated.
*/
#define NFP3800_NBI_MACX_CSR_PauseWaterMark(_x)              (0x000000cc + (0x4 * ((_x) & 0x3f)))
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PWMResv1(_x)   (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PWMResv1_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark1(_x) (((_x) & 0xfff) << 16)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark1_of(_x) (((_x) >> 16) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PWMResv0(_x)   (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PWMResv0_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark0(_x) (((_x) & 0xfff) << 0)
#define   NFP3800_NBI_MACX_CSR_PauseWaterMark_PauseWaterMark0_of(_x) (((_x) >> 0) & 0xfff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRw - Indirect Read Access to Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(rw) - Read/Write address to buffer-counter array
    Bits: 23:22 Rfu2(rw) - Reserved for Use2.
    Bits: 21    CounterRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register.
    Bits: 20:0  Rfu(rw) - Reserved for Use.
*/
#define NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw       0x000001d4
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_CounterAddr(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_CounterAddr_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu2(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_CounterRdBusy BIT(21)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu(_x) (((_x) & 0x1fffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRw_Rfu_of(_x) (((_x) >> 0) & 0x1fffff)
/*----------------------------------------------------------------
  Register: IgChanUsedBufferCreditsRdData - Indirect Read Return Data for per-Channel Ingress Used Credit Counter.
    Bits: 31:24 CounterAddr(ro) - Read/Write address to buffer-counter array
    Bits: 21    BufferCounterRdDataValid(ro) - Set to '1' when read complete and counter rd data is valid. Cleared when next read register is initiated
    Bits: 15:0  CounterRdData(ro) - 16 bit counter read value
*/
#define NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData   0x000001d8
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterAddr(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterAddr_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_BufferCounterRdDataValid BIT(21)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterRdData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgChanUsedBufferCreditsRdData_CounterRdData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgPortPrependEn0 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra0.
  Register: IgPortPrependEn1 - Enable bits for prepending Timestamp and Parser Info to packets by Port for Hydra1.
    Bits: 31:26 Rfu(rw) - Reserved for Use.
    Bits: 25:24 PrependLk(rw) - Ingress Interlaken prepend enable bits.
    Bits: 23:22 PrependEn11(rw) - Ingress port11 prepend enable bits.
    Bits: 21:20 PrependEn10(rw) - Ingress port10 prepend enable bits.
    Bits: 19:18 PrependEn9(rw) - Ingress port9 prepend enable bits.
    Bits: 17:16 PrependEn8(rw) - Ingress port8 prepend enable bits.
    Bits: 15:14 PrependEn7(rw) - Ingress port7 prepend enable bits.
    Bits: 13:12 PrependEn6(rw) - Ingress port6 prepend enable bits.
    Bits: 11:10 PrependEn5(rw) - Ingress port5 prepend enable bits.
    Bits:  9:8  PrependEn4(rw) - Ingress port4 prepend enable bits.
    Bits:  7:6  PrependEn3(rw) - Ingress port3 prepend enable bits.
    Bits:  5:4  PrependEn2(rw) - Ingress port2 prepend enable bits.
    Bits:  3:2  PrependEn1(rw) - Ingress port1 prepend enable bits.
    Bits:  1:0  PrependEn0(rw) - Ingress port0 prepend enable bits.
*/
#define NFP3800_NBI_MACX_CSR_IgPortPrependEn0                0x000001dc
#define NFP3800_NBI_MACX_CSR_IgPortPrependEn1                0x000001e0
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_Rfu(_x)           (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_Rfu_of(_x)        (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependLk(_x)     (((_x) & 0x3) << 24)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependLk_of(_x)  (((_x) >> 24) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn11(_x)   (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn11_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn10(_x)   (((_x) & 0x3) << 20)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn10_of(_x) (((_x) >> 20) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn9(_x)    (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn9_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn8(_x)    (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn8_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn7(_x)    (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn7_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn6(_x)    (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn6_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn5(_x)    (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn5_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn4(_x)    (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn4_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn3(_x)    (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn3_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn2(_x)    (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn1(_x)    (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn0(_x)    (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn0_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn0_No_Prepend (0)
#define     NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn0_Prepend_CHK (1)
#define     NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn0_Prepend_TS (2)
#define     NFP3800_NBI_MACX_CSR_IgPrependEn_PrependEn0_Prepend_TS_CHK (3)
/*----------------------------------------------------------------
  Register: IgPortL4ChksumSel - Enables, per-port, the ingress prepend checksum field to always be the overall L4 checksum and not the calculated L4 UDP/TCP checksum.
    Bits: 19:0  L4OverallEn(rw) - Ingress prepend L4 overall checksum enable bits.
*/
#define NFP3800_NBI_MACX_CSR_IgPortL4ChksumSel               0x000001e4
#define   NFP3800_NBI_MACX_CSR_IgPortL4ChksumSel_L4OverallEn(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgPortL4ChksumSel_L4OverallEn_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg0 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg0 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch(rw) - VLAN Match Field for parser matching.
*/
#define NFP3800_NBI_MACX_CSR_EgVlanMatchReg0                 0x000001e8
#define NFP3800_NBI_MACX_CSR_IgVlanMatchReg0                 0x000001f0
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg_VlanMask(_x)     (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg_VlanMask_of(_x)  (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg_VlanMatch(_x)    (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg_VlanMatch_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgVlanMatchReg1 - Egress Match and Mask register for altertive VLAN tag VIDs.
  Register: IgVlanMatchReg1 - Ingress Match and Mask register for altertive VLAN tag VIDs.
    Bits: 31:16 VlanMask1(rw) - VLAN Mask Field for parser matching.
    Bits: 15:0  VlanMatch1(rw) - VLAN Match Field for parser matching.
*/
#define NFP3800_NBI_MACX_CSR_EgVlanMatchReg1                 0x000001ec
#define NFP3800_NBI_MACX_CSR_IgVlanMatchReg1                 0x000001f4
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg1_VlanMask1(_x)   (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg1_VlanMask1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg1_VlanMatch1(_x)  (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_VlanMatchReg1_VlanMatch1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MiscStatusCtrl - Ingress Interlaken ctx limit and ig_eq_ctx multibit error lock and linklist frozen.
    Bits:  1    EgLLMemMbeLock(ro) - Read only status for Ingress linklist. When set, a multibit error on the linklist memory has occurred and reset is required.
    Bits:  0    IgLLMemMbeLock(ro) - Read only status for Egress linklist. When set, a multibit error on the linklist memory has occurred and reset is required.
*/
#define NFP3800_NBI_MACX_CSR_MiscStatusCtrl                  0x000001f8
#define   NFP3800_NBI_MACX_CSR_MiscStatusCtrl_EgLLMemMbeLock BIT(1)
#define   NFP3800_NBI_MACX_CSR_MiscStatusCtrl_IgLLMemMbeLock BIT(0)
/*----------------------------------------------------------------
  Register: EgCmdPrependEn0Lo - Enable bits for egress cmd prepend handling on channels 31-0. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn0Hi - Enable bits for egress cmd prepend handling on channels 63-32. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Lo - Enable bits for egress cmd prepend handling on channels 95-64. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
  Register: EgCmdPrependEn1Hi - Enable bits for egress cmd prepend handling on channels 127-96. If bit set, parser will strip 1st 4 bytes from every packet to the associated channel.
    Bits: 31:0  EgCmdPrependEn(rw) - Egress Per-channel bit that enables the stripping of the 4-byte CMD PREPEND.
*/
#define NFP3800_NBI_MACX_CSR_EgCmdPrependEn0Lo               0x00000200
#define NFP3800_NBI_MACX_CSR_EgCmdPrependEn0Hi               0x00000204
#define NFP3800_NBI_MACX_CSR_EgCmdPrependEn1Lo               0x00000208
#define NFP3800_NBI_MACX_CSR_EgCmdPrependEn1Hi               0x0000020c
#define   NFP3800_NBI_MACX_CSR_EgCmdPrependEn_EgCmdPrependEn(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EgCmdPrependEn_EgCmdPrependEn_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: PfcTxEn - Per-port enable bits for issuing Pause/Pfc frames.
    Bits: 19:0  PortPfcTxEn(rw) - Per-port enable for issuing a Pause/Pfc frame. No Pause/PFC issued without this bit set.
*/
#define NFP3800_NBI_MACX_CSR_PfcTxEn                         0x00000210
#define   NFP3800_NBI_MACX_CSR_PfcTxEn_PortPfcTxEn(_x)       (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_PfcTxEn_PortPfcTxEn_of(_x)    (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgTxStopEn - Per-port enable bits for stopping Egress DQs.
    Bits: 19:0  PortEgTxStopEn(rw) - Per-port enable for Stopping all Egress dequeues on a packet boundary.
*/
#define NFP3800_NBI_MACX_CSR_EgTxStopEn                      0x00000214
#define   NFP3800_NBI_MACX_CSR_EgTxStopEn_PortEgTxStopEn(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EgTxStopEn_PortEgTxStopEn_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgTxStopGpioSel - GPIO enable bits for stopping Egress DQs.
    Bits: 24    EgTxStopGpioInv(rw) - Invert GPIO STOP bits for active low XOff.
    Bits: 23:20 EgTxStopGpioEn(rw) - Enable for each bit of GPIO (RX OOB) to stop dq on selected port.
    Bits: 19:15 EgTxStopGpioPortSel3(rw) - Port number to stop dqing when bit 3 of GpioEn is set. Stop dequeues on a packet boundary.
    Bits: 14:10 EgTxStopGpioPortSel2(rw) - Port number to stop dqing when bit 2 of GpioEn is set. Stop dequeues on a packet boundary.
    Bits:  9:5  EgTxStopGpioPortSel1(rw) - Port number to stop dqing when bit 1 of GpioEn is set. Stop dequeues on a packet boundary.
    Bits:  4:0  EgTxStopGpioPortSel0(rw) - Port number to stop dqing when bit 0 of GpioEn is set. Stop dequeues on a packet boundary.
*/
#define NFP3800_NBI_MACX_CSR_EgTxStopGpioSel                 0x00000218
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioInv BIT(24)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioEn(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioEn_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel3(_x) (((_x) & 0x1f) << 15)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel3_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel2(_x) (((_x) & 0x1f) << 10)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel2_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel1(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel1_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_EgTxStopGpioSel_EgTxStopGpioPortSel0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: IgNbiPortXoff - RO state of NBI Port XOff bits.
    Bits: 19:0  Xoff(ro) - Per-port state of NBI Ingress Port Xoff bits. If set, Port does not arbitrate to DWRR.
*/
#define NFP3800_NBI_MACX_CSR_IgNbiPortXoff                   0x00000220
#define   NFP3800_NBI_MACX_CSR_IgNbiPortXoff_Xoff(_x)        (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgNbiPortXoff_Xoff_of(_x)     (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: FecStatus0 - Lock and Err status of FEC enabled ports 9,8,4-0.
  Register: FecStatus1 - Lock and Err status of FEC enabled ports 19,18,14-10.
    Bits: 20:14 FecUnCorErr(rc) - Ports 9,8,4-0 Fec UN-Correctable Error. Clear on Read.
    Bits: 13:7  FecCorErr(rc) - Ports 9,8,4-0 Fec Correctable Error. Clear on Read.
    Bits:  6:0  FecLocked(ro) - Ports 9,8,4-0 Fec Lock status.
*/
#define NFP3800_NBI_MACX_CSR_FecStatus0                      0x00000228
#define NFP3800_NBI_MACX_CSR_FecStatus1                      0x0000022c
#define   NFP3800_NBI_MACX_CSR_FecStatus_FecUnCorErr(_x)     (((_x) & 0x7f) << 14)
#define   NFP3800_NBI_MACX_CSR_FecStatus_FecUnCorErr_of(_x)  (((_x) >> 14) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_FecStatus_FecCorErr(_x)       (((_x) & 0x7f) << 7)
#define   NFP3800_NBI_MACX_CSR_FecStatus_FecCorErr_of(_x)    (((_x) >> 7) & 0x7f)
#define   NFP3800_NBI_MACX_CSR_FecStatus_FecLocked(_x)       (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_CSR_FecStatus_FecLocked_of(_x)    (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacEgPortRR - Mac EG Port Round Robin DQ direct-access Enable Register.
    Bits: 19:0  EgPortRR(rw) - If set, EG Ethernet Port uses a round-robin DQ versus strict priority for multi-channel ports that are not in PFC mode.
*/
#define NFP3800_NBI_MACX_CSR_MacEgPortRR                     0x00000264
#define   NFP3800_NBI_MACX_CSR_MacEgPortRR_EgPortRR(_x)      (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEgPortRR_EgPortRR_of(_x)   (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacEqInh - Mac Rx Enqueue inhibit control.
    Bits: 25    MacEqInhIlk1(ro) - Unused.
    Bits: 24    MacEqInhIlk0(ro) - Unused
    Bits: 23:20 MacEqInhEthPortRfu(ro) - Unused.
    Bits: 19:0  MacEqInhEthPort(rw) - When set, per-port inhibit of Rx enqueuing at packet boundry. Sets the associated MacEqInhDone[19:0] bits when in effect.
*/
#define NFP3800_NBI_MACX_CSR_MacEqInh                        0x00000278
#define   NFP3800_NBI_MACX_CSR_MacEqInh_MacEqInhIlk1         BIT(25)
#define   NFP3800_NBI_MACX_CSR_MacEqInh_MacEqInhIlk0         BIT(24)
#define   NFP3800_NBI_MACX_CSR_MacEqInh_MacEqInhEthPortRfu(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_CSR_MacEqInh_MacEqInhEthPortRfu_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_CSR_MacEqInh_MacEqInhEthPort(_x)  (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEqInh_MacEqInhEthPort_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacEqInhDone - Mac Rx Enqueue inhibit state.
    Bits: 19:0  MacEqInhDoneEthPort(ro) - When set, indicates that RX enqueue is stopped for the associated port. Clears when associated MacEqInhEthPort bit is cleared.
*/
#define NFP3800_NBI_MACX_CSR_MacEqInhDone                    0x0000027c
#define   NFP3800_NBI_MACX_CSR_MacEqInhDone_MacEqInhDoneEthPort(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEqInhDone_MacEqInhDoneEthPort_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacHy0EthIgPktHeadDropCntr[10] - Mac Hydra0 Ethernet Per-port head drop count due to overskid, exceed, or free buffer underrun.
  Register: MacHy1EthIgPktHeadDropCntr[10] - Mac Hydra1 Ethernet per-port head drop count due to overskid, exceed, or free buffer underrun.
    Bits: 31:0  MacHeadDropCounter(ro) - Per-port packet head drops due to overskid and free buffer underrun. Clear on read.
*/
#define NFP3800_NBI_MACX_CSR_MacHy0EthIgPktHeadDropCntr(_x)  (0x00000280 + (0x4 * ((_x) & 0xf)))
#define NFP3800_NBI_MACX_CSR_MacHy1EthIgPktHeadDropCntr(_x)  (0x000002a8 + (0x4 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_CSR_MacHeadDropCounter_MacHeadDropCounter(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacHeadDropCounter_MacHeadDropCounter_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthFifoIfErr0 - Mac Hydra0 Fifo Interface Errors.
  Register: MacEthFifoIfErr1 - Mac Hydra1 Fifo Interface Errors.
    Bits: 20    RemLocFaultSticky(ro) - Clear on read. A set bit indicates a change in the Hydra faults REM_FAULT or LOC_FAULT. Read the associated Hydra registers to identify faulted port.
    Bits: 19:10 EthTxIfOvr(ro) - Clear on read. A set bit indicates an overflow of the associated port transmit Fifo interface.
    Bits:  9:0  EthTxIfUnf(ro) - Clear on read. A set bit indicates an underflow of the associated port transmit Fifo interface.
*/
#define NFP3800_NBI_MACX_CSR_MacEthFifoIfErr0                0x00000400
#define NFP3800_NBI_MACX_CSR_MacEthFifoIfErr1                0x00000404
#define   NFP3800_NBI_MACX_CSR_MacEthFifoIfErr_RemLocFaultSticky BIT(20)
#define   NFP3800_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfOvr(_x) (((_x) & 0x3ff) << 10)
#define   NFP3800_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfOvr_of(_x) (((_x) >> 10) & 0x3ff)
#define   NFP3800_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfUnf(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEthFifoIfErr_EthTxIfUnf_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthAnStatus0 - Mac Hydra0 AutoNegotiate Status.
  Register: MacEthAnStatus1 - Mac Hydra1 AutoNegotiate Status.
    Bits: 19:10 EthAnInt(ro) - Clear on read. A set bit indicates a new page-received interrupt from the auto-neg logic of the associated port.)
    Bits:  9:0  EthAnDone(ro) - A set bit indicates auto-neg of the associated port has completed.
*/
#define NFP3800_NBI_MACX_CSR_MacEthAnStatus0                 0x00000408
#define NFP3800_NBI_MACX_CSR_MacEthAnStatus1                 0x0000040c
#define   NFP3800_NBI_MACX_CSR_MacEthAnStatus_EthAnInt(_x)   (((_x) & 0x3ff) << 10)
#define   NFP3800_NBI_MACX_CSR_MacEthAnStatus_EthAnInt_of(_x) (((_x) >> 10) & 0x3ff)
#define   NFP3800_NBI_MACX_CSR_MacEthAnStatus_EthAnDone(_x)  (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEthAnStatus_EthAnDone_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacHiBerStatus - Mac Per_port High Bit Error rate indication.
    Bits: 19:0  HiBer(rc) - A set bit indicates a High Bit Error Rate of the associated port.
*/
#define NFP3800_NBI_MACX_CSR_MacHiBerStatus                  0x00000414
#define   NFP3800_NBI_MACX_CSR_MacHiBerStatus_HiBer(_x)      (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacHiBerStatus_HiBer_of(_x)   (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacTxPauseStateChange - Mac Per_port indication of a change in TX Pause/Pfc state.
    Bits: 19:0  TxPauseStateChange(rc) - A set bit indicates a state change in the actual transmitted pause/pfc state for the associated port. Inhibited pfc levels will not trigger this.
*/
#define NFP3800_NBI_MACX_CSR_MacTxPauseStateChange           0x00000418
#define   NFP3800_NBI_MACX_CSR_MacTxPauseStateChange_TxPauseStateChange(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTxPauseStateChange_TxPauseStateChange_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacRxPauseStateChange - Mac Per_port indication of a change in RX Pause/Pfc state.
    Bits: 19:0  RxPauseStateChange(rc) - A set bit indicates a state change in the received pause/pfc state for the associated port regardless of any inhibits or ignores.
*/
#define NFP3800_NBI_MACX_CSR_MacRxPauseStateChange           0x0000041c
#define   NFP3800_NBI_MACX_CSR_MacRxPauseStateChange_RxPauseStateChange(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacRxPauseStateChange_RxPauseStateChange_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacStatsHalfFullPort0011 - Mac Stats Half Full Alert Port0-11 RX/TX.
  Register: MacStatsHalfFullPort1223 - Mac Stats Half Full Alert Port12-23 RX/TX.
  Register: MacStatsHalfFullChan0063 - Mac Stats Half Full Alert Channel 00-63 RX/TX.
  Register: MacStatsHalfFullChan63127 - Mac Stats Half Full Alert Channel 63-127 RX/TX.
    Bits: 24    TxStatHalfFullVld(ro) - Clear on read. A set bit indicates a Tx stat @TX_STAT_ADDR went half full.)
    Bits: 23:16 TxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
    Bits:  8    RxStatHalfFullVld(ro) - Clear on read. A set bit indicates an Rx stat @RX_STAT_ADDR went half full.)
    Bits:  7:0  RxStatAddr(ro) - When VLD set, indicates the channel or port where a statistic count has gone half full.)
*/
#define NFP3800_NBI_MACX_CSR_MacStatsHalfFullPort0011        0x00000420
#define NFP3800_NBI_MACX_CSR_MacStatsHalfFullPort1223        0x00000424
#define NFP3800_NBI_MACX_CSR_MacStatsHalfFullChan0063        0x00000428
#define NFP3800_NBI_MACX_CSR_MacStatsHalfFullChan63127       0x0000042c
#define   NFP3800_NBI_MACX_CSR_MacStatsHalfFull_TxStatHalfFullVld BIT(24)
#define   NFP3800_NBI_MACX_CSR_MacStatsHalfFull_TxStatAddr(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacStatsHalfFull_TxStatAddr_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacStatsHalfFull_RxStatHalfFullVld BIT(8)
#define   NFP3800_NBI_MACX_CSR_MacStatsHalfFull_RxStatAddr(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacStatsHalfFull_RxStatAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacIgPortErrStatus[20] - Mac Ingress Port Error Status.
    Bits: 24    ErrValid(rc) - When set, indicated a captured err_status for the given port is present on bits [23:0])
    Bits: 23:8  PayloadLength(rc) - Payload length of the errored frame. This is a copy of the length/type field as it is found within the frame. For VLAN frames it is a copy of the length/type field following the 4-octet VLAN tag.)
    Bits:  7    VlanTag(rc) - Set to 1 to indicate that the current errored Frame implements a VLAN Tag.)
    Bits:  6    CtlCharErr(rc) - Set to 1 to indicate that the current frame was received with an Error control character on the XL/CGMII interface.)
    Bits:  5    StackedVlanTag(rc) - Set to 1 to indicate that the current errored Frame implements a Stacked VLAN Tag.)
    Bits:  4    SeqErr(rc) - Set to 1 to indicate that a Sequence Error (Local or Remote) was received from the PHY device during frame reception.)
    Bits:  3    FifoErr(rc) - Set to 1 to indicate that the current errored frame was truncated because of a FIFO exception (Overflow).)
    Bits:  2    BadCodeErr(rc) - .Set to 1 to indicate that the current errored frame was received with a wrong or unexpected code during frame reception reported by the reconciliation sub-layer function.)
    Bits:  1    Crc32Err(rc) - Set to 1 to indicate that the current errored frame was received with a CRC-32 error.)
    Bits:  0    LengthErr(rc) - Set to 1 when the current frame has an invalid length, i.e. less than 64 octets or more than the maximum value defined in register FRM_LENGTH, or a mismatch between the payload received and the payload length given within the frame was detected.)
*/
#define NFP3800_NBI_MACX_CSR_MacIgPortErrStatus(_x)          (0x00000500 + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_ErrValid   BIT(24)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_PayloadLength(_x) (((_x) & 0xffff) << 8)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_PayloadLength_of(_x) (((_x) >> 8) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_VlanTag    BIT(7)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_CtlCharErr BIT(6)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_StackedVlanTag BIT(5)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_SeqErr     BIT(4)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_FifoErr    BIT(3)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_BadCodeErr BIT(2)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_Crc32Err   BIT(1)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErrStatus_LengthErr  BIT(0)
/*----------------------------------------------------------------
  Register: MacEgTimeStampInserted[20] - Mac Egress Port Timestamp Inserted Value.
    Bits: 31:0  TimeStampValue(rc) - Timestamp Inserted value for last packet sent marked for TS insertion.)
*/
#define NFP3800_NBI_MACX_CSR_MacEgTimeStampInserted(_x)      (0x00000550 + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MacEgTimeStampInserted_TimeStampValue(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEgTimeStampInserted_TimeStampValue_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacIgPortErr - Mac Ingress Port Error Captured.
    Bits: 15:0  PortErr(ro) - Per-port bits indicating Ingress port_status_err captured. Bit clears on read of the captured Port error status.)
*/
#define NFP3800_NBI_MACX_CSR_MacIgPortErr                    0x000005a8
#define   NFP3800_NBI_MACX_CSR_MacIgPortErr_PortErr(_x)      (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacIgPortErr_PortErr_of(_x)   (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEgDropCtrlErr - Mac Egress Drop on Error control.
  Register: MacEgDropCtrlAll - Mac Egress Drop All control.
    Bits: 19:0  Drop(rw) - Egress packets will be cleanly dropped before the IP. Port stats will not see the packet.)
*/
#define NFP3800_NBI_MACX_CSR_MacEgDropCtrlErr                0x000005b4
#define NFP3800_NBI_MACX_CSR_MacEgDropCtrlAll                0x000005b8
#define   NFP3800_NBI_MACX_CSR_MacEgDropCtrl_Drop(_x)        (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacEgDropCtrl_Drop_of(_x)     (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: MacSerialLedCount - Mac counter register for serial LED port state info.
    Bits: 31:26 SerialCountRFU(rw) - Reserved.
    Bits: 25:8  BaudCount(rw) - Reload count for core_clk decremented baud counter.)
    Bits:  7:0  FracCount(rw) - Fractional increment count for creating more accurate baud n/256.)
*/
#define NFP3800_NBI_MACX_CSR_MacSerialLedCount               0x000005bc
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCount_SerialCountRFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCount_SerialCountRFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCount_BaudCount(_x) (((_x) & 0x3ffff) << 8)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCount_BaudCount_of(_x) (((_x) >> 8) & 0x3ffff)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCount_FracCount(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCount_FracCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacSerialLedCtrl - Mac control register for serial LED port state info.
    Bits: 31    SerialEnable(rw) - Enable for Serial LED IO to emit state info.
    Bits: 30    SerialUnInvert(rw) - Serial data default inverted for 8N1. Setting this bit emits uninverted data.
    Bits: 29    SerialLsbFirst(rw) - When set, emitted data byte will be sent LSb first.
    Bits: 28    Serial8N1(rw) - Enable for 8N1 format. 10b : start(0), 8b data, stop(1). inverted. When 0, only 8b data will be transmitted, no framing, subject to uninvert and lsb_first.
    Bits: 27    SerialOe(rw) - Output Enable for Serial LED IO pin. IO pin must also be mux selected to the MAC LED function.
    Bits: 26:10 SerialCtrlRFU(rw) - Reserved.
    Bits:  9:5  LedClrBitNum(rw) - When the indexed bit in the FRC transitions from 0 to 1, deluminates any LEDs selected for activity. except if Clr and Set are equal, in which case it will be on the 1 to 0 transition for a 50/50 display.)
    Bits:  4:0  LedSetBitNum(rw) - When the indexed bit in the FRC transitions from 0 to 1, illuminates any LEDs selected for activity if activity on the port has occurred.)
*/
#define NFP3800_NBI_MACX_CSR_MacSerialLedCtrl                0x000005c0
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_SerialEnable BIT(31)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_SerialUnInvert BIT(30)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_SerialLsbFirst BIT(29)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_Serial8N1    BIT(28)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_SerialOe     BIT(27)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_SerialCtrlRFU(_x) (((_x) & 0x1ffff) << 10)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_SerialCtrlRFU_of(_x) (((_x) >> 10) & 0x1ffff)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_LedClrBitNum(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_LedClrBitNum_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_LedSetBitNum(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_MacSerialLedCtrl_LedSetBitNum_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacPfcGen1Shot0[3] - IP0: Per-port(4), per-PFC(8) Pause generate. When written to 1, a pause/pfc will be set to that port:level. When written to 0, the Pause will be released. 0:ports 3-0...2:ports 09-08.
  Register: MacPfcGen1Shot1[3] - IP1: Per-port(4), per-PFC(8) Pause generate. When written to 1, a pause/pfc will be set to that port:level. When written to 0, the Pause will be released. 0:ports 13-10...2:ports 19-18.
    Bits: 31:24 Pfc1Shot3(rw) - When any bit set, a PFC/Pause frame will be issued on port(3+4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
    Bits: 23:16 Pfc1Shot2(rw) - When any bit set, a PFC/Pause frame will be issued on port(2+4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
    Bits: 15:8  Pfc1Shot1(rw) - When any bit set, a PFC/Pause frame will be issued on port(1+4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
    Bits:  7:0  Pfc1Shot0(rw) - When any bit set, a PFC/Pause frame will be issued on port(4xd) at that PFC level. The IP will continue to refresh the Pause until the bit is written to 0.
*/
#define NFP3800_NBI_MACX_CSR_MacPfcGen1Shot0(_x)             (0x000005c4 + (0x4 * ((_x) & 0x3)))
#define NFP3800_NBI_MACX_CSR_MacPfcGen1Shot1(_x)             (0x000005d0 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot3(_x)  (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot3_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot2(_x)  (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot2_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot1(_x)  (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot0(_x)  (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPfcGen1Shot_Pfc1Shot0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacTxPfcInhEn0[3] - Per-port(4), per-PFC(8) Pause/PFC generate Inhibit. When set, the ingress enqueue logic will be inhibited from generating a Pause/PFC for that port:level under any condition except SW 1-shot. PFC_TX_EN must be set for a port for a port to issue any Pause PFC. This set of registers can allow mixed lossy and and lossless PFC levels on a single port. The drop_on_exceed registers must be used to limit the buffers consumed by the lossy PFC levels. 0:ports 3-0...3:ports 15-12.
  Register: MacTxPfcInhEn1[3] - Per-port(4), per-PFC(8) Pause/PFC generate Inhibit. When set, the ingress enqueue logic will be inhibited from generating a Pause/PFC for that port:level under any condition except SW 1-shot. PFC_TX_EN must be set for a port for a port to issue any Pause PFC. This set of registers can allow mixed lossy and and lossless PFC levels on a single port. The drop_on_exceed registers must be used to limit the buffers consumed by the lossy PFC levels. 0:ports 3-0...3:ports 15-12.
    Bits: 31:24 PfcInh3(rw) - When any bit set, PFC/Pause generate will be inhibited on port(3+4xd) at that PFC level.
    Bits: 23:16 PfcInh2(rw) - When any bit set, PFC/Pause generate will be inhibited on port(2+4xd) at that PFC level.
    Bits: 15:8  PfcInh1(rw) - When any bit set, PFC/Pause generate will be inhibited on port(1+4xd) at that PFC level.
    Bits:  7:0  PfcInh0(rw) - When any bit set, PFC/Pause generate will be inhibited on port(4xd) at that PFC level.
*/
#define NFP3800_NBI_MACX_CSR_MacTxPfcInhEn0(_x)              (0x000005dc + (0x4 * ((_x) & 0x3)))
#define NFP3800_NBI_MACX_CSR_MacTxPfcInhEn1(_x)              (0x000005e8 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh3(_x)     (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh3_of(_x)  (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh2(_x)     (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh2_of(_x)  (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh1(_x)     (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh1_of(_x)  (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh0(_x)     (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacTxPfcInhEn_PfcInh0_of(_x)  (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacIgChDropOnExcd[4] - Per-channel(32). When set, the ingress high-water mark becomes a drop_on_exceed level rather than a Pause/Pfc generation flag. Any packet SOP received to a channel where the HWM is exceeded and the drop_on_exceed bit is set will be head dropped and counted in the head-drop counter for that port. Any packet already in progress when the HWM is exceeded and the drop_on_exceed bit is set will be allowed to complete. 0:channels 31-0...3:channels 127-96.
    Bits: 31:0  DropOnExcd(rw) - When set, the associated Ingress Enqueue port will drop packets for a channel starting at SOP when that channel HWM is exceeded.
*/
#define NFP3800_NBI_MACX_CSR_MacIgChDropOnExcd(_x)           (0x000005f4 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MacIgChDropOnExcd_DropOnExcd(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacIgChDropOnExcd_DropOnExcd_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacPfcIgnEn0[3] - Per-port(4), per-PFC(8) Pause/PFC ignore. When set, the egress dequeue logic will ignore the Pause/PFC for that port:level and transmits to that port:level will continue. 0:ports 3-0...3:ports 15-12.
  Register: MacPfcIgnEn1[3] - Per-port(4), per-PFC(8) Pause/PFC ignore. When set, the egress dequeue logic will ignore the Pause/PFC for that port:level and transmits to that port:level will continue. 0:ports 3-0...3:ports 15-12.
    Bits: 31:24 PfcIgn3(rw) - When any bit set, PFC/Pause will be ingnored on port(3+4xd) at that PFC level.
    Bits: 23:16 PfcIgn2(rw) - When any bit set, PFC/Pause will be ingnored on port(2+4xd) at that PFC level.
    Bits: 15:8  PfcIgn1(rw) - When any bit set, PFC/Pause will be ignored on port(1+4xd) at that PFC level.
    Bits:  7:0  PfcIgn0(rw) - When any bit set, PFC/Pause will be ignored on port(4xd) at that PFC level.
*/
#define NFP3800_NBI_MACX_CSR_MacPfcIgnEn0(_x)                (0x00000604 + (0x4 * ((_x) & 0x3)))
#define NFP3800_NBI_MACX_CSR_MacPfcIgnEn1(_x)                (0x00000610 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn3(_x)       (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn3_of(_x)    (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn2(_x)       (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn2_of(_x)    (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn1(_x)       (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn1_of(_x)    (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn0(_x)       (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPfcIgnEn_PfcIgn0_of(_x)    (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacPfcReMap[20] - PFC support which Remaps PFC_xoff to Eg channel for channel compression support.
    Bits: 31    PortEgDqRrEn(rw) - When set, enables the associated port Egress DQ engine to use round-robin instead of strict priority between the port's channels.
    Bits: 30    PortEgDqLo2HiPri(rw) - When set, enables the associated port Egress DQ engine to use lowest channel number as High priority between the port's channels.
    Bits: 23:21 PfcReMap7(rw) - If in pfc_mode, maps PFC_xoff[7] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 20:18 PfcReMap6(rw) - If in pfc_mode, maps PFC_xoff[6] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 17:15 PfcReMap5(rw) - If in pfc_mode, maps PFC_xoff[5] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 14:12 PfcReMap4(rw) - If in pfc_mode, maps PFC_xoff[4] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits: 11:9  PfcReMap3(rw) - If in pfc_mode, maps PFC_xoff[3] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits:  8:6  PfcReMap2(rw) - If in pfc_mode, maps PFC_xoff[2] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits:  5:3  PfcReMap1(rw) - If in pfc_mode, maps PFC_xoff[1] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
    Bits:  2:0  PfcReMap0(rw) - If in pfc_mode, maps PFC_xoff[0] from hydra to this value channel delta from the base channel, otherwise PFC_xoff[0] is mapped to the delta.
*/
#define NFP3800_NBI_MACX_CSR_MacPfcReMap(_x)                 (0x0000061c + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PortEgDqRrEn      BIT(31)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PortEgDqLo2HiPri  BIT(30)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap7(_x)     (((_x) & 0x7) << 21)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap7_of(_x)  (((_x) >> 21) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap6(_x)     (((_x) & 0x7) << 18)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap6_of(_x)  (((_x) >> 18) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap5(_x)     (((_x) & 0x7) << 15)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap5_of(_x)  (((_x) >> 15) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap4(_x)     (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap4_of(_x)  (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap3(_x)     (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap3_of(_x)  (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap2(_x)     (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap2_of(_x)  (((_x) >> 6) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap1(_x)     (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap1_of(_x)  (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap0(_x)     (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPfcReMap_PfcReMap0_of(_x)  (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacPcpReMap[20] - PFC support which Remaps VLan-PCP for channel compression and channel for untagged.
    Bits: 31    PortIgDqRrEn(rw) - When set, enables the associated port Ingress DQ engine to use round-robin instead of strict priority between the port's channels.
    Bits: 30    PortIgDqLo2HiPri(rw) - When set, enables the associated port Ingress DQ engine to use lowest channel number as High priority between the port's channels.
    Bits: 29:24 UntaggedChan(rw) - If PFC mode en, then an UNtagged packet will be directed to this absolute channel. For Hy0 the channels can be 0-63 and for Hy1 0-63 maps to 64-127
    Bits: 23:21 PcpReMap7(rw) - Maps tagged packet with PCP 7 to this value channel delta from the base channel.
    Bits: 20:18 PcpReMap6(rw) - Maps tagged packet with PCP 6 to this value channel delta from the base channel.
    Bits: 17:15 PcpReMap5(rw) - Maps tagged packet with PCP 5 to this value channel delta from the base channel.
    Bits: 14:12 PcpReMap4(rw) - Maps tagged packet with PCP 4 to this value channel delta from the base channel.
    Bits: 11:9  PcpReMap3(rw) - Maps tagged packet with PCP 3 to this value channel delta from the base channel.
    Bits:  8:6  PcpReMap2(rw) - Maps tagged packet with PCP 2 to this value channel delta from the base channel.
    Bits:  5:3  PcpReMap1(rw) - Maps tagged packet with PCP 1 to this value channel delta from the base channel.
    Bits:  2:0  PcpReMap0(rw) - Maps tagged packet with PCP 0 to this value channel delta from the base channel.
*/
#define NFP3800_NBI_MACX_CSR_MacPcpReMap(_x)                 (0x00000680 + (0x4 * ((_x) & 0x1f)))
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PortIgDqRrEn      BIT(31)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PortIgDqLo2HiPri  BIT(30)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_UntaggedChan(_x)  (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_UntaggedChan_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap7(_x)     (((_x) & 0x7) << 21)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap7_of(_x)  (((_x) >> 21) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap6(_x)     (((_x) & 0x7) << 18)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap6_of(_x)  (((_x) >> 18) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap5(_x)     (((_x) & 0x7) << 15)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap5_of(_x)  (((_x) >> 15) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap4(_x)     (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap4_of(_x)  (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap3(_x)     (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap3_of(_x)  (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap2(_x)     (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap2_of(_x)  (((_x) >> 6) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap1(_x)     (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap1_of(_x)  (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap0(_x)     (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPcpReMap_PcpReMap0_of(_x)  (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacHy0EthEgPktFlushDropCntr[5] - Mac Hydra0 Ethernet Per-port egress flush drop count due to DropAll or DropErr being set.
  Register: MacHy1EthEgPktFlushDropCntr[5] - Mac Hydra1 Ethernet Per-port egress flush drop count due to DropAll or DropErr begin set.
    Bits: 31:16 MacFlushDropCounter1(ro) - Per-port packet flush drops due to DropAll or DropErr. Clear on read.
    Bits: 15:0  MacFlushDropCounter0(ro) - Per-port packet flush drops due to DropAll or DropErr. Clear on read.
*/
#define NFP3800_NBI_MACX_CSR_MacHy0EthEgPktFlushDropCntr(_x) (0x000006d0 + (0x4 * ((_x) & 0x7)))
#define NFP3800_NBI_MACX_CSR_MacHy1EthEgPktFlushDropCntr(_x) (0x000006e4 + (0x4 * ((_x) & 0x7)))
#define   NFP3800_NBI_MACX_CSR_MacFlushDropCounter_MacFlushDropCounter1(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacFlushDropCounter_MacFlushDropCounter1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_CSR_MacFlushDropCounter_MacFlushDropCounter0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacFlushDropCounter_MacFlushDropCounter0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacPortHwm[10] - Port HWMs and Skid before dropping for ports 2n+1 and 2n.
    Bits: 31:27 PortDropDelta1(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 26:16 PortHwm1(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
    Bits: 15:11 PortDropDelta0(rw) - Skid in 4 buffer increments (4x256B) over the HWM before all port traffic is dropped.
    Bits: 10:0  PortHwm0(rw) - HWM in 256B buffers before Xoff/Pause is asserted to all port channels.
*/
#define NFP3800_NBI_MACX_CSR_MacPortHwm(_x)                  (0x00000700 + (0x4 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortDropDelta1(_x) (((_x) & 0x1f) << 27)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortDropDelta1_of(_x) (((_x) >> 27) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortHwm1(_x)       (((_x) & 0x7ff) << 16)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortHwm1_of(_x)    (((_x) >> 16) & 0x7ff)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortDropDelta0(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortDropDelta0_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortHwm0(_x)       (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_CSR_MacPortHwm_PortHwm0_of(_x)    (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgSinglePortFifoEn - Per-port enable. Merges TX packets into a single port EG FIFO to preserve TM order.
    Bits: 19:0  Enable(rw) - Per-port single TX Fifo Enables.
*/
#define NFP3800_NBI_MACX_CSR_EgSinglePortFifoEn              0x00000730
#define   NFP3800_NBI_MACX_CSR_EgSinglePortFifoEn_Enable(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EgSinglePortFifoEn_Enable_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgPortOnlyIgnoreFc - Per-port enable to ignore Pause/PFC at the MAC TX DQ but still send XOff info to NBI/TM.
    Bits: 19:0  Ignore(rw) - Per-port TX Pause/PFC Ignore at the Egress DQ port only.
*/
#define NFP3800_NBI_MACX_CSR_EgPortOnlyIgnoreFc              0x00000734
#define   NFP3800_NBI_MACX_CSR_EgPortOnlyIgnoreFc_Ignore(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_EgPortOnlyIgnoreFc_Ignore_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdData - Mac read return data for Egress linklist memory.
  Register: IgLnkLstRdData - Mac read return data for Igress linklist memory.
    Bits: 29:18 LLRdOffsetAddr(ro) - Read offset Address to linklist membus
    Bits: 17    LLRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits: 15:0  LLRdData(ro) - 16 bit read data from linklist memory
*/
#define NFP3800_NBI_MACX_CSR_EgLnkLstRdData                  0x000007b0
#define NFP3800_NBI_MACX_CSR_IgLnkLstRdData                  0x000007b4
#define   NFP3800_NBI_MACX_CSR_LLMemRdData_LLRdOffsetAddr(_x) (((_x) & 0xfff) << 18)
#define   NFP3800_NBI_MACX_CSR_LLMemRdData_LLRdOffsetAddr_of(_x) (((_x) >> 18) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_LLMemRdData_LLRdDataValid     BIT(17)
#define   NFP3800_NBI_MACX_CSR_LLMemRdData_LLRdData(_x)      (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_LLMemRdData_LLRdData_of(_x)   (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: EgLnkLstRdWr - Mac Read/Write port to Egress link list memory
  Register: IgLnkLstRdWr - Mac Read/Write port to Ingress link list memory
    Bits: 31:30 Rfu(rw) - Reserved for Use.
    Bits: 29:18 LLOffsetAddr(rw) - Read/Write offset Address to linklist membus
    Bits: 17    LLRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 16    LLWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 15:0  LLWrData(rw) - 16 bit write data to LinkList. 10 bits for EG, 11 for IG.
*/
#define NFP3800_NBI_MACX_CSR_EgLnkLstRdWr                    0x000007b8
#define NFP3800_NBI_MACX_CSR_IgLnkLstRdWr                    0x000007bc
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_Rfu(_x)             (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_Rfu_of(_x)          (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_LLOffsetAddr(_x)    (((_x) & 0xfff) << 18)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_LLOffsetAddr_of(_x) (((_x) >> 18) & 0xfff)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_LLRdBusy            BIT(17)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_LLWrBusy            BIT(16)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_LLWrData(_x)        (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_LLMemRdWr_LLWrData_of(_x)     (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: SerDes4RdWr03To00 - Mac Write port to serdes lanes 3 to 0.
  Register: SerDes4RdWr07To04 - Mac Write port to serdes lanes 7 to 4.
  Register: SerDes4RdWr11To08 - Mac Write port to serdes lanes 11 to 8.
  Register: SerDes4RdWr15To12 - Mac Write port to serdes lanes 15 to 12.
  Register: SerDes4RdWr19To16 - Mac Write port to serdes lanes 19 to 16.
    Bits: 31    SerDesRdBusy(rw) - write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 30    SerDesWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 29:16 SerDesOffsetAddr(rw) - 2 byte Read/Write offset Address to serdes membus. Requires addresses from SerdesX4 map to be >>1.
    Bits: 15:0  SerDesWrData(rw) - 16 bit write data to SerDes. Dont care for a read op.
*/
#define NFP3800_NBI_MACX_CSR_SerDes4RdWr03To00               0x000007c0
#define NFP3800_NBI_MACX_CSR_SerDes4RdWr07To04               0x000007c4
#define NFP3800_NBI_MACX_CSR_SerDes4RdWr11To08               0x000007c8
#define NFP3800_NBI_MACX_CSR_SerDes4RdWr15To12               0x000007cc
#define NFP3800_NBI_MACX_CSR_SerDes4RdWr19To16               0x000007d0
#define   NFP3800_NBI_MACX_CSR_SerDes4RdWr_SerDesRdBusy      BIT(31)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdWr_SerDesWrBusy      BIT(30)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdWr_SerDesOffsetAddr(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdWr_SerDesOffsetAddr_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdWr_SerDesWrData(_x)  (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdWr_SerDesWrData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRW - Ingress DQ DWRR Weights RW Access port.
    Bits: 31:30 TdmMemRdWrRFU1(rw) - RFU1.
    Bits: 29:24 TdmMemRdWrAddr(rw) - Address of 15-bit IG DQ DWRR port credit value to be read or written.(0-25) Hydra0 = 0-11, Hydra1 = 12-23, LK0 = 24, LK1 = 25.
    Bits: 23:22 TdmMemRdWrRFU0(rw) - RFU0.
    Bits: 21    TdmMemRdBusy(rw) - Write to 1 to start read op. Self clears when read complete. read data in corresponding read register. If read and write bits set at same time, operation default to NOP.
    Bits: 20    TdmMemWrBusy(rw) - write to 1 to start write op. Self clears when write complete.
    Bits: 19:16 TdmMemUnused(rw) - unused.
    Bits: 15    TdmPortArbEnable(rw) - Set bit to 1 to enable the port for arbitration indexed @ addr TdmMemRdAddr(0-25).
    Bits: 14:0  TdmPortWeightWrData(rw) - 15 bit DWRR credit weight value to be written @ addr TdmMemRdAddr(0-25)
*/
#define NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW                 0x000007d8
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU1(_x) (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU1_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrAddr(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrAddr_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU0(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdWrRFU0_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemRdBusy  BIT(21)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemWrBusy  BIT(20)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemUnused(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmMemUnused_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmPortArbEnable BIT(15)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmPortWeightWrData(_x) (((_x) & 0x7fff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRW_TdmPortWeightWrData_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDes4RdData03To00 - Mac read return data for serdes lanes 3 to 0.
  Register: SerDes4RdData07To04 - Mac read return data for serdes lanes 7 to 4.
  Register: SerDes4RdData11To08 - Mac read return data for serdes lanes 11 to 8.
  Register: SerDes4RdData15To12 - Mac read return data for serdes lanes 15 to 12.
  Register: SerDes4RdData19To16 - Mac read return data for serdes lanes 19 to 16.
    Bits: 31    SerDesRdDataValid(ro) - Set to '1' when read complete, cleared when next read initiated
    Bits: 29:16 SerDesRdOffsetAddr(ro) - 2 byte read offset Address to serdes membus.
    Bits: 15:0  SerDesRdData(ro) - 16 bit read data from SerDes
*/
#define NFP3800_NBI_MACX_CSR_SerDes4RdData03To00             0x000007e0
#define NFP3800_NBI_MACX_CSR_SerDes4RdData07To04             0x000007e4
#define NFP3800_NBI_MACX_CSR_SerDes4RdData11To08             0x000007e8
#define NFP3800_NBI_MACX_CSR_SerDes4RdData15To12             0x000007ec
#define NFP3800_NBI_MACX_CSR_SerDes4RdData19To16             0x000007f0
#define   NFP3800_NBI_MACX_CSR_SerDes4RdData_SerDesRdDataValid BIT(31)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdData_SerDesRdOffsetAddr(_x) (((_x) & 0x3fff) << 16)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdData_SerDesRdOffsetAddr_of(_x) (((_x) >> 16) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdData_SerDesRdData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDes4RdData_SerDesRdData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: IgDqTdmMemoryRdData - IG DQ DWRR Weights read return data.
    Bits: 29:24 TdmMemRdAddr(ro) - Read address of last read to IG DQ TDM enry memory. Sets when read is initiated.
    Bits: 21    TdmMemRdDataValid(ro) - Sets to '1' when a read completes, cleared when the next read initiated.
    Bits: 19:16 TdmPortUnusedRdRet(ro) - 5 bit unused.
    Bits: 15    TdmPortArbEnable(ro) - If bit to 1, port enabled for arbitration indexed by @ addr TdmMemRdAddr.
    Bits: 14:0  TdmPortWeightRdData(ro) - 15 bit DWRR port credit init value @ addr TdmMemRdAddr
*/
#define NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData             0x000007f8
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmMemRdAddr(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmMemRdAddr_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmMemRdDataValid BIT(21)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortUnusedRdRet(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortUnusedRdRet_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortArbEnable BIT(15)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortWeightRdData(_x) (((_x) & 0x7fff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgDqTdmMemoryRdData_TdmPortWeightRdData_of(_x) (((_x) >> 0) & 0x7fff)
/*----------------------------------------------------------------
  Register: SerDesCkMuxSelCdr - SerDes local TX clock mux select.
    Bits: 23    SerDesCkMuxSelCdrL23(rw) - N/A.
    Bits: 22    SerDesCkMuxSelCdrL22(rw) - N/A.
    Bits: 21    SerDesCkMuxSelCdrL21(rw) - N/A.
    Bits: 20    SerDesCkMuxSelCdrL20(rw) - N/A.
    Bits: 19    SerDesCkMuxSelCdrL19(rw) - N/A.
    Bits: 18    SerDesCkMuxSelCdrL18(rw) - N/A.
    Bits: 17    SerDesCkMuxSelCdrL17(rw) - N/A.
    Bits: 16    SerDesCkMuxSelCdrL16(rw) - N/A.
    Bits: 15    SerDesCkMuxSelCdrL15(rw) - N/A.
    Bits: 14    SerDesCkMuxSelCdrL14(rw) - N/A.
    Bits: 13    SerDesCkMuxSelCdrL13(rw) - N/A.
    Bits: 12    SerDesCkMuxSelCdrL12(rw) - N/A.
    Bits: 11    SerDesCkMuxSelCdrL11(rw) - N/A.
    Bits: 10    SerDesCkMuxSelCdrL10(rw) - N/A.
    Bits:  9    SerDesCkMuxSelCdrL09(rw) - N/A.
    Bits:  8    SerDesCkMuxSelCdrL08(rw) - N/A.
    Bits:  7    SerDesCkMuxSelCdrL07(rw) - N/A.
    Bits:  6    SerDesCkMuxSelCdrL06(rw) - N/A.
    Bits:  5    SerDesCkMuxSelCdrL05(rw) - N/A.
    Bits:  4    SerDesCkMuxSelCdrL04(rw) - N/A.
    Bits:  3    SerDesCkMuxSelCdrL03(rw) - N/A.
    Bits:  2    SerDesCkMuxSelCdrL02(rw) - N/A.
    Bits:  1    SerDesCkMuxSelCdrL01(rw) - N/A.
    Bits:  0    SerDesCkMuxSelCdrL00(rw) - N/A.
*/
#define NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr               0x000007fc
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL23 BIT(23)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL22 BIT(22)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL21 BIT(21)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL20 BIT(20)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL19 BIT(19)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL18 BIT(18)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL17 BIT(17)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL16 BIT(16)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL15 BIT(15)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL14 BIT(14)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL13 BIT(13)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL12 BIT(12)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL11 BIT(11)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL10 BIT(10)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL09 BIT(9)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL08 BIT(8)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL07 BIT(7)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL06 BIT(6)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL05 BIT(5)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL04 BIT(4)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL03 BIT(3)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL02 BIT(2)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL01 BIT(1)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSelCdr_SerDesCkMuxSelCdrL00 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPdRx - SerDes per-lane RX Power Down - active low.
  Register: SerDesPdTx - SerDes per-lane TX Power Down - active low.
    Bits: 23:0  SerDesLanePowerDown(rw) - Active Low. Per-Lane PowerDown of RX or TX logic.
*/
#define NFP3800_NBI_MACX_CSR_SerDesPdRx                      0x00000800
#define NFP3800_NBI_MACX_CSR_SerDesPdTx                      0x00000804
#define   NFP3800_NBI_MACX_CSR_SerDesPdLn_SerDesLanePowerDown(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDesPdLn_SerDesLanePowerDown_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: SerDesPdSy - SerDes per-macro Synth Power Down - active low.
    Bits:  9:5  SerDesMainResetB(rw) - Active Low. Per Macro. Main reset. Starts the reset sequence.
    Bits:  4:0  SerDesSynthPowerDown(rw) - Active Low. Per-macro PowerDown of the HS and LS and Usr PLLs.
*/
#define NFP3800_NBI_MACX_CSR_SerDesPdSy                      0x00000808
#define   NFP3800_NBI_MACX_CSR_SerDesPdSy_SerDesMainResetB(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_CSR_SerDesPdSy_SerDesMainResetB_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_CSR_SerDesPdSy_SerDesSynthPowerDown(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDesPdSy_SerDesSynthPowerDown_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCkMuxSel - SerDes clock mux select.
    Bits: 31:26 SerDesCkMuxSel_RFU(rw) - reserved.
    Bits: 25    SerDesCkMuxSelGang1918(rw) - N/A.
    Bits: 24    SerDesCkMuxSelGang1716(rw) - N/A.
    Bits: 23    SerDesCkMuxSelL19(rw) - N/A.
    Bits: 22    SerDesCkMuxSelL18(rw) - N/A.
    Bits: 21    SerDesCkMuxSelL17(rw) - N/A.
    Bits: 20    SerDesCkMuxSelL16(rw) - N/A.
    Bits: 19    SerDesCkMuxSelGang1512(rw) - N/A.
    Bits: 18    SerDesCkMuxSelL15(rw) - N/A.
    Bits: 17    SerDesCkMuxSelL14(rw) - N/A.
    Bits: 16    SerDesCkMuxSelL13(rw) - N/A
    Bits: 15    SerDesCkMuxSelL12(rw) - N/A.
    Bits: 14    SerDesCkMuxSelGang1108(rw) - N/A.
    Bits: 13    SerDesCkMuxSelL11(rw) - Mux selector for lane11 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 12    SerDesCkMuxSelL10(rw) - Mux selector for lane10 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 11    SerDesCkMuxSelL09(rw) - Mux selector for lane9 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits: 10    SerDesCkMuxSelL08(rw) - Mux selector for lane8 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  9    SerDesCkMuxSelGang0704(rw) - N/A.
    Bits:  8    SerDesCkMuxSelL07(rw) - N/A.
    Bits:  7    SerDesCkMuxSelL06(rw) - N/A.
    Bits:  6    SerDesCkMuxSelL05(rw) - N/A.
    Bits:  5    SerDesCkMuxSelL04(rw) - N/A.
    Bits:  4    SerDesCkMuxSelGang0300(rw) - N/A.
    Bits:  3    SerDesCkMuxSelL03(rw) - Mux selector for lane3 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  2    SerDesCkMuxSelL02(rw) - Mux selector for lane2 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  1    SerDesCkMuxSelL01(rw) - Mux selector for lane1 clocking. Asserted selects gang clock. Zero selects self-clock.
    Bits:  0    SerDesCkMuxSelL00(rw) - Mux selector for lane0 clocking. Asserted selects gang clock. Zero selects self-clock.
*/
#define NFP3800_NBI_MACX_CSR_SerDesCkMuxSel                  0x0000080c
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSel_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSel_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1918 BIT(25)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1716 BIT(24)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL19 BIT(23)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL18 BIT(22)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL17 BIT(21)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL16 BIT(20)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1512 BIT(19)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL15 BIT(18)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL14 BIT(17)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL13 BIT(16)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL12 BIT(15)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang1108 BIT(14)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL11 BIT(13)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL10 BIT(12)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL09 BIT(11)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL08 BIT(10)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang0704 BIT(9)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL07 BIT(8)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL06 BIT(7)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL05 BIT(6)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL04 BIT(5)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelGang0300 BIT(4)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL03 BIT(3)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL02 BIT(2)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL01 BIT(1)
#define   NFP3800_NBI_MACX_CSR_SerDesCkMuxSel_SerDesCkMuxSelL00 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesSigDetect - SerDes per-lane Signal Detect.
    Bits: 19:0  SerDesLaneSigDetect(ro) - Active Hi when Serdes detects a signal(per lane).
*/
#define NFP3800_NBI_MACX_CSR_SerDesSigDetect                 0x00000810
#define   NFP3800_NBI_MACX_CSR_SerDesSigDetect_SerDesLaneSigDetect(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDesSigDetect_SerDesLaneSigDetect_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: SerDesSigDetectOvr - SerDes per-lane Signal Detect Override.
    Bits: 19:0  SerDesLaneSigDetectOvr(rw) - Override for SigDETECT from the serdes. Deasserts the PHY_LOS to the Ethernet MAC.
*/
#define NFP3800_NBI_MACX_CSR_SerDesSigDetectOvr              0x00000814
#define   NFP3800_NBI_MACX_CSR_SerDesSigDetectOvr_SerDesLaneSigDetectOvr(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDesSigDetectOvr_SerDesLaneSigDetectOvr_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: SerDesEthRxActDetect - SerDes per-port Rx activity detect.
  Register: SerDesEthTxActDetect - SerDes per-port Tx activity detect.
    Bits: 19:0  SerDesPortActDetect(ro) - Active Hi when Activity on a port. Clear on Read
*/
#define NFP3800_NBI_MACX_CSR_SerDesEthRxActDetect            0x00000818
#define NFP3800_NBI_MACX_CSR_SerDesEthTxActDetect            0x0000081c
#define   NFP3800_NBI_MACX_CSR_SerDesActDetect_SerDesPortActDetect(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDesActDetect_SerDesPortActDetect_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: SerDesLinkUp - SerDes Link Up. A '1' indicates the Lane is Block-Locked or comma-sync'd, depending on mode. For a multi-lane port, all associated lanes must be block-locked AND aligned. These bits are just an indication of block_lock.
    Bits: 19:0  SerDesLinkUp(ro) - Active Hi Block Lock when Serdes link up state occurs(per lane) as indicated by the EthMAC.
*/
#define NFP3800_NBI_MACX_CSR_SerDesLinkUp                    0x00000820
#define   NFP3800_NBI_MACX_CSR_SerDesLinkUp_SerDesLinkUp(_x) (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_SerDesLinkUp_SerDesLinkUp_of(_x) (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: ParityErrInject - Setting a bit in this register will force a 1-shot error to be written into the parity field of the corresponding memory on the next write. To re-set the 1-shot, write the register to 0.
    Bits:  5    InjectIgParErrDescMem(rw) - Write a 1 to inject an error to IG descriptor memory.
    Bits:  4    InjectIgParErrTsmpMem(rw) - Write a 1 to inject an error to IG timestamp memory.
    Bits:  3    InjectIgParErrRsltMem(rw) - Write a 1 to inject an error to IG parse result memory.
    Bits:  2    InjectEgParErrDescMem(rw) - Write a 1 to inject an error to EG descriptor memory.
    Bits:  1    InjectEgParErrRslt1Mem(rw) - Write a 1 to inject an error to EG parse result1 memory.
    Bits:  0    InjectEgParErrRslt0Mem(rw) - Write a 1 to inject an error to EG parse result0 memory.
*/
#define NFP3800_NBI_MACX_CSR_ParityErrInject                 0x00000824
#define   NFP3800_NBI_MACX_CSR_ParityErrInject_InjectIgParErrDescMem BIT(5)
#define   NFP3800_NBI_MACX_CSR_ParityErrInject_InjectIgParErrTsmpMem BIT(4)
#define   NFP3800_NBI_MACX_CSR_ParityErrInject_InjectIgParErrRsltMem BIT(3)
#define   NFP3800_NBI_MACX_CSR_ParityErrInject_InjectEgParErrDescMem BIT(2)
#define   NFP3800_NBI_MACX_CSR_ParityErrInject_InjectEgParErrRslt1Mem BIT(1)
#define   NFP3800_NBI_MACX_CSR_ParityErrInject_InjectEgParErrRslt0Mem BIT(0)
/*----------------------------------------------------------------
  Register: BlockLock - IP Core1 BlockLock. 20 bits of status encoded as per register detail.
    Bits: 19:0  BlockLock(ro) - Active Hi Block Lock when EMac lanes as indicated by the EthMACs in core1. Block synchronization indication for each (virtual) lane. When asserted (1) the block sync SM could successfully lock onto 66-bit block boundaries. The signals stay asserted as long as block lock is maintained. All 20 bits are relevant when the 100G PCS operates in normal mode indicating lock per Virtual Lane. They are not relevant in RS-FEC mode. When the 100G PCS is not used the following bits per serdes lane are valid: When the Serdes If 0 operates in 25/10G mode then Bit 0 is used. When the Serdes If 1 operates in 25/10G mode then Bit 5 is used. When the Serdes If 2 operates in 25/10G mode then Bit 10 is used. When the Serdes If 3 operates in 25/10G mode then Bit 15 is used. When the Serdes If 1 and 0 operates in 2-Lane 50G with no RS-FEC mode then Bits 6, 5, 1, 0 are used. When the Serdes If 3 and 2 operates in 2-Lane 50G with no RS-FEC mode then Bits 16, 15, 11, 10 are used. When the Serdes If 3, 2, 1 and 0 operates in 4-Lane 40G with no RS-FEC mode then Bits 6, 5, 1, 0 are used.
*/
#define NFP3800_NBI_MACX_CSR_BlockLock                       0x0000082c
#define   NFP3800_NBI_MACX_CSR_BlockLock_BlockLock(_x)       (((_x) & 0xfffff) << 0)
#define   NFP3800_NBI_MACX_CSR_BlockLock_BlockLock_of(_x)    (((_x) >> 0) & 0xfffff)
/*----------------------------------------------------------------
  Register: IgParityErrStatus - Ingress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 14:12 IgParErrType(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt_mem. 010=timestamp_mem, 100=desc_mem.
    Bits: 10:0  IgParErrAddr(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP3800_NBI_MACX_CSR_IgParityErrStatus               0x00000840
#define   NFP3800_NBI_MACX_CSR_IgParityErrStatus_IgParErrType(_x) (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_IgParityErrStatus_IgParErrType_of(_x) (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_IgParityErrStatus_IgParErrAddr(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_CSR_IgParityErrStatus_IgParErrAddr_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: EgParityErrStatus - Egress parity error status. Clear on read. A non-zero type-field indicates a captured error at the address field location.
    Bits: 30:28 EgParErrType1(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits: 25:16 EgParErrAddr1(ro) - Address of parity error in memory indicated by a non-zero type field.
    Bits: 14:12 EgParErrType0(ro) - If non-zero, indicates a parity err occurred. Read to clear. 001=rslt0_mem. 010=rslt1_mem, 100=desc_mem.
    Bits:  9:0  EgParErrAddr0(ro) - Address of parity error in memory indicated by a non-zero type field.
*/
#define NFP3800_NBI_MACX_CSR_EgParityErrStatus               0x00000844
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrType1(_x) (((_x) & 0x7) << 28)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrType1_of(_x) (((_x) >> 28) & 0x7)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr1(_x) (((_x) & 0x3ff) << 16)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr1_of(_x) (((_x) >> 16) & 0x3ff)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrType0(_x) (((_x) & 0x7) << 12)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrType0_of(_x) (((_x) >> 12) & 0x7)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr0(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_CSR_EgParityErrStatus_EgParErrAddr0_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MemErrDropCounts - Packet drop counts due to Mem read errors. Clear on read. Each counter saturates at 255.
    Bits: 31:24 IgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 23:16 IgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits: 15:8  EgMemErrDrop1(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
    Bits:  7:0  EgMemErrDrop0(ro) - Count of packets errored during DQ due to memory errors. Saturates at 255. Clear on read.
*/
#define NFP3800_NBI_MACX_CSR_MemErrDropCounts                0x00000848
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop1(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop1_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop0(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_IgMemErrDrop0_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_MemErrDropCounts_EgMemErrDrop0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: AssertConfig0 - Assert config reg 0.
    Bits: 31:0  AssertConfigCsr0(rw) - Assertion Config Register0: disable assertion 31:0.
*/
#define NFP3800_NBI_MACX_CSR_AssertConfig0                   0x0000084c
#define   NFP3800_NBI_MACX_CSR_AssertConfig0_AssertConfigCsr0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_CSR_AssertConfig0_AssertConfigCsr0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: AssertConfig1 - Assert config reg 1.
    Bits: 31:18 AssertConfigCsr1Disable(rw) - Assertion Config Register1: disable assertion 45:32.
    Bits: 17    AssertConfigCsr1EnaFsm1(rw) - Assertion Config Register1: enable FSM1.
    Bits: 16    AssertConfigCsr1EnaFsm0(rw) - Assertion Config Register1: enable FSM0.
    Bits: 15:8  AssertConfigCsr1FsmCfg1(rw) - Assertion Config Register1: FSM config1.
    Bits:  7:0  AssertConfigCsr1FsmCfg0(rw) - Assertion Config Register1: FSM config0.
*/
#define NFP3800_NBI_MACX_CSR_AssertConfig1                   0x00000850
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1Disable(_x) (((_x) & 0x3fff) << 18)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1Disable_of(_x) (((_x) >> 18) & 0x3fff)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1EnaFsm1 BIT(17)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1EnaFsm0 BIT(16)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_CSR_AssertConfig1_AssertConfigCsr1FsmCfg0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxInfo - Interlaken Mac TX Core Info
  Register: LkRxInfo - Interlaken Mac RX Core Info
    Bits: 31:24 LkMaxChan(ro) - The value of SLE_MAX_CHAN that is set in the rtl defines. This sets the number of per channel statistics counters that are kept.
    Bits: 23:14 LkMaxCal(ro) - The value of SLE_MAX_CAL that is set in the rtl defines.
    Bits: 13:8  LkMaxSerDes(ro) - The value of SLE_MAX_SERDES that is set in the rtl defines. This sets the maximum depth of programmable calculator that will be supported.
    Bits:  7:4  LkMajorRev(ro) - Indicates the major version of the SLE Interlaken RTL.
    Bits:  3:0  LkMinorRev(ro) - Indicates the minor version of the SLE Interlaken RTL.
*/
#define NFP3800_NBI_MACX_ILK_LkTxInfo                        0x00000000
#define NFP3800_NBI_MACX_ILK_LkRxInfo                        0x00000200
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMaxChan(_x)          (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMaxChan_of(_x)       (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMaxCal(_x)           (((_x) & 0x3ff) << 14)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMaxCal_of(_x)        (((_x) >> 14) & 0x3ff)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMaxSerDes(_x)        (((_x) & 0x3f) << 8)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMaxSerDes_of(_x)     (((_x) >> 8) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMajorRev(_x)         (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMajorRev_of(_x)      (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMinorRev(_x)         (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_LkInfo_LkMinorRev_of(_x)      (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxInfo2 - Interlaken Mac TX Core Info2
    Bits:  7:0  LkTxFifoDepth(ro) - The value of SLE_TX_FIFO_DEPTH that is set in the rtl defines.
*/
#define NFP3800_NBI_MACX_ILK_LkTxInfo2                       0x00000004
#define   NFP3800_NBI_MACX_ILK_LkTxInfo2_LkTxFifoDepth(_x)   (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkTxInfo2_LkTxFifoDepth_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxLaneDisable - Interlaken Mac TX Core Lane Disable
  Register: LkRxLaneDisable - Interlaken Mac RX Core Lane Disable
    Bits: 23:0  LkLaneDisable(rw) - When set to 1, the logic driving the corresponding serdes lane is disabled. When set to 0, the logic for the corresponding serdes lane is enabled, if it exists.
*/
#define NFP3800_NBI_MACX_ILK_LkTxLaneDisable                 0x00000008
#define NFP3800_NBI_MACX_ILK_LkRxLaneDisable                 0x00000208
#define   NFP3800_NBI_MACX_ILK_LkLaneDisable_LkLaneDisable(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkLaneDisable_LkLaneDisable_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxConfig - Interlaken Mac TX Core Config
  Register: LkRxConfig - Interlaken Mac RX Core Config
    Bits: 19    LkUser1(rw) - Unused, must be zero.
    Bits: 18    LkLookAside2Chan(rw) - Select number of channels for lookaside mode. A value of 1 selects 2 channels, a value of 0 selects 4 channels.
    Bits: 17    LkLookAsideMode(rw) - Select lookaside mode when set to 1, else standard mode.
    Bits: 16    LkUser0(rw) - Unused, must be zero.
    Bits: 15    LkFcRxToTxLb(rw) - Enable rx-to-tx loopback on the out-of-band flow control path (internal flow control loopback).
    Bits: 14    LkDataRxToTxLb(rw) - Enable rx-to-tx loopback data path (external data loopback).
    Bits: 13    LkFcTxToRxLb(rw) - Enable tx-to-rx loopback on the out-of-band flow control path (external flow control loopback).
    Bits: 12    LkDataTxToRxLb(rw) - Enable tx-to-rx loopback data path (internal data loopback).
    Bits:  9:8  LkMemWait(rw) - The number of wait states to assume when accessing the memory for the statistics counters. 0= Read data on the cycle following read enable/address 1= Read data two cycles after read eanble/address.
    Bits:  7    LkOutBandEn(rw) - When set to 1, out-of-band flow control is enabled.INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  6    LkInBandEn(rw) - When set to 1, the inband flow control is enabled. INBAND and OUTBAND should not be set to 1 at the same time.
    Bits:  5    LkMultExt(rw) - When set to 1, the multiple-use field is used for external use (given by the i_tx_multiple_use[7:0] input). The state of o_rx_chanext_use would be at an unknown state.
    Bits:  4    LkMultCh(rw) - When set to 1, the multiple-use field is used for channel number extention given by the i_tx_chanext input. The state of o_rx_multi_use would be at an unknown state.
    Bits:  3    LkMultFc(rw) - When set to 1, the multiple-use field is for flow control extention. If more than one of the MULT_EXT, MULT_CH, and MULT_FC, are enabled the multipe_use field and o_rx_chanext are undefined.
    Bits:  1    LkScramDis(rw) - When 1, the scrambler of the 64/67 code is disabled. See the Miscellaneous Notes section of the User's Guide.
    Bits:  0    LkSkipDis(rw) - In the TX, when set to 1, the generation of skip words in the metaframe is disabled. In the RX, this bit has no function.
*/
#define NFP3800_NBI_MACX_ILK_LkTxConfig                      0x00000010
#define NFP3800_NBI_MACX_ILK_LkRxConfig                      0x00000210
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkUser1              BIT(19)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkLookAside2Chan     BIT(18)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkLookAsideMode      BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkUser0              BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkFcRxToTxLb         BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkDataRxToTxLb       BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkFcTxToRxLb         BIT(13)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkDataTxToRxLb       BIT(12)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkMemWait(_x)        (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkMemWait_of(_x)     (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkOutBandEn          BIT(7)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkInBandEn           BIT(6)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkMultExt            BIT(5)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkMultCh             BIT(4)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkMultFc             BIT(3)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkScramDis           BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkConfig_LkSkipDis            BIT(0)
/*----------------------------------------------------------------
  Register: LkTxControl - Interlaken Mac TX Core Control
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP3800_NBI_MACX_ILK_LkTxControl                     0x00000018
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkStatusMsgEn     BIT(10)
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkDataOutKill     BIT(7)
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkFcOutKill       BIT(6)
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkDispDis         BIT(4)
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkCrc24Dis        BIT(3)
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkCrc32Dis        BIT(2)
#define   NFP3800_NBI_MACX_ILK_LkTxControl_LkUnalignXoffDis  BIT(1)
/*----------------------------------------------------------------
  Register: LkTxFifoConfig - Interlaken Mac TX Core Fifo Config
    Bits: 17    LkTxFifoSingle(rw) - Interlaken TX FIFO Single Parity error inject
    Bits: 16    LkTxFifoInvPar(rw) - Interlaken TX FIFO Parity test function
    Bits: 11:8  LkTxFifoHwm(rw) - Interlaken TX FIFO HWM
    Bits:  3:0  LkTxFifoLwm(rw) - Interlaken TX FIFO LWM
*/
#define NFP3800_NBI_MACX_ILK_LkTxFifoConfig                  0x00000020
#define   NFP3800_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoSingle BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoInvPar BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoHwm(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoHwm_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoLwm(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_LkTxFifoConfig_LkTxFifoLwm_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkSerDesTxFifoConfig - Interlaken Mac TX Core SerDes Fifo Config
    Bits: 11:8  LkSerDesTxFifoHwm(rw) - Interlaken SerDes TXFIFO HWM
    Bits:  3:0  LkSerDesTxFifoLwm(rw) - Interlaken SerDes TXFIFO LWM
*/
#define NFP3800_NBI_MACX_ILK_LkSerDesTxFifoConfig            0x00000028
#define   NFP3800_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoHwm(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoHwm_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoLwm(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTxFifoConfig_LkSerDesTxFifoLwm_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkTxBurstConfig - Interlaken Mac TX Core Burst Config
  Register: LkRxBurstConfig - Interlaken Mac RX Core Burst Config
    Bits: 26:24 LkBurstMax(rw) - Interlaken BurstMax
    Bits: 18:16 LkBurstMin(rw) - Interlaken BurstMin
    Bits: 10:8  LkBurstShort(rw) - Interlaken BurstShort
    Bits:  2    LkBurstMaxChkDisable(rw) - Interlaken Burstmax Check Disable
    Bits:  1    LkBurstMinChkDisable(rw) - Interlaken Burstmin Check Disable
*/
#define NFP3800_NBI_MACX_ILK_LkTxBurstConfig                 0x00000030
#define NFP3800_NBI_MACX_ILK_LkRxBurstConfig                 0x00000230
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstMax(_x)  (((_x) & 0x7) << 24)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstMax_of(_x) (((_x) >> 24) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstMin(_x)  (((_x) & 0x7) << 16)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstMin_of(_x) (((_x) >> 16) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstShort(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstShort_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstMaxChkDisable BIT(2)
#define   NFP3800_NBI_MACX_ILK_LkBurstConfig_LkBurstMinChkDisable BIT(1)
/*----------------------------------------------------------------
  Register: LkTxMetaFrameSyncPeriod - Interlaken Mac TX MetaFrame Sync Period
  Register: LkRxMetaFrameSyncPeriod - Interlaken Mac RX MetaFrame Sync Period
    Bits: 15:0  LkMetaFrameSyncPeriod(rw) - Interlaken MetFrame Sync Period
*/
#define NFP3800_NBI_MACX_ILK_LkTxMetaFrameSyncPeriod         0x00000034
#define NFP3800_NBI_MACX_ILK_LkRxMetaFrameSyncPeriod         0x00000234
#define   NFP3800_NBI_MACX_ILK_LkMetaFrameSyncPeriod_LkMetaFrameSyncPeriod(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkMetaFrameSyncPeriod_LkMetaFrameSyncPeriod_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxRateLimit0 - Interlaken TX Rate Limit0
    Bits: 31:16 LkMaxCredits(rw) - Interlaken Rate Limit Max Credits
    Bits: 10:8  LkGranularity(rw) - Interlaken Decrement Granularity
    Bits:  0    LkRateLimitEnable(rw) - Interlaken Rate Limit Enable
*/
#define NFP3800_NBI_MACX_ILK_LkTxRateLimit0                  0x00000038
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit0_LkMaxCredits(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit0_LkMaxCredits_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit0_LkGranularity(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit0_LkGranularity_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit0_LkRateLimitEnable BIT(0)
/*----------------------------------------------------------------
  Register: LkTxRateLimit1 - Interlaken TX Rate Limit1
    Bits: 31:16 LkCreditInterval(rw) - Interlaken Rate Limit Credit Interval
    Bits: 15:0  LkCreditDelta(rw) - Interlaken Rate Limit Credit Delta
*/
#define NFP3800_NBI_MACX_ILK_LkTxRateLimit1                  0x0000003c
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit1_LkCreditInterval(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit1_LkCreditInterval_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit1_LkCreditDelta(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkTxRateLimit1_LkCreditDelta_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxErrInject0 - Interlaken TX Error Inject0
  Register: LkTxErrInject1 - Interlaken TX Error Inject1
  Register: LkTxErrInject2 - Interlaken TX Error Inject2
  Register: LkTxErrInject3 - Interlaken TX Error Inject3
    Bits: 30:24 LkErrLocation(rw) - Interlaken Bit Err Insertion Location 0-66
    Bits: 20:16 LkErrLane(rw) - Interlaken Lane to inject error
    Bits: 10:8  LkErrType(rw) - Interlaken Word type to inject error
    Bits:  1    LkErrSingle(rw) - Interlaken Error Inject Single
    Bits:  0    LkErrEnable(rw) - Interlaken Error Inject Enable
*/
#define NFP3800_NBI_MACX_ILK_LkTxErrInject0                  0x00000050
#define NFP3800_NBI_MACX_ILK_LkTxErrInject1                  0x00000054
#define NFP3800_NBI_MACX_ILK_LkTxErrInject2                  0x00000058
#define NFP3800_NBI_MACX_ILK_LkTxErrInject3                  0x0000005c
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrLocation(_x) (((_x) & 0x7f) << 24)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrLocation_of(_x) (((_x) >> 24) & 0x7f)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrLane(_x)   (((_x) & 0x1f) << 16)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrLane_of(_x) (((_x) >> 16) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrType(_x)   (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrType_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrSingle     BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkTxErrInject_LkErrEnable     BIT(0)
/*----------------------------------------------------------------
  Register: LkTxStatsAcc - Interlaken TX Statistics Counter Access
  Register: LkRxStatsAcc - Interlaken RX Statistics Counter Access
    Bits: 19:16 LkStatsAccType(rw) - Most of the counter type names match exactly with the recommended statistics from the Interlaken Protocol Definition. For TX counter types: 0x0 = TX_Packets, TX_Bytes, and TX_Bad_Packets, ADDR field indicates which channel number; 0x1 = RX_FC_Error. The number of out of band Flow Control Errors, either framing or CRC4 errors. All others: unused. For Rx counter types:
    Bits:  7:0  LkStatsAccAddr(rw) - When LkStatsAccType field = 0000 then LkStatsAccAddr[7:0] represent channel number. All other combinations of LkStatsAccType does not represent anything and therefore should be set to zeros.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsAcc                    0x00000074
#define NFP3800_NBI_MACX_ILK_LkRxStatsAcc                    0x00000274
#define   NFP3800_NBI_MACX_ILK_LkStatsAcc_LkStatsAccType(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LkStatsAcc_LkStatsAccType_of(_x) (((_x) >> 16) & 0xf)
#define     NFP3800_NBI_MACX_ILK_LkStatsAcc_LkStatsAccType_Unused (11)
#define   NFP3800_NBI_MACX_ILK_LkStatsAcc_LkStatsAccAddr(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsAcc_LkStatsAccAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsFill - Interlaken TX Statistics Counter Fill
  Register: LkRxStatsFill - Interlaken RX Statistics Counter Fill
    Bits: 31    LkStatsFillBOver(ro) - The Byte counter overflowed and started again from zero.
    Bits: 30    LkStatsFillPOver(ro) - The Packet counter overflowed and started again from zero.
    Bits: 29    LkStatsFillEOver(ro) - The Error counter overflowed and started again from zero.
    Bits: 28    LkStatsFillBHalf(ro) - The Byte counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 27    LkStatsFillPHalf(ro) - The Packet counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 26    LkStatsFillEHalf(ro) - The Err counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 19:16 LkStatsFillType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use this register, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsFillAddr(ro) - The address of a statistics counter that is half full or has overflowed. When in Single Channel Stats mode the return value if the LkStatsFillAddr field will always be zero. NOTE: LkStatsFillAddr is undefined when bits 31-26 are all zeros
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsFill                   0x00000078
#define NFP3800_NBI_MACX_ILK_LkRxStatsFill                   0x00000278
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillBOver  BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillPOver  BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillEOver  BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillBHalf  BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillPHalf  BIT(27)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillEHalf  BIT(26)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillType(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillType_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillAddr(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsFill_LkStatsFillAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsParity - Interlaken TX Statistics Counter Parity
  Register: LkRxStatsParity - Interlaken RX Statistics Counter Parity
    Bits: 31    LkStatsParUncorr(ro) - Specifies whether any of the counters had a parity (or uncorrectable ECC) error.
    Bits: 30    LkStatsParCorr(ro) - Specifies whether any of the counters had a correctable ECC error.
    Bits: 19:16 LkStatsParType(ro) - The type of statistics counter being reported as described in the LkStatsAcc register description. Only the per channel statistics counters are use the parity protected memory, so the TYPE field will always be 0000
    Bits:  7:0  LkStatsParAddr(ro) - The address of a statistics counter that had the error. When in Single Channel Stats mode the return value of the ADDR field will always be zero. NOTE: ADDR is undefined when bits 31-30 are all zeros
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsParity                 0x0000007c
#define NFP3800_NBI_MACX_ILK_LkRxStatsParity                 0x0000027c
#define   NFP3800_NBI_MACX_ILK_LkStatsParity_LkStatsParUncorr BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkStatsParity_LkStatsParCorr  BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkStatsParity_LkStatsParType(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LkStatsParity_LkStatsParType_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkStatsParity_LkStatsParAddr(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsParity_LkStatsParAddr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteHi - Interlaken TX Statistics Write Byte Counter High
  Register: LkRxStatsWrByteHi - Interlaken RX Statistics Write Byte Counter High
    Bits: 23:0  LkStatsWrByteHiWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrByteHi               0x00000080
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrByteHi               0x00000280
#define   NFP3800_NBI_MACX_ILK_LkStatsWrByteHi_LkStatsWrByteHiWData(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrByteHi_LkStatsWrByteHiWData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrByteLo - Interlaken TX Statistics Write Byte Counter Low
  Register: LkRxStatsWrByteLo - Interlaken RX Statistics Write Byte Counter Low
    Bits: 31:0  LkStatsWrByteLoWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrByteLo               0x00000084
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrByteLo               0x00000284
#define   NFP3800_NBI_MACX_ILK_LkStatsWrByteLo_LkStatsWrByteLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrByteLo_LkStatsWrByteLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktHi - Interlaken TX Statistics Write Packet Counter High
  Register: LkRxStatsWrPktHi - Interlaken RX Statistics Write Packet Counter High
    Bits: 15:0  LkStatsWrPktHiWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrPktHi                0x00000088
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrPktHi                0x00000288
#define   NFP3800_NBI_MACX_ILK_LkStatsWrPktHi_LkStatsWrPktHiWData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrPktHi_LkStatsWrPktHiWData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrPktLo - Interlaken TX Statistics Write Packet Counter Low
  Register: LkRxStatsWrPktLo - Interlaken RX Statistics Write Packet Counter Low
    Bits: 31:0  LkStatsWrPktLoWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrPktLo                0x0000008c
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrPktLo                0x0000028c
#define   NFP3800_NBI_MACX_ILK_LkStatsWrPktLo_LkStatsWrPktLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrPktLo_LkStatsWrPktLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrHi - Interlaken TX Statistics Write Error Counter High
  Register: LkRxStatsWrErrHi - Interlaken RX Statistics Write Error Counter High
    Bits: 15:0  LkStatsWrErrHiWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrErrHi                0x00000090
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrErrHi                0x00000290
#define   NFP3800_NBI_MACX_ILK_LkStatsWrErrHi_LkStatsWrErrHiWData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrErrHi_LkStatsWrErrHiWData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrErrLo - Interlaken TX Statistics Write Error Counter Low
  Register: LkRxStatsWrErrLo - Interlaken RX Statistics Write Error Counter Low
    Bits: 31:0  LkStatsWrErrLoWData(rw) - The write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrErrLo                0x00000094
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrErrLo                0x00000294
#define   NFP3800_NBI_MACX_ILK_LkStatsWrErrLo_LkStatsWrErrLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrErrLo_LkStatsWrErrLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsWrParity - Interlaken TX Statistics Write Parity
  Register: LkRxStatsWrParity - Interlaken RX Statistics Write Parity
    Bits: 23:0  LkStatsWrParWData(rw) - The parity bits for the write data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsWrParity               0x00000098
#define NFP3800_NBI_MACX_ILK_LkRxStatsWrParity               0x00000298
#define   NFP3800_NBI_MACX_ILK_LkStatsWrParity_LkStatsWrParWData(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsWrParity_LkStatsWrParWData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteHi - Interlaken TX Statistics Read Byte Counter High
  Register: LkRxStatsRdByteHi - Interlaken RX Statistics Read Byte Counter High
    Bits: 31    LkStatsRdByteHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdByteHiHalf(ro) - The counter is over half full based on the SLE_STATS_BYTE_CNT_WIDTH parameter, which is defined as 40.
    Bits: 29    LkStatsRdByteHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdByteHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 23:0  LkStatsRdByteHiRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdByteHi               0x000000a0
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdByteHi               0x000002a0
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiOver BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiHalf BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiUncorr BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiCorr BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiRData(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteHi_LkStatsRdByteHiRData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdByteLo - Interlaken TX Statistics Read Byte Counter Low
  Register: LkRxStatsRdByteLo - Interlaken RX Statistics Read Byte Counter Low
    Bits: 31:0  LkStatsRdByteLoWData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdByteLo               0x000000a4
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdByteLo               0x000002a4
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteLo_LkStatsRdByteLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdByteLo_LkStatsRdByteLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktHi - Interlaken TX Statistics Read Packet Counter High
  Register: LkRxStatsRdPktHi - Interlaken RX Statistics Read Packet Counter High
    Bits: 31    LkStatsRdPktHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdPktHiHalf(ro) - The counter is over half full based on the SLE_STATS_PKT_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdPktHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdPktHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdPktHiRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdPktHi                0x000000a8
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdPktHi                0x000002a8
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiOver BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiHalf BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiUncorr BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiCorr BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiRData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktHi_LkStatsRdPktHiRData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdPktLo - Interlaken TX Statistics Read Packet Counter Low
  Register: LkRxStatsRdPktLo - Interlaken RX Statistics Read Packet Counter Low
    Bits: 31:0  LkStatsRdPktLoWData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdPktLo                0x000000ac
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdPktLo                0x000002ac
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktLo_LkStatsRdPktLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdPktLo_LkStatsRdPktLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrHi - Interlaken TX Statistics Read Error Counter High
  Register: LkRxStatsRdErrHi - Interlaken RX Statistics Read Error Counter High
    Bits: 31    LkStatsRdErrHiOver(ro) - The counter overflowed and started counting again from zero.
    Bits: 30    LkStatsRdErrHiHalf(ro) - The counter is over half full based on the SLE_STATS_ERR_CNT_WIDTH parameter, which is defined as 32.
    Bits: 29    LkStatsRdErrHiUncorr(ro) - The counter had an uncorrectable ECC error.
    Bits: 28    LkStatsRdErrHiCorr(ro) - The counter had a correctable ECC error.
    Bits: 15:0  LkStatsRdErrHiRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdErrHi                0x000000b0
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdErrHi                0x000002b0
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiOver BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiHalf BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiUncorr BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiCorr BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiRData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrHi_LkStatsRdErrHiRData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdErrLo - Interlaken TX Statistics Read Error Counter Low
  Register: LkRxStatsRdErrLo - Interlaken RX Statistics Read Error Counter Low
    Bits: 31:0  LkStatsRdErrLoWData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdErrLo                0x000000b4
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdErrLo                0x000002b4
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrLo_LkStatsRdErrLoWData(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdErrLo_LkStatsRdErrLoWData_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatsRdParity - Interlaken TX Statistics Read Parity
  Register: LkRxStatsRdParity - Interlaken RX Statistics Read Parity
    Bits: 23:0  LkStatsRdParRData(ro) - The read data.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatsRdParity               0x000000b8
#define NFP3800_NBI_MACX_ILK_LkRxStatsRdParity               0x000002b8
#define   NFP3800_NBI_MACX_ILK_LkStatsRdParity_LkStatsRdParRData(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkStatsRdParity_LkStatsRdParRData_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxCalEnable - Interlaken TX Calendar Enable
  Register: LkRxCalEnable - Interlaken RX Calendar Enable
    Bits: 18:8  LkCalLast(rw) - Interlaken Calendar Last Entry Number
    Bits:  0    LkCalProgEnable(rw) - Interlaken Programmable Calendar enable
*/
#define NFP3800_NBI_MACX_ILK_LkTxCalEnable                   0x000000c0
#define NFP3800_NBI_MACX_ILK_LkRxCalEnable                   0x000002c0
#define   NFP3800_NBI_MACX_ILK_LkCalEnable_LkCalLast(_x)     (((_x) & 0x7ff) << 8)
#define   NFP3800_NBI_MACX_ILK_LkCalEnable_LkCalLast_of(_x)  (((_x) >> 8) & 0x7ff)
#define   NFP3800_NBI_MACX_ILK_LkCalEnable_LkCalProgEnable   BIT(0)
/*----------------------------------------------------------------
  Register: LkTxCalProgAccess - Interlaken TX Calendar Program Access
  Register: LkRxCalProgAccess - Interlaken RX Calendar Program Access
    Bits: 25:24 LkCalCmd(rw) - Interlaken Calendar Access command
    Bits: 10:0  LkCalAddr(rw) - Interlaken Prog Calendar Access address
*/
#define NFP3800_NBI_MACX_ILK_LkTxCalProgAccess               0x000000c8
#define NFP3800_NBI_MACX_ILK_LkRxCalProgAccess               0x000002c8
#define   NFP3800_NBI_MACX_ILK_LkCalProgAccess_LkCalCmd(_x)  (((_x) & 0x3) << 24)
#define   NFP3800_NBI_MACX_ILK_LkCalProgAccess_LkCalCmd_of(_x) (((_x) >> 24) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LkCalProgAccess_LkCalAddr(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkCalProgAccess_LkCalAddr_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgWrData - Interlaken TX Calendar Program write data
  Register: LkRxCalProgWrData - Interlaken RX Calendar Program write data
    Bits:  8:0  LkCalProgWrData(rw) - Interlaken Prog Calendar Write data
*/
#define NFP3800_NBI_MACX_ILK_LkTxCalProgWrData               0x000000d0
#define NFP3800_NBI_MACX_ILK_LkRxCalProgWrData               0x000002d0
#define   NFP3800_NBI_MACX_ILK_LkCalProgWrData_LkCalProgWrData(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkCalProgWrData_LkCalProgWrData_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxCalProgRdData - Interlaken TX Calendar Program read data
  Register: LkRxCalProgRdData - Interlaken RX Calendar Program read data
    Bits:  8:0  LkCalProgRdData(ro) - Interlaken Prog Calendar Read data
*/
#define NFP3800_NBI_MACX_ILK_LkTxCalProgRdData               0x000000d8
#define NFP3800_NBI_MACX_ILK_LkRxCalProgRdData               0x000002d8
#define   NFP3800_NBI_MACX_ILK_LkCalProgRdData_LkCalProgRdData(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkCalProgRdData_LkCalProgRdData_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: LkTxDebugControl0 - Interlaken TX Debug bus control0
  Register: LkTxDebugControl1 - Interlaken TX Debug bus control1
  Register: LkRxDebugControl0 - Interlaken RX Debug bus control0
  Register: LkRxDebugControl1 - Interlaken RX Debug bus control1
    Bits: 31:30 LkDebugByte3(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[31:24] of the debug output.
    Bits: 29:24 LkDebugBus3(rw) - Interlaken Debug which internal debug busses to use bits[31:24] of the debug output.
    Bits: 23:22 LkDebugByte2(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[23:16] of the debug output.
    Bits: 21:16 LkDebugBus2(rw) - Interlaken Debug which internal debug busses to use bits[23:16] of the debug output.
    Bits: 15:14 LkDebugByte1(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[15:8] of the debug output.
    Bits: 13:8  LkDebugBus1(rw) - Interlaken Debug which internal debug busses to use bits[15:8] of the debug output.
    Bits:  7:6  LkDebugByte0(rw) - Interlaken Debug which byte of the selected internal debug bus to use bits[7:0] of the debug output.
    Bits:  5:0  LkDebugBus0(rw) - Interlaken Debug which internal debug busses to use bits[7:0] of the debug output.
*/
#define NFP3800_NBI_MACX_ILK_LkTxDebugControl0               0x00000100
#define NFP3800_NBI_MACX_ILK_LkTxDebugControl1               0x00000104
#define NFP3800_NBI_MACX_ILK_LkRxDebugControl0               0x00000300
#define NFP3800_NBI_MACX_ILK_LkRxDebugControl1               0x00000304
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte3(_x) (((_x) & 0x3) << 30)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte3_of(_x) (((_x) >> 30) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus3(_x) (((_x) & 0x3f) << 24)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus3_of(_x) (((_x) >> 24) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte2(_x) (((_x) & 0x3) << 22)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte2_of(_x) (((_x) >> 22) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus2(_x) (((_x) & 0x3f) << 16)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus2_of(_x) (((_x) >> 16) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte1(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte1_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus1(_x) (((_x) & 0x3f) << 8)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus1_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte0(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugByte0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_ILK_LkDebugControl_LkDebugBus0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: LkTxDebugHold0 - Interlaken TX Debug hold control0
  Register: LkTxDebugHold1 - Interlaken TX Debug hold control1
  Register: LkRxDebugHold0 - Interlaken RX Debug hold control0
  Register: LkRxDebugHold1 - Interlaken RX Debug hold control1
    Bits: 31:0  LkDebugHold(rw) - Debug: For each bit that is set to 1, the corresponding bit in the debug output will latch and hold when it sees a high value on the selected debug bit.
*/
#define NFP3800_NBI_MACX_ILK_LkTxDebugHold0                  0x00000108
#define NFP3800_NBI_MACX_ILK_LkTxDebugHold1                  0x0000010c
#define NFP3800_NBI_MACX_ILK_LkRxDebugHold0                  0x00000308
#define NFP3800_NBI_MACX_ILK_LkRxDebugHold1                  0x0000030c
#define   NFP3800_NBI_MACX_ILK_LkDebugHold_LkDebugHold(_x)   (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkDebugHold_LkDebugHold_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxDebugObserve0 - Interlaken TX Debug observe data0
  Register: LkTxDebugObserve1 - Interlaken TX Debug observe data1
  Register: LkRxDebugObserve1 - Interlaken RX Debug observe data1
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP3800_NBI_MACX_ILK_LkTxDebugObserve0               0x00000110
#define NFP3800_NBI_MACX_ILK_LkTxDebugObserve1               0x00000114
#define NFP3800_NBI_MACX_ILK_LkRxDebugObserve1               0x00000314
#define   NFP3800_NBI_MACX_ILK_LkDebugObserve_LkDebugRdata(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkDebugObserve_LkDebugRdata_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestControl - Interlaken TX SerDes Test Control
  Register: LkRxSerDesTestControl - Interlaken RX SerDes Test Control
    Bits: 31:24 LkSerDesTestRepC(rw) - The number of times to repeat pattern C when doing programmable pattern. 0 = Disable pattern C.
    Bits: 23:16 LkSerDesTestRepB(rw) - The number of times to repeat pattern B when doing programmable pattern. 0 = Disable pattern B.
    Bits: 15:8  LkSerDesTestRepA(rw) - The number of times to repeat pattern A when doing programmable pattern. 0 = Disable pattern A.
    Bits:  1    LkSerDesTestProgEn(rw) - Enable programmable pattern.
    Bits:  0    LkSerDesTestPrbsEn(rw) - Enable PRBS (Pseudo Random Bit Stream) pattern.
*/
#define NFP3800_NBI_MACX_ILK_LkTxSerDesTestControl           0x00000120
#define NFP3800_NBI_MACX_ILK_LkRxSerDesTestControl           0x00000320
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepC(_x) (((_x) & 0xff) << 24)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepC_of(_x) (((_x) >> 24) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepB(_x) (((_x) & 0xff) << 16)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepB_of(_x) (((_x) >> 16) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepA(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestRepA_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestProgEn BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestControl_LkSerDesTestPrbsEn BIT(0)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternA - Interlaken TX SerDes Test Pattern A
  Register: LkRxSerDesTestPatternA - Interlaken RX SerDes Test Pattern A
    Bits: 31:0  LkSerDesTestPatternA(rw) - When doing programmable patterns, this bit pattern is sent REPA times. When doing PRBS, this value programs the desired polynomial. The recommended Interlaken polynomials are programmed as follows: PRBS31 : x^31 + x^28 + 1 : 32'h90000001 (bits 31, 28, and 0 are set) PRBS23 : x^23 + x^18 + 1 : 32'h00840001 (bits 23, 18, and 0 are set) PRBS7 : x^7 + x^6 + 1 : 32'h000000C1 (bits 7, 6, and 0 are set) Other commonly used PRBS polynomials are also supported: PRBS9 : x^9 + x^5 + 1 : 32'h00000221 (bits 9, 5, and 0 are set) PRBS11 : x^11 + x^9 + 1 : 32'h00000A01 (bits 11, 9, and 0 are set) PRBS15 : x^15 + x^14 + 1 : 32'h0000C001 (bits 15, 14, and 0 are set) PRBS29 : x^29 + x^27 + 1 : 32'h28000001 (bits 29, 27, and 0 are set) PRBS polynomials other than those listed above are not guaranteed to be functional as some logic optimizations may have been done to improve the area and performance of the design. When doing PRBS, bit[0] is ignored and assumed to be 1'b1..
*/
#define NFP3800_NBI_MACX_ILK_LkTxSerDesTestPatternA          0x00000124
#define NFP3800_NBI_MACX_ILK_LkRxSerDesTestPatternA          0x00000324
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestPatternA_LkSerDesTestPatternA(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestPatternA_LkSerDesTestPatternA_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternB - Interlaken TX SerDes Test Pattern B
  Register: LkRxSerDesTestPatternB - Interlaken RX SerDes Test Pattern B
    Bits: 31:0  LkSerDesTestPatternB(rw) - When doing programmable patterns, this bit pattern is sent REPB times.
*/
#define NFP3800_NBI_MACX_ILK_LkTxSerDesTestPatternB          0x00000128
#define NFP3800_NBI_MACX_ILK_LkRxSerDesTestPatternB          0x00000328
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestPatternB_LkSerDesTestPatternB(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestPatternB_LkSerDesTestPatternB_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxSerDesTestPatternC - Interlaken TX SerDes Test Pattern C
  Register: LkRxSerDesTestPatternC - Interlaken RX SerDes Test Pattern C
    Bits: 31:0  LkSerDesTestPatternC(rw) - When doing programmable patterns, this bit pattern is sent REPC times.
*/
#define NFP3800_NBI_MACX_ILK_LkTxSerDesTestPatternC          0x0000012c
#define NFP3800_NBI_MACX_ILK_LkRxSerDesTestPatternC          0x0000032c
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestPatternC_LkSerDesTestPatternC(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkSerDesTestPatternC_LkSerDesTestPatternC_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkTxStatusMessage - Interlaken TX Status Message Received from OOB
    Bits: 31    LkTxStatusMessageCurrent(ro) - The most recently received calendar included a status message.
    Bits: 30    LkTxStatusMessageValid(ro) - The most recently received status message was valid (no framing or CRC errors). When the most recently received status message was errored due to framing or CRC errors, the SIF and SL bits below are retained from the previous valid status message, if any.
    Bits: 26    LkTxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 24    LkTxStatusMessageSif(ro) - The status bit for the interface as a whole.
    Bits: 23:0  LkTxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkTxStatusMessage               0x00000140
#define   NFP3800_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageCurrent BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageValid BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageSync BIT(26)
#define   NFP3800_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageSif BIT(24)
#define   NFP3800_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageLanes(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkTxStatusMessage_LkTxStatusMessageLanes_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap5to0 - Interlaken TX Lane Remapping 5 to 0
  Register: LkRxLaneReMap5to0 - Interlaken RX Lane Remapping 5 to 0
    Bits: 29:25 LkLaneReMap5(rw) - Interlaken Physical Remap for lane 5
    Bits: 24:20 LkLaneReMap4(rw) - Interlaken Physical Remap for lane 4
    Bits: 19:15 LkLaneReMap3(rw) - Interlaken Physical Remap for lane 3
    Bits: 14:10 LkLaneReMap2(rw) - Interlaken Physical Remap for lane 2
    Bits:  9:5  LkLaneReMap1(rw) - Interlaken Physical Remap for lane 1
    Bits:  4:0  LkLaneReMap0(rw) - Interlaken Physical Remap for lane 0
*/
#define NFP3800_NBI_MACX_ILK_LkTxLaneReMap5to0               0x00000150
#define NFP3800_NBI_MACX_ILK_LkRxLaneReMap5to0               0x00000350
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap5(_x) (((_x) & 0x1f) << 25)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap5_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap4(_x) (((_x) & 0x1f) << 20)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap4_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap3(_x) (((_x) & 0x1f) << 15)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap3_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap2(_x) (((_x) & 0x1f) << 10)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap2_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap1(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap1_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping5to0_LkLaneReMap0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxLaneReMap11to6 - Interlaken TX Lane Remapping 11 to 6
  Register: LkRxLaneReMap11to6 - Interlaken RX Lane Remapping 11 to 6
    Bits: 29:25 LkLaneReMap11(rw) - Interlaken Physical Remap for lane 11
    Bits: 24:20 LkLaneReMap10(rw) - Interlaken Physical Remap for lane 10
    Bits: 19:15 LkLaneReMap9(rw) - Interlaken Physical Remap for lane 9
    Bits: 14:10 LkLaneReMap8(rw) - Interlaken Physical Remap for lane 8
    Bits:  9:5  LkLaneReMap7(rw) - Interlaken Physical Remap for lane 7
    Bits:  4:0  LkLaneReMap6(rw) - Interlaken Physical Remap for lane 6
*/
#define NFP3800_NBI_MACX_ILK_LkTxLaneReMap11to6              0x00000154
#define NFP3800_NBI_MACX_ILK_LkRxLaneReMap11to6              0x00000354
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap11(_x) (((_x) & 0x1f) << 25)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap11_of(_x) (((_x) >> 25) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap10(_x) (((_x) & 0x1f) << 20)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap10_of(_x) (((_x) >> 20) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap9(_x) (((_x) & 0x1f) << 15)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap9_of(_x) (((_x) >> 15) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap8(_x) (((_x) & 0x1f) << 10)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap8_of(_x) (((_x) >> 10) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap7(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap7_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap6(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ILK_LkLaneReMapping11to6_LkLaneReMap6_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: LkTxInterrupt - Interlaken TX Interrupt
  Register: LkTxInterrupt2 - Interlaken TX Interrupt Second
    Bits: 31    LkTxIntFifoUnCorr(rw1c) - The transmitter's input fifo had an uncorrectable parity or ECC error.
    Bits: 30    LkTxIntFifoCorr(rw1c) - The transmitter's input fifo had an correctable ECC error.
    Bits: 29    LkTxIntFifoOver(rw1c) - The transmitter's input fifo overflowed. This should not happen if the high watermark in register SLE_TX_FIFO_CFG is set properly given the latency required for the user to respond to stall.
    Bits: 28    LkTxIntFifoUnder(rw1c) - The transmitter's input fifo went empty not on a burst boundary. To try to prevent Interlaken protocol errors a burst boundary was forced. This condition should not happen if the user sends data in complete bursts and the low watermark in register FIXME is set properly given the latency required for the user to respond to stall.
    Bits: 17    LkTxIntFcErr(rw1c) - An error occurred on the out band flow control (mismatch between calendar length and reset calendar pulse or CRC4 error)..
    Bits: 16    LkTxIntStatusMessageChange(rw1c) - When this interrupt is set, it reports if there is a change in the status that is part of the out-of-band flow control. Then STATUS_MSG_CHANGE interrupt sets if there is a change in any bit of register 0x140 : TX Status Message Received.
    Bits: 15    LkTxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error. Each channel in the design has a flag that sets when an uncorrectable parity or ECC error has been seen. To clear the CNT_UNCORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits: 14    LkTxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error. Each channel in the design has a flag that sets when a correctable ECC error has been seen. To clear the CNT_CORR interrupt, these flags must be cleared via the stats access register (0x074) using the Clear ECC/Parity Error flags command.
    Bits:  1    LkTxIntFcCntFill(rw1c) - The out-of-band flow control error counter is half full or overflowed.
    Bits:  0    LkTxIntChanCntFill(rw1c) - One or more per channel statistics counters (TX_Bytes, TX_Packets, and/or TX_Bad_Packets) are half full or overflowed.
*/
#define NFP3800_NBI_MACX_ILK_LkTxInterrupt                   0x00000180
#define NFP3800_NBI_MACX_ILK_LkTxInterrupt2                  0x00000188
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoUnCorr BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoCorr BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoOver BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFifoUnder BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFcErr    BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntStatusMessageChange BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntCntUnCorr BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntCntCorr  BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntFcCntFill BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkTxInterrupt_LkTxIntChanCntFill BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptMask - Interlaken TX Interrupt Mask
  Register: LkTxInterruptMask2 - Interlaken TX Interrupt Mask Second
    Bits: 31    LkTxIntFifoUnCorrMask(rw) - Mask Interrupt.
    Bits: 30    LkTxIntFifoCorrMask(rw) - Mask Interrupt.
    Bits: 29    LkTxIntFifoOverMask(rw) - Mask Interrupt.
    Bits: 28    LkTxIntFifoUnderMask(rw) - Mask Interrupt.
    Bits: 17    LkTxIntFcErrMask(rw) - Mask Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeMask(rw) - Mask Interrupt.
    Bits: 15    LkTxIntCntUnCorrMask(rw) - Mask Interrupt.
    Bits: 14    LkTxIntCntCorrMask(rw) - Mask Interrupt.
    Bits:  1    LkTxIntFcCntFillMask(rw) - Mask Interrupt.
    Bits:  0    LkTxIntChanCntFillMask(rw) - Mask Interrupt.
*/
#define NFP3800_NBI_MACX_ILK_LkTxInterruptMask               0x00000184
#define NFP3800_NBI_MACX_ILK_LkTxInterruptMask2              0x0000018c
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoUnCorrMask BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoCorrMask BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoOverMask BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFifoUnderMask BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFcErrMask BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntStatusMessageChangeMask BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntCntUnCorrMask BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntCntCorrMask BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntFcCntFillMask BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptMask_LkTxIntChanCntFillMask BIT(0)
/*----------------------------------------------------------------
  Register: LkTxInterruptForce - Interlaken TX Interrupt Force
    Bits: 31    LkTxIntFifoUnCorrForce(rw) - Force Interrupt.
    Bits: 30    LkTxIntFifoCorrForce(rw) - Force Interrupt.
    Bits: 29    LkTxIntFifoOverForce(rw) - Force Interrupt.
    Bits: 28    LkTxIntFifoUnderForce(rw) - Force Interrupt.
    Bits: 17    LkTxIntFcErrForce(rw) - Force Interrupt.
    Bits: 16    LkTxIntStatusMessageChangeForce(rw) - Force Interrupt.
    Bits: 15    LkTxIntCntUnCorrForce(rw) - Force Interrupt.
    Bits: 14    LkTxIntCntCorrForce(rw) - Force Interrupt.
    Bits:  1    LkTxIntFcCntFillForce(rw) - Force Interrupt.
    Bits:  0    LkTxIntChanCntFillForce(rw) - Force Interrupt.
*/
#define NFP3800_NBI_MACX_ILK_LkTxInterruptForce              0x00000190
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoUnCorrForce BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoCorrForce BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoOverForce BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFifoUnderForce BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFcErrForce BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntStatusMessageChangeForce BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntCntUnCorrForce BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntCntCorrForce BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntFcCntFillForce BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkTxInterruptForce_LkTxIntChanCntFillForce BIT(0)
/*----------------------------------------------------------------
  Register: LkRxControl - Interlaken Mac RX Core Control
    Bits: 11    LkStatusMsgCont(rw) - When set to 1, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control on every calendar. When set to 0, and STATUS_MSG_EN is set to a one, the RX send the status messaging on the out of band flow control only when one of the enabled lanes identifies a problem. Note: STATUS_MSG_CONT is unused in the TX (0x018).
    Bits: 10    LkStatusMsgEn(rw) - Enable the optional status messaging on the out of band flow control.
    Bits:  7    LkDataOutKill(rw) - When set to 1, the serdes data is forced to all zeros. This is typically used in conjunction with tx_to_rx loopback on the data path which is enabled in registers 0x010, 0x020.
    Bits:  6    LkFcOutKill(rw) - When set to 1, o_tx_fcob is forced to all zeros, regardless of the out-of-band flow control received from the Interlaken Interface.
    Bits:  4    LkDispDis(rw) - When set to 1, the disparity portion of the 64/67 code is disabled.
    Bits:  3    LkCrc24Dis(rw) - When set to 1, the control word crc24 is disabled.
    Bits:  2    LkCrc32Dis(rw) - When set to 1, the per serdes lane crc32 is disabled.
    Bits:  1    LkUnalignXoffDis(rw) - When set to 0, if the receiver is not in the aligned state, XOFF will be sent on the flow control, if enabled. When set to 1, receiver alignment state does not affect flow control.
*/
#define NFP3800_NBI_MACX_ILK_LkRxControl                     0x00000218
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkStatusMsgCont   BIT(11)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkStatusMsgEn     BIT(10)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkDataOutKill     BIT(7)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkFcOutKill       BIT(6)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkDispDis         BIT(4)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkCrc24Dis        BIT(3)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkCrc32Dis        BIT(2)
#define   NFP3800_NBI_MACX_ILK_LkRxControl_LkUnalignXoffDis  BIT(1)
/*----------------------------------------------------------------
  Register: LkSerDesRxFifoConfig - Interlaken Mac RX Core SerDes/FC Fifo Config
    Bits: 27:24 LkFcRxFifoHwm(rw) - Interlaken FC RXFIFO HWM
    Bits: 19:16 LkFcRxFifoLwm(rw) - Interlaken FC RXFIFO LWM
    Bits: 11:8  LkSerDesRxFifoHwm(rw) - Interlaken SerDes RXFIFO HWM
    Bits:  3:0  LkSerDesRxFifoLwm(rw) - Interlaken SerDes RXFIFO LWM
*/
#define NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig            0x00000228
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoHwm(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoHwm_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoLwm(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkFcRxFifoLwm_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoHwm(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoHwm_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoLwm(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ILK_LkSerDesRxFifoConfig_LkSerDesRxFifoLwm_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: LkRxDebugObserve0 - Interlaken RX Debug observe data0
    Bits: 31:0  LkDebugRdata(ro) - The data that is currently on the debug outputs (perhaps after a few clock cycles of latency).
*/
#define NFP3800_NBI_MACX_ILK_LkRxDebugObserve0               0x00000310
#define   NFP3800_NBI_MACX_ILK_LkRxDebugObserve0_LkDebugRdata(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxDebugObserve0_LkDebugRdata_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: LkRxInterrupt - Interlaken RX Interrupt
  Register: LkRxInterrupt2 - Interlaken RX Interrupt Second
    Bits: 31    LkRxIntCtlBitErr(rw1c) - Control Word Bit Error. A control word looked like a valid synchronization or skip word, but bit [55:0] of the word did not match the expected value.
    Bits: 29    LkRxIntMfErr(rw1c) - For one or more of the enabled lanes, a valid synchronization word was not received at the metaframe period. SLE_RX_MF_ERR (0x3AC) must be cleared before MF_ERR will clear.
    Bits: 28    LkRxIntBadCtlErr(rw1c) - A control word was received that does not match one of the defined control word types. SLE_RX_BADCTL_ERR MMR (0x3B0) must be cleared before BADCTL_ERR bit[28] will clear.
    Bits: 27    LkRxIntScRamErr(rw1c) - For one or more enabled lanes, a scrambler state word did not match its expected value. SLE_RX_SCRAM_ERR (0x3B4) must be cleared before SCRAM_ERR will clear.
    Bits: 26    LkRxIntCrc32Err(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 25    LkRxIntCdrErr(rw1c) - For one or more enabled lanes, the i_rx_serdes_valid input is low. SLE_RX_CDR_ERR (0x3BC) must be cleared before CDR_ERR will clear.
    Bits: 24    LkRxIntWdSyncChange(rw1c) - For one or more enabled lanes, the 64b/67b synchronization has changed, either from out of sync to in sync or from in sync to out of sync. SLE_RX_WRD SYNC MMR (0x3C0) must be cleared before WRD_SYN_CHANGE bit[24] will clear. A flow diagram for achieving and maintaining 64B/67B word boundary lock is shown in figure 5-10 on page 25 of the Interlaken Protocol Definition. Once we get sync ( the middle64B/67B word lock state in the diagram) we need to get 16 out of 64 words with bad framing bits in order to go out of sync, the upper and lower values are set by 0x218 : Receive Control Register.
    Bits: 23    LkRxIntAlignChange(rw1c) - The alignment state has changed, either from out of alignment to aligned or from aligned to out of alignment.
    Bits: 22    LkRxIntAlignErr(rw1c) - An alignment error occurred (synchronization word not seen on all lanes at the same time).
    Bits: 21    LkRxIntBurstErr(rw1c) - A protocol error occurred in the datapath related to the burst delineation logic.
    Bits: 20    LkRxIntBminErr(rw1c) - A BurstMin violation was detected.
    Bits: 19    LkRxIntBmaxErr(rw1c) - A BurstMax violation was detected.
    Bits: 18    LkRxIntCrc24Err(rw1c) - A burst CRC24 error was detected.
    Bits: 17    LkRxIntFcErr(rw1c) - For one or more enabled lanes, a CRC32 error was reported. SLE_RX_CRC32_ERR (0x3B8) must be cleared before CRC32_ERR will clear.
    Bits: 16    LkRxIntStatusMessageChange(rw1c) - When this interrupt is set, it indicates that the diagnostics word's status message has changed. The status message can be seen in register 0x3C8 : Status Message Received.
    Bits: 15    LkRxIntCntUnCorr(rw1c) - One of the statistics counters had an uncorrectable parity or ECC error.
    Bits: 14    LkRxIntCntCorr(rw1c) - One of the statistics counters had a correctable ECC error.
    Bits: 13    LkRxIntBadCtlCntFill(rw1c) - The RX_Bad_Control_Error counter is over half full.
    Bits: 10    LkRxIntCrc32CntFill(rw1c) - One or more of the per lane RX_Lane_CRC_Error counters is over half full.
    Bits:  9    LkRxIntCdrCntFill(rw1c) - One or more of the per lane RX_CDR_Error counters is over half full.
    Bits:  8    LkRxIntWrdSyncCntFill(rw1c) - One or more of the per lane RX_Word_Sync_Error counters is over half full.
    Bits:  7    LkRxIntAlignFailCntFill(rw1c) - The RX_Alignment_Failure counter is over half full.
    Bits:  6    LkRxIntAliCntFill(rw1c) - The RX_Alignment Error counter is over half full.
    Bits:  5    LkRxIntBurstCntFill(rw1c) - The RX_Burst_Error counter is over half full.
    Bits:  4    LkRxIntBminCntFill(rw1c) - The RX_Burst Min error counter is over half full.
    Bits:  3    LkRxIntBmaxCntFill(rw1c) - The RX_Burst_Max_Error counter is over half full.
    Bits:  2    LkRxIntCrc24CntFill(rw1c) - The RX_CRC24_Error counter is over half full.
    Bits:  1    LkRxIntFcCntFill(rw1c) - The in band flow control error counter is over half full. Note, this error does not occur in Look-Aside mode.
    Bits:  0    LkRxIntChanCntFill(rw1c) - One or more per channel statistics counters (RX_Bytes, RX_Packets, and/or RX_Bad_Packets) are over half full.
*/
#define NFP3800_NBI_MACX_ILK_LkRxInterrupt                   0x00000380
#define NFP3800_NBI_MACX_ILK_LkRxInterrupt2                  0x00000388
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCtlBitErr BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntMfErr    BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBadCtlErr BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntScRamErr BIT(27)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc32Err BIT(26)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCdrErr   BIT(25)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntWdSyncChange BIT(24)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAlignChange BIT(23)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAlignErr BIT(22)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBurstErr BIT(21)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBminErr  BIT(20)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBmaxErr  BIT(19)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc24Err BIT(18)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntFcErr    BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntStatusMessageChange BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCntUnCorr BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCntCorr  BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBadCtlCntFill BIT(13)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc32CntFill BIT(10)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCdrCntFill BIT(9)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntWrdSyncCntFill BIT(8)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAlignFailCntFill BIT(7)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntAliCntFill BIT(6)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBurstCntFill BIT(5)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBminCntFill BIT(4)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntBmaxCntFill BIT(3)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntCrc24CntFill BIT(2)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntFcCntFill BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkRxInterrupt_LkRxIntChanCntFill BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptMask - Interlaken RX Interrupt Mask
  Register: LkRxInterruptMask2 - Interlaken RX Interrupt Mask Second
    Bits: 31    LkRxIntCtlBitErrMask(rw) - Interrupt Mask
    Bits: 29    LkRxIntMfErrMask(rw) - Interrupt Mask.
    Bits: 28    LkRxIntBadCtlErrMask(rw) - Interrupt Mask.
    Bits: 27    LkRxIntScRamErrMask(rw) - Interrupt Mask.
    Bits: 26    LkRxIntCrc32ErrMask(rw) - Interrupt Mask.
    Bits: 25    LkRxIntCdrErrMask(rw) - Interrupt Mask.
    Bits: 24    LkRxIntWdSyncChangeMask(rw) - Interrupt Mask.
    Bits: 23    LkRxIntAlignChangeMask(rw) - Interrupt Mask.
    Bits: 22    LkRxIntAlignErrMask(rw) - Interrupt Mask.
    Bits: 21    LkRxIntBurstErrMask(rw) - Interrupt Mask.
    Bits: 20    LkRxIntBminErrMask(rw) - Interrupt Mask.
    Bits: 19    LkRxIntBmaxErrMask(rw) - Interrupt Mask.
    Bits: 18    LkRxIntCrc24ErrMask(rw) - Interrupt Mask.
    Bits: 17    LkRxIntFcErrMask(rw) - Interrupt Mask.
    Bits: 16    LkRxIntStatusMessageChangeMask(rw) - Interrupt Mask.
    Bits: 15    LkRxIntCntUnCorrMask(rw) - Interrupt Mask.
    Bits: 14    LkRxIntCntCorrMask(rw) - Interrupt Mask.
    Bits: 13    LkRxIntBadCtlCntFillMask(rw) - Interrupt Mask.
    Bits: 10    LkRxIntCrc32CntFillMask(rw) - Interrupt Mask.
    Bits:  9    LkRxIntCdrCntFillMask(rw) - Interrupt Mask.
    Bits:  8    LkRxIntWrdSyncCntFillMask(rw) - Interrupt Mask.
    Bits:  7    LkRxIntAlignFailCntFillMask(rw) - Interrupt Mask.
    Bits:  6    LkRxIntAliCntFillMask(rw) - Interrupt Mask.
    Bits:  5    LkRxIntBurstCntFillMask(rw) - Interrupt Mask.
    Bits:  4    LkRxIntBminCntFillMask(rw) - Interrupt Mask.
    Bits:  3    LkRxIntBmaxCntFillMask(rw) - Interrupt Mask.
    Bits:  2    LkRxIntCrc24CntFillMask(rw) - Interrupt Mask.
    Bits:  1    LkRxIntFcCntFillMask(rw) - Interrupt Mask.
    Bits:  0    LkRxIntChanCntFillMask(rw) - Interrupt Mask.
*/
#define NFP3800_NBI_MACX_ILK_LkRxInterruptMask               0x00000384
#define NFP3800_NBI_MACX_ILK_LkRxInterruptMask2              0x0000038c
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCtlBitErrMask BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntMfErrMask BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBadCtlErrMask BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntScRamErrMask BIT(27)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc32ErrMask BIT(26)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCdrErrMask BIT(25)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntWdSyncChangeMask BIT(24)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAlignChangeMask BIT(23)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAlignErrMask BIT(22)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBurstErrMask BIT(21)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBminErrMask BIT(20)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBmaxErrMask BIT(19)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc24ErrMask BIT(18)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntFcErrMask BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntStatusMessageChangeMask BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCntUnCorrMask BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCntCorrMask BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBadCtlCntFillMask BIT(13)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc32CntFillMask BIT(10)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCdrCntFillMask BIT(9)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntWrdSyncCntFillMask BIT(8)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAlignFailCntFillMask BIT(7)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntAliCntFillMask BIT(6)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBurstCntFillMask BIT(5)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBminCntFillMask BIT(4)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntBmaxCntFillMask BIT(3)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntCrc24CntFillMask BIT(2)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntFcCntFillMask BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptMask_LkRxIntChanCntFillMask BIT(0)
/*----------------------------------------------------------------
  Register: LkRxInterruptForce - Interlaken RX Interrupt Force
    Bits: 31    LkRxIntCtlBitErrForce(rw) - Interrupt Force
    Bits: 29    LkRxIntMfErrForce(rw) - Interrupt Force.
    Bits: 28    LkRxIntBadCtlErrForce(rw) - Interrupt Force.
    Bits: 27    LkRxIntScRamErrForce(rw) - Interrupt Force.
    Bits: 26    LkRxIntCrc32ErrForce(rw) - Interrupt Force.
    Bits: 25    LkRxIntCdrErrForce(rw) - Interrupt Force.
    Bits: 24    LkRxIntWdSyncChangeForce(rw) - Interrupt Force.
    Bits: 23    LkRxIntAlignChangeForce(rw) - Interrupt Force.
    Bits: 22    LkRxIntAlignErrForce(rw) - Interrupt Force.
    Bits: 21    LkRxIntBurstErrForce(rw) - Interrupt Force.
    Bits: 20    LkRxIntBminErrForce(rw) - Interrupt Force.
    Bits: 19    LkRxIntBmaxErrForce(rw) - Interrupt Force.
    Bits: 18    LkRxIntCrc24ErrForce(rw) - Interrupt Force.
    Bits: 17    LkRxIntFcErrForce(rw) - Interrupt Force.
    Bits: 16    LkRxIntStatusMessageChangeForce(rw) - Interrupt Force.
    Bits: 15    LkRxIntCntUnCorrForce(rw) - Interrupt Force.
    Bits: 14    LkRxIntCntCorrForce(rw) - Interrupt Force.
    Bits: 13    LkRxIntBadCtlCntFillForce(rw) - Interrupt Force.
    Bits: 10    LkRxIntCrc32CntFillForce(rw) - Interrupt Force.
    Bits:  9    LkRxIntCdrCntFillForce(rw) - Interrupt Force.
    Bits:  8    LkRxIntWrdSyncCntFillForce(rw) - Interrupt Force.
    Bits:  7    LkRxIntAlignFailCntFillForce(rw) - Interrupt Force.
    Bits:  6    LkRxIntAliCntFillForce(rw) - Interrupt Force.
    Bits:  5    LkRxIntBurstCntFillForce(rw) - Interrupt Force.
    Bits:  4    LkRxIntBminCntFillForce(rw) - Interrupt Force.
    Bits:  3    LkRxIntBmaxCntFillForce(rw) - Interrupt Force.
    Bits:  2    LkRxIntCrc24CntFillForce(rw) - Interrupt Force.
    Bits:  1    LkRxIntFcCntFillForce(rw) - Interrupt Force.
    Bits:  0    LkRxIntChanCntFillForce(rw) - Interrupt Force.
*/
#define NFP3800_NBI_MACX_ILK_LkRxInterruptForce              0x00000390
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCtlBitErrForce BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntMfErrForce BIT(29)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBadCtlErrForce BIT(28)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntScRamErrForce BIT(27)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc32ErrForce BIT(26)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCdrErrForce BIT(25)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntWdSyncChangeForce BIT(24)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAlignChangeForce BIT(23)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAlignErrForce BIT(22)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBurstErrForce BIT(21)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBminErrForce BIT(20)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBmaxErrForce BIT(19)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc24ErrForce BIT(18)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntFcErrForce BIT(17)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntStatusMessageChangeForce BIT(16)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCntUnCorrForce BIT(15)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCntCorrForce BIT(14)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBadCtlCntFillForce BIT(13)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc32CntFillForce BIT(10)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCdrCntFillForce BIT(9)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntWrdSyncCntFillForce BIT(8)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAlignFailCntFillForce BIT(7)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntAliCntFillForce BIT(6)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBurstCntFillForce BIT(5)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBminCntFillForce BIT(4)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntBmaxCntFillForce BIT(3)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntCrc24CntFillForce BIT(2)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntFcCntFillForce BIT(1)
#define   NFP3800_NBI_MACX_ILK_LkRxInterruptForce_LkRxIntChanCntFillForce BIT(0)
/*----------------------------------------------------------------
  Register: LkRxMfError - Interlaken RX Metaframe Error
    Bits: 23:0  LkRxMfError(rw1c) - The MetaFrame Period Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxMfError                     0x000003ac
#define   NFP3800_NBI_MACX_ILK_LkRxMfError_LkRxMfError(_x)   (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxMfError_LkRxMfError_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxBadCtlError - Interlaken RX Bad control word error
    Bits: 23:0  LkRxBadCtlError(rw1c) - The Bad Control Word Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxBadCtlError                 0x000003b0
#define   NFP3800_NBI_MACX_ILK_LkRxBadCtlError_LkRxBadCtlError(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxBadCtlError_LkRxBadCtlError_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxScramError - Interlaken RX Scrambler error
    Bits: 23:0  LkRxScramError(rw1c) - The Scrambler State Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxScramError                  0x000003b4
#define   NFP3800_NBI_MACX_ILK_LkRxScramError_LkRxScramError(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxScramError_LkRxScramError_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32Error - Interlaken RX CRC32 error
    Bits: 23:0  LkRxCrc32Error(rw1c) - The CRC32 Error for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxCrc32Error                  0x000003b8
#define   NFP3800_NBI_MACX_ILK_LkRxCrc32Error_LkRxCrc32Error(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxCrc32Error_LkRxCrc32Error_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrError - Interlaken RX CDR error
    Bits: 23:0  LkRxCdrError(rw1c) - The Assumed CDR lost status for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxCdrError                    0x000003bc
#define   NFP3800_NBI_MACX_ILK_LkRxCdrError_LkRxCdrError(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxCdrError_LkRxCdrError_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncChange - Interlaken RX Word sync change
    Bits: 23:0  LkRxWrdSyncChange(rw1c) - The Word boundary lock status changed. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxWrdSyncChange               0x000003c0
#define   NFP3800_NBI_MACX_ILK_LkRxWrdSyncChange_LkRxWrdSyncChange(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxWrdSyncChange_LkRxWrdSyncChange_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxAlignStatus - Interlaken RX Alignment Status
    Bits: 23    LkRxAligned(ro) - Indicates that the interface is in alignment. This signal is also available as the o_rx_align output from both the sle_lake_rx_wrap and sle_interlaken_top modules. When this bit changes, the ALIGN_CHANGE bit gets set in the RX Interrupt Registers.
    Bits: 22    LkRxAlignErr(ro) - An invalid synchronization pattern has been found. The status bit is a one shot pulse so it will most likely not be seen on an MMR read.
*/
#define NFP3800_NBI_MACX_ILK_LkRxAlignStatus                 0x000003c4
#define   NFP3800_NBI_MACX_ILK_LkRxAlignStatus_LkRxAligned   BIT(23)
#define   NFP3800_NBI_MACX_ILK_LkRxAlignStatus_LkRxAlignErr  BIT(22)
/*----------------------------------------------------------------
  Register: LkRxStatusMessage - Interlaken RX Status Message
    Bits: 31    LkRxStatusMessageValidAll(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ALL enabled serdes lanes.
    Bits: 30    LkRxStatusMessageValidAny(ro) - RX (status message from diagnostic words) : The status message was extracted from diagnostic words on ANY enabled serdes lanes.
    Bits: 26    LkRxStatusMessageSync(ro) - Indicates if we are in sync, based on the SL and SIF bits for the enabled serdes lanes.
    Bits: 25    LkRxStatusMessageSifAll(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ALL enabled lanes.
    Bits: 24    LkRxStatusMessageSifAny(ro) - RX (status message from diagnostic words) : Bit 0 of the status message was a 1 from ANY enabled lanes.
    Bits: 23:0  LkRxStatusMessageLanes(ro) - The status message received for the lanes. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxStatusMessage               0x000003c8
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageValidAll BIT(31)
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageValidAny BIT(30)
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageSync BIT(26)
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageSifAll BIT(25)
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageSifAny BIT(24)
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageLanes(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxStatusMessage_LkRxStatusMessageLanes_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSync - Interlaken RX Word Sync
    Bits: 23:0  LkRxWrdSync(ro) - The Word boundary lock status. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxWrdSync                     0x000003cc
#define   NFP3800_NBI_MACX_ILK_LkRxWrdSync_LkRxWrdSync(_x)   (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxWrdSync_LkRxWrdSync_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCrc32CntFill - Interlaken RX CRC32 err counters half full
    Bits: 23:0  LkRxCrc32CntFill(ro) - The half full status for the RX_Lane_CRC_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxCrc32CntFill                0x000003d8
#define   NFP3800_NBI_MACX_ILK_LkRxCrc32CntFill_LkRxCrc32CntFill(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxCrc32CntFill_LkRxCrc32CntFill_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxCdrLostCntFill - Interlaken RX CDR lost err counters half full
    Bits: 23:0  LkRxCdrLostCntFill(ro) - The half full status for the RX_CDR_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxCdrLostCntFill              0x000003dc
#define   NFP3800_NBI_MACX_ILK_LkRxCdrLostCntFill_LkRxCdrLostCntFill(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxCdrLostCntFill_LkRxCdrLostCntFill_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: LkRxWrdSyncCntFill - Interlaken RX word sync err counters half full
    Bits: 23:0  LkRxWrdSyncCntFill(ro) - The half full status of the RX_Word_Sync_Error counters. Bit [0] for lane 0, etc.
*/
#define NFP3800_NBI_MACX_ILK_LkRxWrdSyncCntFill              0x000003e0
#define   NFP3800_NBI_MACX_ILK_LkRxWrdSyncCntFill_LkRxWrdSyncCntFill(_x) (((_x) & 0xffffff) << 0)
#define   NFP3800_NBI_MACX_ILK_LkRxWrdSyncCntFill_LkRxWrdSyncCntFill_of(_x) (((_x) >> 0) & 0xffffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsCtl1 - PCS Control.
    Bits: 15    EthPcsReset(rwc) - 1=PCS reset, 0=normal; Self clearing.
    Bits: 14    EthPcsLoopback(rw) - 1=Enable loopback, 0=disable loopback.
    Bits: 13    EthSpeedSelection13(ro) - Always 1.
    Bits: 11    EthLowPower(rw) - 0=normal operation (Always set to 0).
    Bits:  6    EthSpeedSelection6(ro) - Always 1.
    Bits:  5:2  EthSpeedSel(ro) - 0101=25G; 0011=40G; 0000=10G. Read value depends on currently active configuration (see PCS_MODE or pins).
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1(_x) (0x00000000 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsReset BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthPcsLoopback BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthSpeedSelection13 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthLowPower BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthSpeedSelection6 BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthSpeedSel(_x) (((_x) & 0xf) << 2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl1_EthSpeedSel_of(_x) (((_x) >> 2) & 0xf)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsStatus1 - PCS Status.
    Bits: 11    EthTxLpi(ro) - 1: transmit is or was in LPI state; 0: normal operation; Latching high.
    Bits: 10    EthRxLpi(ro) - 1: receive is or was in LPI state; 0: normal operation; Latching high.
    Bits:  9    EthTxLpiActive(ro) - 1: transmit is currently in LPI state; 0: normal operation.
    Bits:  8    EthRxLpiActive(ro) - 1: receive is currently in LPI state; 0: normal operation.
    Bits:  7    EthFault(ro) - When 1, indicates a fault condition idetected; When '0', indicates that no fault condition is detected.
    Bits:  2    EthPcsReceiveLink(ro) - When 1, indicates PCS receive link up; When '0', indicates PCS receive link is or was down (latching low).
    Bits:  1    EthLowPowerAble(ro) - Set to 1 to indicate that the PCS implements a low power mode.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1(_x) (0x00000004 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthTxLpi BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthRxLpi BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthTxLpiActive BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthRxLpiActive BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthFault BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthPcsReceiveLink BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus1_EthLowPowerAble BIT(1)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDevId0 - PHY Identifier constant from package parameter PHY_IDENTIFIER bits 15:4. Bits 3:0 always 0.
    Bits: 15:0  EthDevId(ro) - Bits 15:0 of Device Identifier defined by parameter PHY_IDENTIFIER in PCS package file.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId0(_x) (0x00000008 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId0_EthDevId(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId0_EthDevId_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDevId1 - PHY Identifier constant from package parameter PHY_IDENTIFIER bits 31:16.
    Bits: 15:0  EthDevId(ro) - Bits 31:16 of Device Identifier defined by parameter PHY_IDENTIFIER in PCS package file.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId1(_x) (0x0000000c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId1_EthDevId(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDevId1_EthDevId_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsSpeedAbility - PCS supported speeds (values as defined by standard only, no proprietary speeds).
    Bits:  5    EthSpeed50GCapable(ro) - When 1, this PCS is 50G capable. N/A
    Bits:  4    EthSpeed25GCapable(ro) - When 1, this PCS is 25G capable.
    Bits:  3    EthSpeed100GCapable(ro) - When 1, this PCS is 100G capable.
    Bits:  2    EthSpeed40GCapable(ro) - When 1, this PCS is 40G capable.
    Bits:  1    EthSpeed10PassTs2BaseTlCapable(ro) - When 1, this PCS is 10PASS-TS/2Base-TL capable.
    Bits:  0    EthSpeed10GCapable(ro) - When 1, this PCS is 10Geth capable.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility(_x) (0x00000010 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthSpeed50GCapable BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthSpeed25GCapable BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthSpeed100GCapable BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthSpeed40GCapable BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthSpeed10PassTs2BaseTlCapable BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsSpeedAbility_EthSpeed10GCapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDeviInPkg1 - Constant indicating PCS presence.
    Bits:  6    EthTcPresent(ro) - TC present when 1.
    Bits:  5    EthDteXsPresent(ro) - DTE XS present when 1.
    Bits:  4    EthPhyXsPresent(ro) - PHY XS present when 1.
    Bits:  3    EthPCSPresent(ro) - PCS present when 1.
    Bits:  2    EthWisPresent(ro) - WIS present when 1.
    Bits:  1    EthPmdPmaPresent(ro) - PMD/PMA present when 1.
    Bits:  0    EthClause22Present(ro) - Clause 22 registers present when 1.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1(_x) (0x00000014 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthTcPresent BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthDteXsPresent BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthPhyXsPresent BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthPCSPresent BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthWisPresent BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthPmdPmaPresent BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg1_EthClause22Present BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsDeviInPkg2 - Vendor specific presence.
    Bits: 15    EthVndrDev2Present(ro) - Vendor specific device 2 present
    Bits: 14    EthVndrDev1Present(ro) - Vendor specific device 1 present
    Bits: 13    EthClause22Present(ro) - Clause 22 extension present
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg2(_x) (0x00000018 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg2_EthVndrDev2Present BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg2_EthVndrDev1Present BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsDeviInPkg2_EthClause22Present BIT(13)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsCtl2 - Operating speed indication/control.
    Bits:  2:0  EthPcsType(ro) - Not writeable; Reflects PCS mode from PCS_MODE or external pin configurations if possible.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl2(_x) (0x0000001c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl2_EthPcsType(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsCtl2_EthPcsType_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsStatus2 - Fault status; Device capabilities
    Bits: 15:14 EthDevPresent(ro) - Device present. When bits are 10 = device responding at this address.
    Bits: 11    EthTransmitFault(ro) - Transmit fault. 1=Fault condition on transmit path. Latched high
    Bits: 10    EthReceiveFault(ro) - Receive fault. 1=Fault condition on receive path. Latched high
    Bits:  8    Eth50GBaseRCapable(ro) - When 1, this PCS is 50GBase-R capable. N/A.
    Bits:  7    Eth25GBaseRCapable(ro) - When 1, this PCS is 25GBase-R capable. N/A.
    Bits:  5    Eth100GBaseRCapable(ro) - When 1, this PCS is 100GBase-R capable.
    Bits:  4    Eth40GBaseRCapable(ro) - When 1, this PCS is 40GBase-R capable.
    Bits:  3    Eth10GBaseTCapable(ro) - When 1, this PCS is 10GBase-T capable.
    Bits:  2    Eth10GBaseWCapable(ro) - When 1, this PCS is 10GBase-W capable.
    Bits:  1    Eth10GBaseXCapable(ro) - When 1, this PCS is 10GBase-X capable.
    Bits:  0    Eth10GBaseRCapable(ro) - When 1, this PCS is 10GBase-R capable.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2(_x) (0x00000020 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthDevPresent(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthDevPresent_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthTransmitFault BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_EthReceiveFault BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth50GBaseRCapable BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth25GBaseRCapable BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth100GBaseRCapable BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth40GBaseRCapable BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth10GBaseTCapable BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth10GBaseWCapable BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth10GBaseXCapable BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsStatus2_Eth10GBaseRCapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsPkgId0 - Constant from package parameter PACK_IDENTIFIER bits 15:0.
    Bits: 15:0  EthIdentifier(ro) - Constant from package parameter PACK_IDENTIFIER bits 15:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsPkgId0(_x) (0x00000038 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsPkgId0_EthIdentifier(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsPkgId0_EthIdentifier_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsPkgId1 - Constant from package parameter PACK_IDENTIFIER bits 31:16.
    Bits: 15:0  EthIdentifier(ro) - Constant from package parameter PACK_IDENTIFIER bits 31:16.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsPkgId1(_x) (0x0000003c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsPkgId1_EthIdentifier(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsPkgId1_EthIdentifier_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsEeeCtrlCapability - EEE Control and Capabilities (exists only if EEE is available).
    Bits: 11    EthEee25gbaseRsleep(ro) - When 1, EEE deep sleep is supported for 25GBASE-R.
    Bits: 10    EthEee25gbaseRawake(ro) - When 1, EEE fast wake is supported for 25GBASE-R.
    Bits:  9    EthEee40gbaseRsleep(ro) - When 1, EEE deep sleep is supported for 40GBASE-R.
    Bits:  8    EthEee40gbaseRawake(ro) - When 1, EEE fast wake is supported for 40GBASE-R.
    Bits:  6    EthEee10gbaseKr(ro) - When 1, EEE is supported for 10GBASE-KR.
    Bits:  0    EthLpiFw(ro) - Mode for selecting select 40G EEE mode; 1 = Fast wake mode; 0 = Deep sleep for LPI function.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability(_x) (0x00000050 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability_EthEee25gbaseRsleep BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability_EthEee25gbaseRawake BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability_EthEee40gbaseRsleep BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability_EthEee40gbaseRawake BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability_EthEee10gbaseKr BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsEeeCtrlCapability_EthLpiFw BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsWakeErrCounter - EEE Wake error counter (exists only if EEE is available); Clears on read.
    Bits: 15:0  EthCounter(ro) - Increments each time the LPI enters the RX_WTF state indicating a wake time fault; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsWakeErrCounter(_x) (0x00000058 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsWakeErrCounter_EthCounter(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsWakeErrCounter_EthCounter_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRStatus1 - Link Status Information.
    Bits: 12    EthRcvLinkStatus(ro) - Receive link status. 1=Link up; 0=link down.
    Bits:  1    EthHighBer(ro) - 1=PCS reporting a high BER.
    Bits:  0    EthBlockLocked(ro) - 1=PCS locked to received blocks.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1(_x) (0x00000080 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthRcvLinkStatus BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthHighBer BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus1_EthBlockLocked BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRStatus2 - Link Status latches and error counters.
    Bits: 15    EthBlockLocked(ro) - Block Lock; Latched low.
    Bits: 14    EthHighBer(ro) - BER flag; Latched high.
    Bits: 13:8  EthBerCounter(ro) - BER counter; None roll-over.
    Bits:  7:0  EthErroredCnt(ro) - Errored blocks counter; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2(_x) (0x00000084 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthBlockLocked BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthHighBer BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthBerCounter(_x) (((_x) & 0x3f) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthBerCounter_of(_x) (((_x) >> 8) & 0x3f)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthErroredCnt(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRStatus2_EthErroredCnt_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA0 - 10G Base-R Test Pattern TestPatSeedData A bits 15:0.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 15:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA0(_x) (0x00000088 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA0_EthTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA0_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA1 - 10G Base-R Test Pattern TestPatSeedData A bits 31:16.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 31:16.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA1(_x) (0x0000008c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA1_EthTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA1_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA2 - 10G Base-R Test Pattern TestPatSeedData A bits 47:32.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 47:32.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA2(_x) (0x00000090 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA2_EthTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA2_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedA3 - 10G Base-R Test Pattern TestPatSeedData A bits 57:48.
    Bits:  9:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData A: Bits 57:48.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA3(_x) (0x00000094 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA3_EthTestPatSeedData(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedA3_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB0 - 10G Base-R Test Pattern TestPatSeedData B bits 15:0.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 15:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB0(_x) (0x00000098 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB0_EthTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB0_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB1 - 10G Base-R Test Pattern TestPatSeedData B bits 31:16.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 31:16.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB1(_x) (0x0000009c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB1_EthTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB1_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB2 - 10G Base-R Test Pattern TestPatSeedData B bits 47:32.
    Bits: 15:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 47:32.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB2(_x) (0x000000a0 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB2_EthTestPatSeedData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB2_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsTestPatSeedB3 - 10G Base-R Test Pattern TestPatSeedData B bits 57:48.
    Bits:  9:0  EthTestPatSeedData(ro) - 10GBase-R Test Pattern TestPatSeedData B: Bits 57:48.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB3(_x) (0x000000a4 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB3_EthTestPatSeedData(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsTestPatSeedB3_EthTestPatSeedData_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRTestCtl - Test Pattern Generator and Checker controls.
    Bits:  7    EthSelectRandom(rw) - Select Random Idle test pattern (40G); Overrides bits 1:0 when set.
    Bits:  3    EthTransmitTestPatEn(rw) - Transmit test-pattern enable.
    Bits:  2    EthReceiveTestPatEn(rw) - Receive test-pattern enable.
    Bits:  1    EthSelectSquare(rw) - Select Square Wave (1) or Pseudo Random (0) test pattern; 10G only.
    Bits:  0    EthDataPatSel(rw) - Data Pattern Select: 1=all Zero, 0=2x Local Fault; 10G only.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl(_x) (0x000000a8 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthSelectRandom BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthTransmitTestPatEn BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthReceiveTestPatEn BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthSelectSquare BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestCtl_EthDataPatSel BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBaseRTestErrCnt - Test Pattern Error Counter; Clears on read; None roll-over.
    Bits: 15:0  EthCounter(ro) - Test pattern error counter; Clears on read; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestErrCnt(_x) (0x000000ac + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestErrCnt_EthCounter(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBaseRTestErrCnt_EthCounter_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBerHiOrderCnt - BER High Order Counter of BER bits 21:6; None roll-over.
    Bits: 15:0  EthBerCounter(ro) - Bits 21:6 of BER counter; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBerHiOrderCnt(_x) (0x000000b0 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBerHiOrderCnt_EthBerCounter(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBerHiOrderCnt_EthBerCounter_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsErrBlkHiOrderCnt - Error Blocks High Order Counter bits 21:8; None roll-over.
    Bits: 15    EthHiOrderCntPresent(ro) - High order counter present; Always 1.
    Bits: 13:0  EthErrBlkHiOrderCnt(ro) - Bits 21:8 of Error Blocks counter; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt(_x) (0x000000b4 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt_EthHiOrderCntPresent BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt_EthErrBlkHiOrderCnt(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsErrBlkHiOrderCnt_EthErrBlkHiOrderCnt_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsMultilaneAlignStat1 - Lane Alignment Status Bits and Block Lock.
    Bits: 12    EthLaneAlignmentStatus(ro) - Lane alignment status; 1=All Receive lanes locked and aligned.
    Bits:  3    EthLane3BlockLock(ro) - Lane 3 block lock.
    Bits:  2    EthLane2BlockLock(ro) - Lane 2 block lock.
    Bits:  1    EthLane1BlockLock(ro) - Lane 1 block lock.
    Bits:  0    EthLane0BlockLock(ro) - Lane 0 block lock.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat1(_x) (0x000000c8 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat1_EthLaneAlignmentStatus BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat1_EthLane3BlockLock BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat1_EthLane2BlockLock BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat1_EthLane1BlockLock BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat1_EthLane0BlockLock BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsMultilaneAlignStat3 - Lane Alignment Marker Lock Status bits.
    Bits:  3    EthLane3MarkerLock(ro) - Lane 3 alignment marker lock
    Bits:  2    EthLane2MarkerLock(ro) - Lane 2 alignment marker lock
    Bits:  1    EthLane1MarkerLock(ro) - Lane 1 alignment marker lock
    Bits:  0    EthLane0MarkerLock(ro) - Lane 0 alignment marker lock
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat3(_x) (0x000000d0 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat3_EthLane3MarkerLock BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat3_EthLane2MarkerLock BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat3_EthLane1MarkerLock BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsMultilaneAlignStat3_EthLane0MarkerLock BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane0 - BIP Error Counter Lane 0; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 0; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane0(_x) (0x00000320 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane0_EthBipErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane0_EthBipErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane1 - BIP Error Counter Lane 1; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 1; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane1(_x) (0x00000324 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane1_EthBipErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane1_EthBipErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane2 - BIP Error Counter Lane 2; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 2; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane2(_x) (0x00000328 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane2_EthBipErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane2_EthBipErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsBipErrCntLane3 - BIP Error Counter Lane 3; Clears on read; None roll-over.
    Bits: 15:0  EthBipErrCnt(ro) - BIP error counter lane 3; None roll-over.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane3(_x) (0x0000032c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane3_EthBipErrCnt(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsBipErrCntLane3_EthBipErrCnt_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane0Mapping - Lane Channel 0 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 0 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane0Mapping(_x) (0x00000640 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane0Mapping_EthLaneMap(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane0Mapping_EthLaneMap_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane1Mapping - Lane Channel 1 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 1 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane1Mapping(_x) (0x00000644 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane1Mapping_EthLaneMap(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane1Mapping_EthLaneMap_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane2Mapping - Lane Channel 2 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 2 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane2Mapping(_x) (0x00000648 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane2Mapping_EthLaneMap(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane2Mapping_EthLaneMap_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthChPcsSeg[10]_EthChPcsLane3Mapping - Lane Channel 3 mapping bits 1:0.
    Bits:  1:0  EthLaneMap(ro) - Lane 3 mapping bits 1:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane3Mapping(_x) (0x0000064c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane3Mapping_EthLaneMap(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsSeg_EthChPcsLane3Mapping_EthLaneMap_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRevision - Package defined constants
    Bits: 31:16 EthCustRev(ro) - Programmable Customer Revision from package parameter CUST_REVISION
    Bits: 15:8  EthCoreVer(ro) - 8-bit value from package parameter CORE_VERSION
    Bits:  7:0  EthCoreRev(ro) - 8-bit value from package parameter CORE_REVISION
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision(_x)       (0x00005000 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCustRev(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCustRev_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreVer(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreVer_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreRev(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRevision_EthCoreRev_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthScratch - General Purpose
    Bits: 31:0  EthScratch(rw) - The Scratch Register provides a memory location to test the register access
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthScratch(_x)        (0x00005004 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthScratch_EthScratch(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthScratch_EthScratch_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthCmdConfig - Control and Configuration
    Bits: 31    EthMacCcRsv31(ro) - reserved
    Bits: 30    EthShortPreamble(ro) - reserved; write 0 always
    Bits: 29    EthMacCcRsv29(ro) - reserved
    Bits: 28    EthMacCcRsv28(ro) - reserved
    Bits: 27    EthDisableFltHdl(rw) - Disable RS fault handling. When set to '0' (default), the MAC automatically inserts remote faults and idles in egress direction on detection of local faults and remote faults, respectively, on ingress direction. When set to '1', this feature is disabled.
    Bits: 26    EthTxFifoReset(rwc) - Self-Clearing TX FIFO reset command. May not be supported in all Core variants
    Bits: 25    EthMacCcRsv25(rw) - reserved
    Bits: 24    EthRegLowPRxEmpty(rw) - Mask toplevel pin reg_lowp with RX FIFO empty.
    Bits: 23    EthTxLowpEna(rw) - Instruct RS Layer to transmit LPI.
    Bits: 22    EthTxFlush(rw) - Egress flush enable.
    Bits: 21    EthRxSfdAny(rw) - Disable check for SFD (0xd5) and accept frame with any character.
    Bits: 20    EthPausePfcComp(rw) - Link Pause compatible with PFC mode. Pause is only indicated but does not stop TX.
    Bits: 19    EthPfcMode(rw) - Priority Flow Control Mode enable. If set to 1, the Core generates and processes PFC control frames according to the Priority Flow Control Interface signals. If set to 0 (Reset Value), the Core operates in legacy Pause Frame mode and generates and processes standard Pause Frames.
    Bits: 18    EthRsColCntExt(rw) - reserved
    Bits: 17    EthNoLgthCheck(rw) - Disable Payload Length Check. Not supported; write 0 always.
    Bits: 16    EthSendIdle(rw) - Force Idle Generation. If set to '1', the MAC permanently sends XLGMII Idle sequences even when faults are received.
    Bits: 15    EthPhyTxEna(rw) - Controls toplevel pin phy_txena. No internal function
    Bits: 14    EthRxErrDiscard(rw) - Enable Receive Errored Frame Discard. Use only with RX FIFO Store and Forward. May not be supported by all Core variants.
    Bits: 13    EthCmdFrameEna(rw) - Enable Reception of all Control Frames. If set to '1', all control frames are accepted. If set to '0', only Pause frames are accepted and all other command frames are rejected.
    Bits: 12    EthSwReset(rwc) - Self-Clearing Software Reset. When written with '1', all Statistics Counters are reset to 0.
    Bits: 11    EthTxPadEn(rw) - reserved, 0 always. The MAC never appends padding octets; the user application must provide frames of correct minimum size.
    Bits: 10    EthLoopBackEn(rw) - Enable PHY Interface loopback. If set to '1', the signal loop_ena is set to '1'. If set to '0' (Reset value), the signal loop_ena is set to '0'.
    Bits:  9    EthTxAddrIns(rw) - Set Source MAC Address on Transmit. If set to '1', the MAC overwrites the source MAC address received from the client interface with the MAC address programmed in registers MacAddr0 and MacAddr1 . If set to '0' (Reset value), the source MAC address from the client interface is transmitted unmodified to the line.
    Bits:  8    EthPauseIgnore(rw) - Ignore received Pause frame quanta. If set to '1', received pause frames are ignored by the MAC. If set to '0' (Reset value), the transmit process is stopped for the amount of time specified in the pause quanta received within a pause frame.
    Bits:  7    EthPauseFwd(rw) - Terminate / Forward Pause Frames. If set to '1', pause frames are forwarded to the user application. If set to '0' (Reset value), pause frames are terminated and discarded within the MAC.
    Bits:  6    EthCrcFwd(rw) - Terminate / Forward Received CRC. If set to '1', the CRC field of received frames is forwarded with the frame to the user application. If set to '0' (Reset value), the CRC field is stripped from the frame. Note - If padding (Bit PadEn set to '1') is enabled, CrcFwd is ignored.
    Bits:  5    EthPadEn(rw) - reserved, write 0 always. (MAC never removes padding)
    Bits:  4    EthPromisEn(rw) - Enable MAC Promiscuous Operation. If set to '1', all frames are received without any MAC address filtering. If set to '0' (Reset value), Unicast frames with a destination address not matching the Core MAC address (programmed in registers MacAddr0 and MacAddr1) are rejected.
    Bits:  3    EthMacCcRsv3(rw) - reserved
    Bits:  2    EthMacCcRsv2(ro) - reserved
    Bits:  1    EthRxEna(rw) - MAC Receive Path Enable. Should be set to '1' to enable the MAC receive path, should be set to '0' (Reset value) to disable the MAC receive path.
    Bits:  0    EthTxEna(rw) - MAC Transmit Path Enable. Should be set to '1' to enable the MAC transmit path, should be set to '0' (Reset value) to disable the MAC transmit path.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig(_x)      (0x00005008 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthMacCcRsv31 BIT(31)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthShortPreamble BIT(30)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthMacCcRsv29 BIT(29)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthMacCcRsv28 BIT(28)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthDisableFltHdl BIT(27)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxFifoReset BIT(26)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthMacCcRsv25 BIT(25)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRegLowPRxEmpty BIT(24)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxLowpEna BIT(23)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxFlush BIT(22)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRxSfdAny BIT(21)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPausePfcComp BIT(20)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPfcMode BIT(19)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRsColCntExt BIT(18)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthNoLgthCheck BIT(17)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthSendIdle BIT(16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPhyTxEna BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRxErrDiscard BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthCmdFrameEna BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthSwReset BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxPadEn BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthLoopBackEn BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxAddrIns BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPauseIgnore BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPauseFwd BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthCrcFwd BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPadEn BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthPromisEn BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthMacCcRsv3 BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthMacCcRsv2 BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthRxEna BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCmdConfig_EthTxEna BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMacAddr0 - First 4 bytes of MAC address
    Bits: 31:0  EthMacAddr0(rw) - First 4 bytes of the MAC Address. First byte is 7:0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthMacAddr0(_x)       (0x0000500c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMacAddr0_EthMacAddr0(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMacAddr0_EthMacAddr0_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMacAddr1 - Last 2 bytes of MAC address
    Bits: 15:0  EthMacAddr1(rw) - Last 2 bytes: 5th is 7:0, 6th is 15:8
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthMacAddr1(_x)       (0x00005010 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMacAddr1_EthMacAddr1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMacAddr1_EthMacAddr1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthFrmLength - Maximum Frame Size
    Bits: 31:16 EthTxMtu(rw) - Optional maximum frame size setting for transmit statistics use if it should be different from receive statistics. When set to 0 the FrmLength value is used (i.e. statistics symmetric for TX and RX).
    Bits: 15:0  EthFrmLength(rw) - Maximum Frame Size
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthFrmLength(_x)      (0x00005014 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthFrmLength_EthTxMtu(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthFrmLength_EthTxMtu_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthFrmLength_EthFrmLength(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthFrmLength_EthFrmLength_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRxFifoSections - RX FIFO thresholds
    Bits: 31:16 EthRxSectionEmptyWm(rw) - RX section empty threshold
    Bits: 15:0  EthRxSectionAvailWm(rw) - RX section avail. threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections(_x) (0x0000501c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionEmptyWm(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionEmptyWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionAvailWm(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoSections_EthRxSectionAvailWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTxFifoSections - TX FIFO thresholds
    Bits: 31:16 EthTxSectionEmptyWm(rw) - TX section empty threshold
    Bits: 15:0  EthTxSectionAvailWm(rw) - TX section avail. threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections(_x) (0x00005020 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionEmptyWm(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionEmptyWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionAvailWm(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoSections_EthTxSectionAvailWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRxFifoAlmostFE - Not configurable
    Bits: 31:16 EthRxFifoAlmostFullWm(ro) - RX FIFO almost full threshold
    Bits: 15:0  EthRxFifoAlmostEmptyWm(ro) - RX FIFO almost empty threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE(_x) (0x00005024 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostFullWm(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostFullWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostEmptyWm(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxFifoAlmostFE_EthRxFifoAlmostEmptyWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTxFifoAlmostFE - Not configurable
    Bits: 31:16 EthTxFifoAlmostFullWm(ro) - TX FIFO almost full threshold
    Bits: 15:0  EthTxFifoAlmostEmptyWm(ro) - TX FIFO almost empty threshold
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE(_x) (0x00005028 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostFullWm(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostFullWm_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostEmptyWm(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxFifoAlmostFE_EthTxFifoAlmostEmptyWm_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthHashTableLoad - optional: Hash Table programming
    Bits:  8    EthHashTableMcEn(wo) - enables (1) or disables (0) multicast frame reception for the entry.
    Bits:  4:0  EthHashTableAddr(wo) - 0 specify the hash table address (code)
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad(_x)  (0x0000502c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad_EthHashTableMcEn BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad_EthHashTableAddr(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthHashTableLoad_EthHashTableAddr_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioCfgStatus - MDIO Configuration and Status
    Bits: 15:7  EthMdioClockDivisor(ro) - MDIO clock divisor; A value of 5 to 511. The frequency is reg_clk/(2*divisor+1). The reset default is defined by the synthesis package setting MDIO_CLK_DIV. Setting the divisor to 0 disables MDC.
    Bits:  6    EthMdioClause45(ro) - MDIO transaction use Clause 45 format (1) or Clause 22 format (0).
    Bits:  5    EthMdioDisablePreamble(ro) - MDIO transaction preamble disable. Shortens transaction but is non-standard.
    Bits:  4:2  EthMdioHoldTimeSetting(ro) - MDIO hold time setting (reg_clk cycles).
    Bits:  1    EthMdioReadError(ro) - MDIO read error. If set, the last read transaction had no response from a PHY and the data read could be invalid. This can happen, if the PHY address does not match any PHY that is available on the MDIO bus.
    Bits:  0    EthMdioBusy(ro) - MDIO busy. If set, a MDIO transaction is currently ongoing. If cleared, the application can access the other registers.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus(_x)  (0x00005030 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioClockDivisor(_x) (((_x) & 0x1ff) << 7)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioClockDivisor_of(_x) (((_x) >> 7) & 0x1ff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioClause45 BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioDisablePreamble BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioHoldTimeSetting(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioHoldTimeSetting_of(_x) (((_x) >> 2) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioReadError BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCfgStatus_EthMdioBusy BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioCommand - MDIO Command (PHY and Port Address)
    Bits: 15    EthNormalReadTransaction(wo) - If written with 1, a normal read transaction is initiated.
    Bits: 14    EthReadAddressPostIncrement(wo) - If written with 1, a read with address post-increment will be performed. Post-increment will be performed in the PHY internal address register.
    Bits:  9:5  EthPortAddress(wo) - Port Address
    Bits:  4:0  EthDeviceAddress(wo) - Device Address
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand(_x)    (0x00005034 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand_EthNormalReadTransaction BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand_EthReadAddressPostIncrement BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand_EthPortAddress(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand_EthPortAddress_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand_EthDeviceAddress(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioCommand_EthDeviceAddress_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioData - MDIO Data to write and last Data read
    Bits: 15:0  EthMdioData(rw) - 16-bit data word. When written- Initiates a write transaction to the PHY. The MdioCommand register must have been initialized. The busy status bit will be set immediately and cleared when the write transaction has finished. When read - Returns the data read from the PHY register after a read transaction has been completed (initiated by writing a 1 to Bit 15 or Bit 14 of the MdioCommand register).
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioData(_x)       (0x00005038 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioData_EthMdioData(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioData_EthMdioData_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthMdioRegaddr - MDIO Register Address. Address of register within the PHY device to read from or write to. After writing this register, an address-write transaction will be initiated to set the PHY internal address register to the value given.
    Bits: 15:0  EthMdioRegaddr(wo) - The MdioCommand register must have been initialized before the first write to this register.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioRegaddr(_x)    (0x0000503c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioRegaddr_EthMdioRegaddr(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthMdioRegaddr_EthMdioRegaddr_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthStatus - General Purpose Status
    Bits:  8    EthTxIsIdle(ro) - TX MAC datapath (statemachine) is idle
    Bits:  7    EthRxLinkIntFault(ro) - Special Link Interruption Fault Sequence detected in receive
    Bits:  6    EthRxEmpty(ro) - RX FIFO is empty
    Bits:  5    EthTxEmpty(ro) - TX FIFO is empty
    Bits:  4    EthRxLowP(ro) - Receiving Low Power Idle (LPI)
    Bits:  3    EthTsAvail(w1c) - Transmit Timestamp Available. Indicates that the timestamp of the last transmitted 1588 event frame is available in the register Timestamp. To clear TsAvail, the bit must be written with a '1'.
    Bits:  2    EthPhyLos(ro) - PHY indicates loss-of-signal. Represents value of pin 'phy_los'.
    Bits:  1    EthRxRemFault(ro) - Remote Fault Status. Set to '1' when the MAC detects Rx Remote Fault Sequences on the CGMII receive interface
    Bits:  0    EthRxLocFault(ro) - Local Fault Status. Set to '1' when the MAC detects Rx Local Fault Sequences on the CGMII receive interface.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus(_x)         (0x00005040 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthTxIsIdle BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxLinkIntFault BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxEmpty BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthTxEmpty BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxLowP BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthTsAvail BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthPhyLos BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxRemFault BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthStatus_EthRxLocFault BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTxIpgLength - TX InterPacketGap configuration
    Bits: 31:16 EthCompensation(rw) - Compensation for PCS inserted markers. Depending on PCS type a value of 16383 (40G) or 20479 (25/50G) must be set.
    Bits:  6:0  EthTxIpgLength(rw) - Number of octets in steps of 4 (XGMII) or 8 (XLGMII). Minimum 8. Value 12 should be set for compliant operation.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength(_x)    (0x00005044 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength_EthCompensation(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength_EthCompensation_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength_EthTxIpgLength(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTxIpgLength_EthTxIpgLength_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthCreditTrigger - reserved
    Bits:  0    EthCreditTrigger(rw) - Credit-based FIFO only: When written with a 1, RX FIFO reset occurs and credit counter loaded from the InitCredit value.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthCreditTrigger(_x)  (0x00005048 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCreditTrigger_EthCreditTrigger BIT(0)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthInitCredit - reserved
    Bits:  7:0  EthInitCredit(rw) - Credit-based FIFO only: Specifies the initial credit value to be loaded.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthInitCredit(_x)     (0x0000504c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthInitCredit_EthInitCredit(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthInitCredit_EthInitCredit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthCreditReg - reserved
    Bits:  7:0  EthCredits(ro) - Current credit register value (for debug purpose only).
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthCreditReg(_x)      (0x00005050 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCreditReg_EthCredits(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthCreditReg_EthCredits_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL01 - Class 0 and 1 pause quanta. When link pause mode is enabled, PauseQuantaCL0 is used.
    Bits: 31:16 EthPauseQuantaCL1(rw) - Value to be sent for the PFC quanta value for that class when a class XOFF is triggered. Each Quanta specifies a 512 bit-time.
    Bits: 15:0  EthPauseQuantaCL0(rw) - PauseQuantaCL0
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01(_x) (0x00005054 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL1(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL01_EthPauseQuantaCL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL23 - Class 2 and 3 pause quanta
    Bits: 31:16 EthPauseQuantaCL3(rw) - PauseQuantaCL3; Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL2(rw) - PauseQuantaCL2
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23(_x) (0x00005058 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL3(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL23_EthPauseQuantaCL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL45 - Class 4 and 5 pause quanta
    Bits: 31:16 EthPauseQuantaCL5(rw) - PauseQuantaCL5; Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL4(rw) - PauseQuantaCL4
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45(_x) (0x0000505c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL5(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL4(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL45_EthPauseQuantaCL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthPauseQuantaCL67 - Class 6 and 7 pause quanta
    Bits: 31:16 EthPauseQuantaCL7(rw) - PauseQuantaCL7; Value to be sent for the PFC quanta value for that class when a class XOFF is triggered.
    Bits: 15:0  EthPauseQuantaCL6(rw) - PauseQuantaCL6
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67(_x) (0x00005060 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL7(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL6(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthPauseQuantaCL67_EthPauseQuantaCL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL01 - Class 0 and 1 refresh threshold. When link pause mode is enabled, QuantaThreshCL0 is used for refreshing pause frames.
    Bits: 31:16 EthQuantaThreshCL1(rw) - QuantaThreshCL1;When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL0(rw) - QuantaThreshCL0
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01(_x) (0x00005064 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL1(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL1_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL01_EthQuantaThreshCL0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL23 - Class 2 and 3 refresh threshold
    Bits: 31:16 EthQuantaThreshCL3(rw) - QuantaThreshCL3; When a PFC quanta timer counts down and reaches this value, a refresh pause frame should be sent with the programmed full quanta value if the input level indicates that a pause condition still exists.
    Bits: 15:0  EthQuantaThreshCL2(rw) - QuantaThreshCL2
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23(_x) (0x00005068 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL3(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL3_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL23_EthQuantaThreshCL2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL45 - Class 2 and 3 refresh threshold
    Bits: 31:16 EthQuantaThreshCL5(rw) - QuantaThreshCL5
    Bits: 15:0  EthQuantaThreshCL4(rw) - QuantaThreshCL4
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45(_x) (0x0000506c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL5(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL5_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL4(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL45_EthQuantaThreshCL4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthQuantaThreshCL67 - Class 6 and 7 refresh threshold
    Bits: 31:16 EthQuantaThreshCL7(rw) - QuantaThreshCL7
    Bits: 15:0  EthQuantaThreshCL6(rw) - QuantaThreshCL6
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67(_x) (0x00005070 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL7(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL7_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL6(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthQuantaThreshCL67_EthQuantaThreshCL6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthRxPauseStatus - Current per class received pause status. 0 is used for link pause also.
    Bits:  7:0  EthRxPauseStatus(ro) - Status bit for software to read the current received pause status. One bit for each of the 8 classes.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxPauseStatus(_x)  (0x00005074 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxPauseStatus_EthRxPauseStatus(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthRxPauseStatus_EthRxPauseStatus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthTimestamp - Transmit Timestamp
    Bits: 31:0  EthTimestamp(ro) - Timestamp of the last frame transmitted by the Core that had the ff_tx_ts_frm signal asserted from the user application. Valid when the status bit TsAvail is set to '1'.
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthTimestamp(_x)      (0x0000507c + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTimestamp_EthTimestamp(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthTimestamp_EthTimestamp_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: MacEthSeg[10]_EthXifMode - Interface Mode Configuration
    Bits:  5    EthOneStepEna(ro) - Enable 1-step capable datapath (if available)
    Bits:  4    EthPauseTimerX8(rw) - Enable Pause Timer Compensation when using external XLGMII/GMII Converter
    Bits:  0    EthXgmii(rw) - Enable XGMII-64 (4byte alignment)
*/
#define NFP3800_NBI_MACX_ETH_MacEthSeg_EthXifMode(_x)        (0x00005080 + (0x400 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthXifMode_EthOneStepEna BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthXifMode_EthPauseTimerX8 BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthSeg_EthXifMode_EthXgmii BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorScratch - Vendor Specific Reg; Scratch Register.
    Bits: 15:0  EthScratch(rw) - Scratch Register; Register address to test read and write operation.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorScratch(_x) (0x00008000 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorScratch_EthScratch(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorScratch_EthScratch_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorCoreRev - Vendor Specific Reg; Core Revision derived from DEV_VERSION package parameter.
    Bits: 15:0  EthRevision(ro) - Core Design version as defined by DEV_VERSION parameter in PCS package file.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorCoreRev(_x) (0x00008004 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorCoreRev_EthRevision(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorCoreRev_EthRevision_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVlIntvl - Vendor Specific Reg; Set the amount of data between markers. (I.e. distance of markers-1).
    Bits: 15:0  EthMarkerCounter(rw) - A 16-bit value defining the amount of data between markers; (distance of markers-1).
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVlIntvl(_x) (0x00008008 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVlIntvl_EthMarkerCounter(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVlIntvl_EthMarkerCounter_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorTxlaneThresh - Vendor Specific Reg; Defines the transmit line decoupling FIFOs almost full threshold.
    Bits: 15:4  EthThresholdUnused(rw) - A 12-bit value unused.
    Bits:  3:0  EthThreshold(rw) - A 4-bit value to define the transmit line decoupling FIFOs almost full threshold; Valid values are 4..9.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorTxlaneThresh(_x) (0x0000800c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorTxlaneThresh_EthThresholdUnused(_x) (((_x) & 0xfff) << 4)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorTxlaneThresh_EthThresholdUnused_of(_x) (((_x) >> 4) & 0xfff)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorTxlaneThresh_EthThreshold(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorTxlaneThresh_EthThreshold_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorRxlauiConfig - Vendor Specific Reg; Define Reduced-XLAUI PMA mode using 2 lanes.
    Bits: 15    EthEnaStatus(ro) - N/A.
    Bits: 11:8  EthTxMapLane1(rw) - N/A.
    Bits:  7:4  EthTxMapLane0(rw) - N/A.
    Bits:  3:1  EthReservedWriteableBits(rw) - N/A.
    Bits:  0    EthRxlauiEna(rw) - N/A.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig(_x) (0x00008010 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthEnaStatus BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthTxMapLane1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthTxMapLane1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthTxMapLane0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthTxMapLane0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthReservedWriteableBits(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthReservedWriteableBits_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorRxlauiConfig_EthRxlauiEna BIT(0)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl00 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 0.
    Bits: 15:8  EthM1(rw) - Lane 0 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 0 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl00(_x) (0x00008020 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl00_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl00_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl00_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl00_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl01 - Vendor Specific Reg; Last byte of PCS Virtual Lane 0 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 0 Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl01(_x) (0x00008024 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl01_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl01_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl10 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 1.
    Bits: 15:8  EthM1(rw) - Lane 1 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 1 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl10(_x) (0x00008028 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl10_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl10_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl10_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl10_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl11 - Vendor Specific Reg; Last byte of PCS Virtual Lane 1 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 1 last btye of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl11(_x) (0x0000802c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl11_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl11_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl20 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 2.
    Bits: 15:8  EthM1(rw) - Lane 2 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 2 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl20(_x) (0x00008030 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl20_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl20_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl20_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl20_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl21 - Vendor Specific Reg; Last byte of PCS Virtual Lane 2 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 2 last btye of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl21(_x) (0x00008034 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl21_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl21_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl30 - Vendor Specific Reg; Marker pattern for PCS Virtual Lane 3.
    Bits: 15:8  EthM1(rw) - Lane 3 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Lane 3 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl30(_x) (0x00008038 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl30_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl30_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl30_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl30_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorVl31 - Vendor Specific Reg; Last byte of PCS Virtual Lane 3 marker pattern.
    Bits:  7:0  EthM2(rw) - Lane 3 last btye of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl31(_x) (0x0000803c + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl31_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorVl31_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthChPcsVsSeg[10]_EthChPcsVendorPcsMode - Vendor Specific Reg; Configure PCS supporting Clause 49 or 82 Encoder/Decoder, MLD.
    Bits:  9    EthStDisableMld(ro) - Current status of MLD setting.
    Bits:  8    EthStEnaClause49(ro) - Current status of Clause 49 setting.
    Bits:  2    EthHiBer25(rw) - When 1 PCS implements 25G Hi-Ber (2ms, 97 errors). When 0 Hi-Ber implements according to EnaClause49
    Bits:  1    EthDisableMld(rw) - When 0 PCS 4-lane MLD function is active; When 1 the MLD function is disabled.
    Bits:  0    EthEnaClause49(rw) - When 0 PCS uses Clause 82 encoder/decoder functions; When 1 PCS uses Clause 49 encoder/decoder functions.
*/
#define NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorPcsMode(_x) (0x00008040 + (0x800 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorPcsMode_EthStDisableMld BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorPcsMode_EthStEnaClause49 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorPcsMode_EthHiBer25 BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorPcsMode_EthDisableMld BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthChPcsVsSeg_EthChPcsVendorPcsMode_EthEnaClause49 BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanControl - Control Operation
    Bits: 15    EthReset(rwc) - (SC) Soft Reset. If AN is enabled causes restart. Self-Clearing
    Bits: 13    EthNextpageen(rw) - When 1 externded NextPage support is enabled. Must be set to allow exchange of next pages.
    Bits: 12    EthAnenable(rw) - Autonegotiation Enable. When set autonegotiation will begin. All registers must be initialized before.
    Bits:  9    EthAnrestart(rwc) - (SC) Restart Autonegotiation. Self-Clearning.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanControl(_x) (0x0000d000 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanControl_EthReset BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanControl_EthNextpageen BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanControl_EthAnenable BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanControl_EthAnrestart BIT(9)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanStatus - Status Information
    Bits:  9    EthParallelDetectFault(ro) - (LH) Parallel detection fault occured, autoneg restarted.
    Bits:  7    EthExtdnextpage(ro) - Indicates next page exchanges are enabled. It asserts as a result of setting KxanControl.13
    Bits:  6    EthPagereceived(ro) - (LH) A DME page has been received.
    Bits:  5    EthAutonegcomplete(ro) - Autonegotiation has completed.
    Bits:  4    EthRemotefault(ro) - not applicable as no fault situation is available. If the remote device indicates a fault situation the base page must be inspected. The bit is 0 always.
    Bits:  3    EthAutonegability(ro) - Always 1 indicating this core is autonegotiation capable.
    Bits:  2    EthLinkstatus(ro) - (LL): Status of signal detect pin.
    Bits:  0    EthLpancapable(ro) - Link Partner is Autonegotiation Capable. Asserts when DME pages seem to be received.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus(_x) (0x0000d004 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthParallelDetectFault BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthExtdnextpage BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthPagereceived BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthAutonegcomplete BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthRemotefault BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthAutonegability BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthLinkstatus BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanStatus_EthLpancapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanAbility0 - Ability Word first 16 bits
    Bits: 15    EthNextpage(rw) - Indicates next pages will follow.
    Bits: 14    EthAck(rw) - Acknowledge. The bit is controlled automatically. Should be written with 0 always.
    Bits: 13    EthRemotefault(rw) - Indicate a fault situation to the remote.
    Bits: 12:10 EthPauseability(rw) - Pause ability negotiation
    Bits:  9:5  EthEchoednonce(rw) - Nonce field returned to remote. The field is automatically updated and should be initialized with a random value.
    Bits:  4:0  EthSelector(rw) - constant value 1
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0(_x) (0x0000d008 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthNextpage BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthAck BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthRemotefault BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthPauseability(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthPauseability_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthEchoednonce(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthEchoednonce_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthSelector(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility0_EthSelector_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanAbility1 - Ability Word 2nd 16 bits (31:16)
    Bits: 15:5  EthTechnology(rw) - Ability bits A10 to A0
    Bits:  4:0  EthTxnonce(rw) - Transmitted Nonce. Must be initialized with a random value except 0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility1(_x) (0x0000d00c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility1_EthTechnology(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility1_EthTechnology_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility1_EthTxnonce(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility1_EthTxnonce_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanAbility2 - Ability Word last 16 bits (47:32)
    Bits: 15:14 EthFecability(rw) - Indicate FEC(Clause74) availability and request its use.
    Bits: 13:0  EthTechnology(rw) - Ability bits A24 to A11
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility2(_x) (0x0000d010 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility2_EthFecability(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility2_EthFecability_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility2_EthTechnology(_x) (((_x) & 0x3fff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanAbility2_EthTechnology_of(_x) (((_x) >> 0) & 0x3fff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanRemAbility0 - Received Ability base page first 16 bits 15:0
    Bits: 15:0  EthRemability(ro) - Bits 15:0 of received base page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility0(_x) (0x0000d014 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility0_EthRemability(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility0_EthRemability_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanRemAbility1 - Received Ability bits 32:16
    Bits: 15:0  EthRemability(ro) - Bits 31:16 of received base page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility1(_x) (0x0000d018 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility1_EthRemability(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility1_EthRemability_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanRemAbility2 - Received Ability bits 47:16
    Bits: 15:0  EthRemability(ro) - Bits 47:32 of received base page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility2(_x) (0x0000d01c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility2_EthRemability(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanRemAbility2_EthRemability_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthKxanMsCount - Timebase for millisecond timer.
    Bits: 15:0  EthNumclocks(rw) - Number of register clock periods required to count 1ms time. Higher 16bit of 21bit wide counter. Lower 5 bits are fixed to 0x10.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanMsCount(_x) (0x0000d020 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanMsCount_EthNumclocks(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthKxanMsCount_EthNumclocks_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthAnXnp0 - Next Page Ability Register bits 15:0. Must be written first. Can be written only if the KxanControl next page ability is enabled.
    Bits: 15:0  EthNextpage(rw) - Bits 15:0 of Next Page to transmit.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp0(_x) (0x0000d024 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp0_EthNextpage(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp0_EthNextpage_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthAnXnp1 - Next Page Abilities bits 31:16. Can be written only if the KxanControl next page ability is enabled.
    Bits: 15:0  EthNextpage(rw) - Bits 31:16 of Next Page to transmit.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp1(_x) (0x0000d028 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp1_EthNextpage(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp1_EthNextpage_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthAnXnp2 - Next Page Abilities bits 47:32. This register must be written last and transfer the data into the transmit register triggering DME page transmission. Can be written only if the KxanControl next page ability is enabled.
    Bits: 15:0  EthNextpage(rw) - Bits 47:32 of Next Page to transmit.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp2(_x) (0x0000d02c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp2_EthNextpage(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthAnXnp2_EthNextpage_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthLpAnXnp0 - Received Next Page from Link Partner bits 15:0.
    Bits: 15:0  EthRemnextpage(ro) - Bits 15:0 of received Next Page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp0(_x) (0x0000d030 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp0_EthRemnextpage(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp0_EthRemnextpage_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthLpAnXnp1 - Received Next Page from Link Partner bits 31:16.
    Bits: 15:0  EthRemnextpage(ro) - Bits 32:16 of received Next Page
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp1(_x) (0x0000d034 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp1_EthRemnextpage(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp1_EthRemnextpage_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthLpAnXnp2 - Received Next Page from Link Partner bits 47:32.
    Bits: 15:0  EthRemnextpage(ro) - Bits 47:32 of received Next Page.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp2(_x) (0x0000d038 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp2_EthRemnextpage(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthLpAnXnp2_EthRemnextpage_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthAutoNegSeg_EthBpEthStatus - Resolved Ability from Base-Page
    Bits: 15    EthTechnologyA12(ro) - Resolved Technology A12
    Bits: 14    EthTechnologyA11(ro) - Resolved Technology A11
    Bits: 13    EthTechnologyA10(ro) - Resolved Technology A10
    Bits: 12    EthTechnologyA9(ro) - Resolved Technology A9
    Bits: 11    EthTechnologyA8(ro) - Resolved Technology A8 (100G CR4)
    Bits: 10    EthTechnologyA7(ro) - Resolved Technology A7 (100G KR4)
    Bits:  9    EthTechnologyA6(ro) - Resolved Technology A6 (100G KP4)
    Bits:  8    EthTechnologyA5(ro) - Resolved Technology A5 (100G CR10)
    Bits:  7    EthBpethstatusrsv(ro) - reserved
    Bits:  6    EthTechnologyA4(ro) - Resolved Technology A4 (40G CR4)
    Bits:  5    EthTechnologyA3(ro) - Resolved technology A3 (40G KR4)
    Bits:  4    EthFec(ro) - Resolved FEC(74) should be enabled.
    Bits:  3    EthTechnologyA2(ro) - Resolved Technology A2 (10G KR)
    Bits:  2    EthTechnologyA1(ro) - Resolved Technology A1 (KX4)
    Bits:  1    EthTechnologyA0(ro) - Resolved Technology A0 (1G KX)
    Bits:  0    EthPresent(ro) - Always 1 indicating existence of the register.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus(_x) (0x0000d03c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA12 BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA11 BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA10 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA9 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA8 BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA7 BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA6 BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA5 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthBpethstatusrsv BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA4 BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA3 BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthFec BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA2 BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA1 BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthTechnologyA0 BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthAutoNegSeg_EthBpEthStatus_EthPresent BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrControl - Control Operation
    Bits:  1    EthTrainingenable(rw) - Set to 1 to enable the Base-R startup protocol. Should be set to 0 to disable the Base-R startup protocol.
    Bits:  0    EthRestarttraining(rw) - Self-Clearing bit, should be set to 1 to restart the Base-R startup protocol. This register should always be written with Restarttraining bit set to 1.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrControl(_x) (0x0000d040 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrControl_EthTrainingenable BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrControl_EthRestarttraining BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrStatus - Status Information
    Bits: 15    EthSignaldetection(ro) - When 1 indicates training process is complete (signal detect is now propagating to the PCS allowig it to establish a link).
    Bits:  3    EthTrainingfailure(ro) - When 1 indicates that Training failure has been detected.
    Bits:  2    EthStatus(ro) - When 0 indicates that the startup protocol is completed. When 1 indicates that the startup protocol is in progress.
    Bits:  1    EthFramelock(ro) - When 1 indicates that Training Frame delineation is detected.
    Bits:  0    EthReceiverstatus(rw) - When set 0, indicates that the receiver training is proceeding. When written with 1 by the application, indicates that the receiver is trained and is ready to receive data.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrStatus(_x) (0x0000d044 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrStatus_EthSignaldetection BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrStatus_EthTrainingfailure BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrStatus_EthStatus BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrStatus_EthFramelock BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrStatus_EthReceiverstatus BIT(0)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLpCoef - Link Partner Coefficient Update request received.
    Bits: 15:0  EthCoeffupdate(ro) - 16bit coefficient update information received from link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLpCoef(_x) (0x0000d048 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLpCoef_EthCoeffupdate(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLpCoef_EthCoeffupdate_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLpStat - Link Partner Status Report received.
    Bits: 15:0  EthStatusreport(ro) - 16bit Status report received from link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLpStat(_x) (0x0000d04c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLpStat_EthStatusreport(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLpStat_EthStatusreport_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLdCoef - Local Device Coefficient Update request to send.
    Bits: 15:0  EthCoeffupdate(rw) - 16bit Coefficient Update Request to send to link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLdCoef(_x) (0x0000d050 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLdCoef_EthCoeffupdate(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLdCoef_EthCoeffupdate_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrLdStat - Local Device Status Report to send.
    Bits: 15:0  EthStatusreport(rw) - 16bit Status report field to send to the link partner.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLdStat(_x) (0x0000d054 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLdStat_EthStatusreport(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrLdStat_EthStatusreport_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrTrainingPattern - Select PRBS11 polynomial and define seed to use for transmitted training pattern.
    Bits: 13:11 EthPrbsselect(rw) - Select which PRBS11 polynomial should be used for the training pattern within transmitted training frames.
    Bits: 10:0  EthSeed(rw) - Seed value to load into PRBS11 at begin of training pattern.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrTrainingPattern(_x) (0x0000d060 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrTrainingPattern_EthPrbsselect(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrTrainingPattern_EthPrbsselect_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrTrainingPattern_EthSeed(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrTrainingPattern_EthSeed_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrRxPattern - Configure receive training pattern checker function.
    Bits: 14    EthIgnorefirstdata(rw) - If set 1 the checker ignores the first data of the training pattern to allow loading the prbs register from the incoming data. If set 0 the seed value is used and check begins at the first bit.
    Bits: 13:11 EthPrbsselect(rw) - Select which PRBS11 polynomial should be used.
    Bits: 10:0  EthSeed(rw) - Seed value to load into PRBS11 checker register at begin of every training frame.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPattern(_x) (0x0000d064 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPattern_EthIgnorefirstdata BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPattern_EthPrbsselect(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPattern_EthPrbsselect_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPattern_EthSeed(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPattern_EthSeed_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrRxPatternErr - Counter for PRBS11 errors detected by receive pattern checker function.
    Bits: 15:0  EthErrors(ro) - Counter for PRBS11 errors found in received training frames by the receive pattern checker. Counter saturates at 0xffff and clears on read.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPatternErr(_x) (0x0000d068 + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPatternErr_EthErrors(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPatternErr_EthErrors_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthAnLt[10]_MacEthFecLTSeg_EthLtKrRxPatternBegin - Holds first 16 bits from the training pattern of received training frames.
    Bits: 15:0  EthPatternbegin(ro) - Holds the first 16 bits from the training pattern of received training frames. Bit 15 holds the first bit received.
*/
#define NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPatternBegin(_x) (0x0000d06c + (0x200 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPatternBegin_EthPatternbegin(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthAnLt_MacEthFecLTSeg_EthLtKrRxPatternBegin_EthPatternbegin_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiControl - Control Register.
    Bits: 15    EthReset(rwc) - Reset the datapath
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiControl(_x) (0x0000e800 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiControl_EthReset BIT(15)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiStatus - Status information.
    Bits:  2    EthLinkStatus(ro) - When 1, indicates receive link up; When 1 indicates PCS receive link is or was down (latching low).
    Bits:  0    EthLinkStatusRealtime(ro) - Current link status
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiStatus(_x) (0x0000e804 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiStatus_EthLinkStatus BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiStatus_EthLinkStatusRealtime BIT(0)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiPortsEna - Number of active ports to use.
    Bits:  4:0  EthNumports(rw) - Define number of ports to multiplex - up to 8
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiPortsEna(_x) (0x0000e808 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiPortsEna_EthNumports(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiPortsEna_EthNumports_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVlIntvl - Set the amount of data between markers.
    Bits: 15:0  EthMarkerCounter(rw) - A 16-bit value defining the amount of port cycles between markers.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVlIntvl(_x) (0x0000e80c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVlIntvl_EthMarkerCounter(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVlIntvl_EthMarkerCounter_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiAlignMatchErr - Alignment Marker mismatch error counter.
    Bits: 15:0  EthAlignmatcherr(ro) - Number of mismatches. Saturating counter
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiAlignMatchErr(_x) (0x0000e810 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiAlignMatchErr_EthAlignmatcherr(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiAlignMatchErr_EthAlignmatcherr_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl0Byte3 - Informal extracted 3rd byte from marker word.
    Bits:  7:0  EthVl0byte3(ro) - The 3rd byte of the marker word received at link startup.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl0Byte3(_x) (0x0000e814 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl0Byte3_EthVl0byte3(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl0Byte3_EthVl0byte3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl00 - Marker pattern for Block 0.
    Bits: 15:8  EthM1(rw) - Block 0 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 0 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl00(_x) (0x0000e840 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl00_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl00_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl00_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl00_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl01 - Last byte of Block 0 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 0 Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl01(_x) (0x0000e844 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl01_EthM2Extra(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl01_EthM2Extra_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl01_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl01_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl10 - Marker pattern for Block 1.
    Bits: 15:8  EthM1(rw) - Block 1 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 1 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl10(_x) (0x0000e848 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl10_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl10_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl10_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl10_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl11 - Last byte of Block 1 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 1 last byte of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl11(_x) (0x0000e84c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl11_EthM2Extra(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl11_EthM2Extra_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl11_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl11_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl20 - Marker pattern for Block 2.
    Bits: 15:8  EthM1(rw) - Block 2 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 2 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl20(_x) (0x0000e850 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl20_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl20_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl20_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl20_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl21 - Last byte of Block 2 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 2 last byte of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl21(_x) (0x0000e854 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl21_EthM2Extra(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl21_EthM2Extra_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl21_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl21_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl30 - Marker pattern for Block 3.
    Bits: 15:8  EthM1(rw) - Block 3 Marker pattern for m1.
    Bits:  7:0  EthM0(rw) - Block 3 Marker pattern for m0.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl30(_x) (0x0000e858 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl30_EthM1(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl30_EthM1_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl30_EthM0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl30_EthM0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEthUsxgmii[2]_EthUsxgmiiVl31 - Last byte of Block 3 marker pattern.
    Bits: 15:8  EthM2Extra(rw) - Extra.
    Bits:  7:0  EthM2(rw) - Block 3 last byte of Marker pattern for m2.
*/
#define NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl31(_x) (0x0000e85c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl31_EthM2Extra(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl31_EthM2Extra_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl31_EthM2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEthUsxgmii_EthUsxgmiiVl31_EthM2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPcsCtl - Control register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPcsCtl - Control register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPcsCtl - Control register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPcsCtl - Control register
    Bits: 15    EthPcsReset(wo) - PCS soft-reset command; self-clearing
    Bits: 14    EthPhyLoopback(rw) - Enable loopback
    Bits: 13    EthSgmiiSpeedSel0(ro) - Speed Selection Indication; always 0
    Bits: 12    EthAutoNegEnable(rw) - Autonegotiation enable
    Bits: 11    EthPowerDown(rw) - Enable powerdown state, if supported.
    Bits: 10    EthIsolate(rw) - Set PCS isolate mode; Controls toplevel pin only, no internal function.
    Bits:  9    EthRestartAutoNeg(rw) - Restart Autonegotiation
    Bits:  8    EthDuplexMode(ro) - Indicate full-duplex operation; always 1
    Bits:  6    EthSgmiiSpeedSel1(ro) - Speed Selection Indication; always 1
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl 0x0000f000
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPcsCtl 0x0000f080
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPcsCtl 0x0000f100
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPcsCtl 0x0000f180
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPcsCtl 0x0000f200
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPcsCtl 0x0000f280
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPcsCtl 0x0000f300
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPcsCtl 0x0000f380
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPcsCtl 0x0000f800
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPcsCtl 0x0000f880
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthPcsReset BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthPhyLoopback BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthSgmiiSpeedSel0 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthAutoNegEnable BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthPowerDown BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthIsolate BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthRestartAutoNeg BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthDuplexMode BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsCtl_EthSgmiiSpeedSel1 BIT(6)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPcsStatus - Status indications
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPcsStatus - Status indications
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPcsStatus - Status indications
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPcsStatus - Status indications
    Bits:  5    EthAutoNegComplete(ro) - Autonegotiation completed indication
    Bits:  3    EthAutoNegAbility(ro) - Autonegotiation ability; always 1
    Bits:  2    EthLinkStatus(ro) - Indicate link status; latch-low
    Bits:  0    EthExtCapable(ro) - Indicate extended register support; always 1
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus 0x0000f004
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPcsStatus 0x0000f084
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPcsStatus 0x0000f104
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPcsStatus 0x0000f184
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPcsStatus 0x0000f204
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPcsStatus 0x0000f284
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPcsStatus 0x0000f304
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPcsStatus 0x0000f384
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPcsStatus 0x0000f804
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPcsStatus 0x0000f884
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus_EthAutoNegComplete BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus_EthAutoNegAbility BIT(3)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus_EthLinkStatus BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPcsStatus_EthExtCapable BIT(0)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPhyIdent0 - PHY Identifier lower 16 bits
    Bits: 15:0  EthPhyId(ro) - PHY Identifier from package file parameter PHY_IDENTIFIER lower 16 bits.
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent0 0x0000f008
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPhyIdent0 0x0000f088
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPhyIdent0 0x0000f108
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPhyIdent0 0x0000f188
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPhyIdent0 0x0000f208
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPhyIdent0 0x0000f288
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPhyIdent0 0x0000f308
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPhyIdent0 0x0000f388
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPhyIdent0 0x0000f808
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPhyIdent0 0x0000f888
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent0_EthPhyId(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent0_EthPhyId_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPhyIdent1 - PHY Identifier upper 16 bits
    Bits: 15:0  EthPhyId(ro) - PHY Identifier from package file parameter PHY_IDENTIFIER upper 16 bits.
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent1 0x0000f00c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPhyIdent1 0x0000f08c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPhyIdent1 0x0000f10c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPhyIdent1 0x0000f18c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPhyIdent1 0x0000f20c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPhyIdent1 0x0000f28c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPhyIdent1 0x0000f30c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPhyIdent1 0x0000f38c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPhyIdent1 0x0000f80c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPhyIdent1 0x0000f88c
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent1_EthPhyId(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPhyIdent1_EthPhyId_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiDevAbility - Local Device Abilities for Autonegotiation. Contents differs for 1000Base-X or SGMII mode.
    Bits: 15    EthNextPageCapable(rw) - Next Page support; SGMII:=reserved
    Bits: 14    EthAck(ro) - Acknowledge during autonegotiation
    Bits: 13    EthRF2(rw) - Remote fault 2; SGMII:=reserved
    Bits: 12    EthRF1(rw) - Remote fault 1; SGMII:=reserved
    Bits: 11:9  EthAbilityRsv9(rw) - reserved; SGMII:=reserved
    Bits:  8    EthPS2(rw) - Pause Support 2; SGMII:=EEE clock stop enable to PHY
    Bits:  7    EthPS1(rw) - Pause Support 1; SGMII:=reserved
    Bits:  6    EthHalfDuplex(rw) - Indicate half-duplex support; SGMII:=reserved
    Bits:  5    EthFullDuplex(rw) - Indicate full-duplex support; SGMII:=reserved
    Bits:  4:0  EthAbilityRsv05(rw) - reserved; SGMII:=set to 1 to indicate SGMII to PHY
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility 0x0000f010
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiDevAbility 0x0000f090
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiDevAbility 0x0000f110
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiDevAbility 0x0000f190
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiDevAbility 0x0000f210
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiDevAbility 0x0000f290
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiDevAbility 0x0000f310
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiDevAbility 0x0000f390
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiDevAbility 0x0000f810
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiDevAbility 0x0000f890
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthNextPageCapable BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthAck BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthRF2 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthRF1 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthAbilityRsv9(_x) (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthAbilityRsv9_of(_x) (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthPS2 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthPS1 BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthHalfDuplex BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthFullDuplex BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthAbilityRsv05(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDevAbility_EthAbilityRsv05_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPartnerAbility - Received Abilities during Autonegotiation. Contents differ depending on 1000Base-X or SGMII mode.
    Bits: 15    EthNextPageCapable(ro) - Next Page support; SGMII:=Copper Link Status from PHY
    Bits: 14    EthAck(ro) - Acknowledge during autonegotiation
    Bits: 13    EthRF2(ro) - Remote fault 2; SGMII:=reserved
    Bits: 12    EthRF1(ro) - Remote fault 1; SGMII:=Copper DuplexMode status from PHY
    Bits: 11:10 EthPAbilityRsv10(ro) - reserved; SGMII:=Copper Speed indication from PHY
    Bits:  9    EthPAbilityRsv9(ro) - reserved; SGMII:=EEE capability from PHY
    Bits:  8    EthPS2(ro) - Pause Support 2; SGMII:=EEE clock stop capability from PHY
    Bits:  7    EthPS1(ro) - Pause Support 1; SGMII:=reserved
    Bits:  6    EthHalfDuplex(ro) - Indicate half-duplex support; SGMII:=reserved
    Bits:  5    EthFullDuplex(ro) - Indicate full-duplex support; SGMII:=reserved
    Bits:  4:0  EthPAbilityRsv05(ro) - reserved; SGMII:=1
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility 0x0000f014
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiPartnerAbility 0x0000f094
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiPartnerAbility 0x0000f114
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiPartnerAbility 0x0000f194
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiPartnerAbility 0x0000f214
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiPartnerAbility 0x0000f294
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiPartnerAbility 0x0000f314
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiPartnerAbility 0x0000f394
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiPartnerAbility 0x0000f814
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiPartnerAbility 0x0000f894
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthNextPageCapable BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthAck BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthRF2 BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthRF1 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPAbilityRsv10(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPAbilityRsv10_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPAbilityRsv9 BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPS2 BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPS1 BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthHalfDuplex BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthFullDuplex BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPAbilityRsv05(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiPartnerAbility_EthPAbilityRsv05_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiAnExpansion - Autonegotiation Expansion Register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiAnExpansion - Autonegotiation Expansion Register
    Bits:  2    EthNextPageAble(ro) - Indicate PCS supports next page exchange for autonegotiation
    Bits:  1    EthLatchedHiPageRcvd(ro) - Autoneg page received indication; latch-high
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiAnExpansion 0x0000f018
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiAnExpansion 0x0000f098
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiAnExpansion 0x0000f118
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiAnExpansion 0x0000f198
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiAnExpansion 0x0000f218
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiAnExpansion 0x0000f298
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiAnExpansion 0x0000f318
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiAnExpansion 0x0000f398
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiAnExpansion 0x0000f818
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiAnExpansion 0x0000f898
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiAnExpansion_EthNextPageAble BIT(2)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiAnExpansion_EthLatchedHiPageRcvd BIT(1)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiNpTx - Next Page data to transmit
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiNpTx - Next Page data to transmit
    Bits: 15    EthNextPageCapable(rw) - Next Pages to follow indication
    Bits: 14    EthAck(rw) - Acknowledge during page exchange
    Bits: 13    EthMp(rw) - Message Next Page type identification
    Bits: 12    EthAck2(rw) - Next Page data acknowledge indication
    Bits: 11    EthToggle(rw) - Next Page toggle handshaking bit
    Bits: 10:0  EthData(rw) - Next Page data
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx 0x0000f01c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiNpTx 0x0000f09c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiNpTx 0x0000f11c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiNpTx 0x0000f19c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiNpTx 0x0000f21c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiNpTx 0x0000f29c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiNpTx 0x0000f31c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiNpTx 0x0000f39c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiNpTx 0x0000f81c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiNpTx 0x0000f89c
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthNextPageCapable BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthAck BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthMp BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthAck2 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthToggle BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthData(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiNpTx_EthData_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLpNpRx - Received Next Page data from link partner
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLpNpRx - Received Next Page data from link partner
    Bits: 15    EthNextPageCapable(ro) - Next Pages to follow indication
    Bits: 14    EthAck(ro) - Acknowledge during page exchange
    Bits: 13    EthMp(ro) - Message Next Page type identification
    Bits: 12    EthAck2(ro) - Next Page data acknowledge indication
    Bits: 11    EthToggle(ro) - Next Page toggle handshaking bit
    Bits: 10:0  EthData(ro) - Next Page data
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx 0x0000f020
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLpNpRx 0x0000f0a0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLpNpRx 0x0000f120
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLpNpRx 0x0000f1a0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLpNpRx 0x0000f220
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLpNpRx 0x0000f2a0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLpNpRx 0x0000f320
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLpNpRx 0x0000f3a0
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLpNpRx 0x0000f820
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLpNpRx 0x0000f8a0
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthNextPageCapable BIT(15)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthAck BIT(14)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthMp BIT(13)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthAck2 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthToggle BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthData(_x) (((_x) & 0x7ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLpNpRx_EthData_of(_x) (((_x) >> 0) & 0x7ff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiScratch - General Purpose Test register
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiScratch - General Purpose Test register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiScratch - General Purpose Test register
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiScratch - General Purpose Test register
    Bits: 15:0  EthScratch(rw) - Arbitrary value for read/write test
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiScratch 0x0000f040
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiScratch 0x0000f0c0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiScratch 0x0000f140
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiScratch 0x0000f1c0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiScratch 0x0000f240
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiScratch 0x0000f2c0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiScratch 0x0000f340
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiScratch 0x0000f3c0
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiScratch 0x0000f840
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiScratch 0x0000f8c0
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiScratch_EthScratch(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiScratch_EthScratch_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiRev - Core Revision
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiRev - Core Revision
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiRev - Core Revision
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiRev - Core Revision
    Bits: 15:0  EthRevision(ro) - from package parameter DEV_VERSION
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiRev 0x0000f044
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiRev 0x0000f0c4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiRev 0x0000f144
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiRev 0x0000f1c4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiRev 0x0000f244
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiRev 0x0000f2c4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiRev 0x0000f344
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiRev 0x0000f3c4
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiRev 0x0000f844
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiRev 0x0000f8c4
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiRev_EthRevision(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiRev_EthRevision_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLinkTimerLo - Autonegotiation link timer lower 16 bits
    Bits: 15:1  EthLinkTimer15to1(rw) - Bits 15:1 of link timer value
    Bits:  0    EthLinkTimer0(ro) - Bit 0 of link timer value; not writeable and always 0
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerLo 0x0000f048
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLinkTimerLo 0x0000f0c8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLinkTimerLo 0x0000f148
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLinkTimerLo 0x0000f1c8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLinkTimerLo 0x0000f248
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLinkTimerLo 0x0000f2c8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLinkTimerLo 0x0000f348
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLinkTimerLo 0x0000f3c8
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLinkTimerLo 0x0000f848
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLinkTimerLo 0x0000f8c8
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerLo_EthLinkTimer15to1(_x) (((_x) & 0x7fff) << 1)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerLo_EthLinkTimer15to1_of(_x) (((_x) >> 1) & 0x7fff)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerLo_EthLinkTimer0 BIT(0)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLinkTimerHi - Autonegotiation link timer uppest 5 bits
    Bits:  4:0  EthLinkTimer20to16(rw) - Link timer uppest 5 bits of 21bit timer
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerHi 0x0000f04c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiLinkTimerHi 0x0000f0cc
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiLinkTimerHi 0x0000f14c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiLinkTimerHi 0x0000f1cc
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiLinkTimerHi 0x0000f24c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiLinkTimerHi 0x0000f2cc
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiLinkTimerHi 0x0000f34c
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiLinkTimerHi 0x0000f3cc
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiLinkTimerHi 0x0000f84c
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiLinkTimerHi 0x0000f8cc
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerHi_EthLinkTimer20to16(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiLinkTimerHi_EthLinkTimer20to16_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiIfMode - SGMII Mode Control
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiIfMode - SGMII Mode Control
    Bits:  9    EthIfSeqEna(rw) - Enables encoding of Sequence ordered_set symbols over 2.5GBase-X as specified in Clause 127.
    Bits:  8    EthIfModeXgmiiBasex(rw) - MAC interface must operate in XGMII and conversion to the Base-X Encoding/Decoding is following 802.3cb Clause 127 rules.
    Bits:  7    EthIfRxPreambleSync(rw) - Receive GMII stream from the 1000Base-X decoder is assumed to be synchronized to 10B idle code (disable SFD search)
    Bits:  6    EthIfTxPreambleSync(rw) - Transmit GMII stream entering the 1000Base-X encoder is synchronized to 10B idle code group
    Bits:  5    EthIfRsv5(rw) - reserved; writeable for backward compatibility; write 0 always
    Bits:  4    EthSgmiiHDuplex(rw) - Set SGMII half-duplex mode when not using autonegotiation
    Bits:  3:2  EthSgmiiSpeed(rw) - Set SGMII speed when not using autonegotiation
    Bits:  1    EthUseSgmiiAn(rw) - Use the SGMII autonegotiation results to set SGMII speed
    Bits:  0    EthSgmiiEnable(rw) - Enable SGMII mode
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode 0x0000f050
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiIfMode 0x0000f0d0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiIfMode 0x0000f150
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiIfMode 0x0000f1d0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiIfMode 0x0000f250
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiIfMode 0x0000f2d0
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiIfMode 0x0000f350
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiIfMode 0x0000f3d0
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiIfMode 0x0000f850
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiIfMode 0x0000f8d0
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthIfSeqEna BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthIfModeXgmiiBasex BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthIfRxPreambleSync BIT(7)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthIfTxPreambleSync BIT(6)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthIfRsv5 BIT(5)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthSgmiiHDuplex BIT(4)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthSgmiiSpeed(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthSgmiiSpeed_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthUseSgmiiAn BIT(1)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiIfMode_EthSgmiiEnable BIT(0)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiDecodeErrors - 10B decoder error counter for test/debug; May not exist in all Core Variants;
    Bits: 15:0  EthDecodeErrors(ro) - RX 10B/8B code errors; May not be supported in all Core variants; Counter is not accurate and intended only to be of help during test/debug; Clears when writing PcsCtl.15 or PcsCtl.10 with 1.
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDecodeErrors 0x0000f054
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiDecodeErrors 0x0000f0d4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiDecodeErrors 0x0000f154
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiDecodeErrors 0x0000f1d4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiDecodeErrors 0x0000f254
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiDecodeErrors 0x0000f2d4
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiDecodeErrors 0x0000f354
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiDecodeErrors 0x0000f3d4
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiDecodeErrors 0x0000f854
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiDecodeErrors 0x0000f8d4
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDecodeErrors_EthDecodeErrors(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiDecodeErrors_EthDecodeErrors_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiUsxgmiiRep - 10G USXGMII replicator setting
    Bits: 12    EthUsxgmii25(rw) - Set replication factor of 2.5
    Bits:  9:0  EthUsxgmiirep(rw) - Set replication factor for integer replication
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiUsxgmiiRep 0x0000f058
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS1_EthSgmiiUsxgmiiRep 0x0000f0d8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS2_EthSgmiiUsxgmiiRep 0x0000f158
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS3_EthSgmiiUsxgmiiRep 0x0000f1d8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS4_EthSgmiiUsxgmiiRep 0x0000f258
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS5_EthSgmiiUsxgmiiRep 0x0000f2d8
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS6_EthSgmiiUsxgmiiRep 0x0000f358
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS7_EthSgmiiUsxgmiiRep 0x0000f3d8
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS0_EthSgmiiUsxgmiiRep 0x0000f858
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiPCS1_EthSgmiiUsxgmiiRep 0x0000f8d8
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiUsxgmiiRep_EthUsxgmii25 BIT(12)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiUsxgmiiRep_EthUsxgmiirep(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiPCS0_EthSgmiiUsxgmiiRep_EthUsxgmiirep_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiGMODE - Global Mode Configuration.
    Bits: 11    EthUsgmii_scramble_enable(rw) - Enable x58 scrambler/descrambler for USXGMII
    Bits: 10    EthUsgmii8_enable(rw) - Enable USXGMII of all 8 channels over serdes lane 0
    Bits:  9    EthQsgmii_1_enable(rw) - Enable QSGMII for Channels 4..7 over serdes lane 4
    Bits:  8    EthQsgmii_0_enable(rw) - Enable QSGMII for Channels 0..3 over serdes lane 0
    Bits:  7:0  EthLpcs_enable(rw) - per channel 1G PCS enable
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE 0x0000f3e0
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE_EthUsgmii_scramble_enable BIT(11)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE_EthUsgmii8_enable BIT(10)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE_EthQsgmii_1_enable BIT(9)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE_EthQsgmii_0_enable BIT(8)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE_EthLpcs_enable(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGMODE_EthLpcs_enable_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS - Global Mode Configuration.
    Bits: 15:8  EthGan_done_status(ro) - Per channel autonegotiation done status
    Bits:  7:0  EthGsync_status(ro) - Per channel 1G PCS link status
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS 0x0000f3e4
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS_EthGan_done_status(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS_EthGan_done_status_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS_EthGsync_status(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiGSTATUS_EthGsync_status_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiCFG_CLOCK_RATE - Global LPCS clock rate setting.
    Bits:  3:0  EthCfgclockrate(rw) - Define Clock rate divider
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiCFG_CLOCK_RATE 0x0000f3f0
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiCFG_CLOCK_RATE_EthCfgclockrate(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiCFG_CLOCK_RATE_EthCfgclockrate_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacEth8ChSgmii_EthLpcs8chSgmiiUSXGMII_ENABLE_INDICATION - Informal indication of USXGMII channel replicator being enabled.
    Bits:  7:0  EthUsxgmii_enable_ind(ro) - Per channel indication of USXGMII being enabled
*/
#define NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiUSXGMII_ENABLE_INDICATION 0x0000f3f4
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiUSXGMII_ENABLE_INDICATION_EthUsxgmii_enable_ind(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth8ChSgmii_EthLpcs8chSgmiiUSXGMII_ENABLE_INDICATION_EthUsxgmii_enable_ind_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiGMODE - Global Mode Configuration.
    Bits:  1:0  EthLpcs_enable(rw) - per channel 1G PCS enable
*/
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGMODE 0x0000f8e0
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGMODE_EthLpcs_enable(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGMODE_EthLpcs_enable_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS - Global Mode Configuration.
    Bits:  9:8  EthGan_done_status(ro) - Per channel autonegotiation done status
    Bits:  1:0  EthGsync_status(ro) - Per channel 1G PCS link status
*/
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS 0x0000f8e4
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS_EthGan_done_status(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS_EthGan_done_status_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS_EthGsync_status(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiGSTATUS_EthGsync_status_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: MacEth2ChSgmii_EthLpcs2ChSgmiiCFG_CLOCK_RATE - Global LPCS clock rate setting.
    Bits:  3:0  EthCfgclockrate(rw) - Define Clock rate divider
*/
#define NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiCFG_CLOCK_RATE 0x0000f8f0
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiCFG_CLOCK_RATE_EthCfgclockrate(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_ETH_MacEth2ChSgmii_EthLpcs2ChSgmiiCFG_CLOCK_RATE_EthCfgclockrate_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacCoreGasketReg[10] - Mac Gasket Memory Control Register
    Bits: 14    MacMemCtrlBC2(rw) - Mac Cores Memory Control BC2.
    Bits: 13    MacMemCtrlBC1(rw) - Mac Cores Memory Control BC1.
    Bits: 12    MacMemCtrlTest1B(rw) - Mac Cores Memory Control TEST1B.
    Bits: 11    MacMemCtrlTest1A(rw) - Mac Cores Memory Control TEST1A/TEST1.
    Bits: 10    MacMemCtrlRMEB(rw) - Mac Cores Memory Control RMEB/RME.
    Bits:  9:8  MacMemCtrlRA(rw) - Mac Cores Memory Control RA.
    Bits:  7:4  MacMemCtrlRMB(rw) - Mac Cores Memory Control RMB.
    Bits:  3:0  MacMemCtrlRMA(rw) - Mac Cores Memory Control RMA/RM.
*/
#define NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg(_x)         (0x00000000 + (0x4 * ((_x) & 0xf)))
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlBC2 BIT(14)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlBC1 BIT(13)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlTest1B BIT(12)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlTest1A BIT(11)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMEB BIT(10)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRA(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRA_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMB(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMB_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMA(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoreGasketReg_MacMemCtrlRMA_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: MacCoresPowerCsrs[4] - Mac Memory control Power ShutDown CSRs
    Bits: 31:0  MacPowerCsrs(rw) - 32 bit Memory Control Power CSRs. Setting bit to 1 Shuts down the memory.
*/
#define NFP3800_NBI_MACX_MEMCTL_MacCoresPowerCsrs(_x)        (0x00000200 + (0x4 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_MEMCTL_MacCoresPowerCsrs_MacPowerCsrs(_x) (((_x) & 0xffffffff) << 0)
#define   NFP3800_NBI_MACX_MEMCTL_MacCoresPowerCsrs_MacPowerCsrs_of(_x) (((_x) >> 0) & 0xffffffff)
/*----------------------------------------------------------------
  Register: CustModeResetCtl - Customer Mode overrides and Reset Control CSR.
    Bits: 31:16 CustomerMode(rw) - The customer mode bus to override CSR settings on all CMUs and Lanes in a single PHY at the same time.
    Bits: 15    Cmu1SelIntRefClk(rw) - When set, PLL1/CMU1 selects internal PLL ref_clk. 0 selects the bump ref_clk.
    Bits: 14    Cmu0SelIntRefClk(rw) - When set, PLL0/CMU0 selects internal PLL ref_clk. 0 selcts the bump ref_clk.
    Bits: 13    LsPllReset(rw) - LS PLL Reset. Reset=1.
    Bits: 12    HsPllReset(rw) - HS PLL Reset. Reset=1.
    Bits: 11:8  TxSyncReset(rw) - Used to sync TX on multiple lanes. (Only Lanes 0-3 and 8-11 are multi-capable)
    Bits:  7:4  TxReset(rw) - TX reset pin.
    Bits:  3:0  RxReset(rw) - RX reset pin.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl      0x00000000
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_CustomerMode(_x) (((_x) & 0xffff) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_CustomerMode_of(_x) (((_x) >> 16) & 0xffff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_Cmu1SelIntRefClk BIT(15)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_Cmu0SelIntRefClk BIT(14)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_LsPllReset BIT(13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_HsPllReset BIT(12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_TxSyncReset(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_TxSyncReset_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_TxReset(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_TxReset_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_RxReset(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustModeResetCtl_RxReset_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: CustWordModeDataRate10 - Customer Mode per-lane data-rate, word-mode and loopback macro lanes 1 and 0
    Bits: 31:26 RFU(rw) - Reserved.
    Bits: 25    RxTxParLpbkL1(rw) - Lane 1 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 24    TxRxLpbkL1(rw) - Lane 1 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 23    RxTxRevLpbkL1(rw) - Lane 1 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 22    RxTxParLpbkL0(rw) - Lane 0 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 21    TxRxLpbkL0(rw) - Lane 0 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 20    RxTxRevLpbkL0(rw) - Lane 0 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 19:18 RxDataRateL1(rw) - RX data rate L1 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 17:16 TxDataRateL1(rw) - TX data rate L1 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 15:13 RxWordModeL1(rw) - RX word mode L1 001=10b, 011=20b, 100=32b, 101=40b.
    Bits: 12:10 TxWordModeL1(rw) - TX word mode L1 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  9:8  RxDataRateL0(rw) - RX data rate L0 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  7:6  TxDataRateL0(rw) - TX data rate L0 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  5:3  RxWordModeL0(rw) - RX word mode L0 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  2:0  TxWordModeL0(rw) - TX word mode L0 001=10b, 011=20b, 100=32b, 101=40b.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10 0x00000004
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxTxParLpbkL1 BIT(25)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxRxLpbkL1 BIT(24)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxTxRevLpbkL1 BIT(23)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxTxParLpbkL0 BIT(22)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxRxLpbkL0 BIT(21)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxTxRevLpbkL0 BIT(20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxDataRateL1(_x) (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxDataRateL1_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxDataRateL1(_x) (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxDataRateL1_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxWordModeL1(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxWordModeL1_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxWordModeL1(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxWordModeL1_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxDataRateL0(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxDataRateL0_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxDataRateL0(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxDataRateL0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxWordModeL0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_RxWordModeL0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxWordModeL0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate10_TxWordModeL0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: CustWordModeDataRate32 - Customer Mode per-lane data-rate, word-mode and loopback macro lanes 3 and 2
    Bits: 31:26 RFU(rw) - Reserved.
    Bits: 25    RxTxParLpbkL3(rw) - Lane 3 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 24    TxRxLpbkL3(rw) - Lane 3 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 23    RxTxRevLpbkL3(rw) - Lane 3 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 22    RxTxParLpbkL2(rw) - Lane 2 RX to TX parallel reverse loopback enable 1 = Loopback mode.
    Bits: 21    TxRxLpbkL2(rw) - Lane 2 Forward loopback from TX to RX 1 = Loopback mode.
    Bits: 20    RxTxRevLpbkL2(rw) - Lane 2 RX to TX analog reverse loopback. Rx data after CDR is looped to TX driver 1 = Loopback mode.
    Bits: 19:18 RxDataRateL3(rw) - RX data rate L3 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 17:16 TxDataRateL3(rw) - TX data rate L3 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits: 15:13 RxWordModeL3(rw) - RX word mode L3 001=10b, 011=20b, 100=32b, 101=40b.
    Bits: 12:10 TxWordModeL3(rw) - TX word mode L3 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  9:8  RxDataRateL2(rw) - RX data rate L2 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  7:6  TxDataRateL2(rw) - TX data rate L2 00=Full, 01=Half, 10=quarter, 11=fifth.
    Bits:  5:3  RxWordModeL2(rw) - RX word mode L2 001=10b, 011=20b, 100=32b, 101=40b.
    Bits:  2:0  TxWordModeL2(rw) - TX word mode L2 001=10b, 011=20b, 100=32b, 101=40b.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32 0x00000008
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RFU(_x) (((_x) & 0x3f) << 26)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RFU_of(_x) (((_x) >> 26) & 0x3f)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxTxParLpbkL3 BIT(25)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxRxLpbkL3 BIT(24)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxTxRevLpbkL3 BIT(23)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxTxParLpbkL2 BIT(22)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxRxLpbkL2 BIT(21)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxTxRevLpbkL2 BIT(20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxDataRateL3(_x) (((_x) & 0x3) << 18)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxDataRateL3_of(_x) (((_x) >> 18) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxDataRateL3(_x) (((_x) & 0x3) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxDataRateL3_of(_x) (((_x) >> 16) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxWordModeL3(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxWordModeL3_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxWordModeL3(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxWordModeL3_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxDataRateL2(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxDataRateL2_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxDataRateL2(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxDataRateL2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxWordModeL2(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_RxWordModeL2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxWordModeL2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustWordModeDataRate32_TxWordModeL2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: CustPllSelRateChange - Customer Mode rate change, usrclk div and PLL select.
    Bits: 31:22 RFU(rw) - Reserved.
    Bits: 21:19 LsUsrClkDiv(rw) - LsUsrClk divider is value + 1.
    Bits: 18:16 HsUsrClkDiv(rw) - HsUsrClk divider is value + 1.
    Bits: 15:12 TxPllSel(rw) - TX PLL select per lane. 1=LS 0=HS.
    Bits: 11:8  RxPllSel(rw) - RX PLL select per lane. 1=LS 0=HS.
    Bits:  7:4  TxRateChange(rw) - Per Lane Start TX rate changes sequence. Toggle this bit from low to high to start the rate change. Minimum pulse width should be 4 refclk cycles.
    Bits:  3:0  RxRateChange(rw) - Per Lane Start RX rate changes sequence. Toggle this bit from low to high to start the rate change. Minimum pulse width should be 4 refclk cycles.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange  0x0000000c
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_RFU(_x) (((_x) & 0x3ff) << 22)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_RFU_of(_x) (((_x) >> 22) & 0x3ff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_LsUsrClkDiv(_x) (((_x) & 0x7) << 19)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_LsUsrClkDiv_of(_x) (((_x) >> 19) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_HsUsrClkDiv(_x) (((_x) & 0x7) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_HsUsrClkDiv_of(_x) (((_x) >> 16) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_TxPllSel(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_TxPllSel_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_RxPllSel(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_RxPllSel_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_TxRateChange(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_TxRateChange_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_RxRateChange(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllSelRateChange_RxRateChange_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: ExtClkDivCtl - Per lane ext. TX clock divider control.
    Bits: 31:28 RxPreReady(ro) - Per Lane RX pre ready after RX calibration is completed:.
    Bits: 27:20 RFU(rw) - Reserved.
    Bits: 19:16 TxClkDivPllSel(rw) - Per Lane PLL Select for TX clock divider. HS=0, LS=1;
    Bits: 15:12 TxClkDivReset(rw) - Per Lane Reset for TX clock divider. Reset=1;
    Bits: 11:9  TxClkDivisorL3(rw) - Lane 3 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
    Bits:  8:6  TxClkDivisorL2(rw) - Lane 2 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
    Bits:  5:3  TxClkDivisorL1(rw) - Lane 1 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
    Bits:  2:0  TxClkDivisorL0(rw) - Lane 0 TX clock divider. 001=FULL, 010=Half, 100=Quarter, 101=Fifth. 000=OFF
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl          0x00000010
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_RxPreReady(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_RxPreReady_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_RFU(_x) (((_x) & 0xff) << 20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_RFU_of(_x) (((_x) >> 20) & 0xff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivPllSel(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivPllSel_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivReset(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivReset_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL3(_x) (((_x) & 0x7) << 9)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL3_of(_x) (((_x) >> 9) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL2(_x) (((_x) & 0x7) << 6)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL2_of(_x) (((_x) >> 6) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL1(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_ExtClkDivCtl_TxClkDivisorL0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: CustPllDivCtl - Customer mode PLL FB and PostDiv settings.
    Bits: 31    LsPllRefClkDivReset(rw) - LS PLL (CmuLs) RefClk divider reset.
    Bits: 30:29 RFULs(rw) - Reserved.
    Bits: 28    LsPllForceCal(rw) - LS PLL (CmuLs) Forcce VCO Calibration. Set hi and then set low to start.
    Bits: 27    LsPllPostDiv(rw) - LS PLL (CmuLs) Serial clock post divider. 0=div1, 1=div2.
    Bits: 26:25 LsPllRefClkDiv(rw) - LS PLL (CmuLs) RefClk divider. 00=div1, 01=div2, 10=div4, 11=div8.
    Bits: 24:16 LsPllFbDiv(rw) - LS PLL (CmuLs) Feedback divider. default 33 for 10.3125G.
    Bits: 15    HsPllRefClkDivReset(rw) - HS PLL (CmuHs) RefClk divider reset.
    Bits: 14:13 RFUHs(rw) - Reserved.
    Bits: 12    HsPllForceCal(rw) - HS PLL (CmuHs) Forcce VCO Calibration. Set hi and then set low to start.
    Bits: 11    HsPllPostDiv(rw) - HS PLL (CmuHs) Serial clock post divider. 0=div1, 1=div2.
    Bits: 10:9  HsPllRefClkDiv(rw) - HS PLL (CmuHs) RefClk divider. 00=div1, 01=div2, 10=div4, 11=div8.
    Bits:  8:0  HsPllFbDiv(rw) - HS PLL (CmuHs) Feedback divider. default 40 for 12.5G.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl         0x00000014
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllRefClkDivReset BIT(31)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_RFULs(_x) (((_x) & 0x3) << 29)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_RFULs_of(_x) (((_x) >> 29) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllForceCal BIT(28)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllPostDiv BIT(27)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllRefClkDiv(_x) (((_x) & 0x3) << 25)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllRefClkDiv_of(_x) (((_x) >> 25) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllFbDiv(_x) (((_x) & 0x1ff) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_LsPllFbDiv_of(_x) (((_x) >> 16) & 0x1ff)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllRefClkDivReset BIT(15)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_RFUHs(_x) (((_x) & 0x3) << 13)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_RFUHs_of(_x) (((_x) >> 13) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllForceCal BIT(12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllPostDiv BIT(11)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllRefClkDiv(_x) (((_x) & 0x3) << 9)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllRefClkDiv_of(_x) (((_x) >> 9) & 0x3)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllFbDiv(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPllDivCtl_HsPllFbDiv_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: CustPiSpdSel - Per lane speed select for CDR linearity.
    Bits: 31:28 BitSkip(rw) - Macro per-lane bits to bit skip capture logic. Write a 1 to send skip pulse. Self clearing.
    Bits: 27:24 DmeModeForce(rw) - Macro per-lane bits to force DME mode.
    Bits: 23:20 RFUSpd(rw) - Reserved.
    Bits: 19:16 RxTermDisable(rw) - Macro per-lane bits to disable rx termination.
    Bits: 15:12 PiSpdSelLn3(rw) - Select current for CDR linearity at lower data rates.
    Bits: 11:8  PiSpdSelLn2(rw) - Select current for CDR linearity at lower data rates.
    Bits:  7:4  PiSpdSelLn1(rw) - Select current for CDR linearity at lower data rates.
    Bits:  3:0  PiSpdSelLn0(rw) - Select current for CDR linearity at lower data rates.
*/
#define NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel          0x00000018
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_BitSkip(_x) (((_x) & 0xf) << 28)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_BitSkip_of(_x) (((_x) >> 28) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_DmeModeForce(_x) (((_x) & 0xf) << 24)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_DmeModeForce_of(_x) (((_x) >> 24) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_RFUSpd(_x) (((_x) & 0xf) << 20)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_RFUSpd_of(_x) (((_x) >> 20) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_RxTermDisable(_x) (((_x) & 0xf) << 16)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_RxTermDisable_of(_x) (((_x) >> 16) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn3(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn3_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn2(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn1(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDESCUSTCTL_CustPiSpdSel_PiSpdSelLn0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr - Address for TX lane aprobe data.
    Bits:  3:0  AprobeTxAddr(rw) - Address for TX lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMAAprobeTxAddr(_x) (0x00000000 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeTxAddr 0x0000e000
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeTxAddr_AprobeTxAddr(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeTxAddr_AprobeTxAddr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr - Address for RX lane aprobe data.
    Bits:  7:3  AprobeRxAddr(rw) - Address for RX lane aprobe data.
    Bits:  2:0  AprobeRegRxTxAddr(rw) - Address for RX and TX regulator lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMAAprobeRxAddr(_x) (0x00000001 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMAAprobeRxAddr 0x0000e001
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRxAddr(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRxAddr_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRegRxTxAddr(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAAprobeRxAddr_AprobeRegRxTxAddr_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol - PMA Tx/RX lane control register.
    Bits:  3    RstLanePcsSoftTx(rw) - TX lane soft reset. Active Low
    Bits:  2    RstLanePcsSoftRx(rw) - RX lane soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstBypassEn(rw) - RX and TX lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
    Bits:  0    Cmnctlporhardrstbypass(rw) - RX and TX lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxLanecontrol(_x) (0x00000002 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLanecontrol 0x0000e002
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_RstLanePcsSoftTx BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_RstLanePcsSoftRx BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_CmnCtlPorHardRstBypassEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPmaTxRxLaneControl_Cmnctlporhardrstbypass BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx - RX power state control.
    Bits:  4:0  LanePcsPstateRx(rw) - Rx Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALanePstateRx(_x) (0x00000003 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateRx 0x0000e003
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateRx_LanePcsPstateRx(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateRx_LanePcsPstateRx_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx - TX power state control.
    Bits:  4:0  LanePcsPstateTx(rw) - TX Lane power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALanePstateTx(_x) (0x00000004 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALanePstateTx 0x0000e004
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateTx_LanePcsPstateTx(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALanePstateTx_LanePcsPstateTx_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth - TX/RX PCS data width.
    Bits:  6:4  PcsTxDataWidth(rw) - Defines TX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
    Bits:  2:0  PcsRxDataWidth(rw) - Defines RX lane byte width mode. 000=8-bit, 001=10-bit, 010=16-bit, 011=20-bit,100=32-bit, 101=40-bit.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMADataWidth(_x) (0x00000005 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMADataWidth 0x0000e005
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsTxDataWidth(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsTxDataWidth_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsRxDataWidth(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMADataWidth_PcsRxDataWidth_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl - PMA Lane TX/RX Lane control .
    Bits:  6:4  PcsTxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
    Bits:  2:0  PcsRxDivRate(rw) - TX lane rate select. 00 - divide by 8 01 - divide by 4 10 - divide by 2 11 - divide by 1
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneControl(_x) (0x00000006 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneControl 0x0000e006
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsTxDivRate(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsTxDivRate_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsRxDivRate(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl3_PcsRxDivRate_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist - TX/RX Loopback and BIST register .
    Bits:  7    LBParRx2TxTimedEn(rw) - PMA Parallel RX-to-TX loop-back enable. Parallel loopback from the PMA receive lane 20-bit data ports, to the transmit lane 20-bit data ports. 0 = Disables loopback. 1 = Loops back the 20-bit receive data port to the transmitter.
    Bits:  6    LBTx2RxIoTimedEn(rw) - PMA TX-to-RX I/O serial loop-back enable (loop back done directly from TX to RX pads). Serial IO loopback from the transmit lane IO pins to the receive lane IO pins: 0 = Disables loopback. 1 = Loops back the driver IO signal to the RX IO pins.
    Bits:  5    LBTx2RxBufTimedEn(rw) - PMA TX-to-RX buffered serial loop-back enable (bypasses IO Driver). Serial transmit to receive buffered loopback: 0 = Disables loopback. 1 = Loops back the TX serializer output into the CDR.
    Bits:  4    LBRx2TxUntimedEn(rw) - PMA serial RX-to-TX loop-back enable (from AGC to IO Driver). Serial receive to transmit loopback: 0 = Disables loopback. 1 = Transmits the untimed, partial equalized RX signal out the transmit IO pins.
    Bits:  3    LBPllFbClk2CdrRefClkEn(rw) - PMA PLL feedback clock-to-CDR reference clock loopback enable.
    Bits:  2    LbCdrDivClk2TxEn(rw) - PMA CDR divided-recovered-clock loopback enable for internal GPON mode..
    Bits:  1    LBCdrDivClk2ExtEn(rw) - PMA CDR divided-recovered-clock loopback enable for external clean up GPON mode.
    Bits:  0    LBCdrClk2TxEn(rw) - PMA CDR recovered-clock loopback enable; asserted when PARRX2TXTIMEDEN is 1. Transmit bit clock select: 0 = Selects synthesizer bit clock for transmit. 1 = Selects CDR clock for transmit
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist(_x) (0x00000007 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist 0x0000e007
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBParRx2TxTimedEn BIT(7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBTx2RxIoTimedEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBTx2RxBufTimedEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBRx2TxUntimedEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBPllFbClk2CdrRefClkEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LbCdrDivClk2TxEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBCdrDivClk2ExtEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST_LBCdrClk2TxEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 - TX/RX Loopback and BIST register .
    Bits:  4    RxBistRxLocked(rw) - RX BIST locked indicator. '0' Indicates BIST is not word locked and error comparisons have not begun yet. '1' Indicates BIST is word locked and error comparisons have begun.
    Bits:  3    RxBistErrCntOvf(rw) - RX BIST error count overflow indicator. Indicates an overflow in the number of byte errors identified during the course of the test. This word is stable to sample when *_DONE_* signal has asserted.
    Bits:  2    RxBistDone(rw) - RX BIST completion: '0' Indicates test is not completed. '1' Indicates the test has completed, and will remain high until a new test is initiated.
    Bits:  1    PcsTxBistEn(rw) - Transmit lane BIST enable.
    Bits:  0    PcsRxBistEn(rw) - Recieve lane BIST enable.Active High
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist2(_x) (0x00000008 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist2 0x0000e008
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistRxLocked BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistErrCntOvf BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_RxBistDone BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_PcsTxBistEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST2_PcsRxBistEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg - TX/RX Loopback and BIST register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 - TX/RX Loopback and BIST register .
    Bits:  7:0  RxBistErrCount(rw) - RX BIST error count word. Indicates the number of byte errors identified during the course of the test.This word is stable to sample when *_DONE_* signal has asserted.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist3Reg(_x) (0x00000009 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALoopBackBist3(_x) (0x0000000a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3Reg 0x0000e009
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALoopBackBist3 0x0000e00a
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST3_RxBistErrCount(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALoopBackBIST3_RxBistErrCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus - TX/RX Lane Status Register .
    Bits:  5    RXSigdetCdrLock2Data(rw) - RX CDR Lock to Data status indicator 0 - CDR is locked to reference clock 1 - CDR is locked to data.
    Bits:  4    RxPpmLockStatus(rw) - RX lane PLL lock status. 1 = CDR VCO is locked to reference clock.
    Bits:  3    PcsOutTxStatus(rw) - TX lane state transition status. Indicates the TX has completed a requested state transition. 0 = TX Lane has not completed its state change. 1 = TX Lane has completed its state change.
    Bits:  2    PcsOutTxReady(rw) - TX lane ready status signal: 0 = TX Lane is not ready for data transmission. 1 = TX Lane is ready for data transmission.
    Bits:  1    PcsOutRxStatus(rw) - RX lane state transition status. Indicates the RX has completed a requested state transition. 0 = RX Lane has not completed its state change. 1 = RX Lane has completed its state change.
    Bits:  0    PcsOutRxReady(rw) - RX lane ready status signal. 0 = RX Lane is not ready for data transmission. 1 = RX Lane is ready for data transmission.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneStatus(_x) (0x0000000b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneStatus 0x0000e00b
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_RXSigdetCdrLock2Data BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_RxPpmLockStatus BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutTxStatus BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutTxReady BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutRxStatus BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneStatus_PcsOutRxReady BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyIclk(rw) - RX lane ICLK duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration(_x) (0x0000000c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration 0x0000e00c
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCal_RXCalDutyIclk(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCal_RXCalDutyIclk_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 - PMA TX/RX Lane Calibration Register .
    Bits:  4:0  RXCalDutyQclk(rw) - RX lane QCLK duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration2(_x) (0x0000000d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration2 0x0000e00d
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCalq_RXCalDutyQclk(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnCalq_RXCalDutyQclk_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData0(rw) - RX lane DATA0 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration3(_x) (0x0000000e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration3 0x0000e00e
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal3_RXCalOffsetData0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal3_RXCalOffsetData0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetData1(rw) - RX lane DATA1 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration4(_x) (0x0000000f + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration4 0x0000e00f
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal31_RXCalOffsetData1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal31_RXCalOffsetData1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge0(rw) - RX lane EDGE0 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration5(_x) (0x00000010 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration5 0x0000e010
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE0_RXCalOffsetEdge0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE0_RXCalOffsetEdge0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetEdge1(rw) - RX lane EDGE1 comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration6(_x) (0x00000011 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration6 0x0000e011
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE1_RXCalOffsetEdge1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalE1_RXCalOffsetEdge1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 - PMA TX/RX Lane Calibration Register
    Bits:  5:0  RXCalOffsetRoam(rw) - RX lane roam comparator offset calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibration7(_x) (0x00000012 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibration7 0x0000e012
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalR_RXCalOffsetRoam(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCalR_RXCalOffsetRoam_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq - PMA TX/RX Lane Calibration Register
    Bits:  3:0  RxCdrCalfoscCenterFreq(rw) - RX CDR VCO center frequency calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibrationCDRFreq(_x) (0x00000013 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationCDRFreq 0x0000e013
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal1_RxCdrCalfoscCenterFreq(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal1_RxCdrCalfoscCenterFreq_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk - PMA TX/RX Lane Calibration Register
    Bits:  4:0  TxCalTclkDuty(rw) - TX lane clock duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneCalibrationTxClk(_x) (0x00000014 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneCalibrationTxClk 0x0000e014
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal2_TxCalTclkDuty(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneCal2_TxCalTclkDuty_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 - RX cal eq control1 reg.
    Bits:  7:3  TxDrvLevN(rw) - Defines the total number of driver units allocated to sum of the taps. The maximum value is 5'd23.
    Bits:  2:0  TxDrvHLev(rw) - Transmit Amplitude control signal. Used to define the full-scale maximum swing of the driver. 000=Not Supported, 001=1070mVdiff-pkpk (Default), 010=1140mVdiff-pkpk, 011=1200mVdiff-pkpk, 100=1260mVdiff-pkpk, 101=1310mVdiff-pkpk, 110=1350mVdiff-pkpk, 111=1400mVdiff-pkpk6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl1(_x) (0x00000015 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl1 0x0000e015
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvLevN(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvLevN_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvHLev(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl1_TxDrvHLev_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 - RX cal eq control1 reg .
    Bits:  5:4  TxDrvLevNm2(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 2'h3.
    Bits:  3:0  TxDrvLevNm1(rw) - Defines the total number of driver units allocated to the first post-cursor(C+1)tap. The maximum value for C+1 is 4'h9.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl2(_x) (0x00000016 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl2 0x0000e016
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm2(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm2_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm1(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl2_TxDrvLevNm1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 - TX/RX Lane transmit Register .
    Bits:  4:3  TxDrvSlew(rw) - TX driver Slew Rate control:00 - 31ps ,01 - 33ps,10 - 68ps,11 - 170ps
    Bits:  2:0  TxDrvLevNP1(rw) - Defines the total number of driver units allocated to the first pre-cursor (C-1) tap. The maximum value for C-1 is 3'h6.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxDrvControl3(_x) (0x00000017 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxDrvControl3 0x0000e017
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvSlew(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvSlew_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvLevNP1(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxDrvControl3_TxDrvLevNP1_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve - PMA TX/RX Lane Receive Equalization Register .
    Bits:  5:3  RxCalEqDfepstapf3DB(rw) - DFE post-shaping tap 3dB frequency -3'b000: 684MHz -3'b001: 576MHz -3'b010: 514MHz -3'b011: 435MHz -3'b100: 354MHz -3'b101: 281MHz -3'b110: 199MHz -3'b111: 125MHz
    Bits:  2:0  RxCalEqDcGain(rw) - RX agc high frequency dc gain: -3'b000: -3dB -3'b001: -2.5dB -3'b010: -2dB -3'b011: -1.5dB -3'b100: -1dB -3'b101: -0.5dB -3'b110: -0dB -3'b111: 0.5dB
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve(_x) (0x00000018 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGen2 0x00008026
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve 0x0000e018
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDfepstapf3DB(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDfepstapf3DB_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDcGain(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive_RxCalEqDcGain_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:3  RxCalEqDfeTap1Gain(rw) - DFE first tap gain control -4'b0000: +1mVpeak -4'b0001: +10mVpeak . . . -4'b0110: +55mVpeak -4'b0111: +64mVpeak -4'b1000: -1mVpeak -4'b1001: -10mVpeak . . -4'b1110: -55mVpeak -4'b1111: -64mVpeak
    Bits:  2:0  RxCalEqDfepStapGain(rw) - DFE post-shaping tap gain 0: no pulse shaping tap 1: -24mVpeak 2: -45mVpeak 3: -64mVpeak 4: -80mVpeak 5: -93mVpeak 6: -101mVpeak 7: -105mVpeak
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve2(_x) (0x00000019 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve2 0x0000e019
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfeTap1Gain(_x) (((_x) & 0xf) << 3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfeTap1Gain_of(_x) (((_x) >> 3) & 0xf)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfepStapGain(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive2_RxCalEqDfepStapGain_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  7:4  RxCalEqDfeTap3Gain(rw) - DFE third tap gain control -4'b0000: +0mVpeak -4'b0001: +7mVpeak . . . -4'b0110: +38mVpeak -4'b0111: +44mVpeak -4'b1000: -0mVpeak -4'b1001: -7mVpeak . . -4'b1110: -38mVpeak -4'b1111: -44mVpeak
    Bits:  3:0  RxCalEqDfetap2Gain(rw) - DFE second tap gain control -4'b0000: +0mVpeak -4'b0001: +9mVpeak . . . -4'b0110: +46mVpeak -4'b0111: +53mVpeak -4'b1000: -0mVpeak -4'b1001: -9mVpeak . . -4'b1110: -46mVpeak -4'b1111: -53mVpeak
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve3(_x) (0x0000001a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap2GainLup 0x0000802d
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve3 0x0000e01a
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfeTap3Gain(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfeTap3Gain_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfetap2Gain(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive3_RxCalEqDfetap2Gain_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup - Equalization calibration lookup table
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 - PMA TX/RX Lane Receive Equalization Register .
    Bits:  6:4  RxCalEqLoFreqAgcGain(rw) - Low frequency agc gain (att) select -3'b000: Disconnected -3'b001: -18.5dB -3'b010: -12.5dB -3'b011: -9dB -3'b100: -6.5dB -3'b101: -4.5dB -3'b110: -2.9dB -3'b111: -1.6dB
    Bits:  3:0  RxCalEqDfetap4Gain(rw) - DFE fourth tap gain control -4'b0000: +0mVpeak -4'b0001: +6mVpeak . . . -4'b0110: +29mVpeak -4'b0111: +33mVpeak -4'b1000: -0mVpeak -4'b1001: -6mVpeak . . -4'b1110: -29mVpeak -4'b1111: -33mVpeak
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneRecieve4(_x) (0x0000001b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfeTap4GainLup 0x0000802e
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneRecieve4 0x0000e01b
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqLoFreqAgcGain(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqLoFreqAgcGain_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqDfetap4Gain(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALnreceive4_RxCalEqDfetap4Gain_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer - PMA TX/RX lane Adaptive Equalizer Register .
    Bits:  7:3  RxCalEqHiFreqAgcCap(rw) - High frequency agc boost control Min d0: Boost ~4dB Max d31: Boost ~20dB
    Bits:  2:0  PcsRxEqPreCalCodeSel(rw) - Provides a RX Equalizer Pre-Hint, prior to beginning adaptive equalization Please refer to Datasheet for a description of what backplane ranges the RX-Hint values are intended to support.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneAdaptiveEqualizer(_x) (0x0000001c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneAdaptiveEqualizer 0x0000e01c
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_RxCalEqHiFreqAgcCap(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_RxCalEqHiFreqAgcCap_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_PcsRxEqPreCalCodeSel(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq_PcsRxEqPreCalCodeSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  7:0  RxeqBestEyeVal(rw) - RX lane best eye point measurement result.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx(_x) (0x0000001d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx 0x0000e01d
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq2_RxeqBestEyeVal(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq2_RxeqBestEyeVal_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 - PMA TX/RX Lane Adaptive Equalizer Register .
    Bits:  5:0  RxeqBestEyeVal2(rw) - RX lane best eye point measurement result.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2(_x) (0x0000001e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPAMLaneAdaptiveEqualizerRx2 0x0000e01e
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq3_RxeqBestEyeVal2(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEq3_RxeqBestEyeVal2_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram - PMA TX/RX Lane On-Chip Eye Diagram Register.
    Bits:  2    RxCalRoamEyeMeasInCycleEn(rw) - RX lane single roam eye point measurement start signal. If asserted, single measurement at fix XADJUST and YADJUST is started.
    Bits:  1    RxCalEyeDiagFsminStart(rw) - Enables an eye diagram measurement within the PHY. 0 - Disables eye diagram measurement 1 - Enables eye diagram measurement
    Bits:  0    PcsRxeqStart(rw) - Adaptive RX Equalization enable 0 - Disables adaptive RX equalization 1 - Enables adaptive RX equalization
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneEyeDiagram(_x) (0x0000001f + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneEyeDiagram 0x0000e01f
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_RxCalRoamEyeMeasInCycleEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_RxCalEyeDiagFsminStart BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiag_PcsRxeqStart BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl - Lane Eye diag control reg.
    Bits:  3    RxeqDone(rw) - PHY Adaptive Equalization stauts Signal 0-Indicatest adaptive equalization results are not valid for sampling 1-Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  2    RxCalRoamEyeMeasDone(rw) - PMA Adaptive Equalization Status Signal 0 - Indicates adaptive equalization results are not valid for sampling. 1 - Indicates adaptive equalization is complete and results are valid for sampling.
    Bits:  1    RxCalEyeDiagFsmErr(rw) - Eye diagram error signal. Indicates if the measurement was invalid because the eye diagram was interrupted by the link entering electrical idle. 0 - Indicates eye diagram is valid. 1- Indicates an error occurred, and the eye diagram measurement should be re-run.
    Bits:  0    RxCalEyeDiagFsmDone(rw) - PHY Eye diagram measurement status signal: 0 - Indicates eye diagram results are not valid for sampling, 1 - Indicates eye diagram is complete and results are valid for sampling.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagCtl(_x) (0x00000020 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagCtl 0x0000e020
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxeqDone BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalRoamEyeMeasDone BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalEyeDiagFsmErr BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagCtl_RxCalEyeDiagFsmDone BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjust(rw) - 7-bit eye diagram time adjust control - 6-bits per UI - spans 2 UI
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDRxCalRoamXAdjustInit(_x) (0x00000021 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamXAdjustInit 0x0000e021
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamXAdjust_RxCalRoamXAdjust(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamXAdjust_RxCalRoamXAdjust_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit - RX Roam eye Y ADJUST initial value.
    Bits:  5:0  RxCalRoamYAdjustInit(rw) - 6-bit eye diagram voltage adjust control - spans +/-300mVdiff.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDRxCalRoamYAdjustInit(_x) (0x00000022 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamYAdjustInit 0x00008022
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDRxCalRoamYAdjustInit 0x0000e022
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamYAdjustInit_RxCalRoamYAdjustInit(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCalRoamYAdjustInit_RxCalRoamYAdjustInit_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo - Lane Eye diag lower 8 bits of status .
    Bits:  7:0  RxCalEyeDiagFsmEyeSumLo(rw) - Eye diagram status low bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagSumLo(_x) (0x00000023 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumLo 0x0000e023
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumLo_RxCalEyeDiagFsmEyeSumLo(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumLo_RxCalEyeDiagFsmEyeSumLo_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi - Lane Eye diag upper 6 bits of status .
    Bits:  5:0  RxCalEyeDiagFsmEyeSumHi(rw) - Eye diagram status hi bits. Safe for sampling when *DONE* signal has asserted 14'h0000 - Completely Closed Eye 14'hFFFF - Completely Open Eye.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagSumHi(_x) (0x00000024 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagSumHi 0x0000e024
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumHi_RxCalEyeDiagFsmEyeSumHi(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneEyeDiagSumHi_RxCalEyeDiagFsmEyeSumHi_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx - Lane Eye diag control reg .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 - Lane Eye diag control reg .
    Bits:  7:0  RxCalRoamEyeMeasAcc(rw) - RX lane single roam eye point measurement result. If 0, eye is open at current XADJUST and YADJUST settings
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagRx(_x) (0x00000025 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDLaneEyeDiagRx2(_x) (0x00000026 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx 0x0000e025
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDLaneEyeDiagRx2 0x0000e026
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAEyeDiag2_RxCalRoamEyeMeasAcc(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAEyeDiag2_RxCalRoamEyeMeasAcc_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope - Eye to capture edge .
    Bits:  3    RxScopeEn(rw) - Enable PHY to go into 'Scope' mode. Allows for outputting entire eye diagram data. Active High.
    Bits:  2    RxRoamXorBitSel(rw) - Eye diagram type select bit. 0=Select oscilloscope mode, 1=Select Bit Error Contour mode.
    Bits:  0    RxCdrFbDivSlipCycle(rw) - Rising edge detection enable to activate a feedback divider slip (ie, M+1) for one feedback cycle.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARoamScope(_x) (0x00000027 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARoamScope 0x0000e027
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxScopeEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxRoamXorBitSel BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARoamScope_RxCdrFbDivSlipCycle BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl - PMA Common/Synth Lane Control Register .
    Bits:  6    RxSigDetOvrEnCdrLock2Data(rw) - Enable for RXSIGDET_OVRCDRLOCK2DATA: 0 = CDR uses its internal locked to data signal, 1 = CDR uses RXSIGDET_OVRCDRLOCK2DATA.
    Bits:  5    RxSigDetOvrCdrLock2Data(rw) - Controls when the CDR should switch to lock to data, or lock to reference: 0 = CDR is locked to reference, 1 = CDR is locked to data.
    Bits:  4    PcsTxDetectRxEn(rw) - TX lane TX detect RX enable. Active High.
    Bits:  3    PcsTxBeaConEn(rw) - TX lane beacon enable. Active High.
    Bits:  2    PcsRxDmeEn(rw) - Receiver DME mode enable. Active High
    Bits:  1    CmnClkGenMuxselDpmatxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1]
    Bits:  0    CmnClkGenMuxselDpmarxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0] 1 - ICK_PMACNTLREF[1].
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMAlaneControl(_x) (0x00000028 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMAlaneControl 0x0000e028
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_RxSigDetOvrEnCdrLock2Data BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_RxSigDetOvrCdrLock2Data BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsTxDetectRxEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsTxBeaConEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_PcsRxDmeEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_CmnClkGenMuxselDpmatxRef BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMALaneControl2_CmnClkGenMuxselDpmarxRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv - PMA Common/Synth Lane Control Register .
    Bits:  0    PcsTxTxclkDiv2En(rw) - Enables divide by two on main Transmit clock in the PCS. Used in 32-bit mode.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxClkDiv(_x) (0x00000029 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxClkDiv 0x0000e029
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxclkDiv_PcsTxTxclkDiv2En BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel - Selects reference clock to be used in TX/RX DPMA .
    Bits:  1    CmnClkGenMuxSelDpmaTxRef(rw) - Selects reference clock to be used in TX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaRxRef(rw) - Selects reference clock to be used in RX DPMA. 0 - ICK_PMACNTLREF[0], 1 - ICK_PMACNTLREF[1].
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDCmnClkGenMuxSel(_x) (0x0000002a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDCmnClkGenMuxSel 0x0000e02a
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACmnClkGenMuxSel_CmnClkGenMuxSelDpmaTxRef BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACmnClkGenMuxSel_CmnClkGenMuxSelDpmaRxRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet - Control Signal Detection Max length .
    Bits:  4:2  RxSigdetRxtramdetDebounceCount(rw) - Controls signal detection max run-length 000 - 1* Rate/Reference Clock frequency 001 - 2* Rate/Reference Clock frequency 010 - 4* Rate/Reference Clock frequency 011 - 6* Rate/ Reference Clock frequency 100 - 8* Rate/ Reference Clock frequency 101 - 12* Rate/ Reference Clock frequency 110 - 16* Rate/ Reference Clock frequency 111 and above - 32* Rate/ Reference Clock frequency
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxTranDet(_x) (0x00000030 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxTranDet 0x0000e030
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTranDet_RxSigdetRxtramdetDebounceCount(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTranDet_RxSigdetRxtramdetDebounceCount_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    PCSRxEqLocWrEn(rw) - PCSRXEQ* override enable. Active Low.
    Bits:  6    PcsRXBistLocWrEn(rw) - PCSRXBIST* override enable. Active Low.
    Bits:  5    PcsRxLocWrEn(rw) - PCSRX* override enable. Active Low.
    Bits:  4    PcsOutTxLocWrEn(rw) - PCSOUTTX* override enable. Active Low.
    Bits:  3    PcsoutRxLocWrEn(rw) - PCSOUTRX* override enable. Active Low.
    Bits:  2    LbLocWrEn(rw) - LB* override enable. Active Low.
    Bits:  1    LanePcsStateLocWREn(rw) - LANEPCSPSTATE* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMALaneoverrideEn(_x) (0x00000055 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMALaneoverrideEn 0x0000e055
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PCSRxEqLocWrEn BIT(7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsRXBistLocWrEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsRxLocWrEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsOutTxLocWrEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_PcsoutRxLocWrEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_LbLocWrEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEn_LanePcsStateLocWREn BIT(1)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn - PMA PCS TX/RX Overide Enable .
    Bits:  7    RxCalRoamEyeAsInLocWrEn(rw) - RXCALROAMEYEMEASIN* override enable. Active Low.
    Bits:  6    RxCalOffSetLocWrEn(rw) - RXCALOFFSET* override enable. Active Low.
    Bits:  5    RxCalEyeDiaframSminLocWrEn(rw) - RXCALEYEDIAGFSMIN* override enable. Active Low.
    Bits:  4    RXcaleqLocRen(rw) - RXCALEQ* override enable. Active Low.
    Bits:  3    RxcalDutyLocwRen(rw) - RXCALDUTY* override enable. Active Low.
    Bits:  2    RstLanePcsSoftLowRen(rw) - RSTLANEPCSSOFT* override enable. Active Low.
    Bits:  1    PcsTxBistLocWrEn(rw) - PCSTXBIST* override enable. Active Low.
    Bits:  0    PcsTxLocWrEn(rw) - PCSTX* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxLaneoverrideEn(_x) (0x00000056 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxLaneoverrideEn 0x0000e056
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalRoamEyeAsInLocWrEn BIT(7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalOffSetLocWrEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxCalEyeDiaframSminLocWrEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RXcaleqLocRen BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RxcalDutyLocwRen BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_RstLanePcsSoftLowRen BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_PcsTxBistLocWrEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMAlaneOverrideEnRx_PcsTxLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal - PMA PCS TX/RX lane Calibration Register .
    Bits:  6    TxDrvLocWrEn(rw) - TXDRV* override enable. Active Low.
    Bits:  5    TxCalTclkDutyLocWrEn(rw) - TXCALTCLKDUTY* override enable. Active Low.
    Bits:  2    RxCdrCalFoscLocWrEn(rw) - RXCDRCALFOSC* override enable. Active Low.
    Bits:  1    RxCalRoamyAdjustLocWrEn(rw) - RXCALROAMYADJUST* override enable. Active Low
    Bits:  0    RxCalRoamXadjustLocWrEn(rw) - RXCALROAMXADJUST* override enable. Active Low
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxLaneCal(_x) (0x00000057 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxLaneCal 0x0000e057
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_TxDrvLocWrEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_TxCalTclkDutyLocWrEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCdrCalFoscLocWrEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCalRoamyAdjustLocWrEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxTxCal_RxCalRoamXadjustLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscHscountMuxd0(rw) - CDR VCO calibration register.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRVCOCal(_x) (0x00000065 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1(_x) (0x00000066 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCal 0x0000e065
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRVCOCalMuxD1 0x0000e066
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACDRCal_RxCDRCalFoscHscountMuxd0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMACDRCal_RxCDRCalFoscHscountMuxd0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD0(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMuxD0(_x) (0x00000067 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD0 0x0000e067
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD0_RxCDRCalFoscmeasCountMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD0_RxCDRCalFoscmeasCountMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRCalFoscmeasCountMuxD1(rw) - CDR VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMuxD1(_x) (0x00000068 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMuxD1 0x0000e068
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD1_RxCDRCalFoscmeasCountMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMuxD1_RxCDRCalFoscmeasCountMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD0(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 0. Used in 'Scope' mode.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0(_x) (0x00000069 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD0 0x0000e069
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD0_RxCDRFbDivSlipMdivMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD0_RxCDRFbDivSlipMdivMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 - PMA PCS TX/RX lane Calibration Register .
    Bits:  7:0  RxCDRFbDivSlipMdivMuxD1(rw) - CDR VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1(_x) (0x0000006a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCountMDivMuxD1 0x0000e06a
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD1_RxCDRFbDivSlipMdivMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCDRMdivMuxD1_RxCDRFbDivSlipMdivMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD0(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0(_x) (0x0000006b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD0 0x0000e06b
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMux_RxCdrRefckRefDivmuxD0(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMux_RxCdrRefckRefDivmuxD0_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  5:0  RxCdrRefckRefDivmuxD1(rw) - RX CDR reference clock divider depending on rate.0 - Divide by 1 .1 - Divide by 1. 2 - Divide by 2....
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1(_x) (0x0000006c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRRefClkDivMuxD1 0x0000e06c
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMuxD1_RxCdrRefckRefDivmuxD1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARefDivMuxD1_RxCdrRefckRefDivmuxD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 - PMA PCS TX/RX Lane Reference Clock Control Register .
    Bits:  7:4  RxCDRCalFoscCenterFreqPhintMuxD1(rw) -
    Bits:  3:0  RxCDRCalFoscCenterFreqPhintMuxD0(rw) -
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1(_x) (0x0000006d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMARxCDRCenterFreqMuxD1 0x0000e06d
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD1(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD1_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMARxCRDCenterFreq_RxCDRCalFoscCenterFreqPhintMuxD0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
  Register: SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn - PMA TX/RX Calibration Register.
    Bits:  3    TxCalClkDutyPreDivEnMuxD1(rw) -
    Bits:  2    TxCalClkDutyPreDivEnMuxD0(rw) -
    Bits:  1    RxCalDutyPreDivEnmuxd1(rw) -
    Bits:  0    RxCalDutyPreDivEnmuxd0(rw) -
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn(_x) (0x0000006e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPMACsr_SDPMATxRxCalDutyPreDivEn 0x0000e06e
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_TxCalClkDutyPreDivEnMuxD1 BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_TxCalClkDutyPreDivEnMuxD0 BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_RxCalDutyPreDivEnmuxd1 BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPMACsr_SerDesPMATxRXCalDuty_RxCalDutyPreDivEnmuxd0 BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg - PCS TX/RX Loop Back and BIST Register.
    Bits:  5    VpcsifEiosDetEn(rw) - EIOS detector enable.0 - Disabled.1 - Enabled. PCS continually monitors for EIOS ordered sets, and if detected, will de-assert ICTL_PIPE_RXVALID shortly after.No EIOS detected:CDR should remains in current state EOIS detected:CDR should lock to reference
    Bits:  4    VpcseqDebugstepEn(rw) - RX Equalization calibration debug control.
    Bits:  3    VpcSeqDebugEn(rw) - RX Equalization calibration debug enable.0 - Normal operation 1 - Debug mode. FSM will not change states until a positive edge of VPCSEQ_DEBUGSTEPEN is detected
    Bits:  2    VpcBistChkHold(rw) - PCS BIST check output error hold enable.0 - Do not hold error counter.1 - Hold error counter
    Bits:  1    vpcbistChkEn(rw) - PCS BIST check enable.0 - Normal operation 1 - Enable BIST check
    Bits:  0    VpcBistChkClr(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg(_x) (0x00001007 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg 0x0000f007
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcsifEiosDetEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcseqDebugstepEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcSeqDebugEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcBistChkHold BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_vpcbistChkEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg_VpcBistChkClr BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 - PCS TX/RX Loop Back and BIST Register.
    Bits:  7:6  VpcsencTxForceErr(rw) - 8b10b encoder error insertion control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Error transmitted
    Bits:  5:4  VpcsencForcePosDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte.0 - Normal operation 1 - Disparity forced to positive
    Bits:  3:2  VpcsencForceNegDisp(rw) - 8b10b encoder running disparity force control. Bit 0 corresponds to the lower byte of the data, bit 1 to the higher byte. 0 - Normal operation 1 - Disparity forced to negative.
    Bits:  1:0  VpcsBistDatamode(rw) - PCS BIST data mode selection. 0 - UDP 1 - prbs7 2 - prbs23 3 - prbs31
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg2(_x) (0x00001008 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg2 0x0000f008
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencTxForceErr(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencTxForceErr_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForcePosDisp(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForcePosDisp_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForceNegDisp(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsencForceNegDisp_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsBistDatamode(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg2_VpcsBistDatamode_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 - PCS TX/RX Loop Back and BIST Register.
    Bits:  6    VPcsBistGenInsertErr(rw) - PCS BIST generator insert error control. The LSB of the transmitted pattern is inverted on each positive edge of this signal
    Bits:  5:2  VPcsBistGenInitDelay(rw) - PCS BIST generator data pattern initial delay. Controls length of time for training pattern. If set to 0, training pattern is controlled by VPCSBIST_GEN_INIT_CTRL. Length of time is 2^ VPCSBIST_GEN_INIT_CTRL clock cycles, maximum 2^12
    Bits:  1    VPcsBistGenInitCtrl(rw) - PCS BIST generator initial pattern manual control. 0 - send training sequence 1 - send prbs / UDP Used only if VPCSBIST_GEN_INIT_DELAY = 0
    Bits:  0    VPcsBistGenEn(rw) - PCS BIST generator enable. 0 - Normal operation 1 - Enable BIST data send
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLoopBackReg3(_x) (0x00001009 + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLoopBackReg3 0x0000f009
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInsertErr BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitDelay(_x) (((_x) & 0xf) << 2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitDelay_of(_x) (((_x) >> 2) & 0xf)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenInitCtrl BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLoopBackReg3_VPcsBistGenEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxPolarity(rw) - Override for ICTL_PIPE_RXPOLARITY_ pins
    Bits:  6    VpcsifOvrRxeqEval(rw) - Override for ICTL_PIPE_RXEQEVAL_ pins
    Bits:  5:4  VpcsifOvrrate(rw) - Override for ICTL_PIPE_RATE_ pins
    Bits:  3:2  VpcsifOvrPowerDown(rw) - Override for ICTL_PIPE_POWERDOWN_ pins
    Bits:  1:0  VpcsifOvrDataBusWidth(rw) - Override for ICTL_PIPE_DATABUSWIDTH_ pins
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg(_x) (0x0000100a + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg 0x0000f00a
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrRxPolarity BIT(7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrRxeqEval BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrrate(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrrate_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrPowerDown(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrPowerDown_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrDataBusWidth(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg_VpcsifOvrDataBusWidth_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 - PCS TX/RX Lane Control Register.
    Bits:  7:6  VpcsifOvrTxEleCidle(rw) - Override for ICTL_PIPE_TXELECIDLE_ pins
    Bits:  5    VpcsifOvrTxDtCtRxLb(rw) - Override for ICTL_PIPE_TXDTCTRX_LB_ pins
    Bits:  4    VpcsifOvrTxCompliance(rw) - Override for ICTL_PIPE_TXCOMPLIANCE_ pins
    Bits:  3    VpcsifOvrRxStandBy(rw) - Override for ICTL_PIPE_RXSTANDBY_ pins
    Bits:  2:0  VpcsifOvrRxPresentHint(rw) - Override for ICTL_PIPE_RXPRESETHINT_ pins
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg1(_x) (0x0000100b + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg1 0x0000f00b
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxEleCidle(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxEleCidle_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxDtCtRxLb BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrTxCompliance BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxStandBy BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxPresentHint(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg2_VpcsifOvrRxPresentHint_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 - PCS TX/RX Lane Control Register.
    Bits:  4    VPcsLbNe(rw) - PIPE Near End loopback enable.0 - Normal operation 1 - TX to RX loopback enabled.
    Bits:  3    VpcsLbFe(rw) - PCS BIST check error counter clear enable.0 - Normal operation 1 - Clear error counter.
    Bits:  2    VpcsifOvrRxEqClr(rw) - Override for RXEQCLR pins
    Bits:  1    VpcsifOvrRst(rw) - Override for IRST_PIPE_RST_Lx_B_A pins
    Bits:  0    VpcsifOvrBlockAlignControl(rw) - Override for VPCSIF_OVR_BLOCKALIGNCONTROL_ pins
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg2(_x) (0x0000100c + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg2 0x0000f00c
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VPcsLbNe BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsLbFe BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrRxEqClr BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrRst BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg3_VpcsifOvrBlockAlignControl BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 - PCS TX/RX Lane Control Register.
    Bits:  7    VpcsifOvrRxstandByEna(rw) - Enables VPCSIF_OVR_RXSTANDBY to override external pin
    Bits:  6    VpcsifOvrRxPresentHintena(rw) - Enables VPCSIF_OVR_RXPRESETHINT to override external pin
    Bits:  5    VpcsifOvrRxPolarityEna(rw) - Enables VPCSIF_OVR_RXPOLARITY to override external pin
    Bits:  4    VpcsifOvrRxEqEvalEna(rw) - Enables VPCSIF_OVR_RXEQEVAL to override external pin
    Bits:  3    VpcsifOvrRstEna(rw) - Enables VPCSIF_OVR_RST to override external pin
    Bits:  2    VpcsifOvrRateEna(rw) - Enables VPCSIF_OVR_RATE to override external pin
    Bits:  1    VpcsifOvrpowerDowmEna(rw) - Enables VPCSIF_OVR_POWERDOWN to override external pin
    Bits:  0    VpcsifOvrDataBusWidthEna(rw) - Enables VPCSIF_OVR_DATABUSWIDTH to override external pin
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg3(_x) (0x0000100d + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg3 0x0000f00d
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxstandByEna BIT(7)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxPresentHintena BIT(6)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxPolarityEna BIT(5)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRxEqEvalEna BIT(4)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRstEna BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrRateEna BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrpowerDowmEna BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg4_VpcsifOvrDataBusWidthEna BIT(0)
/*----------------------------------------------------------------
  Register: SerDesPMAPCSLane[4]_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
  Register: SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 - PCS TX/RX Lane Control Register.
    Bits:  3    VpcsifOvrtxEleCidleEna(rw) - Enables VPCSIF_OVR_TXELECIDLE to override external pin
    Bits:  2    VpcsifovrTxDtcTrxLbEna(rw) - Enables VPCSIF_OVR_TXDTCTRX_LB to override external pin
    Bits:  1    VpcsifOvrTxComplianceEna(rw) - Enables VPCSIF_OVR_TXCOMPLIANCE to override external pin
    Bits:  0    VpcsifOvrBlockAlignControlEna(rw) - Enables VPCSIF_OVR_BLOCKALIGNCONTROL to override external pin
*/
#define NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SDPCSLaneControlReg4(_x) (0x0000100e + (0x2000 * ((_x) & 0x3)))
#define NFP3800_NBI_MACS_SerDesWriteBroadcast_SerDesPCSCsr_SDPCSLaneControlReg4 0x0000f00e
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrtxEleCidleEna BIT(3)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifovrTxDtcTrxLbEna BIT(2)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrTxComplianceEna BIT(1)
#define   NFP3800_NBI_MACS_SerDesPMAPCSLane_SerDesPCSCsr_SerDesPCSLaneControlReg5_VpcsifOvrBlockAlignControlEna BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr - Address for aprobe common lane.
    Bits:  6:4  SerDesAprobeSynAddr(rw) - Address for Synth lane aprobe data.
    Bits:  3:0  SerDesAprobeCmnAddr(rw) - Address for common and Synth regulator lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr 0x00008000
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeSynAddr(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeSynAddr_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeCmnAddr(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDAprobeCmnAddr_SerDesAprobeCmnAddr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr - Address for Synth lane aprobe data.
    Bits:  4:0  AprobeSynthAddr(rw) - Address for synth lane aprobe data.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr 0x00008001
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr_AprobeSynthAddr(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAAprobeSynthAddr_AprobeSynthAddr_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl - PMA Common/Synth lane control register
    Bits:  2    RstCmnPcsSoftSynth(rw) - Synth soft reset. Active Low
    Bits:  1    CmnCtlPorHardRstByPassSynth(rw) - Common lane hard reset.0 - Hard Reset is asserted.1 - Hard Reset is de-asserted
    Bits:  0    CmnCtlPorHardRstByPassEnSynth(rw) - Common lane hard reset control.0 - Hard reset is taken from the interface pins.1 - Hard reset is taken from registers
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl 0x00008002
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_RstCmnPcsSoftSynth BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_CmnCtlPorHardRstByPassSynth BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACommonSynthLaneControl_CmnCtlPorHardRstByPassEnSynth BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth - Common PCS pstate synth.
    Bits:  4:0  CmnPcsStateSynth(rw) - Synth power state control. 00001 =Power Down, 00010 =P2, 00100 =P1, 01000 =P0s, 10000 =P0.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth 0x00008003
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth_CmnPcsStateSynth(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPcsPstatesynth_CmnPcsStateSynth_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl - Common Test Bus status reg 1.
    Bits:  2    SynthPpmLockStatus(rw) - Synth lane PLL lock status. 1 - Synth VCO is locked to reference clock.
    Bits:  1    PcsOutSynthStatus(rw) - Synth lane state transition status. Indicates when the Synth has completed a requested state transition. 0 - Synth has not completed its state change. 1 - Synth has completed its state change.
    Bits:  0    PcsOutSynthReady(rw) - Synth lane ready status signal. 0 - Synth is not ready for data transmission. 1 - Synth is ready for data transmission.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl 0x00008004
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_SynthPpmLockStatus BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_PcsOutSynthStatus BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthControl_PcsOutSynthReady BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl - Common and Synth refclock control.
    Bits:  4    CmnRefCkBufSynthRefEn(rw) - Synth reference clock enable. Active High.
    Bits:  3    CmnRefCkBufRxRefEn(rw) - RX lane reference clock enable. Active High.
    Bits:  2    CmnClkGenMuxSelPcsRef(rw) - Selects reference clock to be used in PCS. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  1    CmnClkGenMuxSelDpmaSynthRef(rw) - Selects reference clock to be used in Synth lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
    Bits:  0    CmnClkGenMuxSelDpmaCmnRef(rw) - Selects reference clock to be used in Common lane DPMA. 0 - ICK_PMACNTLREF[0]. 1 - ICK_PMACNTLREF[1].
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl 0x00008005
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnRefCkBufSynthRefEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnRefCkBufRxRefEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelPcsRef BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelDpmaSynthRef BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnSynthRefClkControl_CmnClkGenMuxSelDpmaCmnRef BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl - Common/synth reference clock control.
    Bits:  7:6  CmnrefCkDrvRefinpMacntl0(rw) - Reference clock output select for OCK_PMACNTLREF_0 DPMA clock. 00 - From bumps, ICK_CMNREF 01 - From SOC reference clock input, ICK_CMNREFSOC 10 - From right-side clock repeater network, ICK_REFBUSRIGHT 11 - From left-side clock repeater network, ICK_REFBUSLEFT
    Bits:  5:3  CmnRefCkdrvRefBusright2leftoutCtl(rw) -
    Bits:  2:0  CmnRefCkdrvRefBusleft2rightoutCtl(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl 0x00008006
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnrefCkDrvRefinpMacntl0(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnrefCkDrvRefinpMacntl0_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusright2leftoutCtl(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusright2leftoutCtl_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusleft2rightoutCtl(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRefClkCtl_CmnRefCkdrvRefBusleft2rightoutCtl_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl - PMA Common/Synth Lane Reference Clock Control Register.
    Bits:  7:6  SynthRefCkRefInCtl(rw) - Synth lane reference clock select.
    Bits:  5:4  RxCdrRefCkRefClkSel(rw) - RX lane reference clock select..
    Bits:  3:2  CmnRefCkDrvRefSocEn(rw) - RX lane reference clock select..
    Bits:  1:0  CmnRefCkdrvRefInPmACntl1(rw) - Enable for OCK_REFSOC 0 - OCK_REFSOC disabled and output at logic 0 1 - OCK_REFSOC enabled and outputs a copy of ICK_PMA_REFSOC
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl 0x00008007
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_of(_x) (((_x) >> 6) & 0x3)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REF (0)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFSOC (1)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFBUSRIGHT (2)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_SynthRefCkRefInCtl_ICK_REFBUSLEFT (3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_of(_x) (((_x) >> 4) & 0x3)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REF (0)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFSOC (1)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFBUSRIGHT (2)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_RxCdrRefCkRefClkSel_ICK_REFBUSLEFT (3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_of(_x) (((_x) >> 2) & 0x3)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REF (0)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFSOC (1)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFBUSRIGHT (2)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkDrvRefSocEn_ICK_REFBUSLEFT (3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkdrvRefInPmACntl1(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneRefClkCtl_CmnRefCkdrvRefInPmACntl1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 - PMA Common/Synth Lane Control Register
    Bits:  6    RxEqCalEn(rw) - RX Equalization FSM enable. Active High.
    Bits:  5    CmnPcsSynthCkBypassEn(rw) - PCS Synth lane clock bypass enable. Active High.
    Bits:  4:3  CmnPcsRdyStatModeSel(rw) - Controls how Synth, TX and RX lane ready and status signals are controlled.
    Bits:  2    CmnPcsTxEnable(rw) - Transmit datapath FIFO enable. Active High.
    Bits:  1    CmnPcsPcieGen3En(rw) - PCIe Gen3 rate change. 1 - Gen3 rate change is requested.
    Bits:  0    CmnPcieGen3LutSel(rw) - PCIe Gen3 rate change LUT select. Active High.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3 0x00008008
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_RxEqCalEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsSynthCkBypassEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsRdyStatModeSel(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsRdyStatModeSel_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsTxEnable BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcsPcieGen3En BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl3_CmnPcieGen3LutSel BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  CmnRefCkBufTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnCalTcTerm(rw) - Common lane termination calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration 0x00008009
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnRefCkBufTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnRefCkBufTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnCalTcTerm(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration_CmnCalTcTerm_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 - PMA Common/Synth Lane Calibration Registers
    Bits:  5:3  TxTermCal(rw) - Termination calibration value for bias bandgap.
    Bits:  2:0  CmnBgBiasTermCal(rw) - Common lane termination calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2 0x0000800a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_TxTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_TxTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_CmnBgBiasTermCal(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCommonSynthCalibration2_CmnBgBiasTermCal_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal - PMA Common/Synth Lane Register.
    Bits:  5:3  RxTermCal(rw) - RX lane termination calibration value.
    Bits:  2:0  RxDfeTermCal(rw) - RX lane DFE Termination calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal 0x0000800b
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxTermCal(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxTermCal_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxDfeTermCal(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneTermCal_RxDfeTermCal_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal - PMA Common/Synth Lane Calibration Register.
    Bits:  3:0  SynthCalFoscCenterFreq(rw) - RX lane ICLK duty calibration code.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal 0x0000800c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal_SynthCalFoscCenterFreq(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneCal_SynthCalFoscCenterFreq_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 - PMA Common/Synth Lane Control Register.
    Bits:  5    RxPowerSave(rw) - Power saving mode enable. Active High.Disables RX roam comparator.
    Bits:  3    PcsEn(rw) - Override for ICTL_PCS_EN_NT control pin.0 Multi Mode.1- PCIe Mode.
    Bits:  2    LbSynthPllFbclk2CdrRefclkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock..
    Bits:  1    LbSynthCdrDivclk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
    Bits:  0    CmnCalSynthLoopTimingEn(rw) - Looptiming mode enable. Active High. CDR recovered clock used as the reference clock for Synth VCO..
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4 0x0000800d
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_RxPowerSave BIT(5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_PcsEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_LbSynthPllFbclk2CdrRefclkEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_LbSynthCdrDivclk2TxEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl4_CmnCalSynthLoopTimingEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 - PMA Common/Synth Lane Status Registers.
    Bits:  3    MemTstEn(rw) - Memory test enable. Active High.
    Bits:  2:0  MemTstBitSel(rw) - Memory select signal test. The memory bit select will be passed to aprobe, if proper aprobe address is set.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2 0x0000800e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstBitSel(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus2_MemTstBitSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneControl - PMA Common/Synth Lane Control Register.
    Bits:  4:3  RxLosDetThresh(rw) - LOS Detect Threshold Level.
    Bits:  2:0  RxElecidleSigDetThresh(rw) - Signal Detect Threshold Level.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl 0x0000800f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxLosDetThresh(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxLosDetThresh_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxElecidleSigDetThresh(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneControl_RxElecidleSigDetThresh_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 - PMA Common/Synth Lane Status Register.
    Bits:  3    CmnTstBusSampleEn(rw) - TX lane soft reset. Active Low
    Bits:  2    CmnTstBusLmonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  1    CmnTstBusHmonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  0    CmnTstBusAsyncEn(rw) - Testbus read or write enable. Active High
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3 0x00008010
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusSampleEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusLmonitor BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusHmonitor BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus3_CmnTstBusAsyncEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 - PMA Common/Synth Lane Status Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 - PMA Common/Synth Lane Status Register.
    Bits:  7:0  CmnTstBus(rw) - PHY Testbus status registers. Section 3.2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_0 0x00008011
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_1 0x00008012
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_2 0x00008013
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_3 0x00008014
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatus4_4 0x00008015
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALaneStatus4_CmnTstBus(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALaneStatus4_CmnTstBus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel - Testbus Select. Section 3.2.
    Bits:  7:0  CmnTstBusSel(rw) - Testbus select. Section 3.2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel 0x00008016
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel_CmnTstBusSel(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneStatusBusSel_CmnTstBusSel_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit - PMA Lane Transmit Control Register.
    Bits:  7:6  CmnTxPipeHlevLup2(rw) - TX IO driver HLEV look-up table entry
    Bits:  5:3  CmnTxPipeHlevlup1(rw) - TX IO driver HLEV look-up table entry.
    Bits:  2:0  CmnTxPipeHlevlup0(rw) - TX IO driver HLEV look-up table entry.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit 0x00008017
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevLup2(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevLup2_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup1(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup1_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit_CmnTxPipeHlevlup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 - PMA Lane Transmit Control Register.
    Bits:  4:0  CmnTxPipelevnLup0(rw) - TX IO driver LEVN look-up table entry 0
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2 0x00008018
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2_CmnTxPipelevnLup0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit2_CmnTxPipelevnLup0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 - PMA Lane Transmit Control Register.
    Bits:  3:0  CmnTxPipelevnmLup0(rw) - TX IO driver LEVNM1 look-up table entry 0
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3 0x00008019
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3_CmnTxPipelevnmLup0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit3_CmnTxPipelevnmLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 - PMA Lane Transmit Control Register.
    Bits:  5:4  CmnTxPipeTxdrvSlewGen3(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen3. If PCIEMODE_SEL=1. This value is used if PCIEMODE_SEL=0.
    Bits:  3:2  CmnTxPipeTxdrvSlewGen2(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen2 If PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
    Bits:  1:0  CmnTxPipeTxdrvSlewGen1(rw) - TX IO driver slew-rate look-up table entry for PCIE Gen1 if PCIEMODE_SEL=1. This value is not used if PCIEMODE_SEL=0.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4 0x0000801a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen3(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen3_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen2(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen2_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen1(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALaneTransmit4_CmnTxPipeTxdrvSlewGen1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr - PMA Common Synth Lane Loop Back and BIST Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 - PMA Common Synth Lane Loop Back and BIST Register
    Bits:  7:0  RxBistCdrLock2DataPostAmble(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr 0x0000801b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMALoopBackBistRxCdr2 0x0000801c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALoopBackBIST4_RxBistCdrLock2DataPostAmble(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMALoopBackBIST4_RxBistCdrLock2DataPostAmble_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR - Delay in CDR switching from "locked to reference" mode to "locked to the data" mode.
    Bits:  7:0  RxLock2DataTmr(rw) - TBD DESCRIPTION NEEDED
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR 0x0000801d
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR_RxLock2DataTmr(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxLock2DataTMR_RxLock2DataTmr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqCoarseIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter 0x0000801e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter_RxeqCoarseIterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqIter_RxeqCoarseIterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine - Common/synth Lane Adaptive Equalizer Register
    Bits:  6:0  RxeqFineIterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine 0x0000801f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine_RxeqFineIterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneRxEqFine_RxeqFineIterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 - RX CDR VCO fine frequency cal value.
    Bits:  7:0  SynthCalFoscInt(rw) - Synth lane VCO fine frequency calibration value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1 0x00008020
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1_SynthCalFoscInt(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDLaneCdrCalCalFOscIntLn1_SynthCalFoscInt_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit - RX Roam eye X ADJUST initial value.
    Bits:  6:0  RxCalRoamXAdjustInit(rw) - RX Roam eye X ADJUST initial value.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit 0x00008021
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit_RxCalRoamXAdjustInit(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDRxCalRoamXAdjustInit_RxCalRoamXAdjustInit_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 - Common block control 2.
    Bits:  7    TxWPtrInitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  6:4  TxWPtrInit(rw) - TX parallel data path initial read pointer.
    Bits:  3:2  TxDvrReplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver.
    Bits:  1    LbSynthPllFbClk2CdrRefClkEn(rw) - Loopback the Synth feedback clock as CDR VCO Reference clock.
    Bits:  0    LbSynthCdrDivClk2TxEn(rw) - Loop-timing mode enable. The transmit PLL uses a divided version of the recovered CDR clock as its reference.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2 0x00008023
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInitDiv BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInit(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxWPtrInit_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxDvrReplicaMode(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_TxDvrReplicaMode_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_LbSynthPllFbClk2CdrRefClkEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDCmnBlockControl2_LbSynthCdrDivClk2TxEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup - PMA Common/Synth Lane Adaptive Equalizer Registers
    Bits:  7:0  RxEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0_NT_ inputs.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup 0x00008024
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup_RxEqLookupCodeEn(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqLookup_RxEqLookupCodeEn_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode - PMA Lane Adaptive Equalizer Register.
    Bits:  2:0  RxEqLooklastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode 0x00008025
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode_RxEqLooklastCode(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMArxLookupLastCode_RxEqLooklastCode_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 - PCIe Gen2 Equalization control - AGC High Frequency Gain.
    Bits:  6:3  RxEqDfeTap1GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2 0x00008027
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfeTap1GainGen2(_x) (((_x) & 0xf) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfeTap1GainGen2_of(_x) (((_x) >> 3) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfePSTapGainGen2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDcgainGen2_RxEqDfePSTapGainGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 - PCIe Gen2 Equalization control.
    Bits:  7:4  RxEqDfeTap3GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-3 tap gain.
    Bits:  3:0  RxEqDfeTap2GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2 0x00008028
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap3GainGen2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap3GainGen2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap2GainGen2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainGen2_RxEqDfeTap2GainGen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 - PCIe Gen2 Equalization control.
    Bits:  6:4  RxEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  3:0  RxEqDftAp4GainGen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-4 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2 0x00008029
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqLoFreqAgcGainGen2(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqLoFreqAgcGainGen2_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqDftAp4GainGen2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDfetapGen2_RxEqDftAp4GainGen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq - PCIe Gen2 Equalization control.
    Bits:  4:0  RxEqHiFreqAgcCapGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq 0x0000802a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq_RxEqHiFreqAgcCapGen2(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreq_RxEqHiFreqAgcCapGen2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain - Equalization calibration lookup table
    Bits:  5:3  RxEqDfepstapf3DBLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency
    Bits:  2:0  RxEqDcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain 0x0000802b
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDfepstapf3DBLup0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDfepstapf3DBLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDcGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqDCGain_RxEqDcGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 - Equalization calibration lookup table
    Bits:  6:3  RxEqDfeTap1GainLup(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain
    Bits:  2:0  RxEqDfePSTapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0 0x0000802c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfeTap1GainLup(_x) (((_x) & 0xf) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfeTap1GainLup_of(_x) (((_x) >> 3) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfePSTapGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqGainLup0_RxEqDfePSTapGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxEqHiFreqLup0 0x00008030
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivFdiv 0x00008031
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode1 0x00008032
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDiv_SynthFDivFDiv(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDiv_SynthFDivFDiv_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 - Synth Lane Control Register
    Bits:  2:0  SynthFDivFDiv(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2 0x00008033
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2_SynthFDivFDiv(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscmaxCode2_SynthFDivFDiv_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscUpdateCycle(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle 0x00008035
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle_SynthFDivSscUpdateCycle(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscUpdateCycle_SynthFDivSscUpdateCycle_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod - Synth Lane Control Register
    Bits:  3    SynthfDivStrFdiv(rw) -
    Bits:  2    SynthfDivSscIntfilterFreezeen(rw) -
    Bits:  1    SynthfDivSscGenEn(rw) -
    Bits:  0    SynthfDivmodulatorEn(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod 0x00008036
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivStrFdiv BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivSscIntfilterFreezeen BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivSscGenEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivMod_SynthfDivmodulatorEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk - Synth PCS Div Clock0
    Bits:  7    SynthPcsPostDivClk0En(rw) - Synth PCS Post Div Clock Enable
    Bits:  6:0  SynthPcsPostDivClk0(rw) - Synth PCS Post Div Clock.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk 0x00008037
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0En BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPCSDivClk_SynthPcsPostDivClk0_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat310(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat310 0x00008038
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat2310 0x00008039
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat3310 0x0000803a
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat4310 0x0000803b
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT_TXBistPat310(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT_TXBistPat310_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat6332(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat6332 0x0000803c
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat26332 0x0000803d
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat36332 0x0000803e
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat46332 0x0000803f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT63_TXBistPat6332(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT63_TXBistPat6332_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 - BIST transmit 80-bit internal memory pattern
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 - BIST transmit 80-bit internal memory pattern
    Bits:  7:0  TXBistPat7964(rw) - BIST transmit 80-bit internal memory pattern (set of bits).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat7964 0x00008040
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistPat27964 0x00008041
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT79_TXBistPat7964(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMATxBistPAT79_TXBistPat7964_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst - OOB Burst Time
    Bits:  7:0  TxBistOoBtBurst(rw) - OOB Burst Time (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst 0x00008042
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst_TxBistOoBtBurst(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtBurst_TxBistOoBtBurst_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComRstInit(rw) - OOB ComReset/ComInit Idle Time - 1 (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit 0x00008043
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit_TxBistOoBtComRstInit(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComRstInit_TxBistOoBtComRstInit_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas - OOB ComSas Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComSas(rw) - OOB ComSas Idle Time - 1 (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas 0x00008044
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas_TxBistOoBtComSas(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistOoBtComsas_TxBistOoBtComSas_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake - OOB ComWake Idle Time - 1 (Word Clock UI).
    Bits:  7:0  TxBistOoBtComWake(rw) - OOB ComWake Idle Time - 1 (Word Clock UI).
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake 0x00008045
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake_TxBistOoBtComWake(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBistComWake_TxBistOoBtComWake_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode - PMA PCS common BIST mode Select.
    Bits:  5    TxBISTBitErrorEn(rw) - Single-Bit error detection enable (on posedge).
    Bits:  4:3  CmnPCSBISToobmode(rw) - OOB Mode (for 80-bit memory pattern mode only, ignored otherwise). 0 - Disabled 1 - OOB ComReset/ComInit 2 - OOB ComWake 3 - OOB ComSas.
    Bits:  2:0  CmnPCSBISTModeSel(rw) - Selects the transmit BIST mode: 0 - Uses the 80-bit internal memory pattern (w/ OOB) 1 - Uses a 27 PRBS pattern 2 - Uses a 223 PRBS pattern 3 - Uses a 231 PRBS pattern 4 - Uses a D10.2 clock pattern 5 - Uses a half rate 1100 clock pattern.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode 0x00008050
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_TxBISTBitErrorEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISToobmode(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISToobmode_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISTModeSel(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPCSBISTMode_CmnPCSBISTModeSel_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS - PMA TX BIST PRBS mode.
    Bits:  3:2  TxDrvreplicaMode(rw) - Defines the drive strength of transmit replica path. Used to reduce the amount of simultaneous switching IO noise generated by the transmit driver. 00 - No replica path enabled 01 - Replica path is 25% scaled version of the main driver 10 - Replica path is 50% scaled version of the main driver 11 - Replica path is 75% scaled version of the main driver
    Bits:  1    TxBistRxBistErrEn(rw) - Enable error generation from RXBIST to TXBIST. Once this is set to 1, TXBIST will generate an error bit, if RXBIST detects bit error.
    Bits:  0    TxBISTPrbsRst(rw) - PRBS Reset. Active low
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS 0x00008051
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxDrvreplicaMode(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxDrvreplicaMode_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxBistRxBistErrEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxBISTPRBS_TxBISTPrbsRst BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl - PMA TX/RX termination control register.
    Bits:  5:4  TxTermCoarse(rw) - TX lane calibration impedance setting.
    Bits:  3:2  RxTermModeSelect(rw) - RX termination modes setting.
    Bits:  1:0  RxTermCoarse(rw) - RX lane calibration impedance setting.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl 0x00008052
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_of(_x) (((_x) >> 4) & 0x3)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_85Ohms (0)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_100Ohms (1)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_TxTermCoarse_120Ohms (2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermModeSelect(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermModeSelect_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_of(_x) (((_x) >> 0) & 0x3)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_85Ohms (0)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_100Ohms (1)
#define     NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnRxTxTermControl_RxTermCoarse_120Ohms (2)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR - PMA TX/RX Write Pointer.
    Bits:  7:6  TxWptrinitDiv(rw) - TX parallel data path initial read pointer at 32 or 40 bit mode.
    Bits:  5:4  TxWptrInit(rw) - TX parallel data path initial read pointer.
    Bits:  0    RxAgcDccCoupleEn(rw) - RX AGC DC Couple Enable.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR 0x00008053
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrinitDiv(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrinitDiv_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrInit(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_TxWptrInit_of(_x) (((_x) >> 4) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxTxPTR_RxAgcDccCoupleEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn - PMA PCS Common Overide Enable.
    Bits:  7    CmnPcsSynthLocWrEn(rw) - CMNPCSSYNTH* override enable. Active Low
    Bits:  6    CmnPcsRdyStatModeLocWrEn(rw) - CMNPCSRDYSTATMODE_* override enable. Active Low
    Bits:  5    CmnPcsPStateLocWrEn(rw) - CMNPCSPSTATE* override enable. Active Low.
    Bits:  4    CmnPcsBistLocWrEn(rw) - CMNPCSBIST* override enable. Active Low.
    Bits:  3    CmnPcsLocWrEn(rw) - CMNPCS* override enable. Active Low
    Bits:  2    CmnPcieGen3LocWrEn(rw) - CMNPCIEGEN3* override enable. Active Low.
    Bits:  1    CmncalTcLocWrEn(rw) - CMNCALTC* override enable. Active Low.
    Bits:  0    CmnBgBiasLocWrEn(rw) - CMNBGBIAS* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn 0x0000805f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsSynthLocWrEn BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsRdyStatModeLocWrEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsPStateLocWrEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsBistLocWrEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcsLocWrEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnPcieGen3LocWrEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmncalTcLocWrEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn_CmnBgBiasLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 - PMA PCS Common Overide Enable.
    Bits:  7    RxDfeLocWrEn(rw) - RXDFE* override enable. Active Low
    Bits:  6    RxCdrRefCkLocWrEn(rw) - RXCDRREFCK* override enable. Active Low
    Bits:  5    RstCmnPcsSoftLocWrEn(rw) - RSTCMNPCSSOFT* override enable. Active Low.
    Bits:  4    PcsOutSynthLocWrEn(rw) - PCSOUTSYNTH* override enable. Active Low.
    Bits:  3    PcslocWrEn(rw) - PCS_EN * override enable. Active Low
    Bits:  2    CmnTstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low.
    Bits:  1    CmnRefCkDrvLocwRen(rw) - CMNREFCKDRV* override enable. Active Low.
    Bits:  0    CmnRefCkBufLocWrEn(rw) - CMNREFCKBUF* override enable. Active Low.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2 0x00008060
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RxDfeLocWrEn BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RxCdrRefCkLocWrEn BIT(6)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_RstCmnPcsSoftLocWrEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_PcsOutSynthLocWrEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_PcslocWrEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnTstBusLocWrEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnRefCkDrvLocwRen BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnLaneoverrideEn2_CmnRefCkBufLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm - PMA TX/RX Terminal Overide Enable.
    Bits:  4    TxTermLocWrEn(rw) - TXTERM* override enable. Active Low.
    Bits:  3    SynthRefClkLocWrEn(rw) - SYNTHREFCK * override enable. Active Low.
    Bits:  2    SynthFDivLocWrEn(rw) - SYNTHFDIV* override enable. Active Low.
    Bits:  1    SynthCalFoscLocWrEn(rw) - SYNTHCALFOSC* override enable. Active Low.
    Bits:  0    RxTermLocWrEn(rw) - RXTERM* override enable. Active Low
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm 0x00008061
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_TxTermLocWrEn BIT(4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthRefClkLocWrEn BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthFDivLocWrEn BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_SynthCalFoscLocWrEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMATxRxTerm_RxTermLocWrEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter - PMA Integral loop filter timer.
    Bits:  7:4  SynthDpifGainDelayCountPow2(rw) - Synth integral loop filter gear-shifting timer
    Bits:  3:0  RxDpifgainDelayCountPow2(rw) - RX integral loop filter gear-shifting timer
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter 0x00008065
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_SynthDpifGainDelayCountPow2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_SynthDpifGainDelayCountPow2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_RxDpifgainDelayCountPow2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAIntegralLoopFilter_RxDpifgainDelayCountPow2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 - PMA timer used for termination resistance.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 - PMA timer used for termination resistance.
    Bits:  7:0  CmnCaltcMeasCount(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount1 0x00008066
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalTcmeasCount2 0x00008067
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAcmncal_CmnCaltcMeasCount(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAcmncal_CmnCaltcMeasCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0.
    Bits:  7:0  SynthCalFoscmeasCountMuxD0(rw) - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 0
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0 0x0000806a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0_SynthCalFoscmeasCountMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd0_SynthCalFoscmeasCountMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 - Synth VCO calibration configuration register used if *RXRATE_Lx_[2] is 1.
    Bits:  7:0  SynthCalFoscmeasCountMuxD1(rw) - SYNTH VCO calibration configuration register used if *RXRATE_Lx_[2] is 1
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1 0x0000806b
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1_SynthCalFoscmeasCountMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAASynthCalFoscmeasCountMuxd1_SynthCalFoscmeasCountMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 0.
    Bits:  7:0  SynthFDivMdivMuxD0(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 0.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0 0x0000806c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0_SynthFDivMdivMuxD0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD0_SynthFDivMdivMuxD0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 - Synth VCO Feedback divider value used if *RXRATE_LX_[2] is 1.
    Bits:  7:0  SynthFDivMdivMuxD1(rw) - Synth VCO Feedback divider value used if *RXRATE_Lx_[2] is 1. Used in 'Scope' mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1 0x0000806d
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1_SynthFDivMdivMuxD1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthFDivMDivMuxD1_SynthFDivMdivMuxD1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle - PMA lane Calibration Register
    Bits:  7:1  CmnCalTcMeasPow2dlyCount1(rw) - Timer used in the termination resistance calibration configuration
    Bits:  0    CmnCalTcmeashalFCycleEn(rw) - Enables one of the termination resistance calibration configuration register.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle 0x0000806e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcMeasPow2dlyCount1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcMeasPow2dlyCount1_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnCalCycle_CmnCalTcmeashalFCycleEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY - PMA lane Calibration Register
    Bits:  4:0  CmnCalTcMeasPow2dlyCount2(rw) - Timer used in the termination resistance calibration configuration.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY 0x0000806f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY_CmnCalTcMeasPow2dlyCount2(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACmnPWR2DLY_CmnCalTcMeasPow2dlyCount2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr - PMA Rx Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr1(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr 0x00008070
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr_RxPPMWatchDogTmr1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr_RxPPMWatchDogTmr1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 - PMA Rx Watchdog Timer
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 - PMA Synth Watchdog Timer
    Bits:  7:0  RxPPMWatchDogTmr(rw) - Timer which determines the time between completion of RX CDR VCO calibration and assertion of LOCKSTATUS
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxWatchDogTmr2 0x00008071
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthWatchDogTmr2 0x00008073
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAWatchDogTmr2_RxPPMWatchDogTmr(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMAWatchDogTmr2_RxPPMWatchDogTmr_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 - PMA PCS TX/RX lane Calibration Register.
    Bits:  7:0  RxCDRCalFoscHscountMuxd1(rw) - CDR VCO calibration register.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1 0x00008072
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1_RxCDRCalFoscHscountMuxd1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCDRVCOCalMuxD1_RxCDRCalFoscHscountMuxd1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0 0x00008074
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0_CmnRpuOffsetUiS0q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q0_CmnRpuOffsetUiS0q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1 0x00008075
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1_CmnRpuOffsetUiS0q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q1_CmnRpuOffsetUiS0q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q2(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2 0x00008076
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2_CmnRpuOffsetUiS0q2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q2_CmnRpuOffsetUiS0q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q3(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3 0x00008077
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3_CmnRpuOffsetUiS0q3(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q3_CmnRpuOffsetUiS0q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q4(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4 0x00008078
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4_CmnRpuOffsetUiS0q4(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q4_CmnRpuOffsetUiS0q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q5(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5 0x00008079
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q5b 0x0000807a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset5_CmnRpuOffsetUiS0q5(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset5_CmnRpuOffsetUiS0q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q6(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6 0x0000807b
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6_CmnRpuOffsetUiS0q6(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q6_CmnRpuOffsetUiS0q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS0q7(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7 0x0000807c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7_CmnRpuOffsetUiS0q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets0q7_CmnRpuOffsetUiS0q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0 0x0000807d
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0_CmnRpuOffsetUiS1q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q0_CmnRpuOffsetUiS1q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1 0x0000807e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1_CmnRpuOffsetUiS1q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q1_CmnRpuOffsetUiS1q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q2(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2 0x0000807f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2_CmnRpuOffsetUiS1q2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q2_CmnRpuOffsetUiS1q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q3 0x00008080
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q32 0x00008081
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q1 0x00008093
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset31_CmnRpuOffsetUiS3q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset31_CmnRpuOffsetUiS3q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q4(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4 0x00008082
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4_CmnRpuOffsetUiS1q4(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q4_CmnRpuOffsetUiS1q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q5(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5 0x00008083
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5_CmnRpuOffsetUiS1q5(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q5_CmnRpuOffsetUiS1q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q6(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q6 0x00008084
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q62 0x00008085
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset61_CmnRpuOffsetUiS1q6(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset61_CmnRpuOffsetUiS1q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7 0x00008086
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7_CmnRpuOffsetUiS1q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets1q7_CmnRpuOffsetUiS1q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0 0x00008087
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0_CmnRpuOffsetUiS2q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q0_CmnRpuOffsetUiS2q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q1(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1 0x00008088
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1_CmnRpuOffsetUiS2q1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q1_CmnRpuOffsetUiS2q1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q2(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2 0x00008089
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2_CmnRpuOffsetUiS2q2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q2_CmnRpuOffsetUiS2q2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q3(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q3 0x0000808a
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q32 0x0000808b
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset32_CmnRpuOffsetUiS2q3(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset32_CmnRpuOffsetUiS2q3_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q4(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4 0x0000808c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4_CmnRpuOffsetUiS2q4(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q4_CmnRpuOffsetUiS2q4_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q5(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q5 0x0000808d
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q52 0x0000808e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset52_CmnRpuOffsetUiS2q5(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset52_CmnRpuOffsetUiS2q5_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS2q6(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q6 0x0000808f
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q622 0x00008090
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset62_CmnRpuOffsetUiS2q6(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset62_CmnRpuOffsetUiS2q6_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS1q7(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7 0x00008091
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7_CmnRpuOffsetUiS1q7(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets2q7_CmnRpuOffsetUiS1q7_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS3q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0 0x00008092
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0_CmnRpuOffsetUiS3q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets3q0_CmnRpuOffsetUiS3q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 - PMA Reference Clock Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 - PMA Reference Clock Control Register.
    Bits:  7:0  CmnRpuOffsetUiS4q0(rw) - Reset and power management unit timer.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q0 0x00008094
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMACMNRpuOffsets4q02 0x00008095
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset40_CmnRpuOffsetUiS4q0(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMACmnRpuOffset40_CmnRpuOffsetUiS4q0_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount2(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2 0x00008096
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2_RxCalRoamEyeMeasCount2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount2_RxCalRoamEyeMeasCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 - PMA on-Chip Eye Diagram Register.
    Bits:  7:0  RxCalRoamEyeMeasCount1(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1 0x00008097
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1_RxCalRoamEyeMeasCount1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxCalRoamCount1_RxCalRoamEyeMeasCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAModDiv - PMA lane Control Register.
    Bits:  7:4  SynthfbDivModdiv(rw) -
    Bits:  3:0  RxCdrFbDivModDiv(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv 0x00008098
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_SynthfbDivModdiv(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_SynthfbDivModdiv_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_RxCdrFbDivModDiv(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAModDiv_RxCdrFbDivModDiv_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode - PMA lane Reference Control Register.
    Bits:  6:1  SynthrefCkRefDivMuxD0(rw) - Synth VCO Reference clock divider.
    Bits:  0    PcieModeSel(rw) - PCI Express Mode or Multi Standard Select.0 - PMA enters multi-standard mode (including PCIe Gen3). Direct pin interface controls for TXEQ. RXEQ performed through memory registers.1 - PMA enters PCIe mode only. Direct pin interface controls for PCIe Gen 3. Look up tables for PCIe Gen1 / Gen2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode 0x00008099
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_SynthrefCkRefDivMuxD0(_x) (((_x) & 0x3f) << 1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_SynthrefCkRefDivMuxD0_of(_x) (((_x) >> 1) & 0x3f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMAPcieMode_PcieModeSel BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 - PMA lane Reference Control Register.
    Bits:  5:0  SynthrefCkRefDivMuxD1(rw) - Synth VCO Reference clock divider.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1 0x0000809a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1_SynthrefCkRefDivMuxD1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthRefDivMuxD1_SynthrefCkRefDivMuxD1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust - PMA Common/Synth lane Control Register.
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust - PMA Common/Synth lane Control Register.
    Bits:  3:2  RxDfebiasAdjustMuxd1(rw) -
    Bits:  1:0  RxDfebiasAdjustMuxd0(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxDfeBiasAdjust 0x0000809b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxHiFreqBiasAdjust 0x0000809c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd1(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd1_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd0(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMARxDfe_RxDfebiasAdjustMuxd0_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount 0x0000809d
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount_RxPpmPpmDriftCount1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount_RxPpmPpmDriftCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2 0x0000809e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2_RxPpmPpmDriftCount2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftCount2_RxPpmPpmDriftCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount1(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax 0x0000809f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax_RxPpmPpmDriftCount1(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax_RxPpmPpmDriftCount1_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  RxPpmPpmDriftCount2(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2 0x000080a0
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2_RxPpmPpmDriftCount2(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMARxPpmDriftMax2_RxPpmPpmDriftCount2_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax 0x000080a1
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax_SynthPpmPpmDriftCount(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax_SynthPpmPpmDriftCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftCount(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2 0x000080a2
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2_SynthPpmPpmDriftCount(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax2_SynthPpmPpmDriftCount_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) - Controls the frequency accuracy threshold (ppm) for lock detection CDR. Dependence is:PPMDRIFTMAX = (PPM/10'6)/(1+(PPM/10'6))'2*(4*PPMDRIFTCOUNT)
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12 0x000080a3
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12_SynthPpmPpmDriftMax(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax12_SynthPpmPpmDriftMax_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 - PMA Common/Synth lane Control Register.
    Bits:  7:0  SynthPpmPpmDriftMax(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22 0x000080a4
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22_SynthPpmPpmDriftMax(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthPpmDriftMax22_SynthPpmPpmDriftMax_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize - Synth Lane Control Register
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 - Synth Lane Control Register
    Bits:  7:0  SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize 0x000080aa
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize1 0x000080ab
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDivSsc_SynthFDivSscStepSize(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SerDesPMASynthfDivSsc_SynthFDivSscStepSize_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 - Synth Lane Control Register
    Bits:  0    SynthFDivSscStepSize(rw) - Synth Div
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2 0x000080ac
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPMACommMap_SDPMASynthfDivSscStepSize2_SynthFDivSscStepSize BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg - PCS Lane Status Register.
    Bits:  5    TstBusLocWrEn(rw) - CMNTSTBUS* override enable. Active Low
    Bits:  3    TstBusLMonitor(rw) - Testbus enable monitor for lows. Active High
    Bits:  2    TstBusHMonitor(rw) - Testbus enable monitor for highs. Active High
    Bits:  1    TstBusAsyncEn(rw) - Testbus read or write enable. Active high
    Bits:  0    MemTstEn(rw) - Memory test enable. Active High
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg 0x00009000
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusLocWrEn BIT(5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusLMonitor BIT(3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusHMonitor BIT(2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_TstBusAsyncEn BIT(1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg_MemTstEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 - PCS Lane Status Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b - PCS Lane Status Register .
    Bits:  7:0  TstBus(rw) - PHY Testbus status registers. Section 3.2
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusReg2 0x00009001
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS 0x00009002
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS2 0x00009003
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS3 0x00009004
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4 0x00009005
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSLaneStatusRegTSTBUS4b 0x00009006
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2_TstBus(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2_TstBus_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 - PCS Common/Synth Lane Loopback and BIST Register .
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
    Bits:  7:0  VpcBistGenSkpDelay(rw) - PCS BIST generator SKP insertion delay control. For PCIe Gen1 and PCIe Gen2, represents the number of clock cycles between SKP ordered sets inserted. For PCIe Gen3, represents the number of data blocks between SKPs.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay1 0x00009007
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCSbistGenSkpDelay2 0x00009008
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Vpc_VpcBistGenSkpDelay(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Vpc_VpcBistGenSkpDelay_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 - PCS BIST generator UDP pattern. LSB is transmitted first.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 - PCS BIST generator UDP pattern. LSB is transmitted first.
    Bits:  7:0  VpcsBistUdp(rw) - PCS BIST generator UDP pattern. LSB is transmitted first..
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP1 0x00009009
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP2 0x0000900a
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP3 0x0000900b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP4 0x0000900c
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP5 0x0000900d
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP6 0x0000900e
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP7 0x0000900f
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSVPCVPCSBistUDP8 0x00009010
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Udp_VpcsBistUdp(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSLaneStatusReg2Udp_VpcsBistUdp_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:3  VPcsEBufEmpty(rw) - Elastic buffer empty threshold
    Bits:  2:0  VPcsBistGenSkpCnt(rw) - PCS BIST generator SKP insertion count control. Number of SKP ordered sets to insert per delay cycle.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg 0x00009011
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsEBufEmpty(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsEBufEmpty_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsBistGenSkpCnt(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg_VPcsBistGenSkpCnt_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7:5  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
    Bits:  4:0  VPcsEbufFullM0(rw) - Elastic buffer full threshold, PCIe Gen1 and PCIe Gen2.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1 0x00009012
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM1(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM1_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM0(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg1_VPcsEbufFullM0_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  7    VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:2  VPcsEBufRdThresholdM0(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen1 and PCIe Gen2.
    Bits:  1:0  VPcsEbufFullM1(rw) - Elastic buffer full threshold, PCIe Gen3.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2 0x00009013
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VpcsBufRdThresholdM1 BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEBufRdThresholdM0(_x) (((_x) & 0x1f) << 2)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEBufRdThresholdM0_of(_x) (((_x) >> 2) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEbufFullM1(_x) (((_x) & 0x3) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg2_VPcsEbufFullM1_of(_x) (((_x) >> 0) & 0x3)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 - PCS Common/Synth Lane Clock Compensation Register.
    Bits:  3:0  VpcsBufRdThresholdM1(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3 0x00009014
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3_VpcsBufRdThresholdM1(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSClockConpReg3_VpcsBufRdThresholdM1_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
    Bits:  6:0  VPcsEqCoarseiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg 0x00009016
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VpcsEqCoarseRunMask BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VPcsEqCoarseiterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg_VPcsEqCoarseiterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqCoarseRunMask(rw) - Elastic buffer midpoint threshold. Sets the depth of the buffer while in PCIe Gen3.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg1 0x00009017
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg13 0x00009023
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq2_VpcsEqCoarseRunMask(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq2_VpcsEqCoarseRunMask_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:1  VPcsEqCoarseStep(rw) - RX Equalization calibration coarse mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
    Bits:  0    VpcsEqClrValsEn(rw) -
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2 0x00009018
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VPcsEqCoarseStep(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VPcsEqCoarseStep_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg2_VpcsEqClrValsEn BIT(0)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainGen2(rw) - PCIE Gen2 Equalization control - AGC low frequency gain.
    Bits:  2:0  VPcsEqDcGainGen2(rw) - PCIe Gen2 Equalization control - AGC high frequency gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3 0x00009019
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqLoFreqAgcGainGen2(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqLoFreqAgcGainGen2_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqDcGainGen2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg3_VPcsEqDcGainGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHoFreqAgcGainGen2(rw) - PCIe Gen2 Equalization control - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGaingen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4 0x0000901a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqHoFreqAgcGainGen2(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqHoFreqAgcGainGen2_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqDfePstapGaingen2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg4_VPcsEqDfePstapGaingen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1Gaingen2(rw) - PCIe Gen2 Equalization control - Discontinuity DFE N-1 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg5 0x0000901b
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg6 0x0000901c
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap2Gaingen2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap2Gaingen2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap1Gaingen2(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq6_VPcsEqDfetap1Gaingen2_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqDefpstapf3DbLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE 3dB cut-off frequency.
    Bits:  2:0  VPcsEqDefpstapf3DbGen2(rw) - PCIe Gen2 Equalization control - Pulse-shaping DFE 3dB cut-off frequency.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7 0x0000901d
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbLup0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbGen2(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg7_VPcsEqDefpstapf3DbGen2_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  5:3  VPcsEqLoFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC low frequency gain.
    Bits:  2:0  VpcseqDcgainLup0(rw) - Equalization calibration lookup table code 0 - AGC high frequency gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8 0x0000901e
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VPcsEqLoFreqAgcGainLup0(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VPcsEqLoFreqAgcGainLup0_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VpcseqDcgainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg8_VpcseqDcgainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:3  VPcsEqHiFreqAgcGainLup0(rw) - Equalization calibration lookup table code 0 - AGC AC Boost.
    Bits:  2:0  VPcsEqDfePstapGainLup0(rw) - Equalization calibration lookup table code 0 - Pulse-shaping DFE gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9 0x0000901f
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqHiFreqAgcGainLup0(_x) (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqHiFreqAgcGainLup0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqDfePstapGainLup0(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg9_VPcsEqDfePstapGainLup0_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap2GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-2 tap gain.
    Bits:  3:0  VPcsEqDfetap1GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-1 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10 0x00009020
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap2GainLup0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap2GainLup0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap1GainLup0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg10_VPcsEqDfetap1GainLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  VPcsEqDfetap4GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-4 tap gain.
    Bits:  3:0  VPcsEqDfetap3GainLup0(rw) - Equalization calibration lookup table code 0 - Discontinuity DFE N-3 tap gain.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11 0x00009021
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap4GainLup0(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap4GainLup0_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap3GainLup0(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg11_VPcsEqDfetap3GainLup0_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7    VpcsEqFineRunMask(rw) - Equalization calibration fine mode variable control mask. Each bit controls whether or not an equalization variable will be swept during fine mode.0 - Do not sweep variable 1 - Sweep variable Bit 0 - AGC low frequency gain Bit 1 - AGC high frequency gain Bit 2 - AGC AC Boost Bit 3 - Pulse-shaping DFE 3dB cut-off frequency Bit 4 - Pulse-shaping DFE gain Bit 5 - Discontinuity DFE N-1 tap gain.
    Bits:  6:0  VPcsEqFineiterNum(rw) - Equalization calibration course iteration count control. Sets the number of iterations performed during coarse mode.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12 0x00009022
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VpcsEqFineRunMask BIT(7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VPcsEqFineiterNum(_x) (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg12_VPcsEqFineiterNum_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:5  VPcsEqLookupLastCode(rw) - RX Equalization calibration lookup table last code control. Specifies the last lookup code in the table to be used.
    Bits:  4:0  VpcsEqFineStep(rw) - RX Equalization calibration fine mode step size. When swept, each variable starts from 0, and is increased by this value until saturated.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14 0x00009024
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VPcsEqLookupLastCode(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VPcsEqLookupLastCode_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VpcsEqFineStep(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg14_VpcsEqFineStep_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 - PCS Common/Synth Lane Adaptive Equalizer Register.
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:0  VpcsEqLookupCodeEn(rw) - Equalization calibration lookup table code control. When in lookup table mode controls whether or not the associated lookup code is included. Lookup codes 1-7 are predefined, lookup code 0 is defined by *_LUP0 inputs.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg15 0x00009025
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg16 0x00009026
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg17 0x00009027
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq14_VpcsEqLookupCodeEn(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SerDesPCSSynthLnEq14_VpcsEqLookupCodeEn_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:0  VPcsEqTimeOut(rw) - .
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18 0x00009028
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18_VPcsEqTimeOut(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg18_VPcsEqTimeOut_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  7:4  Vpcsg2SymaAlignUnLockCnt(rw) - PCIe Gen2 symbol alignment unlock control. Symbol aligner will not move to unlocked mode until this number of incorrectly aligned ALIGN symbols. Setting this value to 0 will result in the symbol aligner not being able to move out of the locked mode until either electrical idle or reset.
    Bits:  3:0  Vpcsg2SymaAlignLockCnt(rw) - PCIe Gen2 symbol alignment lock control. Symbol aligner will not move to locked mode until this number of correctly aligned ALIGN symbols are seen. Setting this value to 0 will result in the symbol aligner not attempting to align.
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19 0x00009029
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignUnLockCnt(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignUnLockCnt_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignLockCnt(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg19_Vpcsg2SymaAlignLockCnt_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 - PCS Common/Synth Lane Adaptive Equalizer Register.
    Bits:  3:1  VpcsEqLoFreqacGainSwpmin(rw) - .
    Bits:  0    PcsClkCtrl(rw) - .
*/
#define NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20 0x0000902a
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_VpcsEqLoFreqacGainSwpmin(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_VpcsEqLoFreqacGainSwpmin_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACS_SerDesCommLane_SerDesPCSCommMap_SDPCSlaneAdpEqReg20_PcsClkCtrl BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg0[2] - -
    Bits: 15    Resetb(rw) - CMU reset
    Bits: 14    Pdown(rw) - CMU power down
    Bits: 13    PllRefSel(rw) - Reference clock select, 0= refclk_p/n[0], 1= refclk_p/n[1]
    Bits: 12    RefClkbufPdown1(rw) - Power down input reference clock buffer 1
    Bits: 11    RefClkbufPdown0(rw) - Power down input reference clock buffer 0
    Bits: 10:8  RefClkbufStren(rw) - Drive strength control for input reference clock buffers
    Bits:  7:5  CalCountResol(rw) - Counter tap selection for VCO calibration coutner.
    Bits:  4    PdownVco(rw) - Power down both the VCO
    Bits:  3    PdownDiv(rw) - Powerdown feedback divider
    Bits:  2:1  RefclkRptPdown(rw) - Reference clock Repeater buffer power down
    Bits:  0    Pciegen3(rw) - gen3 mode sleection - Used only PCIE
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0(_x)              (0x00000000 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_Resetb         BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_Pdown          BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_PllRefSel      BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_RefClkbufPdown1 BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_RefClkbufPdown0 BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_RefClkbufStren(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_RefClkbufStren_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_CalCountResol(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_CalCountResol_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_PdownVco       BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_PdownDiv       BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_RefclkRptPdown(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_RefclkRptPdown_of(_x) (((_x) >> 1) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg0_Pciegen3       BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg1[2] - -
    Bits: 15    PllPdown(rw) - Power down pll and reference clock directly drives the output
    Bits: 14    PllBypass(rw) - Pll is bypassed and reference clock directly drives the output
    Bits: 13:10 PllCp(rw) - Charge pump current control bits.
    Bits:  9:5  PllCpSel(rw) - Sub Charge pump selection
    Bits:  4    IddtnOverride(rw) - Select between reg or pin
    Bits:  3    PllManualcal(rw) - Manual VCO calibration enable
    Bits:  2    PllEnaVco(rw) - Enables VCO ( for test purpose)
    Bits:  1    PllEnaVcoAAC(rw) - Enable VCO automatic amplitude control(For internal use only)
    Bits:  0    RefclkCmosSel(rw) - Select cmose refclk or cml refclk
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1(_x)              (0x00000004 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllPdown       BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllBypass      BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllCp(_x)      (((_x) & 0xf) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllCp_of(_x)   (((_x) >> 10) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllCpSel(_x)   (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllCpSel_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_IddtnOverride  BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllManualcal   BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllEnaVco      BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_PllEnaVcoAAC   BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg1_RefclkCmosSel  BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg2[2] - -
    Bits: 15:14 PllRefdiv(rw) - Reference clock divider selection 00 = 1, 01 = 2, 10 = 4, 11 = 8
    Bits: 13:5  PllFbdiv(rw) - PLL feedback divider selection (2 through 63)
    Bits:  4:1  PllLfres(rw) - Loop filter resistor control
    Bits:  0    FbclkSelRegOvr(rw) - PLL Low or High band select
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2(_x)              (0x00000008 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_PllRefdiv(_x)  (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_PllRefdiv_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_PllFbdiv(_x)   (((_x) & 0x1ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_PllFbdiv_of(_x) (((_x) >> 5) & 0x1ff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_PllLfres(_x)   (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_PllLfres_of(_x) (((_x) >> 1) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg2_FbclkSelRegOvr BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg3[2] - -
    Bits: 15:10 VcoManmomsel(rw) - Manual MOMCaP selection for manual VCO calibration
    Bits:  9:4  VcoMomselInit(rw) - Manual MOMCaP selection for initial value for VCO calibration
    Bits:  3:0  Vcovarsel(rw) - VCO varactor bank selection bits
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3(_x)              (0x0000000c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3_VcoManmomsel(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3_VcoManmomsel_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3_VcoMomselInit(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3_VcoMomselInit_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3_Vcovarsel(_x)  (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg3_Vcovarsel_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg4[2] - -
    Bits: 15:10 VcoManmomselPcie(rw) - Manual MOMCaP selection for manual VCO calibration, Used for PCIE Gen3 Only
    Bits:  9:4  VcoMomselInitPcie(rw) - Manual MOMCaP selection for initial value for VCO calibration- Used for PCIE Gen3 only
    Bits:  3:0  VcovarselPcie(rw) - VCO varactor bank selection bits
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4(_x)              (0x00000010 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4_VcoManmomselPcie(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4_VcoManmomselPcie_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4_VcoMomselInitPcie(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4_VcoMomselInitPcie_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4_VcovarselPcie(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg4_VcovarselPcie_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg5[2] - -
    Bits: 15:14 PllLfsmcap(rw) - Loop filter smoothing capacitor control
    Bits: 13:12 PllLfcap(rw) - Loop filter capacitor control
    Bits: 11:8  TermCalOs(rw) - PVT calibration term code offset value, MSB is sign bit, lsb are magnitude
    Bits:  3:1  PllLockResolution(rw) - Maximum allowed difference in the counters to determine PLL lock. Unipolar binary value.
    Bits:  0    PllResetb(rw) - PLL reset to reset VCOCAL, PVT cal and PLL
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5(_x)              (0x00000014 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllLfsmcap(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllLfsmcap_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllLfcap(_x)   (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllLfcap_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_TermCalOs(_x)  (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_TermCalOs_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllLockResolution(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllLockResolution_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg5_PllResetb      BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg6[2] - -
    Bits: 15    VcoCalibEna(rw) - Enable VCO calibration mode
    Bits: 14:11 PllVcocalsel(rw) - VCO calibration control voltage setting control bits
    Bits: 10:9  PllVregtrim(rw) - Voltage regulator Output voltage trim setting
    Bits:  8:4  PllVcobiasTrim(rw) - VCO bias Current trim setting
    Bits:  3    UsrClkBufEna(rw) - User clock output enable
    Bits:  2    ManPvtCal(rw) - Select between manual PVT cal or State machine driven pvt code. 0 = State machien drives the code and enable. 1 = Manual programming the pvt codes.
    Bits:  1    SerClkbufPdown(rw) - Power down for pll clock buffers
    Bits:  0    UsrClkby2Bypass(rw) - User clock output by2 divider bypass
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6(_x)              (0x00000018 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_VcoCalibEna    BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_PllVcocalsel(_x) (((_x) & 0xf) << 11)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_PllVcocalsel_of(_x) (((_x) >> 11) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_PllVregtrim(_x) (((_x) & 0x3) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_PllVregtrim_of(_x) (((_x) >> 9) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_PllVcobiasTrim(_x) (((_x) & 0x1f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_PllVcobiasTrim_of(_x) (((_x) >> 4) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_UsrClkBufEna   BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_ManPvtCal      BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_SerClkbufPdown BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg6_UsrClkby2Bypass BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg7[2] - -
    Bits: 15    PllLock(ro) - PLL Lock status bit
    Bits: 14    PllCalibDone(ro) - VCO calibration complete status bit
    Bits: 13:12 PllDet(ro) - PLL VCO calibration comparator output
    Bits: 11:10 VcoCalFail(ro) - VCO calibration state machine status bits
    Bits:  9:5  PvtCalUpOs(rw) - PVT calibration UP code Offset. MSB is sign bit, lsbs are magnitude
    Bits:  4:0  PvtCalDnOs(rw) - PVT calibration DN code Offset. MSB is sign bit, lsbs are magnitude
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7(_x)              (0x0000001c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PllLock        BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PllCalibDone   BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PllDet(_x)     (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PllDet_of(_x)  (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_VcoCalFail(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_VcoCalFail_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PvtCalUpOs(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PvtCalUpOs_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PvtCalDnOs(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg7_PvtCalDnOs_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg8[2] - -
    Bits: 15:14 TxDataRateCh3(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits: 13:12 TxDataRateCh2(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits: 11:10 TxDataRateCh1(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits:  9:8  TxDataRateCh0(rw) - Data rate selection for TX, use to geernate Parallel clock for TX 00 = Full rate, 01 = Half Rate, 10 = Quarter Rate, 11 = Fifth Rate
    Bits:  7:5  PllUcdiv(rw) - User clock divider, Supprots 1 to 7
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8(_x)              (0x00000020 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh3(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh3_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh2(_x) (((_x) & 0x3) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh2_of(_x) (((_x) >> 12) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh1(_x) (((_x) & 0x3) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh1_of(_x) (((_x) >> 10) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh0(_x) (((_x) & 0x3) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_TxDataRateCh0_of(_x) (((_x) >> 8) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_PllUcdiv(_x)   (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg8_PllUcdiv_of(_x) (((_x) >> 5) & 0x7)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg9[2] - -
    Bits: 15:13 TxWordModeCh3(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits: 12:10 TxWordModeCh2(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits:  9:7  TxWordModeCh1(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits:  6:4  TxWordModeCh0(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit, 010 = 16bit, 011 = 20bit, 100 = 32bit, 101 = 40bit, 110 = 64bit, 111 = 66bit
    Bits:  3    PllPostDivby2(rw) - PLL post divider used for PCIE
    Bits:  2    VbgBypassb(rw) - Bypass VBG reference and use 1.5Supply, active low
    Bits:  1    IgenBypass(rw) - Bypass VBG reference current, active high
    Bits:  0    IHsclkbufPd(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9(_x)              (0x00000024 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh3(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh3_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh2(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh2_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh1(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh1_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh0(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_TxWordModeCh0_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_PllPostDivby2  BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_VbgBypassb     BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_IgenBypass     BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg9_IHsclkbufPd    BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg10[2] - -
    Bits: 15:12 TxParClkbufPdown(rw) - Power down for parallel tx clock buffers
    Bits: 11    AtoEna(rw) - ATO logic enable
    Bits: 10:5  AtoSel(rw) - Selecting test signal for probe.
    Bits:  4:2  PllAmuxSel(rw) - Amux(ato) select for PLL ato signals
    Bits:  1    PllAmuxEn(rw) - Amux enable for pll signal
    Bits:  0    VregRefsel(rw) - Voltage regulator current select
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10(_x)             (0x00000028 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_TxParClkbufPdown(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_TxParClkbufPdown_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_AtoEna        BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_AtoSel(_x)    (((_x) & 0x3f) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_AtoSel_of(_x) (((_x) >> 5) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_PllAmuxSel(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_PllAmuxSel_of(_x) (((_x) >> 2) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_PllAmuxEn     BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg10_VregRefsel    BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg11[2] - -
    Bits: 15:8  PllSpareOut(ro) - Spare out for future enhancement
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg11(_x)             (0x0000002c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg11_PllSpareOut(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg11_PllSpareOut_of(_x) (((_x) >> 8) & 0xff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg12[2] - -
    Bits: 15:8  PllSpareIn(rw) - Spare in for future enhancement
    Bits:  7:4  StateDelay9(rw) - Reset sequence delay for TX ready assertion
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg12(_x)             (0x00000030 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg12_PllSpareIn(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg12_PllSpareIn_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg12_StateDelay9(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg12_StateDelay9_of(_x) (((_x) >> 4) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg13[2] - -
    Bits: 15:12 StateDelay1(rw) - Reset sequence different programmable stage delays between enables.
    Bits: 11:8  StateDelay2(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  7:4  StateDelay3(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  3:0  StateDelay4(rw) - Reset sequence different programmable stage delays between enables.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13(_x)             (0x00000034 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay1(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay1_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay2(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay2_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay3(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay3_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay4(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg13_StateDelay4_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg14[2] - -
    Bits: 15:12 StateDelay5(rw) - Reset sequence different programmable stage delays between enables.
    Bits: 11:8  StateDelay6(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  7:4  StateDelay7(rw) - Reset sequence different programmable stage delays between enables.
    Bits:  3:0  StateDelay8(rw) - Reset sequence different programmable stage delays between enables.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14(_x)             (0x00000038 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay5(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay5_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay6(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay6_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay7(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay7_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay8(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg14_StateDelay8_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg15[2] - -
    Bits: 15:8  TXReady(ro) - TX calibration completed and ready for Transmit
    Bits:  7:0  RXReady(ro) - RX calibration done and ready for data receive.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg15(_x)             (0x0000003c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg15_TXReady(_x)   (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg15_TXReady_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg15_RXReady(_x)   (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg15_RXReady_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg16[2] - -
    Bits: 15    TXRateChangeEnaCh0(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits: 14    RXRateChangeEnaCh0(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits: 13    TXRateChangeEnaCh1(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits: 12    RXRateChangeEnaCh1(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits: 11    TXRateChangeEnaCh2(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits: 10    RXRateChangeEnaCh2(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits:  9    TXRateChangeEnaCh3(rw) - Rate Change enable, toggling will trigger rate change for TX and all related reset
    Bits:  8    RXRateChangeEnaCh3(rw) - Rate Change enable, toggling will trigger rate change for RX and all related reset
    Bits:  7    StateMcBypass(rw) - State machine bypass, reset sequence to be controlled by customer pins.
    Bits:  6    CalibrationDoneOverride(rw) - Calibration output bypass for reset sequence state machine.
    Bits:  5    BypassPllLock(rw) - Bypass pll lock for faster simulation
    Bits:  4:2  VcocalWaitBtwCode(rw) - wait between freq band/momsel code changes during VCO calibrations.
    Bits:  1    PvtUpManEna(rw) - Enable pull up calibration manual mode
    Bits:  0    PvtDnManEna(rw) - Enable pull dn calibration manual mode
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16(_x)             (0x00000040 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_TXRateChangeEnaCh0 BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_RXRateChangeEnaCh0 BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_TXRateChangeEnaCh1 BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_RXRateChangeEnaCh1 BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_TXRateChangeEnaCh2 BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_RXRateChangeEnaCh2 BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_TXRateChangeEnaCh3 BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_RXRateChangeEnaCh3 BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_StateMcBypass BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_CalibrationDoneOverride BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_BypassPllLock BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_VcocalWaitBtwCode(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_VcocalWaitBtwCode_of(_x) (((_x) >> 2) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_PvtUpManEna   BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg16_PvtDnManEna   BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg17[2] - -
    Bits: 15    PvtTermManEna(rw) - Enable term calibration manual mode
    Bits: 14:8  PvtCodeR2a(rw) - Binary coded pull up/dn and term compensation bus for manual code entry
    Bits:  7:5  ChannelSel(rw) - Will be used to manual program term/pvt code manually. Term_r2a values goes to different channel based on the channel select 000 = Ch0, 001 = Ch1, 010 = Ch2, 011 = Ch3, 100 - 111 = Reserved.
    Bits:  4:0  TermInit(rw) - Termination compensation initial code
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17(_x)             (0x00000044 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_PvtTermManEna BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_PvtCodeR2a(_x) (((_x) & 0x7f) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_PvtCodeR2a_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_ChannelSel(_x) (((_x) & 0x7) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_ChannelSel_of(_x) (((_x) >> 5) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_TermInit(_x)  (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg17_TermInit_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg18[2] - -
    Bits: 15:12 RSTSEQCurrentState(ro) - Reset seq State machine current state for debug.
    Bits: 11:8  VCOCALCurrentState(ro) - VCO calibration state machine current state
    Bits:  7:4  CMUTERMCurrentState(ro) - Termination and pull up/dn calibration state machine current state.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18(_x)             (0x00000048 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18_RSTSEQCurrentState(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18_RSTSEQCurrentState_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18_VCOCALCurrentState(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18_VCOCALCurrentState_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18_CMUTERMCurrentState(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg18_CMUTERMCurrentState_of(_x) (((_x) >> 4) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg19[2] - -
    Bits: 15:10 PllVcomomsel(ro) - VCO calibrated mom code for readout
    Bits:  9:4  PllVcomomselPcie3(ro) - VCO calibrated mom code for readout
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg19(_x)             (0x0000004c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg19_PllVcomomsel(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg19_PllVcomomsel_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg19_PllVcomomselPcie3(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg19_PllVcomomselPcie3_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg20[2] - -
    Bits: 15:8  DrvupErrorFail(ro) - Error Status for drv pull up calibration
    Bits:  7:0  DrvdnErrorFail(ro) - Error Status for drv pull dn calibration
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg20(_x)             (0x00000050 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg20_DrvupErrorFail(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg20_DrvupErrorFail_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg20_DrvdnErrorFail(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg20_DrvdnErrorFail_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg21[2] - -
    Bits: 15:8  TermErrorFail(ro) - Error status for term calibration
    Bits:  7:3  TermCh0(ro) - Termination compensation code
    Bits:  2    PvtCalDone(ro) - Reserved
    Bits:  1    PvtCalibDoneOvr(rw) - Reserved
    Bits:  0    PllLockDone(ro) - PLL lock count completion status. After this bit is asserted, pll_lock value is valid. 0 = Not done 1 = Done
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21(_x)             (0x00000054 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_TermErrorFail(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_TermErrorFail_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_TermCh0(_x)   (((_x) & 0x1f) << 3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_TermCh0_of(_x) (((_x) >> 3) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_PvtCalDone    BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_PvtCalibDoneOvr BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg21_PllLockDone   BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg22[2] - -
    Bits: 15:9  PvtPCh0(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh0(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg22(_x)             (0x00000058 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg22_PvtPCh0(_x)   (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg22_PvtPCh0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg22_PvtNCh0(_x)   (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg22_PvtNCh0_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg23[2] - -
    Bits: 15:9  PvtPCh1(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh1(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg23(_x)             (0x0000005c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg23_PvtPCh1(_x)   (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg23_PvtPCh1_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg23_PvtNCh1(_x)   (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg23_PvtNCh1_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg24[2] - -
    Bits: 15:9  PvtPCh2(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh2(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg24(_x)             (0x00000060 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg24_PvtPCh2(_x)   (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg24_PvtPCh2_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg24_PvtNCh2(_x)   (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg24_PvtNCh2_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg25[2] - -
    Bits: 15:9  PvtPCh3(ro) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNCh3(ro) - Binary coded pull down compensation bus
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg25(_x)             (0x00000064 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg25_PvtPCh3(_x)   (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg25_PvtPCh3_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg25_PvtNCh3(_x)   (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg25_PvtNCh3_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg26[2] - -
    Bits: 15:9  PvtPInit(rw) - Binary coded pull up compensation bus
    Bits:  7:1  PvtNInit(rw) - Binary coded pull down compensation bus
    Bits:  0    ForcePllLock(rw) - Force pll lock
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg26(_x)             (0x00000068 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg26_PvtPInit(_x)  (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg26_PvtPInit_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg26_PvtNInit(_x)  (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg26_PvtNInit_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg26_ForcePllLock  BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg27[2] - -
    Bits: 15:13 RefVoltSelCh0(rw) - Reference voltage selection for ch0 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused ,110 = Unused, 111 = Unused.
    Bits: 12:10 RefVoltSelCh1(rw) - Reference voltage selection for Ch1 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused, 110 = Unused, 111 = Unused.
    Bits:  9:7  RefVoltSelCh2(rw) - Reference voltage selection for Ch2 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused, 110 = Unused, 111 = Unused.
    Bits:  6:4  RefVoltSelCh3(rw) - Reference voltage selection for Ch3 000 = drv 40ohm mode, 001 = drv 45ohm mode, 010 = drv 50ohm mode, 011 = drv 55ohm mode, 100 = drv 60ohm mode, 101 = Unused, 110 = Unused, 111 = Unused.
    Bits:  3:1  ClkbufStren(rw) - Drive strength control for RX and TX clock buffers
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27(_x)             (0x0000006c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh0(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh0_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh1(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh1_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh2(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh2_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh3(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_RefVoltSelCh3_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_ClkbufStren(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg27_ClkbufStren_of(_x) (((_x) >> 1) & 0x7)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg28[2] - -
    Bits: 15:0  StateMcOverrideCtrl(rw) - We use this bits for state machine override fucntions
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg28(_x)             (0x00000070 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg28_StateMcOverrideCtrl(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg28_StateMcOverrideCtrl_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg29[2] - -
    Bits: 15:11 TermCh1(ro) - Termination compensation code
    Bits: 10:6  TermCh2(ro) - Termination compensation code
    Bits:  5:1  TermCh3(ro) - Termination compensation code
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29(_x)             (0x00000074 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29_TermCh1(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29_TermCh1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29_TermCh2(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29_TermCh2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29_TermCh3(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg29_TermCh3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg30[2] - -
    Bits: 15:14 PllRefdivGen3(rw) - Reference clock divider selection 00 = 1, 01 = 2, 10 = 4, 11 = 8
    Bits: 13:5  PllFbdivGen3(rw) - PLL feedback divider selection
    Bits:  4    PllPostDivby2Gen3(rw) - PLL post divider used for PCIE
    Bits:  3    PcieMode(rw) - Set to 1 for PCIE operation
    Bits:  2:1  LockCount(rw) - Number of times to compare reference and feedback clocks to count down for pll lock qualification.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30(_x)             (0x00000078 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_PllRefdivGen3(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_PllRefdivGen3_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_PllFbdivGen3(_x) (((_x) & 0x1ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_PllFbdivGen3_of(_x) (((_x) >> 5) & 0x1ff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_PllPostDivby2Gen3 BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_PcieMode      BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_LockCount(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg30_LockCount_of(_x) (((_x) >> 1) & 0x3)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg31[2] - -
    Bits: 15:13 TxpclkbufStrenL0(rw) - Reserved
    Bits: 12:10 TxpclkbufStrenL1(rw) - Reserved
    Bits:  9:7  TxpclkbufStrenL2(rw) - Reserved
    Bits:  6:4  TxpclkbufStrenL3(rw) - Reserved
    Bits:  3    LosOverrideCh0(rw) - Force los to 0 for state machine to bypass
    Bits:  2    LosOverrideCh1(rw) - Force los to 0 for state machine to bypass
    Bits:  1    LosOverrideCh2(rw) - Force los to 0 for state machine to bypass
    Bits:  0    LosOverrideCh3(rw) - Force los to 0 for state machine to bypass
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31(_x)             (0x0000007c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL0(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL0_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL1(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL1_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL2(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL2_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL3(_x) (((_x) & 0x7) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_TxpclkbufStrenL3_of(_x) (((_x) >> 4) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_LosOverrideCh0 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_LosOverrideCh1 BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_LosOverrideCh2 BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg31_LosOverrideCh3 BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg32[2] - -
    Bits: 15    PinOverride(rw) - Override register for pin not controlled by cmode.
    Bits: 14    ForceVcocalStart(rw) - Force VCO calibr re-start
    Bits: 13    ClkDis(rw) - Unused
    Bits: 12    Iddtn(rw) - Active low
    Bits: 11    ForcePvtCalStart(rw) - Reserved
    Bits: 10    RefclkdivResetb(rw) - Refclk divider reset (active low) 0 = Reset 1 = Normal operation
    Bits:  9    PostDivby2Resetb(rw) - Reserved
    Bits:  8:7  IrefAdj(rw) - Adjusts the reference bias currents generated by the common-bias block of CMU.
    Bits:  6    ForceRateChangeRxCh0(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  5    ForceRateChangeTxCh0(rw) - Force ratechange from Regsiter or pin for TX
    Bits:  4    ForceRateChangeRxCh1(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  3    ForceRateChangeTxCh1(rw) - Force ratechange from Regsiter or pin for TX
    Bits:  2:1  PvtCalWaitSel(rw) - PVT calibration wait between code increment
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32(_x)             (0x00000080 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_PinOverride   BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ForceVcocalStart BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ClkDis        BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_Iddtn         BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ForcePvtCalStart BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_RefclkdivResetb BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_PostDivby2Resetb BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_IrefAdj(_x)   (((_x) & 0x3) << 7)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_IrefAdj_of(_x) (((_x) >> 7) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ForceRateChangeRxCh0 BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ForceRateChangeTxCh0 BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ForceRateChangeRxCh1 BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_ForceRateChangeTxCh1 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_PvtCalWaitSel(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg32_PvtCalWaitSel_of(_x) (((_x) >> 1) & 0x3)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg33[2] - -
    Bits: 15:0  CustomerModeInv(rw) - Takes back control from customer mode pins, use table in customer_mode 0 = customer mode 1 = non-customer mode
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg33(_x)             (0x00000084 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg33_CustomerModeInv(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg33_CustomerModeInv_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg34[2] - -
    Bits: 15:12 VcoCalVthHiMin(rw) - VCO control voltage threshold setting for fine calibration
    Bits: 11:8  VcoCalVthHiMax(rw) - VCO control voltage threshold setting for coarse calibration.
    Bits:  7:4  VcoCalVthLoMin(rw) - VCO control voltage threshold setting for coarse calibration. Digital code represents low voltage value, 16 steps between 0 to Vcc/2 (Vcc=1.5V). 0=0 15 = Vcc/2
    Bits:  3:0  VcoCalVthLoMax(rw) - VCO control voltage threshold setting for fine calibration. Digital code represents low voltage value, 16 steps between 0 to Vcc/2 (Vcc=1.5V). 0=0 15 = Vcc/2
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34(_x)             (0x00000088 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthHiMin(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthHiMin_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthHiMax(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthHiMax_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthLoMin(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthLoMin_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthLoMax(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg34_VcoCalVthLoMax_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg35[2] - -
    Bits: 15:9  PllSscMod(rw) - SSC modulation value
    Bits:  8:0  CoreRevision(ro) - SSC pll count value
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg35(_x)             (0x0000008c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg35_PllSscMod(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg35_PllSscMod_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg35_CoreRevision(_x) (((_x) & 0x1ff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg35_CoreRevision_of(_x) (((_x) >> 0) & 0x1ff)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg36[2] - -
    Bits: 15:6  PllSscVstep(rw) - ssc veritical step selection
    Bits:  5    PllSscDsmsel(rw) - ssc dsm sel
    Bits:  4    PllSscEn(rw) - SSC PLL enable signal
    Bits:  3    ForceRateChangeRxCh2(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  2    ForceRateChangeTxCh2(rw) - Force ratechange from Regsiter or pin for TX
    Bits:  1    ForceRateChangeRxCh3(rw) - Force ratechange from Regsiter or pin for RX
    Bits:  0    ForceRateChangeTxCh3(rw) - Force ratechange from Regsiter or pin for TX
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36(_x)             (0x00000090 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_PllSscVstep(_x) (((_x) & 0x3ff) << 6)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_PllSscVstep_of(_x) (((_x) >> 6) & 0x3ff)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_PllSscDsmsel  BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_PllSscEn      BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_ForceRateChangeRxCh2 BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_ForceRateChangeTxCh2 BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_ForceRateChangeRxCh3 BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg36_ForceRateChangeTxCh3 BIT(0)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg37[2] - -
    Bits: 15:12 CTLECalDoneOvr(rw) - CTLE Override waiting for Done from state machine
    Bits: 11:8  LatchCalDoneOvr(rw) - Latch Override waiting for Done from state machine
    Bits:  7:4  SumOffCalDoneOvr(rw) - Summer Offset Override waiting for Done from state machine
    Bits:  3:0  FTSearchDoneOvr(rw) - Override waiting for Done from state machine
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37(_x)             (0x00000094 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_CTLECalDoneOvr(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_CTLECalDoneOvr_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_LatchCalDoneOvr(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_LatchCalDoneOvr_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_SumOffCalDoneOvr(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_SumOffCalDoneOvr_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_FTSearchDoneOvr(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg37_FTSearchDoneOvr_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg38[2] - -
    Bits: 15:12 RXSeqStateCh0(ro) - RX Rate Change state machine current state read out - Ch0, for debug only.
    Bits: 11:8  RXSeqStateCh1(ro) - RX Rate Change state machine current state read out - Ch1, for debug only.
    Bits:  7:4  RXSeqStateCh2(ro) - RX Rate Change state machine current state read out - Ch2, for debug only.
    Bits:  3:0  RXSeqStateCh3(ro) - RX Rate Change state machine current state read out - Ch3, for debug only.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38(_x)             (0x00000098 + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh0(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh0_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh3(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg38_RXSeqStateCh3_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Cmu_CMUReg39[2] - -
    Bits: 15:12 TXSeqStateCh0(ro) - TX Rate Change state machine current state read out - Ch0, for debug only.
    Bits: 11:8  TXSeqStateCh1(ro) - TX Rate Change state machine current state read out - Ch1, for debug only.
    Bits:  7:4  TXSeqStateCh2(ro) - TX Rate Change state machine current state read out - Ch2, for debug only.
    Bits:  3:0  TXSeqStateCh3(ro) - TX Rate Change state machine current state read out - Ch3, for debug only.
*/
#define NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39(_x)             (0x0000009c + (0x400 * ((_x) & 0x1)))
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh0(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh0_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh1(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh1_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh2(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh2_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh3(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Cmu_CMUReg39_TXSeqStateCh3_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg0[4] - -
    Bits: 15:11 CtleEqHr(rw) - CTLE Boost control , register programming Half Rate
    Bits: 10:6  CtleEqQr(rw) - CTLE Boost control , register programming - Half Rate
    Bits:  5:1  CtleEqFr(rw) - CTLE Boost control , register programming - Half Rate
    Bits:  0    Reserved(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0(_x)            (0x00000800 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_CtleEqHr(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_CtleEqHr_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_CtleEqQr(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_CtleEqQr_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_CtleEqFr(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_CtleEqFr_of(_x) (((_x) >> 1) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg0_Reserved     BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg1[4] - -
    Bits: 15:12 Rxacvcm(rw) - CTLE common mode voltage 0000 = 911mV 0001 = 865mV 0011 = 816mV 0111 = 766mV 1111 = 714mV
    Bits: 11:7  CtleEq(rw) - CTLE Boost control , register programming
    Bits:  6:5  Rxvreg1(rw) - Bias current control for the 1.0V voltage regulator
    Bits:  4:3  Rxvreg1p2(rw) - Bias current control for the 1.2V voltage regulator
    Bits:  2:1  RxirefAdj(rw) - Bias current control for the Rx circuit blocks except the voltage regulators
    Bits:  0    PWRBypass(rw) - Bypass analog regulator when power supply is 1.35v
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1(_x)            (0x00000804 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_Rxacvcm(_x)  (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_Rxacvcm_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_CtleEq(_x)   (((_x) & 0x1f) << 7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_CtleEq_of(_x) (((_x) >> 7) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_Rxvreg1(_x)  (((_x) & 0x3) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_Rxvreg1_of(_x) (((_x) >> 5) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_Rxvreg1p2(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_Rxvreg1p2_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_RxirefAdj(_x) (((_x) & 0x3) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_RxirefAdj_of(_x) (((_x) >> 1) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg1_PWRBypass    BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg2[4] - -
    Bits: 15    Resetb(rw) - Soft main reset
    Bits: 14    ResetTerm(rw) - Soft reset for Termination logic.
    Bits: 13    ResetbTXA(rw) - Connects to analog TX_reset_b
    Bits: 12    ResetbTXD(rw) - Digital Reset TX
    Bits: 11    BistEnaTx(rw) - Bist Enable for TX
    Bits: 10    TxInv(rw) - Swap TXP/TXN, Done in TX digital logic.
    Bits:  9    TxPvtBypass(rw) - Bypass pvt up/dn with input data.
    Bits:  8    VttEna(rw) - Term code update strobe 0 = disable ( hold previous vtt_sel value) , 1= Enable(latch VTT value based on the vtt_sel[1:0] )
    Bits:  7:6  VttSel(rw) - VTT selection. 00 - Floating termination , 01 - Termination to Ground ,10 - Termiantion to VDDIO, 11 - Termination to VDDIO/2
    Bits:  5    TxFifoEna(rw) - TX fifo Enable ,1 - Fifo enable
    Bits:  4    TxPdown(rw) - TX power down
    Bits:  3:2  TxRcvdetSel(rw) - Receiver detect select
    Bits:  1    Iddtn(rw) - active low
    Bits:  0    Rxpdbias(rw) - Rx power Down for Bias generator
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2(_x)            (0x00000808 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_Resetb       BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_ResetTerm    BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_ResetbTXA    BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_ResetbTXD    BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_BistEnaTx    BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_TxInv        BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_TxPvtBypass  BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_VttEna       BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_VttSel(_x)   (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_VttSel_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_TxFifoEna    BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_TxPdown      BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_TxRcvdetSel(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_TxRcvdetSel_of(_x) (((_x) >> 2) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_Iddtn        BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg2_Rxpdbias     BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg3[4] - -
    Bits: 15:14 TXDatarate(rw) - TX Rate divider select, 00 = Fullrate, 01 = Halfrate, 10 = Quarter rate, 11 = Fifth rate
    Bits: 13:11 TXWordmode(rw) - TX Word modes select, 000 = 8bit, 001 = 10bit,010 = 16bit, 011 = 20bit, 100 = 32bit,101 = 40bit,110 = 64bit,111 = 66bit
    Bits: 10:8  TXPRBSSel(rw) - TX prbs select , 000 = PRBS7, 001 = PRBS9, 010 = PRB11, 011 = PRBS23, 100 = PRBS31
    Bits:  7    TxrxLpbk(rw) - Forward loopback from TX to RX
    Bits:  5:3  CounterTimeSelCp(rw) - Programmable wait time for sending out ack to upper layer
    Bits:  2:0  CounterTimeSelCn(rw) - Programmable wait time for sending out ack to upper layer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3(_x)            (0x0000080c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TXDatarate(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TXDatarate_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TXWordmode(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TXWordmode_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TXPRBSSel(_x) (((_x) & 0x7) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TXPRBSSel_of(_x) (((_x) >> 8) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_TxrxLpbk     BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_CounterTimeSelCp(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_CounterTimeSelCp_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_CounterTimeSelCn(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg3_CounterTimeSelCn_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg4[4] - -
    Bits: 15:11 TxCn1(rw) - Register programmable pre_emph1, selected using customer mode pin.
    Bits: 10:5  TxCp1(rw) - Register programmable post_emph, selected using customer mode pin.
    Bits:  4:0  TxCn2(rw) - Register programmable pre_emph2, selected using customer mode pin.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4(_x)            (0x00000810 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4_TxCn1(_x)    (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4_TxCn1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4_TxCp1(_x)    (((_x) & 0x3f) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4_TxCp1_of(_x) (((_x) >> 5) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4_TxCn2(_x)    (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg4_TxCn2_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg5[4] - -
    Bits: 15    TxCn1Inv(rw) - Invert CN1 Co-efficient value 0 - Default and negative , 1 - Positive
    Bits: 14    TxCn2Inv(rw) - Invert CN2 Co-efficient value 0 - Default and positive, 1 - Reduced the amplitude of the signal by i_tx_cn2[4:0] value.
    Bits: 13    TxCp1Inv(rw) - Invert CP1 Co-efficient value 0 - Default and negetive , 1 - Positive
    Bits: 12    IdleRaw(rw) - TX uses the Raw Idle or delayed
    Bits: 11    TxDataRev(rw) - Bit order within a word is reversed. Big to little endian swap. 0 = Little endian 1 = Big endian
    Bits: 10:7  TxampCntl(rw) - TX amplitude, binary weighted boost control
    Bits:  6    TxampEna(rw) - TX_amplitude enable
    Bits:  5    RxdetEna(rw) - When asserted, drives rising edge on to the pad and sends signal to controller when pad voltage crosses 500mv
    Bits:  4    RxdetClr(rw) - When asserted, forces 0 on to pad and sends signal to controller when pad voltage goes below 100mv
    Bits:  3    TxIdle(rw) - TX idle. Output goes to Vcm when asserted 1= Enter TX idle
    Bits:  2    TxsyncResetb(rw) - Unused
    Bits:  1    RxBistResync(rw) - Re-sync the RX bert logic, without reset.
    Bits:  0    RxBistErrcntRd(rw) - Read internal Bist error counter calue
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5(_x)            (0x00000814 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxCn1Inv     BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxCn2Inv     BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxCp1Inv     BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_IdleRaw      BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxDataRev    BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxampCntl(_x) (((_x) & 0xf) << 7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxampCntl_of(_x) (((_x) >> 7) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxampEna     BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_RxdetEna     BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_RxdetClr     BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxIdle       BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_TxsyncResetb BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_RxBistResync BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg5_RxBistErrcntRd BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg6[4] - -
    Bits: 15    RxtxRevlpbk(rw) - Rx to TX analog reverse loopback
    Bits: 13:11 RXWordmode(rw) - RX Word modes select, 000 = 8bit, 001 = 10bit, 010=16bit, 011=20bit, 100=32bit, 101=40bit, 110=64bit, 111=66bit
    Bits: 10:9  RXDatarate(rw) - RX Rate divider select, 00=Fullrate, 01=Halfrate, 10=Quarter rate, 11 = Fifth rate
    Bits:  8    ResetbRxd(rw) - Digital RX reset
    Bits:  7    ResetbRxa(rw) - Analog RX reset
    Bits:  6    BistEnaRx(rw) - Bist enable for RX
    Bits:  5:3  RXPRBSSel(rw) - RX prbs select , 000 = PRBS7, 001=PRBS9, 010=PRB11, 011=PRBS23, 100=PRBS31
    Bits:  2:0  BistWaitDelay(rw) - Wait delay in wordclk before declaring PRBS Sync to incoming data
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6(_x)            (0x00000818 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RxtxRevlpbk  BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RXWordmode(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RXWordmode_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RXDatarate(_x) (((_x) & 0x3) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RXDatarate_of(_x) (((_x) >> 9) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_ResetbRxd    BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_ResetbRxa    BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_BistEnaRx    BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RXPRBSSel(_x) (((_x) & 0x7) << 3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_RXPRBSSel_of(_x) (((_x) >> 3) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_BistWaitDelay(_x) (((_x) & 0x7) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg6_BistWaitDelay_of(_x) (((_x) >> 0) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg7[4] - -
    Bits: 15    RxtxParlpbk(rw) - Rx to TX parallel reverse loopback enable - Active high
    Bits: 14    CDRLoopEna(rw) - CDR loop enable
    Bits: 13    CDRLoopEnaForce(rw) - CDR loop enable force bit.
    Bits: 12    RevUpdnPhase(rw) - Reverse UP Down control for Phase loop
    Bits: 11    CdrBypassRxlos(rw) - Reverse UP Down control for Freq loop
    Bits: 10    CdrLoopSnapshotEna(rw) - Snap CDR Loop Value for register reading
    Bits:  9    SSCEnable(rw) - Used for SSC 5000PPM support
    Bits:  8    RxlosDisable(rw) - Power down for RXLOS circuit
    Bits:  7:4  RxlosVref(rw) - LOS vref voltage
    Bits:  3    TxBistInjectErr(rw) - Inject 1 bit error on tx bist path -PRBS
    Bits:  1    CdrBwTimerReset(rw) - CDR gearshifting timer reset
    Bits:  0    SwapLmsdata(rw) - Swap lms data - for debug use only.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7(_x)            (0x0000081c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_RxtxParlpbk  BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_CDRLoopEna   BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_CDRLoopEnaForce BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_RevUpdnPhase BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_CdrBypassRxlos BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_CdrLoopSnapshotEna BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_SSCEnable    BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_RxlosDisable BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_RxlosVref(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_RxlosVref_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_TxBistInjectErr BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_CdrBwTimerReset BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg7_SwapLmsdata  BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg8[4] - -
    Bits: 15:10 FTPos7Reg(ro) - Floating tap adopted position value for tap7; Should be between 7 and 42, based on position
    Bits:  9:4  FTPos8Reg(ro) - Floating tap adopted position value for tap8; Should be between 7 and 42, based on position
    Bits:  3    TxRxPresMid(ro) - Receiver detect comparator output, asserts 1 when pad voltage is above voltage threshold specified in tx_rcvdet_sel (rxtx_reg2)
    Bits:  2    TxRxPresZero(ro) - Receiver detect comparator output, asserts 1 when pad voltage is below 100mV
    Bits:  1    RxtxParlpbkClk(rw) - Rx to TX parallel reverse loopback clk sel - Active high
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8(_x)            (0x00000820 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_FTPos7Reg(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_FTPos7Reg_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_FTPos8Reg(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_FTPos8Reg_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_TxRxPresMid  BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_TxRxPresZero BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg8_RxtxParlpbkClk BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg9[4] - -
    Bits: 15:10 FTPos9Reg(ro) - Floating tap adopted position value for tap9; Should be between 7 and 42, based on position
    Bits:  9:4  FTPosaReg(ro) - Floating tap adopted position value for tap10; Should be between 7 and 42, based on position
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg9(_x)            (0x00000824 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg9_FTPos9Reg(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg9_FTPos9Reg_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg9_FTPosaReg(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg9_FTPosaReg_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg10[4] - -
    Bits: 15:11 PhaseAdjustLimit(rw) - Phase adjsut upper/lower limit
    Bits: 10    CaptureFtpos(rw) - Read floating tap positions, on rising edge loads accumulator value into register
    Bits:  9:4  FTPos4(ro) - Unused. 5th floating tap.
    Bits:  3:1  CDRAccumulatorSel(rw) - CDR_accumulator select for read and load
    Bits:  0    RXIGENPdown(rw) - Power down RX current gen Block.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10(_x)           (0x00000828 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_PhaseAdjustLimit(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_PhaseAdjustLimit_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_CaptureFtpos BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_FTPos4(_x)  (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_FTPos4_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_CDRAccumulatorSel(_x) (((_x) & 0x7) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_CDRAccumulatorSel_of(_x) (((_x) >> 1) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg10_RXIGENPdown BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg11[4] - -
    Bits: 15    RxWordclkInv(rw) - Enable Eye Scan Logic.
    Bits: 14    ErrorLatchSwap(rw) - Erro Latch odd postion swap.
    Bits: 13    LatchOffEna(rw) - RX latch offset enable for calibration.
    Bits: 12    RxPdown(rw) - RX powerdown
    Bits: 11    RxInv(rw) - Swap RXP/RXN, Done in RX digital logic.
    Bits: 10    RxDataRev(rw) - Reverse rx_data ( swap)
    Bits:  9    Enable3pole(rw) - Enabel 3rd pole for ssc support
    Bits:  8    TXP0Pd(rw) - PCIE L0 power down control for TX
    Bits:  5    RXP0Pd(rw) - PCIE L0 power down control for RX
    Bits:  4    RXP1Pd(rw) - PCIE L1 power down control for RX
    Bits:  3    RXP2Pd(rw) - PCIE L2 power down control for RX
    Bits:  2    SumosEnable(rw) - Summer offset enable to power up summer calibration comparator 0 = Disabled 1 = Enabled
    Bits:  1    RxTermDisable(rw) - Tristate TX termination
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11(_x)           (0x0000082c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RxWordclkInv BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_ErrorLatchSwap BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_LatchOffEna BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RxPdown     BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RxInv       BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RxDataRev   BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_Enable3pole BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_TXP0Pd      BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RXP0Pd      BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RXP1Pd      BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RXP2Pd      BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_SumosEnable BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg11_RxTermDisable BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg12[4] - -
    Bits: 15:0  RXSpare(rw) - Spare input pin for RX, future enhancement.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg12(_x)           (0x00000830 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg12_RXSpare(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg12_RXSpare_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg13[4] - -
    Bits: 14    LatClkSel(rw) - Swap Xlat position from Rigth Crossign to Left crossing for CDR.
    Bits: 13    ErrLatOddPolInv(rw) - Changes only the polarity on the odd error latch.
    Bits: 12    ErrLatEvenPolInv(rw) - Changes only the polarity on the even error latch.
    Bits: 11:7  RxAtoSel(rw) - RX ATO select for test purpose.
    Bits:  6    CtleLatcalManEna(rw) - Manual calibration enable for CTLE latch.
    Bits:  5:0  ClteLatcalManProg(rw) - Manual programming LATCH offset
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13(_x)           (0x00000834 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_LatClkSel   BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_ErrLatOddPolInv BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_ErrLatEvenPolInv BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_RxAtoSel(_x) (((_x) & 0x1f) << 7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_RxAtoSel_of(_x) (((_x) >> 7) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_CtleLatcalManEna BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_ClteLatcalManProg(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg13_ClteLatcalManProg_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg14[4] - -
    Bits: 15:9  CdrPiTap(ro) - CDR PI tap value, Snaped and transfer to AHB domain for Debug
    Bits:  8    CdrLock(ro) - CDR lock status bit
    Bits:  7:1  CdrPqTap(ro) - CDR PQ tap value, Snapped and transfer to AHB domain for debug
    Bits:  0    ForceCdrLock(rw) - Sets cdr_lock register to 1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14(_x)           (0x00000838 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14_CdrPiTap(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14_CdrPiTap_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14_CdrLock     BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14_CdrPqTap(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14_CdrPqTap_of(_x) (((_x) >> 1) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg14_ForceCdrLock BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg15[4] - -
    Bits: 15:9  EscanTap(ro) - CDR Eye SCAN horizontal tap value, Snapped and transfer to AHB domain for debug+
    Bits:  7:1  EscanVmargin(rw) - Vertical margin/step control for Eye scan latch.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg15(_x)           (0x0000083c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg15_EscanTap(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg15_EscanTap_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg15_EscanVmargin(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg15_EscanVmargin_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg16[4] - -
    Bits: 15:10 DOLatchCalout(ro) - Data Latch code read out - Odd
    Bits:  9:4  XOLatchCalout(ro) - Crossing Latch code read out - Odd
    Bits:  3:0  LatchCalFailOdd(ro) - Latch Calibration Odd latch status bit
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16(_x)           (0x00000840 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16_DOLatchCalout(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16_DOLatchCalout_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16_XOLatchCalout(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16_XOLatchCalout_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16_LatchCalFailOdd(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg16_LatchCalFailOdd_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg17[4] - -
    Bits: 15:10 EOLatchCalout(ro) - Error Latch code read out - Odd
    Bits:  9:4  SOLatchCalout(ro) - Eye Scan Latch code read out - Odd
    Bits:  3:0  LatchCalFailEven(ro) - Latch calibration Even latch status bit
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17(_x)           (0x00000844 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17_EOLatchCalout(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17_EOLatchCalout_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17_SOLatchCalout(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17_SOLatchCalout_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17_LatchCalFailEven(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg17_LatchCalFailEven_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg18[4] - -
    Bits: 15:10 DELatchCalout(ro) - Data Latch code read out - Even
    Bits:  9:4  XELatchCalout(ro) - Crossing Latch code read out - Even
    Bits:  3    RxlosOut(ro) - Loss of signal detector output - RAW
    Bits:  2    RxlosFilteredOut(ro) - Filtered LOS output
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18(_x)           (0x00000848 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18_DELatchCalout(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18_DELatchCalout_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18_XELatchCalout(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18_XELatchCalout_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18_RxlosOut    BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg18_RxlosFilteredOut BIT(2)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg19[4] - -
    Bits: 15:10 EELatchCalout(ro) - Error Latch code read out - Even
    Bits:  9:4  SELatchCalout(ro) - Eye Scan Latch code read out - Even
    Bits:  3    TxBcCp1Up(ro) - back channel Post cursor UP signal
    Bits:  2    TxBcCn1Up(ro) - back channel Pre cursor UP signal
    Bits:  1    TxBcCp1Dn(ro) - back channel Post cursor UP signal
    Bits:  0    TxBcCn1Dn(ro) - back channel Pre cursor UP signal
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19(_x)           (0x0000084c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_EELatchCalout(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_EELatchCalout_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_SELatchCalout(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_SELatchCalout_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_TxBcCp1Up   BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_TxBcCn1Up   BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_TxBcCp1Dn   BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg19_TxBcCn1Dn   BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg20[4] - -
    Bits: 15:14 SwitchErrorLatch(rw) - Error latch multiplexing selection 00 = +-, 01 = -+ , 10 = --, 11 = ++.
    Bits: 13:11 PeriodErrorLatch(rw) - period at which the Error latch switch 000 = 512T, 001 = 1024T, 010 = 2048T, 011=4096T, 100 = 8192T, 101=16384T
    Bits: 10:7  DFETapSelect(rw) - DFE tap value read out select 0 = H0, 1 = H1, 2 = H2, 3 = H3, 4 = H4, 5 = H5, 6 = H6, 7 = H7, 8 = H8, 9 = H9, 10 = H10, 11 = Hs
    Bits:  2    BlwcEna(rw) - BLWC analog logic enable
    Bits:  1    H0SignRev(rw) - H0 Sign going to analog is reversed.
    Bits:  0    DFETapWriteEna(rw) - Enable Write to DFE tap selected by the DFE tap select value.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20(_x)           (0x00000850 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_SwitchErrorLatch(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_SwitchErrorLatch_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_PeriodErrorLatch(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_PeriodErrorLatch_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_DFETapSelect(_x) (((_x) & 0xf) << 7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_DFETapSelect_of(_x) (((_x) >> 7) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_BlwcEna     BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_H0SignRev   BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg20_DFETapWriteEna BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg21[4] - -
    Bits: 15:14 RxpdConfig(rw) - Reserved.
    Bits: 13:11 RxpdBlock(rw) - Power-down control for top-level blocks in the RX analog core.
    Bits: 10    FloatingSrcStart(rw) - Floating tap search manual restart Floating start search.
    Bits:  9:5  CtleCalHsLevel(ro) - Manually program FT tap position.
    Bits:  4:1  AlphaBlwc(rw) - BLWC loop accumulator loop alpha
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21(_x)           (0x00000854 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_RxpdConfig(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_RxpdConfig_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_RxpdBlock(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_RxpdBlock_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_FloatingSrcStart BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_CtleCalHsLevel(_x) (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_CtleCalHsLevel_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_AlphaBlwc(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg21_AlphaBlwc_of(_x) (((_x) >> 1) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg22[4] - -
    Bits: 15:0  DFETapEna(rw) - Enable for Each DFE loops and Back channel loops. h0, h1-h10, hs. 0000_0000_0000_0001 = H0, 0000_0000_0000_0010 = H1,0000_0000_0000_0100 = H2, 0000_0000_0000_1000 = H3, 0000_0000_0001_0000 = H4, 0000_0000_0010_0000 = H5,0000_0000_0100_0000 = H6, 0000_0000_1000_0000 = H7, 0000_0001_0000_0000 = H8, 0000_0010_0000_0000 = H9,0000_0100_0000_0000 = H10, 0000_1000_0000_0000 = Hs, 0001_0000_0000_0000 = Blwc loop,0010_0000_0000_0000 = Phase Adj loop
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg22(_x)           (0x00000858 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg22_DFETapEna(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg22_DFETapEna_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg23[4] - -
    Bits: 15:9  DFEPresetValueH0(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH1(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg23(_x)           (0x0000085c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg23_DFEPresetValueH0(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg23_DFEPresetValueH0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg23_DFEPresetValueH1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg23_DFEPresetValueH1_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg24[4] - -
    Bits: 15:9  DFEPresetValueH2(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH3(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg24(_x)           (0x00000860 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg24_DFEPresetValueH2(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg24_DFEPresetValueH2_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg24_DFEPresetValueH3(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg24_DFEPresetValueH3_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg25[4] - -
    Bits: 15:9  DFEPresetValueH4(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH5(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg25(_x)           (0x00000864 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg25_DFEPresetValueH4(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg25_DFEPresetValueH4_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg25_DFEPresetValueH5(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg25_DFEPresetValueH5_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg26[4] - -
    Bits: 15:9  DFEPresetValueH6(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH7(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg26(_x)           (0x00000868 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg26_DFEPresetValueH6(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg26_DFEPresetValueH6_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg26_DFEPresetValueH7(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg26_DFEPresetValueH7_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg27[4] - -
    Bits: 15:9  DFEPresetValueH8(rw) - DFE loop preset value
    Bits:  7:1  DFEPresetValueH9(rw) - DFE loop preset value
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg27(_x)           (0x0000086c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg27_DFEPresetValueH8(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg27_DFEPresetValueH8_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg27_DFEPresetValueH9(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg27_DFEPresetValueH9_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg28[4] - -
    Bits: 15:9  DFEPresetValueH10(rw) - DFE loop preset value
    Bits:  8    RXClkSlewCntl(rw) - RX clock skew control?
    Bits:  7    EkbcRev(rw) - ek bit to BC tap loop is revered
    Bits:  6    RxlosFlPdown(rw) - LOS filter power down.
    Bits:  5    LfpsOverride(rw) - USB3 LFPS 0 = User pattern mode, clock is internal clock 1 = Clock to drive pattern is coming from PIPE
    Bits:  4:2  CdrLockCount(rw) - Number of cycles over which to assess CDR lock condition 000 = count 64 cycle, 001 = count 128 cycle, 010 = count 256 cycle, 011 = count 512 cycle, 100 = count 1024 cycle, 101 = count 2048 cycle, 110 = count 4k cycle ,111 = count 8k cycle
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28(_x)           (0x00000870 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_DFEPresetValueH10(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_DFEPresetValueH10_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_RXClkSlewCntl BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_EkbcRev     BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_RxlosFlPdown BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_LfpsOverride BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_CdrLockCount(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg28_CdrLockCount_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg29[4] - -
    Bits: 15:8  TXSpareOut(ro) - Spare output for future observability
    Bits:  7:0  RXSpareOut(ro) - Spare output for future observability
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg29(_x)           (0x00000874 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg29_TXSpareOut(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg29_TXSpareOut_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg29_RXSpareOut(_x) (((_x) & 0xff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg29_RXSpareOut_of(_x) (((_x) >> 0) & 0xff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg30[4] - -
    Bits: 15:0  CustomerPinmodeInv(rw) - Customer pin override.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg30(_x)           (0x00000878 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg30_CustomerPinmodeInv(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg30_CustomerPinmodeInv_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg31[4] - -
    Bits: 15:8  TXUserPatt16(rw) - Bits [263:256] of 264 bits of user patterns
    Bits:  7    TXUserPattSel(rw) - User pattern enable LFPS support 0 = Normal mode, 1 = Select user pattern and LFPS for Trasmit.
    Bits:  6:0  Dcofst(ro) - BLWC lms loop output for read only
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg31(_x)           (0x0000087c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg31_TXUserPatt16(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg31_TXUserPatt16_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg31_TXUserPattSel BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg31_Dcofst(_x)  (((_x) & 0x7f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg31_Dcofst_of(_x) (((_x) >> 0) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg32[4] - -
    Bits: 15:0  TXUserPatt15(rw) - Bits [255:240] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg32(_x)           (0x00000880 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg32_TXUserPatt15(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg32_TXUserPatt15_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg33[4] - -
    Bits: 15:0  TXUserPatt14(rw) - Bits [239:224] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg33(_x)           (0x00000884 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg33_TXUserPatt14(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg33_TXUserPatt14_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg34[4] - -
    Bits: 15:0  TXUserPatt13(rw) - Bits [223:208] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg34(_x)           (0x00000888 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg34_TXUserPatt13(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg34_TXUserPatt13_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg35[4] - -
    Bits: 15:0  TXUserPatt12(rw) - Bits [207:192] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg35(_x)           (0x0000088c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg35_TXUserPatt12(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg35_TXUserPatt12_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg36[4] - -
    Bits: 15:0  TXUserPatt11(rw) - Bits [191:176] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg36(_x)           (0x00000890 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg36_TXUserPatt11(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg36_TXUserPatt11_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg37[4] - -
    Bits: 15:0  TXUserPatt10(rw) - Bits [175:160] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg37(_x)           (0x00000894 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg37_TXUserPatt10(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg37_TXUserPatt10_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg38[4] - -
    Bits: 15:0  TXUserPatt9(rw) - Bits [159:144] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg38(_x)           (0x00000898 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg38_TXUserPatt9(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg38_TXUserPatt9_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg39[4] - -
    Bits: 15:0  TXUserPatt8(rw) - Bits [143:1128] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg39(_x)           (0x0000089c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg39_TXUserPatt8(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg39_TXUserPatt8_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg40[4] - -
    Bits: 15:0  TXUserPatt7(rw) - Bits [127:112] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg40(_x)           (0x000008a0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg40_TXUserPatt7(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg40_TXUserPatt7_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg41[4] - -
    Bits: 15:0  TXUserPatt6(rw) - Bits [111:96] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg41(_x)           (0x000008a4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg41_TXUserPatt6(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg41_TXUserPatt6_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg42[4] - -
    Bits: 15:0  TXUserPatt5(rw) - Bits [95:80] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg42(_x)           (0x000008a8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg42_TXUserPatt5(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg42_TXUserPatt5_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg43[4] - -
    Bits: 15:0  TXUserPatt4(rw) - Bits [79:64] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg43(_x)           (0x000008ac + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg43_TXUserPatt4(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg43_TXUserPatt4_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg44[4] - -
    Bits: 15:0  TXUserPatt3(rw) - Bits [63:48] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg44(_x)           (0x000008b0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg44_TXUserPatt3(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg44_TXUserPatt3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg45[4] - -
    Bits: 15:0  TXUserPatt2(rw) - Bits [47:32] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg45(_x)           (0x000008b4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg45_TXUserPatt2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg45_TXUserPatt2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg46[4] - -
    Bits: 15:0  TXUserPatt1(rw) - Bits [31:16] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg46(_x)           (0x000008b8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg46_TXUserPatt1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg46_TXUserPatt1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg47[4] - -
    Bits: 15:0  TXUserPatt0(rw) - Bits [15:0] of 264bits user bit patterns
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg47(_x)           (0x000008bc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg47_TXUserPatt0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg47_TXUserPatt0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg48[4] - -
    Bits: 15:14 RXUserPatt4(ro) - Bits [5:64] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg48(_x)           (0x000008c0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg48_RXUserPatt4(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg48_RXUserPatt4_of(_x) (((_x) >> 14) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg49[4] - -
    Bits: 15:0  RXUserPatt3(ro) - Bits [63:48] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg49(_x)           (0x000008c4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg49_RXUserPatt3(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg49_RXUserPatt3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg50[4] - -
    Bits: 15:0  RXUserPatt2(ro) - Bits [47:32] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg50(_x)           (0x000008c8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg50_RXUserPatt2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg50_RXUserPatt2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg51[4] - -
    Bits: 15:0  RXUserPatt1(ro) - Bits [31:16] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg51(_x)           (0x000008cc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg51_RXUserPatt1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg51_RXUserPatt1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg52[4] - -
    Bits: 15:0  RXUserPatt0(ro) - Bits [15:0] of 66 bits of User Received pattern
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg52(_x)           (0x000008d0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg52_RXUserPatt0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg52_RXUserPatt0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg53[4] - -
    Bits: 15    RxPllSELECT(rw) - Pll Select for RX 0 = Select High speed PLL, 1 = Select Low speed PLL
    Bits: 14    TxPllSELECT(rw) - Pll select for TX 0 = Select High speed PLL, 1 = Select Low speed PLL
    Bits: 13:10 PiSpdSelCdr(rw) - Speed Select for Different Data Standards.
    Bits:  9    EyeMonitorCapture(rw) - Capture the Eye monitor coutner and accumulator values
    Bits:  8    EyeAccResetb(rw) - Soft reset for Eye monitor counter and accumulator reset
    Bits:  7:6  EyeCountWidthSel(rw) - Eye Monitor coutner width select 00 = 12bit coutner, 01 = 16bit coutner, 10 = 24bit coutner, 11 = 32bit coutner
    Bits:  5    BertResetb(rw) - Reset bert logic
    Bits:  3    LoadFreqShift(rw) - Load Freq loop with initial value enable
    Bits:  2    MuTimerReset(rw) - Gearshifting timer reset. 0 = Normal operation 1 = Reset
    Bits:  1    BlwcManEna(rw) - Base line wander manual program enable
    Bits:  0    DFETabAccb(rw) - Select to write either DFE tap coefficient or accumulator value 0 = Write to accumulator 1 = Write to tap coefficient
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53(_x)           (0x000008d4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_RxPllSELECT BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_TxPllSELECT BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_PiSpdSelCdr(_x) (((_x) & 0xf) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_PiSpdSelCdr_of(_x) (((_x) >> 10) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_EyeMonitorCapture BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_EyeAccResetb BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_EyeCountWidthSel(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_EyeCountWidthSel_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_BertResetb  BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_LoadFreqShift BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_MuTimerReset BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_BlwcManEna  BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg53_DFETabAccb  BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg54[4] - -
    Bits: 15    CdrLockReset(rw) - Resets cdr_lock and lock timer to zero
    Bits: 14    H1QlatchSignInv(rw) - H1 Sign for Q latch
    Bits: 13:11 PeriodH1Qlatch(rw) - Period at which to switch the H1 latch control for qlatch 0 = No switching 1 = ((2^1)-1)*128UI 2 = ((2^2)-1)*128UI 7 = ((2^7)-1)*128UI
    Bits: 10    SwitchH1Qlatch(rw) - Switch the polarity of the h1 speculation for eye scan according to the period set in period_h1_qlatch 0: Don't switch 1: Switch according to period set in period_h1_qlatch
    Bits:  9:0  EyeCountThres(rw) - Eye monitor threshold for CTLE calibration.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54(_x)           (0x000008d8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_CdrLockReset BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_H1QlatchSignInv BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_PeriodH1Qlatch(_x) (((_x) & 0x7) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_PeriodH1Qlatch_of(_x) (((_x) >> 11) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_SwitchH1Qlatch BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_EyeCountThres(_x) (((_x) & 0x3ff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg54_EyeCountThres_of(_x) (((_x) >> 0) & 0x3ff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg55[4] - -
    Bits: 15:5  InitFreqShiftMsb(rw) - Initial freq shift value for Freq loop
    Bits:  4:2  SlipRate(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg55(_x)           (0x000008dc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg55_InitFreqShiftMsb(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg55_InitFreqShiftMsb_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg55_SlipRate(_x) (((_x) & 0x7) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg55_SlipRate_of(_x) (((_x) >> 2) & 0x7)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg56[4] - -
    Bits: 15:0  InitFreqShiftLsb(rw) - Initial frequency shift value for frequency accumulator LSB, to be loaded by LoadFreq_shift (rxtx_reg53)
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg56(_x)           (0x000008e0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg56_InitFreqShiftLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg56_InitFreqShiftLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg57[4] - -
    Bits: 15:0  LoopbwTap1Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg57(_x)           (0x000008e4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg57_LoopbwTap1Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg57_LoopbwTap1Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg58[4] - -
    Bits: 15:0  LoopbwTap1Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg58(_x)           (0x000008e8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg58_LoopbwTap1Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg58_LoopbwTap1Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg59[4] - -
    Bits: 15:0  LoopbwTap2Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg59(_x)           (0x000008ec + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg59_LoopbwTap2Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg59_LoopbwTap2Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg60[4] - -
    Bits: 15:0  LoopbwTap2Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg60(_x)           (0x000008f0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg60_LoopbwTap2Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg60_LoopbwTap2Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg61[4] - -
    Bits: 15:0  LoopbwTap3Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg61(_x)           (0x000008f4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg61_LoopbwTap3Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg61_LoopbwTap3Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg62[4] - -
    Bits: 15:0  LoopbwTap3Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg62(_x)           (0x000008f8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg62_LoopbwTap3Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg62_LoopbwTap3Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg63[4] - -
    Bits: 15:0  LoopbwTap4Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg63(_x)           (0x000008fc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg63_LoopbwTap4Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg63_LoopbwTap4Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg64[4] - -
    Bits: 15:0  LoopbwTap4Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg64(_x)           (0x00000900 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg64_LoopbwTap4Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg64_LoopbwTap4Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg65[4] - -
    Bits: 15:0  LoopbwTap5Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg65(_x)           (0x00000904 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg65_LoopbwTap5Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg65_LoopbwTap5Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg66[4] - -
    Bits: 15:0  LoopbwTap5Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg66(_x)           (0x00000908 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg66_LoopbwTap5Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg66_LoopbwTap5Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg67[4] - -
    Bits: 15:0  LoopbwTap6Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg67(_x)           (0x0000090c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg67_LoopbwTap6Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg67_LoopbwTap6Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg68[4] - -
    Bits: 15:0  LoopbwTap6Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg68(_x)           (0x00000910 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg68_LoopbwTap6Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg68_LoopbwTap6Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg69[4] - -
    Bits: 15:0  LoopbwTap7Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg69(_x)           (0x00000914 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg69_LoopbwTap7Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg69_LoopbwTap7Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg70[4] - -
    Bits: 15:0  LoopbwTap7Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg70(_x)           (0x00000918 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg70_LoopbwTap7Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg70_LoopbwTap7Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg71[4] - -
    Bits: 15:0  LoopbwTap8Msb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg71(_x)           (0x0000091c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg71_LoopbwTap8Msb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg71_LoopbwTap8Msb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg72[4] - -
    Bits: 15:0  LoopbwTap8Lsb(rw) - Unused. Deprecated by mu settings.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg72(_x)           (0x00000920 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg72_LoopbwTap8Lsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg72_LoopbwTap8Lsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg73[4] - -
    Bits: 15:11 MuDfe1(rw) - BW select tap 1 for dfe loop.
    Bits: 10:6  MuDfe2(rw) - BW select tap 2 for dfe loop.
    Bits:  5:1  MuDfe3(rw) - BW select tap 3 for dfe loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73(_x)           (0x00000924 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73_MuDfe1(_x)  (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73_MuDfe1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73_MuDfe2(_x)  (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73_MuDfe2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73_MuDfe3(_x)  (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg73_MuDfe3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg74[4] - -
    Bits: 15:11 MuDfe4(rw) - BW select tap 4 for dfe loop.
    Bits: 10:6  MuDfe5(rw) - BW select tap 5 for dfe loop.
    Bits:  5:1  MuDfe6(rw) - BW select tap 6 for dfe loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74(_x)           (0x00000928 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74_MuDfe4(_x)  (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74_MuDfe4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74_MuDfe5(_x)  (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74_MuDfe5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74_MuDfe6(_x)  (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg74_MuDfe6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg75[4] - -
    Bits: 15:11 MuDfe7(rw) - BW select tap 7 for dfe loop.
    Bits: 10:6  MuDfe8(rw) - BW select tap 8 for dfe loop.
    Bits:  5:1  MuDfe9(rw) - BW select tap 9 for dfe loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75(_x)           (0x0000092c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75_MuDfe7(_x)  (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75_MuDfe7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75_MuDfe8(_x)  (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75_MuDfe8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75_MuDfe9(_x)  (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg75_MuDfe9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg76[4] - -
    Bits: 15:11 MuPh1(rw) - BW select tap 1 for phase adjust loop.
    Bits: 10:6  MuPh2(rw) - BW select tap 2 for phase adjust loop.
    Bits:  5:1  MuPh3(rw) - BW select tap 3 for phase adjust drop
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76(_x)           (0x00000930 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76_MuPh1(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76_MuPh1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76_MuPh2(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76_MuPh2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76_MuPh3(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg76_MuPh3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg77[4] - -
    Bits: 15:11 MuPh4(rw) - BW select tap 4 for phase adjust loop.
    Bits: 10:6  MuPh5(rw) - BW select tap 5 for phase adjust loop.
    Bits:  5:1  MuPh6(rw) - BW select tap 6 for phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77(_x)           (0x00000934 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77_MuPh4(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77_MuPh4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77_MuPh5(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77_MuPh5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77_MuPh6(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg77_MuPh6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg78[4] - -
    Bits: 15:11 MuPh7(rw) - BW select tap 7 for phase adjust loop.
    Bits: 10:6  MuPh8(rw) - BW select tap 8 for phase adjust loop.
    Bits:  5:1  MuPh9(rw) - BW select tap 9 for phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78(_x)           (0x00000938 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78_MuPh7(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78_MuPh7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78_MuPh8(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78_MuPh8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78_MuPh9(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg78_MuPh9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg79[4] - -
    Bits: 15:11 MuTh1(rw) - BW select tap 1 for threshold adjust loop.
    Bits: 10:6  MuTh2(rw) - BW select tap 2 for threshold adjust loop.
    Bits:  5:1  MuTh3(rw) - BW select tap 3 for threshold adjust drop
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79(_x)           (0x0000093c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79_MuTh1(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79_MuTh1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79_MuTh2(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79_MuTh2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79_MuTh3(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg79_MuTh3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg80[4] - -
    Bits: 15:11 MuTh4(rw) - BW select tap 4 for threshold adjust loop.
    Bits: 10:6  MuTh5(rw) - BW select tap 5 for threshold adjust loop.
    Bits:  5:1  MuTh6(rw) - BW select tap 6 for threshold adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80(_x)           (0x00000940 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80_MuTh4(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80_MuTh4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80_MuTh5(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80_MuTh5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80_MuTh6(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg80_MuTh6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg81[4] - -
    Bits: 15:11 MuTh7(rw) - BW select tap 7 for threshold adjust loop.
    Bits: 10:6  MuTh8(rw) - BW select tap 8 for threshold adjust loop.
    Bits:  5:1  MuTh9(rw) - BW select tap 9 for threshold adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81(_x)           (0x00000944 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81_MuTh7(_x)   (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81_MuTh7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81_MuTh8(_x)   (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81_MuTh8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81_MuTh9(_x)   (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg81_MuTh9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg82[4] - -
    Bits: 15:11 MuBca1(rw) - BW select tap 1 for bca adjust loop.
    Bits: 10:6  MuBca2(rw) - BW select tap 2 for bca adjust loop.
    Bits:  5:1  MuBca3(rw) - BW select tap 3 for bca adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82(_x)           (0x00000948 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82_MuBca1(_x)  (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82_MuBca1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82_MuBca2(_x)  (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82_MuBca2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82_MuBca3(_x)  (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg82_MuBca3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg83[4] - -
    Bits: 15:11 MuBca4(rw) - BW select tap 4 for bca adjust loop.
    Bits: 10:6  MuBca5(rw) - BW select tap 5 for bca adjust loop.
    Bits:  5:1  MuBca6(rw) - BW select tap 6 for bca adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83(_x)           (0x0000094c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83_MuBca4(_x)  (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83_MuBca4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83_MuBca5(_x)  (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83_MuBca5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83_MuBca6(_x)  (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg83_MuBca6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg84[4] - -
    Bits: 15:11 MuBca7(rw) - BW select tap 7 for bca adjust loop.
    Bits: 10:6  MuBca8(rw) - BW select tap 8 for bca adjust loop.
    Bits:  5:1  MuBca9(rw) - BW select tap 9 for bca adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84(_x)           (0x00000950 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84_MuBca7(_x)  (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84_MuBca7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84_MuBca8(_x)  (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84_MuBca8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84_MuBca9(_x)  (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg84_MuBca9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg85[4] - -
    Bits: 15:11 MuBlwc1(rw) - BW select tap 1 for blwc adjust loop.
    Bits: 10:6  MuBlwc2(rw) - BW select tap 2 for blwc adjust loop.
    Bits:  5:1  MuBlwc3(rw) - BW select tap 3 for blwc adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85(_x)           (0x00000954 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85_MuBlwc1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85_MuBlwc1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85_MuBlwc2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85_MuBlwc2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85_MuBlwc3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg85_MuBlwc3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg86[4] - -
    Bits: 15:11 MuBlwc4(rw) - BW select tap 4 for blwc adjust loop.
    Bits: 10:6  MuBlwc5(rw) - BW select tap 5 for blwc adjust loop.
    Bits:  5:1  MuBlwc6(rw) - BW select tap 6 for blwc adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86(_x)           (0x00000958 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86_MuBlwc4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86_MuBlwc4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86_MuBlwc5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86_MuBlwc5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86_MuBlwc6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg86_MuBlwc6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg87[4] - -
    Bits: 15:11 MuBlwc7(rw) - BW select tap 7 for blwc adjust loop.
    Bits: 10:6  MuBlwc8(rw) - BW select tap 8 for blwc adjust loop.
    Bits:  5:1  MuBlwc9(rw) - BW select tap 9 for blwc adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87(_x)           (0x0000095c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87_MuBlwc7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87_MuBlwc7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87_MuBlwc8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87_MuBlwc8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87_MuBlwc9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg87_MuBlwc9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg88[4] - -
    Bits: 15:11 MuFreq1(rw) - BW select tap 1 for Freq adjust loop.
    Bits: 10:6  MuFreq2(rw) - BW select tap 2 for Freq adjust loop.
    Bits:  5:1  MuFreq3(rw) - BW select tap 3 for Freq adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88(_x)           (0x00000960 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88_MuFreq1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88_MuFreq1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88_MuFreq2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88_MuFreq2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88_MuFreq3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg88_MuFreq3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg89[4] - -
    Bits: 15:11 MuFreq4(rw) - BW select tap 4 for Freq adjust loop.
    Bits: 10:6  MuFreq5(rw) - BW select tap 5 for Freq adjust loop.
    Bits:  5:1  MuFreq6(rw) - BW select tap 6 for Freq adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89(_x)           (0x00000964 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89_MuFreq4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89_MuFreq4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89_MuFreq5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89_MuFreq5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89_MuFreq6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg89_MuFreq6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg90[4] - -
    Bits: 15:11 MuFreq7(rw) - BW select tap 7 for Freq adjust loop.
    Bits: 10:6  MuFreq8(rw) - BW select tap 8 for Freq adjust loop.
    Bits:  5:1  MuFreq9(rw) - BW select tap 9 for Freq adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90(_x)           (0x00000968 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90_MuFreq7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90_MuFreq7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90_MuFreq8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90_MuFreq8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90_MuFreq9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg90_MuFreq9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg91[4] - -
    Bits: 15:11 MuPhase1(rw) - BW select tap 1 for Phase adjust loop.
    Bits: 10:6  MuPhase2(rw) - BW select tap 2 for Phase adjust loop.
    Bits:  5:1  MuPhase3(rw) - BW select tap 3 for Phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91(_x)           (0x0000096c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91_MuPhase1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91_MuPhase1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91_MuPhase2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91_MuPhase2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91_MuPhase3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg91_MuPhase3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg92[4] - -
    Bits: 15:11 MuPhase4(rw) - BW select tap 4 for Phase adjust loop.
    Bits: 10:6  MuPhase5(rw) - BW select tap 5 for Phase adjust loop.
    Bits:  5:1  MuPhase6(rw) - BW select tap 6 for Phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92(_x)           (0x00000970 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92_MuPhase4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92_MuPhase4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92_MuPhase5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92_MuPhase5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92_MuPhase6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg92_MuPhase6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg93[4] - -
    Bits: 15:11 MuPhase7(rw) - BW select tap 7 for Phase adjust loop.
    Bits: 10:6  MuPhase8(rw) - BW select tap 8 for Phase adjust loop.
    Bits:  5:1  MuPhase9(rw) - BW select tap 9 for Phase adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93(_x)           (0x00000974 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93_MuPhase7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93_MuPhase7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93_MuPhase8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93_MuPhase8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93_MuPhase9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg93_MuPhase9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg94[4] - -
    Bits: 15    PinOverride(rw) - 32 Bit counter used for MU tap for the DFE loops
    Bits: 14:8  PushPiaccVal(rw) - Manul Code load for PI accumulator
    Bits:  7    PushPiacc(rw) - Manul load enable for PI accumulator
    Bits:  6:5  FreqloopLimit(rw) - Freq Loop accumulator limit.
    Bits:  4:3  H1Skew(rw) - H1 Skew for Eye Scan block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94(_x)           (0x00000978 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_PinOverride BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_PushPiaccVal(_x) (((_x) & 0x7f) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_PushPiaccVal_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_PushPiacc   BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_FreqloopLimit(_x) (((_x) & 0x3) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_FreqloopLimit_of(_x) (((_x) >> 5) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_H1Skew(_x)  (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg94_H1Skew_of(_x) (((_x) >> 3) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg95[4] - -
    Bits: 15:0  MuMaxTimerMsb(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg95(_x)           (0x0000097c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg95_MuMaxTimerMsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg95_MuMaxTimerMsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg96[4] - -
    Bits: 15:0  MuMaxTimerLsb(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg96(_x)           (0x00000980 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg96_MuMaxTimerLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg96_MuMaxTimerLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg97[4] - -
    Bits: 15:0  DFETapSnapReadoutMsb(ro) - Read DFE tap value one at a time selectable using DFE_TAP_select.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg97(_x)           (0x00000984 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg97_DFETapSnapReadoutMsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg97_DFETapSnapReadoutMsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg98[4] - -
    Bits: 15:0  DFETapSnapReadoutLsb(ro) - Read DFE tap value one at a time selectable using DFE_TAP_select.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg98(_x)           (0x00000988 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg98_DFETapSnapReadoutLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg98_DFETapSnapReadoutLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg99[4] - -
    Bits: 15:0  DFETapWriteMsb(rw) - Write DFE tap value one at a time selectable using DFE_TAP_select for manual tap programming.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg99(_x)           (0x0000098c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg99_DFETapWriteMsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg99_DFETapWriteMsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg100[4] - -
    Bits: 15:0  DFETapWriteLsb(rw) - Write DFE tap value one at a time selectable using DFE_TAP_select for manual tap programming.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg100(_x)          (0x00000990 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg100_DFETapWriteLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg100_DFETapWriteLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg101[4] - -
    Bits: 15:0  CDRBwMaxTimer1(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg101(_x)          (0x00000994 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg101_CDRBwMaxTimer1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg101_CDRBwMaxTimer1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg102[4] - -
    Bits: 15:0  CDRBwMaxTimer0(rw) - Programmable max timer compared with the timer
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg102(_x)          (0x00000998 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg102_CDRBwMaxTimer0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg102_CDRBwMaxTimer0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg103[4] - -
    Bits: 15:0  FtSearchTimer(rw) - Programmable timer between FT search tap/postion update
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg103(_x)          (0x0000099c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg103_FtSearchTimer(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg103_FtSearchTimer_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg104[4] - -
    Bits: 15    FloatSelect(rw) - Select Floating tap positions. 0 = 6 Fixed, 1 = 5 fixed
    Bits: 14    ForceFtPos0(rw) - Enable for forcing Floating tap postion from register for First FT tap
    Bits: 13    ForceFtPos1(rw) - Enable for forcing Floating tap postion from register for second FT tap
    Bits: 12    ForceFtPos2(rw) - Enable for forcing Floating tap postion from register for Third FT tap
    Bits: 11    ForceFtPos3(rw) - Enable for forcing Floating tap postion from register for fourth FT tap
    Bits: 10    ForceFtPos4(rw) - Enable for forcing Floating tap postion from register for Fifth FT tap
    Bits:  9    ForceFtWgt0(rw) - Enable for forcing Floating tap weight from register for first FT tap
    Bits:  8    ForceFtWgt1(rw) - Enable for forcing Floating tap weight from register for second FT tap
    Bits:  7    ForceFtWgt2(rw) - Enable for forcing Floating tap weight from register for third FT tap
    Bits:  6    ForceFtWgt3(rw) - Enable for forcing Floating tap weight from register for Fourth FT tap
    Bits:  5    ForceFtWgt4(rw) - Enable for forcing Floating tap weight from register for Fifth FT tap
    Bits:  4:1  ManWeightFt0(rw) - Manually load the flaoting tap weights for FT Tap0
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104(_x)          (0x000009a0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_FloatSelect BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtPos0 BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtPos1 BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtPos2 BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtPos3 BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtPos4 BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtWgt0 BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtWgt1 BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtWgt2 BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtWgt3 BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ForceFtWgt4 BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ManWeightFt0(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg104_ManWeightFt0_of(_x) (((_x) >> 1) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg105[4] - -
    Bits: 15:10 ManPositionFt0(rw) - Manually load the floating tap position for FT Tap 0
    Bits:  9:6  ManWeightFt1(rw) - Manually load the flaoting tap weights for FT Tap1
    Bits:  5:0  ManPositionFt1(rw) - Manually load the floating tap position for FT Tap 1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105(_x)          (0x000009a4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105_ManPositionFt0(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105_ManPositionFt0_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105_ManWeightFt1(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105_ManWeightFt1_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105_ManPositionFt1(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg105_ManPositionFt1_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg106[4] - -
    Bits: 15:12 ManWeightFt2(rw) - Manually load the flaoting tap weights for FT Tap2
    Bits: 11:6  ManPositionFt2(rw) - Manually load the floating tap position for FT Tap 2
    Bits:  5:2  ManWeightFt3(rw) - Manually load the flaoting tap weights for FT Tap3
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106(_x)          (0x000009a8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106_ManWeightFt2(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106_ManWeightFt2_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106_ManPositionFt2(_x) (((_x) & 0x3f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106_ManPositionFt2_of(_x) (((_x) >> 6) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106_ManWeightFt3(_x) (((_x) & 0xf) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg106_ManWeightFt3_of(_x) (((_x) >> 2) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg107[4] - -
    Bits: 15:10 ManPositionFt3(rw) - Manually load the floating tap position for FT Tap 4
    Bits:  9:6  ManWeightFt4(rw) - Manually load the flaoting tap weights for FT Tap4
    Bits:  5:0  ManPositionFt4(rw) - Manually load the floating tap position for FT Tap 5
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107(_x)          (0x000009ac + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107_ManPositionFt3(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107_ManPositionFt3_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107_ManWeightFt4(_x) (((_x) & 0xf) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107_ManWeightFt4_of(_x) (((_x) >> 6) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107_ManPositionFt4(_x) (((_x) & 0x3f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg107_ManPositionFt4_of(_x) (((_x) >> 0) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg108[4] - -
    Bits: 15:5  EyeCount1(ro) - Eye monitor count output MSB first 16 bits
    Bits:  4    AccFullFlag(ro) - Eye monitor counter is full status
    Bits:  3    RxBistContDone(ro) - RX bist sample count done flag
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg108(_x)          (0x000009b0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg108_EyeCount1(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg108_EyeCount1_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg108_AccFullFlag BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg108_RxBistContDone BIT(3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg109[4] - -
    Bits: 15:0  EyeCount0(ro) - Eye monitor count output LSB first 16bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg109(_x)          (0x000009b4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg109_EyeCount0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg109_EyeCount0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg110[4] - -
    Bits: 15:0  CDRAccumRdLsb(ro) - Read outFreq accumulator value, LSB 16 bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg110(_x)          (0x000009b8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg110_CDRAccumRdLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg110_CDRAccumRdLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg111[4] - -
    Bits: 15:6  CDRAccumRdMsb(ro) - Read out Freq accumulator value. MSB 10bits
    Bits:  5:1  SumosCalCode(ro) - Summer offset Cal Code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg111(_x)          (0x000009bc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg111_CDRAccumRdMsb(_x) (((_x) & 0x3ff) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg111_CDRAccumRdMsb_of(_x) (((_x) >> 6) & 0x3ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg111_SumosCalCode(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg111_SumosCalCode_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg112[4] - -
    Bits: 15:0  EyeAccumulator1(ro) - Eye Monitor Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg112(_x)          (0x000009c0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg112_EyeAccumulator1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg112_EyeAccumulator1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg113[4] - -
    Bits: 15:0  EyeAccumulator0(ro) - Eye Monitor Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg113(_x)          (0x000009c4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg113_EyeAccumulator0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg113_EyeAccumulator0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg114[4] - -
    Bits: 15:9  PqReg(rw) - Programmable PQ skew
    Bits:  8:2  QiReg(rw) - Programmable EyeScan horizontal skew
    Bits:  1    SignQiReg(rw) - Sign bit to select add or sub for PI with QI
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg114(_x)          (0x000009c8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg114_PqReg(_x)  (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg114_PqReg_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg114_QiReg(_x)  (((_x) & 0x7f) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg114_QiReg_of(_x) (((_x) >> 2) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg114_SignQiReg  BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg115[4] - -
    Bits: 15:10 DOLatchMancal(rw) - Manul programming of cal latch code
    Bits:  9:4  XOLatchMancal(rw) - Manul programming of cal latch code
    Bits:  3    LatchManCalEna(rw) - Manual Latch calibration enable.
    Bits:  2    ForceLatCalStart(rw) - Manual start the calibration
    Bits:  1    ForceSumCalStart(rw) - Manual start the calibration
    Bits:  0    ForceCtleCalStart(rw) - Manual start the calibration
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115(_x)          (0x000009cc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_DOLatchMancal(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_DOLatchMancal_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_XOLatchMancal(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_XOLatchMancal_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_LatchManCalEna BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_ForceLatCalStart BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_ForceSumCalStart BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg115_ForceCtleCalStart BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg116[4] - -
    Bits: 15:10 EOLatchMancal(rw) - Manual programming of cal latch code
    Bits:  9:4  SOLatchMancal(rw) - Manual programming of cal latch code
    Bits:  3:2  LatchCalWaitSel(rw) - Controls wait time between codes during latch calibration, in refclk cycles 0 = 15 cycles 1 = 63 cycles 2 = 255 cycles 3 = 1023 cycles
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116(_x)          (0x000009d0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116_EOLatchMancal(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116_EOLatchMancal_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116_SOLatchMancal(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116_SOLatchMancal_of(_x) (((_x) >> 4) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116_LatchCalWaitSel(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg116_LatchCalWaitSel_of(_x) (((_x) >> 2) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg117[4] - -
    Bits: 15:10 DELatchMancal(rw) - Manul programming of cal latch code
    Bits:  9:4  XELatchMancal(rw) - Manul programming of cal latch code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg117(_x)          (0x000009d4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg117_DELatchMancal(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg117_DELatchMancal_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg117_XELatchMancal(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg117_XELatchMancal_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg118[4] - -
    Bits: 15:10 EELatchMancal(rw) - Manual programming of cal latch code
    Bits:  9:4  SELatchMancal(rw) - Manual programming of cal latch code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg118(_x)          (0x000009d8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg118_EELatchMancal(_x) (((_x) & 0x3f) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg118_EELatchMancal_of(_x) (((_x) >> 10) & 0x3f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg118_SELatchMancal(_x) (((_x) & 0x3f) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg118_SELatchMancal_of(_x) (((_x) >> 4) & 0x3f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg119[4] - -
    Bits: 15:5  InitFreqRampNMsb(rw) - Initial negative frequency ramp loop accumulator value, MSB
    Bits:  4    Loadfreqramp(rw) - Loads values in initFreqRamp[P/N]_[msb/lsb] to internal accumulators
    Bits:  3    PhzManual(rw) - Manual phase adjust select 0 = Normal mode : Adaptation, 1=Manual program mode
    Bits:  2    SignPq(rw) - Sign bit to select add or sub for PI with PQ
    Bits:  1    SignPq2c(rw) - Sign bit for 2's complement
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119(_x)          (0x000009dc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119_InitFreqRampNMsb(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119_InitFreqRampNMsb_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119_Loadfreqramp BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119_PhzManual  BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119_SignPq     BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg119_SignPq2c   BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg120[4] - -
    Bits: 15:0  InitFreqRampNLsb(rw) - Initial negative frequency ramp loop accumulator value, LSB
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg120(_x)          (0x000009e0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg120_InitFreqRampNLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg120_InitFreqRampNLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg121[4] - -
    Bits: 15:5  InitFreqRampPMsb(rw) - Initial positive frequency ramp loop accumulator value, MSB
    Bits:  4:0  PhzManualcode(rw) - manual phase adjust for PQ.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg121(_x)          (0x000009e4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg121_InitFreqRampPMsb(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg121_InitFreqRampPMsb_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg121_PhzManualcode(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg121_PhzManualcode_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg122[4] - -
    Bits: 15:0  InitFreqRampPLsb(rw) - Initial positive frequency ramp loop accumulator value, LSB
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg122(_x)          (0x000009e8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg122_InitFreqRampPLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg122_InitFreqRampPLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg123[4] - -
    Bits: 15:5  RampregNMsb(rw) - Unused
    Bits:  4:1  TxFifoDepth(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg123(_x)          (0x000009ec + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg123_RampregNMsb(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg123_RampregNMsb_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg123_TxFifoDepth(_x) (((_x) & 0xf) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg123_TxFifoDepth_of(_x) (((_x) >> 1) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg124[4] - -
    Bits: 15:0  RampregNLsb(rw) - Unused
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg124(_x)          (0x000009f0 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg124_RampregNLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg124_RampregNLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg125[4] - -
    Bits: 15:5  RampregPMsb(rw) - Unused
    Bits:  4:0  RxFifoDepth(rw) - Reserved
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg125(_x)          (0x000009f4 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg125_RampregPMsb(_x) (((_x) & 0x7ff) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg125_RampregPMsb_of(_x) (((_x) >> 5) & 0x7ff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg125_RxFifoDepth(_x) (((_x) & 0x1f) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg125_RxFifoDepth_of(_x) (((_x) >> 0) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg126[4] - -
    Bits: 15:0  RampregPLsb(rw) - Unused
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg126(_x)          (0x000009f8 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg126_RampregPLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg126_RampregPLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg127[4] - -
    Bits: 15:2  MeanFreqShift(rw) - Ramp control mean freq shift code
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg127(_x)          (0x000009fc + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg127_MeanFreqShift(_x) (((_x) & 0x3fff) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg127_MeanFreqShift_of(_x) (((_x) >> 2) & 0x3fff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg128[4] - -
    Bits: 15:8  TXSpare(rw) - Spare input pin for TX, future enhancement.
    Bits:  7    ForceRxlos(rw) - Force RXLOS to 0
    Bits:  6    SkipRxlosOn(rw) - Skip RXLOS on status for RXLOS filter
    Bits:  5    UseRawrxlos(rw) - Use raw rxlos for loop freezing
    Bits:  4    BypassRxlos(rw) - Bypass using rxlos to freeze loops for high data rates
    Bits:  3:2  Rxjtagos(rw) - Jtag receiver offset voltage programming
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128(_x)          (0x00000a00 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_TXSpare(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_TXSpare_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_ForceRxlos BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_SkipRxlosOn BIT(6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_UseRawrxlos BIT(5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_BypassRxlos BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_Rxjtagos(_x) (((_x) & 0x3) << 2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg128_Rxjtagos_of(_x) (((_x) >> 2) & 0x3)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg129[4] - -
    Bits: 15:14 RxdfeConfig(rw) - Dfe 10tap configuration, 0 -All, 1 - fixed taps, 3 - 2 taps.
    Bits: 13:10 RxdfeFltConfig(rw) - Dfe flaoting tap configuration
    Bits:  9:7  RxdfetapAdj(rw) - Adjustment of DFE tap value ranges 0 = 100% 1 = 109% 2 = 114% 3 = 124% 4 = 100% 5 = 93% 6 = 88% 7 = 82%
    Bits:  6:5  RxdfebufVcm(rw) - Common-mode voltage at DFE pre-buffer output: 00 = 800mV 01 = 832mV 10 = 752 mV 11 = 785mV
    Bits:  4:3  RxlatcalibAdj(rw) - Sets the range for DFE latch offset correction: 00 = 100% 01 = 115% 10 = 85% 11 = 95%
    Bits:  2    RxvwesLatena(rw) - Eye Scan Lat enable
    Bits:  1    RxesEna(rw) - Eye Scan enable
    Bits:  0    TxIdleSata(rw) - idle signal for sata mode comwake and comreset function
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129(_x)          (0x00000a04 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfeConfig(_x) (((_x) & 0x3) << 14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfeConfig_of(_x) (((_x) >> 14) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfeFltConfig(_x) (((_x) & 0xf) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfeFltConfig_of(_x) (((_x) >> 10) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfetapAdj(_x) (((_x) & 0x7) << 7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfetapAdj_of(_x) (((_x) >> 7) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfebufVcm(_x) (((_x) & 0x3) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxdfebufVcm_of(_x) (((_x) >> 5) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxlatcalibAdj(_x) (((_x) & 0x3) << 3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxlatcalibAdj_of(_x) (((_x) >> 3) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxvwesLatena BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_RxesEna    BIT(1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg129_TxIdleSata BIT(0)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg130[4] - -
    Bits: 15:12 ClkRateRxlosft(rw) - Rxlos filter clock rate selection
    Bits: 11:8  SamplerateRxlosft(rw) - Rxlos filter sampel rate selection
    Bits:  7:4  ThresholdcountOff(rw) - rxlos filter threshold window off selection
    Bits:  3:0  ThresholdcountOn(rw) - rxlos filter threshold window on selection
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130(_x)          (0x00000a08 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_ClkRateRxlosft(_x) (((_x) & 0xf) << 12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_ClkRateRxlosft_of(_x) (((_x) >> 12) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_SamplerateRxlosft(_x) (((_x) & 0xf) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_SamplerateRxlosft_of(_x) (((_x) >> 8) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_ThresholdcountOff(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_ThresholdcountOff_of(_x) (((_x) >> 4) & 0xf)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_ThresholdcountOn(_x) (((_x) & 0xf) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg130_ThresholdcountOn_of(_x) (((_x) >> 0) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg131[4] - -
    Bits: 15:0  StmcOverride(rw) - State machine control over ride for Channel enables.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg131(_x)          (0x00000a0c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg131_StmcOverride(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg131_StmcOverride_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg132[4] - -
    Bits: 15:0  RxBistWordCnt0(rw) - Trip counter0 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg132(_x)          (0x00000a10 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg132_RxBistWordCnt0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg132_RxBistWordCnt0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg133[4] - -
    Bits: 15:0  RxBistWordCnt1(rw) - Trip counter1 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg133(_x)          (0x00000a14 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg133_RxBistWordCnt1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg133_RxBistWordCnt1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg134[4] - -
    Bits: 15:0  RxBistWordCnt2(rw) - Trip counter2 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg134(_x)          (0x00000a18 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg134_RxBistWordCnt2(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg134_RxBistWordCnt2_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg135[4] - -
    Bits: 15:0  RxBistWordCnt3(rw) - Trip counter3 to stop the error counting inside the rx Bist block
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg135(_x)          (0x00000a1c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg135_RxBistWordCnt3(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg135_RxBistWordCnt3_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg136[4] - -
    Bits: 15:0  RxBistErrCntMsb(ro) - Bist error count Upper 16bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg136(_x)          (0x00000a20 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg136_RxBistErrCntMsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg136_RxBistErrCntMsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg137[4] - -
    Bits: 15:0  RxBistErrCntLsb(ro) - Bist Error counter Lower 16bits
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg137(_x)          (0x00000a24 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg137_RxBistErrCntLsb(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg137_RxBistErrCntLsb_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg138[4] - -
    Bits: 15    RxFifoDbgPd(rw) - Power down rx fifo debug logic
    Bits: 14:8  BlwcGainManProg(rw) - Manual BLWC prog value
    Bits:  7:4  BCTapEna(rw) - Back channel loops TX BC3. 0001 = TXBC CN2, 0010 = TXBC CN1, 0100 = TXBC C0, 1000 = TXBC CP1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg138(_x)          (0x00000a28 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg138_RxFifoDbgPd BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg138_BlwcGainManProg(_x) (((_x) & 0x7f) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg138_BlwcGainManProg_of(_x) (((_x) >> 8) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg138_BCTapEna(_x) (((_x) & 0xf) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg138_BCTapEna_of(_x) (((_x) >> 4) & 0xf)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg139[4] - -
    Bits: 15:11 MuFramp1(rw) - BW select tap 1 for freq ramp adjust loop.
    Bits: 10:6  MuFramp2(rw) - BW select tap 2 for freq ramp adjust loop.
    Bits:  5:1  MuFramp3(rw) - BW select tap 3for freq ramp adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139(_x)          (0x00000a2c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139_MuFramp1(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139_MuFramp1_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139_MuFramp2(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139_MuFramp2_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139_MuFramp3(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg139_MuFramp3_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg140[4] - -
    Bits: 15:11 MuFramp4(rw) - BW select tap 4 for freq ramp adjust loop.
    Bits: 10:6  MuFramp5(rw) - BW select tap 5 for freq ramp adjust loop.
    Bits:  5:1  MuFramp6(rw) - BW select tap 6 for freq ramp adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140(_x)          (0x00000a30 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140_MuFramp4(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140_MuFramp4_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140_MuFramp5(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140_MuFramp5_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140_MuFramp6(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg140_MuFramp6_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg141[4] - -
    Bits: 15:11 MuFramp7(rw) - BW select tap 7 for freq ramp adjust loop.
    Bits: 10:6  MuFramp8(rw) - BW select tap 8 for freq ramp adjust loop.
    Bits:  5:1  MuFramp9(rw) - BW select tap 9 for freq ramp adjust loop.
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141(_x)          (0x00000a34 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141_MuFramp7(_x) (((_x) & 0x1f) << 11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141_MuFramp7_of(_x) (((_x) >> 11) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141_MuFramp8(_x) (((_x) & 0x1f) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141_MuFramp8_of(_x) (((_x) >> 6) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141_MuFramp9(_x) (((_x) & 0x1f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg141_MuFramp9_of(_x) (((_x) >> 1) & 0x1f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg142[4] - -
    Bits: 15    SumCalibDone(ro) - Summer calirbation Done Status
    Bits: 14    SumCalibErr(ro) - Summer calibation Error Status
    Bits: 13    CtleCalibDone(ro) - CTLE calibration Done status
    Bits: 12    CtleCalibError(ro) - Ctle Calibration Error status
    Bits: 11    LatCalibDone(ro) - Latch calibration completed
    Bits: 10    FtSrcDone(ro) - Ft search done status
    Bits:  9    BckAckCn(ro) - Read CN ack send to upper layer for BC adaptaion
    Bits:  8    BckAckCp(ro) - Read CP ack send to upper layer for BC adaptaion
    Bits:  7    RxBistPass(ro) - Bert Test sync pass, This bit is asserted when bert compare passes.
    Bits:  6    RxBistFail(ro) - Bert status bits get asserted with one failure
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142(_x)          (0x00000a38 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_SumCalibDone BIT(15)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_SumCalibErr BIT(14)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_CtleCalibDone BIT(13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_CtleCalibError BIT(12)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_LatCalibDone BIT(11)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_FtSrcDone  BIT(10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_BckAckCn   BIT(9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_BckAckCp   BIT(8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_RxBistPass BIT(7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg142_RxBistFail BIT(6)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg143[4] - -
    Bits: 15:9  DFEPresetValueBctap0(rw) - Preset value for BCtap0
    Bits:  7:1  DFEPresetValueBctap1(rw) - Preset Value for BCtap1
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg143(_x)          (0x00000a3c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg143_DFEPresetValueBctap0(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg143_DFEPresetValueBctap0_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg143_DFEPresetValueBctap1(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg143_DFEPresetValueBctap1_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg144[4] - -
    Bits: 15:9  DFEPresetValueBlw(rw) - Preset value for BLW
    Bits:  7:1  DFEPresetValuePhtap(rw) - Preset Value for phtap
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg144(_x)          (0x00000a40 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg144_DFEPresetValueBlw(_x) (((_x) & 0x7f) << 9)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg144_DFEPresetValueBlw_of(_x) (((_x) >> 9) & 0x7f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg144_DFEPresetValuePhtap(_x) (((_x) & 0x7f) << 1)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg144_DFEPresetValuePhtap_of(_x) (((_x) >> 1) & 0x7f)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg145[4] - -
    Bits: 15:0  EyeTAccumulator1(ro) - Eye Monitor total Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg145(_x)          (0x00000a44 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg145_EyeTAccumulator1(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg145_EyeTAccumulator1_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg146[4] - -
    Bits: 15:0  EyeTAccumulator0(ro) - Eye Monitor total Accumulator read out
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg146(_x)          (0x00000a48 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg146_EyeTAccumulator0(_x) (((_x) & 0xffff) << 0)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg146_EyeTAccumulator0_of(_x) (((_x) >> 0) & 0xffff)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg147[4] - -
    Bits: 15:13 TxSupregdTrim(rw) - Supreg voltage reference trim
    Bits: 12:10 TxSupregTrim(rw) - Supreg voltage reference trim
    Bits:  9:5  TxSd0(rw) - Tap TX C0 code
    Bits:  4    TxPvtmapEnb(rw) - PVT compensation disable, 0 enable, 1 disable.
    Bits:  3    TxHpd(rw) - 100ohms mode enable
    Bits:  2    TxHizslum(rw) - 100ohms slum mode enable
    Bits:  1    TxDirDatasel(rw) - Bypass internal mux for Txdata .
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147(_x)          (0x00000a4c + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxSupregdTrim(_x) (((_x) & 0x7) << 13)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxSupregdTrim_of(_x) (((_x) >> 13) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxSupregTrim(_x) (((_x) & 0x7) << 10)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxSupregTrim_of(_x) (((_x) >> 10) & 0x7)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxSd0(_x)  (((_x) & 0x1f) << 5)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxSd0_of(_x) (((_x) >> 5) & 0x1f)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxPvtmapEnb BIT(4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxHpd      BIT(3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxHizslum  BIT(2)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg147_TxDirDatasel BIT(1)
/*----------------------------------------------------------------
  Register: Rxtx_RxtxReg148[4] - -
    Bits: 15:8  LatchCalData(ro) - Latch data bits for manual calibration. Order Dke, Dko, Xke,Xko,Eke,Eko,Ske,Sko
    Bits:  7:6  SummCountPrdSel(rw) - Summer calibration wait between sample in refclk cycles. 00 = ox7f, 01 = ox3f, 10 = oxaf,11=oxff
    Bits:  5:4  PqStepPrd(rw) - PQ decrement or increment update rate, 0 - every cycle, 1 - every 2 cycels, 2 = every 4 cycles,3 = every 8 cycels
*/
#define NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148(_x)          (0x00000a50 + (0x400 * ((_x) & 0x3)))
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148_LatchCalData(_x) (((_x) & 0xff) << 8)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148_LatchCalData_of(_x) (((_x) >> 8) & 0xff)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148_SummCountPrdSel(_x) (((_x) & 0x3) << 6)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148_SummCountPrdSel_of(_x) (((_x) >> 6) & 0x3)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148_PqStepPrd(_x) (((_x) & 0x3) << 4)
#define   NFP3800_NBI_MACX_SERDES_Rxtx_RxtxReg148_PqStepPrd_of(_x) (((_x) >> 4) & 0x3)

#endif /* NFP3800_LONGNAMES */


#endif /* NFP3800_NBI_MAC_H */
