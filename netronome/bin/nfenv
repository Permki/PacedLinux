#!/bin/bash

nfenv_top=$( dirname "$(readlink -e ${BASH_SOURCE[0]})" )
nfenv_top=$( cd $nfenv_top/.. && pwd )

nfenv_nfasinc=""
nfenv_nfasinc+=" $nfenv_top/components/standardlibrary/include"
nfenv_nfasinc+=" $nfenv_top/components/standardlibrary/microcode/include"
nfenv_nfasinc+=" $nfenv_top/components/standardlibrary/microcode/src"

nfenv_nfccinc=""
nfenv_nfccinc+=" $nfenv_top/components/standardlibrary/include"
nfenv_nfccinc+=" $nfenv_top/components/standardlibrary/microc/include"
nfenv_nfccinc+=" $nfenv_top/components/standardlibrary/microc/src"

help() {
    cat <<EOT
NFP SDK Toolchain Environment Setup

This Bash script can be executed to start a new shell or sourced to modify the
current shell environment. The default (and minimum) is to append the toolchain
bin directory to PATH.

Usage:
$0 [options]

Options
  -h        This message
  -n        Dry run. Only print the environment variables that would be set
            along with the new values.
  -I        Set NFAS_INCLUDE and NFCC_INCLUDE.
  -p        Prepend path variables.
            Insert new values for PATH and other variables at the front,
            making them take precedence over any existing paths.
  -q        Don't print version message when starting new shell.

  -s        The shell command to use, defaults to \$SHELL.
  -1        If the script is being executed and not sourced and if the shell
            prompt is recognised, insert an SDK version number.
            Specifically, for each shell as follows:
            bash: In PS1 replace '\\$' with '[NFP SDK <version>] \\$'
            zsh: In PROMPT replace '%#' with '[NFP SDK <version>] %#'
EOT
}

nfenv_set() {
    sep=$1; shift
    key=$1; shift
    val=''

    if [[ "$sep" != "" && "${!key}" != "" ]]; then
        if [[ $opt_prepend == 0 ]]; then
            val="${!key}${sep}"
        else
            val="${sep}${!key}"
        fi
    fi

    while [[ $# -gt 1 ]]; do
        if [[ $opt_prepend == 0 ]]; then
            val="${val}""$1""${sep}"
        else
            val="${sep}""$1""${val}"
        fi

        shift
    done

    if [[ $opt_prepend == 0 ]]; then
        val="${val}""$1"
    else
        val="$1""${val}"
    fi

    if [[ $opt_dryrun == 1 ]]; then
        echo "export $key=$val"
    else
        eval export $key="\$val"
    fi
}

main() {
    nfenv_set ':' PATH "$nfenv_top/bin"

    if [[ $opt_inc != 0 ]]; then
        nfenv_set ';' NFAS_INCLUDE $nfenv_nfasinc
        nfenv_set ':' NFCC_INCLUDE $nfenv_nfccinc
    fi

    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        # Script is executed, not sourced
        [[ $opt_dryrun != 0 ]] && exit
        ver=$(nfas --version | awk '/Version:/ { print $2 }')
        if [[ $opt_q == 0 ]]; then
            cat <<EOT
<<<< NFP SDK Shell, version: $ver >>>>
EOT
        fi
        if [[ "$opt_s" == *"bash"* ]]; then
            shcmd="$opt_s"
            if [[ $opt_1 != 0 ]]; then
                tmp=$(mktemp --tmpdir -d "nfp_sdk_bashtmp_XXXXXXXX")
                shcmd="$shcmd --rcfile \"$tmp/.bashrc\""
                cat > "$tmp/.bashrc" <<EOT
[[ -f /etc/bash.bashrc ]] && source /etc/bash.bashrc
[[ -f ~/.bashrc ]] && source ~/.bashrc
export PS1=""\$(echo "\$PS1" | awk '{gsub(/\\\\\\\$/, "[NFP SDK "$ver"] &"); print}')""
EOT
            fi
            eval $shcmd # Exec shell
            ret=$?
            if [[ "$tmp" != "" ]]; then
                rm -r "$tmp"
            fi
            exit $ret

        elif [[ "$opt_s" == *"zsh"* ]]; then
            tmp=""
            shcmd="$opt_s"
            if [[ $opt_1 != 0 ]]; then
                origzdot=$(zsh -i -c 'echo "::::>>>>$ZDOTDIR<<<<::::"' | \
                    awk -v RS='::::>>>>|<<<<::::' 'RT ~ /<<<<::::/ {print}')
                tmp=$(mktemp --tmpdir -d "nfp_sdk_zshtmp_XXXXXXXX")
                shcmd="ZDOTDIR=\"$tmp\" $shcmd"
                cat > "$tmp/.zshrc" <<EOT
ORIGZDOT="$origzdot"
uf="\${ORIGZDOT:-$HOME}/.zshrc"
[[ "\$ORIGZDOT" != "" ]] && export ZDOTDIR="\$ORIGZDOT"
[[ -f "\$uf" ]] && source "\$uf"
export PS1=\$(echo "\$PS1" | awk '{gsub(/%#/, "[NFP SDK '"$ver"'] &"); print}')
EOT
            fi
            eval $shcmd # Exec shell
            ret=$?
            if [[ "$tmp" != "" ]]; then
                rm -r "$tmp"
            fi
            exit $ret

        else
            $opt_s
            exit $?
        fi
    fi

    # Script is sourced, do nothing else
}

opt_dryrun=0
opt_inc=0
opt_prepend=0
opt_q=0
opt_1=0
dorun=1
opt_s="$SHELL"
while getopts hnIpq1s: opt; do
    case $opt in
    h) # help
        help
        dorun=0
    ;;
    n) # Dry run, only show env setup
        opt_dryrun=1
    ;;
    I) # Set NF*_INCLUDE env vars
        opt_inc=1
    ;;
    p) # Prepend
        opt_prepend=1
    ;;
    q) # Quiet
        opt_q=1
    ;;
    1) # Set prompt
        opt_1=1
    ;;
    s) # Set shell command
        opt_s="$OPTARG"
    ;;
    ?) # bad arg
        exit 1
    ;;
    esac
done

if [[ $dorun == 0 ]]; then
    [[ "${BASH_SOURCE[0]}" == "${0}" ]] && exit 0
else
    main
fi

